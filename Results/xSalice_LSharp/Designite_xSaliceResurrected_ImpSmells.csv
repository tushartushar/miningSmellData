Implementation smell,Namespace,Class,File,Method,Description
Long Method,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,LoadMenu,The method has 105 lines of code.
Long Method,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,LoadMenu,The method has 120 lines of code.
Long Method,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,LoadMenu,The method has 111 lines of code.
Long Method,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The method has 108 lines of code.
Long Method,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,LoadMenu,The method has 105 lines of code.
Long Method,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The method has 135 lines of code.
Long Method,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The method has 143 lines of code.
Long Method,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,LoadMenu,The method has 130 lines of code.
Long Method,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The method has 122 lines of code.
Long Method,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The method has 143 lines of code.
Long Method,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,CastE,The method has 113 lines of code.
Long Method,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,LoadMenu,The method has 122 lines of code.
Long Method,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadMenu,The method has 112 lines of code.
Long Method,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The method has 112 lines of code.
Long Method,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,SmartKs,The method has 108 lines of code.
Long Method,xSaliceResurrected,PluginLoader,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\PluginLoader.cs,PluginLoader,The method has 161 lines of code.
Long Method,xSaliceResurrected.Persistence,Initiator,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Persistence\Initiator.cs,Initiator,The method has 302 lines of code.
Long Method,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,LoadMenu,The method has 134 lines of code.
Long Method,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,LoadMenu,The method has 119 lines of code.
Long Method,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The method has 102 lines of code.
Long Method,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadMenu,The method has 118 lines of code.
Complex Method,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,UseSpells,Cyclomatic complexity of the method is 10
Complex Method,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,UseSpells,Cyclomatic complexity of the method is 9
Complex Method,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,Drawing_OnDraw,Cyclomatic complexity of the method is 10
Complex Method,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,UseSpells,Cyclomatic complexity of the method is 9
Complex Method,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,Game_OnGameUpdate,Cyclomatic complexity of the method is 9
Complex Method,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,Drawing_OnDraw,Cyclomatic complexity of the method is 13
Complex Method,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,UseSpells,Cyclomatic complexity of the method is 10
Complex Method,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,Drawing_OnDraw,Cyclomatic complexity of the method is 10
Complex Method,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,UseSpells,Cyclomatic complexity of the method is 10
Complex Method,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,Cast_Q,Cyclomatic complexity of the method is 11
Complex Method,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,Drawing_OnDraw,Cyclomatic complexity of the method is 12
Complex Method,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,UseSpells,Cyclomatic complexity of the method is 10
Complex Method,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,Cast_R,Cyclomatic complexity of the method is 10
Complex Method,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,Drawing_OnDraw,Cyclomatic complexity of the method is 10
Complex Method,xSaliceResurrected.Managers,AzirManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AzirManager.cs,GetTarget,Cyclomatic complexity of the method is 15
Complex Method,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,Game_OnGameUpdate,Cyclomatic complexity of the method is 16
Complex Method,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,OnAttack,Cyclomatic complexity of the method is 8
Complex Method,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,SpellbookOnOnCastSpell,Cyclomatic complexity of the method is 9
Complex Method,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,CalcDamage,Cyclomatic complexity of the method is 12
Complex Method,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,CastBestLine,Cyclomatic complexity of the method is 13
Complex Method,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,DrawBestLine,Cyclomatic complexity of the method is 8
Complex Method,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,UseSpells,Cyclomatic complexity of the method is 15
Complex Method,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,CheckKs,Cyclomatic complexity of the method is 8
Complex Method,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,ShouldW,Cyclomatic complexity of the method is 8
Complex Method,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,Cast_R,Cyclomatic complexity of the method is 10
Complex Method,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,Drawing_OnDraw,Cyclomatic complexity of the method is 12
Complex Method,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,UseSpells,Cyclomatic complexity of the method is 9
Complex Method,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,SmartKs,Cyclomatic complexity of the method is 8
Complex Method,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,Farm,Cyclomatic complexity of the method is 15
Complex Method,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,UseSpells,Cyclomatic complexity of the method is 12
Complex Method,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,Farm,Cyclomatic complexity of the method is 10
Complex Method,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,Cast_R,Cyclomatic complexity of the method is 10
Complex Method,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,CheckKs,Cyclomatic complexity of the method is 8
Complex Method,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,Drawing_OnDraw,Cyclomatic complexity of the method is 14
Complex Method,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,UseSpells,Cyclomatic complexity of the method is 18
Complex Method,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,Drawing_OnDraw,Cyclomatic complexity of the method is 11
Complex Method,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,UseSpells,Cyclomatic complexity of the method is 13
Complex Method,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,KsCheck,Cyclomatic complexity of the method is 17
Complex Method,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,AfterAttack,Cyclomatic complexity of the method is 8
Complex Method,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,Drawing_OnDraw,Cyclomatic complexity of the method is 17
Complex Method,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,Interrupter_OnPosibleToInterrupt,Cyclomatic complexity of the method is 8
Complex Method,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,UseSpells,Cyclomatic complexity of the method is 10
Complex Method,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,Game_OnGameUpdate,Cyclomatic complexity of the method is 8
Complex Method,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,UseSpells,Cyclomatic complexity of the method is 16
Complex Method,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,Obj_AI_Base_OnProcessSpellCast,Cyclomatic complexity of the method is 11
Complex Method,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,UseSpells,Cyclomatic complexity of the method is 11
Complex Method,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Cast_W,Cyclomatic complexity of the method is 11
Complex Method,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Cast_R,Cyclomatic complexity of the method is 8
Complex Method,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Game_OnGameUpdate,Cyclomatic complexity of the method is 8
Complex Method,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Drawing_OnDraw,Cyclomatic complexity of the method is 19
Complex Method,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,UseSpells,Cyclomatic complexity of the method is 8
Complex Method,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,Drawing_OnDraw,Cyclomatic complexity of the method is 11
Complex Method,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,UseSpells,Cyclomatic complexity of the method is 11
Complex Method,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,CheckKs,Cyclomatic complexity of the method is 8
Complex Method,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,Drawing_OnDraw,Cyclomatic complexity of the method is 8
Complex Method,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,Combo,Cyclomatic complexity of the method is 12
Complex Method,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,Harass,Cyclomatic complexity of the method is 8
Complex Method,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,SmartKs,Cyclomatic complexity of the method is 20
Complex Method,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,UseSpells,Cyclomatic complexity of the method is 12
Complex Method,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,Game_OnGameUpdate,Cyclomatic complexity of the method is 9
Complex Method,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,Drawing_OnDraw,Cyclomatic complexity of the method is 10
Complex Method,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,UseSpells,Cyclomatic complexity of the method is 8
Complex Method,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,Cast_Q,Cyclomatic complexity of the method is 14
Complex Method,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,Obj_AI_Base_OnProcessSpellCast,Cyclomatic complexity of the method is 12
Complex Method,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,Drawing_OnDraw,Cyclomatic complexity of the method is 12
Complex Method,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,UseSpells,Cyclomatic complexity of the method is 9
Complex Method,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,Cast_Q,Cyclomatic complexity of the method is 17
Complex Method,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,Drawing_OnDraw,Cyclomatic complexity of the method is 13
Complex Method,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,UseSpells,Cyclomatic complexity of the method is 9
Complex Method,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,CastQ,Cyclomatic complexity of the method is 8
Complex Method,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,SmartKs,Cyclomatic complexity of the method is 9
Complex Method,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,Farm,Cyclomatic complexity of the method is 8
Complex Method,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,UseSpells,Cyclomatic complexity of the method is 9
Complex Method,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,Drawing_OnDraw,Cyclomatic complexity of the method is 11
Complex Method,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,UseSpells,Cyclomatic complexity of the method is 9
Complex Method,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,Drawing_OnDraw,Cyclomatic complexity of the method is 8
Complex Method,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnProcessSpell,Cyclomatic complexity of the method is 8
Complex Method,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnDraw,Cyclomatic complexity of the method is 16
Complex Method,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,Orbwalk,Cyclomatic complexity of the method is 8
Complex Method,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,GetBestMinion,Cyclomatic complexity of the method is 10
Complex Method,xSaliceResurrected.Utilities,WardJumper,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\WardJumper.cs,JumpKs,Cyclomatic complexity of the method is 9
Complex Method,xSaliceResurrected.Utilities,WardJumper,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\WardJumper.cs,WardJump,Cyclomatic complexity of the method is 9
Long Parameter List,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,UseSpells,The method has 5 parameters. Parameters: useQ' useW' useE' useR' source
Long Parameter List,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,UseSpells,The method has 5 parameters. Parameters: useQ' useW' useE' useR' source
Long Parameter List,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,UseSpells,The method has 5 parameters. Parameters: useQ' useW' useE' useR' source
Long Parameter List,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,UseSpells,The method has 5 parameters. Parameters: useQ' useW' useE' useR' source
Long Parameter List,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,UseSpells,The method has 5 parameters. Parameters: useQ' useW' useE' useR' source
Long Parameter List,xSaliceResurrected.Managers,AoeSpellManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AOESpellManager.cs,AddHitChanceMenuCombo,The method has 5 parameters. Parameters: q' w' e' r' qe
Long Parameter List,xSaliceResurrected.Managers,HitChanceManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\HitChanceManager.cs,AddHitChanceMenuCombo,The method has 5 parameters. Parameters: q' w' e' r' _qe
Long Parameter List,xSaliceResurrected.Managers,HitChanceManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\HitChanceManager.cs,AddHitChanceMenuHarass,The method has 5 parameters. Parameters: q' w' e' r' _qe
Long Parameter List,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,CastBasicSkillShot,The method has 5 parameters. Parameters: spell' range' type' hitChance' towerCheck
Long Parameter List,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,CastBestLine,The method has 7 parameters. Parameters: forceUlt' spell' spell2' midPointRange' menu' extraPrerange' wallCheck
Long Parameter List,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,DrawBestLine,The method has 5 parameters. Parameters: spell' spell2' midPointRange' extraPrerange' wallCheck
Long Parameter List,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,UseSpells,The method has 5 parameters. Parameters: useQ' useW' useE' useR' source
Long Parameter List,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,UseSpells,The method has 5 parameters. Parameters: useQ' useW' useE' useR' source
Long Parameter List,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,UseSpells,The method has 5 parameters. Parameters: useQ' useW' useE' useR' source
Long Parameter List,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,UseSpells,The method has 5 parameters. Parameters: useQ' useW' useE' useR' source
Long Parameter List,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,UseSpells,The method has 5 parameters. Parameters: useQ' useW' useE' useR' source
Long Parameter List,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,UseSpells,The method has 8 parameters. Parameters: useQ' useW' useE' useQ2' useW2' useE2' useR' source
Long Parameter List,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,SwitchFormCheck,The method has 6 parameters. Parameters: target' useQ' useW' useQ2' useW2' useE2
Long Parameter List,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,UseSpells,The method has 5 parameters. Parameters: useQ' useW' useE' useR' source
Long Parameter List,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,UseSpells,The method has 6 parameters. Parameters: useQ' useW' useE' useR' useQe' source
Long Parameter List,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,UseSpells,The method has 5 parameters. Parameters: useQ' useW' useE' useR' source
Long Parameter List,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,UseSpells,The method has 5 parameters. Parameters: useQ' useW' useE' useR' source
Long Parameter List,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,UseSpells,The method has 5 parameters. Parameters: useQ' useW' useE' useR' source
Long Parameter List,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,UseSpells,The method has 5 parameters. Parameters: useQ' useW' useE' useR' source
Long Parameter List,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,UseSpells,The method has 5 parameters. Parameters: useQ' useW' useE' useR' source
Long Parameter List,xSaliceResurrected.Utilities,Util,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\Util.cs,GetP,The method has 5 parameters. Parameters: pos' spell' target' delay' aoe
Long Statement,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle))); " is 133.
Long Statement,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press))); " is 123.
Long Statement,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("Force_R"' "Force R Lowest"' true).SetValue(new KeyBind("T".ToCharArray()[0]' KeyBindType.Press))); " is 124.
Long Statement,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,LoadMenu,The length of the statement  "                MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4))); " is 138.
Long Statement,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,LoadMenu,The length of the statement  "                customMenu.AddItem(new MenuItem("custMenu"' "Move Menu"' true).SetValue(new KeyBind("L".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,UseSpells,The length of the statement  "                    SpellCastManager.CastBasicSkillShot(R' R.Range' TargetSelector.DamageType.Physical' HitChanceManager.GetRHitChance(source)); " is 124.
Long Statement,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,UseSpells,The length of the statement  "                SpellCastManager.CastBasicSkillShot(W' W.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetWHitChance(source)); " is 123.
Long Statement,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,CheckKs,The length of the statement  "            foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(R.Range)).OrderByDescending(GetComboDamage)) " is 135.
Long Statement,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,CheckKs,The length of the statement  "                if (Player.Distance(target) <= R.Range && Player.GetSpellDamage(target' SpellSlot.R) > target.Health && R.IsReady() && menu.Item("ksR"' true).GetValue<bool>()) " is 159.
Long Statement,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle))); " is 133.
Long Statement,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press))); " is 123.
Long Statement,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,LoadMenu,The length of the statement  "                MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4))); " is 138.
Long Statement,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,LoadMenu,The length of the statement  "                customMenu.AddItem(new MenuItem("custMenu"' "Move Menu"' true).SetValue(new KeyBind("L".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,Combo,The length of the statement  "            UseSpells(menu.Item("UseQCombo"' true).GetValue<bool>()' menu.Item("UseECombo"' true).GetValue<bool>()' menu.Item("UseRCombo"' true).GetValue<bool>()' "Combo"); " is 160.
Long Statement,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,Harass,The length of the statement  "            UseSpells(menu.Item("UseQHarass"' true).GetValue<bool>()' menu.Item("UseEHarass"' true).GetValue<bool>()' menu.Item("UseRHarass"' true).GetValue<bool>()' "Harass"); " is 164.
Long Statement,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,UseSpells,The length of the statement  "                SpellCastManager.CastBasicSkillShot(Q' Q.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetQHitChance(source)); " is 123.
Long Statement,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,Farm,The length of the statement  "                int allMinionECount = MinionManager.GetMinions(Player.ServerPosition' E.Range' MinionTypes.All' MinionTeam.NotAlly).Count; " is 122.
Long Statement,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,Cast_R,The length of the statement  "            if (mode == "Combo" && menu.Item("ComboR_Limit"' true).GetValue<Slider>().Value < Player.Spellbook.GetSpell(SpellSlot.R).Ammo) " is 126.
Long Statement,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,Cast_R,The length of the statement  "            else if (mode == "Harass" && menu.Item("HarassR_Limit"' true).GetValue<Slider>().Value < Player.Spellbook.GetSpell(SpellSlot.R).Ammo) " is 133.
Long Statement,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,Cast_R,The length of the statement  "            else if (mode == "Farm" && menu.Item("LaneClearR_Limit"' true).GetValue<Slider>().Value < Player.Spellbook.GetSpell(SpellSlot.R).Ammo) " is 134.
Long Statement,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,CheckKs,The length of the statement  "            foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(R.Range)).OrderByDescending(GetComboDamage)) " is 135.
Long Statement,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,Drawing_OnDraw,The length of the statement  "                    Render.Circle.DrawCircle(Player.Position' Player.HasBuff("CorkiMissileBarrageCounterBig") ? R.Range : 1300' R.IsReady() ? Color.Green : Color.Red); " is 147.
Long Statement,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle))); " is 133.
Long Statement,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press))); " is 123.
Long Statement,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("R_Nearest_Killable"' "R Nearest Killable"' true).SetValue(new KeyBind("R".ToCharArray()[0]' KeyBindType.Press))); " is 139.
Long Statement,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("Force_R"' "Force R Lowest"' true).SetValue(new KeyBind("I".ToCharArray()[0]' KeyBindType.Press))); " is 124.
Long Statement,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,LoadMenu,The length of the statement  "                miscMenu.AddItem(new MenuItem("Misc_Use_WE"' "Cast WE to mouse"' true).SetValue(new KeyBind("T".ToCharArray()[0]' KeyBindType.Press))); " is 135.
Long Statement,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,LoadMenu,The length of the statement  "                MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4))); " is 138.
Long Statement,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,LoadMenu,The length of the statement  "                customMenu.AddItem(new MenuItem("custMenu"' "Move Menu"' true).SetValue(new KeyBind("L".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,Cast_R_Killable,The length of the statement  "            foreach (var unit in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(20000) && !x.IsDead && x.IsEnemy).OrderBy(x => x.Health)) " is 138.
Long Statement,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,AutoQ,The length of the statement  "                if (Q.GetPrediction(target).Hitchance >= HitChance.High && (target.HasBuffOfType(BuffType.Stun) || target.HasBuffOfType(BuffType.Snare)) && menu.Item("Auto_Q_Immobile"' true).GetValue<bool>()) " is 192.
Long Statement,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,Drawing_OnDraw,The length of the statement  "                foreach (var unit in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(20000) && !x.IsDead && x.IsEnemy).OrderBy(x => x.Health)) " is 138.
Long Statement,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle))); " is 133.
Long Statement,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press))); " is 123.
Long Statement,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,LoadMenu,The length of the statement  "                MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4))); " is 138.
Long Statement,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,LoadMenu,The length of the statement  "                customMenu.AddItem(new MenuItem("custMenu"' "Move Menu"' true).SetValue(new KeyBind("L".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,Combo,The length of the statement  "            UseSpells(menu.Item("UseQCombo"' true).GetValue<bool>()' menu.Item("UseWCombo"' true).GetValue<bool>()' menu.Item("UseECombo"' true).GetValue<bool>()' menu.Item("UseRCombo"' true).GetValue<bool>()' "Combo"); " is 207.
Long Statement,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,Harass,The length of the statement  "            UseSpells(menu.Item("UseQHarass"' true).GetValue<bool>()' menu.Item("UseWHarass"' true).GetValue<bool>()' menu.Item("UseEHarass"' true).GetValue<bool>()' menu.Item("UseRHarass"' true).GetValue<bool>()' "Harass"); " is 212.
Long Statement,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,UseSpells,The length of the statement  "                SpellCastManager.CastBasicSkillShot(Q' Q.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetQHitChance(source)); " is 123.
Long Statement,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,UseSpells,The length of the statement  "                SpellCastManager.CastBasicSkillShot(E' E.Range' TargetSelector.DamageType.Physical' HitChanceManager.GetEHitChance(source)); " is 124.
Long Statement,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,UseSpells,The length of the statement  "                var target = TargetSelector.GetTarget(Player.AttackRange + new[] { 130 ' 150 ' 170 ' 190 ' 210 }[W.Level - 1]' TargetSelector.DamageType.Magical); " is 146.
Long Statement,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,Cast_R,The length of the statement  "                SpellCastManager.CastBasicSkillShot(R' new[] { 1200f' 1500f' 1800f }[R.Level - 1]' TargetSelector.DamageType.Magical' HitChanceManager.GetRHitChance(mode)); " is 156.
Long Statement,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,Cast_R,The length of the statement  "                SpellCastManager.CastBasicSkillShot(R' new[] { 1200f' 1500f' 1800f }[R.Level - 1]' TargetSelector.DamageType.Magical' HitChanceManager.GetRHitChance(mode)); " is 156.
Long Statement,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,CheckKs,The length of the statement  "            foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(R.Range)).OrderByDescending(GetComboDamage)) " is 135.
Long Statement,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,Drawing_OnDraw,The length of the statement  "                    Render.Circle.DrawCircle(Player.Position' Player.AttackRange + new[] { 130' 150' 170' 190' 210 }[W.Level - 1]' W.IsReady() ? Color.Green : Color.Red); " is 150.
Long Statement,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,Drawing_OnDraw,The length of the statement  "                    Render.Circle.DrawCircle(Player.Position' new[] { 1200f' 1500f' 1800f }[R.Level - 1]' R.IsReady() ? Color.Green : Color.Red); " is 125.
Long Statement,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press))); " is 123.
Long Statement,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,LoadMenu,The length of the statement  "                misc.AddItem(new MenuItem("MovementCheck"' "Only Cast Extended Q When Enemy is moving(More Accurate)"' true).SetValue(false)); " is 126.
Long Statement,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,LoadMenu,The length of the statement  "                MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4))); " is 138.
Long Statement,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,LoadMenu,The length of the statement  "                customMenu.AddItem(new MenuItem("custMenu"' "Move Menu"' true).SetValue(new KeyBind("L".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,Combo,The length of the statement  "            UseSpells(menu.Item("UseQCombo"' true).GetValue<bool>()' menu.Item("UseWCombo"' true).GetValue<bool>()' menu.Item("UseECombo"' true).GetValue<bool>()' menu.Item("UseRCombo"' true).GetValue<bool>()' "Combo"); " is 207.
Long Statement,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,Harass,The length of the statement  "            UseSpells(menu.Item("UseQHarass"' true).GetValue<bool>()' menu.Item("UseWHarass"' true).GetValue<bool>()' menu.Item("UseEHarass"' true).GetValue<bool>()' false' "Harass"); " is 171.
Long Statement,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,Cast_Q,The length of the statement  "                var poly = new Geometry.Polygon.Rectangle(Player.ServerPosition' Player.ServerPosition.Extend(minion.ServerPosition' QExtend.Range)' QExtend.Width); " is 148.
Long Statement,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,Cast_W,The length of the statement  "            SpellCastManager.CastBasicSkillShot(W' W.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetWHitChance(source)); " is 123.
Long Statement,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,SmartKs,The length of the statement  "            foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(QExtend.Range) && !x.IsDead && !x.HasBuffOfType(BuffType.Invulnerability))) " is 166.
Long Statement,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,Farm,The length of the statement  "                var minion = allMinions.FirstOrDefault(minionn => minionn.Distance(Player.Position) <= Q.Range && HealthPrediction.LaneClearHealthPrediction(minionn' 500) > 0); " is 160.
Long Statement,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle))); " is 133.
Long Statement,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press))); " is 123.
Long Statement,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,LoadMenu,The length of the statement  "                MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4))); " is 138.
Long Statement,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,LoadMenu,The length of the statement  "                customMenu.AddItem(new MenuItem("custMenu"' "Move Menu"' true).SetValue(new KeyBind("L".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,UseSpells,The length of the statement  "                SpellCastManager.CastBasicSkillShot(E' E.Range' TargetSelector.DamageType.Physical' HitChanceManager.GetEHitChance(source)); " is 124.
Long Statement,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,Farm,The length of the statement  "            var minion = MinionManager.GetMinions(ObjectManager.Player.ServerPosition' Q.Range' MinionTypes.All' MinionTeam.NotAlly); " is 121.
Long Statement,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,Cast_Q,The length of the statement  "                SpellCastManager.CastBasicSkillShot(Q' Q.Range' TargetSelector.DamageType.Physical' HitChanceManager.GetQHitChance(source)); " is 124.
Long Statement,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,CheckKs,The length of the statement  "            foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(Q2.Range)).OrderByDescending(GetComboDamage)) " is 136.
Long Statement,xSaliceResurrected.Managers,AzirManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AzirManager.cs,InSoldierAttackRange,The length of the statement  "            return Soilders.Count(obj => obj.Position.Distance(target.Position) < 350 && MyHero.Distance(target) < 1000 && !obj.IsMoving) > 0; " is 130.
Long Statement,xSaliceResurrected.Managers,AzirManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AzirManager.cs,GetTarget,The length of the statement  "            if (ActiveMode == Orbwalking.OrbwalkingMode.Mixed || ActiveMode == Orbwalking.OrbwalkingMode.LastHit || ActiveMode == Orbwalking.OrbwalkingMode.LaneClear) " is 154.
Long Statement,xSaliceResurrected.Managers,AzirManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AzirManager.cs,GetTarget,The length of the statement  "                foreach (var minion in from minion in ObjectManager.Get<Obj_AI_Minion>().Where(minion => minion.IsValidTarget() && minion.Name != "Beacon" && InAutoAttackRange(minion) " is 167.
Long Statement,xSaliceResurrected.Managers,AzirManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AzirManager.cs,GetTarget,The length of the statement  "                                       where minion.Team != GameObjectTeam.Neutral && predHealth > 0 && predHealth <= (InSoldierAttackRange(minion) ? GetAzirAaSandwarriorDamage(minion) - 30 : MyHero.GetAutoAttackDamage(minion' true)) " is 194.
Long Statement,xSaliceResurrected.Managers,AzirManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AzirManager.cs,GetTarget,The length of the statement  "                foreach (var minion in ObjectManager.Get<Obj_AI_Minion>().Where(minion => minion.IsValidTarget(GetAutoAttackRange(MyHero' minion)) && minion.Name != "Beacon" && minion.Team == GameObjectTeam.Neutral).Where(minion => minion.MaxHealth >= maxhealth2[0] || Math.Abs(maxhealth2[0] - float.MaxValue) < float.Epsilon)) " is 311.
Long Statement,xSaliceResurrected.Managers,AzirManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AzirManager.cs,GetTarget,The length of the statement  "                return (ObjectManager.Get<Obj_AI_Minion>().Where(minion => minion.IsValidTarget() && InAutoAttackRange(minion))).MaxOrDefault(x => x.Health); " is 141.
Long Statement,xSaliceResurrected.Managers,AzirManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AzirManager.cs,GetBestHeroTarget,The length of the statement  "            var bestTarget = HeroManager.Enemies.Where(InAutoAttackRange).OrderByDescending(GetAzirAaSandwarriorDamage).FirstOrDefault(); " is 125.
Long Statement,xSaliceResurrected.Managers,AoeSpellManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AOESpellManager.cs,CastComboMec,The length of the statement  "                Vector3 gateVector = ObjectManager.Player.Position + Vector3.Normalize(target.ServerPosition - ObjectManager.Player.Position)*gateDis; " is 134.
Long Statement,xSaliceResurrected.Managers,AoeSpellManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AOESpellManager.cs,CastComboMec,The length of the statement  "                nearByEnemies += HeroManager.Enemies.Where(x => x.NetworkId != target.NetworkId).Count(enemy => poly.IsInside(enemy.ServerPosition)); " is 133.
Long Statement,xSaliceResurrected.Managers,HitChanceManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\HitChanceManager.cs,AddHitChanceMenuCombo,The length of the statement  "                _menuCombo.AddItem(new MenuItem("qHitCombo"' "Q HitChance"' true).SetValue(new StringList(new[] { "Low"' "Med"' "High"' "Very High" }' 2))); " is 140.
Long Statement,xSaliceResurrected.Managers,HitChanceManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\HitChanceManager.cs,AddHitChanceMenuCombo,The length of the statement  "                _menuCombo.AddItem(new MenuItem("wHitCombo"' "W HitChance"' true).SetValue(new StringList(new[] { "Low"' "Med"' "High"' "Very High" }' 2))); " is 140.
Long Statement,xSaliceResurrected.Managers,HitChanceManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\HitChanceManager.cs,AddHitChanceMenuCombo,The length of the statement  "                _menuCombo.AddItem(new MenuItem("eHitCombo"' "E HitChance"' true).SetValue(new StringList(new[] { "Low"' "Med"' "High"' "Very High" }' 2))); " is 140.
Long Statement,xSaliceResurrected.Managers,HitChanceManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\HitChanceManager.cs,AddHitChanceMenuCombo,The length of the statement  "                _menuCombo.AddItem(new MenuItem("rHitCombo"' "R HitChance"' true).SetValue(new StringList(new[] { "Low"' "Med"' "High"' "Very High" }' 2))); " is 140.
Long Statement,xSaliceResurrected.Managers,HitChanceManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\HitChanceManager.cs,AddHitChanceMenuCombo,The length of the statement  "                _menuCombo.AddItem(new MenuItem("qeHitCombo"' "QE HitChance"' true).SetValue(new StringList(new[] { "Low"' "Med"' "High"' "Very High" }' 2))); " is 142.
Long Statement,xSaliceResurrected.Managers,HitChanceManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\HitChanceManager.cs,AddHitChanceMenuHarass,The length of the statement  "                _menuHarass.AddItem(new MenuItem("qHitHarass"' "Q HitChance"' true).SetValue(new StringList(new[] { "Low"' "Med"' "High"' "Very High" }' 2))); " is 142.
Long Statement,xSaliceResurrected.Managers,HitChanceManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\HitChanceManager.cs,AddHitChanceMenuHarass,The length of the statement  "                _menuHarass.AddItem(new MenuItem("wHitHarass"' "W HitChance"' true).SetValue(new StringList(new[] { "Low"' "Med"' "High"' "Very High" }' 2))); " is 142.
Long Statement,xSaliceResurrected.Managers,HitChanceManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\HitChanceManager.cs,AddHitChanceMenuHarass,The length of the statement  "                _menuHarass.AddItem(new MenuItem("eHitHarass"' "E HitChance"' true).SetValue(new StringList(new[] { "Low"' "Med"' "High"' "Very High" }' 2))); " is 142.
Long Statement,xSaliceResurrected.Managers,HitChanceManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\HitChanceManager.cs,AddHitChanceMenuHarass,The length of the statement  "                _menuHarass.AddItem(new MenuItem("rHitHarass"' "R HitChance"' true).SetValue(new StringList(new[] { "Low"' "Med"' "High"' "Very High" }' 2))); " is 142.
Long Statement,xSaliceResurrected.Managers,HitChanceManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\HitChanceManager.cs,AddHitChanceMenuHarass,The length of the statement  "                _menuHarass.AddItem(new MenuItem("qeHitHarass"' "QE HitChance"' true).SetValue(new StringList(new[] { "Low"' "Med"' "High"' "Very High" }' 2))); " is 144.
Long Statement,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,AddOffensiveItem,The length of the statement  "                active.AddItem(new MenuItem(item.ActiveName + "always"' "Always use"' true).SetValue(item.Mode == 1 || item.Mode == 2)); " is 120.
Long Statement,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,Game_OnGameUpdate,The length of the statement  "                else if (ObjectManager.Player.GetSummonerSpellDamage(Target' Damage.SummonerSpell.Ignite) > Target.Health + 20 && Ignite_Ready()) " is 129.
Long Statement,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,Use_Ignite,The length of the statement  "            if (target != null && IgniteSlot != SpellSlot.Unknown && ObjectManager.Player.Spellbook.CanUseSpell(IgniteSlot) == SpellState.Ready && ObjectManager.Player.Distance(target.Position) < 650) " is 188.
Long Statement,xSaliceResurrected.Managers,ManaManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ManaManager.cs,FullManaCast,The length of the statement  "            if (ObjectManager.Player.Mana >= SpellManager.QSpell.ManaCost + SpellManager.WSpell.ManaCost + SpellManager.ESpell.ManaCost + SpellManager.RSpell.ManaCost) " is 155.
Long Statement,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,CastBasicFarm,The length of the statement  "            var minion = MinionManager.GetMinions(ObjectManager.Player.ServerPosition' spell.Range' MinionTypes.All' MinionTeam.NotAlly); " is 125.
Long Statement,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,CastSingleLine,The length of the statement  "            var vector1 = Player.ServerPosition + Vector3.Normalize(target.ServerPosition - Player.ServerPosition) * (spell.Range * extraPrerange); " is 135.
Long Statement,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,CastSingleLine,The length of the statement  "            Geometry.Polygon.Rectangle rec1 = new Geometry.Polygon.Rectangle(vector1' vector1.Extend(pred.CastPosition' spell2.Range)' spell.Width); " is 136.
Long Statement,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,CastSingleLine,The length of the statement  "                Geometry.Polygon.Rectangle rec2 = new Geometry.Polygon.Rectangle(vector2' vector2.Extend(pred.CastPosition' spell2.Range)' spell.Width); " is 136.
Long Statement,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,CastBestLine,The length of the statement  "                foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range + spell2.Range) && x.NetworkId != target1.NetworkId " is 145.
Long Statement,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,CastBestLine,The length of the statement  "                        foreach (var enemy2 in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range + spell2.Range) && x.NetworkId != target3.NetworkId && x.NetworkId != enemy1.NetworkId && x.Distance(target3.Position) < 1000)) " is 222.
Long Statement,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,CastBestLine,The length of the statement  "                if (menu.Item("ComboActive"' true).GetValue<KeyBind>().Active && maxHit >= menu.Item("Line_If_Enemy_Count_Combo"' true).GetValue<Slider>().Value) " is 145.
Long Statement,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,DrawBestLine,The length of the statement  "                foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range + spell2.Range) && x.NetworkId != target1.NetworkId " is 145.
Long Statement,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,DrawBestLine,The length of the statement  "                        foreach (var enemy2 in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range + spell2.Range) && x.NetworkId != target3.NetworkId && x.NetworkId != enemy1.NetworkId && x.Distance(target3.Position) < spell2.Range)) " is 230.
Long Statement,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,DrawBestLine,The length of the statement  "                var vector1 = Player.ServerPosition + Vector3.Normalize(target.ServerPosition - Player.ServerPosition) * (spell.Range * extraPrerange); " is 135.
Long Statement,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,DrawBestLine,The length of the statement  "                Geometry.Polygon.Rectangle rec1 = new Geometry.Polygon.Rectangle(vector1' vector1.Extend(pred.CastPosition' spell2.Range)' spell.Width); " is 136.
Long Statement,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,DrawBestLine,The length of the statement  "                    Geometry.Polygon.Rectangle rec2 = new Geometry.Polygon.Rectangle(vector1' vector1.Extend(pred.CastPosition' spell2.Range)' spell.Width); " is 136.
Long Statement,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle))); " is 133.
Long Statement,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press))); " is 123.
Long Statement,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("charmCombo"' "Q if Charmed in Combo"' true).SetValue(new KeyBind("I".ToCharArray()[0]' KeyBindType.Toggle))); " is 135.
Long Statement,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The length of the statement  "                MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4))); " is 138.
Long Statement,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The length of the statement  "                customMenu.AddItem(new MenuItem("custMenu"' "Move Menu"' true).SetValue(new KeyBind("L".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,UseSpells,The length of the statement  "                SpellCastManager.CastBasicSkillShot(E' E.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetEHitChance(source)); " is 123.
Long Statement,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,UseSpells,The length of the statement  "                    SpellCastManager.CastBasicSkillShot(Q' Q.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetQHitChance(source)); " is 123.
Long Statement,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,UseSpells,The length of the statement  "                    SpellCastManager.CastBasicSkillShot(Q' Q.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetQHitChance(source)); " is 123.
Long Statement,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,UseSpells,The length of the statement  "                SpellCastManager.CastBasicSkillShot(Q' Q.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetQHitChance(source)); " is 123.
Long Statement,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,UseSpells,The length of the statement  "                        SpellCastManager.CastBasicSkillShot(E' E.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetEHitChance(source)); " is 123.
Long Statement,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,CheckKs,The length of the statement  "            foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1300) && x.IsEnemy && !x.IsDead).OrderByDescending(GetComboDamage)) " is 158.
Long Statement,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,ShouldR,The length of the statement  "            if (menu.Item("rSpeed"' true).GetValue<bool>() && Game.CursorPos.CountEnemiesInRange(1500) < 3 && dmg > target.Health - 100) " is 124.
Long Statement,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle))); " is 133.
Long Statement,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press))); " is 123.
Long Statement,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LastHitQ"' "Last hit with Q!"' true).SetValue(new KeyBind("A".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,LoadMenu,The length of the statement  "                combo.AddItem(new MenuItem("Combo_mode"' "Combo Mode"' true).SetValue(new StringList(new[] { "Normal"' "Q-Delay-R-AA-Q-AA" }))); " is 128.
Long Statement,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,LoadMenu,The length of the statement  "                combo.AddItem(new MenuItem("Combo_Switch"' "Switch mode Key"' true).SetValue(new KeyBind("T".ToCharArray()[0]' KeyBindType.Press))); " is 132.
Long Statement,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,LoadMenu,The length of the statement  "                MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4))); " is 138.
Long Statement,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,LoadMenu,The length of the statement  "                customMenu.AddItem(new MenuItem("custMenu"' "Move Menu"' true).SetValue(new KeyBind("L".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,GetComboDamage,The length of the statement  "                comboDamage += (Player.GetSpellDamage(target' SpellSlot.Q) + Player.CalcDamage(target' Damage.DamageType.Magical' (45 + 35 * Q.Level + 0.5 * Player.FlatMagicDamageMod))) * 2; " is 174.
Long Statement,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,GetComboDamage,The length of the statement  "                comboDamage += Player.CalcDamage(target' Damage.DamageType.Magical' (45 + 35 * Q.Level + 0.5 * Player.FlatMagicDamageMod)); " is 123.
Long Statement,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,CheckMark,The length of the statement  "            return ObjectManager.Get<Obj_AI_Hero>().FirstOrDefault(x => x.IsValidTarget(range) && x.HasBuff("AkaliMota") && x.IsVisible); " is 125.
Long Statement,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,Cast_Q,The length of the statement  "                if (MinionManager.GetMinions(Player.Position' Q.Range).Any(minion => minion.HasBuff("AkaliMota") && xSaliceWalker.InAutoAttackRange(minion))) " is 141.
Long Statement,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,Cast_Q,The length of the statement  "                foreach (var minion in MinionManager.GetMinions(Player.Position' Q.Range).Where(minion => HealthPrediction.GetHealthPrediction(minion' " is 134.
Long Statement,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,Cast_Q,The length of the statement  "                foreach (var minion in MinionManager.GetMinions(Player.Position' Q.Range).Where(minion => HealthPrediction.GetHealthPrediction(minion' " is 134.
Long Statement,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,Cast_Q,The length of the statement  "                foreach (var minion in MinionManager.GetMinions(Player.ServerPosition' Q.Range' MinionTypes.All' MinionTeam.Neutral' MinionOrderTypes.MaxHealth).Where(minion => Player.Distance(minion.Position) <= Q.Range)) " is 206.
Long Statement,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,Cast_E,The length of the statement  "                if (MinionManager.GetMinions(Player.Position' E.Range).Count >= menu.Item("LaneClear_useE_minHit"' true).GetValue<Slider>().Value) " is 130.
Long Statement,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,Cast_E,The length of the statement  "                foreach (var minion in MinionManager.GetMinions(Player.ServerPosition' Q.Range' MinionTypes.All' MinionTeam.Neutral' MinionOrderTypes.MaxHealth).Where(minion => Player.Distance(minion.Position) <= E.Range)) " is 206.
Long Statement,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle))); " is 133.
Long Statement,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press))); " is 123.
Long Statement,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("insec"' "Insec Selected target"' true).SetValue(new KeyBind("J".ToCharArray()[0]' KeyBindType.Press))); " is 129.
Long Statement,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("qeCombo"' "Q->E stun Nearest target"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press))); " is 134.
Long Statement,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("qMulti"' "Q if 2+ Soilder"' true).SetValue(new KeyBind("I".ToCharArray()[0]' KeyBindType.Toggle))); " is 125.
Long Statement,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The length of the statement  "                MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4))); " is 138.
Long Statement,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The length of the statement  "                customMenu.AddItem(new MenuItem("custMenu"' "Move Menu"' true).SetValue(new KeyBind("L".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,SmartKs,The length of the statement  "            foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1200) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage)) " is 178.
Long Statement,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,SmartKs,The length of the statement  "                    if ((Player.GetSpellDamage(target' SpellSlot.R)) > target.Health + 20 && Player.Distance(target.Position) < R.Range && menu.Item("rKS"' true).GetValue<bool>()) " is 159.
Long Statement,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,SmartKs,The length of the statement  "                    if ((Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 20 && Player.Distance(target.Position) < Q.Range && menu.Item("qeKS"' true).GetValue<bool>()) " is 205.
Long Statement,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,CastQe,The length of the statement  "                if ((Q.IsReady() || QSpell.State == SpellState.Surpressed) && (E.IsReady() || ESpell.State == SpellState.Surpressed) && Player.Distance(target.Position) < Q.Range - 75 && qPred.Hitchance >= HitChanceManager.GetQHitChance(source)) " is 229.
Long Statement,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,CastQ,The length of the statement  "                    if (Q.IsReady() && Player.Distance(target.Position) < Q.Range && qPred.Hitchance >= HitChanceManager.GetQHitChance(source)) " is 123.
Long Statement,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,CastE,The length of the statement  "                    Object[] obj = Util.VectorPointProjectionOnLineSegment(Player.ServerPosition.To2D()' slave.Position.To2D()' ePred.UnitPosition.To2D()); " is 135.
Long Statement,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,Farm,The length of the statement  "            var allMinionsQ = MinionManager.GetMinions(Player.ServerPosition' Q.Range + Q.Width' MinionTypes.All' MinionTeam.NotAlly); " is 122.
Long Statement,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle))); " is 133.
Long Statement,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press))); " is 123.
Long Statement,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("Jungle"' "Jungle Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press))); " is 121.
Long Statement,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LastHitE"' "Last Hit With E"' true).SetValue(new KeyBind("A".ToCharArray()[0]' KeyBindType.Press))); " is 126.
Long Statement,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("forceUlt"' "Ult Helper"' true).SetValue(new KeyBind("H".ToCharArray()[0]' KeyBindType.Press))); " is 121.
Long Statement,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("flashUlt"' "Ult Flash"' true).SetValue(new KeyBind("T".ToCharArray()[0]' KeyBindType.Press))); " is 120.
Long Statement,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("aoeUltOnly"' "AOE Ult Only"' true).SetValue(new KeyBind("Y".ToCharArray()[0]' KeyBindType.Toggle))); " is 126.
Long Statement,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The length of the statement  "                    eMenu.AddItem(new MenuItem("E_Delay"' "Delay between 0-1500(Milliseconds or tick)"' true).SetValue(new Slider(0' 0' 1500))); " is 124.
Long Statement,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The length of the statement  "                farm.AddItem(new MenuItem("EMode"' "E Mode"' true).SetValue(new StringList(new[] { "Poisoned"' "LastHit"' "PoisonLastHit"}))); " is 126.
Long Statement,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The length of the statement  "                MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4))); " is 138.
Long Statement,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The length of the statement  "                customMenu.AddItem(new MenuItem("custMenu"' "Move Menu"' true).SetValue(new KeyBind("L".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,UseSpells,The length of the statement  "                SpellCastManager.CastBasicSkillShot(Q' Q.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetQHitChance(source)); " is 123.
Long Statement,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,UseSpells,The length of the statement  "                    SpellCastManager.CastBasicSkillShot(W' W.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetWHitChance(source)); " is 123.
Long Statement,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,AutoEPoisonTargets,The length of the statement  "                var target = _poisonTargets.Where(x => x.IsValidTarget(E.Range)).Where(x => PoisonDuration(x) > E.Delay).OrderByDescending(GetComboDamage).FirstOrDefault(); " is 156.
Long Statement,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LastHit,The length of the statement  "            foreach (var x in from x in minions let healthPred = HealthPrediction.GetHealthPrediction(x' (int)Player.Distance(x)' Game.Ping + 200) where healthPred <= Player.GetSpellDamage(x' SpellSlot.E) select x) " is 202.
Long Statement,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,Cast_R,The length of the statement  "                            if (GetComboDamage(target) > target.Health && R.GetPrediction(target).Hitchance >= HitChanceManager.GetRHitChance(source)) " is 122.
Long Statement,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,CheckKs,The length of the statement  "            foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(Q.Range)).OrderByDescending(GetComboDamage)) " is 135.
Long Statement,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,CheckKs,The length of the statement  "                if (Player.Distance(target) <= E.Range && Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.E) > target.Health && Q.IsReady() && E.IsReady()) " is 176.
Long Statement,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,CheckKs,The length of the statement  "                if (Player.Distance(target) <= Q.Range && Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.W) > target.Health && Q.IsReady() && W.IsReady()) " is 176.
Long Statement,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,CheckKs,The length of the statement  "                if (Player.Distance(target) <= E.Range && Player.GetSpellDamage(target' SpellSlot.W) + Player.GetSpellDamage(target' SpellSlot.E) > target.Health && W.IsReady() && E.IsReady() && QSuccessfullyCasted(target)) " is 207.
Long Statement,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,SpellbookOnOnCastSpell,The length of the statement  "            if (args.Slot != SpellSlot.R || !menu.Item("blockR"' true).GetValue<bool>() || menu.Item("flashUlt"' true).GetValue<KeyBind>().Active) " is 134.
Long Statement,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,SpellbookOnOnCastSpell,The length of the statement  "            if (!menu.Item("forceUlt"' true).GetValue<KeyBind>().Active && !menu.Item("ComboActive"' true).GetValue<KeyBind>().Active) " is 122.
Long Statement,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle))); " is 133.
Long Statement,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press))); " is 123.
Long Statement,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,LoadMenu,The length of the statement  "                    eMenu.AddItem(new MenuItem("E_If_UnderTurret"' "E Under Enemy Turret"' true).SetValue(new KeyBind("H".ToCharArray()[0]' KeyBindType.Toggle))); " is 142.
Long Statement,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,LoadMenu,The length of the statement  "                MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4))); " is 138.
Long Statement,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,LoadMenu,The length of the statement  "                customMenu.AddItem(new MenuItem("custMenu"' "Move Menu"' true).SetValue(new KeyBind("L".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,UseSpells,The length of the statement  "                        if (enemies.HasBuffOfType(BuffType.Snare) || enemies.HasBuffOfType(BuffType.Stun) || enemies.HasBuffOfType(BuffType.Fear) || enemies.HasBuffOfType(BuffType.Suppression)) " is 169.
Long Statement,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,UseSpells,The length of the statement  "                    if ((from enemie in HeroManager.Enemies.Where(x => x.IsValidTarget()).Where(x => Prediction.GetPrediction(x' 25f).UnitPosition.Distance(_ekkoPast.ServerPosition) < 400)  " is 168.
Long Statement,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,AoeR,The length of the statement  "            var min = global ? menu.Item("R_AOE_Global"' true).GetValue<Slider>().Value : menu.Item("R_AOE"' true).GetValue<Slider>().Value; " is 128.
Long Statement,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,TargetHitWithR,The length of the statement  "            return HeroManager.Enemies.Where(x => x.IsValidTarget()).Count(x => _ekkoPast.Distance(Prediction.GetPrediction(x' .2f).UnitPosition) < 400); " is 141.
Long Statement,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,Farm,The length of the statement  "            var minion = MinionManager.GetMinions(ObjectManager.Player.ServerPosition' Q.Range' MinionTypes.All' MinionTeam.NotAlly); " is 121.
Long Statement,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,CheckKs,The length of the statement  "            foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(Q2.Range)).OrderByDescending(GetComboDamage)) " is 136.
Long Statement,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,CheckKs,The length of the statement  "                if (Player.Distance(target) <= Q2.Range && TotalQDmg(target) > target.Health && Q.IsReady() && Q2.GetPrediction(target).Hitchance >= HitChance.VeryHigh) " is 152.
Long Statement,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("ComboActive"' "Combo!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press))); " is 120.
Long Statement,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("S".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("Y".ToCharArray()[0]' KeyBindType.Toggle))); " is 133.
Long Statement,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("shootMouse"' "Shoot QE Mouse"' true).SetValue(new KeyBind("T".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,LoadMenu,The length of the statement  "                MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4))); " is 138.
Long Statement,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,LoadMenu,The length of the statement  "                customMenu.AddItem(new MenuItem("custMenu"' "Move Menu"' true).SetValue(new KeyBind("L".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,Combo,The length of the statement  "                menu.Item("UseECombo"' true).GetValue<bool>()' menu.Item("UseQComboHam"' true).GetValue<bool>()' menu.Item("UseWComboHam"' true).GetValue<bool>()' " is 146.
Long Statement,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,Harass,The length of the statement  "                menu.Item("UseEHarass"' true).GetValue<bool>()' menu.Item("UseQHarassHam"' true).GetValue<bool>()' menu.Item("UseWHarassHam"' true).GetValue<bool>()' " is 149.
Long Statement,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,UseSpells,The length of the statement  "                        if (useE2 && ECheck(e2Target' useQ' useW) && Player.Distance(e2Target.Position) <= E2.Range + e2Target.BoundingRadius && E2.IsReady()) " is 134.
Long Statement,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,KsCheck,The length of the statement  "            foreach (Obj_AI_Hero enemy in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(QExtend.Range) && x.IsEnemy && !x.IsDead).OrderByDescending(GetComboDamage)) " is 166.
Long Statement,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,KsCheck,The length of the statement  "                if ((Player.GetSpellDamage(enemy' SpellSlot.Q) - 20) > enemy.Health && CanQcd == 0 && Player.Distance(enemy.ServerPosition) <= Q.Range) " is 135.
Long Statement,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,KsCheck,The length of the statement  "                if ((Player.GetSpellDamage(enemy' SpellSlot.Q) * 1.4 - 20) > enemy.Health && CanQcd == 0 && CanEcd == 0 && Player.Distance(enemy.ServerPosition) <= QExtend.Range) " is 162.
Long Statement,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,KsCheck,The length of the statement  "                if ((Player.GetSpellDamage(enemy' SpellSlot.Q' 1) - 20) > enemy.Health && _hamQcd == 0 && Player.Distance(enemy.ServerPosition) <= Q2.Range + enemy.BoundingRadius) " is 163.
Long Statement,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,KsCheck,The length of the statement  "                if ((Player.GetSpellDamage(enemy' SpellSlot.E) - 20) > enemy.Health && _hamEcd == 0 && Player.Distance(enemy.ServerPosition) <= E2.Range + enemy.BoundingRadius) " is 160.
Long Statement,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,CastQCannon,The length of the statement  "            if ((menu.Item("UseQAlways"' true).GetValue<bool>() || !useE) && CanQcd == 0 && Q.GetPrediction(target' true).Hitchance >= HitChanceManager.GetQHitChance(source) && Player.Distance(target.ServerPosition) <= Q.Range && Q.IsReady()) " is 230.
Long Statement,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,AfterAttack,The length of the statement  "                if (menu.Item("HarassActive"' true).GetValue<KeyBind>().Active || menu.Item("HarassActiveT"' true).GetValue<KeyBind>().Active) " is 126.
Long Statement,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,AfterAttack,The length of the statement  "                    if (_canWcd == 0 && Player.Distance(target.Position) < 600 && !HammerTime && W.Level > 0 && W.IsReady() && target is Obj_AI_Hero) " is 129.
Long Statement,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The length of the statement  "                keys.AddItem(new MenuItem("ComboActive"' "Combo!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press))); " is 121.
Long Statement,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The length of the statement  "                keys.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("S".ToCharArray()[0]' KeyBindType.Press))); " is 123.
Long Statement,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The length of the statement  "                keys.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("Y".ToCharArray()[0]' KeyBindType.Toggle))); " is 134.
Long Statement,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The length of the statement  "                keys.AddItem(new MenuItem("wTar"' "Cast W On Selected"' true).SetValue(new KeyBind("W".ToCharArray()[0]' KeyBindType.Press))); " is 126.
Long Statement,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The length of the statement  "                keys.AddItem(new MenuItem("lastHitQ"' "Last Hith Q"' true).SetValue(new KeyBind("A".ToCharArray()[0]' KeyBindType.Press))); " is 123.
Long Statement,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The length of the statement  "                keys.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("X".ToCharArray()[0]' KeyBindType.Press))); " is 124.
Long Statement,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The length of the statement  "                    eMenu.AddItem(new MenuItem("EDelay"' "E Delay Before Turning Off (Milliseconds)"' true).SetValue(new Slider(100' 0' 2000))); " is 124.
Long Statement,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The length of the statement  "                drawMenu.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255)))); " is 120.
Long Statement,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The length of the statement  "                drawMenu.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255)))); " is 120.
Long Statement,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The length of the statement  "                drawMenu.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255)))); " is 120.
Long Statement,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The length of the statement  "                MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4))); " is 138.
Long Statement,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The length of the statement  "                customMenu.AddItem(new MenuItem("custMenu"' "Move Menu"' true).SetValue(new KeyBind("L".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,AutoQ,The length of the statement  "                if ((Q.GetPrediction(target).Hitchance == HitChance.Immobile || IsStunned(target)) && qImmo && Player.Distance(target.Position) < Q.Range) " is 138.
Long Statement,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,AutoQ,The length of the statement  "                    SpellCastManager.CastBasicSkillShot(Q' Q.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetQHitChance("Combo")); " is 124.
Long Statement,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,AutoQ,The length of the statement  "                    SpellCastManager.CastBasicSkillShot(Q' Q.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetQHitChance("Combo")); " is 124.
Long Statement,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,CheckUnderTower,The length of the statement  "            foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(x => Player.Distance(x.Position) < W.Range && x.IsValidTarget(W.Range) && !x.IsDead && x.IsEnemy && x.IsVisible)) " is 174.
Long Statement,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,CheckUnderTower,The length of the statement  "                if (ObjectManager.Get<Obj_AI_Turret>().Where(turret => turret != null && turret.IsValid && turret.IsAlly && turret.Health > 0).Any(turret => Vector2.Distance(enemy.Position.To2D()' turret.Position.To2D()) < 750 && W.IsReady())) " is 227.
Long Statement,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,SmartKs,The length of the statement  "            foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(Q.Range) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage)) " is 181.
Long Statement,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle))); " is 133.
Long Statement,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press))); " is 123.
Long Statement,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LastHitQQ"' "Last hit with Q"' true).SetValue(new KeyBind("A".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("escape"' "RUN FOR YOUR LIFE!"' true).SetValue(new KeyBind("Z".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The length of the statement  "                        eMenu.SubMenu("shield").AddItem(new MenuItem("shield" + ally.CharData.BaseSkinName' ally.CharData.BaseSkinName' true).SetValue(true)); " is 134.
Long Statement,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The length of the statement  "                    rMenu.AddItem(new MenuItem("killR"' "Use R only if it hits multiple target"' true).SetValue(new KeyBind("T".ToCharArray()[0]' KeyBindType.Toggle))); " is 148.
Long Statement,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The length of the statement  "                    rMenu.SubMenu("intR").AddItem(new MenuItem("AdditonalTargets"' "Require Addition targets"' true).SetValue(new Slider(1' 0' 4))); " is 128.
Long Statement,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The length of the statement  "                        rMenu.SubMenu("intR").AddItem(new MenuItem("intR" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false)); " is 133.
Long Statement,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The length of the statement  "                MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4))); " is 138.
Long Statement,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The length of the statement  "                customMenu.AddItem(new MenuItem("custMenu"' "Move Menu"' true).SetValue(new KeyBind("L".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,CastQ,The length of the statement  "            if (Q.IsReady() && prediction.Hitchance >= HitChanceManager.GetQHitChance(source) && Player.Distance(target.Position) <= Q.Range) " is 129.
Long Statement,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,CheckWMec,The length of the statement  "            int hit = (from x in ObjectManager.Get<Obj_AI_Hero>().Where(champ => champ.IsValidTarget(1500) && champ.IsVisible && !champ.IsZombie) " is 133.
Long Statement,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,CheckWMec,The length of the statement  "                       select Util.GetPCircle(_currentBallPosition' W' x' true)).Count(prediction => W.IsReady() && prediction.UnitPosition.Distance(_currentBallPosition) < W.Width); " is 159.
Long Statement,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,CheckRMec,The length of the statement  "            int hit = (from x in ObjectManager.Get<Obj_AI_Hero>().Where(champ => champ.IsValidTarget(1500) && champ.IsVisible && !champ.IsZombie) " is 133.
Long Statement,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,CheckRMec,The length of the statement  "                       select Util.GetPCircle(_currentBallPosition' R' x' true)).Count(prediction => R.IsReady() && prediction.UnitPosition.Distance(_currentBallPosition) < R.Width); " is 159.
Long Statement,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,CheckRMecGlobal,The length of the statement  "            int hit = (from x in ObjectManager.Get<Obj_AI_Hero>().Where(champ => champ.IsValidTarget(1500) && champ.IsVisible && !champ.IsZombie) " is 133.
Long Statement,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,CheckRMecGlobal,The length of the statement  "                       select Util.GetPCircle(_currentBallPosition' R' x' true)).Count(prediction => R.IsReady() && prediction.UnitPosition.Distance(_currentBallPosition) < R.Width); " is 159.
Long Statement,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,CountR,The length of the statement  "            return (from enemy in ObjectManager.Get<Obj_AI_Hero>().Where(champ => champ.IsValidTarget(1500) && champ.IsVisible && !champ.IsZombie) " is 134.
Long Statement,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,CountR,The length of the statement  "                    select Util.GetPCircle(_currentBallPosition' R' enemy' true)).Count(prediction => R.IsReady() && prediction.UnitPosition.Distance(_currentBallPosition) <= R.Width); " is 164.
Long Statement,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,Obj_AI_Base_OnProcessSpellCast,The length of the statement  "            if (!menu.Item("saveEMana"' true).GetValue<bool>() || Player.Mana - ESpell.ManaCost >= QSpell.ManaCost + WSpell.ManaCost) " is 121.
Long Statement,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,Obj_AI_Base_OnProcessSpellCast,The length of the statement  "                if (Initiator.InitatorList.Where(spell => args.SData.Name == spell.SDataName).Where(spell => menu.Item(spell.SpellName' true).GetValue<bool>()).Any(spell => E.IsReady() && Player.Distance(unit.Position) < E.Range)) " is 214.
Long Statement,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle))); " is 133.
Long Statement,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press))); " is 123.
Long Statement,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("Misc_QE_Mouse"' "QE to Nearest Target To Mouse"' true).SetValue(new KeyBind("T".ToCharArray()[0]' KeyBindType.Press))); " is 145.
Long Statement,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("Misc_QE_Mouse2"' "QE to Mouse"' true).SetValue(new KeyBind("T".ToCharArray()[0]' KeyBindType.Press))); " is 128.
Long Statement,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("forceR"' "Force R to best Target"' true).SetValue(new KeyBind("R".ToCharArray()[0]' KeyBindType.Press))); " is 131.
Long Statement,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,LoadMenu,The length of the statement  "                //key.AddItem(new MenuItem("qAA"' "Auto Q AAing target"' true).SetValue(new KeyBind("I".ToCharArray()[0]' KeyBindType.Toggle))); " is 128.
Long Statement,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,LoadMenu,The length of the statement  "                MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4))); " is 138.
Long Statement,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,LoadMenu,The length of the statement  "                customMenu.AddItem(new MenuItem("custMenu"' "Move Menu"' true).SetValue(new KeyBind("L".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Combo,The length of the statement  "                menu.Item("UseECombo"' true).GetValue<bool>()' menu.Item("UseRCombo"' true).GetValue<bool>()' menu.Item("UseQECombo"' true).GetValue<bool>()' "Combo"); " is 151.
Long Statement,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,UseSpells,The length of the statement  "                SpellCastManager.CastBasicSkillShot(Q' Q.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetQHitChance(source)); " is 123.
Long Statement,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,SmartKs,The length of the statement  "            foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(_qe.Range) && x.IsEnemy && !x.IsDead).OrderByDescending(GetComboDamage)) " is 163.
Long Statement,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Drawing_OnDraw,The length of the statement  "                        var poly = new Geometry.Polygon.Rectangle(pred.CastPosition' Player.ServerPosition.Extend(pred.CastPosition' _qe.Range)' _qe.Width); " is 132.
Long Statement,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Drawing_OnDraw,The length of the statement  "                foreach (var wts in from unit in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(2000) && !x.IsDead && x.IsEnemy).OrderByDescending(GetComboDamage) " is 159.
Long Statement,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Get_Current_Orb,The length of the statement  "            var minion = ObjectManager.Get<Obj_AI_Minion>().FirstOrDefault(x => x.IsInvulnerable && x.Name != "Seed" && x.Name != "k"); " is 123.
Long Statement,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("ComboActive"' "Combo!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press))); " is 120.
Long Statement,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("S".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("Y".ToCharArray()[0]' KeyBindType.Toggle))); " is 133.
Long Statement,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("X".ToCharArray()[0]' KeyBindType.Press))); " is 123.
Long Statement,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LastHitQQ"' "Last hit with Q"' true).SetValue(new KeyBind("A".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("rAlways"' "Ult Always Combo"' true).SetValue(new KeyBind("K".ToCharArray()[0]' KeyBindType.Toggle))); " is 127.
Long Statement,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadMenu,The length of the statement  "                    eMenu.AddItem(new MenuItem("Line_If_Enemy_Count_Combo"' "E if >= In Combo' 6 = off"' true).SetValue(new Slider(3' 1' 6))); " is 122.
Long Statement,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadMenu,The length of the statement  "                MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4))); " is 138.
Long Statement,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadMenu,The length of the statement  "                customMenu.AddItem(new MenuItem("custMenu"' "Move Menu"' true).SetValue(new KeyBind("L".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,UseSpells,The length of the statement  "                if (useQ && target != null && Q.IsReady() && Player.Distance(target) <= Player.AttackRange) // Q only in AA range for guaranteed AutoAttack " is 139.
Long Statement,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,UseSpells,The length of the statement  "            if (useR &&  R.IsReady() && _rObj == null && ShouldR(target' dmg) && R.GetPrediction(target).Hitchance >= HitChanceManager.GetRHitChance(source)) " is 145.
Long Statement,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,Game_OnGameUpdate,The length of the statement  "                if (menu.Item("HarassActive"' true).GetValue<KeyBind>().Active || menu.Item("HarassActiveT"' true).GetValue<KeyBind>().Active) " is 126.
Long Statement,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LastHit,The length of the statement  "                    if (minion.IsValidTarget() && HealthPrediction.GetHealthPrediction(minion' (int)(Player.Distance(minion) * 1000 / 1400)) < Player.GetSpellDamage(minion' SpellSlot.Q) - 10) " is 171.
Long Statement,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,Farm,The length of the statement  "            var allMinionsQ = MinionManager.GetMinions(ObjectManager.Player.ServerPosition' Q.Range + Q.Width' MinionTypes.All' MinionTeam.NotAlly); " is 136.
Long Statement,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle))); " is 133.
Long Statement,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press))); " is 123.
Long Statement,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,LoadMenu,The length of the statement  "                MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4))); " is 138.
Long Statement,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,LoadMenu,The length of the statement  "                customMenu.AddItem(new MenuItem("custMenu"' "Move Menu"' true).SetValue(new KeyBind("L".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,UseSpells,The length of the statement  "                SpellCastManager.CastBasicSkillShot(W' W.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetWHitChance(source)); " is 123.
Long Statement,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,CheckKs,The length of the statement  "            foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(Q.Range)).OrderByDescending(GetComboDamage)) " is 135.
Long Statement,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,CheckKs,The length of the statement  "                if (Player.Distance(target.ServerPosition) <= W.Range && Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.W) > target.Health && Q.IsReady() && W.IsReady()) " is 191.
Long Statement,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,CheckKs,The length of the statement  "                if (Player.Distance(target.ServerPosition) <= Q.Range && Player.GetSpellDamage(target' SpellSlot.Q) > target.Health && Q.IsReady()) " is 131.
Long Statement,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,CheckKs,The length of the statement  "                if (Player.Distance(target.ServerPosition) <= W.Range && Player.GetSpellDamage(target' SpellSlot.W) > target.Health && W.IsReady()) " is 131.
Long Statement,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,CheckKs,The length of the statement  "                if (Player.Distance(target.ServerPosition) <= GetRealRRange(target) && Player.GetSpellDamage(target' SpellSlot.R) > target.Health && R.IsReady() && menu.Item("R_KS"' true).GetValue<bool>()) " is 189.
Long Statement,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,CheckKs,The length of the statement  "                if (Player.Distance(target.ServerPosition) <= GetRealRRange(target) + 375 && Player.Distance(target.ServerPosition) > GetRealRRange(target) + 25 " is 144.
Long Statement,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle))); " is 133.
Long Statement,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press))); " is 123.
Long Statement,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("Wardjump"' "Escape/Ward jump"' true).SetValue(new KeyBind("Z".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The length of the statement  "                killSteal.AddItem(new MenuItem("KS_With_E"' "Don't KS with E Toggle!"' true).SetValue(new KeyBind("H".ToCharArray()[0]' KeyBindType.Toggle))); " is 142.
Long Statement,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The length of the statement  "                drawing.AddItem(new MenuItem("Draw_Mode"' "Draw E Mode"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255)))); " is 126.
Long Statement,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The length of the statement  "                MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4))); " is 138.
Long Statement,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The length of the statement  "                customMenu.AddItem(new MenuItem("custMenu"' "Move Menu"' true).SetValue(new KeyBind("L".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LastHit,The length of the statement  "                if (allMinions.Where(minion => minion.IsValidTarget(W.Range) && minion.Health < Player.GetSpellDamage(minion' SpellSlot.W) + MarkDmg(minion) - 35).Any(minion => Player.Distance(minion.ServerPosition) < W.Range)) " is 211.
Long Statement,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,SmartKs,The length of the statement  "            foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1375) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage)) " is 178.
Long Statement,xSaliceResurrected,Champion,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Champion.cs,GameOnLoad,The length of the statement  "            Game.PrintChat("<font color = \"#FFB6C1\">xSalice's Ressurected AIO</font> by <font color = \"#00FFFF\">xSalice</font>"); " is 121.
Long Statement,xSaliceResurrected,Champion,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Champion.cs,GameOnLoad,The length of the statement  "            Game.PrintChat("<font color = \"#87CEEB\">Feel free to donate via Paypal to:</font> <font color = \"#FFFF00\">xSalicez@gmail.com</font>"); " is 138.
Long Statement,xSaliceResurrected,Champion,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Champion.cs,GameOnLoad,The length of the statement  "            menu.SubMenu("General").AddItem(new MenuItem("OrbwalkingMode"' "Mode (Require f5 reload): ").SetValue(new StringList(new[] { "xSaliceWalker"' "Common" }))); " is 156.
Long Statement,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle))); " is 133.
Long Statement,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press))); " is 123.
Long Statement,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("Escape"' "Escape with E"' true).SetValue(new KeyBind("Z".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,LoadMenu,The length of the statement  "                MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4))); " is 138.
Long Statement,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,LoadMenu,The length of the statement  "                customMenu.AddItem(new MenuItem("custMenu"' "Move Menu"' true).SetValue(new KeyBind("L".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,UseSpells,The length of the statement  "                    if (pred.Hitchance >= HitChanceManager.GetQHitChance(source) && pred.CastPosition.Distance(Player.ServerPosition) < Q.Range) " is 124.
Long Statement,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,UseSpells,The length of the statement  "                    SpellCastManager.CastBasicSkillShot(Q' Q.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetQHitChance((source))); " is 125.
Long Statement,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,UseSpells,The length of the statement  "                    SpellCastManager.CastBasicSkillShot(E' E.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetEHitChance((source))); " is 125.
Long Statement,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,Farm,The length of the statement  "            List<Obj_AI_Base> allMinionsQ = MinionManager.GetMinions(Player.ServerPosition' Q.Range' MinionTypes.All' MinionTeam.NotAlly); " is 126.
Long Statement,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,Farm,The length of the statement  "            List<Obj_AI_Base> allMinionsE = MinionManager.GetMinions(Player.ServerPosition' E.Range' MinionTypes.All' MinionTeam.NotAlly); " is 126.
Long Statement,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,CheckKs,The length of the statement  "            foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => Player.IsValidTarget(E.Range)).OrderByDescending(GetComboDamage)) " is 140.
Long Statement,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,CheckKs,The length of the statement  "                if (Player.Distance(target.ServerPosition) <= Q.Range && Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.E) > target.Health && Q.IsReady() && E.IsReady()) " is 191.
Long Statement,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,CheckKs,The length of the statement  "                if (Player.Distance(target.ServerPosition) <= Q.Range && Player.GetSpellDamage(target' SpellSlot.Q) * 2 > target.Health && Q.IsReady() && W.IsReady()) " is 150.
Long Statement,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,CheckKs,The length of the statement  "                if (Player.Distance(target.ServerPosition) <= Q.Range && Player.GetSpellDamage(target' SpellSlot.Q) > target.Health && Q.IsReady()) " is 131.
Long Statement,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,CheckKs,The length of the statement  "                if (Player.Distance(target.ServerPosition) <= E.Range && Player.GetSpellDamage(target' SpellSlot.E) > target.Health && E.IsReady()) " is 131.
Long Statement,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,CheckKs,The length of the statement  "                if (Player.Distance(target.ServerPosition) <= R.Range && Player.GetSpellDamage(target' SpellSlot.R) > target.Health && R.IsReady() && menu.Item("R_KS"' true).GetValue<bool>()) " is 175.
Long Statement,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,AutoBloom,The length of the statement  "            foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => Player.IsValidTarget(Q.Range)).OrderByDescending(GetComboDamage)) " is 140.
Long Statement,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,AutoBloom,The length of the statement  "                foreach (Obj_AI_Minion plants in ObjectManager.Get<Obj_AI_Minion>().Where(x => x.Name == "Zyra" && x.Distance(Player.Position) < Q.Range)) " is 138.
Long Statement,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,Game_OnGameUpdate,The length of the statement  "                foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => Player.IsValidTarget(E.Range)).OrderBy(x => x.Distance(Player.Position))) " is 148.
Long Statement,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press))); " is 123.
Long Statement,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LastHitKey"' "Last Hit!"' true).SetValue(new KeyBind("A".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("Combo_Switch"' "Switch mode Key"' true).SetValue(new KeyBind("T".ToCharArray()[0]' KeyBindType.Press))); " is 130.
Long Statement,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,LoadMenu,The length of the statement  "                            dangerous.SubMenu(hero.ChampionName).AddItem(new MenuItem(hero.Spellbook.GetSpell(SpellSlot.Q).Name + "R_Dodge"' hero.Spellbook.GetSpell(SpellSlot.Q).Name' true).SetValue(false)); " is 179.
Long Statement,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,LoadMenu,The length of the statement  "                            dangerous.SubMenu(hero.ChampionName).AddItem(new MenuItem(hero.Spellbook.GetSpell(SpellSlot.W).Name + "R_Dodge"' hero.Spellbook.GetSpell(SpellSlot.W).Name' true).SetValue(false)); " is 179.
Long Statement,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,LoadMenu,The length of the statement  "                            dangerous.SubMenu(hero.ChampionName).AddItem(new MenuItem(hero.Spellbook.GetSpell(SpellSlot.E).Name + "R_Dodge"' hero.Spellbook.GetSpell(SpellSlot.E).Name' true).SetValue(false)); " is 179.
Long Statement,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,LoadMenu,The length of the statement  "                            dangerous.SubMenu(hero.ChampionName).AddItem(new MenuItem(hero.Spellbook.GetSpell(SpellSlot.R).Name + "R_Dodge"' hero.Spellbook.GetSpell(SpellSlot.R).Name' true).SetValue(false)); " is 179.
Long Statement,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,LoadMenu,The length of the statement  "                combo.AddItem(new MenuItem("Combo_mode"' "Combo Mode"' true).SetValue(new StringList(new[] { "Normal"' "Q-AA-Q-AA-Ult" }))); " is 124.
Long Statement,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,LoadMenu,The length of the statement  "                MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4))); " is 138.
Long Statement,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,LoadMenu,The length of the statement  "                customMenu.AddItem(new MenuItem("custMenu"' "Move Menu"' true).SetValue(new KeyBind("L".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,Farm,The length of the statement  "            List<Obj_AI_Base> allMinionsE = MinionManager.GetMinions(Player.ServerPosition' Player.AttackRange + Player.BoundingRadius' " is 123.
Long Statement,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,SmartKs,The length of the statement  "            foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(Q.Range) && !x.IsDead && !x.HasBuffOfType(BuffType.Invulnerability))) " is 160.
Long Statement,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,SmartKs,The length of the statement  "                if (Player.GetSpellDamage(target' SpellSlot.Q) * 2 > target.Health && Player.Distance(target.Position) < Q.Range && Q.IsReady()) " is 128.
Long Statement,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,SmartKs,The length of the statement  "                if (Player.GetSpellDamage(target' SpellSlot.Q) > target.Health && Player.Distance(target.Position) < Q.Range && Q.IsReady()) " is 124.
Long Statement,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,Cast_Q,The length of the statement  "                if (Q.IsReady() && Utils.TickCount - Q.LastCastAttemptT > 4000 && Player.Distance(target.Position) < Q.Range && Player.Distance(target.Position) > Player.AttackRange) " is 166.
Long Statement,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,Cast_Q_Last_Hit,The length of the statement  "            var allMinionQ = MinionManager.GetMinions(Player.ServerPosition' Q.Range + Player.BoundingRadius' MinionTypes.All' MinionTeam.NotAlly); " is 135.
Long Statement,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,AfterAttack,The length of the statement  "                if ((menu.Item("ComboActive"' true).GetValue<KeyBind>().Active || menu.Item("HarassActive"' true).GetValue<KeyBind>().Active) " is 125.
Long Statement,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,Obj_AI_Base_OnProcessSpellCast,The length of the statement  "                    (menu.Item("ComboActive"' true).GetValue<KeyBind>().Active && E.IsReady() && menu.Item("UseWCombo"' true).GetValue<bool>()) || " is 126.
Long Statement,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,Drawing_OnDraw,The length of the statement  "                foreach (var target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(5000) && !x.IsDead && x.IsEnemy).OrderBy(x => x.Health)) " is 139.
Long Statement,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press))); " is 123.
Long Statement,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LastHitKey"' "Last Hit!"' true).SetValue(new KeyBind("A".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,LoadMenu,The length of the statement  "                //miscMenu.AddItem(new MenuItem("Cast_EQ"' "Cast EQ nearest target"' true).SetValue(new KeyBind("T".ToCharArray()[0]' KeyBindType.Press))); " is 139.
Long Statement,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,LoadMenu,The length of the statement  "                MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4))); " is 138.
Long Statement,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,LoadMenu,The length of the statement  "                customMenu.AddItem(new MenuItem("custMenu"' "Move Menu"' true).SetValue(new KeyBind("L".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,Cast_Q,The length of the statement  "                        if (target.Distance(minion.Position) < Q.Range && Player.Distance(minion.Position) < Q.Range && target.Distance(minion.Position) < target.Distance(Player.Position) && dmg > minion.Health + 40) " is 192.
Long Statement,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,Cast_Q_Last_Hit,The length of the statement  "            var allMinionQ = MinionManager.GetMinions(Player.ServerPosition' Q.Range + Player.BoundingRadius' MinionTypes.All' MinionTeam.NotAlly); " is 135.
Long Statement,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,CheckKs,The length of the statement  "            foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(R.Range)).OrderByDescending(GetComboDamage)) " is 135.
Long Statement,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,Drawing_OnDraw,The length of the statement  "                foreach (var target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(5000) && !x.IsDead && x.IsEnemy).OrderBy(x => x.Health)) " is 139.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("ComboActive"' "Combo!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press))); " is 120.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("S".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("Y".ToCharArray()[0]' KeyBindType.Toggle))); " is 133.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("stunMelles"' "Stun Enemy Melle Range"' true).SetValue(new KeyBind("M".ToCharArray()[0]' KeyBindType.Toggle))); " is 136.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("stunTowers"' "Stun Enemy under Tower"' true).SetValue(new KeyBind("J".ToCharArray()[0]' KeyBindType.Toggle))); " is 136.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("alwaysR"' "Always Cast R"' true).SetValue(new KeyBind("H".ToCharArray()[0]' KeyBindType.Toggle))); " is 124.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LastHitQQ"' "Last hit with Q"' true).SetValue(new KeyBind("A".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("Z".ToCharArray()[0]' KeyBindType.Press))); " is 123.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The length of the statement  "                misc.AddItem(new MenuItem("UseHAM"' "Always use E"' true).SetValue(new KeyBind("I".ToCharArray()[0]' KeyBindType.Toggle))); " is 123.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The length of the statement  "                drawing.AddItem(new MenuItem("qExtend"' "Extended Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255)))); " is 129.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The length of the statement  "                MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4))); " is 138.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The length of the statement  "                customMenu.AddItem(new MenuItem("custMenu"' "Move Menu"' true).SetValue(new KeyBind("L".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,UseSpells,The length of the statement  "                SpellCastManager.CastBasicSkillShot(E' E.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetEHitChance(source)); " is 123.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,CastQ,The length of the statement  "                SpellCastManager.CastBasicSkillShot(Q' Q.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetQHitChance(source)); " is 123.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,CastQ,The length of the statement  "                var poly = new Geometry.Polygon.Rectangle(Player.ServerPosition' Player.ServerPosition.Extend(minion.ServerPosition' QExtend.Range)' QExtend.Width); " is 148.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,SmartKs,The length of the statement  "            foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1000) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage)) " is 178.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,SmartKs,The length of the statement  "                if (Player.Distance(target.ServerPosition) <= Q.Range && (Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 20) " is 123.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,SmartKs,The length of the statement  "                if (Player.Distance(target.ServerPosition) <= E.Range && (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 20) " is 123.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,SmartKs,The length of the statement  "                if (Player.Distance(target.ServerPosition) <= W.Width && (Player.GetSpellDamage(target' SpellSlot.W)) > target.Health + 20) " is 123.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,DetonateE,The length of the statement  "            if (enemy.ServerPosition.Distance(_eMissle.Position) < 110 && _eCreated && menu.Item("ComboActive"' true).GetValue<KeyBind>().Active && E.IsReady()) " is 148.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,DetonateE,The length of the statement  "            else if (_eCreated && menu.Item("ComboActive"' true).GetValue<KeyBind>().Active && menu.Item("UseEGap"' true).GetValue<bool>() " is 126.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,DetonateE,The length of the statement  "                if (_eMissle.EndPosition.Distance(_eMissle.Position) < 400 && enemy.Distance(_eMissle.Position) < enemy.Distance(_eMissle.EndPosition)) " is 135.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,GapClose,The length of the statement  "            if (Player.Distance(target.ServerPosition) >= distance && target.IsValidTarget(E.Range) && !_eCreated && E.GetPrediction(target).Hitchance >= HitChance.Medium && E.IsReady()) " is 174.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LastHit,The length of the statement  "                    if (minion.IsValidTarget() && HealthPrediction.GetHealthPrediction(minion' (int)(Player.Distance(minion.Position) * 1000 / 1400)) < Player.GetSpellDamage(minion' SpellSlot.Q) - 10) " is 180.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,Farm,The length of the statement  "            var allMinionsE = MinionManager.GetMinions(ObjectManager.Player.ServerPosition' E.Range + E.Width' MinionTypes.All' MinionTeam.NotAlly); " is 136.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,CheckUnderTower,The length of the statement  "                    if (ObjectManager.Get<Obj_AI_Turret>().Where(turret => turret != null && turret.IsValid && turret.IsAlly && turret.Health > 0).Any(turret => Vector2.Distance(enemy.Position.To2D()' turret.Position.To2D()) < 750 && R.IsReady())) " is 227.
Long Statement,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,Game_OnGameUpdate,The length of the statement  "                foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(200) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage)) " is 177.
Long Statement,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle))); " is 133.
Long Statement,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press))); " is 123.
Long Statement,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LastHitE"' "Last hit with E!"' true).SetValue(new KeyBind("A".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("UseMecR"' "Force Best Mec Ult"' true).SetValue(new KeyBind("T".ToCharArray()[0]' KeyBindType.Press))); " is 128.
Long Statement,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadMenu,The length of the statement  "                    rMenu.AddItem(new MenuItem("Line_If_Enemy_Count_Combo"' "R if >= In Combo' 6 = off"' true).SetValue(new Slider(3' 1' 6))); " is 122.
Long Statement,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadMenu,The length of the statement  "                miscMenu.AddItem(new MenuItem("Stay_Danger"' "Stay In Danger Zone"' true).SetValue(new KeyBind("I".ToCharArray()[0]' KeyBindType.Toggle))); " is 139.
Long Statement,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadMenu,The length of the statement  "                MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4))); " is 138.
Long Statement,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadMenu,The length of the statement  "                customMenu.AddItem(new MenuItem("custMenu"' "Move Menu"' true).SetValue(new KeyBind("L".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,GetComboDamage,The length of the statement  "                comboDamage += GetCurrentHeat() > 50 ? Player.GetSpellDamage(target' SpellSlot.Q) * 2 : Player.GetSpellDamage(target' SpellSlot.Q); " is 131.
Long Statement,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,GetComboDamage,The length of the statement  "                comboDamage += GetCurrentHeat() > 50 ? Player.GetSpellDamage(target' SpellSlot.E) * 1.5 : Player.GetSpellDamage(target' SpellSlot.E); " is 133.
Long Statement,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,ShouldQ,The length of the statement  "            if (GetCurrentHeat() > 80 && !(Player.GetSpellDamage(target' SpellSlot.Q' 1) + Player.GetAutoAttackDamage(target) * 2 > target.Health)) " is 135.
Long Statement,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,ShouldE,The length of the statement  "            if (GetCurrentHeat() > 80 && !(Player.GetSpellDamage(target' SpellSlot.E' 1) + Player.GetAutoAttackDamage(target) * 2 > target.Health)) " is 135.
Long Statement,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,StayInDangerZone,The length of the statement  "                var enemy = ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsEnemy).OrderBy(x => Player.Distance(x.Position)).FirstOrDefault(); " is 126.
Long Statement,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,StayInDangerZone,The length of the statement  "                var enemy = ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsEnemy && !x.IsDead).OrderBy(x => Player.Distance(x.Position)).FirstOrDefault(); " is 139.
Long Statement,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,Obj_AI_Base_OnProcessSpellCast,The length of the statement  "            if (unit.IsEnemy && unit.Type == GameObjectType.obj_AI_Hero && W.IsReady() && menu.Item("W_Block_Spell"' true).GetValue<bool>()) " is 128.
Long Statement,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle))); " is 133.
Long Statement,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press))); " is 123.
Long Statement,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("LastHitKey"' "Last Hit!"' true).SetValue(new KeyBind("A".ToCharArray()[0]' KeyBindType.Press))); " is 122.
Long Statement,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,LoadMenu,The length of the statement  "                key.AddItem(new MenuItem("StackE"' "StackE (toggle)!"' true).SetValue(new KeyBind("T".ToCharArray()[0]' KeyBindType.Toggle))); " is 126.
Long Statement,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,LoadMenu,The length of the statement  "                MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4))); " is 138.
Long Statement,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,LoadMenu,The length of the statement  "                customMenu.AddItem(new MenuItem("custMenu"' "Move Menu"' true).SetValue(new KeyBind("L".ToCharArray()[0]' KeyBindType.Press))); " is 127.
Long Statement,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,LastHit,The length of the statement  "                    if (minion.IsValidTarget() && HealthPrediction.GetHealthPrediction(minion' (int)(Player.Distance(minion.Position) * 1000 / 1400)) < Player.GetSpellDamage(minion' SpellSlot.Q) - 10) " is 180.
Long Statement,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,CheckKs,The length of the statement  "            foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1300)).OrderByDescending(GetComboDamage)) " is 132.
Long Statement,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,CheckKs,The length of the statement  "                if (Player.Distance(target.ServerPosition) <= E.Range && Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.E) > target.Health && Q.IsReady() && E.IsReady()) " is 191.
Long Statement,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,CheckKs,The length of the statement  "                if (Player.Distance(target.ServerPosition) <= Q.Range && Player.GetSpellDamage(target' SpellSlot.Q) > target.Health && Q.IsReady()) " is 131.
Long Statement,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,CheckKs,The length of the statement  "                if (Player.Distance(target.ServerPosition) <= E.Range && Player.GetSpellDamage(target' SpellSlot.E) > target.Health && E.IsReady()) " is 131.
Long Statement,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,CheckKs,The length of the statement  "                if (Player.Distance(target.ServerPosition) <= R.Range && Player.GetSpellDamage(target' SpellSlot.R) > target.Health && R.IsReady() && menu.Item("R_KS"' true).GetValue<bool>()) " is 175.
Long Statement,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,AddToMenu,The length of the statement  "            menuMisc.AddItem(new MenuItem("orb_Misc_Priority_Unit"' "Priority Unit").SetValue(new StringList(new[] { "Minion"' "Hero" }))); " is 127.
Long Statement,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,AddToMenu,The length of the statement  "                modeLaneClear.AddItem(new MenuItem("LaneClear_Key"' "Key").SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press))); " is 123.
Long Statement,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,AddToMenu,The length of the statement  "            menu.AddItem(new MenuItem("orb_Misc_AutoWindUp"' "Autoset Windup").SetValue(new KeyBind("O".ToCharArray()[0]' KeyBindType.Press))); " is 131.
Long Statement,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnProcessSpell,The length of the statement  "            if (!unit.IsValidTarget(2000' false) || !unit.IsAlly || unit is Obj_AI_Hero || !(unit is Obj_AI_Turret) || !IsAutoAttack(spell.SData.Name) || !(spell.Target is Obj_AI_Base)) " is 173.
Long Statement,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnDraw,The length of the statement  "                Render.Circle.DrawCircle(Player.Position' GetAutoAttackRange()' _menu.Item("orb_Draw_AARange").GetValue<Circle>().Color); " is 121.
Long Statement,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnDraw,The length of the statement  "                        Render.Circle.DrawCircle(enemy.Position' GetAutoAttackRange(enemy' Player)' _menu.Item("orb_Draw_AARange_Enemy").GetValue<Circle>().Color); " is 139.
Long Statement,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnDraw,The length of the statement  "                    Render.Circle.DrawCircle(enemy.Position' GetAutoAttackRange(enemy' Player)' _menu.Item("orb_Draw_AARange_Enemy").GetValue<Circle>().Color); " is 139.
Long Statement,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnDraw,The length of the statement  "                Render.Circle.DrawCircle(Player.Position' _menu.Item("orb_Misc_Holdzone").GetValue<Slider>().Value' _menu.Item("orb_Draw_Holdzone").GetValue<Circle>().Color); " is 158.
Long Statement,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnDraw,The length of the statement  "            if (_menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Active || _menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Active || _menu.Item("orb_Draw_nearKill").GetValue<Circle>().Active) " is 186.
Long Statement,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnDraw,The length of the statement  "                var minionList = MinionManager.GetMinions(Player.Position' GetAutoAttackRange() + 500' MinionTypes.All' MinionTeam.Enemy' MinionOrderTypes.MaxHealth); " is 150.
Long Statement,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnDraw,The length of the statement  "                        Render.Circle.DrawCircle(minion.Position' minion.BoundingRadius' _menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Color); " is 122.
Long Statement,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnDraw,The length of the statement  "                        Render.Circle.DrawCircle(minion.Position' minion.BoundingRadius' _menu.Item("orb_Draw_nearKill").GetValue<Circle>().Color); " is 123.
Long Statement,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,GetTarget,The length of the statement  "            if (_menu.Item("orb_Misc_Priority_Unit").GetValue<StringList>().SelectedIndex == 1 && (CurrentMode == Mode.Harass || CurrentMode == Mode.LaneClear)) " is 148.
Long Statement,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,GetBestMinion,The length of the statement  "            var enemies = ObjectManager.Get<Obj_AI_Minion>().Where(x => x.IsValidTarget() && x.Name != "Beacon" && InAutoAttackRange(x)).ToList(); " is 134.
Long Statement,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,GetBestMinion,The length of the statement  "                        var turretProjectile = turret.AttackCastDelay * 1000 + turret.Distance(minion) / turret.BasicAttack.MissileSpeed * 1000; " is 120.
Long Statement,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,GetBestMinion,The length of the statement  "                                   let predHealth = HealthPrediction.LaneClearHealthPrediction(minion' (int)((Player.AttackDelay * 1000) * LaneClearWaitTimeMod)' FarmDelay()) " is 139.
Long Statement,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,GetBestHeroTarget,The length of the statement  "            return hitsToKill <= 3 ? killableEnemy : TargetSelector.GetTarget(GetAutoAttackRange()' TargetSelector.DamageType.Physical); " is 124.
Long Statement,xSaliceResurrected.Utilities,Util,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\Util.cs,UnderAllyTurret,The length of the statement  "                ObjectManager.Get<Obj_AI_Turret>().Any(turret => turret != null && (turret.IsAlly && !turret.IsDead && turret.Distance(Player) < 800)); " is 135.
Long Statement,xSaliceResurrected.Utilities,Util,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\Util.cs,IsWall,The length of the statement  "            return (NavMesh.GetCollisionFlags(pos.To3D()).HasFlag(CollisionFlags.Wall) || NavMesh.GetCollisionFlags(pos.To3D()).HasFlag(CollisionFlags.Building)); " is 150.
Long Statement,xSaliceResurrected.Utilities,Util,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\Util.cs,GetTargetFocus,The length of the statement  "                if (focusSelected && TargetSelector.GetSelectedTarget().Distance(Player.ServerPosition) < range + 100 && TargetSelector.GetSelectedTarget().Type == GameObjectType.obj_AI_Hero) " is 175.
Long Statement,xSaliceResurrected.Utilities,WardJumper,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\WardJumper.cs,WardJump,The length of the statement  "                Obj_AI_Hero hero in ObjectManager.Get<Obj_AI_Hero>().Where(hero => hero.Distance(Game.CursorPos) < 250 && !hero.IsDead)) " is 120.
Complex Conditional,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,AfterAttack,The conditional expression  "(menu.Item("UseQCombo"' true).GetValue<bool>() && menu.Item("ComboActive"' true).GetValue<KeyBind>().Active) ||                   (menu.Item("HarassActive"' true).GetValue<KeyBind>().Active && menu.Item("UseQHarass"' true).GetValue<bool>())"  is complex.
Complex Conditional,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,CheckKs,The conditional expression  "Player.Distance(target) <= R.Range && Player.GetSpellDamage(target' SpellSlot.R) > target.Health && R.IsReady() && menu.Item("ksR"' true).GetValue<bool>()"  is complex.
Complex Conditional,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,AutoQ,The conditional expression  "Q.GetPrediction(target).Hitchance >= HitChance.High && (target.HasBuffOfType(BuffType.Stun) || target.HasBuffOfType(BuffType.Snare)) && menu.Item("Auto_Q_Immobile"' true).GetValue<bool>()"  is complex.
Complex Conditional,xSaliceResurrected.Managers,AoeSpellManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AOESpellManager.cs,CastComboMec,The conditional expression  "Jayce.HammerTime && R.IsReady() && Jayce.CanQcd == 0 && Jayce.CanEcd == 0"  is complex.
Complex Conditional,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,Use_Ignite,The conditional expression  "target != null && IgniteSlot != SpellSlot.Unknown && ObjectManager.Player.Spellbook.CanUseSpell(IgniteSlot) == SpellState.Ready && ObjectManager.Player.Distance(target.Position) < 650"  is complex.
Complex Conditional,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,CastSingleLine,The conditional expression  "(!rec2.Points.Exists(Util.IsWall) || !wallCheck) && pred.Hitchance >= HitChance.Medium && target.IsMoving"  is complex.
Complex Conditional,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,DrawBestLine,The conditional expression  "(!rec2.Points.Exists(Util.IsWall) || !wallCheck) && pred.Hitchance >= HitChance.Medium && target.IsMoving"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,UseSpells,The conditional expression  "useW && W.IsReady() && Player.Distance(eTarget.Position) <= W.Range - 100 &&                  ShouldW(eTarget' source)"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,UseSpells,The conditional expression  "useQ && Q.IsReady() && Player.Distance(eTarget.Position) <= Q.Range &&                      ShouldQ(eTarget' source) && Player.Distance(eTarget.Position) > 600"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,UseSpells,The conditional expression  "useQ && Q.IsReady() && Player.Distance(eTarget.Position) <= Q.Range &&                       ShouldQ(eTarget' source)"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,CheckKs,The conditional expression  "Player.Distance(target.ServerPosition) <= W.Range &&                          (Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.Q' 1) +                           Player.GetSpellDamage(target' SpellSlot.W)) > target.Health && Q.IsReady() && Q.IsReady()"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,CheckKs,The conditional expression  "Player.Distance(target.ServerPosition) <= R.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R)) > target.Health && R.IsReady() && _rOn &&                          target.Distance(dashVector) < 425 && R.IsReady()"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,UseSpells,The conditional expression  "useR && R.IsReady() && ShouldR(qTarget) && Player.Distance(qTarget.Position) < R.Range"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,CastQe,The conditional expression  "(Q.IsReady() || QSpell.State == SpellState.Surpressed) && (E.IsReady() || ESpell.State == SpellState.Surpressed) && Player.Distance(target.Position) < Q.Range - 75 && qPred.Hitchance >= HitChanceManager.GetQHitChance(source)"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,CastE,The conditional expression  "E.IsReady() && isOnseg && pointLine.Distance(ePred.UnitPosition.To2D()) < E.Width && ShouldE(target)"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,BeforeAttack,The conditional expression  "Q.IsReady() || W.IsReady() || (E.IsReady() && _poisonTargets.Any(x => x.NetworkId == args.Target.NetworkId))"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,BeforeAttack,The conditional expression  "Q.IsReady() || W.IsReady() || (E.IsReady() && _poisonTargets.Any(x => x.NetworkId == args.Target.NetworkId))"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,CheckKs,The conditional expression  "Player.Distance(target) <= E.Range && Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.E) > target.Health && Q.IsReady() && E.IsReady()"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,CheckKs,The conditional expression  "Player.Distance(target) <= Q.Range && Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.W) > target.Health && Q.IsReady() && W.IsReady()"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,CheckKs,The conditional expression  "Player.Distance(target) <= E.Range && Player.GetSpellDamage(target' SpellSlot.W) + Player.GetSpellDamage(target' SpellSlot.E) > target.Health && W.IsReady() && E.IsReady() && QSuccessfullyCasted(target)"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,UseSpells,The conditional expression  "enemies.HasBuffOfType(BuffType.Snare) || enemies.HasBuffOfType(BuffType.Stun) || enemies.HasBuffOfType(BuffType.Fear) || enemies.HasBuffOfType(BuffType.Suppression)"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,AutoQ,The conditional expression  "Q.GetPrediction(target).Hitchance >= HitChance.High &&                      (target.HasBuffOfType(BuffType.Stun) || target.HasBuffOfType(BuffType.Snare)) &&                      menu.Item("Auto_Q_Slow"' true).GetValue<bool>()"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,CheckKs,The conditional expression  "Player.Distance(target) <= Q2.Range && TotalQDmg(target) > target.Health && Q.IsReady() && Q2.GetPrediction(target).Hitchance >= HitChance.VeryHigh"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,GetComboDamage,The conditional expression  "CanQcd == 0 && CanEcd == 0 && Q.Level > 0 && E.Level > 0"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,UseSpells,The conditional expression  "useQ && CanQcd == 0 && Player.Distance(qTarget.Position) <= QExtend.Range && !HammerTime"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,UseSpells,The conditional expression  "useE2 && ECheck(e2Target' useQ' useW) && Player.Distance(e2Target.Position) <= E2.Range + e2Target.BoundingRadius && E2.IsReady()"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,UseSpells,The conditional expression  "useQ && CanQcd == 0 && Player.Distance(qTarget.Position) <= QExtend.Range && !HammerTime"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,ECheck,The conditional expression  "((CanQcd == 0 && useQ) || (_canWcd == 0 && useW)) && _hamQcd != 0 && _hamWcd != 0"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,KsCheck,The conditional expression  "(Player.GetSpellDamage(enemy' SpellSlot.Q) * 1.4 - 20) > enemy.Health && CanQcd == 0 && CanEcd == 0 && Player.Distance(enemy.ServerPosition) <= QExtend.Range"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,KsCheck,The conditional expression  "(Player.GetSpellDamage(enemy' SpellSlot.E) + Player.GetSpellDamage(enemy' SpellSlot.Q' 1) - 20) > enemy.Health                      && _hamEcd == 0 && _hamQcd == 0 && Player.Distance(enemy.ServerPosition) <= Q2.Range + enemy.BoundingRadius"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,SwitchFormCheck,The conditional expression  "(CanQcd != 0 || !useQ) &&                      (_canWcd != 0 && !HyperCharged() || !useW) && R.IsReady() &&                       HammerAllReady() && !HammerTime && Player.Distance(target.ServerPosition) < 650 &&                       (useQ2 || useW2 || useE2)"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,SwitchFormCheck,The conditional expression  "((CanQcd == 0 && useQ) || (_canWcd == 0 && useW) && R.IsReady())                  && HammerTime"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,SwitchFormCheck,The conditional expression  "_hamQcd != 0 && _hamWcd != 0 && _hamEcd != 0 && HammerTime && R.IsReady()"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,CastQCannon,The conditional expression  "tarPred.Hitchance >= HitChanceManager.GetQHitChance(source) && CanQcd == 0 && CanEcd == 0 && useE"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,CastQCannon,The conditional expression  "(menu.Item("UseQAlways"' true).GetValue<bool>() || !useE) && CanQcd == 0 && Q.GetPrediction(target' true).Hitchance >= HitChanceManager.GetQHitChance(source) && Player.Distance(target.ServerPosition) <= Q.Range && Q.IsReady()"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,AfterAttack,The conditional expression  "_canWcd == 0 && Player.Distance(target.Position) < 600 && !HammerTime && W.Level > 0 && W.IsReady()"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,AfterAttack,The conditional expression  "_canWcd == 0 && Player.Distance(target.Position) < 600 && !HammerTime && W.Level > 0 && W.IsReady() && target is Obj_AI_Hero"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,Interrupter_OnPosibleToInterrupt,The conditional expression  "unit != null && Player.Distance(unit.Position) < Q2.Range + unit.BoundingRadius && _hamQcd == 0 && _hamEcd == 0"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,UseSpells,The conditional expression  "useE && E.IsReady() && ESpell.ToggleState == 1 && HasManaForE(source) &&                  Utils.TickCount - E.LastCastAttemptT > 500"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,AutoQ,The conditional expression  "(Q.GetPrediction(target).Hitchance == HitChance.Immobile || IsStunned(target)) && qImmo && Player.Distance(target.Position) < Q.Range"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,IsStunned,The conditional expression  "target.HasBuffOfType(BuffType.Stun) || target.HasBuffOfType(BuffType.Snare) ||                  target.HasBuffOfType(BuffType.Suppression) || target.HasBuffOfType(BuffType.Taunt)"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,CheckUnderTower,The conditional expression  "ObjectManager.Get<Obj_AI_Turret>().Where(turret => turret != null && turret.IsValid && turret.IsAlly && turret.Health > 0).Any(turret => Vector2.Distance(enemy.Position.To2D()' turret.Position.To2D()) < 750 && W.IsReady())"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,Farm,The conditional expression  "useE && allMinionsE.Count > 0 && E.IsReady() && ESpell.ToggleState == 1"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,Drawing_OnDraw,The conditional expression  "(spell.Slot == SpellSlot.R && menuItem.Active) || (spell.Slot == SpellSlot.W && menuItem.Active)"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Obj_AI_Base_OnProcessSpellCast,The conditional expression  "!unit.IsMe || !E.IsReady() || (spell.SData.Name != "SyndraQ") ||                  Utils.TickCount - _qe.LastCastAttemptT >= 300"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,UseSpells,The conditional expression  "useQ && target != null && Q.IsReady() && Player.Distance(target) <= Player.AttackRange"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,UseSpells,The conditional expression  "useR &&  R.IsReady() && _rObj == null && ShouldR(target' dmg) && R.GetPrediction(target).Hitchance >= HitChanceManager.GetRHitChance(source)"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,CheckKs,The conditional expression  "Player.Distance(target.ServerPosition) <= W.Range && Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.W) > target.Health && Q.IsReady() && W.IsReady()"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,CheckKs,The conditional expression  "Player.Distance(target.ServerPosition) <= GetRealRRange(target) && Player.GetSpellDamage(target' SpellSlot.R) > target.Health && R.IsReady() && menu.Item("R_KS"' true).GetValue<bool>()"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,CheckKs,The conditional expression  "Player.Distance(target.ServerPosition) <= GetRealRRange(target) + 375 && Player.Distance(target.ServerPosition) > GetRealRRange(target) + 25                      && R.IsReady() && SummonerManager.Flash_Ready() && menu.Item("R_KS2"' true).GetValue<bool>()"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,Combo,The conditional expression  "useE && E.IsReady() && Player.Distance(target.Position) < E.Range && Utils.TickCount - E.LastCastAttemptT > 0 &&                          Player.Distance(target.Position) > eDis && !Q.IsReady()"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,Combo,The conditional expression  "menu.Item("smartE"' true).GetValue<bool>() &&                              Player.CountEnemiesInRange(500) > 2 &&                              (!R.IsReady() || !(RSpell.State == SpellState.Surpressed && R.Level > 0))"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,Combo,The conditional expression  "useE && E.IsReady() && Player.Distance(target.Position) < E.Range && Utils.TickCount - E.LastCastAttemptT > 0 &&                          Player.Distance(target.Position) > eDis"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,Combo,The conditional expression  "menu.Item("smartE"' true).GetValue<bool>() &&                              Player.CountEnemiesInRange(500) > 2 &&                              (!R.IsReady() || !(RSpell.State == SpellState.Surpressed && R.Level > 0))"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,Combo,The conditional expression  "useW && W.IsReady() && Player.Distance(target.Position) <= W.Range && QSuccessfullyCasted()"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,Harass,The conditional expression  "useE && eTarget != null && E.IsReady() && !Q.IsReady()"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,Harass,The conditional expression  "useW && wTarget != null && W.IsReady() && QSuccessfullyCasted()"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,Farm,The conditional expression  "useQ && allMinionsQ.Count > 0 && Q.IsReady() && allMinionsQ[0].IsValidTarget(Q.Range)"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,Farm,The conditional expression  "useE && allMinionsQ.Count > 0 && E.IsReady() && allMinionsQ[0].IsValidTarget(E.Range)"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,JungleFarm,The conditional expression  "useQ && allMinionsQ.Count > 0 && Q.IsReady() && allMinionsQ[0].IsValidTarget(Q.Range)"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,SmartKs,The conditional expression  "Q.IsReady() && E.IsReady() && Player.Distance(target.ServerPosition) <= 1375 &&                              menu.Item("wardKs"' true).GetValue<bool>() &&                              target.CountEnemiesInRange(500) < 3"  is complex.
Complex Conditional,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,AutoW,The conditional expression  "target != null && !target.IsDead && target.IsEnemy &&                      Player.Distance(target.ServerPosition) <= W.Range && target.IsValidTarget(W.Range)"  is complex.
Complex Conditional,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,CheckKs,The conditional expression  "Player.Distance(target.ServerPosition) <= Q.Range && Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.E) > target.Health && Q.IsReady() && E.IsReady()"  is complex.
Complex Conditional,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,CheckKs,The conditional expression  "Player.Distance(target.ServerPosition) <= Q.Range && Player.GetSpellDamage(target' SpellSlot.Q) * 2 > target.Health && Q.IsReady() && W.IsReady()"  is complex.
Complex Conditional,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,CheckKs,The conditional expression  "Player.Distance(target.ServerPosition) <= R.Range && Player.GetSpellDamage(target' SpellSlot.R) > target.Health && R.IsReady() && menu.Item("R_KS"' true).GetValue<bool>()"  is complex.
Complex Conditional,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,Cast_Q,The conditional expression  "Q.IsReady() && Utils.TickCount - Q.LastCastAttemptT > 4000 && Player.Distance(target.Position) < Q.Range && Player.Distance(target.Position) > Player.AttackRange"  is complex.
Complex Conditional,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,Obj_AI_Base_OnProcessSpellCast,The conditional expression  "menu.Item("W_Incoming"' true).GetValue<bool>() ||                      (menu.Item("ComboActive"' true).GetValue<KeyBind>().Active && E.IsReady() && menu.Item("UseWCombo"' true).GetValue<bool>()) ||                      (menu.Item("HarassActive"' true).GetValue<KeyBind>().Active && menu.Item("UseWHarass"' true).GetValue<bool>())"  is complex.
Complex Conditional,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,Cast_Q,The conditional expression  "target.Distance(minion.Position) < Q.Range && Player.Distance(minion.Position) < Q.Range && target.Distance(minion.Position) < target.Distance(Player.Position) && dmg > minion.Health + 40"  is complex.
Complex Conditional,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,UseSpells,The conditional expression  "useE && eTarget != null && E.IsReady() && Player.Distance(eTarget.Position) < E.Range && ShouldE(eTarget)"  is complex.
Complex Conditional,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,UseSpells,The conditional expression  "useR && qTarget != null && R.IsReady() && Player.Distance(qTarget.Position) < R.Range"  is complex.
Complex Conditional,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,DetonateE,The conditional expression  "enemy.ServerPosition.Distance(_eMissle.Position) < 110 && _eCreated && menu.Item("ComboActive"' true).GetValue<KeyBind>().Active && E.IsReady()"  is complex.
Complex Conditional,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,DetonateE,The conditional expression  "_eCreated && menu.Item("ComboActive"' true).GetValue<KeyBind>().Active && menu.Item("UseEGap"' true).GetValue<bool>()                  && Player.Distance(enemy.Position) > enemy.Distance(_eMissle.Position) && E.IsReady()"  is complex.
Complex Conditional,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,GapClose,The conditional expression  "Player.Distance(target.ServerPosition) >= distance && target.IsValidTarget(E.Range) && !_eCreated && E.GetPrediction(target).Hitchance >= HitChance.Medium && E.IsReady()"  is complex.
Complex Conditional,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,CheckUnderTower,The conditional expression  "ObjectManager.Get<Obj_AI_Turret>().Where(turret => turret != null && turret.IsValid && turret.IsAlly && turret.Health > 0).Any(turret => Vector2.Distance(enemy.Position.To2D()' turret.Position.To2D()) < 750 && R.IsReady())"  is complex.
Complex Conditional,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,Obj_AI_Base_OnProcessSpellCast,The conditional expression  "unit.IsEnemy && unit.Type == GameObjectType.obj_AI_Hero && W.IsReady() && menu.Item("W_Block_Spell"' true).GetValue<bool>()"  is complex.
Complex Conditional,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,CheckKs,The conditional expression  "Player.Distance(target.ServerPosition) <= E.Range && Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.E) > target.Health && Q.IsReady() && E.IsReady()"  is complex.
Complex Conditional,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,CheckKs,The conditional expression  "Player.Distance(target.ServerPosition) <= R.Range && Player.GetSpellDamage(target' SpellSlot.R) > target.Health && R.IsReady() && menu.Item("R_KS"' true).GetValue<bool>()"  is complex.
Complex Conditional,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,SpellbookCancelAa,The conditional expression  "spellbook.Owner.IsValid && spellbook.Owner.IsMe && args.DestroyMissile && args.StopAnimation"  is complex.
Complex Conditional,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,ObjAiBaseOnOnPlayAnimation,The conditional expression  "!sender.IsMe || sender.IsMelee() || args.Animation == "Run" || args.Animation != "Idle""  is complex.
Complex Conditional,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,MissileClientOnOnCreate,The conditional expression  "missile != null && missile.SpellCaster.IsMe && IsAutoAttack(missile.SData.Name) && !missile.SpellCaster.IsMelee"  is complex.
Complex Conditional,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnProcessSpell,The conditional expression  "!unit.IsValidTarget(2000' false) || !unit.IsAlly || unit is Obj_AI_Hero || !(unit is Obj_AI_Turret) || !IsAutoAttack(spell.SData.Name) || !(spell.Target is Obj_AI_Base)"  is complex.
Complex Conditional,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,Orbwalk,The conditional expression  "target != null && (CanAttack || HaveCancled) && IsAllowedToAttack()"  is complex.
Complex Conditional,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,Orbwalk,The conditional expression  "Player.IsMelee() && target != null &&                      target.Distance(Player.Position) < GetAutoAttackRange(Player' target) &&                      _menu.Item("orb_Melee_Prediction").GetValue<bool>() && target is Obj_AI_Hero &&                      Game.CursorPos.Distance(target.Position) < 300"  is complex.
Complex Conditional,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,Orbwalk,The conditional expression  "mytarget != null && (CanAttack || HaveCancled) && IsAllowedToAttack()"  is complex.
Complex Conditional,xSaliceResurrected.Utilities,Util,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\Util.cs,IsStunned,The conditional expression  "target.HasBuffOfType(BuffType.Stun) || target.HasBuffOfType(BuffType.Snare) ||                  target.HasBuffOfType(BuffType.Suppression) || target.HasBuffOfType(BuffType.Taunt)"  is complex.
Magic Number,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,SetSpells,The following statement contains a magic number: SpellManager.W = new Spell(SpellSlot.W' 1200);
Magic Number,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,SetSpells,The following statement contains a magic number: SpellManager.R = new Spell(SpellSlot.R' 20000);
Magic Number,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,LoadMenu,The following statement contains a magic number: {                  key.AddItem(new MenuItem("ComboActive"' "Combo!"' true).SetValue(new KeyBind(32' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle)));                  key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("Force_R"' "Force R Lowest"' true).SetValue(new KeyBind("T".ToCharArray()[0]' KeyBindType.Press)));                  //add to menu                  menu.AddSubMenu(key);              }
Magic Number,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Min_Stack"' "Require Q Min Stacks"' true).SetValue(new Slider(5' 0' 5)));                      spellMenu.AddSubMenu(qMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Min_Range"' "R Min Range Sliders"' true).SetValue(new Slider(300' 0' 1000)));                      rMenu.AddItem(new MenuItem("R_Max_Range"' "R Max Range Sliders"' true).SetValue(new Slider(2000' 0' 4000)));                        rMenu.AddSubMenu(new Menu("Don't use R on"' "Dont_R"));                      foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(enemy => enemy.Team != Player.Team)                          )                          rMenu.SubMenu("Dont_R")                              .AddItem(new MenuItem("Dont_R" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Min_Stack"' "Require Q Min Stacks"' true).SetValue(new Slider(5' 0' 5)));                      spellMenu.AddSubMenu(qMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Min_Range"' "R Min Range Sliders"' true).SetValue(new Slider(300' 0' 1000)));                      rMenu.AddItem(new MenuItem("R_Max_Range"' "R Max Range Sliders"' true).SetValue(new Slider(2000' 0' 4000)));                        rMenu.AddSubMenu(new Menu("Don't use R on"' "Dont_R"));                      foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(enemy => enemy.Team != Player.Team)                          )                          rMenu.SubMenu("Dont_R")                              .AddItem(new MenuItem("Dont_R" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Min_Stack"' "Require Q Min Stacks"' true).SetValue(new Slider(5' 0' 5)));                      spellMenu.AddSubMenu(qMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Min_Range"' "R Min Range Sliders"' true).SetValue(new Slider(300' 0' 1000)));                      rMenu.AddItem(new MenuItem("R_Max_Range"' "R Max Range Sliders"' true).SetValue(new Slider(2000' 0' 4000)));                        rMenu.AddSubMenu(new Menu("Don't use R on"' "Dont_R"));                      foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(enemy => enemy.Team != Player.Team)                          )                          rMenu.SubMenu("Dont_R")                              .AddItem(new MenuItem("Dont_R" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Min_Stack"' "Require Q Min Stacks"' true).SetValue(new Slider(5' 0' 5)));                      spellMenu.AddSubMenu(qMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Min_Range"' "R Min Range Sliders"' true).SetValue(new Slider(300' 0' 1000)));                      rMenu.AddItem(new MenuItem("R_Max_Range"' "R Max Range Sliders"' true).SetValue(new Slider(2000' 0' 4000)));                        rMenu.AddSubMenu(new Menu("Don't use R on"' "Dont_R"));                      foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(enemy => enemy.Team != Player.Team)                          )                          rMenu.SubMenu("Dont_R")                              .AddItem(new MenuItem("Dont_R" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Min_Stack"' "Require Q Min Stacks"' true).SetValue(new Slider(5' 0' 5)));                      spellMenu.AddSubMenu(qMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Min_Range"' "R Min Range Sliders"' true).SetValue(new Slider(300' 0' 1000)));                      rMenu.AddItem(new MenuItem("R_Max_Range"' "R Max Range Sliders"' true).SetValue(new Slider(2000' 0' 4000)));                        rMenu.AddSubMenu(new Menu("Don't use R on"' "Dont_R"));                      foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(enemy => enemy.Team != Player.Team)                          )                          rMenu.SubMenu("Dont_R")                              .AddItem(new MenuItem("Dont_R" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Min_Stack"' "Require Q Min Stacks"' true).SetValue(new Slider(5' 0' 5)));                      spellMenu.AddSubMenu(qMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Min_Range"' "R Min Range Sliders"' true).SetValue(new Slider(300' 0' 1000)));                      rMenu.AddItem(new MenuItem("R_Max_Range"' "R Max Range Sliders"' true).SetValue(new Slider(2000' 0' 4000)));                        rMenu.AddSubMenu(new Menu("Don't use R on"' "Dont_R"));                      foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(enemy => enemy.Team != Player.Team)                          )                          rMenu.SubMenu("Dont_R")                              .AddItem(new MenuItem("Dont_R" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,LoadMenu,The following statement contains a magic number: {                  harass.AddItem(new MenuItem("UseQHarass"' "Use Q"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseWHarass"' "Use W"' true).SetValue(true));                  harass.AddSubMenu(HitChanceManager.AddHitChanceMenuHarass(false' true' false' true));                  ManaManager.AddManaManagertoMenu(harass' "Harass"' 30);                  //add to menu                  menu.AddSubMenu(harass);              }
Magic Number,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseWFarm"' "Use W"' true).SetValue(true));                  ManaManager.AddManaManagertoMenu(farm' "LaneClear"' 30);                  //add to menu                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,GetComboDamage,The following statement contains a magic number: return (float)(comboDamage + Player.GetAutoAttackDamage(target) * 2);
Magic Number,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,UseSpells,The following statement contains a magic number: if (target.IsValidTarget(R.Range))              {                  var dmg = GetComboDamage(target);                    if (useR && dmg > target.Health && Player.Distance(target) > menu.Item("R_Min_Range"' true).GetValue<Slider>().Value)                      SpellCastManager.CastBasicSkillShot(R' R.Range' TargetSelector.DamageType.Physical' HitChanceManager.GetRHitChance(source));                    if (Q.IsReady() && Player.Distance(target) < 550)                  {                      var qMin = menu.Item("Q_Min_Stack"' true).GetValue<Slider>().Value;                        if (qMin <= QStacks)                          Q.Cast();                  }              }
Magic Number,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      var dmg = GetComboDamage(itemTarget);                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.ADC,Ashe,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ashe.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      var dmg = GetComboDamage(itemTarget);                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,SetSpells,The following statement contains a magic number: SpellManager.Q = new Spell(SpellSlot.Q' 825);
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,SetSpells,The following statement contains a magic number: SpellManager.Q.SetSkillshot(.3f' 250' 1225' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,SetSpells,The following statement contains a magic number: SpellManager.Q.SetSkillshot(.3f' 250' 1225' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,SetSpells,The following statement contains a magic number: SpellManager.W = new Spell(SpellSlot.W' 800);
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,SetSpells,The following statement contains a magic number: SpellManager.E = new Spell(SpellSlot.E' 600);
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,SetSpells,The following statement contains a magic number: SpellManager.E.SetSkillshot(.1f' 70' 1500' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,SetSpells,The following statement contains a magic number: SpellManager.E.SetSkillshot(.1f' 70' 1500' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,SetSpells,The following statement contains a magic number: SpellManager.R = new Spell(SpellSlot.R' 1500);
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,SetSpells,The following statement contains a magic number: SpellManager.R.SetSkillshot(.2f' 50' 1500' true' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,SetSpells,The following statement contains a magic number: SpellManager.R.SetSkillshot(.2f' 50' 1500' true' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,LoadMenu,The following statement contains a magic number: {                  key.AddItem(new MenuItem("ComboActive"' "Combo!"' true).SetValue(new KeyBind(32' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle)));                  key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press)));                  //add to menu                  menu.AddSubMenu(key);              }
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,LoadMenu,The following statement contains a magic number: {                  combo.AddItem(new MenuItem("UseQCombo"' "Use Q"' true).SetValue(true));                  combo.AddItem(new MenuItem("UseECombo"' "Use E"' true).SetValue(true));                  combo.AddItem(new MenuItem("UseRCombo"' "Use R"' true).SetValue(true));                  combo.AddItem(new MenuItem("Always_Use"' "Spell after AA in AA range"' true).SetValue(true));                  combo.AddItem(new MenuItem("ComboR_Limit"' "Save R Stack"' true).SetValue(new Slider(0' 0' 7)));                  combo.AddSubMenu(HitChanceManager.AddHitChanceMenuCombo(true' false' false' true));                  menu.AddSubMenu(combo);              }
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,LoadMenu,The following statement contains a magic number: {                  harass.AddItem(new MenuItem("UseQHarass"' "Use Q"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseEHarass"' "Use E"' true).SetValue(false));                  harass.AddItem(new MenuItem("UseRHarass"' "Use R"' true).SetValue(true));                  harass.AddItem(new MenuItem("HarassR_Limit"' "Save R Stack"' true).SetValue(new Slider(5' 0' 7)));                  harass.AddSubMenu(HitChanceManager.AddHitChanceMenuHarass(true' false' false' true));                  ManaManager.AddManaManagertoMenu(harass' "Harass"' 50);                  menu.AddSubMenu(harass);              }
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,LoadMenu,The following statement contains a magic number: {                  harass.AddItem(new MenuItem("UseQHarass"' "Use Q"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseEHarass"' "Use E"' true).SetValue(false));                  harass.AddItem(new MenuItem("UseRHarass"' "Use R"' true).SetValue(true));                  harass.AddItem(new MenuItem("HarassR_Limit"' "Save R Stack"' true).SetValue(new Slider(5' 0' 7)));                  harass.AddSubMenu(HitChanceManager.AddHitChanceMenuHarass(true' false' false' true));                  ManaManager.AddManaManagertoMenu(harass' "Harass"' 50);                  menu.AddSubMenu(harass);              }
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,LoadMenu,The following statement contains a magic number: {                  harass.AddItem(new MenuItem("UseQHarass"' "Use Q"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseEHarass"' "Use E"' true).SetValue(false));                  harass.AddItem(new MenuItem("UseRHarass"' "Use R"' true).SetValue(true));                  harass.AddItem(new MenuItem("HarassR_Limit"' "Save R Stack"' true).SetValue(new Slider(5' 0' 7)));                  harass.AddSubMenu(HitChanceManager.AddHitChanceMenuHarass(true' false' false' true));                  ManaManager.AddManaManagertoMenu(harass' "Harass"' 50);                  menu.AddSubMenu(harass);              }
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseEFarm"' "Use E"' true).SetValue(false));                  farm.AddItem(new MenuItem("UseRFarm"' "Use R"' true).SetValue(true));                  farm.AddItem(new MenuItem("LaneClearR_Limit"' "Save R Stack"' true).SetValue(new Slider(5' 0' 7)));                  ManaManager.AddManaManagertoMenu(farm' "LaneClear"' 50);                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseEFarm"' "Use E"' true).SetValue(false));                  farm.AddItem(new MenuItem("UseRFarm"' "Use R"' true).SetValue(true));                  farm.AddItem(new MenuItem("LaneClearR_Limit"' "Save R Stack"' true).SetValue(new Slider(5' 0' 7)));                  ManaManager.AddManaManagertoMenu(farm' "LaneClear"' 50);                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseEFarm"' "Use E"' true).SetValue(false));                  farm.AddItem(new MenuItem("UseRFarm"' "Use R"' true).SetValue(true));                  farm.AddItem(new MenuItem("LaneClearR_Limit"' "Save R Stack"' true).SetValue(new Slider(5' 0' 7)));                  ManaManager.AddManaManagertoMenu(farm' "LaneClear"' 50);                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,GetComboDamage,The following statement contains a magic number: return (float)(comboDamage + Player.GetAutoAttackDamage(target) * 2);
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      var dmg = GetComboDamage(itemTarget);                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      var dmg = GetComboDamage(itemTarget);                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,UseSpells,The following statement contains a magic number: var target = TargetSelector.GetTarget(550' TargetSelector.DamageType.Magical);
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,Cast_R,The following statement contains a magic number: var range = Player.HasBuff("CorkiMissileBarrageCounterBig") ? 1500 : 1300;
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,Cast_R,The following statement contains a magic number: var range = Player.HasBuff("CorkiMissileBarrageCounterBig") ? 1500 : 1300;
Magic Number,xSaliceResurrected.ADC,Corki,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Corki.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_R"' true).GetValue<bool>())                  if (R.Level > 0)                      Render.Circle.DrawCircle(Player.Position' Player.HasBuff("CorkiMissileBarrageCounterBig") ? R.Range : 1300' R.IsReady() ? Color.Green : Color.Red);
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,SetSpells,The following statement contains a magic number: SpellManager.Q = new Spell(SpellSlot.Q' 1200);
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,SetSpells,The following statement contains a magic number: SpellManager.W = new Spell(SpellSlot.W' 1050);
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,SetSpells,The following statement contains a magic number: SpellManager.E = new Spell(SpellSlot.E' 475);
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,SetSpells,The following statement contains a magic number: SpellManager.R = new Spell(SpellSlot.R' 3000);
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,LoadMenu,The following statement contains a magic number: {                  key.AddItem(new MenuItem("ComboActive"' "Combo!"' true).SetValue(new KeyBind(32' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle)));                  key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("R_Nearest_Killable"' "R Nearest Killable"' true).SetValue(new KeyBind("R".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("Force_R"' "Force R Lowest"' true).SetValue(new KeyBind("I".ToCharArray()[0]' KeyBindType.Press)));                  //add to menu                  menu.AddSubMenu(key);              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Max_Range"' "Q Max Range"' true).SetValue(new Slider(1050' 500' 1200)));                      qMenu.AddItem(new MenuItem("Auto_Q_Slow"' "Auto W Slow"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Immobile"' "Auto W Immobile"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(                          new MenuItem("W_Max_Range"' "W Max Range Sliders"' true).SetValue(new Slider(900' 500' 1050)));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_On_Killable"' "E if enemy Killable"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("E_On_Safe"' "E Safety check"' true).SetValue(true));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Min_Range"' "R Min Range Sliders"' true).SetValue(new Slider(300' 0' 1000)));                      rMenu.AddItem(new MenuItem("R_Max_Range"' "R Max Range Sliders"' true).SetValue(new Slider(2000' 0' 4000)));                        rMenu.AddSubMenu(new Menu("Don't use R on"' "Dont_R"));                      foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(enemy => enemy.Team != Player.Team)                          )                          rMenu.SubMenu("Dont_R")                              .AddItem(new MenuItem("Dont_R" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Max_Range"' "Q Max Range"' true).SetValue(new Slider(1050' 500' 1200)));                      qMenu.AddItem(new MenuItem("Auto_Q_Slow"' "Auto W Slow"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Immobile"' "Auto W Immobile"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(                          new MenuItem("W_Max_Range"' "W Max Range Sliders"' true).SetValue(new Slider(900' 500' 1050)));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_On_Killable"' "E if enemy Killable"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("E_On_Safe"' "E Safety check"' true).SetValue(true));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Min_Range"' "R Min Range Sliders"' true).SetValue(new Slider(300' 0' 1000)));                      rMenu.AddItem(new MenuItem("R_Max_Range"' "R Max Range Sliders"' true).SetValue(new Slider(2000' 0' 4000)));                        rMenu.AddSubMenu(new Menu("Don't use R on"' "Dont_R"));                      foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(enemy => enemy.Team != Player.Team)                          )                          rMenu.SubMenu("Dont_R")                              .AddItem(new MenuItem("Dont_R" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Max_Range"' "Q Max Range"' true).SetValue(new Slider(1050' 500' 1200)));                      qMenu.AddItem(new MenuItem("Auto_Q_Slow"' "Auto W Slow"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Immobile"' "Auto W Immobile"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(                          new MenuItem("W_Max_Range"' "W Max Range Sliders"' true).SetValue(new Slider(900' 500' 1050)));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_On_Killable"' "E if enemy Killable"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("E_On_Safe"' "E Safety check"' true).SetValue(true));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Min_Range"' "R Min Range Sliders"' true).SetValue(new Slider(300' 0' 1000)));                      rMenu.AddItem(new MenuItem("R_Max_Range"' "R Max Range Sliders"' true).SetValue(new Slider(2000' 0' 4000)));                        rMenu.AddSubMenu(new Menu("Don't use R on"' "Dont_R"));                      foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(enemy => enemy.Team != Player.Team)                          )                          rMenu.SubMenu("Dont_R")                              .AddItem(new MenuItem("Dont_R" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Max_Range"' "Q Max Range"' true).SetValue(new Slider(1050' 500' 1200)));                      qMenu.AddItem(new MenuItem("Auto_Q_Slow"' "Auto W Slow"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Immobile"' "Auto W Immobile"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(                          new MenuItem("W_Max_Range"' "W Max Range Sliders"' true).SetValue(new Slider(900' 500' 1050)));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_On_Killable"' "E if enemy Killable"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("E_On_Safe"' "E Safety check"' true).SetValue(true));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Min_Range"' "R Min Range Sliders"' true).SetValue(new Slider(300' 0' 1000)));                      rMenu.AddItem(new MenuItem("R_Max_Range"' "R Max Range Sliders"' true).SetValue(new Slider(2000' 0' 4000)));                        rMenu.AddSubMenu(new Menu("Don't use R on"' "Dont_R"));                      foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(enemy => enemy.Team != Player.Team)                          )                          rMenu.SubMenu("Dont_R")                              .AddItem(new MenuItem("Dont_R" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Max_Range"' "Q Max Range"' true).SetValue(new Slider(1050' 500' 1200)));                      qMenu.AddItem(new MenuItem("Auto_Q_Slow"' "Auto W Slow"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Immobile"' "Auto W Immobile"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(                          new MenuItem("W_Max_Range"' "W Max Range Sliders"' true).SetValue(new Slider(900' 500' 1050)));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_On_Killable"' "E if enemy Killable"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("E_On_Safe"' "E Safety check"' true).SetValue(true));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Min_Range"' "R Min Range Sliders"' true).SetValue(new Slider(300' 0' 1000)));                      rMenu.AddItem(new MenuItem("R_Max_Range"' "R Max Range Sliders"' true).SetValue(new Slider(2000' 0' 4000)));                        rMenu.AddSubMenu(new Menu("Don't use R on"' "Dont_R"));                      foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(enemy => enemy.Team != Player.Team)                          )                          rMenu.SubMenu("Dont_R")                              .AddItem(new MenuItem("Dont_R" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Max_Range"' "Q Max Range"' true).SetValue(new Slider(1050' 500' 1200)));                      qMenu.AddItem(new MenuItem("Auto_Q_Slow"' "Auto W Slow"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Immobile"' "Auto W Immobile"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(                          new MenuItem("W_Max_Range"' "W Max Range Sliders"' true).SetValue(new Slider(900' 500' 1050)));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_On_Killable"' "E if enemy Killable"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("E_On_Safe"' "E Safety check"' true).SetValue(true));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Min_Range"' "R Min Range Sliders"' true).SetValue(new Slider(300' 0' 1000)));                      rMenu.AddItem(new MenuItem("R_Max_Range"' "R Max Range Sliders"' true).SetValue(new Slider(2000' 0' 4000)));                        rMenu.AddSubMenu(new Menu("Don't use R on"' "Dont_R"));                      foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(enemy => enemy.Team != Player.Team)                          )                          rMenu.SubMenu("Dont_R")                              .AddItem(new MenuItem("Dont_R" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Max_Range"' "Q Max Range"' true).SetValue(new Slider(1050' 500' 1200)));                      qMenu.AddItem(new MenuItem("Auto_Q_Slow"' "Auto W Slow"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Immobile"' "Auto W Immobile"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(                          new MenuItem("W_Max_Range"' "W Max Range Sliders"' true).SetValue(new Slider(900' 500' 1050)));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_On_Killable"' "E if enemy Killable"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("E_On_Safe"' "E Safety check"' true).SetValue(true));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Min_Range"' "R Min Range Sliders"' true).SetValue(new Slider(300' 0' 1000)));                      rMenu.AddItem(new MenuItem("R_Max_Range"' "R Max Range Sliders"' true).SetValue(new Slider(2000' 0' 4000)));                        rMenu.AddSubMenu(new Menu("Don't use R on"' "Dont_R"));                      foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(enemy => enemy.Team != Player.Team)                          )                          rMenu.SubMenu("Dont_R")                              .AddItem(new MenuItem("Dont_R" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Max_Range"' "Q Max Range"' true).SetValue(new Slider(1050' 500' 1200)));                      qMenu.AddItem(new MenuItem("Auto_Q_Slow"' "Auto W Slow"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Immobile"' "Auto W Immobile"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(                          new MenuItem("W_Max_Range"' "W Max Range Sliders"' true).SetValue(new Slider(900' 500' 1050)));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_On_Killable"' "E if enemy Killable"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("E_On_Safe"' "E Safety check"' true).SetValue(true));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Min_Range"' "R Min Range Sliders"' true).SetValue(new Slider(300' 0' 1000)));                      rMenu.AddItem(new MenuItem("R_Max_Range"' "R Max Range Sliders"' true).SetValue(new Slider(2000' 0' 4000)));                        rMenu.AddSubMenu(new Menu("Don't use R on"' "Dont_R"));                      foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(enemy => enemy.Team != Player.Team)                          )                          rMenu.SubMenu("Dont_R")                              .AddItem(new MenuItem("Dont_R" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Max_Range"' "Q Max Range"' true).SetValue(new Slider(1050' 500' 1200)));                      qMenu.AddItem(new MenuItem("Auto_Q_Slow"' "Auto W Slow"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Immobile"' "Auto W Immobile"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(                          new MenuItem("W_Max_Range"' "W Max Range Sliders"' true).SetValue(new Slider(900' 500' 1050)));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_On_Killable"' "E if enemy Killable"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("E_On_Safe"' "E Safety check"' true).SetValue(true));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Min_Range"' "R Min Range Sliders"' true).SetValue(new Slider(300' 0' 1000)));                      rMenu.AddItem(new MenuItem("R_Max_Range"' "R Max Range Sliders"' true).SetValue(new Slider(2000' 0' 4000)));                        rMenu.AddSubMenu(new Menu("Don't use R on"' "Dont_R"));                      foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(enemy => enemy.Team != Player.Team)                          )                          rMenu.SubMenu("Dont_R")                              .AddItem(new MenuItem("Dont_R" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Max_Range"' "Q Max Range"' true).SetValue(new Slider(1050' 500' 1200)));                      qMenu.AddItem(new MenuItem("Auto_Q_Slow"' "Auto W Slow"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Immobile"' "Auto W Immobile"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(                          new MenuItem("W_Max_Range"' "W Max Range Sliders"' true).SetValue(new Slider(900' 500' 1050)));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_On_Killable"' "E if enemy Killable"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("E_On_Safe"' "E Safety check"' true).SetValue(true));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Min_Range"' "R Min Range Sliders"' true).SetValue(new Slider(300' 0' 1000)));                      rMenu.AddItem(new MenuItem("R_Max_Range"' "R Max Range Sliders"' true).SetValue(new Slider(2000' 0' 4000)));                        rMenu.AddSubMenu(new Menu("Don't use R on"' "Dont_R"));                      foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(enemy => enemy.Team != Player.Team)                          )                          rMenu.SubMenu("Dont_R")                              .AddItem(new MenuItem("Dont_R" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,LoadMenu,The following statement contains a magic number: {                  harass.AddItem(new MenuItem("UseQHarass"' "Use Q"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseWHarass"' "Use W"' true).SetValue(true));                  ManaManager.AddManaManagertoMenu(harass' "Harass"' 30);                  //add to menu                  menu.AddSubMenu(harass);              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(true));                  ManaManager.AddManaManagertoMenu(farm' "LaneClear"' 30);                  //add to menu                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R_Killable"' "Draw R Mark on Killable"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R_Killable"' "Draw R Mark on Killable"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R_Killable"' "Draw R Mark on Killable"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R_Killable"' "Draw R Mark on Killable"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,GetComboDamage,The following statement contains a magic number: return (float)(comboDamage + Player.GetAutoAttackDamage(target) * 2);
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      var dmg = GetComboDamage(itemTarget);                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      var dmg = GetComboDamage(itemTarget);                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,Cast_E,The following statement contains a magic number: var target = TargetSelector.GetTarget(E.Range + 500' TargetSelector.DamageType.Magical);
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,Cast_E,The following statement contains a magic number: if (E.IsReady() && target != null && menu.Item("E_On_Killable"' true).GetValue<bool>())              {                  if (Player.GetSpellDamage(target' SpellSlot.E) > target.Health + 25)                  {                      if (menu.Item("E_On_Safe"' true).GetValue<bool>())                      {                          var ePos = E.GetPrediction(target);                          if (ePos.CastPosition.CountEnemiesInRange(500) < 2)                              E.Cast(ePos.UnitPosition);                      }                      else                      {                          E.Cast(target);                      }                  }              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,Cast_E,The following statement contains a magic number: if (E.IsReady() && target != null && menu.Item("E_On_Killable"' true).GetValue<bool>())              {                  if (Player.GetSpellDamage(target' SpellSlot.E) > target.Health + 25)                  {                      if (menu.Item("E_On_Safe"' true).GetValue<bool>())                      {                          var ePos = E.GetPrediction(target);                          if (ePos.CastPosition.CountEnemiesInRange(500) < 2)                              E.Cast(ePos.UnitPosition);                      }                      else                      {                          E.Cast(target);                      }                  }              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,Cast_E,The following statement contains a magic number: if (E.IsReady() && target != null && menu.Item("E_On_Killable"' true).GetValue<bool>())              {                  if (Player.GetSpellDamage(target' SpellSlot.E) > target.Health + 25)                  {                      if (menu.Item("E_On_Safe"' true).GetValue<bool>())                      {                          var ePos = E.GetPrediction(target);                          if (ePos.CastPosition.CountEnemiesInRange(500) < 2)                              E.Cast(ePos.UnitPosition);                      }                      else                      {                          E.Cast(target);                      }                  }              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,Cast_R_Killable,The following statement contains a magic number: foreach (var unit in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(20000) && !x.IsDead && x.IsEnemy).OrderBy(x => x.Health))              {                  if (menu.Item("Dont_R" + unit.CharData.BaseSkinName' true) != null)                  {                      if (!menu.Item("Dont_R" + unit.CharData.BaseSkinName' true).GetValue<bool>())                      {                          var health = unit.Health + unit.HPRegenRate * 3 + 25;                          if (Get_R_Dmg(unit) > health)                          {                              R.Cast(unit);                              return;                          }                      }                  }              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,Cast_R_Killable,The following statement contains a magic number: foreach (var unit in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(20000) && !x.IsDead && x.IsEnemy).OrderBy(x => x.Health))              {                  if (menu.Item("Dont_R" + unit.CharData.BaseSkinName' true) != null)                  {                      if (!menu.Item("Dont_R" + unit.CharData.BaseSkinName' true).GetValue<bool>())                      {                          var health = unit.Health + unit.HPRegenRate * 3 + 25;                          if (Get_R_Dmg(unit) > health)                          {                              R.Cast(unit);                              return;                          }                      }                  }              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,Cast_R_Killable,The following statement contains a magic number: foreach (var unit in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(20000) && !x.IsDead && x.IsEnemy).OrderBy(x => x.Health))              {                  if (menu.Item("Dont_R" + unit.CharData.BaseSkinName' true) != null)                  {                      if (!menu.Item("Dont_R" + unit.CharData.BaseSkinName' true).GetValue<bool>())                      {                          var health = unit.Health + unit.HPRegenRate * 3 + 25;                          if (Get_R_Dmg(unit) > health)                          {                              R.Cast(unit);                              return;                          }                      }                  }              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,Get_R_Dmg,The following statement contains a magic number: R.Range = 3000;
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,Get_R_Dmg,The following statement contains a magic number: if (collisionCount >= 7)                  dmg = dmg * .3;              else if (collisionCount != 0)                  dmg = dmg * ((10 - collisionCount) / 10);
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,Get_R_Dmg,The following statement contains a magic number: if (collisionCount >= 7)                  dmg = dmg * .3;              else if (collisionCount != 0)                  dmg = dmg * ((10 - collisionCount) / 10);
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,Get_R_Dmg,The following statement contains a magic number: if (collisionCount >= 7)                  dmg = dmg * .3;              else if (collisionCount != 0)                  dmg = dmg * ((10 - collisionCount) / 10);
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,Get_R_Dmg,The following statement contains a magic number: if (collisionCount >= 7)                  dmg = dmg * .3;              else if (collisionCount != 0)                  dmg = dmg * ((10 - collisionCount) / 10);
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_R_Killable"' true).GetValue<bool>() && R.IsReady())              {                  foreach (var unit in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(20000) && !x.IsDead && x.IsEnemy).OrderBy(x => x.Health))                  {                      var health = unit.Health + unit.HPRegenRate * 3 + 25;                      if (Get_R_Dmg(unit) > health)                      {                          Vector2 wts = Drawing.WorldToScreen(unit.Position);                          Drawing.DrawText(wts[0] - 20' wts[1]' Color.White' "KILL!!!");                      }                  }              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_R_Killable"' true).GetValue<bool>() && R.IsReady())              {                  foreach (var unit in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(20000) && !x.IsDead && x.IsEnemy).OrderBy(x => x.Health))                  {                      var health = unit.Health + unit.HPRegenRate * 3 + 25;                      if (Get_R_Dmg(unit) > health)                      {                          Vector2 wts = Drawing.WorldToScreen(unit.Position);                          Drawing.DrawText(wts[0] - 20' wts[1]' Color.White' "KILL!!!");                      }                  }              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_R_Killable"' true).GetValue<bool>() && R.IsReady())              {                  foreach (var unit in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(20000) && !x.IsDead && x.IsEnemy).OrderBy(x => x.Health))                  {                      var health = unit.Health + unit.HPRegenRate * 3 + 25;                      if (Get_R_Dmg(unit) > health)                      {                          Vector2 wts = Drawing.WorldToScreen(unit.Position);                          Drawing.DrawText(wts[0] - 20' wts[1]' Color.White' "KILL!!!");                      }                  }              }
Magic Number,xSaliceResurrected.ADC,Ezreal,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Ezreal.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_R_Killable"' true).GetValue<bool>() && R.IsReady())              {                  foreach (var unit in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(20000) && !x.IsDead && x.IsEnemy).OrderBy(x => x.Health))                  {                      var health = unit.Health + unit.HPRegenRate * 3 + 25;                      if (Get_R_Dmg(unit) > health)                      {                          Vector2 wts = Drawing.WorldToScreen(unit.Position);                          Drawing.DrawText(wts[0] - 20' wts[1]' Color.White' "KILL!!!");                      }                  }              }
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,SetSpells,The following statement contains a magic number: SpellManager.Q = new Spell(SpellSlot.Q' 1000);
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,SetSpells,The following statement contains a magic number: SpellManager.Q.SetSkillshot(.25f' 70' 1650' true' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,SetSpells,The following statement contains a magic number: SpellManager.Q.SetSkillshot(.25f' 70' 1650' true' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,SetSpells,The following statement contains a magic number: SpellManager.E = new Spell(SpellSlot.E' 1280);
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,SetSpells,The following statement contains a magic number: SpellManager.E.SetSkillshot(.25f' 70' 1650' false' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,SetSpells,The following statement contains a magic number: SpellManager.E.SetSkillshot(.25f' 70' 1650' false' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,SetSpells,The following statement contains a magic number: SpellManager.R = new Spell(SpellSlot.R' 1800);
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,SetSpells,The following statement contains a magic number: SpellManager.R.SetSkillshot(.9f' 150' float.MaxValue' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,LoadMenu,The following statement contains a magic number: {                  key.AddItem(new MenuItem("ComboActive"' "Combo!"' true).SetValue(new KeyBind(32' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle)));                  key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press)));                  //add to menu                  menu.AddSubMenu(key);              }
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,LoadMenu,The following statement contains a magic number: {                  combo.AddItem(new MenuItem("UseQCombo"' "Use Q"' true).SetValue(true));                  combo.AddItem(new MenuItem("UseWCombo"' "Use W"' true).SetValue(true));                  combo.AddItem(new MenuItem("UseECombo"' "Use E"' true).SetValue(true));                  combo.AddItem(new MenuItem("UseRCombo"' "Use R"' true).SetValue(true));                  combo.AddItem(new MenuItem("ComboR_Limit"' "Limit R Stack"' true).SetValue(new Slider(7' 0' 7)));                  combo.AddSubMenu(HitChanceManager.AddHitChanceMenuCombo(true' false' true' true));                  menu.AddSubMenu(combo);              }
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,LoadMenu,The following statement contains a magic number: {                  combo.AddItem(new MenuItem("UseQCombo"' "Use Q"' true).SetValue(true));                  combo.AddItem(new MenuItem("UseWCombo"' "Use W"' true).SetValue(true));                  combo.AddItem(new MenuItem("UseECombo"' "Use E"' true).SetValue(true));                  combo.AddItem(new MenuItem("UseRCombo"' "Use R"' true).SetValue(true));                  combo.AddItem(new MenuItem("ComboR_Limit"' "Limit R Stack"' true).SetValue(new Slider(7' 0' 7)));                  combo.AddSubMenu(HitChanceManager.AddHitChanceMenuCombo(true' false' true' true));                  menu.AddSubMenu(combo);              }
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,LoadMenu,The following statement contains a magic number: {                  harass.AddItem(new MenuItem("UseQHarass"' "Use Q"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseWHarass"' "Use W"' true).SetValue(false));                  harass.AddItem(new MenuItem("UseEHarass"' "Use E"' true).SetValue(false));                  harass.AddItem(new MenuItem("UseRHarass"' "Use R"' true).SetValue(true));                  harass.AddItem(new MenuItem("HarassR_Limit"' "Limit R Stack"' true).SetValue(new Slider(3' 0' 7)));                  harass.AddSubMenu(HitChanceManager.AddHitChanceMenuHarass(true' false' true' true));                  ManaManager.AddManaManagertoMenu(harass' "Harass"' 50);                  menu.AddSubMenu(harass);              }
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,LoadMenu,The following statement contains a magic number: {                  harass.AddItem(new MenuItem("UseQHarass"' "Use Q"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseWHarass"' "Use W"' true).SetValue(false));                  harass.AddItem(new MenuItem("UseEHarass"' "Use E"' true).SetValue(false));                  harass.AddItem(new MenuItem("UseRHarass"' "Use R"' true).SetValue(true));                  harass.AddItem(new MenuItem("HarassR_Limit"' "Limit R Stack"' true).SetValue(new Slider(3' 0' 7)));                  harass.AddSubMenu(HitChanceManager.AddHitChanceMenuHarass(true' false' true' true));                  ManaManager.AddManaManagertoMenu(harass' "Harass"' 50);                  menu.AddSubMenu(harass);              }
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,LoadMenu,The following statement contains a magic number: {                  harass.AddItem(new MenuItem("UseQHarass"' "Use Q"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseWHarass"' "Use W"' true).SetValue(false));                  harass.AddItem(new MenuItem("UseEHarass"' "Use E"' true).SetValue(false));                  harass.AddItem(new MenuItem("UseRHarass"' "Use R"' true).SetValue(true));                  harass.AddItem(new MenuItem("HarassR_Limit"' "Limit R Stack"' true).SetValue(new Slider(3' 0' 7)));                  harass.AddSubMenu(HitChanceManager.AddHitChanceMenuHarass(true' false' true' true));                  ManaManager.AddManaManagertoMenu(harass' "Harass"' 50);                  menu.AddSubMenu(harass);              }
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseEFarm"' "Use E"' true).SetValue(false));                  farm.AddItem(new MenuItem("UseRFarm"' "Use R"' true).SetValue(true));                  farm.AddItem(new MenuItem("LaneClearR_Limit"' "Limit R Stack"' true).SetValue(new Slider(2' 0' 7)));                  ManaManager.AddManaManagertoMenu(farm' "LaneClear"' 50);                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseEFarm"' "Use E"' true).SetValue(false));                  farm.AddItem(new MenuItem("UseRFarm"' "Use R"' true).SetValue(true));                  farm.AddItem(new MenuItem("LaneClearR_Limit"' "Limit R Stack"' true).SetValue(new Slider(2' 0' 7)));                  ManaManager.AddManaManagertoMenu(farm' "LaneClear"' 50);                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseEFarm"' "Use E"' true).SetValue(false));                  farm.AddItem(new MenuItem("UseRFarm"' "Use R"' true).SetValue(true));                  farm.AddItem(new MenuItem("LaneClearR_Limit"' "Limit R Stack"' true).SetValue(new Slider(2' 0' 7)));                  ManaManager.AddManaManagertoMenu(farm' "LaneClear"' 50);                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,GetComboDamage,The following statement contains a magic number: return (float)(comboDamage + Player.GetAutoAttackDamage(target) * 2);
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      var dmg = GetComboDamage(itemTarget);                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      var dmg = GetComboDamage(itemTarget);                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,UseSpells,The following statement contains a magic number: if (useW && W.IsReady())              {                  var target = TargetSelector.GetTarget(Player.AttackRange + new[] { 130 ' 150 ' 170 ' 190 ' 210 }[W.Level - 1]' TargetSelector.DamageType.Magical);                  if (target.IsValidTarget(Player.AttackRange + new[] { 130' 150' 170' 190' 210 }[W.Level - 1]))                      W.Cast();              }
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,UseSpells,The following statement contains a magic number: if (useW && W.IsReady())              {                  var target = TargetSelector.GetTarget(Player.AttackRange + new[] { 130 ' 150 ' 170 ' 190 ' 210 }[W.Level - 1]' TargetSelector.DamageType.Magical);                  if (target.IsValidTarget(Player.AttackRange + new[] { 130' 150' 170' 190' 210 }[W.Level - 1]))                      W.Cast();              }
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,UseSpells,The following statement contains a magic number: if (useW && W.IsReady())              {                  var target = TargetSelector.GetTarget(Player.AttackRange + new[] { 130 ' 150 ' 170 ' 190 ' 210 }[W.Level - 1]' TargetSelector.DamageType.Magical);                  if (target.IsValidTarget(Player.AttackRange + new[] { 130' 150' 170' 190' 210 }[W.Level - 1]))                      W.Cast();              }
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,UseSpells,The following statement contains a magic number: if (useW && W.IsReady())              {                  var target = TargetSelector.GetTarget(Player.AttackRange + new[] { 130 ' 150 ' 170 ' 190 ' 210 }[W.Level - 1]' TargetSelector.DamageType.Magical);                  if (target.IsValidTarget(Player.AttackRange + new[] { 130' 150' 170' 190' 210 }[W.Level - 1]))                      W.Cast();              }
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,UseSpells,The following statement contains a magic number: if (useW && W.IsReady())              {                  var target = TargetSelector.GetTarget(Player.AttackRange + new[] { 130 ' 150 ' 170 ' 190 ' 210 }[W.Level - 1]' TargetSelector.DamageType.Magical);                  if (target.IsValidTarget(Player.AttackRange + new[] { 130' 150' 170' 190' 210 }[W.Level - 1]))                      W.Cast();              }
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,UseSpells,The following statement contains a magic number: if (useW && W.IsReady())              {                  var target = TargetSelector.GetTarget(Player.AttackRange + new[] { 130 ' 150 ' 170 ' 190 ' 210 }[W.Level - 1]' TargetSelector.DamageType.Magical);                  if (target.IsValidTarget(Player.AttackRange + new[] { 130' 150' 170' 190' 210 }[W.Level - 1]))                      W.Cast();              }
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,UseSpells,The following statement contains a magic number: if (useW && W.IsReady())              {                  var target = TargetSelector.GetTarget(Player.AttackRange + new[] { 130 ' 150 ' 170 ' 190 ' 210 }[W.Level - 1]' TargetSelector.DamageType.Magical);                  if (target.IsValidTarget(Player.AttackRange + new[] { 130' 150' 170' 190' 210 }[W.Level - 1]))                      W.Cast();              }
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,UseSpells,The following statement contains a magic number: if (useW && W.IsReady())              {                  var target = TargetSelector.GetTarget(Player.AttackRange + new[] { 130 ' 150 ' 170 ' 190 ' 210 }[W.Level - 1]' TargetSelector.DamageType.Magical);                  if (target.IsValidTarget(Player.AttackRange + new[] { 130' 150' 170' 190' 210 }[W.Level - 1]))                      W.Cast();              }
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,UseSpells,The following statement contains a magic number: if (useW && W.IsReady())              {                  var target = TargetSelector.GetTarget(Player.AttackRange + new[] { 130 ' 150 ' 170 ' 190 ' 210 }[W.Level - 1]' TargetSelector.DamageType.Magical);                  if (target.IsValidTarget(Player.AttackRange + new[] { 130' 150' 170' 190' 210 }[W.Level - 1]))                      W.Cast();              }
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,UseSpells,The following statement contains a magic number: if (useW && W.IsReady())              {                  var target = TargetSelector.GetTarget(Player.AttackRange + new[] { 130 ' 150 ' 170 ' 190 ' 210 }[W.Level - 1]' TargetSelector.DamageType.Magical);                  if (target.IsValidTarget(Player.AttackRange + new[] { 130' 150' 170' 190' 210 }[W.Level - 1]))                      W.Cast();              }
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_W"' true).GetValue<bool>())                  if (W.Level > 0)                      Render.Circle.DrawCircle(Player.Position' Player.AttackRange + new[] { 130' 150' 170' 190' 210 }[W.Level - 1]' W.IsReady() ? Color.Green : Color.Red);
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_W"' true).GetValue<bool>())                  if (W.Level > 0)                      Render.Circle.DrawCircle(Player.Position' Player.AttackRange + new[] { 130' 150' 170' 190' 210 }[W.Level - 1]' W.IsReady() ? Color.Green : Color.Red);
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_W"' true).GetValue<bool>())                  if (W.Level > 0)                      Render.Circle.DrawCircle(Player.Position' Player.AttackRange + new[] { 130' 150' 170' 190' 210 }[W.Level - 1]' W.IsReady() ? Color.Green : Color.Red);
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_W"' true).GetValue<bool>())                  if (W.Level > 0)                      Render.Circle.DrawCircle(Player.Position' Player.AttackRange + new[] { 130' 150' 170' 190' 210 }[W.Level - 1]' W.IsReady() ? Color.Green : Color.Red);
Magic Number,xSaliceResurrected.ADC,KogMaw,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\KogMaw.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_W"' true).GetValue<bool>())                  if (W.Level > 0)                      Render.Circle.DrawCircle(Player.Position' Player.AttackRange + new[] { 130' 150' 170' 190' 210 }[W.Level - 1]' W.IsReady() ? Color.Green : Color.Red);
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,LoadSpells,The following statement contains a magic number: SpellManager.Q = new Spell(SpellSlot.Q' 650);
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,LoadSpells,The following statement contains a magic number: SpellManager.QExtend = new Spell(SpellSlot.Q' 1100);
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,LoadSpells,The following statement contains a magic number: SpellManager.W = new Spell(SpellSlot.W' 1000);
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,LoadSpells,The following statement contains a magic number: SpellManager.W.SetSkillshot(0.3f' 80' 1600' true' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,LoadSpells,The following statement contains a magic number: SpellManager.W.SetSkillshot(0.3f' 80' 1600' true' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,LoadSpells,The following statement contains a magic number: SpellManager.E = new Spell(SpellSlot.E' 425);
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,LoadSpells,The following statement contains a magic number: SpellManager.R = new Spell(SpellSlot.R' 1400);
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,LoadSpells,The following statement contains a magic number: SpellManager.R.SetSkillshot(.1f' 110' 2800' true' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,LoadSpells,The following statement contains a magic number: SpellManager.R.SetSkillshot(.1f' 110' 2800' true' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,LoadMenu,The following statement contains a magic number: {                  key.AddItem(new MenuItem("ComboActive"' "Combo!"' true).SetValue(new KeyBind(32' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press)));                  //add to menu                  menu.AddSubMenu(key);              }
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,LoadMenu,The following statement contains a magic number: {                  harass.AddItem(new MenuItem("UseQHarass"' "Use Q"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseWHarass"' "Use W"' true).SetValue(false));                  harass.AddItem(new MenuItem("UseEHarass"' "Use E"' true).SetValue(true));                  harass.AddSubMenu(HitChanceManager.AddHitChanceMenuHarass(false' true' false' false));                  ManaManager.AddManaManagertoMenu(harass' "Harass"' 30);                  //add to menu                  menu.AddSubMenu(harass);              }
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseWFarm"' "Use W"' true).SetValue(true));                  ManaManager.AddManaManagertoMenu(farm' "LaneClear"' 30);                  //add to menu                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,LoadMenu,The following statement contains a magic number: {                  misc.AddSubMenu(AoeSpellManager.AddHitChanceMenuCombo(false' true' false' false));                  misc.AddItem(new MenuItem("MovementCheck"' "Only Cast Extended Q When Enemy is moving(More Accurate)"' true).SetValue(false));                  misc.AddItem(new MenuItem("CheckPassive"' "Smart Passive"' true).SetValue(true));                  misc.AddItem(new MenuItem("smartKS"' "Use Smart KS System"' true).SetValue(true));                  misc.AddItem(new MenuItem("E_If_HP"' "Do not E If HP <="' true).SetValue(new Slider(20)));                  //add to menu                  menu.AddSubMenu(misc);              }
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_Q_Extended"' "Draw Q Extended"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_Q_Extended"' "Draw Q Extended"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_Q_Extended"' "Draw Q Extended"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_Q_Extended"' "Draw Q Extended"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,GetComboDamage,The following statement contains a magic number: if (Q.IsReady())                  comboDamage += Player.GetSpellDamage(target' SpellSlot.Q) * 2;
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,GetComboDamage,The following statement contains a magic number: return (float)(comboDamage + Player.GetAutoAttackDamage(target) * 2);
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,GetShots,The following statement contains a magic number: if (R.Level == 1)                  shots = 7.5 + 7.5 * (Player.AttackSpeedMod - .6);
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,GetShots,The following statement contains a magic number: if (R.Level == 1)                  shots = 7.5 + 7.5 * (Player.AttackSpeedMod - .6);
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,GetShots,The following statement contains a magic number: if (R.Level == 1)                  shots = 7.5 + 7.5 * (Player.AttackSpeedMod - .6);
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,GetShots,The following statement contains a magic number: if (R.Level == 2)                  shots = 7.5 + 9 * (Player.AttackSpeedMod - .6);
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,GetShots,The following statement contains a magic number: if (R.Level == 2)                  shots = 7.5 + 9 * (Player.AttackSpeedMod - .6);
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,GetShots,The following statement contains a magic number: if (R.Level == 2)                  shots = 7.5 + 9 * (Player.AttackSpeedMod - .6);
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,GetShots,The following statement contains a magic number: if (R.Level == 2)                  shots = 7.5 + 9 * (Player.AttackSpeedMod - .6);
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,GetShots,The following statement contains a magic number: if (R.Level == 3)                  shots = 7.5 + 10.5 * (Player.AttackSpeedMod - .6);
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,GetShots,The following statement contains a magic number: if (R.Level == 3)                  shots = 7.5 + 10.5 * (Player.AttackSpeedMod - .6);
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,GetShots,The following statement contains a magic number: if (R.Level == 3)                  shots = 7.5 + 10.5 * (Player.AttackSpeedMod - .6);
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,GetShots,The following statement contains a magic number: if (R.Level == 3)                  shots = 7.5 + 10.5 * (Player.AttackSpeedMod - .6);
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,GetShots,The following statement contains a magic number: return shots / 1.4;
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      var dmg = GetComboDamage(itemTarget);                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      var dmg = GetComboDamage(itemTarget);                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,UseSpells,The following statement contains a magic number: if (_ticker > 45)                  _ticker = 0;
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,UseSpells,The following statement contains a magic number: if (useQ && _ticker < 15)                  Cast_Q();
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,UseSpells,The following statement contains a magic number: if (useW && _ticker < 30)                  Cast_W(source);
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,UseSpells,The following statement contains a magic number: if (useE && _ticker == 45)                  Cast_E();
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,Cast_E,The following statement contains a magic number: if (Player.Distance(Game.CursorPos) < E.Range & Player.Distance(Game.CursorPos) > 150)                  vec = Game.CursorPos;
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,Cast_E,The following statement contains a magic number: if (vec.CountEnemiesInRange(500) >= 3 && vec.CountAlliesInRange(400) < 3)                  return;
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,Cast_E,The following statement contains a magic number: if (vec.CountEnemiesInRange(500) >= 3 && vec.CountAlliesInRange(400) < 3)                  return;
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,Cast_E,The following statement contains a magic number: if (vec.CountEnemiesInRange(500) >= 3 && vec.CountAlliesInRange(400) < 3)                  return;
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,Cast_E,The following statement contains a magic number: if (vec.CountEnemiesInRange(500) >= 3 && vec.CountAlliesInRange(400) < 3)                  return;
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,PassiveCheck,The following statement contains a magic number: if (Utils.TickCount - Q.LastCastAttemptT < 500)                  return false;
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,PassiveCheck,The following statement contains a magic number: if (Utils.TickCount - W.LastCastAttemptT < 500)                  return false;
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,PassiveCheck,The following statement contains a magic number: if (Utils.TickCount - E.LastCastAttemptT < 500)                  return false;
Magic Number,xSaliceResurrected.ADC,Lucian,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Lucian.cs,Farm,The following statement contains a magic number: if (useQ && PassiveCheck())              {                  var allMinions = MinionManager.GetMinions(ObjectManager.Player.Position' Q.Range' MinionTypes.All' MinionTeam.NotAlly);                  var minion = allMinions.FirstOrDefault(minionn => minionn.Distance(Player.Position) <= Q.Range && HealthPrediction.LaneClearHealthPrediction(minionn' 500) > 0);                  if (minion == null)                      return;                    Q.Cast(minion);              }
Magic Number,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,SetSpells,The following statement contains a magic number: SpellManager.Q = new Spell(SpellSlot.Q' 1000);
Magic Number,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,SetSpells,The following statement contains a magic number: SpellManager.Q2 = new Spell(SpellSlot.Q' 1300);
Magic Number,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,SetSpells,The following statement contains a magic number: SpellManager.E = new Spell(SpellSlot.E' 850);
Magic Number,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,SetSpells,The following statement contains a magic number: SpellManager.R = new Spell(SpellSlot.R' 550);
Magic Number,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,LoadMenu,The following statement contains a magic number: {                  key.AddItem(new MenuItem("ComboActive"' "Combo!"' true).SetValue(new KeyBind(32' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle)));                  key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press)));                  //add to menu                  menu.AddSubMenu(key);              }
Magic Number,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Poison"' "Auto Q Poison Target"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("ForceE"' "Require to use E first if Enemy is in E range"' true).SetValue(false));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("W_If_HP"' "W If HP <= "' true).SetValue(new Slider(50)));                      wMenu.AddItem(new MenuItem("W_Always"' "Always W At start Of Combo"' true).SetValue(false));                      spellMenu.AddSubMenu(wMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Safe_Net"' "Do not ult into >= enemies after swap"' true).SetValue(new Slider(2' 0' 5)));                      rMenu.AddItem(new MenuItem("R_If_UnderTurret"' "Ult Enemy If they are under ally Turret"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("R_On_Killable"' "Ult Enemy If they are Killable"' true).SetValue(true));                      rMenu.AddSubMenu(new Menu("Don't use R on"' "Dont_R"));                      foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(enemy => enemy.Team != Player.Team)                          )                          rMenu.SubMenu("Dont_R")                              .AddItem(new MenuItem("Dont_R" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Poison"' "Auto Q Poison Target"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("ForceE"' "Require to use E first if Enemy is in E range"' true).SetValue(false));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("W_If_HP"' "W If HP <= "' true).SetValue(new Slider(50)));                      wMenu.AddItem(new MenuItem("W_Always"' "Always W At start Of Combo"' true).SetValue(false));                      spellMenu.AddSubMenu(wMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Safe_Net"' "Do not ult into >= enemies after swap"' true).SetValue(new Slider(2' 0' 5)));                      rMenu.AddItem(new MenuItem("R_If_UnderTurret"' "Ult Enemy If they are under ally Turret"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("R_On_Killable"' "Ult Enemy If they are Killable"' true).SetValue(true));                      rMenu.AddSubMenu(new Menu("Don't use R on"' "Dont_R"));                      foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(enemy => enemy.Team != Player.Team)                          )                          rMenu.SubMenu("Dont_R")                              .AddItem(new MenuItem("Dont_R" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Poison"' "Auto Q Poison Target"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("ForceE"' "Require to use E first if Enemy is in E range"' true).SetValue(false));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("W_If_HP"' "W If HP <= "' true).SetValue(new Slider(50)));                      wMenu.AddItem(new MenuItem("W_Always"' "Always W At start Of Combo"' true).SetValue(false));                      spellMenu.AddSubMenu(wMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Safe_Net"' "Do not ult into >= enemies after swap"' true).SetValue(new Slider(2' 0' 5)));                      rMenu.AddItem(new MenuItem("R_If_UnderTurret"' "Ult Enemy If they are under ally Turret"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("R_On_Killable"' "Ult Enemy If they are Killable"' true).SetValue(true));                      rMenu.AddSubMenu(new Menu("Don't use R on"' "Dont_R"));                      foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(enemy => enemy.Team != Player.Team)                          )                          rMenu.SubMenu("Dont_R")                              .AddItem(new MenuItem("Dont_R" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,LoadMenu,The following statement contains a magic number: {                  harass.AddItem(new MenuItem("UseQHarass"' "Use Q"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseWHarass"' "Use W"' true).SetValue(false));                  harass.AddItem(new MenuItem("UseEHarass"' "Use E"' true).SetValue(true));                  harass.AddSubMenu(HitChanceManager.AddHitChanceMenuHarass(true' false' true' false));                  ManaManager.AddManaManagertoMenu(harass' "Harass"' 50);                  menu.AddSubMenu(harass);              }
Magic Number,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseEFarm"' "Use E"' true).SetValue(false));                  ManaManager.AddManaManagertoMenu(farm' "LaneClear"' 50);                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,GetComboDamage,The following statement contains a magic number: if (Q.IsReady())                  comboDamage += Player.GetSpellDamage(target' SpellSlot.Q) * 2;
Magic Number,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,GetComboDamage,The following statement contains a magic number: return (float)(comboDamage + Player.GetAutoAttackDamage(target) * 3);
Magic Number,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var dmg = GetComboDamage(target);                  ItemManager.Target = target;                    //see if killable                  if (dmg > target.Health - 50)                      ItemManager.KillableTarget = true;                    ItemManager.UseTargetted = true;              }
Magic Number,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,Cast_R,The following statement contains a magic number: if (R.Instance.Level == 1)                  R.Range = 550;              else if (R.Instance.Level == 2)                  R.Range = 700;              else if (R.Instance.Level == 3)                  R.Range = 850;
Magic Number,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,Cast_R,The following statement contains a magic number: if (R.Instance.Level == 1)                  R.Range = 550;              else if (R.Instance.Level == 2)                  R.Range = 700;              else if (R.Instance.Level == 3)                  R.Range = 850;
Magic Number,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,Cast_R,The following statement contains a magic number: if (R.Instance.Level == 1)                  R.Range = 550;              else if (R.Instance.Level == 2)                  R.Range = 700;              else if (R.Instance.Level == 3)                  R.Range = 850;
Magic Number,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,Cast_R,The following statement contains a magic number: if (R.Instance.Level == 1)                  R.Range = 550;              else if (R.Instance.Level == 2)                  R.Range = 700;              else if (R.Instance.Level == 3)                  R.Range = 850;
Magic Number,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,Cast_R,The following statement contains a magic number: if (R.Instance.Level == 1)                  R.Range = 550;              else if (R.Instance.Level == 2)                  R.Range = 700;              else if (R.Instance.Level == 3)                  R.Range = 850;
Magic Number,xSaliceResurrected.ADC,Urgot,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\ADC\Urgot.cs,Cast_R,The following statement contains a magic number: foreach (var target in HeroManager.Enemies.Where(x => x.IsValidTarget(R.Range)).OrderByDescending(GetComboDamage))              {                  if (menu.Item("Dont_R" + target.CharData.BaseSkinName' true) != null)                  {                      if (!menu.Item("Dont_R" + target.CharData.BaseSkinName' true).GetValue<bool>())                      {                          if (!(target.CountEnemiesInRange(1000) >= safeNet))                          {                              //if killable                              if (menu.Item("R_On_Killable"' true).GetValue<bool>())                              {                                  if (GetComboDamage(target) > target.Health && Player.Distance(target.Position) < R.Range)                                  {                                      R.Cast(target);                                      return;                                  }                              }                                //if player is under turret                              if (menu.Item("R_If_UnderTurret"' true).GetValue<bool>())                              {                                  if (Util.UnderAllyTurret() && Player.Distance(target) > 300f)                                  {                                      R.Cast(target);                                      return;                                  }                              }                          }                      }                  }              }
Magic Number,xSaliceResurrected.Managers,AzirManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AzirManager.cs,GetAzirAaSandwarriorDamage,The following statement contains a magic number: var count = Soilders.Count(obj => obj.Position.Distance(unit.Position) < 350);
Magic Number,xSaliceResurrected.Managers,AzirManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AzirManager.cs,InSoldierAttackRange,The following statement contains a magic number: return Soilders.Count(obj => obj.Position.Distance(target.Position) < 350 && MyHero.Distance(target) < 1000 && !obj.IsMoving) > 0;
Magic Number,xSaliceResurrected.Managers,AzirManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AzirManager.cs,InSoldierAttackRange,The following statement contains a magic number: return Soilders.Count(obj => obj.Position.Distance(target.Position) < 350 && MyHero.Distance(target) < 1000 && !obj.IsMoving) > 0;
Magic Number,xSaliceResurrected.Managers,AzirManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AzirManager.cs,GetTarget,The following statement contains a magic number: if (ActiveMode == Orbwalking.OrbwalkingMode.Mixed || ActiveMode == Orbwalking.OrbwalkingMode.LastHit || ActiveMode == Orbwalking.OrbwalkingMode.LaneClear)              {                  foreach (var minion in from minion in ObjectManager.Get<Obj_AI_Minion>().Where(minion => minion.IsValidTarget() && minion.Name != "Beacon" && InAutoAttackRange(minion)                  && minion.Health < 3 * (MyHero.BaseAttackDamage + MyHero.FlatPhysicalDamageMod))                                         let t = (int)(MyHero.AttackCastDelay * 1000) - 100 + Game.Ping / 2                                         let predHealth = HealthPrediction.GetHealthPrediction(minion' t' 0)                                         where minion.Team != GameObjectTeam.Neutral && predHealth > 0 && predHealth <= (InSoldierAttackRange(minion) ? GetAzirAaSandwarriorDamage(minion) - 30 : MyHero.GetAutoAttackDamage(minion' true))                                         select minion)                      return minion;              }
Magic Number,xSaliceResurrected.Managers,AzirManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AzirManager.cs,GetTarget,The following statement contains a magic number: if (ActiveMode == Orbwalking.OrbwalkingMode.Mixed || ActiveMode == Orbwalking.OrbwalkingMode.LastHit || ActiveMode == Orbwalking.OrbwalkingMode.LaneClear)              {                  foreach (var minion in from minion in ObjectManager.Get<Obj_AI_Minion>().Where(minion => minion.IsValidTarget() && minion.Name != "Beacon" && InAutoAttackRange(minion)                  && minion.Health < 3 * (MyHero.BaseAttackDamage + MyHero.FlatPhysicalDamageMod))                                         let t = (int)(MyHero.AttackCastDelay * 1000) - 100 + Game.Ping / 2                                         let predHealth = HealthPrediction.GetHealthPrediction(minion' t' 0)                                         where minion.Team != GameObjectTeam.Neutral && predHealth > 0 && predHealth <= (InSoldierAttackRange(minion) ? GetAzirAaSandwarriorDamage(minion) - 30 : MyHero.GetAutoAttackDamage(minion' true))                                         select minion)                      return minion;              }
Magic Number,xSaliceResurrected.Managers,AzirManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AzirManager.cs,GetTarget,The following statement contains a magic number: if (ActiveMode == Orbwalking.OrbwalkingMode.Mixed || ActiveMode == Orbwalking.OrbwalkingMode.LastHit || ActiveMode == Orbwalking.OrbwalkingMode.LaneClear)              {                  foreach (var minion in from minion in ObjectManager.Get<Obj_AI_Minion>().Where(minion => minion.IsValidTarget() && minion.Name != "Beacon" && InAutoAttackRange(minion)                  && minion.Health < 3 * (MyHero.BaseAttackDamage + MyHero.FlatPhysicalDamageMod))                                         let t = (int)(MyHero.AttackCastDelay * 1000) - 100 + Game.Ping / 2                                         let predHealth = HealthPrediction.GetHealthPrediction(minion' t' 0)                                         where minion.Team != GameObjectTeam.Neutral && predHealth > 0 && predHealth <= (InSoldierAttackRange(minion) ? GetAzirAaSandwarriorDamage(minion) - 30 : MyHero.GetAutoAttackDamage(minion' true))                                         select minion)                      return minion;              }
Magic Number,xSaliceResurrected.Managers,AzirManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AzirManager.cs,GetTarget,The following statement contains a magic number: if (ActiveMode == Orbwalking.OrbwalkingMode.Mixed || ActiveMode == Orbwalking.OrbwalkingMode.LastHit || ActiveMode == Orbwalking.OrbwalkingMode.LaneClear)              {                  foreach (var minion in from minion in ObjectManager.Get<Obj_AI_Minion>().Where(minion => minion.IsValidTarget() && minion.Name != "Beacon" && InAutoAttackRange(minion)                  && minion.Health < 3 * (MyHero.BaseAttackDamage + MyHero.FlatPhysicalDamageMod))                                         let t = (int)(MyHero.AttackCastDelay * 1000) - 100 + Game.Ping / 2                                         let predHealth = HealthPrediction.GetHealthPrediction(minion' t' 0)                                         where minion.Team != GameObjectTeam.Neutral && predHealth > 0 && predHealth <= (InSoldierAttackRange(minion) ? GetAzirAaSandwarriorDamage(minion) - 30 : MyHero.GetAutoAttackDamage(minion' true))                                         select minion)                      return minion;              }
Magic Number,xSaliceResurrected.Managers,AzirManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AzirManager.cs,GetTarget,The following statement contains a magic number: if (ActiveMode == Orbwalking.OrbwalkingMode.Mixed || ActiveMode == Orbwalking.OrbwalkingMode.LastHit || ActiveMode == Orbwalking.OrbwalkingMode.LaneClear)              {                  foreach (var minion in from minion in ObjectManager.Get<Obj_AI_Minion>().Where(minion => minion.IsValidTarget() && minion.Name != "Beacon" && InAutoAttackRange(minion)                  && minion.Health < 3 * (MyHero.BaseAttackDamage + MyHero.FlatPhysicalDamageMod))                                         let t = (int)(MyHero.AttackCastDelay * 1000) - 100 + Game.Ping / 2                                         let predHealth = HealthPrediction.GetHealthPrediction(minion' t' 0)                                         where minion.Team != GameObjectTeam.Neutral && predHealth > 0 && predHealth <= (InSoldierAttackRange(minion) ? GetAzirAaSandwarriorDamage(minion) - 30 : MyHero.GetAutoAttackDamage(minion' true))                                         select minion)                      return minion;              }
Magic Number,xSaliceResurrected.Managers,AzirManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AzirManager.cs,GetTarget,The following statement contains a magic number: if (ActiveMode == Orbwalking.OrbwalkingMode.LaneClear || ActiveMode == Orbwalking.OrbwalkingMode.Mixed)              {                  float[] maxhealth;                  if (MyHero.ChampionName == "Azir" && Soilders.Count > 0)                  {                      maxhealth = new float[] { 0 };                      var maxhealth1 = maxhealth;                      var minions = MinionManager.GetMinions(ObjectManager.Player.ServerPosition' 800' MinionTypes.All' MinionTeam.Neutral);                      foreach (                          var minion in                              minions                                  .Where(minion => InSoldierAttackRange(minion) && minion.Name != "Beacon" && minion.IsValidTarget())                                  .Where(minion => minion.MaxHealth >= maxhealth1[0] || Math.Abs(maxhealth1[0] - float.MaxValue) < float.Epsilon))                      {                          tempTarget = minion;                          maxhealth[0] = minion.MaxHealth;                      }                      if (tempTarget != null)                          return tempTarget;                  }                    maxhealth = new float[] { 0 };                  var maxhealth2 = maxhealth;                  foreach (var minion in ObjectManager.Get<Obj_AI_Minion>().Where(minion => minion.IsValidTarget(GetAutoAttackRange(MyHero' minion)) && minion.Name != "Beacon" && minion.Team == GameObjectTeam.Neutral).Where(minion => minion.MaxHealth >= maxhealth2[0] || Math.Abs(maxhealth2[0] - float.MaxValue) < float.Epsilon))                  {                      tempTarget = minion;                      maxhealth[0] = minion.MaxHealth;                  }                  if (tempTarget != null)                      return tempTarget;              }
Magic Number,xSaliceResurrected.Managers,AzirManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AzirManager.cs,ShouldWaits,The following statement contains a magic number: return ObjectManager.Get<Obj_AI_Minion>()              .Any(              minion =>              minion.IsValidTarget(850) && minion.Team != GameObjectTeam.Neutral &&              InAutoAttackRange(minion) &&              HealthPrediction.LaneClearHealthPrediction(minion' (int)((MyHero.AttackDelay * 1000) * 2f)' 0) <=              (InSoldierAttackRange(minion) ? GetAzirAaSandwarriorDamage(minion) - 30 : MyHero.GetAutoAttackDamage(minion' true)));
Magic Number,xSaliceResurrected.Managers,AzirManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AzirManager.cs,ShouldWaits,The following statement contains a magic number: return ObjectManager.Get<Obj_AI_Minion>()              .Any(              minion =>              minion.IsValidTarget(850) && minion.Team != GameObjectTeam.Neutral &&              InAutoAttackRange(minion) &&              HealthPrediction.LaneClearHealthPrediction(minion' (int)((MyHero.AttackDelay * 1000) * 2f)' 0) <=              (InSoldierAttackRange(minion) ? GetAzirAaSandwarriorDamage(minion) - 30 : MyHero.GetAutoAttackDamage(minion' true)));
Magic Number,xSaliceResurrected.Managers,AzirManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AzirManager.cs,ShouldWaits,The following statement contains a magic number: return ObjectManager.Get<Obj_AI_Minion>()              .Any(              minion =>              minion.IsValidTarget(850) && minion.Team != GameObjectTeam.Neutral &&              InAutoAttackRange(minion) &&              HealthPrediction.LaneClearHealthPrediction(minion' (int)((MyHero.AttackDelay * 1000) * 2f)' 0) <=              (InSoldierAttackRange(minion) ? GetAzirAaSandwarriorDamage(minion) - 30 : MyHero.GetAutoAttackDamage(minion' true)));
Magic Number,xSaliceResurrected.Managers,AoeSpellManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AOESpellManager.cs,AddHitChanceMenuCombo,The following statement contains a magic number: if (q)              {                  _menu.AddItem(new MenuItem("qAutoLaunch"' "Auto Q if hit >= Enemies"' true).SetValue(new Slider(3' 1' 5)));                  _qEnabled = true;              }
Magic Number,xSaliceResurrected.Managers,AoeSpellManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AOESpellManager.cs,AddHitChanceMenuCombo,The following statement contains a magic number: if (q)              {                  _menu.AddItem(new MenuItem("qAutoLaunch"' "Auto Q if hit >= Enemies"' true).SetValue(new Slider(3' 1' 5)));                  _qEnabled = true;              }
Magic Number,xSaliceResurrected.Managers,AoeSpellManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AOESpellManager.cs,AddHitChanceMenuCombo,The following statement contains a magic number: if (w)              {                  _menu.AddItem(new MenuItem("wAutoLaunch"' "Auto W if hit >= Enemies"' true).SetValue(new Slider(3' 1' 5)));                  _wEnabled = true;              }
Magic Number,xSaliceResurrected.Managers,AoeSpellManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AOESpellManager.cs,AddHitChanceMenuCombo,The following statement contains a magic number: if (w)              {                  _menu.AddItem(new MenuItem("wAutoLaunch"' "Auto W if hit >= Enemies"' true).SetValue(new Slider(3' 1' 5)));                  _wEnabled = true;              }
Magic Number,xSaliceResurrected.Managers,AoeSpellManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AOESpellManager.cs,AddHitChanceMenuCombo,The following statement contains a magic number: if (e)              {                  _menu.AddItem(new MenuItem("eAutoLaunch"' "Auto E if hit >= Enemies"' true).SetValue(new Slider(3' 1' 5)));                  _eEnabled = true;              }
Magic Number,xSaliceResurrected.Managers,AoeSpellManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AOESpellManager.cs,AddHitChanceMenuCombo,The following statement contains a magic number: if (e)              {                  _menu.AddItem(new MenuItem("eAutoLaunch"' "Auto E if hit >= Enemies"' true).SetValue(new Slider(3' 1' 5)));                  _eEnabled = true;              }
Magic Number,xSaliceResurrected.Managers,AoeSpellManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AOESpellManager.cs,AddHitChanceMenuCombo,The following statement contains a magic number: if (r)              {                  _menu.AddItem(new MenuItem("rAutoLaunch"' "Auto R if hit >= Enemies"' true).SetValue(new Slider(3' 1' 5)));                  _rEnabled = true;              }
Magic Number,xSaliceResurrected.Managers,AoeSpellManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AOESpellManager.cs,AddHitChanceMenuCombo,The following statement contains a magic number: if (r)              {                  _menu.AddItem(new MenuItem("rAutoLaunch"' "Auto R if hit >= Enemies"' true).SetValue(new Slider(3' 1' 5)));                  _rEnabled = true;              }
Magic Number,xSaliceResurrected.Managers,AoeSpellManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AOESpellManager.cs,AddHitChanceMenuCombo,The following statement contains a magic number: if (qe)              {                  _menu.AddItem(new MenuItem("qeAutoLaunch"' "Auto QE if hit >= Enemies"' true).SetValue(new Slider(3' 1' 5)));                  _qeEnabled = true;              }
Magic Number,xSaliceResurrected.Managers,AoeSpellManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AOESpellManager.cs,AddHitChanceMenuCombo,The following statement contains a magic number: if (qe)              {                  _menu.AddItem(new MenuItem("qeAutoLaunch"' "Auto QE if hit >= Enemies"' true).SetValue(new Slider(3' 1' 5)));                  _qeEnabled = true;              }
Magic Number,xSaliceResurrected.Managers,AoeSpellManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AOESpellManager.cs,CastMec,The following statement contains a magic number: if (!spell.IsReady() || ObjectManager.Player.HealthPercent <= 10)                  return;
Magic Number,xSaliceResurrected.Managers,AoeSpellManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AOESpellManager.cs,CastComboMec,The following statement contains a magic number: if (!spell.IsReady() || !E.IsReady() || ObjectManager.Player.HealthPercent <= 10)                  return;
Magic Number,xSaliceResurrected.Managers,AoeSpellManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AOESpellManager.cs,CastComboMec,The following statement contains a magic number: const int gateDis = 200;
Magic Number,xSaliceResurrected.Managers,AoeSpellManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\AOESpellManager.cs,CastComboMec,The following statement contains a magic number: foreach (var target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range)))              {                  var tarPred = spell.GetPrediction(target' true);                                    Vector3 gateVector = ObjectManager.Player.Position + Vector3.Normalize(target.ServerPosition - ObjectManager.Player.Position)*gateDis;                    var nearByEnemies = 1;                    var poly = new Geometry.Polygon.Circle(tarPred.UnitPosition' spell.Width);                    nearByEnemies += HeroManager.Enemies.Where(x => x.NetworkId != target.NetworkId).Count(enemy => poly.IsInside(enemy.ServerPosition));                    if (ObjectManager.Player.Distance(tarPred.CastPosition) < spell.Range + 100 && nearByEnemies >= minHit)                  {                      if (Jayce.HammerTime && R.IsReady() && Jayce.CanQcd == 0 && Jayce.CanEcd == 0)                          R.Cast();                      else if(Jayce.HammerTime)                          return;                        Console.WriteLine("Hit Combo: " + nearByEnemies);                      E.Cast(gateVector);                      spell.Cast(tarPred.CastPosition);                      return;                  }              }
Magic Number,xSaliceResurrected.Managers,HitChanceManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\HitChanceManager.cs,AddHitChanceMenuCombo,The following statement contains a magic number: if(q)                  _menuCombo.AddItem(new MenuItem("qHitCombo"' "Q HitChance"' true).SetValue(new StringList(new[] { "Low"' "Med"' "High"' "Very High" }' 2)));
Magic Number,xSaliceResurrected.Managers,HitChanceManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\HitChanceManager.cs,AddHitChanceMenuCombo,The following statement contains a magic number: if(w)                  _menuCombo.AddItem(new MenuItem("wHitCombo"' "W HitChance"' true).SetValue(new StringList(new[] { "Low"' "Med"' "High"' "Very High" }' 2)));
Magic Number,xSaliceResurrected.Managers,HitChanceManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\HitChanceManager.cs,AddHitChanceMenuCombo,The following statement contains a magic number: if(e)                  _menuCombo.AddItem(new MenuItem("eHitCombo"' "E HitChance"' true).SetValue(new StringList(new[] { "Low"' "Med"' "High"' "Very High" }' 2)));
Magic Number,xSaliceResurrected.Managers,HitChanceManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\HitChanceManager.cs,AddHitChanceMenuCombo,The following statement contains a magic number: if(r)                  _menuCombo.AddItem(new MenuItem("rHitCombo"' "R HitChance"' true).SetValue(new StringList(new[] { "Low"' "Med"' "High"' "Very High" }' 2)));
Magic Number,xSaliceResurrected.Managers,HitChanceManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\HitChanceManager.cs,AddHitChanceMenuCombo,The following statement contains a magic number: if(_qe)                  _menuCombo.AddItem(new MenuItem("qeHitCombo"' "QE HitChance"' true).SetValue(new StringList(new[] { "Low"' "Med"' "High"' "Very High" }' 2)));
Magic Number,xSaliceResurrected.Managers,HitChanceManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\HitChanceManager.cs,AddHitChanceMenuHarass,The following statement contains a magic number: if (q)                  _menuHarass.AddItem(new MenuItem("qHitHarass"' "Q HitChance"' true).SetValue(new StringList(new[] { "Low"' "Med"' "High"' "Very High" }' 2)));
Magic Number,xSaliceResurrected.Managers,HitChanceManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\HitChanceManager.cs,AddHitChanceMenuHarass,The following statement contains a magic number: if (w)                  _menuHarass.AddItem(new MenuItem("wHitHarass"' "W HitChance"' true).SetValue(new StringList(new[] { "Low"' "Med"' "High"' "Very High" }' 2)));
Magic Number,xSaliceResurrected.Managers,HitChanceManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\HitChanceManager.cs,AddHitChanceMenuHarass,The following statement contains a magic number: if (e)                  _menuHarass.AddItem(new MenuItem("eHitHarass"' "E HitChance"' true).SetValue(new StringList(new[] { "Low"' "Med"' "High"' "Very High" }' 2)));
Magic Number,xSaliceResurrected.Managers,HitChanceManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\HitChanceManager.cs,AddHitChanceMenuHarass,The following statement contains a magic number: if (r)                  _menuHarass.AddItem(new MenuItem("rHitHarass"' "R HitChance"' true).SetValue(new StringList(new[] { "Low"' "Med"' "High"' "Very High" }' 2)));
Magic Number,xSaliceResurrected.Managers,HitChanceManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\HitChanceManager.cs,AddHitChanceMenuHarass,The following statement contains a magic number: if (_qe)                  _menuHarass.AddItem(new MenuItem("qeHitHarass"' "QE HitChance"' true).SetValue(new StringList(new[] { "Low"' "Med"' "High"' "Very High" }' 2)));
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,CreateList,The following statement contains a magic number: ItemList.Add(new ItemManager              {                  ActiveId = 3144'                  ActiveName = "Bilgewater Cutlass"'                  BuffName = "Offensive"'                  Range = 550'                  Mode = 0'              });
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,CreateList,The following statement contains a magic number: ItemList.Add(new ItemManager              {                  ActiveId = 3144'                  ActiveName = "Bilgewater Cutlass"'                  BuffName = "Offensive"'                  Range = 550'                  Mode = 0'              });
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,CreateList,The following statement contains a magic number: ItemList.Add(new ItemManager              {                  ActiveId = 3153'                  ActiveName = "Blade of the Ruined King"'                  BuffName = "Offensive"'                  Range = 550'                  Mode = 0'              });
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,CreateList,The following statement contains a magic number: ItemList.Add(new ItemManager              {                  ActiveId = 3153'                  ActiveName = "Blade of the Ruined King"'                  BuffName = "Offensive"'                  Range = 550'                  Mode = 0'              });
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,CreateList,The following statement contains a magic number: ItemList.Add(new ItemManager              {                  ActiveId = 3146'                  ActiveName = "Hextech Gunblade"'                  BuffName = "Offensive"'                  Range = 700'                  Mode = 0'              });
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,CreateList,The following statement contains a magic number: ItemList.Add(new ItemManager              {                  ActiveId = 3146'                  ActiveName = "Hextech Gunblade"'                  BuffName = "Offensive"'                  Range = 700'                  Mode = 0'              });
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,CreateList,The following statement contains a magic number: ItemList.Add(new ItemManager              {                  ActiveId = ItemData.Frost_Queens_Claim.Id'                  ActiveName = "Frost Queen's Claim"'                  BuffName = "Offensive"'                  Range = 850'                  Mode = 0'              });
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,CreateList,The following statement contains a magic number: ItemList.Add(new ItemManager              {                  ActiveId = 3042'                  ActiveName = "Muramana"'                  BuffName = "Offensive"'                  Range = int.MaxValue'                  Mode = 2'              });
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,CreateList,The following statement contains a magic number: ItemList.Add(new ItemManager              {                  ActiveId = 3042'                  ActiveName = "Muramana"'                  BuffName = "Offensive"'                  Range = int.MaxValue'                  Mode = 2'              });
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,CreateList,The following statement contains a magic number: ItemList.Add(new ItemManager              {                  ActiveId = 3074'                  ActiveName = "Ravenous Hydra"'                  BuffName = "Offensive"'                  Range = 400'                  Mode = 1'              });
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,CreateList,The following statement contains a magic number: ItemList.Add(new ItemManager              {                  ActiveId = 3074'                  ActiveName = "Ravenous Hydra"'                  BuffName = "Offensive"'                  Range = 400'                  Mode = 1'              });
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,CreateList,The following statement contains a magic number: ItemList.Add(new ItemManager              {                  ActiveId = 3077'                  ActiveName = "Tiamat"'                  BuffName = "Offensive"'                  Range = 400'                  Mode = 1'              });
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,CreateList,The following statement contains a magic number: ItemList.Add(new ItemManager              {                  ActiveId = 3077'                  ActiveName = "Tiamat"'                  BuffName = "Offensive"'                  Range = 400'                  Mode = 1'              });
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,CreateList,The following statement contains a magic number: ItemList.Add(new ItemManager              {                  ActiveId = 3142'                  ActiveName = "Youmuu's Ghostblade"'                  BuffName = "Offensive"'                  Range = (int)(ObjectManager.Player.AttackRange * 2)'                  Mode = 1'              });
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,CreateList,The following statement contains a magic number: ItemList.Add(new ItemManager              {                  ActiveId = 3142'                  ActiveName = "Youmuu's Ghostblade"'                  BuffName = "Offensive"'                  Range = (int)(ObjectManager.Player.AttackRange * 2)'                  Mode = 1'              });
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,CreateList,The following statement contains a magic number: ItemList.Add(new ItemManager              {                  ActiveId = ItemData.Crystalline_Flask.Id'                  ActiveName = "Crystaline Flask"'                  BuffName = "ItemCrystalFlask"'                  Range = int.MaxValue'                  Mode = 3'              });
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,CreateList,The following statement contains a magic number: ItemList.Add(new ItemManager              {                  ActiveId = ItemData.Health_Potion.Id'                  ActiveName = "Health Potion"'                  BuffName = "RegenerationPotion"'                  Range = int.MaxValue'                  Mode = 4'              });
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,CreateList,The following statement contains a magic number: ItemList.Add(new ItemManager              {                  ActiveId = ItemData.Mana_Potion.Id'                  ActiveName = "Mana Potion"'                  BuffName = "FlaskOfCrystalWater"'                  Range = int.MaxValue'                  Mode = 5'              });
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,AddToMenu,The following statement contains a magic number: {                  foreach (var item in ItemList.Where(x => x.Mode < 3))                  {                      AddOffensiveItem(offensiveItem' item);                  }                  _myMenu.AddSubMenu(offensiveItem);              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,AddToMenu,The following statement contains a magic number: {                  foreach (var item in ItemList.Where(x => (x.Mode == 3 || x.Mode == 5 || x.Mode == 4)))                  {                      AddPotion(potions' item);                  }                  _myMenu.AddSubMenu(potions);              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,AddToMenu,The following statement contains a magic number: {                  foreach (var item in ItemList.Where(x => (x.Mode == 3 || x.Mode == 5 || x.Mode == 4)))                  {                      AddPotion(potions' item);                  }                  _myMenu.AddSubMenu(potions);              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,AddToMenu,The following statement contains a magic number: {                  foreach (var item in ItemList.Where(x => (x.Mode == 3 || x.Mode == 5 || x.Mode == 4)))                  {                      AddPotion(potions' item);                  }                  _myMenu.AddSubMenu(potions);              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,AddOffensiveItem,The following statement contains a magic number: {                  active.AddItem(new MenuItem(item.ActiveName' item.ActiveName' true).SetValue(true));                  active.AddItem(new MenuItem(item.ActiveName + "dmgCalc"' "Add to damage Calculation"' true).SetValue(true));                  active.AddItem(new MenuItem(item.ActiveName + "killAble"' "Use only if enemy is killable"' true).SetValue(false));                  active.AddItem(new MenuItem(item.ActiveName + "always"' "Always use"' true).SetValue(item.Mode == 1 || item.Mode == 2));                  active.AddItem(new MenuItem(item.ActiveName + "myHP"' "Use if HP <= %"' true).SetValue(new Slider(25)));                  active.AddItem(new MenuItem(item.ActiveName + "enemyHP"' "Use if target HP <= %"' true).SetValue(new Slider(50)));                    subMenu.AddSubMenu(active);              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,AddOffensiveItem,The following statement contains a magic number: {                  active.AddItem(new MenuItem(item.ActiveName' item.ActiveName' true).SetValue(true));                  active.AddItem(new MenuItem(item.ActiveName + "dmgCalc"' "Add to damage Calculation"' true).SetValue(true));                  active.AddItem(new MenuItem(item.ActiveName + "killAble"' "Use only if enemy is killable"' true).SetValue(false));                  active.AddItem(new MenuItem(item.ActiveName + "always"' "Always use"' true).SetValue(item.Mode == 1 || item.Mode == 2));                  active.AddItem(new MenuItem(item.ActiveName + "myHP"' "Use if HP <= %"' true).SetValue(new Slider(25)));                  active.AddItem(new MenuItem(item.ActiveName + "enemyHP"' "Use if target HP <= %"' true).SetValue(new Slider(50)));                    subMenu.AddSubMenu(active);              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,AddOffensiveItem,The following statement contains a magic number: {                  active.AddItem(new MenuItem(item.ActiveName' item.ActiveName' true).SetValue(true));                  active.AddItem(new MenuItem(item.ActiveName + "dmgCalc"' "Add to damage Calculation"' true).SetValue(true));                  active.AddItem(new MenuItem(item.ActiveName + "killAble"' "Use only if enemy is killable"' true).SetValue(false));                  active.AddItem(new MenuItem(item.ActiveName + "always"' "Always use"' true).SetValue(item.Mode == 1 || item.Mode == 2));                  active.AddItem(new MenuItem(item.ActiveName + "myHP"' "Use if HP <= %"' true).SetValue(new Slider(25)));                  active.AddItem(new MenuItem(item.ActiveName + "enemyHP"' "Use if target HP <= %"' true).SetValue(new Slider(50)));                    subMenu.AddSubMenu(active);              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,AddPotion,The following statement contains a magic number: {                  active.AddItem(new MenuItem(item.ActiveName' item.ActiveName' true).SetValue(true));                  if (item.Mode == 3 || item.Mode == 4)                      active.AddItem(new MenuItem(item.ActiveName + "myHP"' "Use if HP <= %"' true).SetValue(new Slider(50)));                  if (item.Mode == 3 || item.Mode == 5)                      active.AddItem(new MenuItem(item.ActiveName + "myMP"' "Use if MP <= %"' true).SetValue(new Slider(50)));                    subMenu.AddSubMenu(active);              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,AddPotion,The following statement contains a magic number: {                  active.AddItem(new MenuItem(item.ActiveName' item.ActiveName' true).SetValue(true));                  if (item.Mode == 3 || item.Mode == 4)                      active.AddItem(new MenuItem(item.ActiveName + "myHP"' "Use if HP <= %"' true).SetValue(new Slider(50)));                  if (item.Mode == 3 || item.Mode == 5)                      active.AddItem(new MenuItem(item.ActiveName + "myMP"' "Use if MP <= %"' true).SetValue(new Slider(50)));                    subMenu.AddSubMenu(active);              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,AddPotion,The following statement contains a magic number: {                  active.AddItem(new MenuItem(item.ActiveName' item.ActiveName' true).SetValue(true));                  if (item.Mode == 3 || item.Mode == 4)                      active.AddItem(new MenuItem(item.ActiveName + "myHP"' "Use if HP <= %"' true).SetValue(new Slider(50)));                  if (item.Mode == 3 || item.Mode == 5)                      active.AddItem(new MenuItem(item.ActiveName + "myMP"' "Use if MP <= %"' true).SetValue(new Slider(50)));                    subMenu.AddSubMenu(active);              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,AddPotion,The following statement contains a magic number: {                  active.AddItem(new MenuItem(item.ActiveName' item.ActiveName' true).SetValue(true));                  if (item.Mode == 3 || item.Mode == 4)                      active.AddItem(new MenuItem(item.ActiveName + "myHP"' "Use if HP <= %"' true).SetValue(new Slider(50)));                  if (item.Mode == 3 || item.Mode == 5)                      active.AddItem(new MenuItem(item.ActiveName + "myMP"' "Use if MP <= %"' true).SetValue(new Slider(50)));                    subMenu.AddSubMenu(active);              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,AddPotion,The following statement contains a magic number: {                  active.AddItem(new MenuItem(item.ActiveName' item.ActiveName' true).SetValue(true));                  if (item.Mode == 3 || item.Mode == 4)                      active.AddItem(new MenuItem(item.ActiveName + "myHP"' "Use if HP <= %"' true).SetValue(new Slider(50)));                  if (item.Mode == 3 || item.Mode == 5)                      active.AddItem(new MenuItem(item.ActiveName + "myMP"' "Use if MP <= %"' true).SetValue(new Slider(50)));                    subMenu.AddSubMenu(active);              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,AddPotion,The following statement contains a magic number: {                  active.AddItem(new MenuItem(item.ActiveName' item.ActiveName' true).SetValue(true));                  if (item.Mode == 3 || item.Mode == 4)                      active.AddItem(new MenuItem(item.ActiveName + "myHP"' "Use if HP <= %"' true).SetValue(new Slider(50)));                  if (item.Mode == 3 || item.Mode == 5)                      active.AddItem(new MenuItem(item.ActiveName + "myMP"' "Use if MP <= %"' true).SetValue(new Slider(50)));                    subMenu.AddSubMenu(active);              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,Game_OnGameUpdate,The following statement contains a magic number: if (ObjectManager.Player.HasBuff("Muramana") && Items.CanUseItem(3042) && Utils.TickCount - _lastMura > 5000)              {                  CastMuraMana();              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,Game_OnGameUpdate,The following statement contains a magic number: if (ObjectManager.Player.HasBuff("Muramana") && Items.CanUseItem(3042) && Utils.TickCount - _lastMura > 5000)              {                  CastMuraMana();              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,Game_OnGameUpdate,The following statement contains a magic number: if (!IsUsingHealthPot)              {                  foreach (var potion in from potion in ItemList.Where(x => (x.Mode == 3 || x.Mode == 4) &&                      Items.HasItem(x.ActiveId) &&                      Items.CanUseItem(x.ActiveId) &&                      ShouldUse(x.ActiveName))                      where !ObjectManager.Player.IsRecalling() && !ObjectManager.Player.InFountain()                      where ObjectManager.Player.HealthPercent <= UsePotAtHp(potion.ActiveName)                      select potion)                  {                      Items.UseItem(potion.ActiveId);                  }              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,Game_OnGameUpdate,The following statement contains a magic number: if (!IsUsingHealthPot)              {                  foreach (var potion in from potion in ItemList.Where(x => (x.Mode == 3 || x.Mode == 4) &&                      Items.HasItem(x.ActiveId) &&                      Items.CanUseItem(x.ActiveId) &&                      ShouldUse(x.ActiveName))                      where !ObjectManager.Player.IsRecalling() && !ObjectManager.Player.InFountain()                      where ObjectManager.Player.HealthPercent <= UsePotAtHp(potion.ActiveName)                      select potion)                  {                      Items.UseItem(potion.ActiveId);                  }              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,Game_OnGameUpdate,The following statement contains a magic number: if (!IsUsingManaPot)              {                  foreach (var potion in from potion in ItemList.Where(x => (x.Mode == 3 || x.Mode == 5) &&                      Items.HasItem(x.ActiveId) &&                      Items.CanUseItem(x.ActiveId) &&                      ShouldUse(x.ActiveName))                      where !ObjectManager.Player.IsRecalling() && !ObjectManager.Player.InFountain()                      where ObjectManager.Player.ManaPercent <= UsePotAtMp(potion.ActiveName)                      select potion)                  {                      Items.UseItem(potion.ActiveId);                  }              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,Game_OnGameUpdate,The following statement contains a magic number: if (!IsUsingManaPot)              {                  foreach (var potion in from potion in ItemList.Where(x => (x.Mode == 3 || x.Mode == 5) &&                      Items.HasItem(x.ActiveId) &&                      Items.CanUseItem(x.ActiveId) &&                      ShouldUse(x.ActiveName))                      where !ObjectManager.Player.IsRecalling() && !ObjectManager.Player.InFountain()                      where ObjectManager.Player.ManaPercent <= UsePotAtMp(potion.ActiveName)                      select potion)                  {                      Items.UseItem(potion.ActiveId);                  }              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,Game_OnGameUpdate,The following statement contains a magic number: if (_myMenu.Item("ignite"' true).GetValue<bool>())              {                  //ignite                  int igniteMode = _myMenu.Item("igniteMode"' true).GetValue<StringList>().SelectedIndex;                    if (KillableTarget && igniteMode == 0 && Ignite_Ready())                      Use_Ignite(Target);                  else if (ObjectManager.Player.GetSummonerSpellDamage(Target' Damage.SummonerSpell.Ignite) > Target.Health + 20 && Ignite_Ready())                      Use_Ignite(Target);              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,OnAttack,The following statement contains a magic number: foreach (var item in ItemList.Where(x => x.Mode == 2 && Items.CanUseItem(x.ActiveId) && ShouldUse(x.ActiveName)))              {                  if (!ObjectManager.Player.HasBuff("Muramana"))                  {                      //Game.PrintChat("RAWR");                      if (AlwaysUse(item.ActiveName))                      {                          CastMuraMana();                          _lastMura = Utils.TickCount;                      }                        if (KillableTarget)                      {                          CastMuraMana();                          _lastMura = Utils.TickCount;                      }                        if (ObjectManager.Player.HealthPercent <= UseAtMyHp(item.ActiveName) && !OnlyIfKillable(item.ActiveName))                      {                          CastMuraMana();                          _lastMura = Utils.TickCount;                      }                        if (Target.HealthPercent <= UseAtEnemyHp(item.ActiveName) && !OnlyIfKillable(item.ActiveName))                      {                          CastMuraMana();                          _lastMura = Utils.TickCount;                      }                  }                  else if (ObjectManager.Player.HasBuff("Muramana"))                  {                      _lastMura = Utils.TickCount;                  }              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,SpellbookOnOnCastSpell,The following statement contains a magic number: foreach (var item in ItemList.Where(x => x.Mode == 2 && Items.CanUseItem(x.ActiveId) && ShouldUse(x.ActiveName)))              {                  if (!ObjectManager.Player.HasBuff("Muramana"))                  {                      if (AlwaysUse(item.ActiveName))                      {                          CastMuraMana();                          _lastMura = Utils.TickCount;                      }                        if (KillableTarget)                      {                          CastMuraMana();                          _lastMura = Utils.TickCount;                      }                        if (ObjectManager.Player.HealthPercent <= UseAtMyHp(item.ActiveName) && !OnlyIfKillable(item.ActiveName))                      {                          CastMuraMana();                          _lastMura = Utils.TickCount;                      }                        if (Target.HealthPercent <= UseAtEnemyHp(item.ActiveName) && !OnlyIfKillable(item.ActiveName))                      {                          CastMuraMana();                          _lastMura = Utils.TickCount;                      }                  }                  else if (ObjectManager.Player.HasBuff("Muramana"))                  {                      _lastMura = Utils.TickCount;                  }              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,CalcDamage,The following statement contains a magic number: foreach (var item in ItemList.Where(x => x.Mode <= 1 && Items.HasItem(x.ActiveId)  && Items.CanUseItem(x.ActiveId)))              {                  if (ShouldUse(item.ActiveName) && AddToDmgCalc(item.ActiveName))                  {                      //bilge                      if (item.ActiveId == 3144)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Bilgewater);                        //Botrk                      if (item.ActiveId == 3153)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Botrk);                        //hextech                      if (item.ActiveId == 3146)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Hexgun);                        //hydra                      if (item.ActiveId == 3074)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Hydra);                        //tiamat                      if (item.ActiveId == 3077)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Tiamat);                        //sheen                      if (Items.HasItem(3057))                          dmg += ObjectManager.Player.CalcDamage(target' Damage.DamageType.Physical' SheenDamage());                        //lich bane                      if (Items.HasItem(3100))                          dmg += ObjectManager.Player.CalcDamage(target' Damage.DamageType.Magical' LichDamage());                  }              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,CalcDamage,The following statement contains a magic number: foreach (var item in ItemList.Where(x => x.Mode <= 1 && Items.HasItem(x.ActiveId)  && Items.CanUseItem(x.ActiveId)))              {                  if (ShouldUse(item.ActiveName) && AddToDmgCalc(item.ActiveName))                  {                      //bilge                      if (item.ActiveId == 3144)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Bilgewater);                        //Botrk                      if (item.ActiveId == 3153)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Botrk);                        //hextech                      if (item.ActiveId == 3146)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Hexgun);                        //hydra                      if (item.ActiveId == 3074)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Hydra);                        //tiamat                      if (item.ActiveId == 3077)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Tiamat);                        //sheen                      if (Items.HasItem(3057))                          dmg += ObjectManager.Player.CalcDamage(target' Damage.DamageType.Physical' SheenDamage());                        //lich bane                      if (Items.HasItem(3100))                          dmg += ObjectManager.Player.CalcDamage(target' Damage.DamageType.Magical' LichDamage());                  }              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,CalcDamage,The following statement contains a magic number: foreach (var item in ItemList.Where(x => x.Mode <= 1 && Items.HasItem(x.ActiveId)  && Items.CanUseItem(x.ActiveId)))              {                  if (ShouldUse(item.ActiveName) && AddToDmgCalc(item.ActiveName))                  {                      //bilge                      if (item.ActiveId == 3144)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Bilgewater);                        //Botrk                      if (item.ActiveId == 3153)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Botrk);                        //hextech                      if (item.ActiveId == 3146)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Hexgun);                        //hydra                      if (item.ActiveId == 3074)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Hydra);                        //tiamat                      if (item.ActiveId == 3077)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Tiamat);                        //sheen                      if (Items.HasItem(3057))                          dmg += ObjectManager.Player.CalcDamage(target' Damage.DamageType.Physical' SheenDamage());                        //lich bane                      if (Items.HasItem(3100))                          dmg += ObjectManager.Player.CalcDamage(target' Damage.DamageType.Magical' LichDamage());                  }              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,CalcDamage,The following statement contains a magic number: foreach (var item in ItemList.Where(x => x.Mode <= 1 && Items.HasItem(x.ActiveId)  && Items.CanUseItem(x.ActiveId)))              {                  if (ShouldUse(item.ActiveName) && AddToDmgCalc(item.ActiveName))                  {                      //bilge                      if (item.ActiveId == 3144)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Bilgewater);                        //Botrk                      if (item.ActiveId == 3153)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Botrk);                        //hextech                      if (item.ActiveId == 3146)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Hexgun);                        //hydra                      if (item.ActiveId == 3074)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Hydra);                        //tiamat                      if (item.ActiveId == 3077)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Tiamat);                        //sheen                      if (Items.HasItem(3057))                          dmg += ObjectManager.Player.CalcDamage(target' Damage.DamageType.Physical' SheenDamage());                        //lich bane                      if (Items.HasItem(3100))                          dmg += ObjectManager.Player.CalcDamage(target' Damage.DamageType.Magical' LichDamage());                  }              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,CalcDamage,The following statement contains a magic number: foreach (var item in ItemList.Where(x => x.Mode <= 1 && Items.HasItem(x.ActiveId)  && Items.CanUseItem(x.ActiveId)))              {                  if (ShouldUse(item.ActiveName) && AddToDmgCalc(item.ActiveName))                  {                      //bilge                      if (item.ActiveId == 3144)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Bilgewater);                        //Botrk                      if (item.ActiveId == 3153)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Botrk);                        //hextech                      if (item.ActiveId == 3146)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Hexgun);                        //hydra                      if (item.ActiveId == 3074)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Hydra);                        //tiamat                      if (item.ActiveId == 3077)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Tiamat);                        //sheen                      if (Items.HasItem(3057))                          dmg += ObjectManager.Player.CalcDamage(target' Damage.DamageType.Physical' SheenDamage());                        //lich bane                      if (Items.HasItem(3100))                          dmg += ObjectManager.Player.CalcDamage(target' Damage.DamageType.Magical' LichDamage());                  }              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,CalcDamage,The following statement contains a magic number: foreach (var item in ItemList.Where(x => x.Mode <= 1 && Items.HasItem(x.ActiveId)  && Items.CanUseItem(x.ActiveId)))              {                  if (ShouldUse(item.ActiveName) && AddToDmgCalc(item.ActiveName))                  {                      //bilge                      if (item.ActiveId == 3144)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Bilgewater);                        //Botrk                      if (item.ActiveId == 3153)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Botrk);                        //hextech                      if (item.ActiveId == 3146)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Hexgun);                        //hydra                      if (item.ActiveId == 3074)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Hydra);                        //tiamat                      if (item.ActiveId == 3077)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Tiamat);                        //sheen                      if (Items.HasItem(3057))                          dmg += ObjectManager.Player.CalcDamage(target' Damage.DamageType.Physical' SheenDamage());                        //lich bane                      if (Items.HasItem(3100))                          dmg += ObjectManager.Player.CalcDamage(target' Damage.DamageType.Magical' LichDamage());                  }              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,CalcDamage,The following statement contains a magic number: foreach (var item in ItemList.Where(x => x.Mode <= 1 && Items.HasItem(x.ActiveId)  && Items.CanUseItem(x.ActiveId)))              {                  if (ShouldUse(item.ActiveName) && AddToDmgCalc(item.ActiveName))                  {                      //bilge                      if (item.ActiveId == 3144)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Bilgewater);                        //Botrk                      if (item.ActiveId == 3153)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Botrk);                        //hextech                      if (item.ActiveId == 3146)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Hexgun);                        //hydra                      if (item.ActiveId == 3074)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Hydra);                        //tiamat                      if (item.ActiveId == 3077)                          dmg += ObjectManager.Player.GetItemDamage(target' Damage.DamageItems.Tiamat);                        //sheen                      if (Items.HasItem(3057))                          dmg += ObjectManager.Player.CalcDamage(target' Damage.DamageType.Physical' SheenDamage());                        //lich bane                      if (Items.HasItem(3100))                          dmg += ObjectManager.Player.CalcDamage(target' Damage.DamageType.Magical' LichDamage());                  }              }
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,LichDamage,The following statement contains a magic number: dmg += .75 * ObjectManager.Player.FlatPhysicalDamageMod;
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,LichDamage,The following statement contains a magic number: dmg += .5 * ObjectManager.Player.FlatMagicDamageMod;
Magic Number,xSaliceResurrected.Managers,ItemManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\ItemManager.cs,Use_Ignite,The following statement contains a magic number: if (target != null && IgniteSlot != SpellSlot.Unknown && ObjectManager.Player.Spellbook.CanUseSpell(IgniteSlot) == SpellState.Ready && ObjectManager.Player.Distance(target.Position) < 650)                  ObjectManager.Player.Spellbook.CastSpell(IgniteSlot' target);
Magic Number,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,CastBasicFarm,The following statement contains a magic number: if (spell.Type == SkillshotType.SkillshotCircle)              {                  spell.UpdateSourcePosition();                    var predPosition = spell.GetCircularFarmLocation(minion);                    if (predPosition.MinionsHit >= 2)                  {                      spell.Cast(predPosition.Position);                  }              }              else if (spell.Type == SkillshotType.SkillshotLine || spell.Type == SkillshotType.SkillshotCone)              {                  spell.UpdateSourcePosition();                    var predPosition = spell.GetLineFarmLocation(minion);                    if (predPosition.MinionsHit >= 2)                      spell.Cast(predPosition.Position);              }
Magic Number,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,CastBasicFarm,The following statement contains a magic number: if (spell.Type == SkillshotType.SkillshotCircle)              {                  spell.UpdateSourcePosition();                    var predPosition = spell.GetCircularFarmLocation(minion);                    if (predPosition.MinionsHit >= 2)                  {                      spell.Cast(predPosition.Position);                  }              }              else if (spell.Type == SkillshotType.SkillshotLine || spell.Type == SkillshotType.SkillshotCone)              {                  spell.UpdateSourcePosition();                    var predPosition = spell.GetLineFarmLocation(minion);                    if (predPosition.MinionsHit >= 2)                      spell.Cast(predPosition.Position);              }
Magic Number,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,CastSingleLine,The following statement contains a magic number: if (Player.Distance(target) < spell.Range)              {                  var vector2 = pred.CastPosition.Extend(target.ServerPosition' spell2.Range*.3f);                  Geometry.Polygon.Rectangle rec2 = new Geometry.Polygon.Rectangle(vector2' vector2.Extend(pred.CastPosition' spell2.Range)' spell.Width);                    if ((!rec2.Points.Exists(Util.IsWall) || !wallCheck) && pred.Hitchance >= HitChance.Medium && target.IsMoving)                  {                      spell2.UpdateSourcePosition(vector2' vector2);                      CastLineSpell(vector2' vector2.Extend(pred.CastPosition' spell2.Range));                      _lastCast = Utils.TickCount + 500;                  }                }              else if (!rec1.Points.Exists(Util.IsWall) || !wallCheck)              {                  //wall check                  if (pred.Hitchance >= HitChance.High)                  {                      CastLineSpell(vector1' pred.CastPosition);                  }              }
Magic Number,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,CastBestLine,The following statement contains a magic number: foreach (var target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range)))              {                 //loop 2                  var target1 = target;                  var target2 = target;                  foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range + spell2.Range) && x.NetworkId != target1.NetworkId                      && x.Distance(target1.Position) < spell2.Range - 100).OrderByDescending(x => x.Distance(target2.Position)))                  {                      int hit = 2;                        var targetPred = Prediction.GetPrediction(target' spell.Delay);                      var enemyPred = Prediction.GetPrediction(enemy' spell.Delay);                        var midpoint = (enemyPred.CastPosition + targetPred.CastPosition) / 2;                        var startpos = midpoint + Vector3.Normalize(enemyPred.CastPosition - targetPred.CastPosition) * midPointRange;                      var endPos = midpoint - Vector3.Normalize(enemyPred.CastPosition - targetPred.CastPosition) * midPointRange;                        Geometry.Polygon.Rectangle rec1 = new Geometry.Polygon.Rectangle(startpos' endPos' spell.Width);                        if (!rec1.Points.Exists(Util.IsWall) && Player.CountEnemiesInRange(spell.Range + spell2.Range) > 2)                      {                          //loop 3                          var target3 = target;                          var enemy1 = enemy;                          foreach (var enemy2 in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range + spell2.Range) && x.NetworkId != target3.NetworkId && x.NetworkId != enemy1.NetworkId && x.Distance(target3.Position) < 1000))                          {                              var enemy2Pred = Prediction.GetPrediction(enemy2' spell.Delay);                              Object[] obj = Util.VectorPointProjectionOnLineSegment(startpos.To2D()' endPos.To2D()' enemy2Pred.CastPosition.To2D());                              var isOnseg = (bool)obj[2];                              var pointLine = (Vector2)obj[1];                                if (pointLine.Distance(enemy2Pred.CastPosition.To2D()) < spell.Width && isOnseg)                              {                                  hit++;                              }                          }                      }                        if (hit > maxHit && hit > 1 && !rec1.Points.Exists(Util.IsWall))                      {                          maxHit = hit;                          start = startpos;                          end = endPos;                      }                  }              }
Magic Number,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,CastBestLine,The following statement contains a magic number: foreach (var target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range)))              {                 //loop 2                  var target1 = target;                  var target2 = target;                  foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range + spell2.Range) && x.NetworkId != target1.NetworkId                      && x.Distance(target1.Position) < spell2.Range - 100).OrderByDescending(x => x.Distance(target2.Position)))                  {                      int hit = 2;                        var targetPred = Prediction.GetPrediction(target' spell.Delay);                      var enemyPred = Prediction.GetPrediction(enemy' spell.Delay);                        var midpoint = (enemyPred.CastPosition + targetPred.CastPosition) / 2;                        var startpos = midpoint + Vector3.Normalize(enemyPred.CastPosition - targetPred.CastPosition) * midPointRange;                      var endPos = midpoint - Vector3.Normalize(enemyPred.CastPosition - targetPred.CastPosition) * midPointRange;                        Geometry.Polygon.Rectangle rec1 = new Geometry.Polygon.Rectangle(startpos' endPos' spell.Width);                        if (!rec1.Points.Exists(Util.IsWall) && Player.CountEnemiesInRange(spell.Range + spell2.Range) > 2)                      {                          //loop 3                          var target3 = target;                          var enemy1 = enemy;                          foreach (var enemy2 in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range + spell2.Range) && x.NetworkId != target3.NetworkId && x.NetworkId != enemy1.NetworkId && x.Distance(target3.Position) < 1000))                          {                              var enemy2Pred = Prediction.GetPrediction(enemy2' spell.Delay);                              Object[] obj = Util.VectorPointProjectionOnLineSegment(startpos.To2D()' endPos.To2D()' enemy2Pred.CastPosition.To2D());                              var isOnseg = (bool)obj[2];                              var pointLine = (Vector2)obj[1];                                if (pointLine.Distance(enemy2Pred.CastPosition.To2D()) < spell.Width && isOnseg)                              {                                  hit++;                              }                          }                      }                        if (hit > maxHit && hit > 1 && !rec1.Points.Exists(Util.IsWall))                      {                          maxHit = hit;                          start = startpos;                          end = endPos;                      }                  }              }
Magic Number,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,CastBestLine,The following statement contains a magic number: foreach (var target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range)))              {                 //loop 2                  var target1 = target;                  var target2 = target;                  foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range + spell2.Range) && x.NetworkId != target1.NetworkId                      && x.Distance(target1.Position) < spell2.Range - 100).OrderByDescending(x => x.Distance(target2.Position)))                  {                      int hit = 2;                        var targetPred = Prediction.GetPrediction(target' spell.Delay);                      var enemyPred = Prediction.GetPrediction(enemy' spell.Delay);                        var midpoint = (enemyPred.CastPosition + targetPred.CastPosition) / 2;                        var startpos = midpoint + Vector3.Normalize(enemyPred.CastPosition - targetPred.CastPosition) * midPointRange;                      var endPos = midpoint - Vector3.Normalize(enemyPred.CastPosition - targetPred.CastPosition) * midPointRange;                        Geometry.Polygon.Rectangle rec1 = new Geometry.Polygon.Rectangle(startpos' endPos' spell.Width);                        if (!rec1.Points.Exists(Util.IsWall) && Player.CountEnemiesInRange(spell.Range + spell2.Range) > 2)                      {                          //loop 3                          var target3 = target;                          var enemy1 = enemy;                          foreach (var enemy2 in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range + spell2.Range) && x.NetworkId != target3.NetworkId && x.NetworkId != enemy1.NetworkId && x.Distance(target3.Position) < 1000))                          {                              var enemy2Pred = Prediction.GetPrediction(enemy2' spell.Delay);                              Object[] obj = Util.VectorPointProjectionOnLineSegment(startpos.To2D()' endPos.To2D()' enemy2Pred.CastPosition.To2D());                              var isOnseg = (bool)obj[2];                              var pointLine = (Vector2)obj[1];                                if (pointLine.Distance(enemy2Pred.CastPosition.To2D()) < spell.Width && isOnseg)                              {                                  hit++;                              }                          }                      }                        if (hit > maxHit && hit > 1 && !rec1.Points.Exists(Util.IsWall))                      {                          maxHit = hit;                          start = startpos;                          end = endPos;                      }                  }              }
Magic Number,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,CastBestLine,The following statement contains a magic number: foreach (var target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range)))              {                 //loop 2                  var target1 = target;                  var target2 = target;                  foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range + spell2.Range) && x.NetworkId != target1.NetworkId                      && x.Distance(target1.Position) < spell2.Range - 100).OrderByDescending(x => x.Distance(target2.Position)))                  {                      int hit = 2;                        var targetPred = Prediction.GetPrediction(target' spell.Delay);                      var enemyPred = Prediction.GetPrediction(enemy' spell.Delay);                        var midpoint = (enemyPred.CastPosition + targetPred.CastPosition) / 2;                        var startpos = midpoint + Vector3.Normalize(enemyPred.CastPosition - targetPred.CastPosition) * midPointRange;                      var endPos = midpoint - Vector3.Normalize(enemyPred.CastPosition - targetPred.CastPosition) * midPointRange;                        Geometry.Polygon.Rectangle rec1 = new Geometry.Polygon.Rectangle(startpos' endPos' spell.Width);                        if (!rec1.Points.Exists(Util.IsWall) && Player.CountEnemiesInRange(spell.Range + spell2.Range) > 2)                      {                          //loop 3                          var target3 = target;                          var enemy1 = enemy;                          foreach (var enemy2 in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range + spell2.Range) && x.NetworkId != target3.NetworkId && x.NetworkId != enemy1.NetworkId && x.Distance(target3.Position) < 1000))                          {                              var enemy2Pred = Prediction.GetPrediction(enemy2' spell.Delay);                              Object[] obj = Util.VectorPointProjectionOnLineSegment(startpos.To2D()' endPos.To2D()' enemy2Pred.CastPosition.To2D());                              var isOnseg = (bool)obj[2];                              var pointLine = (Vector2)obj[1];                                if (pointLine.Distance(enemy2Pred.CastPosition.To2D()) < spell.Width && isOnseg)                              {                                  hit++;                              }                          }                      }                        if (hit > maxHit && hit > 1 && !rec1.Points.Exists(Util.IsWall))                      {                          maxHit = hit;                          start = startpos;                          end = endPos;                      }                  }              }
Magic Number,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,CastBestLine,The following statement contains a magic number: foreach (var target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range)))              {                 //loop 2                  var target1 = target;                  var target2 = target;                  foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range + spell2.Range) && x.NetworkId != target1.NetworkId                      && x.Distance(target1.Position) < spell2.Range - 100).OrderByDescending(x => x.Distance(target2.Position)))                  {                      int hit = 2;                        var targetPred = Prediction.GetPrediction(target' spell.Delay);                      var enemyPred = Prediction.GetPrediction(enemy' spell.Delay);                        var midpoint = (enemyPred.CastPosition + targetPred.CastPosition) / 2;                        var startpos = midpoint + Vector3.Normalize(enemyPred.CastPosition - targetPred.CastPosition) * midPointRange;                      var endPos = midpoint - Vector3.Normalize(enemyPred.CastPosition - targetPred.CastPosition) * midPointRange;                        Geometry.Polygon.Rectangle rec1 = new Geometry.Polygon.Rectangle(startpos' endPos' spell.Width);                        if (!rec1.Points.Exists(Util.IsWall) && Player.CountEnemiesInRange(spell.Range + spell2.Range) > 2)                      {                          //loop 3                          var target3 = target;                          var enemy1 = enemy;                          foreach (var enemy2 in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range + spell2.Range) && x.NetworkId != target3.NetworkId && x.NetworkId != enemy1.NetworkId && x.Distance(target3.Position) < 1000))                          {                              var enemy2Pred = Prediction.GetPrediction(enemy2' spell.Delay);                              Object[] obj = Util.VectorPointProjectionOnLineSegment(startpos.To2D()' endPos.To2D()' enemy2Pred.CastPosition.To2D());                              var isOnseg = (bool)obj[2];                              var pointLine = (Vector2)obj[1];                                if (pointLine.Distance(enemy2Pred.CastPosition.To2D()) < spell.Width && isOnseg)                              {                                  hit++;                              }                          }                      }                        if (hit > maxHit && hit > 1 && !rec1.Points.Exists(Util.IsWall))                      {                          maxHit = hit;                          start = startpos;                          end = endPos;                      }                  }              }
Magic Number,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,CastBestLine,The following statement contains a magic number: foreach (var target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range)))              {                 //loop 2                  var target1 = target;                  var target2 = target;                  foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range + spell2.Range) && x.NetworkId != target1.NetworkId                      && x.Distance(target1.Position) < spell2.Range - 100).OrderByDescending(x => x.Distance(target2.Position)))                  {                      int hit = 2;                        var targetPred = Prediction.GetPrediction(target' spell.Delay);                      var enemyPred = Prediction.GetPrediction(enemy' spell.Delay);                        var midpoint = (enemyPred.CastPosition + targetPred.CastPosition) / 2;                        var startpos = midpoint + Vector3.Normalize(enemyPred.CastPosition - targetPred.CastPosition) * midPointRange;                      var endPos = midpoint - Vector3.Normalize(enemyPred.CastPosition - targetPred.CastPosition) * midPointRange;                        Geometry.Polygon.Rectangle rec1 = new Geometry.Polygon.Rectangle(startpos' endPos' spell.Width);                        if (!rec1.Points.Exists(Util.IsWall) && Player.CountEnemiesInRange(spell.Range + spell2.Range) > 2)                      {                          //loop 3                          var target3 = target;                          var enemy1 = enemy;                          foreach (var enemy2 in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range + spell2.Range) && x.NetworkId != target3.NetworkId && x.NetworkId != enemy1.NetworkId && x.Distance(target3.Position) < 1000))                          {                              var enemy2Pred = Prediction.GetPrediction(enemy2' spell.Delay);                              Object[] obj = Util.VectorPointProjectionOnLineSegment(startpos.To2D()' endPos.To2D()' enemy2Pred.CastPosition.To2D());                              var isOnseg = (bool)obj[2];                              var pointLine = (Vector2)obj[1];                                if (pointLine.Distance(enemy2Pred.CastPosition.To2D()) < spell.Width && isOnseg)                              {                                  hit++;                              }                          }                      }                        if (hit > maxHit && hit > 1 && !rec1.Points.Exists(Util.IsWall))                      {                          maxHit = hit;                          start = startpos;                          end = endPos;                      }                  }              }
Magic Number,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,DrawBestLine,The following statement contains a magic number: foreach (var target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range)))              {                  //loop 2                  var target1 = target;                  var target2 = target;                  foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range + spell2.Range) && x.NetworkId != target1.NetworkId                      && x.Distance(target1.Position) < spell2.Range - 100).OrderByDescending(x => x.Distance(target2.Position)))                  {                      int hit = 2;                        var targetPred = Prediction.GetPrediction(target' spell.Delay);                      var enemyPred = Prediction.GetPrediction(enemy' spell.Delay);                        var midpoint = (enemyPred.CastPosition + targetPred.CastPosition) / 2;                        var startpos = midpoint + Vector3.Normalize(enemyPred.CastPosition - targetPred.CastPosition) * midPointRange;                      var endPos = midpoint - Vector3.Normalize(enemyPred.CastPosition - targetPred.CastPosition) * midPointRange;                        Geometry.Polygon.Rectangle rec1 = new Geometry.Polygon.Rectangle(startpos' endPos' spell.Width);                        if (!rec1.Points.Exists(Util.IsWall) && Player.CountEnemiesInRange(spell.Range + spell2.Range) > 2)                      {                          //loop 3                          var target3 = target;                          var enemy1 = enemy;                          foreach (var enemy2 in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range + spell2.Range) && x.NetworkId != target3.NetworkId && x.NetworkId != enemy1.NetworkId && x.Distance(target3.Position) < spell2.Range))                          {                              var enemy2Pred = Prediction.GetPrediction(enemy2' spell.Delay);                              Object[] obj = Util.VectorPointProjectionOnLineSegment(startpos.To2D()' endPos.To2D()' enemy2Pred.CastPosition.To2D());                              var isOnseg = (bool)obj[2];                              var pointLine = (Vector2)obj[1];                                if (pointLine.Distance(enemy2Pred.CastPosition.To2D()) < spell.Width && isOnseg)                              {                                  hit++;                              }                          }                      }                        if (hit > maxHit && hit > 1 && !rec1.Points.Exists(Util.IsWall))                      {                          maxHit = hit;                          start = startpos;                          end = endPos;                      }                  }              }
Magic Number,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,DrawBestLine,The following statement contains a magic number: foreach (var target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range)))              {                  //loop 2                  var target1 = target;                  var target2 = target;                  foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range + spell2.Range) && x.NetworkId != target1.NetworkId                      && x.Distance(target1.Position) < spell2.Range - 100).OrderByDescending(x => x.Distance(target2.Position)))                  {                      int hit = 2;                        var targetPred = Prediction.GetPrediction(target' spell.Delay);                      var enemyPred = Prediction.GetPrediction(enemy' spell.Delay);                        var midpoint = (enemyPred.CastPosition + targetPred.CastPosition) / 2;                        var startpos = midpoint + Vector3.Normalize(enemyPred.CastPosition - targetPred.CastPosition) * midPointRange;                      var endPos = midpoint - Vector3.Normalize(enemyPred.CastPosition - targetPred.CastPosition) * midPointRange;                        Geometry.Polygon.Rectangle rec1 = new Geometry.Polygon.Rectangle(startpos' endPos' spell.Width);                        if (!rec1.Points.Exists(Util.IsWall) && Player.CountEnemiesInRange(spell.Range + spell2.Range) > 2)                      {                          //loop 3                          var target3 = target;                          var enemy1 = enemy;                          foreach (var enemy2 in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range + spell2.Range) && x.NetworkId != target3.NetworkId && x.NetworkId != enemy1.NetworkId && x.Distance(target3.Position) < spell2.Range))                          {                              var enemy2Pred = Prediction.GetPrediction(enemy2' spell.Delay);                              Object[] obj = Util.VectorPointProjectionOnLineSegment(startpos.To2D()' endPos.To2D()' enemy2Pred.CastPosition.To2D());                              var isOnseg = (bool)obj[2];                              var pointLine = (Vector2)obj[1];                                if (pointLine.Distance(enemy2Pred.CastPosition.To2D()) < spell.Width && isOnseg)                              {                                  hit++;                              }                          }                      }                        if (hit > maxHit && hit > 1 && !rec1.Points.Exists(Util.IsWall))                      {                          maxHit = hit;                          start = startpos;                          end = endPos;                      }                  }              }
Magic Number,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,DrawBestLine,The following statement contains a magic number: foreach (var target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range)))              {                  //loop 2                  var target1 = target;                  var target2 = target;                  foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range + spell2.Range) && x.NetworkId != target1.NetworkId                      && x.Distance(target1.Position) < spell2.Range - 100).OrderByDescending(x => x.Distance(target2.Position)))                  {                      int hit = 2;                        var targetPred = Prediction.GetPrediction(target' spell.Delay);                      var enemyPred = Prediction.GetPrediction(enemy' spell.Delay);                        var midpoint = (enemyPred.CastPosition + targetPred.CastPosition) / 2;                        var startpos = midpoint + Vector3.Normalize(enemyPred.CastPosition - targetPred.CastPosition) * midPointRange;                      var endPos = midpoint - Vector3.Normalize(enemyPred.CastPosition - targetPred.CastPosition) * midPointRange;                        Geometry.Polygon.Rectangle rec1 = new Geometry.Polygon.Rectangle(startpos' endPos' spell.Width);                        if (!rec1.Points.Exists(Util.IsWall) && Player.CountEnemiesInRange(spell.Range + spell2.Range) > 2)                      {                          //loop 3                          var target3 = target;                          var enemy1 = enemy;                          foreach (var enemy2 in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range + spell2.Range) && x.NetworkId != target3.NetworkId && x.NetworkId != enemy1.NetworkId && x.Distance(target3.Position) < spell2.Range))                          {                              var enemy2Pred = Prediction.GetPrediction(enemy2' spell.Delay);                              Object[] obj = Util.VectorPointProjectionOnLineSegment(startpos.To2D()' endPos.To2D()' enemy2Pred.CastPosition.To2D());                              var isOnseg = (bool)obj[2];                              var pointLine = (Vector2)obj[1];                                if (pointLine.Distance(enemy2Pred.CastPosition.To2D()) < spell.Width && isOnseg)                              {                                  hit++;                              }                          }                      }                        if (hit > maxHit && hit > 1 && !rec1.Points.Exists(Util.IsWall))                      {                          maxHit = hit;                          start = startpos;                          end = endPos;                      }                  }              }
Magic Number,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,DrawBestLine,The following statement contains a magic number: foreach (var target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range)))              {                  //loop 2                  var target1 = target;                  var target2 = target;                  foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range + spell2.Range) && x.NetworkId != target1.NetworkId                      && x.Distance(target1.Position) < spell2.Range - 100).OrderByDescending(x => x.Distance(target2.Position)))                  {                      int hit = 2;                        var targetPred = Prediction.GetPrediction(target' spell.Delay);                      var enemyPred = Prediction.GetPrediction(enemy' spell.Delay);                        var midpoint = (enemyPred.CastPosition + targetPred.CastPosition) / 2;                        var startpos = midpoint + Vector3.Normalize(enemyPred.CastPosition - targetPred.CastPosition) * midPointRange;                      var endPos = midpoint - Vector3.Normalize(enemyPred.CastPosition - targetPred.CastPosition) * midPointRange;                        Geometry.Polygon.Rectangle rec1 = new Geometry.Polygon.Rectangle(startpos' endPos' spell.Width);                        if (!rec1.Points.Exists(Util.IsWall) && Player.CountEnemiesInRange(spell.Range + spell2.Range) > 2)                      {                          //loop 3                          var target3 = target;                          var enemy1 = enemy;                          foreach (var enemy2 in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range + spell2.Range) && x.NetworkId != target3.NetworkId && x.NetworkId != enemy1.NetworkId && x.Distance(target3.Position) < spell2.Range))                          {                              var enemy2Pred = Prediction.GetPrediction(enemy2' spell.Delay);                              Object[] obj = Util.VectorPointProjectionOnLineSegment(startpos.To2D()' endPos.To2D()' enemy2Pred.CastPosition.To2D());                              var isOnseg = (bool)obj[2];                              var pointLine = (Vector2)obj[1];                                if (pointLine.Distance(enemy2Pred.CastPosition.To2D()) < spell.Width && isOnseg)                              {                                  hit++;                              }                          }                      }                        if (hit > maxHit && hit > 1 && !rec1.Points.Exists(Util.IsWall))                      {                          maxHit = hit;                          start = startpos;                          end = endPos;                      }                  }              }
Magic Number,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,DrawBestLine,The following statement contains a magic number: foreach (var target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range)))              {                  //loop 2                  var target1 = target;                  var target2 = target;                  foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range + spell2.Range) && x.NetworkId != target1.NetworkId                      && x.Distance(target1.Position) < spell2.Range - 100).OrderByDescending(x => x.Distance(target2.Position)))                  {                      int hit = 2;                        var targetPred = Prediction.GetPrediction(target' spell.Delay);                      var enemyPred = Prediction.GetPrediction(enemy' spell.Delay);                        var midpoint = (enemyPred.CastPosition + targetPred.CastPosition) / 2;                        var startpos = midpoint + Vector3.Normalize(enemyPred.CastPosition - targetPred.CastPosition) * midPointRange;                      var endPos = midpoint - Vector3.Normalize(enemyPred.CastPosition - targetPred.CastPosition) * midPointRange;                        Geometry.Polygon.Rectangle rec1 = new Geometry.Polygon.Rectangle(startpos' endPos' spell.Width);                        if (!rec1.Points.Exists(Util.IsWall) && Player.CountEnemiesInRange(spell.Range + spell2.Range) > 2)                      {                          //loop 3                          var target3 = target;                          var enemy1 = enemy;                          foreach (var enemy2 in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(spell.Range + spell2.Range) && x.NetworkId != target3.NetworkId && x.NetworkId != enemy1.NetworkId && x.Distance(target3.Position) < spell2.Range))                          {                              var enemy2Pred = Prediction.GetPrediction(enemy2' spell.Delay);                              Object[] obj = Util.VectorPointProjectionOnLineSegment(startpos.To2D()' endPos.To2D()' enemy2Pred.CastPosition.To2D());                              var isOnseg = (bool)obj[2];                              var pointLine = (Vector2)obj[1];                                if (pointLine.Distance(enemy2Pred.CastPosition.To2D()) < spell.Width && isOnseg)                              {                                  hit++;                              }                          }                      }                        if (hit > maxHit && hit > 1 && !rec1.Points.Exists(Util.IsWall))                      {                          maxHit = hit;                          start = startpos;                          end = endPos;                      }                  }              }
Magic Number,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,DrawBestLine,The following statement contains a magic number: if (maxHit >= 2)              {                  Vector2 wts = Drawing.WorldToScreen(Player.Position);                  Drawing.DrawText(wts[0]' wts[1]' Color.Wheat' "Hit: " + maxHit);                    Geometry.Polygon.Rectangle rec1 = new Geometry.Polygon.Rectangle(start' end' spell.Width);                  rec1.Draw(Color.Blue' 4);              }              else {                     //-------------------------------Single---------------------------                  var target = TargetSelector.GetTarget(spell.Range + spell2.Range' TargetSelector.DamageType.Magical);                    if (target == null)                      return;                    var vector1 = Player.ServerPosition + Vector3.Normalize(target.ServerPosition - Player.ServerPosition) * (spell.Range * extraPrerange);                    var pred = Prediction.GetPrediction(target' spell.Delay);                  Geometry.Polygon.Rectangle rec1 = new Geometry.Polygon.Rectangle(vector1' vector1.Extend(pred.CastPosition' spell2.Range)' spell.Width);                    if (Player.Distance(target) < spell.Range)                  {                      vector1 = pred.CastPosition.Extend(target.ServerPosition' spell2.Range * .3f);                      Geometry.Polygon.Rectangle rec2 = new Geometry.Polygon.Rectangle(vector1' vector1.Extend(pred.CastPosition' spell2.Range)' spell.Width);                        if ((!rec2.Points.Exists(Util.IsWall) || !wallCheck) && pred.Hitchance >= HitChance.Medium && target.IsMoving)                      {                          Vector2 wts = Drawing.WorldToScreen(Player.Position);                          Drawing.DrawText(wts[0]' wts[1]' Color.Wheat' "Hit: " + 1);                            rec2.Draw(Color.Blue' 4);                      }                    }                  else if (!rec1.Points.Exists(Util.IsWall) || !wallCheck)                     {                      //wall check                      if (pred.Hitchance >= HitChance.High)                      {                          Vector2 wts = Drawing.WorldToScreen(Player.Position);                          Drawing.DrawText(wts[0]' wts[1]' Color.Wheat' "Hit: " + 1);                            rec1.Draw(Color.Blue' 4);                      }                  }              }
Magic Number,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,DrawBestLine,The following statement contains a magic number: if (maxHit >= 2)              {                  Vector2 wts = Drawing.WorldToScreen(Player.Position);                  Drawing.DrawText(wts[0]' wts[1]' Color.Wheat' "Hit: " + maxHit);                    Geometry.Polygon.Rectangle rec1 = new Geometry.Polygon.Rectangle(start' end' spell.Width);                  rec1.Draw(Color.Blue' 4);              }              else {                     //-------------------------------Single---------------------------                  var target = TargetSelector.GetTarget(spell.Range + spell2.Range' TargetSelector.DamageType.Magical);                    if (target == null)                      return;                    var vector1 = Player.ServerPosition + Vector3.Normalize(target.ServerPosition - Player.ServerPosition) * (spell.Range * extraPrerange);                    var pred = Prediction.GetPrediction(target' spell.Delay);                  Geometry.Polygon.Rectangle rec1 = new Geometry.Polygon.Rectangle(vector1' vector1.Extend(pred.CastPosition' spell2.Range)' spell.Width);                    if (Player.Distance(target) < spell.Range)                  {                      vector1 = pred.CastPosition.Extend(target.ServerPosition' spell2.Range * .3f);                      Geometry.Polygon.Rectangle rec2 = new Geometry.Polygon.Rectangle(vector1' vector1.Extend(pred.CastPosition' spell2.Range)' spell.Width);                        if ((!rec2.Points.Exists(Util.IsWall) || !wallCheck) && pred.Hitchance >= HitChance.Medium && target.IsMoving)                      {                          Vector2 wts = Drawing.WorldToScreen(Player.Position);                          Drawing.DrawText(wts[0]' wts[1]' Color.Wheat' "Hit: " + 1);                            rec2.Draw(Color.Blue' 4);                      }                    }                  else if (!rec1.Points.Exists(Util.IsWall) || !wallCheck)                     {                      //wall check                      if (pred.Hitchance >= HitChance.High)                      {                          Vector2 wts = Drawing.WorldToScreen(Player.Position);                          Drawing.DrawText(wts[0]' wts[1]' Color.Wheat' "Hit: " + 1);                            rec1.Draw(Color.Blue' 4);                      }                  }              }
Magic Number,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,DrawBestLine,The following statement contains a magic number: if (maxHit >= 2)              {                  Vector2 wts = Drawing.WorldToScreen(Player.Position);                  Drawing.DrawText(wts[0]' wts[1]' Color.Wheat' "Hit: " + maxHit);                    Geometry.Polygon.Rectangle rec1 = new Geometry.Polygon.Rectangle(start' end' spell.Width);                  rec1.Draw(Color.Blue' 4);              }              else {                     //-------------------------------Single---------------------------                  var target = TargetSelector.GetTarget(spell.Range + spell2.Range' TargetSelector.DamageType.Magical);                    if (target == null)                      return;                    var vector1 = Player.ServerPosition + Vector3.Normalize(target.ServerPosition - Player.ServerPosition) * (spell.Range * extraPrerange);                    var pred = Prediction.GetPrediction(target' spell.Delay);                  Geometry.Polygon.Rectangle rec1 = new Geometry.Polygon.Rectangle(vector1' vector1.Extend(pred.CastPosition' spell2.Range)' spell.Width);                    if (Player.Distance(target) < spell.Range)                  {                      vector1 = pred.CastPosition.Extend(target.ServerPosition' spell2.Range * .3f);                      Geometry.Polygon.Rectangle rec2 = new Geometry.Polygon.Rectangle(vector1' vector1.Extend(pred.CastPosition' spell2.Range)' spell.Width);                        if ((!rec2.Points.Exists(Util.IsWall) || !wallCheck) && pred.Hitchance >= HitChance.Medium && target.IsMoving)                      {                          Vector2 wts = Drawing.WorldToScreen(Player.Position);                          Drawing.DrawText(wts[0]' wts[1]' Color.Wheat' "Hit: " + 1);                            rec2.Draw(Color.Blue' 4);                      }                    }                  else if (!rec1.Points.Exists(Util.IsWall) || !wallCheck)                     {                      //wall check                      if (pred.Hitchance >= HitChance.High)                      {                          Vector2 wts = Drawing.WorldToScreen(Player.Position);                          Drawing.DrawText(wts[0]' wts[1]' Color.Wheat' "Hit: " + 1);                            rec1.Draw(Color.Blue' 4);                      }                  }              }
Magic Number,xSaliceResurrected.Managers,SpellCastManager,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Managers\SpellCastManager.cs,DrawBestLine,The following statement contains a magic number: if (maxHit >= 2)              {                  Vector2 wts = Drawing.WorldToScreen(Player.Position);                  Drawing.DrawText(wts[0]' wts[1]' Color.Wheat' "Hit: " + maxHit);                    Geometry.Polygon.Rectangle rec1 = new Geometry.Polygon.Rectangle(start' end' spell.Width);                  rec1.Draw(Color.Blue' 4);              }              else {                     //-------------------------------Single---------------------------                  var target = TargetSelector.GetTarget(spell.Range + spell2.Range' TargetSelector.DamageType.Magical);                    if (target == null)                      return;                    var vector1 = Player.ServerPosition + Vector3.Normalize(target.ServerPosition - Player.ServerPosition) * (spell.Range * extraPrerange);                    var pred = Prediction.GetPrediction(target' spell.Delay);                  Geometry.Polygon.Rectangle rec1 = new Geometry.Polygon.Rectangle(vector1' vector1.Extend(pred.CastPosition' spell2.Range)' spell.Width);                    if (Player.Distance(target) < spell.Range)                  {                      vector1 = pred.CastPosition.Extend(target.ServerPosition' spell2.Range * .3f);                      Geometry.Polygon.Rectangle rec2 = new Geometry.Polygon.Rectangle(vector1' vector1.Extend(pred.CastPosition' spell2.Range)' spell.Width);                        if ((!rec2.Points.Exists(Util.IsWall) || !wallCheck) && pred.Hitchance >= HitChance.Medium && target.IsMoving)                      {                          Vector2 wts = Drawing.WorldToScreen(Player.Position);                          Drawing.DrawText(wts[0]' wts[1]' Color.Wheat' "Hit: " + 1);                            rec2.Draw(Color.Blue' 4);                      }                    }                  else if (!rec1.Points.Exists(Util.IsWall) || !wallCheck)                     {                      //wall check                      if (pred.Hitchance >= HitChance.High)                      {                          Vector2 wts = Drawing.WorldToScreen(Player.Position);                          Drawing.DrawText(wts[0]' wts[1]' Color.Wheat' "Hit: " + 1);                            rec1.Draw(Color.Blue' 4);                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,SetUpSpells,The following statement contains a magic number: SpellManager.Q = new Spell(SpellSlot.Q' 900);
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,SetUpSpells,The following statement contains a magic number: SpellManager.W = new Spell(SpellSlot.W' 650);
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,SetUpSpells,The following statement contains a magic number: SpellManager.E = new Spell(SpellSlot.E' 900);
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,SetUpSpells,The following statement contains a magic number: SpellManager.R = new Spell(SpellSlot.R' 850);
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,SetUpSpells,The following statement contains a magic number: SpellManager.Q.SetSkillshot(0.25f' 100' 1600' false' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,SetUpSpells,The following statement contains a magic number: SpellManager.Q.SetSkillshot(0.25f' 100' 1600' false' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,SetUpSpells,The following statement contains a magic number: SpellManager.E.SetSkillshot(0.25f' 60' 1550' true' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,SetUpSpells,The following statement contains a magic number: SpellManager.E.SetSkillshot(0.25f' 60' 1550' true' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The following statement contains a magic number: {                  key.AddItem(new MenuItem("ComboActive"' "Combo!"' true).SetValue(new KeyBind(32' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle)));                  key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("charmCombo"' "Q if Charmed in Combo"' true).SetValue(new KeyBind("I".ToCharArray()[0]' KeyBindType.Toggle)));                  //add to menu                  menu.AddSubMenu(key);              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The following statement contains a magic number: {                  harass.AddItem(new MenuItem("UseQHarass"' "Use Q"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseWHarass"' "Use W"' true).SetValue(false));                  harass.AddItem(new MenuItem("UseEHarass"' "Use E"' true).SetValue(true));                  harass.AddItem(new MenuItem("longQ"' "Cast Long range Q"' true).SetValue(true));                  //hitchance                  harass.AddSubMenu(HitChanceManager.AddHitChanceMenuHarass(true' false' true' false));                  //mana                  ManaManager.AddManaManagertoMenu(harass' "Harass"' 60);                  //add to menu                  menu.AddSubMenu(harass);              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(false));                  farm.AddItem(new MenuItem("UseWFarm"' "Use W"' true).SetValue(false));                  //mana                  ManaManager.AddManaManagertoMenu(farm' "Farm"' 50);                  //add to menu                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(                          new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("cursor"' "Draw R Dash Range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(                          new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("cursor"' "Draw R Dash Range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(                          new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("cursor"' "Draw R Dash Range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(                          new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("cursor"' "Draw R Dash Range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(                          new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("cursor"' "Draw R Dash Range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(                          new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("cursor"' "Draw R Dash Range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(                          new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("cursor"' "Draw R Dash Range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(                          new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("cursor"' "Draw R Dash Range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(                          new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("cursor"' "Draw R Dash Range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(                          new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("cursor"' "Draw R Dash Range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(                          new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("cursor"' "Draw R Dash Range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(                          new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("cursor"' "Draw R Dash Range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(                          new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("cursor"' "Draw R Dash Range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(                          new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("cursor"' "Draw R Dash Range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(                          new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("cursor"' "Draw R Dash Range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(                          new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("cursor"' "Draw R Dash Range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(                          new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("cursor"' "Draw R Dash Range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(                          new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("cursor"' "Draw R Dash Range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(                          new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(                          new MenuItem("cursor"' "Draw R Dash Range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,GetComboDamage,The following statement contains a magic number: if (_rOn)                  damage += Player.GetSpellDamage(enemy' SpellSlot.R) * RCount();              else if (R.IsReady())                  damage += Player.GetSpellDamage(enemy' SpellSlot.R) * 3;
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  //items-------                  ItemManager.Target = eTarget;                    //see if killable                  if (dmg > eTarget.Health - 50)                      ItemManager.KillableTarget = true;                    //Items                  ItemManager.UseTargetted = true;              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,UseSpells,The following statement contains a magic number: if (useW && W.IsReady() && Player.Distance(eTarget.Position) <= W.Range - 100 &&                  ShouldW(eTarget' source))              {                  W.Cast();              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,UseSpells,The following statement contains a magic number: if (source == "Harass" && menu.Item("longQ"' true).GetValue<bool>())              {                  if (useQ && Q.IsReady() && Player.Distance(eTarget.Position) <= Q.Range &&                      ShouldQ(eTarget' source) && Player.Distance(eTarget.Position) > 600)                  {                      SpellCastManager.CastBasicSkillShot(Q' Q.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetQHitChance(source));                  }              }              else if (useQ && Q.IsReady() && Player.Distance(eTarget.Position) <= Q.Range &&                       ShouldQ(eTarget' source))              {                  SpellCastManager.CastBasicSkillShot(Q' Q.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetQHitChance(source));              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,UseSpells,The following statement contains a magic number: if (useR && R.IsReady() && Player.Distance(eTarget.Position) < R.Range)              {                  if (E.IsReady())                  {                      if (CheckReq(rETarget))                          SpellCastManager.CastBasicSkillShot(E' E.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetEHitChance(source));                  }                  if (ShouldR(eTarget' dmg) && R.IsReady())                  {                      R.Cast(Game.CursorPos);                      _rTimer = Utils.TickCount - 250;                  }                  if (_rTimeLeft > 9500 && _rOn && R.IsReady())                  {                      R.Cast(Game.CursorPos);                      _rTimer = Utils.TickCount - 250;                  }              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,UseSpells,The following statement contains a magic number: if (useR && R.IsReady() && Player.Distance(eTarget.Position) < R.Range)              {                  if (E.IsReady())                  {                      if (CheckReq(rETarget))                          SpellCastManager.CastBasicSkillShot(E' E.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetEHitChance(source));                  }                  if (ShouldR(eTarget' dmg) && R.IsReady())                  {                      R.Cast(Game.CursorPos);                      _rTimer = Utils.TickCount - 250;                  }                  if (_rTimeLeft > 9500 && _rOn && R.IsReady())                  {                      R.Cast(Game.CursorPos);                      _rTimer = Utils.TickCount - 250;                  }              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,UseSpells,The following statement contains a magic number: if (useR && R.IsReady() && Player.Distance(eTarget.Position) < R.Range)              {                  if (E.IsReady())                  {                      if (CheckReq(rETarget))                          SpellCastManager.CastBasicSkillShot(E' E.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetEHitChance(source));                  }                  if (ShouldR(eTarget' dmg) && R.IsReady())                  {                      R.Cast(Game.CursorPos);                      _rTimer = Utils.TickCount - 250;                  }                  if (_rTimeLeft > 9500 && _rOn && R.IsReady())                  {                      R.Cast(Game.CursorPos);                      _rTimer = Utils.TickCount - 250;                  }              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,CheckKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1300) && x.IsEnemy && !x.IsDead).OrderByDescending(GetComboDamage))              {                  if (target != null)                  {                      if (Player.Distance(target.ServerPosition) <= W.Range &&                          (Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.Q' 1) +                           Player.GetSpellDamage(target' SpellSlot.W)) > target.Health && Q.IsReady() && Q.IsReady())                      {                          Q.Cast(target);                          return;                      }                        if (Player.Distance(target.ServerPosition) <= Q.Range &&                          (Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.Q' 1)) >                          target.Health && Q.IsReady())                      {                          Q.Cast(target);                          return;                      }                        if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health & E.IsReady())                      {                          E.Cast(target);                          return;                      }                        if (Player.Distance(target.ServerPosition) <= W.Range &&                          (Player.GetSpellDamage(target' SpellSlot.W)) > target.Health && W.IsReady())                      {                          W.Cast();                          return;                      }                        Vector3 dashVector = Player.Position +                                           Vector3.Normalize(target.ServerPosition - Player.Position) * 425;                      if (Player.Distance(target.ServerPosition) <= R.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R)) > target.Health && R.IsReady() && _rOn &&                          target.Distance(dashVector) < 425 && R.IsReady())                      {                          R.Cast(dashVector);                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,CheckKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1300) && x.IsEnemy && !x.IsDead).OrderByDescending(GetComboDamage))              {                  if (target != null)                  {                      if (Player.Distance(target.ServerPosition) <= W.Range &&                          (Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.Q' 1) +                           Player.GetSpellDamage(target' SpellSlot.W)) > target.Health && Q.IsReady() && Q.IsReady())                      {                          Q.Cast(target);                          return;                      }                        if (Player.Distance(target.ServerPosition) <= Q.Range &&                          (Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.Q' 1)) >                          target.Health && Q.IsReady())                      {                          Q.Cast(target);                          return;                      }                        if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health & E.IsReady())                      {                          E.Cast(target);                          return;                      }                        if (Player.Distance(target.ServerPosition) <= W.Range &&                          (Player.GetSpellDamage(target' SpellSlot.W)) > target.Health && W.IsReady())                      {                          W.Cast();                          return;                      }                        Vector3 dashVector = Player.Position +                                           Vector3.Normalize(target.ServerPosition - Player.Position) * 425;                      if (Player.Distance(target.ServerPosition) <= R.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R)) > target.Health && R.IsReady() && _rOn &&                          target.Distance(dashVector) < 425 && R.IsReady())                      {                          R.Cast(dashVector);                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,CheckKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1300) && x.IsEnemy && !x.IsDead).OrderByDescending(GetComboDamage))              {                  if (target != null)                  {                      if (Player.Distance(target.ServerPosition) <= W.Range &&                          (Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.Q' 1) +                           Player.GetSpellDamage(target' SpellSlot.W)) > target.Health && Q.IsReady() && Q.IsReady())                      {                          Q.Cast(target);                          return;                      }                        if (Player.Distance(target.ServerPosition) <= Q.Range &&                          (Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.Q' 1)) >                          target.Health && Q.IsReady())                      {                          Q.Cast(target);                          return;                      }                        if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health & E.IsReady())                      {                          E.Cast(target);                          return;                      }                        if (Player.Distance(target.ServerPosition) <= W.Range &&                          (Player.GetSpellDamage(target' SpellSlot.W)) > target.Health && W.IsReady())                      {                          W.Cast();                          return;                      }                        Vector3 dashVector = Player.Position +                                           Vector3.Normalize(target.ServerPosition - Player.Position) * 425;                      if (Player.Distance(target.ServerPosition) <= R.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R)) > target.Health && R.IsReady() && _rOn &&                          target.Distance(dashVector) < 425 && R.IsReady())                      {                          R.Cast(dashVector);                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,ShouldR,The following statement contains a magic number: Vector3 dashVector = Player.ServerPosition + Vector3.Normalize(Game.CursorPos - Player.ServerPosition) * 425;
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,ShouldR,The following statement contains a magic number: if (Player.Distance(Game.CursorPos) < 475)                  dashVector = Game.CursorPos;
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,ShouldR,The following statement contains a magic number: if (target.Distance(dashVector) > 525)                  return false;
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,ShouldR,The following statement contains a magic number: if (menu.Item("rSpeed"' true).GetValue<bool>() && Game.CursorPos.CountEnemiesInRange(1500) < 3 && dmg > target.Health - 100)                  return true;
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,ShouldR,The following statement contains a magic number: if (menu.Item("rSpeed"' true).GetValue<bool>() && Game.CursorPos.CountEnemiesInRange(1500) < 3 && dmg > target.Health - 100)                  return true;
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,ShouldR,The following statement contains a magic number: if (menu.Item("rSpeed"' true).GetValue<bool>() && Game.CursorPos.CountEnemiesInRange(1500) < 3 && dmg > target.Health - 100)                  return true;
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,ShouldR,The following statement contains a magic number: if (_rOn && _rTimeLeft > 9500)                  return true;
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,CheckReq,The following statement contains a magic number: if (Player.Distance(Game.CursorPos) < 75)                  return false;
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,CheckReq,The following statement contains a magic number: if (GetComboDamage(target) > target.Health && !_rOn && Game.CursorPos.CountEnemiesInRange(1500) < 3)              {                  if (target.Distance(Game.CursorPos) <= E.Range && E.IsReady())                  {                      Vector3 dashVector = Player.Position + Vector3.Normalize(Game.CursorPos - Player.Position) * 425;                      float addedDelay = Player.Distance(dashVector) / 2200;                        //Game.PrintChat("added delay: " + addedDelay);                        PredictionOutput pred = Util.GetP(Game.CursorPos' E' target' addedDelay' false);                      if (pred.Hitchance >= HitChance.Medium && R.IsReady())                      {                          //Game.PrintChat("R-E Mode Intiate!");                          R.Cast(Game.CursorPos);                          _rTimer = Utils.TickCount - 250;                          return true;                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,CheckReq,The following statement contains a magic number: if (GetComboDamage(target) > target.Health && !_rOn && Game.CursorPos.CountEnemiesInRange(1500) < 3)              {                  if (target.Distance(Game.CursorPos) <= E.Range && E.IsReady())                  {                      Vector3 dashVector = Player.Position + Vector3.Normalize(Game.CursorPos - Player.Position) * 425;                      float addedDelay = Player.Distance(dashVector) / 2200;                        //Game.PrintChat("added delay: " + addedDelay);                        PredictionOutput pred = Util.GetP(Game.CursorPos' E' target' addedDelay' false);                      if (pred.Hitchance >= HitChance.Medium && R.IsReady())                      {                          //Game.PrintChat("R-E Mode Intiate!");                          R.Cast(Game.CursorPos);                          _rTimer = Utils.TickCount - 250;                          return true;                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,CheckReq,The following statement contains a magic number: if (GetComboDamage(target) > target.Health && !_rOn && Game.CursorPos.CountEnemiesInRange(1500) < 3)              {                  if (target.Distance(Game.CursorPos) <= E.Range && E.IsReady())                  {                      Vector3 dashVector = Player.Position + Vector3.Normalize(Game.CursorPos - Player.Position) * 425;                      float addedDelay = Player.Distance(dashVector) / 2200;                        //Game.PrintChat("added delay: " + addedDelay);                        PredictionOutput pred = Util.GetP(Game.CursorPos' E' target' addedDelay' false);                      if (pred.Hitchance >= HitChance.Medium && R.IsReady())                      {                          //Game.PrintChat("R-E Mode Intiate!");                          R.Cast(Game.CursorPos);                          _rTimer = Utils.TickCount - 250;                          return true;                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,CheckReq,The following statement contains a magic number: if (GetComboDamage(target) > target.Health && !_rOn && Game.CursorPos.CountEnemiesInRange(1500) < 3)              {                  if (target.Distance(Game.CursorPos) <= E.Range && E.IsReady())                  {                      Vector3 dashVector = Player.Position + Vector3.Normalize(Game.CursorPos - Player.Position) * 425;                      float addedDelay = Player.Distance(dashVector) / 2200;                        //Game.PrintChat("added delay: " + addedDelay);                        PredictionOutput pred = Util.GetP(Game.CursorPos' E' target' addedDelay' false);                      if (pred.Hitchance >= HitChance.Medium && R.IsReady())                      {                          //Game.PrintChat("R-E Mode Intiate!");                          R.Cast(Game.CursorPos);                          _rTimer = Utils.TickCount - 250;                          return true;                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,CheckReq,The following statement contains a magic number: if (GetComboDamage(target) > target.Health && !_rOn && Game.CursorPos.CountEnemiesInRange(1500) < 3)              {                  if (target.Distance(Game.CursorPos) <= E.Range && E.IsReady())                  {                      Vector3 dashVector = Player.Position + Vector3.Normalize(Game.CursorPos - Player.Position) * 425;                      float addedDelay = Player.Distance(dashVector) / 2200;                        //Game.PrintChat("added delay: " + addedDelay);                        PredictionOutput pred = Util.GetP(Game.CursorPos' E' target' addedDelay' false);                      if (pred.Hitchance >= HitChance.Medium && R.IsReady())                      {                          //Game.PrintChat("R-E Mode Intiate!");                          R.Cast(Game.CursorPos);                          _rTimer = Utils.TickCount - 250;                          return true;                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,Farm,The following statement contains a magic number: if (useQ && Q.IsReady())              {                  MinionManager.FarmLocation qPos = Q.GetLineFarmLocation(allMinionsQ);                  if (qPos.MinionsHit >= 3)                  {                      Q.Cast(qPos.Position);                  }              }
Magic Number,xSaliceResurrected.Mid,Ahri,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ahri.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("cursor"' true).GetValue<Circle>().Active)                  Render.Circle.DrawCircle(Player.Position' 475' Color.Aquamarine);
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,SetSpells,The following statement contains a magic number: SpellManager.Q = new Spell(SpellSlot.Q' 600);
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,SetSpells,The following statement contains a magic number: SpellManager.W = new Spell(SpellSlot.W' 700);
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,SetSpells,The following statement contains a magic number: SpellManager.E = new Spell(SpellSlot.E' 325);
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,SetSpells,The following statement contains a magic number: SpellManager.R = new Spell(SpellSlot.R' 700);
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,LoadMenu,The following statement contains a magic number: {                  key.AddItem(new MenuItem("ComboActive"' "Combo!"' true).SetValue(new KeyBind(32' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle)));                  key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("LastHitQ"' "Last hit with Q!"' true).SetValue(new KeyBind("A".ToCharArray()[0]' KeyBindType.Press)));                  //add to menu                  menu.AddSubMenu(key);              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,LoadMenu,The following statement contains a magic number: {                  var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("useW_enemyCount"' "Use W if x Enemys Arround"' true).SetValue(new Slider(3' 1' 5)));                      wMenu.AddItem(new MenuItem("useW_Health"' "Use W if health below"' true).SetValue(new Slider(25)));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_On_Killable"' "E to KS"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("E_Energy"' "E If energy"' true).SetValue(new Slider(100' 0' 200)));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Wait_For_Q"' "Wait for Q Mark"' true).SetValue(false));                      rMenu.AddItem(new MenuItem("R_If_Killable"' "R If Enemy Is killable"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("Dont_R_If"' "Do not R if > enemy"' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("R_Min"' "Min range to use R"' true).SetValue(new Slider(400' 50' 700)));                      spellMenu.AddSubMenu(rMenu);                  }                  //add to menu                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,LoadMenu,The following statement contains a magic number: {                  var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("useW_enemyCount"' "Use W if x Enemys Arround"' true).SetValue(new Slider(3' 1' 5)));                      wMenu.AddItem(new MenuItem("useW_Health"' "Use W if health below"' true).SetValue(new Slider(25)));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_On_Killable"' "E to KS"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("E_Energy"' "E If energy"' true).SetValue(new Slider(100' 0' 200)));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Wait_For_Q"' "Wait for Q Mark"' true).SetValue(false));                      rMenu.AddItem(new MenuItem("R_If_Killable"' "R If Enemy Is killable"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("Dont_R_If"' "Do not R if > enemy"' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("R_Min"' "Min range to use R"' true).SetValue(new Slider(400' 50' 700)));                      spellMenu.AddSubMenu(rMenu);                  }                  //add to menu                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,LoadMenu,The following statement contains a magic number: {                  var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("useW_enemyCount"' "Use W if x Enemys Arround"' true).SetValue(new Slider(3' 1' 5)));                      wMenu.AddItem(new MenuItem("useW_Health"' "Use W if health below"' true).SetValue(new Slider(25)));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_On_Killable"' "E to KS"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("E_Energy"' "E If energy"' true).SetValue(new Slider(100' 0' 200)));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Wait_For_Q"' "Wait for Q Mark"' true).SetValue(false));                      rMenu.AddItem(new MenuItem("R_If_Killable"' "R If Enemy Is killable"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("Dont_R_If"' "Do not R if > enemy"' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("R_Min"' "Min range to use R"' true).SetValue(new Slider(400' 50' 700)));                      spellMenu.AddSubMenu(rMenu);                  }                  //add to menu                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,LoadMenu,The following statement contains a magic number: {                  var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("useW_enemyCount"' "Use W if x Enemys Arround"' true).SetValue(new Slider(3' 1' 5)));                      wMenu.AddItem(new MenuItem("useW_Health"' "Use W if health below"' true).SetValue(new Slider(25)));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_On_Killable"' "E to KS"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("E_Energy"' "E If energy"' true).SetValue(new Slider(100' 0' 200)));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Wait_For_Q"' "Wait for Q Mark"' true).SetValue(false));                      rMenu.AddItem(new MenuItem("R_If_Killable"' "R If Enemy Is killable"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("Dont_R_If"' "Do not R if > enemy"' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("R_Min"' "Min range to use R"' true).SetValue(new Slider(400' 50' 700)));                      spellMenu.AddSubMenu(rMenu);                  }                  //add to menu                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,LoadMenu,The following statement contains a magic number: {                  var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("useW_enemyCount"' "Use W if x Enemys Arround"' true).SetValue(new Slider(3' 1' 5)));                      wMenu.AddItem(new MenuItem("useW_Health"' "Use W if health below"' true).SetValue(new Slider(25)));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_On_Killable"' "E to KS"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("E_Energy"' "E If energy"' true).SetValue(new Slider(100' 0' 200)));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Wait_For_Q"' "Wait for Q Mark"' true).SetValue(false));                      rMenu.AddItem(new MenuItem("R_If_Killable"' "R If Enemy Is killable"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("Dont_R_If"' "Do not R if > enemy"' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("R_Min"' "Min range to use R"' true).SetValue(new Slider(400' 50' 700)));                      spellMenu.AddSubMenu(rMenu);                  }                  //add to menu                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,LoadMenu,The following statement contains a magic number: {                  var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("useW_enemyCount"' "Use W if x Enemys Arround"' true).SetValue(new Slider(3' 1' 5)));                      wMenu.AddItem(new MenuItem("useW_Health"' "Use W if health below"' true).SetValue(new Slider(25)));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_On_Killable"' "E to KS"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("E_Energy"' "E If energy"' true).SetValue(new Slider(100' 0' 200)));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Wait_For_Q"' "Wait for Q Mark"' true).SetValue(false));                      rMenu.AddItem(new MenuItem("R_If_Killable"' "R If Enemy Is killable"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("Dont_R_If"' "Do not R if > enemy"' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("R_Min"' "Min range to use R"' true).SetValue(new Slider(400' 50' 700)));                      spellMenu.AddSubMenu(rMenu);                  }                  //add to menu                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,LoadMenu,The following statement contains a magic number: {                  var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("useW_enemyCount"' "Use W if x Enemys Arround"' true).SetValue(new Slider(3' 1' 5)));                      wMenu.AddItem(new MenuItem("useW_Health"' "Use W if health below"' true).SetValue(new Slider(25)));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_On_Killable"' "E to KS"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("E_Energy"' "E If energy"' true).SetValue(new Slider(100' 0' 200)));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Wait_For_Q"' "Wait for Q Mark"' true).SetValue(false));                      rMenu.AddItem(new MenuItem("R_If_Killable"' "R If Enemy Is killable"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("Dont_R_If"' "Do not R if > enemy"' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("R_Min"' "Min range to use R"' true).SetValue(new Slider(400' 50' 700)));                      spellMenu.AddSubMenu(rMenu);                  }                  //add to menu                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,LoadMenu,The following statement contains a magic number: {                  var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("useW_enemyCount"' "Use W if x Enemys Arround"' true).SetValue(new Slider(3' 1' 5)));                      wMenu.AddItem(new MenuItem("useW_Health"' "Use W if health below"' true).SetValue(new Slider(25)));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_On_Killable"' "E to KS"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("E_Energy"' "E If energy"' true).SetValue(new Slider(100' 0' 200)));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Wait_For_Q"' "Wait for Q Mark"' true).SetValue(false));                      rMenu.AddItem(new MenuItem("R_If_Killable"' "R If Enemy Is killable"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("Dont_R_If"' "Do not R if > enemy"' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("R_Min"' "Min range to use R"' true).SetValue(new Slider(400' 50' 700)));                      spellMenu.AddSubMenu(rMenu);                  }                  //add to menu                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,LoadMenu,The following statement contains a magic number: {                  var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("useW_enemyCount"' "Use W if x Enemys Arround"' true).SetValue(new Slider(3' 1' 5)));                      wMenu.AddItem(new MenuItem("useW_Health"' "Use W if health below"' true).SetValue(new Slider(25)));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_On_Killable"' "E to KS"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("E_Energy"' "E If energy"' true).SetValue(new Slider(100' 0' 200)));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Wait_For_Q"' "Wait for Q Mark"' true).SetValue(false));                      rMenu.AddItem(new MenuItem("R_If_Killable"' "R If Enemy Is killable"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("Dont_R_If"' "Do not R if > enemy"' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("R_Min"' "Min range to use R"' true).SetValue(new Slider(400' 50' 700)));                      spellMenu.AddSubMenu(rMenu);                  }                  //add to menu                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,LoadMenu,The following statement contains a magic number: {                  var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("useW_enemyCount"' "Use W if x Enemys Arround"' true).SetValue(new Slider(3' 1' 5)));                      wMenu.AddItem(new MenuItem("useW_Health"' "Use W if health below"' true).SetValue(new Slider(25)));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_On_Killable"' "E to KS"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("E_Energy"' "E If energy"' true).SetValue(new Slider(100' 0' 200)));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Wait_For_Q"' "Wait for Q Mark"' true).SetValue(false));                      rMenu.AddItem(new MenuItem("R_If_Killable"' "R If Enemy Is killable"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("Dont_R_If"' "Do not R if > enemy"' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("R_Min"' "Min range to use R"' true).SetValue(new Slider(400' 50' 700)));                      spellMenu.AddSubMenu(rMenu);                  }                  //add to menu                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseEFarm"' "Use E"' true).SetValue(true));                  farm.AddItem(new MenuItem("LaneClear_useE_minHit"' "Use E if min. hit"' true).SetValue(new Slider(2' 1' 6)));                  //add to menu                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseEFarm"' "Use E"' true).SetValue(true));                  farm.AddItem(new MenuItem("LaneClear_useE_minHit"' "Use E if min. hit"' true).SetValue(new Slider(2' 1' 6)));                  //add to menu                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Current_Mode"' "Draw current Mode"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Current_Mode"' "Draw current Mode"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Current_Mode"' "Draw current Mode"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Current_Mode"' "Draw current Mode"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,GetComboDamage,The following statement contains a magic number: if (mode == 0)              {                  if (Q.IsReady())                      comboDamage += (Player.GetSpellDamage(target' SpellSlot.Q) +                                      Player.CalcDamage(target' Damage.DamageType.Magical'                                          (45 + 35 * Q.Level + 0.5 * Player.FlatMagicDamageMod)));              }              else if (Q.IsReady())              {                  comboDamage += (Player.GetSpellDamage(target' SpellSlot.Q) + Player.CalcDamage(target' Damage.DamageType.Magical' (45 + 35 * Q.Level + 0.5 * Player.FlatMagicDamageMod))) * 2;              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,GetComboDamage,The following statement contains a magic number: if (mode == 0)              {                  if (Q.IsReady())                      comboDamage += (Player.GetSpellDamage(target' SpellSlot.Q) +                                      Player.CalcDamage(target' Damage.DamageType.Magical'                                          (45 + 35 * Q.Level + 0.5 * Player.FlatMagicDamageMod)));              }              else if (Q.IsReady())              {                  comboDamage += (Player.GetSpellDamage(target' SpellSlot.Q) + Player.CalcDamage(target' Damage.DamageType.Magical' (45 + 35 * Q.Level + 0.5 * Player.FlatMagicDamageMod))) * 2;              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,GetComboDamage,The following statement contains a magic number: if (mode == 0)              {                  if (Q.IsReady())                      comboDamage += (Player.GetSpellDamage(target' SpellSlot.Q) +                                      Player.CalcDamage(target' Damage.DamageType.Magical'                                          (45 + 35 * Q.Level + 0.5 * Player.FlatMagicDamageMod)));              }              else if (Q.IsReady())              {                  comboDamage += (Player.GetSpellDamage(target' SpellSlot.Q) + Player.CalcDamage(target' Damage.DamageType.Magical' (45 + 35 * Q.Level + 0.5 * Player.FlatMagicDamageMod))) * 2;              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,GetComboDamage,The following statement contains a magic number: if (mode == 0)              {                  if (Q.IsReady())                      comboDamage += (Player.GetSpellDamage(target' SpellSlot.Q) +                                      Player.CalcDamage(target' Damage.DamageType.Magical'                                          (45 + 35 * Q.Level + 0.5 * Player.FlatMagicDamageMod)));              }              else if (Q.IsReady())              {                  comboDamage += (Player.GetSpellDamage(target' SpellSlot.Q) + Player.CalcDamage(target' Damage.DamageType.Magical' (45 + 35 * Q.Level + 0.5 * Player.FlatMagicDamageMod))) * 2;              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,GetComboDamage,The following statement contains a magic number: if (mode == 0)              {                  if (Q.IsReady())                      comboDamage += (Player.GetSpellDamage(target' SpellSlot.Q) +                                      Player.CalcDamage(target' Damage.DamageType.Magical'                                          (45 + 35 * Q.Level + 0.5 * Player.FlatMagicDamageMod)));              }              else if (Q.IsReady())              {                  comboDamage += (Player.GetSpellDamage(target' SpellSlot.Q) + Player.CalcDamage(target' Damage.DamageType.Magical' (45 + 35 * Q.Level + 0.5 * Player.FlatMagicDamageMod))) * 2;              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,GetComboDamage,The following statement contains a magic number: if (mode == 0)              {                  if (Q.IsReady())                      comboDamage += (Player.GetSpellDamage(target' SpellSlot.Q) +                                      Player.CalcDamage(target' Damage.DamageType.Magical'                                          (45 + 35 * Q.Level + 0.5 * Player.FlatMagicDamageMod)));              }              else if (Q.IsReady())              {                  comboDamage += (Player.GetSpellDamage(target' SpellSlot.Q) + Player.CalcDamage(target' Damage.DamageType.Magical' (45 + 35 * Q.Level + 0.5 * Player.FlatMagicDamageMod))) * 2;              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,GetComboDamage,The following statement contains a magic number: if (mode == 0)              {                  if (Q.IsReady())                      comboDamage += (Player.GetSpellDamage(target' SpellSlot.Q) +                                      Player.CalcDamage(target' Damage.DamageType.Magical'                                          (45 + 35 * Q.Level + 0.5 * Player.FlatMagicDamageMod)));              }              else if (Q.IsReady())              {                  comboDamage += (Player.GetSpellDamage(target' SpellSlot.Q) + Player.CalcDamage(target' Damage.DamageType.Magical' (45 + 35 * Q.Level + 0.5 * Player.FlatMagicDamageMod))) * 2;              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,GetComboDamage,The following statement contains a magic number: if (target.HasBuff("AkaliMota"))                  comboDamage += Player.CalcDamage(target' Damage.DamageType.Magical' (45 + 35 * Q.Level + 0.5 * Player.FlatMagicDamageMod));
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,GetComboDamage,The following statement contains a magic number: if (target.HasBuff("AkaliMota"))                  comboDamage += Player.CalcDamage(target' Damage.DamageType.Magical' (45 + 35 * Q.Level + 0.5 * Player.FlatMagicDamageMod));
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,GetComboDamage,The following statement contains a magic number: if (target.HasBuff("AkaliMota"))                  comboDamage += Player.CalcDamage(target' Damage.DamageType.Magical' (45 + 35 * Q.Level + 0.5 * Player.FlatMagicDamageMod));
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,CalcPassiveDmg,The following statement contains a magic number: return (0.06 + 0.01 * (Player.FlatMagicDamageMod / 6)) * (Player.FlatPhysicalDamageMod + Player.BaseAttackDamage);
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,CalcPassiveDmg,The following statement contains a magic number: return (0.06 + 0.01 * (Player.FlatMagicDamageMod / 6)) * (Player.FlatPhysicalDamageMod + Player.BaseAttackDamage);
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,CalcPassiveDmg,The following statement contains a magic number: return (0.06 + 0.01 * (Player.FlatMagicDamageMod / 6)) * (Player.FlatPhysicalDamageMod + Player.BaseAttackDamage);
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      var dmg = GetComboDamage(itemTarget);                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      var dmg = GetComboDamage(itemTarget);                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,Cast_Q,The following statement contains a magic number: if (combo)              {                  var target = TargetSelector.GetTarget(Q.Range' TargetSelector.DamageType.Magical);                    if (!target.IsValidTarget(Q.Range))                      return;                    if (CheckMark(Q.Range) != null)                      target = CheckMark(Q.Range);                    if (mode == 0)                  {                      Q.Cast(target);                  }                  else if (mode == 1)                  {                      if (!target.HasBuff("AkaliMota"))                          Q.Cast(target);                  }              }              else              {                  if (MinionManager.GetMinions(Player.Position' Q.Range).Any(minion => minion.HasBuff("AkaliMota") && xSaliceWalker.InAutoAttackRange(minion)))                  {                      return;                  }                    foreach (var minion in MinionManager.GetMinions(Player.Position' Q.Range).Where(minion => HealthPrediction.GetHealthPrediction(minion'                          (int)(E.Delay + (minion.Distance(Player.Position) / E.Speed)) * 1000) <                                                               Player.GetSpellDamage(minion' SpellSlot.Q) &&                                                               HealthPrediction.GetHealthPrediction(minion'                                                                   (int)(E.Delay + (minion.Distance(Player.Position) / E.Speed)) * 1000) > 0 &&                                                               xSaliceWalker.InAutoAttackRange(minion)))                      Q.Cast(minion);                    foreach (var minion in MinionManager.GetMinions(Player.Position' Q.Range).Where(minion => HealthPrediction.GetHealthPrediction(minion'                          (int)(Q.Delay + (minion.Distance(Player.Position) / Q.Speed))) <                                                               Player.GetSpellDamage(minion' SpellSlot.Q)))                      Q.Cast(minion);                    foreach (var minion in MinionManager.GetMinions(Player.ServerPosition' Q.Range' MinionTypes.All' MinionTeam.Neutral' MinionOrderTypes.MaxHealth).Where(minion => Player.Distance(minion.Position) <= Q.Range))                      Q.Cast(minion);              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,Cast_Q,The following statement contains a magic number: if (combo)              {                  var target = TargetSelector.GetTarget(Q.Range' TargetSelector.DamageType.Magical);                    if (!target.IsValidTarget(Q.Range))                      return;                    if (CheckMark(Q.Range) != null)                      target = CheckMark(Q.Range);                    if (mode == 0)                  {                      Q.Cast(target);                  }                  else if (mode == 1)                  {                      if (!target.HasBuff("AkaliMota"))                          Q.Cast(target);                  }              }              else              {                  if (MinionManager.GetMinions(Player.Position' Q.Range).Any(minion => minion.HasBuff("AkaliMota") && xSaliceWalker.InAutoAttackRange(minion)))                  {                      return;                  }                    foreach (var minion in MinionManager.GetMinions(Player.Position' Q.Range).Where(minion => HealthPrediction.GetHealthPrediction(minion'                          (int)(E.Delay + (minion.Distance(Player.Position) / E.Speed)) * 1000) <                                                               Player.GetSpellDamage(minion' SpellSlot.Q) &&                                                               HealthPrediction.GetHealthPrediction(minion'                                                                   (int)(E.Delay + (minion.Distance(Player.Position) / E.Speed)) * 1000) > 0 &&                                                               xSaliceWalker.InAutoAttackRange(minion)))                      Q.Cast(minion);                    foreach (var minion in MinionManager.GetMinions(Player.Position' Q.Range).Where(minion => HealthPrediction.GetHealthPrediction(minion'                          (int)(Q.Delay + (minion.Distance(Player.Position) / Q.Speed))) <                                                               Player.GetSpellDamage(minion' SpellSlot.Q)))                      Q.Cast(minion);                    foreach (var minion in MinionManager.GetMinions(Player.ServerPosition' Q.Range' MinionTypes.All' MinionTeam.Neutral' MinionOrderTypes.MaxHealth).Where(minion => Player.Distance(minion.Position) <= Q.Range))                      Q.Cast(minion);              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,Cast_W,The following statement contains a magic number: if (menu.Item("useW_enemyCount"' true).GetValue<Slider>().Value > Player.CountEnemiesInRange(400) &&                  menu.Item("useW_Health"' true).GetValue<Slider>().Value < (int)(Player.Health / Player.MaxHealth * 100))                  return;
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,Cast_W,The following statement contains a magic number: if (menu.Item("useW_enemyCount"' true).GetValue<Slider>().Value > Player.CountEnemiesInRange(400) &&                  menu.Item("useW_Health"' true).GetValue<Slider>().Value < (int)(Player.Health / Player.MaxHealth * 100))                  return;
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,Cast_E,The following statement contains a magic number: if (combo)              {                  var target = TargetSelector.GetTarget(E.Range' TargetSelector.DamageType.Magical);                    if (target == null || !target.IsValidTarget(E.Range))                      return;                    if (CheckMark(E.Range) != null)                      target = CheckMark(Q.Range);                    if (mode == 0)                  {                      if (Player.Mana >= menu.Item("E_Energy"' true).GetValue<Slider>().Value)                          E.Cast();                      else if (E.IsKillable(target) && menu.Item("E_On_Killable"' true).GetValue<bool>())                          E.Cast();                  }                  else if (mode == 1)                  {                      if (target.HasBuff("AkaliMota"))                          return;                      if (target.HasBuff("AkaliMota") && !Q.IsReady())                          return;                      if (Player.Mana >= menu.Item("E_Energy"' true).GetValue<Slider>().Value)                          E.Cast();                      if (E.IsKillable(target) && menu.Item("E_On_Killable"' true).GetValue<bool>())                          E.Cast();                  }              }              else              {                  if (MinionManager.GetMinions(Player.Position' E.Range).Count >= menu.Item("LaneClear_useE_minHit"' true).GetValue<Slider>().Value)                      E.Cast();                  foreach (var minion in MinionManager.GetMinions(Player.ServerPosition' Q.Range' MinionTypes.All' MinionTeam.Neutral' MinionOrderTypes.MaxHealth).Where(minion => Player.Distance(minion.Position) <= E.Range))                      if (E.GetDamage(minion) > minion.Health + 35)                          E.Cast();              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,Cast_R,The following statement contains a magic number: if (target.IsValidTarget(R.Range) && R.IsReady())              {                  if (R.IsKillable(target) && menu.Item("R_If_Killable"' true).GetValue<bool>())                      R.Cast(target);                  else if (GetSimpleDmg(target) > target.Health && Player.Distance(target.Position) > Q.Range - 50)                      R.Cast(target);                    if (target.CountEnemiesInRange(500) >=                      menu.Item("Dont_R_If"' true).GetValue<Slider>().Value)                      return;                    if (Player.Distance(target.Position) < menu.Item("R_Min"' true).GetValue<Slider>().Value)                      return;                    if (mode == 0)                  {                      if (menu.Item("R_Wait_For_Q"' true).GetValue<bool>())                      {                          if (target.HasBuff("AkaliMota"))                          {                              R.Cast(target);                          }                      }                      else                      {                          R.Cast(target);                      }                  }                  else if (mode == 1)                  {                      if (target.HasBuff("AkaliMota") && Q.IsReady())                      {                          R.Cast(target);                          menu.Item("Combo_mode"' true).SetValue(new StringList(new[] { "Normal"' "Q-Delay-R-AA-Q-AA" }));                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,Cast_R,The following statement contains a magic number: if (target.IsValidTarget(R.Range) && R.IsReady())              {                  if (R.IsKillable(target) && menu.Item("R_If_Killable"' true).GetValue<bool>())                      R.Cast(target);                  else if (GetSimpleDmg(target) > target.Health && Player.Distance(target.Position) > Q.Range - 50)                      R.Cast(target);                    if (target.CountEnemiesInRange(500) >=                      menu.Item("Dont_R_If"' true).GetValue<Slider>().Value)                      return;                    if (Player.Distance(target.Position) < menu.Item("R_Min"' true).GetValue<Slider>().Value)                      return;                    if (mode == 0)                  {                      if (menu.Item("R_Wait_For_Q"' true).GetValue<bool>())                      {                          if (target.HasBuff("AkaliMota"))                          {                              R.Cast(target);                          }                      }                      else                      {                          R.Cast(target);                      }                  }                  else if (mode == 1)                  {                      if (target.HasBuff("AkaliMota") && Q.IsReady())                      {                          R.Cast(target);                          menu.Item("Combo_mode"' true).SetValue(new StringList(new[] { "Normal"' "Q-Delay-R-AA-Q-AA" }));                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,ModeSwitch,The following statement contains a magic number: if (menu.Item("Combo_Switch"' true).GetValue<KeyBind>().Active && lasttime > Game.Ping)              {                  if (mode == 0)                  {                      menu.Item("Combo_mode"' true).SetValue(new StringList(new[] { "Normal"' "Q-Delay-R-AA-Q-AA" }' 1));                      _lasttick = Utils.TickCount + 300;                  }                  else                  {                      menu.Item("Combo_mode"' true).SetValue(new StringList(new[] { "Normal"' "Q-Delay-R-AA-Q-AA" }));                      _lasttick = Utils.TickCount + 300;                  }              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,ModeSwitch,The following statement contains a magic number: if (menu.Item("Combo_Switch"' true).GetValue<KeyBind>().Active && lasttime > Game.Ping)              {                  if (mode == 0)                  {                      menu.Item("Combo_mode"' true).SetValue(new StringList(new[] { "Normal"' "Q-Delay-R-AA-Q-AA" }' 1));                      _lasttick = Utils.TickCount + 300;                  }                  else                  {                      menu.Item("Combo_mode"' true).SetValue(new StringList(new[] { "Normal"' "Q-Delay-R-AA-Q-AA" }));                      _lasttick = Utils.TickCount + 300;                  }              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_W"' true).GetValue<bool>())                  if (W.Level > 0)                      Render.Circle.DrawCircle(Player.Position' W.Range - 2' W.IsReady() ? Color.Green : Color.Red);
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Current_Mode"' true).GetValue<bool>())              {                  Vector2 wts = Drawing.WorldToScreen(Player.Position);                  int mode = menu.Item("Combo_mode"' true).GetValue<StringList>().SelectedIndex;                  if (mode == 0)                      Drawing.DrawText(wts[0] - 20' wts[1]' Color.White' "Normal");                  else if (mode == 1)                      Drawing.DrawText(wts[0] - 20' wts[1]' Color.White' "Q-Delay-R-AA-Q-AA");              }
Magic Number,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Current_Mode"' true).GetValue<bool>())              {                  Vector2 wts = Drawing.WorldToScreen(Player.Position);                  int mode = menu.Item("Combo_mode"' true).GetValue<StringList>().SelectedIndex;                  if (mode == 0)                      Drawing.DrawText(wts[0] - 20' wts[1]' Color.White' "Normal");                  else if (mode == 1)                      Drawing.DrawText(wts[0] - 20' wts[1]' Color.White' "Q-Delay-R-AA-Q-AA");              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadSpells,The following statement contains a magic number: SpellManager.Q = new Spell(SpellSlot.Q' 950);
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadSpells,The following statement contains a magic number: SpellManager.Q2 = new Spell(SpellSlot.Q' 2000);
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadSpells,The following statement contains a magic number: SpellManager.W = new Spell(SpellSlot.W' 450);
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadSpells,The following statement contains a magic number: SpellManager.W2 = new Spell(SpellSlot.W' 600);
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadSpells,The following statement contains a magic number: SpellManager.E = new Spell(SpellSlot.E' 2000);
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadSpells,The following statement contains a magic number: SpellManager.R = new Spell(SpellSlot.R' 450);
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadSpells,The following statement contains a magic number: SpellManager.Q.SetSkillshot(0' 80' 1600' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadSpells,The following statement contains a magic number: SpellManager.Q.SetSkillshot(0' 80' 1600' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadSpells,The following statement contains a magic number: SpellManager.Q2.SetSkillshot(0' 80' 1600' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadSpells,The following statement contains a magic number: SpellManager.Q2.SetSkillshot(0' 80' 1600' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadSpells,The following statement contains a magic number: SpellManager.E.SetSkillshot(0.25f' 100' 1200' false' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadSpells,The following statement contains a magic number: SpellManager.E.SetSkillshot(0.25f' 100' 1200' false' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadSpells,The following statement contains a magic number: SpellManager.R.SetSkillshot(0.5f' 700' 1400' false' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadSpells,The following statement contains a magic number: SpellManager.R.SetSkillshot(0.5f' 700' 1400' false' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The following statement contains a magic number: {                  key.AddItem(new MenuItem("ComboActive"' "Combo!"' true).SetValue(new KeyBind(32' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle)));                  key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("escape"' "Escape"' true).SetValue(new KeyBind("Z".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("insec"' "Insec Selected target"' true).SetValue(new KeyBind("J".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("qeCombo"' "Q->E stun Nearest target"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("qMulti"' "Q if 2+ Soilder"' true).SetValue(new KeyBind("I".ToCharArray()[0]' KeyBindType.Toggle)));                  //add to menu                  menu.AddSubMenu(key);              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The following statement contains a magic number: {                    var qMenu = new Menu("QSpell"' "QSpell");                  {                      qMenu.AddItem(new MenuItem("qOutRange"' "Only Use When target out of range"' true).SetValue(true));                      spell.AddSubMenu(qMenu);                  }                  //W Menu                  var wMenu = new Menu("WSpell"' "WSpell");                  {                      wMenu.AddItem(new MenuItem("wAtk"' "Always Atk Enemy"' true).SetValue(true));                      spell.AddSubMenu(wMenu);                  }                  //E Menu                  var eMenu = new Menu("ESpell"' "ESpell");                  {                      eMenu.AddItem(new MenuItem("eKill"' "If Killable Combo"' true).SetValue(false));                      eMenu.AddItem(new MenuItem("eKnock"' "Always Knockup/DMG"' true).SetValue(false));                      eMenu.AddItem(new MenuItem("eHP"' "if HP >"' true).SetValue(new Slider(100)));                      spell.AddSubMenu(eMenu);                  }                  //R Menu                  var rMenu = new Menu("RSpell"' "RSpell");                  {                      rMenu.AddItem(new MenuItem("rHP"' "if HP <"' true).SetValue(new Slider(20)));                      rMenu.AddItem(new MenuItem("rWall"' "R Enemy Into Wall"' true).SetValue(true));                      spell.AddSubMenu(rMenu);                  }                  menu.AddSubMenu(spell);              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The following statement contains a magic number: {                    var qMenu = new Menu("QSpell"' "QSpell");                  {                      qMenu.AddItem(new MenuItem("qOutRange"' "Only Use When target out of range"' true).SetValue(true));                      spell.AddSubMenu(qMenu);                  }                  //W Menu                  var wMenu = new Menu("WSpell"' "WSpell");                  {                      wMenu.AddItem(new MenuItem("wAtk"' "Always Atk Enemy"' true).SetValue(true));                      spell.AddSubMenu(wMenu);                  }                  //E Menu                  var eMenu = new Menu("ESpell"' "ESpell");                  {                      eMenu.AddItem(new MenuItem("eKill"' "If Killable Combo"' true).SetValue(false));                      eMenu.AddItem(new MenuItem("eKnock"' "Always Knockup/DMG"' true).SetValue(false));                      eMenu.AddItem(new MenuItem("eHP"' "if HP >"' true).SetValue(new Slider(100)));                      spell.AddSubMenu(eMenu);                  }                  //R Menu                  var rMenu = new Menu("RSpell"' "RSpell");                  {                      rMenu.AddItem(new MenuItem("rHP"' "if HP <"' true).SetValue(new Slider(20)));                      rMenu.AddItem(new MenuItem("rWall"' "R Enemy Into Wall"' true).SetValue(true));                      spell.AddSubMenu(rMenu);                  }                  menu.AddSubMenu(spell);              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The following statement contains a magic number: {                  harass.AddItem(new MenuItem("UseQHarass"' "Use Q"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseWHarass"' "Use W"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseEHarass"' "Use E"' true).SetValue(false));                  harass.AddSubMenu(HitChanceManager.AddHitChanceMenuHarass(true' false' false' false));                  ManaManager.AddManaManagertoMenu(harass' "Harass"' 60);                  menu.AddSubMenu(harass);              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(false));                  farm.AddItem(new MenuItem("qFarm"' "Only Q if > minion"' true).SetValue(new Slider(3' 0' 5)));                  ManaManager.AddManaManagertoMenu(farm' "Farm"' 50);                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(false));                  farm.AddItem(new MenuItem("qFarm"' "Only Q if > minion"' true).SetValue(new Slider(3' 0' 5)));                  ManaManager.AddManaManagertoMenu(farm' "Farm"' 50);                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(false));                  farm.AddItem(new MenuItem("qFarm"' "Only Q if > minion"' true).SetValue(new Slider(3' 0' 5)));                  ManaManager.AddManaManagertoMenu(farm' "Farm"' 50);                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The following statement contains a magic number: {                  misc.AddSubMenu(AoeSpellManager.AddHitChanceMenuCombo(false' false' false' true));                  misc.AddItem(new MenuItem("UseInt"' "Use E to Interrupt"' true).SetValue(true));                  misc.AddItem(new MenuItem("UseGap"' "Use R for GapCloser"' true).SetValue(true));                  misc.AddItem(new MenuItem("escapeDelay"' "Escape Delay Decrease"' true).SetValue(new Slider(0' 0' 300)));                  menu.AddSubMenu(misc);              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The following statement contains a magic number: {                  draw.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  draw.AddItem(drawComboDamageMenu);                  draw.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(draw);              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The following statement contains a magic number: {                  draw.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  draw.AddItem(drawComboDamageMenu);                  draw.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(draw);              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The following statement contains a magic number: {                  draw.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  draw.AddItem(drawComboDamageMenu);                  draw.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(draw);              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The following statement contains a magic number: {                  draw.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  draw.AddItem(drawComboDamageMenu);                  draw.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(draw);              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The following statement contains a magic number: {                  draw.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  draw.AddItem(drawComboDamageMenu);                  draw.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(draw);              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The following statement contains a magic number: {                  draw.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  draw.AddItem(drawComboDamageMenu);                  draw.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(draw);              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The following statement contains a magic number: {                  draw.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  draw.AddItem(drawComboDamageMenu);                  draw.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(draw);              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The following statement contains a magic number: {                  draw.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  draw.AddItem(drawComboDamageMenu);                  draw.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(draw);              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The following statement contains a magic number: {                  draw.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  draw.AddItem(drawComboDamageMenu);                  draw.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(draw);              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The following statement contains a magic number: {                  draw.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  draw.AddItem(drawComboDamageMenu);                  draw.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(draw);              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The following statement contains a magic number: {                  draw.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  draw.AddItem(drawComboDamageMenu);                  draw.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(draw);              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The following statement contains a magic number: {                  draw.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  draw.AddItem(drawComboDamageMenu);                  draw.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(draw);              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The following statement contains a magic number: {                  draw.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  draw.AddItem(drawComboDamageMenu);                  draw.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(draw);              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The following statement contains a magic number: {                  draw.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  draw.AddItem(drawComboDamageMenu);                  draw.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(draw);              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The following statement contains a magic number: {                  draw.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  draw.AddItem(drawComboDamageMenu);                  draw.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(draw);              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,LoadMenu,The following statement contains a magic number: {                  draw.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  draw.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  draw.AddItem(drawComboDamageMenu);                  draw.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(draw);              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,UseSpells,The following statement contains a magic number: var soilderTarget = TargetSelector.GetTarget(1200' TargetSelector.DamageType.Magical);
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  ItemManager.Target = soilderTarget;                    //see if killable                  if (dmg > soilderTarget.Health - 50)                      ItemManager.KillableTarget = true;                    ItemManager.UseTargetted = true;                }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,SmartKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1200) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage))              {                  if (target != null)                  {                      //R                      if ((Player.GetSpellDamage(target' SpellSlot.R)) > target.Health + 20 && Player.Distance(target.Position) < R.Range && menu.Item("rKS"' true).GetValue<bool>())                      {                          R.Cast(target);                      }                        if (soilderCount() < 1 && !W.IsReady())                          return;                        //WQ                      if ((Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 20 && menu.Item("wqKS"' true).GetValue<bool>())                      {                          CastW(target);                      }                        //qe                      if ((Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 20 && Player.Distance(target.Position) < Q.Range && menu.Item("qeKS"' true).GetValue<bool>())                      {                          CastQe(target' "Null");                      }                    }              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,SmartKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1200) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage))              {                  if (target != null)                  {                      //R                      if ((Player.GetSpellDamage(target' SpellSlot.R)) > target.Health + 20 && Player.Distance(target.Position) < R.Range && menu.Item("rKS"' true).GetValue<bool>())                      {                          R.Cast(target);                      }                        if (soilderCount() < 1 && !W.IsReady())                          return;                        //WQ                      if ((Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 20 && menu.Item("wqKS"' true).GetValue<bool>())                      {                          CastW(target);                      }                        //qe                      if ((Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 20 && Player.Distance(target.Position) < Q.Range && menu.Item("qeKS"' true).GetValue<bool>())                      {                          CastQe(target' "Null");                      }                    }              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,SmartKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1200) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage))              {                  if (target != null)                  {                      //R                      if ((Player.GetSpellDamage(target' SpellSlot.R)) > target.Health + 20 && Player.Distance(target.Position) < R.Range && menu.Item("rKS"' true).GetValue<bool>())                      {                          R.Cast(target);                      }                        if (soilderCount() < 1 && !W.IsReady())                          return;                        //WQ                      if ((Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 20 && menu.Item("wqKS"' true).GetValue<bool>())                      {                          CastW(target);                      }                        //qe                      if ((Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 20 && Player.Distance(target.Position) < Q.Range && menu.Item("qeKS"' true).GetValue<bool>())                      {                          CastQe(target' "Null");                      }                    }              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,SmartKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1200) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage))              {                  if (target != null)                  {                      //R                      if ((Player.GetSpellDamage(target' SpellSlot.R)) > target.Health + 20 && Player.Distance(target.Position) < R.Range && menu.Item("rKS"' true).GetValue<bool>())                      {                          R.Cast(target);                      }                        if (soilderCount() < 1 && !W.IsReady())                          return;                        //WQ                      if ((Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 20 && menu.Item("wqKS"' true).GetValue<bool>())                      {                          CastW(target);                      }                        //qe                      if ((Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 20 && Player.Distance(target.Position) < Q.Range && menu.Item("qeKS"' true).GetValue<bool>())                      {                          CastQe(target' "Null");                      }                    }              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,Obj_AI_Base_OnProcessSpellCast,The following statement contains a magic number: if (args.SData.Name == "AzirQ")              {                  Q.LastCastAttemptT = Utils.TickCount + 250;                  _rVec = Player.Position;              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,Escape,The following statement contains a magic number: if ((E.IsReady() || ESpell.State == SpellState.Surpressed))              {                  if (soilderCount() < 1 && W.IsReady())                      W.Cast(wVec);                  else if (soilderCount() < 1 && !W.IsReady())                      return;                    if (GetNearestSoilderToMouse() == null)                      return;                    var nearSlave = GetNearestSoilderToMouse();                    if ((E.IsReady() || ESpell.State == SpellState.Surpressed) &&                      Player.Distance(Game.CursorPos) > Game.CursorPos.Distance(nearSlave.Position))                  {                      E.Cast(nearSlave.Position);                      E.LastCastAttemptT = Utils.TickCount + 250;                  }                  else if (W.IsReady())                  {                      W.Cast(wVec);                  }              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,CastQe,The following statement contains a magic number: if (W.IsReady())              {                  Vector3 wVec = Player.ServerPosition + Vector3.Normalize(target.ServerPosition - Player.ServerPosition) * W.Range;                    var qPred = Util.GetP(wVec' Q' target' W.Delay + Q.Delay' true);                    if ((Q.IsReady() || QSpell.State == SpellState.Surpressed) && (E.IsReady() || ESpell.State == SpellState.Surpressed) && Player.Distance(target.Position) < Q.Range - 75 && qPred.Hitchance >= HitChanceManager.GetQHitChance(source))                  {                      var vec = target.ServerPosition - Player.ServerPosition;                      var castBehind = qPred.CastPosition + Vector3.Normalize(vec) * 75;                        W.Cast(wVec);                      Utility.DelayAction.Add((int) W.Delay + 100' () => Q2.Cast(castBehind));                      Utility.DelayAction.Add((int)(W.Delay + Q.Delay) + 100' () => E.Cast(castBehind));                  }              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,CastQe,The following statement contains a magic number: if (W.IsReady())              {                  Vector3 wVec = Player.ServerPosition + Vector3.Normalize(target.ServerPosition - Player.ServerPosition) * W.Range;                    var qPred = Util.GetP(wVec' Q' target' W.Delay + Q.Delay' true);                    if ((Q.IsReady() || QSpell.State == SpellState.Surpressed) && (E.IsReady() || ESpell.State == SpellState.Surpressed) && Player.Distance(target.Position) < Q.Range - 75 && qPred.Hitchance >= HitChanceManager.GetQHitChance(source))                  {                      var vec = target.ServerPosition - Player.ServerPosition;                      var castBehind = qPred.CastPosition + Vector3.Normalize(vec) * 75;                        W.Cast(wVec);                      Utility.DelayAction.Add((int) W.Delay + 100' () => Q2.Cast(castBehind));                      Utility.DelayAction.Add((int)(W.Delay + Q.Delay) + 100' () => E.Cast(castBehind));                  }              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,CastQe,The following statement contains a magic number: if (W.IsReady())              {                  Vector3 wVec = Player.ServerPosition + Vector3.Normalize(target.ServerPosition - Player.ServerPosition) * W.Range;                    var qPred = Util.GetP(wVec' Q' target' W.Delay + Q.Delay' true);                    if ((Q.IsReady() || QSpell.State == SpellState.Surpressed) && (E.IsReady() || ESpell.State == SpellState.Surpressed) && Player.Distance(target.Position) < Q.Range - 75 && qPred.Hitchance >= HitChanceManager.GetQHitChance(source))                  {                      var vec = target.ServerPosition - Player.ServerPosition;                      var castBehind = qPred.CastPosition + Vector3.Normalize(vec) * 75;                        W.Cast(wVec);                      Utility.DelayAction.Add((int) W.Delay + 100' () => Q2.Cast(castBehind));                      Utility.DelayAction.Add((int)(W.Delay + Q.Delay) + 100' () => E.Cast(castBehind));                  }              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,CastQe,The following statement contains a magic number: if (W.IsReady())              {                  Vector3 wVec = Player.ServerPosition + Vector3.Normalize(target.ServerPosition - Player.ServerPosition) * W.Range;                    var qPred = Util.GetP(wVec' Q' target' W.Delay + Q.Delay' true);                    if ((Q.IsReady() || QSpell.State == SpellState.Surpressed) && (E.IsReady() || ESpell.State == SpellState.Surpressed) && Player.Distance(target.Position) < Q.Range - 75 && qPred.Hitchance >= HitChanceManager.GetQHitChance(source))                  {                      var vec = target.ServerPosition - Player.ServerPosition;                      var castBehind = qPred.CastPosition + Vector3.Normalize(vec) * 75;                        W.Cast(wVec);                      Utility.DelayAction.Add((int) W.Delay + 100' () => Q2.Cast(castBehind));                      Utility.DelayAction.Add((int)(W.Delay + Q.Delay) + 100' () => E.Cast(castBehind));                  }              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,CastE,The following statement contains a magic number: foreach (var slave in slaves)              {                  if (target != null && Player.Distance(slave.Position) < E.Range)                  {                      var ePred = E.GetPrediction(target);                      Object[] obj = Util.VectorPointProjectionOnLineSegment(Player.ServerPosition.To2D()' slave.Position.To2D()' ePred.UnitPosition.To2D());                      var isOnseg = (bool)obj[2];                      var pointLine = (Vector2)obj[1];                        if (E.IsReady() && isOnseg && pointLine.Distance(ePred.UnitPosition.To2D()) < E.Width && ShouldE(target))                      {                          E.Cast(slave.Position);                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,ShouldQ,The following statement contains a magic number: if (soilderCount() < 2 && menu.Item("qMulti"' true).GetValue<KeyBind>().Active)                  return false;
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,ShouldQ,The following statement contains a magic number: if (Player.GetSpellDamage(target' SpellSlot.Q) > target.Health + 10)                  return true;
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,ShouldE,The following statement contains a magic number: if (menu.Item("eKill"' true).GetValue<bool>() && GetComboDamage(target) > target.Health + 15)                  return true;
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,ShouldE,The following statement contains a magic number: if (menu.Item("eKS"' true).GetValue<bool>() && Player.GetSpellDamage(target' SpellSlot.E) > target.Health + 10)                  return true;
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,ShouldE,The following statement contains a magic number: var hpPercent = Player.Health / Player.MaxHealth * 100;
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,ShouldR,The following statement contains a magic number: if (Player.GetSpellDamage(target' SpellSlot.R) > target.Health - 150)                  return true;
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,ShouldR,The following statement contains a magic number: if (WallStun(target) && GetComboDamage(target) > target.Health / 2 && menu.Item("rWall"' true).GetValue<bool>())              {                  return true;              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,AutoAtk,The following statement contains a magic number: var soilderTarget = TargetSelector.GetTarget(1000' TargetSelector.DamageType.Magical);
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,AttackTarget,The following statement contains a magic number: if (tar != null && Player.Distance(tar.Position) < 800)              {                  if (target != null && target.Distance(tar.Position) <= 350)                  {                      OrbwalkManager.Orbwalk(target' Game.CursorPos);                  }              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,AttackTarget,The following statement contains a magic number: if (tar != null && Player.Distance(tar.Position) < 800)              {                  if (target != null && target.Distance(tar.Position) <= 350)                  {                      OrbwalkManager.Orbwalk(target' Game.CursorPos);                  }              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,Farm,The following statement contains a magic number: if (useQ && (Q.IsReady() || QSpell.State == SpellState.Surpressed))              {                  int hit;                  if (soilderCount() > 0)                  {                      var slaves = AzirManager.Soilders.ToList();                      foreach (var slave in slaves)                      {                          foreach (var enemy in allMinionsQ)                          {                              hit = 0;                              Q.UpdateSourcePosition(slave.Position' Player.ServerPosition);                              var prediction = Q.GetPrediction(enemy);                                if (Q.IsReady() && Player.Distance(enemy.Position) <= Q.Range)                              {                                  hit += allMinionsQ.Count(enemy2 => enemy2.Distance(prediction.CastPosition) < 200 && Q.IsReady());                                  if (hit >= min)                                  {                                      if (Q.IsReady())                                      {                                          Q.Cast(prediction.CastPosition);                                          return;                                      }                                  }                              }                          }                      }                  }                  if (W.IsReady())                  {                      var wpred = W.GetCircularFarmLocation(allMinionsW);                      if (wpred.MinionsHit > 0)                          W.Cast(wpred.Position);                        foreach (var enemy in allMinionsQ)                      {                          hit = 0;                          Q.UpdateSourcePosition(Player.Position' Player.ServerPosition);                          var prediction = Q.GetPrediction(enemy);                            if (Q.IsReady() && Player.Distance(enemy.Position) <= Q.Range)                          {                              hit += allMinionsQ.Count(enemy2 => enemy2.Distance(prediction.CastPosition) < 200 && Q.IsReady());                              if (hit >= min)                              {                                  if (Q.IsReady())                                  {                                      Q.Cast(prediction.CastPosition);                                      return;                                  }                              }                          }                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,Farm,The following statement contains a magic number: if (useQ && (Q.IsReady() || QSpell.State == SpellState.Surpressed))              {                  int hit;                  if (soilderCount() > 0)                  {                      var slaves = AzirManager.Soilders.ToList();                      foreach (var slave in slaves)                      {                          foreach (var enemy in allMinionsQ)                          {                              hit = 0;                              Q.UpdateSourcePosition(slave.Position' Player.ServerPosition);                              var prediction = Q.GetPrediction(enemy);                                if (Q.IsReady() && Player.Distance(enemy.Position) <= Q.Range)                              {                                  hit += allMinionsQ.Count(enemy2 => enemy2.Distance(prediction.CastPosition) < 200 && Q.IsReady());                                  if (hit >= min)                                  {                                      if (Q.IsReady())                                      {                                          Q.Cast(prediction.CastPosition);                                          return;                                      }                                  }                              }                          }                      }                  }                  if (W.IsReady())                  {                      var wpred = W.GetCircularFarmLocation(allMinionsW);                      if (wpred.MinionsHit > 0)                          W.Cast(wpred.Position);                        foreach (var enemy in allMinionsQ)                      {                          hit = 0;                          Q.UpdateSourcePosition(Player.Position' Player.ServerPosition);                          var prediction = Q.GetPrediction(enemy);                            if (Q.IsReady() && Player.Distance(enemy.Position) <= Q.Range)                          {                              hit += allMinionsQ.Count(enemy2 => enemy2.Distance(prediction.CastPosition) < 200 && Q.IsReady());                              if (hit >= min)                              {                                  if (Q.IsReady())                                  {                                      Q.Cast(prediction.CastPosition);                                      return;                                  }                              }                          }                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,Game_OnGameUpdate,The following statement contains a magic number: if (menu.Item("escape"' true).GetValue<KeyBind>().Active)              {                  OrbwalkManager.Orbwalk(null' Game.CursorPos);                  Escape();              }              else if (menu.Item("ComboActive"' true).GetValue<KeyBind>().Active)              {                  Combo();              }              else if (menu.Item("insec"' true).GetValue<KeyBind>().Active)              {                  OrbwalkManager.Orbwalk(null' Game.CursorPos);                    _insecTarget = TargetSelector.GetSelectedTarget();                    if (_insecTarget != null)                  {                      if (_insecTarget.HasBuffOfType(BuffType.Knockup) || _insecTarget.HasBuffOfType(BuffType.Knockback))                          if (Player.Distance(_insecTarget) < 200)                          R2.Cast(_rVec);                        Insec();                  }              }              else if (menu.Item("qeCombo"' true).GetValue<KeyBind>().Active)              {                  var soilderTarget = TargetSelector.GetTarget(900' TargetSelector.DamageType.Magical);                    OrbwalkManager.Orbwalk(null' Game.CursorPos);                  CastQe(soilderTarget' "Null");              }              else              {                  if (menu.Item("LaneClearActive"' true).GetValue<KeyBind>().Active)                  {                      Farm();                  }                    if (menu.Item("HarassActive"' true).GetValue<KeyBind>().Active)                      Harass();                    if (menu.Item("HarassActiveT"' true).GetValue<KeyBind>().Active)                      Harass();                    if (menu.Item("wAtk"' true).GetValue<bool>())                      AutoAtk();              }
Magic Number,xSaliceResurrected.Mid,Azir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Azir.cs,Game_OnGameUpdate,The following statement contains a magic number: if (menu.Item("escape"' true).GetValue<KeyBind>().Active)              {                  OrbwalkManager.Orbwalk(null' Game.CursorPos);                  Escape();              }              else if (menu.Item("ComboActive"' true).GetValue<KeyBind>().Active)              {                  Combo();              }              else if (menu.Item("insec"' true).GetValue<KeyBind>().Active)              {                  OrbwalkManager.Orbwalk(null' Game.CursorPos);                    _insecTarget = TargetSelector.GetSelectedTarget();                    if (_insecTarget != null)                  {                      if (_insecTarget.HasBuffOfType(BuffType.Knockup) || _insecTarget.HasBuffOfType(BuffType.Knockback))                          if (Player.Distance(_insecTarget) < 200)                          R2.Cast(_rVec);                        Insec();                  }              }              else if (menu.Item("qeCombo"' true).GetValue<KeyBind>().Active)              {                  var soilderTarget = TargetSelector.GetTarget(900' TargetSelector.DamageType.Magical);                    OrbwalkManager.Orbwalk(null' Game.CursorPos);                  CastQe(soilderTarget' "Null");              }              else              {                  if (menu.Item("LaneClearActive"' true).GetValue<KeyBind>().Active)                  {                      Farm();                  }                    if (menu.Item("HarassActive"' true).GetValue<KeyBind>().Active)                      Harass();                    if (menu.Item("HarassActiveT"' true).GetValue<KeyBind>().Active)                      Harass();                    if (menu.Item("wAtk"' true).GetValue<bool>())                      AutoAtk();              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,SetSpells,The following statement contains a magic number: SpellManager.Q = new Spell(SpellSlot.Q' 850);
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,SetSpells,The following statement contains a magic number: SpellManager.W = new Spell(SpellSlot.W' 850);
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,SetSpells,The following statement contains a magic number: SpellManager.W.SetSkillshot(0.5f' 90f' 2500' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,SetSpells,The following statement contains a magic number: SpellManager.E = new Spell(SpellSlot.E' 700);
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,SetSpells,The following statement contains a magic number: SpellManager.R = new Spell(SpellSlot.R' 750);
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,SetSpells,The following statement contains a magic number: SpellManager.R.SetSkillshot(0.3f' (float)(80 * Math.PI / 180)' float.MaxValue' false' SkillshotType.SkillshotCone);
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,SetSpells,The following statement contains a magic number: SpellManager.R.SetSkillshot(0.3f' (float)(80 * Math.PI / 180)' float.MaxValue' false' SkillshotType.SkillshotCone);
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,SetSpells,The following statement contains a magic number: SpellManager.R2 = new Spell(SpellSlot.R'  1200);
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,SetSpells,The following statement contains a magic number: SpellManager.R2.SetSkillshot(0.3f' (float)(80 * Math.PI / 180)' float.MaxValue' false' SkillshotType.SkillshotCone);
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,SetSpells,The following statement contains a magic number: SpellManager.R2.SetSkillshot(0.3f' (float)(80 * Math.PI / 180)' float.MaxValue' false' SkillshotType.SkillshotCone);
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The following statement contains a magic number: {                  key.AddItem(new MenuItem("ComboActive"' "Combo!"' true).SetValue(new KeyBind(32' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle)));                  key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("Jungle"' "Jungle Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("LastHitE"' "Last Hit With E"' true).SetValue(new KeyBind("A".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("forceUlt"' "Ult Helper"' true).SetValue(new KeyBind("H".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("flashUlt"' "Ult Flash"' true).SetValue(new KeyBind("T".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("aoeUltOnly"' "AOE Ult Only"' true).SetValue(new KeyBind("Y".ToCharArray()[0]' KeyBindType.Toggle)));                  //add to menu                  menu.AddSubMenu(key);              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Auto_Q_Immobile"' "Auto Q Immobile"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Dashing"' "Auto Q Dashing"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("OnlyWIfnotPoison"' "Only W if Q is offcd and enemy not poison"' true).SetValue(false));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_Poison"' "Auto E Poison Target"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("E_Delay"' "Delay between 0-1500(Milliseconds or tick)"' true).SetValue(new Slider(0' 0' 1500)));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("overKillCheck"' "Over Kill Check"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("blockR"' "Block R if no enemy hit"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("AOEStun"' "Ult if Stun >= "' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("KillableCombo"' "Cast If target is Killable with Combo"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("faceCheck"' "Face Check for Killable with combo"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("faceCheckHelper"' "Face Check with UltHelper"' true).SetValue(true));                      rMenu.AddSubMenu(new Menu("Don't use R on"' "Dont_R"));                      foreach (var enemy in HeroManager.Enemies)                          rMenu.SubMenu("Dont_R")                              .AddItem(new MenuItem("Dont_R" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Auto_Q_Immobile"' "Auto Q Immobile"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Dashing"' "Auto Q Dashing"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("OnlyWIfnotPoison"' "Only W if Q is offcd and enemy not poison"' true).SetValue(false));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_Poison"' "Auto E Poison Target"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("E_Delay"' "Delay between 0-1500(Milliseconds or tick)"' true).SetValue(new Slider(0' 0' 1500)));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("overKillCheck"' "Over Kill Check"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("blockR"' "Block R if no enemy hit"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("AOEStun"' "Ult if Stun >= "' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("KillableCombo"' "Cast If target is Killable with Combo"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("faceCheck"' "Face Check for Killable with combo"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("faceCheckHelper"' "Face Check with UltHelper"' true).SetValue(true));                      rMenu.AddSubMenu(new Menu("Don't use R on"' "Dont_R"));                      foreach (var enemy in HeroManager.Enemies)                          rMenu.SubMenu("Dont_R")                              .AddItem(new MenuItem("Dont_R" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Auto_Q_Immobile"' "Auto Q Immobile"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Dashing"' "Auto Q Dashing"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("OnlyWIfnotPoison"' "Only W if Q is offcd and enemy not poison"' true).SetValue(false));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_Poison"' "Auto E Poison Target"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("E_Delay"' "Delay between 0-1500(Milliseconds or tick)"' true).SetValue(new Slider(0' 0' 1500)));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("overKillCheck"' "Over Kill Check"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("blockR"' "Block R if no enemy hit"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("AOEStun"' "Ult if Stun >= "' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("KillableCombo"' "Cast If target is Killable with Combo"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("faceCheck"' "Face Check for Killable with combo"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("faceCheckHelper"' "Face Check with UltHelper"' true).SetValue(true));                      rMenu.AddSubMenu(new Menu("Don't use R on"' "Dont_R"));                      foreach (var enemy in HeroManager.Enemies)                          rMenu.SubMenu("Dont_R")                              .AddItem(new MenuItem("Dont_R" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The following statement contains a magic number: {                  harass.AddItem(new MenuItem("UseQHarass"' "Use Q"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseWHarass"' "Use W"' true).SetValue(false));                  harass.AddItem(new MenuItem("UseEHarass"' "Use E"' true).SetValue(true));                  harass.AddSubMenu(HitChanceManager.AddHitChanceMenuHarass(true' true' false' true));                  ManaManager.AddManaManagertoMenu(harass' "Harass"' 50);                  menu.AddSubMenu(harass);              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseWFarm"' "Use W"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseEFarm"' "Use E"' true).SetValue(false));                  farm.AddItem(new MenuItem("EMode"' "E Mode"' true).SetValue(new StringList(new[] { "Poisoned"' "LastHit"' "PoisonLastHit"})));                  farm.AddItem(new MenuItem("QMinHit"' "Min Minion to Q"' true).SetValue(new Slider(3' 1' 6)));                  farm.AddItem(new MenuItem("WMinHit"' "Min Minion to W"' true).SetValue(new Slider(3' 1' 6)));                  ManaManager.AddManaManagertoMenu(farm' "LaneClear"' 50);                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseWFarm"' "Use W"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseEFarm"' "Use E"' true).SetValue(false));                  farm.AddItem(new MenuItem("EMode"' "E Mode"' true).SetValue(new StringList(new[] { "Poisoned"' "LastHit"' "PoisonLastHit"})));                  farm.AddItem(new MenuItem("QMinHit"' "Min Minion to Q"' true).SetValue(new Slider(3' 1' 6)));                  farm.AddItem(new MenuItem("WMinHit"' "Min Minion to W"' true).SetValue(new Slider(3' 1' 6)));                  ManaManager.AddManaManagertoMenu(farm' "LaneClear"' 50);                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseWFarm"' "Use W"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseEFarm"' "Use E"' true).SetValue(false));                  farm.AddItem(new MenuItem("EMode"' "E Mode"' true).SetValue(new StringList(new[] { "Poisoned"' "LastHit"' "PoisonLastHit"})));                  farm.AddItem(new MenuItem("QMinHit"' "Min Minion to Q"' true).SetValue(new Slider(3' 1' 6)));                  farm.AddItem(new MenuItem("WMinHit"' "Min Minion to W"' true).SetValue(new Slider(3' 1' 6)));                  ManaManager.AddManaManagertoMenu(farm' "LaneClear"' 50);                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseWFarm"' "Use W"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseEFarm"' "Use E"' true).SetValue(false));                  farm.AddItem(new MenuItem("EMode"' "E Mode"' true).SetValue(new StringList(new[] { "Poisoned"' "LastHit"' "PoisonLastHit"})));                  farm.AddItem(new MenuItem("QMinHit"' "Min Minion to Q"' true).SetValue(new Slider(3' 1' 6)));                  farm.AddItem(new MenuItem("WMinHit"' "Min Minion to W"' true).SetValue(new Slider(3' 1' 6)));                  ManaManager.AddManaManagertoMenu(farm' "LaneClear"' 50);                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseWFarm"' "Use W"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseEFarm"' "Use E"' true).SetValue(false));                  farm.AddItem(new MenuItem("EMode"' "E Mode"' true).SetValue(new StringList(new[] { "Poisoned"' "LastHit"' "PoisonLastHit"})));                  farm.AddItem(new MenuItem("QMinHit"' "Min Minion to Q"' true).SetValue(new Slider(3' 1' 6)));                  farm.AddItem(new MenuItem("WMinHit"' "Min Minion to W"' true).SetValue(new Slider(3' 1' 6)));                  ManaManager.AddManaManagertoMenu(farm' "LaneClear"' 50);                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("FlashUltNotification"' "Ult Flash Killable Notification"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("FlashUltNotification"' "Ult Flash Killable Notification"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("FlashUltNotification"' "Ult Flash Killable Notification"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("FlashUltNotification"' "Ult Flash Killable Notification"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,GetComboDamage,The following statement contains a magic number: if (Q.IsReady())                  comboDamage += Player.GetSpellDamage(target' SpellSlot.Q) * 2;
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,GetComboDamage,The following statement contains a magic number: if (E.IsReady())                  comboDamage += Player.GetSpellDamage(target' SpellSlot.E) * 2;
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var target = TargetSelector.GetTarget(Q.Range' TargetSelector.DamageType.Physical);                  if (target.IsValidTarget(Q.Range))                  {                          var dmg = GetComboDamage(target);                      ItemManager.Target = target;                        //see if killable                      if (dmg > target.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,Cast_E,The following statement contains a magic number: if (target.IsValidTarget(E.Range))              {                    if (Player.GetSpellDamage(target' SpellSlot.E) - 20 > target.Health)                  {                      E.Cast(target);                      return;                  }                    if (PoisonDuration(target) > E.Delay)                  {                      E.Cast(target);                      return;                  }              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,FlashUlt,The following statement contains a magic number: if (!SummonerManager.Flash_Ready() || Utils.TickCount - _lastFlash < 500)                  return;
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,FlashUlt,The following statement contains a magic number: var vec = Player.ServerPosition.Extend(Game.CursorPos' R.Range + 400);
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,QSuccessfullyCasted,The following statement contains a magic number: return Utils.TickCount - Q.LastCastAttemptT > 800 + Game.Ping;
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,Obj_AI_Base_OnProcessSpellCast,The following statement contains a magic number: if (castedSlot == SpellSlot.R)              {                  if(Utils.TickCount - _lastFlash < 500 && _lastFlash > 0)                      SummonerManager.UseFlash(_flashVec);              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,Farm,The following statement contains a magic number: if (useQ)              {                  var min = menu.Item("QMinHit"' true).GetValue<Slider>().Value;                  var minionQ = MinionManager.GetMinions(Player.ServerPosition' Q.Range' MinionTypes.All' MinionTeam.NotAlly);                    var pred = Q.GetCircularFarmLocation(minionQ' 120);                    if (pred.MinionsHit >= min)                      Q.Cast(pred.Position);              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,Farm,The following statement contains a magic number: if (useW)              {                  var min = menu.Item("WMinHit"' true).GetValue<Slider>().Value;                  var minionW = MinionManager.GetMinions(Player.ServerPosition' W.Range' MinionTypes.All' MinionTeam.NotAlly);                    var pred = W.GetCircularFarmLocation(minionW' 200);                    if (pred.MinionsHit >= min)                      W.Cast(pred.Position);              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,Farm,The following statement contains a magic number: if (useE)              {                  var mode = menu.Item("EMode"' true).GetValue<StringList>().SelectedIndex;                  var minions = MinionManager.GetMinions(Player.ServerPosition' E.Range' MinionTypes.All' MinionTeam.NotAlly);                    if (minions.Count == 0)                      return;                    if (mode == 0)                  {                      var minion = minions.FirstOrDefault(x => PoisonDuration(x) > E.Delay);                        if (minion != null)                          E.Cast(minion);                  }                  else if(mode == 1)                  {                      foreach (var x in minions)                      {                          var healthPred = HealthPrediction.GetHealthPrediction(x' (int)Player.Distance(x)' Game.Ping +  200);                            if (healthPred <= Player.GetSpellDamage(x' SpellSlot.E))                              E.Cast(x);                      }                  }                  else if (mode == 2)                  {                      foreach (var x in minions.Where(x => PoisonDuration(x) > E.Delay))                      {                          var healthPred = HealthPrediction.GetHealthPrediction(x' (int)Player.Distance(x)' Game.Ping + 200);                            if (healthPred <= Player.GetSpellDamage(x' SpellSlot.E))                              E.Cast(x);                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,Farm,The following statement contains a magic number: if (useE)              {                  var mode = menu.Item("EMode"' true).GetValue<StringList>().SelectedIndex;                  var minions = MinionManager.GetMinions(Player.ServerPosition' E.Range' MinionTypes.All' MinionTeam.NotAlly);                    if (minions.Count == 0)                      return;                    if (mode == 0)                  {                      var minion = minions.FirstOrDefault(x => PoisonDuration(x) > E.Delay);                        if (minion != null)                          E.Cast(minion);                  }                  else if(mode == 1)                  {                      foreach (var x in minions)                      {                          var healthPred = HealthPrediction.GetHealthPrediction(x' (int)Player.Distance(x)' Game.Ping +  200);                            if (healthPred <= Player.GetSpellDamage(x' SpellSlot.E))                              E.Cast(x);                      }                  }                  else if (mode == 2)                  {                      foreach (var x in minions.Where(x => PoisonDuration(x) > E.Delay))                      {                          var healthPred = HealthPrediction.GetHealthPrediction(x' (int)Player.Distance(x)' Game.Ping + 200);                            if (healthPred <= Player.GetSpellDamage(x' SpellSlot.E))                              E.Cast(x);                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,Farm,The following statement contains a magic number: if (useE)              {                  var mode = menu.Item("EMode"' true).GetValue<StringList>().SelectedIndex;                  var minions = MinionManager.GetMinions(Player.ServerPosition' E.Range' MinionTypes.All' MinionTeam.NotAlly);                    if (minions.Count == 0)                      return;                    if (mode == 0)                  {                      var minion = minions.FirstOrDefault(x => PoisonDuration(x) > E.Delay);                        if (minion != null)                          E.Cast(minion);                  }                  else if(mode == 1)                  {                      foreach (var x in minions)                      {                          var healthPred = HealthPrediction.GetHealthPrediction(x' (int)Player.Distance(x)' Game.Ping +  200);                            if (healthPred <= Player.GetSpellDamage(x' SpellSlot.E))                              E.Cast(x);                      }                  }                  else if (mode == 2)                  {                      foreach (var x in minions.Where(x => PoisonDuration(x) > E.Delay))                      {                          var healthPred = HealthPrediction.GetHealthPrediction(x' (int)Player.Distance(x)' Game.Ping + 200);                            if (healthPred <= Player.GetSpellDamage(x' SpellSlot.E))                              E.Cast(x);                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,Jungle,The following statement contains a magic number: if (useQ && minionQ.Count > 0)              {                  var pred = Q.GetCircularFarmLocation(minionQ' 120);                    Q.Cast(pred.Position);              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,Jungle,The following statement contains a magic number: if (useW && minionW.Count > 0)              {                  var pred = W.GetCircularFarmLocation(minionW' 200);                    W.Cast(pred.Position);              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,LastHit,The following statement contains a magic number: foreach (var x in from x in minions let healthPred = HealthPrediction.GetHealthPrediction(x' (int)Player.Distance(x)' Game.Ping + 200) where healthPred <= Player.GetSpellDamage(x' SpellSlot.E) select x)              {                  E.Cast(x);              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,Cast_R,The following statement contains a magic number: foreach (var target in HeroManager.Enemies.Where(x => x.IsValidTarget(R.Range)).OrderByDescending(GetComboDamage))              {                  if (menu.Item("Dont_R" + target.CharData.BaseSkinName' true) != null)                  {                      if (!menu.Item("Dont_R" + target.CharData.BaseSkinName' true).GetValue<bool>())                      {                          if (menu.Item("overKillCheck"' true).GetValue<bool>())                          {                              if (Player.GetSpellDamage(target' SpellSlot.Q) +                                  Player.GetSpellDamage(target' SpellSlot.E)*2 > target.Health)                                  continue;                          }                          //if killable                          if (menu.Item("KillableCombo"' true).GetValue<bool>())                          {                              if (GetComboDamage(target) > target.Health && R.GetPrediction(target).Hitchance >= HitChanceManager.GetRHitChance(source))                              {                                  if (ShouldR(target))                                  {                                      R.Cast(target);                                      return;                                  }                              }                          }                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("FlashUltNotification"' true).GetValue<bool>() && SummonerManager.Flash_Ready() && R.IsReady())              {                  var enemy = HeroManager.Enemies.Where(x => R.IsKillable(x)).ToList();                    if (!enemy.Any())                      return;                    foreach (var x in enemy.Where(x => x.IsValidTarget(R2.Range)))                  {                      if (Utils.TickCount - _lastNotification > 0)                      {                          Notifications.AddNotification(x.CharData.BaseSkinName + " Flash Ult Killable"' 5000);                          _lastNotification = Utils.TickCount + 5000;                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Cassiopeia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Cassiopeia.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("FlashUltNotification"' true).GetValue<bool>() && SummonerManager.Flash_Ready() && R.IsReady())              {                  var enemy = HeroManager.Enemies.Where(x => R.IsKillable(x)).ToList();                    if (!enemy.Any())                      return;                    foreach (var x in enemy.Where(x => x.IsValidTarget(R2.Range)))                  {                      if (Utils.TickCount - _lastNotification > 0)                      {                          Notifications.AddNotification(x.CharData.BaseSkinName + " Flash Ult Killable"' 5000);                          _lastNotification = Utils.TickCount + 5000;                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,SetSpells,The following statement contains a magic number: SpellManager.Q = new Spell(SpellSlot.Q' 800);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,SetSpells,The following statement contains a magic number: SpellManager.Q.SetSkillshot(.25f' 60f' 1700' false' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,SetSpells,The following statement contains a magic number: SpellManager.Q2 = new Spell(SpellSlot.Q' 1050);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,SetSpells,The following statement contains a magic number: SpellManager.Q2.SetSkillshot(.5f' 120f' 1200' false' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,SetSpells,The following statement contains a magic number: SpellManager.W = new Spell(SpellSlot.W' 1600);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,SetSpells,The following statement contains a magic number: SpellManager.E = new Spell(SpellSlot.E' 325);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,LoadMenu,The following statement contains a magic number: {                  key.AddItem(new MenuItem("ComboActive"' "Combo!"' true).SetValue(new KeyBind(32' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle)));                  key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("Flee"' "Flee!"' true).SetValue(new KeyBind("Z".ToCharArray()[0]' KeyBindType.Press)));                  //add to menu                  menu.AddSubMenu(key);              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Auto_Q_Slow"' "Auto Q Slow"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Dashing"' "Auto Q Dashing"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Immobile"' "Auto Q Immobile"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("W_On_Cc"' "W On top of Hard CC"' true).SetValue(true));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_If_UnderTurret"' "E Under Enemy Turret"' true).SetValue(new KeyBind("H".ToCharArray()[0]' KeyBindType.Toggle)));                      eMenu.AddItem(new MenuItem("Do_Not_E"' "Do not E if >= Enemies Around location"' true).SetValue(new Slider(3' 1' 5)));                      eMenu.AddItem(new MenuItem("Do_Not_E_HP"' "Do not E if HP <= %"' true).SetValue(new Slider(20)));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Safe_Net"' "R If Player Take % dmg > in Past 4 Seconds"' true).SetValue(new Slider(60)));                      rMenu.AddItem(new MenuItem("R_Safe_Net2"' "R If Player HP <= %"' true).SetValue(new Slider(10)));                      rMenu.AddItem(new MenuItem("R_AOE"' "AOE R If Will Hit Holding Combo"' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("R_AOE_Global"' "AOE R If Will Hit Global check"' true).SetValue(new Slider(4' 1' 5)));                      rMenu.AddItem(new MenuItem("No_R_Aoe"' "Do not AOE if old HP <= %"' true).SetValue(new Slider(15)));                      rMenu.AddItem(new MenuItem("R_On_Killable"' "Ult Enemy If they are Killable with combo"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("R_KS"' "Smart R KS"' true).SetValue(true));                      spellMenu.AddSubMenu(rMenu);                  }                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Auto_Q_Slow"' "Auto Q Slow"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Dashing"' "Auto Q Dashing"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Immobile"' "Auto Q Immobile"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("W_On_Cc"' "W On top of Hard CC"' true).SetValue(true));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_If_UnderTurret"' "E Under Enemy Turret"' true).SetValue(new KeyBind("H".ToCharArray()[0]' KeyBindType.Toggle)));                      eMenu.AddItem(new MenuItem("Do_Not_E"' "Do not E if >= Enemies Around location"' true).SetValue(new Slider(3' 1' 5)));                      eMenu.AddItem(new MenuItem("Do_Not_E_HP"' "Do not E if HP <= %"' true).SetValue(new Slider(20)));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Safe_Net"' "R If Player Take % dmg > in Past 4 Seconds"' true).SetValue(new Slider(60)));                      rMenu.AddItem(new MenuItem("R_Safe_Net2"' "R If Player HP <= %"' true).SetValue(new Slider(10)));                      rMenu.AddItem(new MenuItem("R_AOE"' "AOE R If Will Hit Holding Combo"' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("R_AOE_Global"' "AOE R If Will Hit Global check"' true).SetValue(new Slider(4' 1' 5)));                      rMenu.AddItem(new MenuItem("No_R_Aoe"' "Do not AOE if old HP <= %"' true).SetValue(new Slider(15)));                      rMenu.AddItem(new MenuItem("R_On_Killable"' "Ult Enemy If they are Killable with combo"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("R_KS"' "Smart R KS"' true).SetValue(true));                      spellMenu.AddSubMenu(rMenu);                  }                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Auto_Q_Slow"' "Auto Q Slow"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Dashing"' "Auto Q Dashing"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Immobile"' "Auto Q Immobile"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("W_On_Cc"' "W On top of Hard CC"' true).SetValue(true));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_If_UnderTurret"' "E Under Enemy Turret"' true).SetValue(new KeyBind("H".ToCharArray()[0]' KeyBindType.Toggle)));                      eMenu.AddItem(new MenuItem("Do_Not_E"' "Do not E if >= Enemies Around location"' true).SetValue(new Slider(3' 1' 5)));                      eMenu.AddItem(new MenuItem("Do_Not_E_HP"' "Do not E if HP <= %"' true).SetValue(new Slider(20)));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Safe_Net"' "R If Player Take % dmg > in Past 4 Seconds"' true).SetValue(new Slider(60)));                      rMenu.AddItem(new MenuItem("R_Safe_Net2"' "R If Player HP <= %"' true).SetValue(new Slider(10)));                      rMenu.AddItem(new MenuItem("R_AOE"' "AOE R If Will Hit Holding Combo"' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("R_AOE_Global"' "AOE R If Will Hit Global check"' true).SetValue(new Slider(4' 1' 5)));                      rMenu.AddItem(new MenuItem("No_R_Aoe"' "Do not AOE if old HP <= %"' true).SetValue(new Slider(15)));                      rMenu.AddItem(new MenuItem("R_On_Killable"' "Ult Enemy If they are Killable with combo"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("R_KS"' "Smart R KS"' true).SetValue(true));                      spellMenu.AddSubMenu(rMenu);                  }                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Auto_Q_Slow"' "Auto Q Slow"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Dashing"' "Auto Q Dashing"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Immobile"' "Auto Q Immobile"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("W_On_Cc"' "W On top of Hard CC"' true).SetValue(true));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_If_UnderTurret"' "E Under Enemy Turret"' true).SetValue(new KeyBind("H".ToCharArray()[0]' KeyBindType.Toggle)));                      eMenu.AddItem(new MenuItem("Do_Not_E"' "Do not E if >= Enemies Around location"' true).SetValue(new Slider(3' 1' 5)));                      eMenu.AddItem(new MenuItem("Do_Not_E_HP"' "Do not E if HP <= %"' true).SetValue(new Slider(20)));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Safe_Net"' "R If Player Take % dmg > in Past 4 Seconds"' true).SetValue(new Slider(60)));                      rMenu.AddItem(new MenuItem("R_Safe_Net2"' "R If Player HP <= %"' true).SetValue(new Slider(10)));                      rMenu.AddItem(new MenuItem("R_AOE"' "AOE R If Will Hit Holding Combo"' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("R_AOE_Global"' "AOE R If Will Hit Global check"' true).SetValue(new Slider(4' 1' 5)));                      rMenu.AddItem(new MenuItem("No_R_Aoe"' "Do not AOE if old HP <= %"' true).SetValue(new Slider(15)));                      rMenu.AddItem(new MenuItem("R_On_Killable"' "Ult Enemy If they are Killable with combo"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("R_KS"' "Smart R KS"' true).SetValue(true));                      spellMenu.AddSubMenu(rMenu);                  }                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Auto_Q_Slow"' "Auto Q Slow"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Dashing"' "Auto Q Dashing"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Immobile"' "Auto Q Immobile"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("W_On_Cc"' "W On top of Hard CC"' true).SetValue(true));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_If_UnderTurret"' "E Under Enemy Turret"' true).SetValue(new KeyBind("H".ToCharArray()[0]' KeyBindType.Toggle)));                      eMenu.AddItem(new MenuItem("Do_Not_E"' "Do not E if >= Enemies Around location"' true).SetValue(new Slider(3' 1' 5)));                      eMenu.AddItem(new MenuItem("Do_Not_E_HP"' "Do not E if HP <= %"' true).SetValue(new Slider(20)));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Safe_Net"' "R If Player Take % dmg > in Past 4 Seconds"' true).SetValue(new Slider(60)));                      rMenu.AddItem(new MenuItem("R_Safe_Net2"' "R If Player HP <= %"' true).SetValue(new Slider(10)));                      rMenu.AddItem(new MenuItem("R_AOE"' "AOE R If Will Hit Holding Combo"' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("R_AOE_Global"' "AOE R If Will Hit Global check"' true).SetValue(new Slider(4' 1' 5)));                      rMenu.AddItem(new MenuItem("No_R_Aoe"' "Do not AOE if old HP <= %"' true).SetValue(new Slider(15)));                      rMenu.AddItem(new MenuItem("R_On_Killable"' "Ult Enemy If they are Killable with combo"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("R_KS"' "Smart R KS"' true).SetValue(true));                      spellMenu.AddSubMenu(rMenu);                  }                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Auto_Q_Slow"' "Auto Q Slow"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Dashing"' "Auto Q Dashing"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Immobile"' "Auto Q Immobile"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("W_On_Cc"' "W On top of Hard CC"' true).SetValue(true));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_If_UnderTurret"' "E Under Enemy Turret"' true).SetValue(new KeyBind("H".ToCharArray()[0]' KeyBindType.Toggle)));                      eMenu.AddItem(new MenuItem("Do_Not_E"' "Do not E if >= Enemies Around location"' true).SetValue(new Slider(3' 1' 5)));                      eMenu.AddItem(new MenuItem("Do_Not_E_HP"' "Do not E if HP <= %"' true).SetValue(new Slider(20)));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Safe_Net"' "R If Player Take % dmg > in Past 4 Seconds"' true).SetValue(new Slider(60)));                      rMenu.AddItem(new MenuItem("R_Safe_Net2"' "R If Player HP <= %"' true).SetValue(new Slider(10)));                      rMenu.AddItem(new MenuItem("R_AOE"' "AOE R If Will Hit Holding Combo"' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("R_AOE_Global"' "AOE R If Will Hit Global check"' true).SetValue(new Slider(4' 1' 5)));                      rMenu.AddItem(new MenuItem("No_R_Aoe"' "Do not AOE if old HP <= %"' true).SetValue(new Slider(15)));                      rMenu.AddItem(new MenuItem("R_On_Killable"' "Ult Enemy If they are Killable with combo"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("R_KS"' "Smart R KS"' true).SetValue(true));                      spellMenu.AddSubMenu(rMenu);                  }                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Auto_Q_Slow"' "Auto Q Slow"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Dashing"' "Auto Q Dashing"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Immobile"' "Auto Q Immobile"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("W_On_Cc"' "W On top of Hard CC"' true).SetValue(true));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_If_UnderTurret"' "E Under Enemy Turret"' true).SetValue(new KeyBind("H".ToCharArray()[0]' KeyBindType.Toggle)));                      eMenu.AddItem(new MenuItem("Do_Not_E"' "Do not E if >= Enemies Around location"' true).SetValue(new Slider(3' 1' 5)));                      eMenu.AddItem(new MenuItem("Do_Not_E_HP"' "Do not E if HP <= %"' true).SetValue(new Slider(20)));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Safe_Net"' "R If Player Take % dmg > in Past 4 Seconds"' true).SetValue(new Slider(60)));                      rMenu.AddItem(new MenuItem("R_Safe_Net2"' "R If Player HP <= %"' true).SetValue(new Slider(10)));                      rMenu.AddItem(new MenuItem("R_AOE"' "AOE R If Will Hit Holding Combo"' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("R_AOE_Global"' "AOE R If Will Hit Global check"' true).SetValue(new Slider(4' 1' 5)));                      rMenu.AddItem(new MenuItem("No_R_Aoe"' "Do not AOE if old HP <= %"' true).SetValue(new Slider(15)));                      rMenu.AddItem(new MenuItem("R_On_Killable"' "Ult Enemy If they are Killable with combo"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("R_KS"' "Smart R KS"' true).SetValue(true));                      spellMenu.AddSubMenu(rMenu);                  }                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Auto_Q_Slow"' "Auto Q Slow"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Dashing"' "Auto Q Dashing"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Immobile"' "Auto Q Immobile"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("W_On_Cc"' "W On top of Hard CC"' true).SetValue(true));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_If_UnderTurret"' "E Under Enemy Turret"' true).SetValue(new KeyBind("H".ToCharArray()[0]' KeyBindType.Toggle)));                      eMenu.AddItem(new MenuItem("Do_Not_E"' "Do not E if >= Enemies Around location"' true).SetValue(new Slider(3' 1' 5)));                      eMenu.AddItem(new MenuItem("Do_Not_E_HP"' "Do not E if HP <= %"' true).SetValue(new Slider(20)));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Safe_Net"' "R If Player Take % dmg > in Past 4 Seconds"' true).SetValue(new Slider(60)));                      rMenu.AddItem(new MenuItem("R_Safe_Net2"' "R If Player HP <= %"' true).SetValue(new Slider(10)));                      rMenu.AddItem(new MenuItem("R_AOE"' "AOE R If Will Hit Holding Combo"' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("R_AOE_Global"' "AOE R If Will Hit Global check"' true).SetValue(new Slider(4' 1' 5)));                      rMenu.AddItem(new MenuItem("No_R_Aoe"' "Do not AOE if old HP <= %"' true).SetValue(new Slider(15)));                      rMenu.AddItem(new MenuItem("R_On_Killable"' "Ult Enemy If they are Killable with combo"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("R_KS"' "Smart R KS"' true).SetValue(true));                      spellMenu.AddSubMenu(rMenu);                  }                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Auto_Q_Slow"' "Auto Q Slow"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Dashing"' "Auto Q Dashing"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Immobile"' "Auto Q Immobile"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("W_On_Cc"' "W On top of Hard CC"' true).SetValue(true));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_If_UnderTurret"' "E Under Enemy Turret"' true).SetValue(new KeyBind("H".ToCharArray()[0]' KeyBindType.Toggle)));                      eMenu.AddItem(new MenuItem("Do_Not_E"' "Do not E if >= Enemies Around location"' true).SetValue(new Slider(3' 1' 5)));                      eMenu.AddItem(new MenuItem("Do_Not_E_HP"' "Do not E if HP <= %"' true).SetValue(new Slider(20)));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Safe_Net"' "R If Player Take % dmg > in Past 4 Seconds"' true).SetValue(new Slider(60)));                      rMenu.AddItem(new MenuItem("R_Safe_Net2"' "R If Player HP <= %"' true).SetValue(new Slider(10)));                      rMenu.AddItem(new MenuItem("R_AOE"' "AOE R If Will Hit Holding Combo"' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("R_AOE_Global"' "AOE R If Will Hit Global check"' true).SetValue(new Slider(4' 1' 5)));                      rMenu.AddItem(new MenuItem("No_R_Aoe"' "Do not AOE if old HP <= %"' true).SetValue(new Slider(15)));                      rMenu.AddItem(new MenuItem("R_On_Killable"' "Ult Enemy If they are Killable with combo"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("R_KS"' "Smart R KS"' true).SetValue(true));                      spellMenu.AddSubMenu(rMenu);                  }                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Auto_Q_Slow"' "Auto Q Slow"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Dashing"' "Auto Q Dashing"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Auto_Q_Immobile"' "Auto Q Immobile"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("W_On_Cc"' "W On top of Hard CC"' true).SetValue(true));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_If_UnderTurret"' "E Under Enemy Turret"' true).SetValue(new KeyBind("H".ToCharArray()[0]' KeyBindType.Toggle)));                      eMenu.AddItem(new MenuItem("Do_Not_E"' "Do not E if >= Enemies Around location"' true).SetValue(new Slider(3' 1' 5)));                      eMenu.AddItem(new MenuItem("Do_Not_E_HP"' "Do not E if HP <= %"' true).SetValue(new Slider(20)));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_Safe_Net"' "R If Player Take % dmg > in Past 4 Seconds"' true).SetValue(new Slider(60)));                      rMenu.AddItem(new MenuItem("R_Safe_Net2"' "R If Player HP <= %"' true).SetValue(new Slider(10)));                      rMenu.AddItem(new MenuItem("R_AOE"' "AOE R If Will Hit Holding Combo"' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("R_AOE_Global"' "AOE R If Will Hit Global check"' true).SetValue(new Slider(4' 1' 5)));                      rMenu.AddItem(new MenuItem("No_R_Aoe"' "Do not AOE if old HP <= %"' true).SetValue(new Slider(15)));                      rMenu.AddItem(new MenuItem("R_On_Killable"' "Ult Enemy If they are Killable with combo"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("R_KS"' "Smart R KS"' true).SetValue(true));                      spellMenu.AddSubMenu(rMenu);                  }                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,LoadMenu,The following statement contains a magic number: {                  harass.AddItem(new MenuItem("UseQHarass"' "Use Q"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseWHarass"' "Use W"' true).SetValue(false));                  harass.AddItem(new MenuItem("UseEHarass"' "Use E"' true).SetValue(true));                  harass.AddSubMenu(HitChanceManager.AddHitChanceMenuHarass(true' false' true' false));                  ManaManager.AddManaManagertoMenu(harass' "Harass"' 50);                  menu.AddSubMenu(harass);              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(true));                  farm.AddItem(new MenuItem("MinFarm"' "Min Minion >= "' true).SetValue(new Slider(3' 1' 6)));                  ManaManager.AddManaManagertoMenu(farm' "LaneClear"' 50);                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(true));                  farm.AddItem(new MenuItem("MinFarm"' "Min Minion >= "' true).SetValue(new Slider(3' 1' 6)));                  ManaManager.AddManaManagertoMenu(farm' "LaneClear"' 50);                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(true));                  farm.AddItem(new MenuItem("MinFarm"' "Min Minion >= "' true).SetValue(new Slider(3' 1' 6)));                  ManaManager.AddManaManagertoMenu(farm' "LaneClear"' 50);                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,PassiveDmg,The following statement contains a magic number: return Player.CalcDamage(target' Damage.DamageType.Magical'                  15+ (12 * Player.Level) + Player.TotalMagicalDamage * .7f);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,PassiveDmg,The following statement contains a magic number: return Player.CalcDamage(target' Damage.DamageType.Magical'                  15+ (12 * Player.Level) + Player.TotalMagicalDamage * .7f);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,Qdmg,The following statement contains a magic number: return Player.CalcDamage(target' Damage.DamageType.Magical'                  new double[] { 60' 75' 90' 105' 120 }[Q.Level - 1] + Player.TotalMagicalDamage * .2f);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,Qdmg,The following statement contains a magic number: return Player.CalcDamage(target' Damage.DamageType.Magical'                  new double[] { 60' 75' 90' 105' 120 }[Q.Level - 1] + Player.TotalMagicalDamage * .2f);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,Qdmg,The following statement contains a magic number: return Player.CalcDamage(target' Damage.DamageType.Magical'                  new double[] { 60' 75' 90' 105' 120 }[Q.Level - 1] + Player.TotalMagicalDamage * .2f);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,Qdmg,The following statement contains a magic number: return Player.CalcDamage(target' Damage.DamageType.Magical'                  new double[] { 60' 75' 90' 105' 120 }[Q.Level - 1] + Player.TotalMagicalDamage * .2f);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,Qdmg,The following statement contains a magic number: return Player.CalcDamage(target' Damage.DamageType.Magical'                  new double[] { 60' 75' 90' 105' 120 }[Q.Level - 1] + Player.TotalMagicalDamage * .2f);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,Q2Dmg,The following statement contains a magic number: return Player.CalcDamage(target' Damage.DamageType.Magical'                  new double[] { 60' 85' 110' 135' 160 }[Q.Level - 1] + Player.TotalMagicalDamage * .6f);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,Q2Dmg,The following statement contains a magic number: return Player.CalcDamage(target' Damage.DamageType.Magical'                  new double[] { 60' 85' 110' 135' 160 }[Q.Level - 1] + Player.TotalMagicalDamage * .6f);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,Q2Dmg,The following statement contains a magic number: return Player.CalcDamage(target' Damage.DamageType.Magical'                  new double[] { 60' 85' 110' 135' 160 }[Q.Level - 1] + Player.TotalMagicalDamage * .6f);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,Q2Dmg,The following statement contains a magic number: return Player.CalcDamage(target' Damage.DamageType.Magical'                  new double[] { 60' 85' 110' 135' 160 }[Q.Level - 1] + Player.TotalMagicalDamage * .6f);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,Q2Dmg,The following statement contains a magic number: return Player.CalcDamage(target' Damage.DamageType.Magical'                  new double[] { 60' 85' 110' 135' 160 }[Q.Level - 1] + Player.TotalMagicalDamage * .6f);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,Edmg,The following statement contains a magic number: return Player.CalcDamage(target' Damage.DamageType.Magical'                  new double[] { 50' 80' 110' 140' 170 }[E.Level - 1] + Player.TotalMagicalDamage * .2f);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,Edmg,The following statement contains a magic number: return Player.CalcDamage(target' Damage.DamageType.Magical'                  new double[] { 50' 80' 110' 140' 170 }[E.Level - 1] + Player.TotalMagicalDamage * .2f);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,Edmg,The following statement contains a magic number: return Player.CalcDamage(target' Damage.DamageType.Magical'                  new double[] { 50' 80' 110' 140' 170 }[E.Level - 1] + Player.TotalMagicalDamage * .2f);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,Edmg,The following statement contains a magic number: return Player.CalcDamage(target' Damage.DamageType.Magical'                  new double[] { 50' 80' 110' 140' 170 }[E.Level - 1] + Player.TotalMagicalDamage * .2f);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,Edmg,The following statement contains a magic number: return Player.CalcDamage(target' Damage.DamageType.Magical'                  new double[] { 50' 80' 110' 140' 170 }[E.Level - 1] + Player.TotalMagicalDamage * .2f);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,Rdmg,The following statement contains a magic number: return Player.CalcDamage(target' Damage.DamageType.Magical'                  new double[] { 200' 350' 500 }[R.Level - 1] + Player.TotalMagicalDamage * 1.3f);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,Rdmg,The following statement contains a magic number: return Player.CalcDamage(target' Damage.DamageType.Magical'                  new double[] { 200' 350' 500 }[R.Level - 1] + Player.TotalMagicalDamage * 1.3f);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,Rdmg,The following statement contains a magic number: return Player.CalcDamage(target' Damage.DamageType.Magical'                  new double[] { 200' 350' 500 }[R.Level - 1] + Player.TotalMagicalDamage * 1.3f);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,GetComboDamage,The following statement contains a magic number: return (float)(comboDamage + Player.GetAutoAttackDamage(target) * 2);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var dmg = GetComboDamage(target);                  ItemManager.Target = target;                    //see if killable                  if (dmg > target.Health - 50)                      ItemManager.KillableTarget = true;                    ItemManager.UseTargetted = true;              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,UseSpells,The following statement contains a magic number: if (useE && E.IsReady())              {                  var etarget = TargetSelector.GetTarget(E.Range + 425' TargetSelector.DamageType.Magical);                    if (etarget.IsValidTarget(E.Range + 425))                  {                      var vec = Player.ServerPosition.Extend(etarget.ServerPosition' E.Range - 10);                        if (vec.Distance(target.ServerPosition) < 425 && ShouldE(vec))                      {                          E.Cast(vec);                          Utility.DelayAction.Add((int)E.Delay * 1000 + Game.Ping' () => Player.IssueOrder(GameObjectOrder.AttackUnit' etarget));                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,UseSpells,The following statement contains a magic number: if (useE && E.IsReady())              {                  var etarget = TargetSelector.GetTarget(E.Range + 425' TargetSelector.DamageType.Magical);                    if (etarget.IsValidTarget(E.Range + 425))                  {                      var vec = Player.ServerPosition.Extend(etarget.ServerPosition' E.Range - 10);                        if (vec.Distance(target.ServerPosition) < 425 && ShouldE(vec))                      {                          E.Cast(vec);                          Utility.DelayAction.Add((int)E.Delay * 1000 + Game.Ping' () => Player.IssueOrder(GameObjectOrder.AttackUnit' etarget));                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,UseSpells,The following statement contains a magic number: if (useE && E.IsReady())              {                  var etarget = TargetSelector.GetTarget(E.Range + 425' TargetSelector.DamageType.Magical);                    if (etarget.IsValidTarget(E.Range + 425))                  {                      var vec = Player.ServerPosition.Extend(etarget.ServerPosition' E.Range - 10);                        if (vec.Distance(target.ServerPosition) < 425 && ShouldE(vec))                      {                          E.Cast(vec);                          Utility.DelayAction.Add((int)E.Delay * 1000 + Game.Ping' () => Player.IssueOrder(GameObjectOrder.AttackUnit' etarget));                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,UseSpells,The following statement contains a magic number: if (useE && E.IsReady())              {                  var etarget = TargetSelector.GetTarget(E.Range + 425' TargetSelector.DamageType.Magical);                    if (etarget.IsValidTarget(E.Range + 425))                  {                      var vec = Player.ServerPosition.Extend(etarget.ServerPosition' E.Range - 10);                        if (vec.Distance(target.ServerPosition) < 425 && ShouldE(vec))                      {                          E.Cast(vec);                          Utility.DelayAction.Add((int)E.Delay * 1000 + Game.Ping' () => Player.IssueOrder(GameObjectOrder.AttackUnit' etarget));                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,UseSpells,The following statement contains a magic number: if (useE && E.IsReady())              {                  var etarget = TargetSelector.GetTarget(E.Range + 425' TargetSelector.DamageType.Magical);                    if (etarget.IsValidTarget(E.Range + 425))                  {                      var vec = Player.ServerPosition.Extend(etarget.ServerPosition' E.Range - 10);                        if (vec.Distance(target.ServerPosition) < 425 && ShouldE(vec))                      {                          E.Cast(vec);                          Utility.DelayAction.Add((int)E.Delay * 1000 + Game.Ping' () => Player.IssueOrder(GameObjectOrder.AttackUnit' etarget));                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,UseSpells,The following statement contains a magic number: if (useR && R.IsReady() && _ekkoPast != null)              {                  if (menu.Item("R_On_Killable"' true).GetValue<bool>())                  {                      if ((from enemie in HeroManager.Enemies.Where(x => x.IsValidTarget()).Where(x => Prediction.GetPrediction(x' 25f).UnitPosition.Distance(_ekkoPast.ServerPosition) < 400)                            let dmg = GetComboDamage(enemie) where dmg > enemie.Health select enemie).Any())                      {                          R.Cast();                          return;                      }                  }                    if (AoeR())                      R.Cast();                                }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,ShouldE,The following statement contains a magic number: if (vec.CountEnemiesInRange(600) >= maxEnemies)                  return false;
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,Flee,The following statement contains a magic number: foreach (var target in HeroManager.Enemies.Where(x => x.IsValidTarget(Q.Range)))              {                  if (Q.IsReady() && useQ)                      Q.Cast(target);                    if (W.IsReady() && useW)                  {                      Player.ServerPosition.Extend(Game.CursorPos' 400);                  }              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,SafetyR,The following statement contains a magic number: if (_pastStatus.ContainsKey(Utils.TickCount - 3900))              {                  float burst = _pastStatus[Utils.TickCount - 3900] - Player.HealthPercent;                    if (burst >= burstHpAllowed)                  {                      R.Cast();                  }                    //Console.WriteLine("Burst: " + burst);              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,SafetyR,The following statement contains a magic number: if (_pastStatus.ContainsKey(Utils.TickCount - 3900))              {                  float burst = _pastStatus[Utils.TickCount - 3900] - Player.HealthPercent;                    if (burst >= burstHpAllowed)                  {                      R.Cast();                  }                    //Console.WriteLine("Burst: " + burst);              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,AoeR,The following statement contains a magic number: if (_pastStatus.Keys.ToList().Where(x => x == 3900).Any(value => value <= minHp))              {                  return false;              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,TargetHitWithR,The following statement contains a magic number: return HeroManager.Enemies.Where(x => x.IsValidTarget()).Count(x => _ekkoPast.Distance(Prediction.GetPrediction(x' .2f).UnitPosition) < 400);
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,CheckKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(Q2.Range)).OrderByDescending(GetComboDamage))              {                  //Q                  if (Player.Distance(target) <= Q.Range && Qdmg(target) > target.Health && Q.IsReady())                  {                      Q.Cast(target);                      return;                  }                    //Q2                  if (Player.Distance(target) <= Q2.Range && TotalQDmg(target) > target.Health && Q.IsReady() && Q2.GetPrediction(target).Hitchance >= HitChance.VeryHigh)                  {                      Q2.Cast(target);                      return;                  }                    //E                  if (Player.Distance(target) <= E.Range + 475 && Edmg(target) > target.Health && E.IsReady())                  {                      var vec = Player.ServerPosition.Extend(target.ServerPosition' E.Range - 10);                      E.Cast(vec);                      var target1 = target;                      Utility.DelayAction.Add((int)E.Delay * 1000 + Game.Ping' () => Player.IssueOrder(GameObjectOrder.AttackUnit' target1));                      return;                  }                    //R                  if(R.IsReady() && _ekkoPast != null)                  if (_ekkoPast.Distance(Prediction.GetPrediction(target' .2f).UnitPosition) <= R.Width && Rdmg(target) > target.Health)                  {                      R.Cast();                      return;                  }              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,CheckKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(Q2.Range)).OrderByDescending(GetComboDamage))              {                  //Q                  if (Player.Distance(target) <= Q.Range && Qdmg(target) > target.Health && Q.IsReady())                  {                      Q.Cast(target);                      return;                  }                    //Q2                  if (Player.Distance(target) <= Q2.Range && TotalQDmg(target) > target.Health && Q.IsReady() && Q2.GetPrediction(target).Hitchance >= HitChance.VeryHigh)                  {                      Q2.Cast(target);                      return;                  }                    //E                  if (Player.Distance(target) <= E.Range + 475 && Edmg(target) > target.Health && E.IsReady())                  {                      var vec = Player.ServerPosition.Extend(target.ServerPosition' E.Range - 10);                      E.Cast(vec);                      var target1 = target;                      Utility.DelayAction.Add((int)E.Delay * 1000 + Game.Ping' () => Player.IssueOrder(GameObjectOrder.AttackUnit' target1));                      return;                  }                    //R                  if(R.IsReady() && _ekkoPast != null)                  if (_ekkoPast.Distance(Prediction.GetPrediction(target' .2f).UnitPosition) <= R.Width && Rdmg(target) > target.Health)                  {                      R.Cast();                      return;                  }              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,CheckKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(Q2.Range)).OrderByDescending(GetComboDamage))              {                  //Q                  if (Player.Distance(target) <= Q.Range && Qdmg(target) > target.Health && Q.IsReady())                  {                      Q.Cast(target);                      return;                  }                    //Q2                  if (Player.Distance(target) <= Q2.Range && TotalQDmg(target) > target.Health && Q.IsReady() && Q2.GetPrediction(target).Hitchance >= HitChance.VeryHigh)                  {                      Q2.Cast(target);                      return;                  }                    //E                  if (Player.Distance(target) <= E.Range + 475 && Edmg(target) > target.Health && E.IsReady())                  {                      var vec = Player.ServerPosition.Extend(target.ServerPosition' E.Range - 10);                      E.Cast(vec);                      var target1 = target;                      Utility.DelayAction.Add((int)E.Delay * 1000 + Game.Ping' () => Player.IssueOrder(GameObjectOrder.AttackUnit' target1));                      return;                  }                    //R                  if(R.IsReady() && _ekkoPast != null)                  if (_ekkoPast.Distance(Prediction.GetPrediction(target' .2f).UnitPosition) <= R.Width && Rdmg(target) > target.Health)                  {                      R.Cast();                      return;                  }              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,UpdateOldStatus,The following statement contains a magic number: foreach (var remove in _pastStatus.Keys.Where(x => Utils.TickCount - x > 4000).ToList())              {                  _pastStatus.Remove(remove);                  //Console.WriteLine("removing" + _pastStatus.Count);              }
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,ObjAiHeroOnOnDamage,The following statement contains a magic number: if (!sender.IsMe || !R.IsReady() || args.Damage > 45)                  return;
Magic Number,xSaliceResurrected.Mid,Ekko,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Ekko.cs,Drawing_OnDraw,The following statement contains a magic number: if (R.IsReady() && _ekkoPast != null)              {                  Vector2 wts = Drawing.WorldToScreen(Player.Position);                 Drawing.DrawText(wts[0] - 20' wts[1]' Color.White' "Enemies Hit with R: " + TargetHitWithR());              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,SetSpells,The following statement contains a magic number: SpellManager.Q = new Spell(SpellSlot.Q' 1050);
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,SetSpells,The following statement contains a magic number: SpellManager.QExtend = new Spell(SpellSlot.Q' 1650);
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,SetSpells,The following statement contains a magic number: SpellManager.Q2 = new Spell(SpellSlot.Q' 600);
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,SetSpells,The following statement contains a magic number: SpellManager.W2 = new Spell(SpellSlot.W' 350);
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,SetSpells,The following statement contains a magic number: SpellManager.E = new Spell(SpellSlot.E' 650);
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,SetSpells,The following statement contains a magic number: SpellManager.E2 = new Spell(SpellSlot.E' 240);
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,SetSpells,The following statement contains a magic number: SpellManager.Q.SetSkillshot(0.25f' 79' 1200' true' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,SetSpells,The following statement contains a magic number: SpellManager.Q.SetSkillshot(0.25f' 79' 1200' true' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,SetSpells,The following statement contains a magic number: SpellManager.QExtend.SetSkillshot(0.35f' 98' 1600' true' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,SetSpells,The following statement contains a magic number: SpellManager.QExtend.SetSkillshot(0.35f' 98' 1600' true' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,SetSpells,The following statement contains a magic number: SpellManager.E.SetSkillshot(0.1f' 120' float.MaxValue' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,LoadMenu,The following statement contains a magic number: {                  harass.AddItem(new MenuItem("UseQHarass"' "Use Q"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseWHarass"' "Use W"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseEHarass"' "Use E"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseQHarassHam"' "Use Q Hammer"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseWHarassHam"' "Use W Hammer"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseEHarassHam"' "Use E Hammer"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseRHarass"' "Use R to switch"' true).SetValue(true));                  harass.AddSubMenu(HitChanceManager.AddHitChanceMenuHarass(true' false' false' false));                  ManaManager.AddManaManagertoMenu(harass' "Harass"' 60);                  menu.AddSubMenu(harass);              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,LoadMenu,The following statement contains a magic number: {                  //aoe                  misc.AddSubMenu(AoeSpellManager.AddHitChanceMenuCombo(false' false' false' false' true));                  misc.AddItem(new MenuItem("UseInt"' "Use E to Interrupt"' true).SetValue(true));                  misc.AddItem(new MenuItem("UseGap"' "Use E for GapCloser"' true).SetValue(true));                  misc.AddItem(new MenuItem("forceGate"' "Force Gate After Q"' true).SetValue(false));                  misc.AddItem(new MenuItem("gatePlace"' "Gate Distance"' true).SetValue(new Slider(300' 50' 600)));                  misc.AddItem(new MenuItem("UseQAlways"' "Use Q When E onCD"' true).SetValue(true));                  misc.AddItem(new MenuItem("autoE"' "EPushInCombo HP < %"' true).SetValue(new Slider(20)));                  misc.AddItem(new MenuItem("smartKS"' "Smart KS"' true).SetValue(true));                  menu.AddSubMenu(misc);              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,LoadMenu,The following statement contains a magic number: {                  //aoe                  misc.AddSubMenu(AoeSpellManager.AddHitChanceMenuCombo(false' false' false' false' true));                  misc.AddItem(new MenuItem("UseInt"' "Use E to Interrupt"' true).SetValue(true));                  misc.AddItem(new MenuItem("UseGap"' "Use E for GapCloser"' true).SetValue(true));                  misc.AddItem(new MenuItem("forceGate"' "Force Gate After Q"' true).SetValue(false));                  misc.AddItem(new MenuItem("gatePlace"' "Gate Distance"' true).SetValue(new Slider(300' 50' 600)));                  misc.AddItem(new MenuItem("UseQAlways"' "Use Q When E onCD"' true).SetValue(true));                  misc.AddItem(new MenuItem("autoE"' "EPushInCombo HP < %"' true).SetValue(new Slider(20)));                  misc.AddItem(new MenuItem("smartKS"' "Smart KS"' true).SetValue(true));                  menu.AddSubMenu(misc);              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,LoadMenu,The following statement contains a magic number: {                  //aoe                  misc.AddSubMenu(AoeSpellManager.AddHitChanceMenuCombo(false' false' false' false' true));                  misc.AddItem(new MenuItem("UseInt"' "Use E to Interrupt"' true).SetValue(true));                  misc.AddItem(new MenuItem("UseGap"' "Use E for GapCloser"' true).SetValue(true));                  misc.AddItem(new MenuItem("forceGate"' "Force Gate After Q"' true).SetValue(false));                  misc.AddItem(new MenuItem("gatePlace"' "Gate Distance"' true).SetValue(new Slider(300' 50' 600)));                  misc.AddItem(new MenuItem("UseQAlways"' "Use Q When E onCD"' true).SetValue(true));                  misc.AddItem(new MenuItem("autoE"' "EPushInCombo HP < %"' true).SetValue(new Slider(20)));                  misc.AddItem(new MenuItem("smartKS"' "Smart KS"' true).SetValue(true));                  menu.AddSubMenu(misc);              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,LoadMenu,The following statement contains a magic number: {                  //aoe                  misc.AddSubMenu(AoeSpellManager.AddHitChanceMenuCombo(false' false' false' false' true));                  misc.AddItem(new MenuItem("UseInt"' "Use E to Interrupt"' true).SetValue(true));                  misc.AddItem(new MenuItem("UseGap"' "Use E for GapCloser"' true).SetValue(true));                  misc.AddItem(new MenuItem("forceGate"' "Force Gate After Q"' true).SetValue(false));                  misc.AddItem(new MenuItem("gatePlace"' "Gate Distance"' true).SetValue(new Slider(300' 50' 600)));                  misc.AddItem(new MenuItem("UseQAlways"' "Use Q When E onCD"' true).SetValue(true));                  misc.AddItem(new MenuItem("autoE"' "EPushInCombo HP < %"' true).SetValue(new Slider(20)));                  misc.AddItem(new MenuItem("smartKS"' "Smart KS"' true).SetValue(true));                  menu.AddSubMenu(misc);              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q Cannon"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_QExtend"' "Draw Q Cannon Extended"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E Cannon"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_Q2"' "Draw Q Hammer"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E2"' "Draw E Hammer"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("drawcds"' "Draw Cooldowns"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q Cannon"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_QExtend"' "Draw Q Cannon Extended"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E Cannon"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_Q2"' "Draw Q Hammer"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E2"' "Draw E Hammer"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("drawcds"' "Draw Cooldowns"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q Cannon"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_QExtend"' "Draw Q Cannon Extended"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E Cannon"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_Q2"' "Draw Q Hammer"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E2"' "Draw E Hammer"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("drawcds"' "Draw Cooldowns"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q Cannon"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_QExtend"' "Draw Q Cannon Extended"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E Cannon"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_Q2"' "Draw Q Hammer"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E2"' "Draw E Hammer"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("drawcds"' "Draw Cooldowns"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,GetComboDamage,The following statement contains a magic number: if (CanQcd == 0 && CanEcd == 0 && Q.Level > 0 && E.Level > 0)                  damage += Player.GetSpellDamage(enemy' SpellSlot.Q) * 1.4;              else if (CanQcd == 0 && Q.Level > 0)                  damage += Player.GetSpellDamage(enemy' SpellSlot.Q);
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,GetComboDamage,The following statement contains a magic number: damage += Player.GetAutoAttackDamage(enemy) * 3;
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                    if (qTarget != null)                  {                      if (useQ && CanQcd == 0 && Player.Distance(qTarget.Position) <= QExtend.Range && !HammerTime)                      {                          CastQCannon(qTarget' useE' source);                          return;                      }                  }                    if (HammerTime)                  {                      if (q2Target != null)                      {                          if (useW2 && Player.Distance(q2Target.Position) <= 300 && W.IsReady())                              W.Cast();                            if (useQ2 && Player.Distance(q2Target.Position) <= Q2.Range + q2Target.BoundingRadius && Q2.IsReady())                              Q2.Cast(q2Target);                      }                      if (e2Target != null)                      {                          if (useE2 && ECheck(e2Target' useQ' useW) && Player.Distance(e2Target.Position) <= E2.Range + e2Target.BoundingRadius && E2.IsReady())                              E2.Cast(q2Target);                      }                  }                    var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      var dmg = GetComboDamage(itemTarget);                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }                    //form switch check                  if (useR)                      SwitchFormCheck(q2Target' useQ' useW' useQ2' useW2' useE2);              }              else if (source == "Harass" && ManaManager.HasMana(source))              {                  if (qTarget != null)                  {                      if (useQ && CanQcd == 0 && Player.Distance(qTarget.Position) <= QExtend.Range && !HammerTime)                      {                          CastQCannon(qTarget' useE' source);                          return;                      }                  }                  if (HammerTime)                  {                      if (q2Target != null)                      {                          if (useW2 && Player.Distance(q2Target.Position) <= 300 && W.IsReady())                              W.Cast();                            if (useQ2 && Player.Distance(q2Target.Position) <= Q2.Range + q2Target.BoundingRadius && Q2.IsReady())                              Q2.Cast(q2Target);                      }                        if (q2Target != null)                      {                          if (useE2 && Player.Distance(q2Target.Position) <= E2.Range + e2Target.BoundingRadius && E2.IsReady())                              E2.Cast(q2Target);                      }                  }                    //form switch check                  if (useR && q2Target != null)                      SwitchFormCheck(q2Target' useQ' useW' useQ2' useW2' useE2);              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                    if (qTarget != null)                  {                      if (useQ && CanQcd == 0 && Player.Distance(qTarget.Position) <= QExtend.Range && !HammerTime)                      {                          CastQCannon(qTarget' useE' source);                          return;                      }                  }                    if (HammerTime)                  {                      if (q2Target != null)                      {                          if (useW2 && Player.Distance(q2Target.Position) <= 300 && W.IsReady())                              W.Cast();                            if (useQ2 && Player.Distance(q2Target.Position) <= Q2.Range + q2Target.BoundingRadius && Q2.IsReady())                              Q2.Cast(q2Target);                      }                      if (e2Target != null)                      {                          if (useE2 && ECheck(e2Target' useQ' useW) && Player.Distance(e2Target.Position) <= E2.Range + e2Target.BoundingRadius && E2.IsReady())                              E2.Cast(q2Target);                      }                  }                    var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      var dmg = GetComboDamage(itemTarget);                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }                    //form switch check                  if (useR)                      SwitchFormCheck(q2Target' useQ' useW' useQ2' useW2' useE2);              }              else if (source == "Harass" && ManaManager.HasMana(source))              {                  if (qTarget != null)                  {                      if (useQ && CanQcd == 0 && Player.Distance(qTarget.Position) <= QExtend.Range && !HammerTime)                      {                          CastQCannon(qTarget' useE' source);                          return;                      }                  }                  if (HammerTime)                  {                      if (q2Target != null)                      {                          if (useW2 && Player.Distance(q2Target.Position) <= 300 && W.IsReady())                              W.Cast();                            if (useQ2 && Player.Distance(q2Target.Position) <= Q2.Range + q2Target.BoundingRadius && Q2.IsReady())                              Q2.Cast(q2Target);                      }                        if (q2Target != null)                      {                          if (useE2 && Player.Distance(q2Target.Position) <= E2.Range + e2Target.BoundingRadius && E2.IsReady())                              E2.Cast(q2Target);                      }                  }                    //form switch check                  if (useR && q2Target != null)                      SwitchFormCheck(q2Target' useQ' useW' useQ2' useW2' useE2);              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                    if (qTarget != null)                  {                      if (useQ && CanQcd == 0 && Player.Distance(qTarget.Position) <= QExtend.Range && !HammerTime)                      {                          CastQCannon(qTarget' useE' source);                          return;                      }                  }                    if (HammerTime)                  {                      if (q2Target != null)                      {                          if (useW2 && Player.Distance(q2Target.Position) <= 300 && W.IsReady())                              W.Cast();                            if (useQ2 && Player.Distance(q2Target.Position) <= Q2.Range + q2Target.BoundingRadius && Q2.IsReady())                              Q2.Cast(q2Target);                      }                      if (e2Target != null)                      {                          if (useE2 && ECheck(e2Target' useQ' useW) && Player.Distance(e2Target.Position) <= E2.Range + e2Target.BoundingRadius && E2.IsReady())                              E2.Cast(q2Target);                      }                  }                    var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      var dmg = GetComboDamage(itemTarget);                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }                    //form switch check                  if (useR)                      SwitchFormCheck(q2Target' useQ' useW' useQ2' useW2' useE2);              }              else if (source == "Harass" && ManaManager.HasMana(source))              {                  if (qTarget != null)                  {                      if (useQ && CanQcd == 0 && Player.Distance(qTarget.Position) <= QExtend.Range && !HammerTime)                      {                          CastQCannon(qTarget' useE' source);                          return;                      }                  }                  if (HammerTime)                  {                      if (q2Target != null)                      {                          if (useW2 && Player.Distance(q2Target.Position) <= 300 && W.IsReady())                              W.Cast();                            if (useQ2 && Player.Distance(q2Target.Position) <= Q2.Range + q2Target.BoundingRadius && Q2.IsReady())                              Q2.Cast(q2Target);                      }                        if (q2Target != null)                      {                          if (useE2 && Player.Distance(q2Target.Position) <= E2.Range + e2Target.BoundingRadius && E2.IsReady())                              E2.Cast(q2Target);                      }                  }                    //form switch check                  if (useR && q2Target != null)                      SwitchFormCheck(q2Target' useQ' useW' useQ2' useW2' useE2);              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                    if (qTarget != null)                  {                      if (useQ && CanQcd == 0 && Player.Distance(qTarget.Position) <= QExtend.Range && !HammerTime)                      {                          CastQCannon(qTarget' useE' source);                          return;                      }                  }                    if (HammerTime)                  {                      if (q2Target != null)                      {                          if (useW2 && Player.Distance(q2Target.Position) <= 300 && W.IsReady())                              W.Cast();                            if (useQ2 && Player.Distance(q2Target.Position) <= Q2.Range + q2Target.BoundingRadius && Q2.IsReady())                              Q2.Cast(q2Target);                      }                      if (e2Target != null)                      {                          if (useE2 && ECheck(e2Target' useQ' useW) && Player.Distance(e2Target.Position) <= E2.Range + e2Target.BoundingRadius && E2.IsReady())                              E2.Cast(q2Target);                      }                  }                    var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      var dmg = GetComboDamage(itemTarget);                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }                    //form switch check                  if (useR)                      SwitchFormCheck(q2Target' useQ' useW' useQ2' useW2' useE2);              }              else if (source == "Harass" && ManaManager.HasMana(source))              {                  if (qTarget != null)                  {                      if (useQ && CanQcd == 0 && Player.Distance(qTarget.Position) <= QExtend.Range && !HammerTime)                      {                          CastQCannon(qTarget' useE' source);                          return;                      }                  }                  if (HammerTime)                  {                      if (q2Target != null)                      {                          if (useW2 && Player.Distance(q2Target.Position) <= 300 && W.IsReady())                              W.Cast();                            if (useQ2 && Player.Distance(q2Target.Position) <= Q2.Range + q2Target.BoundingRadius && Q2.IsReady())                              Q2.Cast(q2Target);                      }                        if (q2Target != null)                      {                          if (useE2 && Player.Distance(q2Target.Position) <= E2.Range + e2Target.BoundingRadius && E2.IsReady())                              E2.Cast(q2Target);                      }                  }                    //form switch check                  if (useR && q2Target != null)                      SwitchFormCheck(q2Target' useQ' useW' useQ2' useW2' useE2);              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,WallStun,The following statement contains a magic number: var pushedPos = pred.CastPosition + Vector3.Normalize(pred.CastPosition - Player.ServerPosition) * 350;
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,KsCheck,The following statement contains a magic number: foreach (Obj_AI_Hero enemy in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(QExtend.Range) && x.IsEnemy && !x.IsDead).OrderByDescending(GetComboDamage))              {                  //Q                  if ((Player.GetSpellDamage(enemy' SpellSlot.Q) - 20) > enemy.Health && CanQcd == 0 && Player.Distance(enemy.ServerPosition) <= Q.Range)                  {                      if (HammerTime && R.IsReady())                          R.Cast();                        if (!HammerTime && Q.IsReady())                          Q.Cast(enemy);                  }                    //QE                  if ((Player.GetSpellDamage(enemy' SpellSlot.Q) * 1.4 - 20) > enemy.Health && CanQcd == 0 && CanEcd == 0 && Player.Distance(enemy.ServerPosition) <= QExtend.Range)                  {                      if (HammerTime && R.IsReady())                          R.Cast();                        if (!HammerTime)                          CastQCannon(enemy' true' "Null");                  }                    //Hammer QE                  if ((Player.GetSpellDamage(enemy' SpellSlot.E) + Player.GetSpellDamage(enemy' SpellSlot.Q' 1) - 20) > enemy.Health                      && _hamEcd == 0 && _hamQcd == 0 && Player.Distance(enemy.ServerPosition) <= Q2.Range + enemy.BoundingRadius)                  {                      if (!HammerTime && R.IsReady())                          R.Cast();                        if (HammerTime && Q2.IsReady() && E2.IsReady())                      {                          Q2.Cast(enemy);                          E2.Cast(enemy);                          return;                      }                  }                    //Hammer Q                  if ((Player.GetSpellDamage(enemy' SpellSlot.Q' 1) - 20) > enemy.Health && _hamQcd == 0 && Player.Distance(enemy.ServerPosition) <= Q2.Range + enemy.BoundingRadius)                  {                      if (!HammerTime && R.IsReady())                          R.Cast();                        if (HammerTime && Q2.IsReady())                      {                          Q2.Cast(enemy);                          return;                      }                  }                    //Hammer E                  if ((Player.GetSpellDamage(enemy' SpellSlot.E) - 20) > enemy.Health && _hamEcd == 0 && Player.Distance(enemy.ServerPosition) <= E2.Range + enemy.BoundingRadius)                  {                      if (!HammerTime && R.IsReady() && enemy.Health > 80)                          R.Cast();                        if (HammerTime && E2.IsReady())                      {                          E2.Cast(enemy);                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,KsCheck,The following statement contains a magic number: foreach (Obj_AI_Hero enemy in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(QExtend.Range) && x.IsEnemy && !x.IsDead).OrderByDescending(GetComboDamage))              {                  //Q                  if ((Player.GetSpellDamage(enemy' SpellSlot.Q) - 20) > enemy.Health && CanQcd == 0 && Player.Distance(enemy.ServerPosition) <= Q.Range)                  {                      if (HammerTime && R.IsReady())                          R.Cast();                        if (!HammerTime && Q.IsReady())                          Q.Cast(enemy);                  }                    //QE                  if ((Player.GetSpellDamage(enemy' SpellSlot.Q) * 1.4 - 20) > enemy.Health && CanQcd == 0 && CanEcd == 0 && Player.Distance(enemy.ServerPosition) <= QExtend.Range)                  {                      if (HammerTime && R.IsReady())                          R.Cast();                        if (!HammerTime)                          CastQCannon(enemy' true' "Null");                  }                    //Hammer QE                  if ((Player.GetSpellDamage(enemy' SpellSlot.E) + Player.GetSpellDamage(enemy' SpellSlot.Q' 1) - 20) > enemy.Health                      && _hamEcd == 0 && _hamQcd == 0 && Player.Distance(enemy.ServerPosition) <= Q2.Range + enemy.BoundingRadius)                  {                      if (!HammerTime && R.IsReady())                          R.Cast();                        if (HammerTime && Q2.IsReady() && E2.IsReady())                      {                          Q2.Cast(enemy);                          E2.Cast(enemy);                          return;                      }                  }                    //Hammer Q                  if ((Player.GetSpellDamage(enemy' SpellSlot.Q' 1) - 20) > enemy.Health && _hamQcd == 0 && Player.Distance(enemy.ServerPosition) <= Q2.Range + enemy.BoundingRadius)                  {                      if (!HammerTime && R.IsReady())                          R.Cast();                        if (HammerTime && Q2.IsReady())                      {                          Q2.Cast(enemy);                          return;                      }                  }                    //Hammer E                  if ((Player.GetSpellDamage(enemy' SpellSlot.E) - 20) > enemy.Health && _hamEcd == 0 && Player.Distance(enemy.ServerPosition) <= E2.Range + enemy.BoundingRadius)                  {                      if (!HammerTime && R.IsReady() && enemy.Health > 80)                          R.Cast();                        if (HammerTime && E2.IsReady())                      {                          E2.Cast(enemy);                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,KsCheck,The following statement contains a magic number: foreach (Obj_AI_Hero enemy in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(QExtend.Range) && x.IsEnemy && !x.IsDead).OrderByDescending(GetComboDamage))              {                  //Q                  if ((Player.GetSpellDamage(enemy' SpellSlot.Q) - 20) > enemy.Health && CanQcd == 0 && Player.Distance(enemy.ServerPosition) <= Q.Range)                  {                      if (HammerTime && R.IsReady())                          R.Cast();                        if (!HammerTime && Q.IsReady())                          Q.Cast(enemy);                  }                    //QE                  if ((Player.GetSpellDamage(enemy' SpellSlot.Q) * 1.4 - 20) > enemy.Health && CanQcd == 0 && CanEcd == 0 && Player.Distance(enemy.ServerPosition) <= QExtend.Range)                  {                      if (HammerTime && R.IsReady())                          R.Cast();                        if (!HammerTime)                          CastQCannon(enemy' true' "Null");                  }                    //Hammer QE                  if ((Player.GetSpellDamage(enemy' SpellSlot.E) + Player.GetSpellDamage(enemy' SpellSlot.Q' 1) - 20) > enemy.Health                      && _hamEcd == 0 && _hamQcd == 0 && Player.Distance(enemy.ServerPosition) <= Q2.Range + enemy.BoundingRadius)                  {                      if (!HammerTime && R.IsReady())                          R.Cast();                        if (HammerTime && Q2.IsReady() && E2.IsReady())                      {                          Q2.Cast(enemy);                          E2.Cast(enemy);                          return;                      }                  }                    //Hammer Q                  if ((Player.GetSpellDamage(enemy' SpellSlot.Q' 1) - 20) > enemy.Health && _hamQcd == 0 && Player.Distance(enemy.ServerPosition) <= Q2.Range + enemy.BoundingRadius)                  {                      if (!HammerTime && R.IsReady())                          R.Cast();                        if (HammerTime && Q2.IsReady())                      {                          Q2.Cast(enemy);                          return;                      }                  }                    //Hammer E                  if ((Player.GetSpellDamage(enemy' SpellSlot.E) - 20) > enemy.Health && _hamEcd == 0 && Player.Distance(enemy.ServerPosition) <= E2.Range + enemy.BoundingRadius)                  {                      if (!HammerTime && R.IsReady() && enemy.Health > 80)                          R.Cast();                        if (HammerTime && E2.IsReady())                      {                          E2.Cast(enemy);                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,KsCheck,The following statement contains a magic number: foreach (Obj_AI_Hero enemy in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(QExtend.Range) && x.IsEnemy && !x.IsDead).OrderByDescending(GetComboDamage))              {                  //Q                  if ((Player.GetSpellDamage(enemy' SpellSlot.Q) - 20) > enemy.Health && CanQcd == 0 && Player.Distance(enemy.ServerPosition) <= Q.Range)                  {                      if (HammerTime && R.IsReady())                          R.Cast();                        if (!HammerTime && Q.IsReady())                          Q.Cast(enemy);                  }                    //QE                  if ((Player.GetSpellDamage(enemy' SpellSlot.Q) * 1.4 - 20) > enemy.Health && CanQcd == 0 && CanEcd == 0 && Player.Distance(enemy.ServerPosition) <= QExtend.Range)                  {                      if (HammerTime && R.IsReady())                          R.Cast();                        if (!HammerTime)                          CastQCannon(enemy' true' "Null");                  }                    //Hammer QE                  if ((Player.GetSpellDamage(enemy' SpellSlot.E) + Player.GetSpellDamage(enemy' SpellSlot.Q' 1) - 20) > enemy.Health                      && _hamEcd == 0 && _hamQcd == 0 && Player.Distance(enemy.ServerPosition) <= Q2.Range + enemy.BoundingRadius)                  {                      if (!HammerTime && R.IsReady())                          R.Cast();                        if (HammerTime && Q2.IsReady() && E2.IsReady())                      {                          Q2.Cast(enemy);                          E2.Cast(enemy);                          return;                      }                  }                    //Hammer Q                  if ((Player.GetSpellDamage(enemy' SpellSlot.Q' 1) - 20) > enemy.Health && _hamQcd == 0 && Player.Distance(enemy.ServerPosition) <= Q2.Range + enemy.BoundingRadius)                  {                      if (!HammerTime && R.IsReady())                          R.Cast();                        if (HammerTime && Q2.IsReady())                      {                          Q2.Cast(enemy);                          return;                      }                  }                    //Hammer E                  if ((Player.GetSpellDamage(enemy' SpellSlot.E) - 20) > enemy.Health && _hamEcd == 0 && Player.Distance(enemy.ServerPosition) <= E2.Range + enemy.BoundingRadius)                  {                      if (!HammerTime && R.IsReady() && enemy.Health > 80)                          R.Cast();                        if (HammerTime && E2.IsReady())                      {                          E2.Cast(enemy);                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,KsCheck,The following statement contains a magic number: foreach (Obj_AI_Hero enemy in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(QExtend.Range) && x.IsEnemy && !x.IsDead).OrderByDescending(GetComboDamage))              {                  //Q                  if ((Player.GetSpellDamage(enemy' SpellSlot.Q) - 20) > enemy.Health && CanQcd == 0 && Player.Distance(enemy.ServerPosition) <= Q.Range)                  {                      if (HammerTime && R.IsReady())                          R.Cast();                        if (!HammerTime && Q.IsReady())                          Q.Cast(enemy);                  }                    //QE                  if ((Player.GetSpellDamage(enemy' SpellSlot.Q) * 1.4 - 20) > enemy.Health && CanQcd == 0 && CanEcd == 0 && Player.Distance(enemy.ServerPosition) <= QExtend.Range)                  {                      if (HammerTime && R.IsReady())                          R.Cast();                        if (!HammerTime)                          CastQCannon(enemy' true' "Null");                  }                    //Hammer QE                  if ((Player.GetSpellDamage(enemy' SpellSlot.E) + Player.GetSpellDamage(enemy' SpellSlot.Q' 1) - 20) > enemy.Health                      && _hamEcd == 0 && _hamQcd == 0 && Player.Distance(enemy.ServerPosition) <= Q2.Range + enemy.BoundingRadius)                  {                      if (!HammerTime && R.IsReady())                          R.Cast();                        if (HammerTime && Q2.IsReady() && E2.IsReady())                      {                          Q2.Cast(enemy);                          E2.Cast(enemy);                          return;                      }                  }                    //Hammer Q                  if ((Player.GetSpellDamage(enemy' SpellSlot.Q' 1) - 20) > enemy.Health && _hamQcd == 0 && Player.Distance(enemy.ServerPosition) <= Q2.Range + enemy.BoundingRadius)                  {                      if (!HammerTime && R.IsReady())                          R.Cast();                        if (HammerTime && Q2.IsReady())                      {                          Q2.Cast(enemy);                          return;                      }                  }                    //Hammer E                  if ((Player.GetSpellDamage(enemy' SpellSlot.E) - 20) > enemy.Health && _hamEcd == 0 && Player.Distance(enemy.ServerPosition) <= E2.Range + enemy.BoundingRadius)                  {                      if (!HammerTime && R.IsReady() && enemy.Health > 80)                          R.Cast();                        if (HammerTime && E2.IsReady())                      {                          E2.Cast(enemy);                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,KsCheck,The following statement contains a magic number: foreach (Obj_AI_Hero enemy in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(QExtend.Range) && x.IsEnemy && !x.IsDead).OrderByDescending(GetComboDamage))              {                  //Q                  if ((Player.GetSpellDamage(enemy' SpellSlot.Q) - 20) > enemy.Health && CanQcd == 0 && Player.Distance(enemy.ServerPosition) <= Q.Range)                  {                      if (HammerTime && R.IsReady())                          R.Cast();                        if (!HammerTime && Q.IsReady())                          Q.Cast(enemy);                  }                    //QE                  if ((Player.GetSpellDamage(enemy' SpellSlot.Q) * 1.4 - 20) > enemy.Health && CanQcd == 0 && CanEcd == 0 && Player.Distance(enemy.ServerPosition) <= QExtend.Range)                  {                      if (HammerTime && R.IsReady())                          R.Cast();                        if (!HammerTime)                          CastQCannon(enemy' true' "Null");                  }                    //Hammer QE                  if ((Player.GetSpellDamage(enemy' SpellSlot.E) + Player.GetSpellDamage(enemy' SpellSlot.Q' 1) - 20) > enemy.Health                      && _hamEcd == 0 && _hamQcd == 0 && Player.Distance(enemy.ServerPosition) <= Q2.Range + enemy.BoundingRadius)                  {                      if (!HammerTime && R.IsReady())                          R.Cast();                        if (HammerTime && Q2.IsReady() && E2.IsReady())                      {                          Q2.Cast(enemy);                          E2.Cast(enemy);                          return;                      }                  }                    //Hammer Q                  if ((Player.GetSpellDamage(enemy' SpellSlot.Q' 1) - 20) > enemy.Health && _hamQcd == 0 && Player.Distance(enemy.ServerPosition) <= Q2.Range + enemy.BoundingRadius)                  {                      if (!HammerTime && R.IsReady())                          R.Cast();                        if (HammerTime && Q2.IsReady())                      {                          Q2.Cast(enemy);                          return;                      }                  }                    //Hammer E                  if ((Player.GetSpellDamage(enemy' SpellSlot.E) - 20) > enemy.Health && _hamEcd == 0 && Player.Distance(enemy.ServerPosition) <= E2.Range + enemy.BoundingRadius)                  {                      if (!HammerTime && R.IsReady() && enemy.Health > 80)                          R.Cast();                        if (HammerTime && E2.IsReady())                      {                          E2.Cast(enemy);                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,KsCheck,The following statement contains a magic number: foreach (Obj_AI_Hero enemy in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(QExtend.Range) && x.IsEnemy && !x.IsDead).OrderByDescending(GetComboDamage))              {                  //Q                  if ((Player.GetSpellDamage(enemy' SpellSlot.Q) - 20) > enemy.Health && CanQcd == 0 && Player.Distance(enemy.ServerPosition) <= Q.Range)                  {                      if (HammerTime && R.IsReady())                          R.Cast();                        if (!HammerTime && Q.IsReady())                          Q.Cast(enemy);                  }                    //QE                  if ((Player.GetSpellDamage(enemy' SpellSlot.Q) * 1.4 - 20) > enemy.Health && CanQcd == 0 && CanEcd == 0 && Player.Distance(enemy.ServerPosition) <= QExtend.Range)                  {                      if (HammerTime && R.IsReady())                          R.Cast();                        if (!HammerTime)                          CastQCannon(enemy' true' "Null");                  }                    //Hammer QE                  if ((Player.GetSpellDamage(enemy' SpellSlot.E) + Player.GetSpellDamage(enemy' SpellSlot.Q' 1) - 20) > enemy.Health                      && _hamEcd == 0 && _hamQcd == 0 && Player.Distance(enemy.ServerPosition) <= Q2.Range + enemy.BoundingRadius)                  {                      if (!HammerTime && R.IsReady())                          R.Cast();                        if (HammerTime && Q2.IsReady() && E2.IsReady())                      {                          Q2.Cast(enemy);                          E2.Cast(enemy);                          return;                      }                  }                    //Hammer Q                  if ((Player.GetSpellDamage(enemy' SpellSlot.Q' 1) - 20) > enemy.Health && _hamQcd == 0 && Player.Distance(enemy.ServerPosition) <= Q2.Range + enemy.BoundingRadius)                  {                      if (!HammerTime && R.IsReady())                          R.Cast();                        if (HammerTime && Q2.IsReady())                      {                          Q2.Cast(enemy);                          return;                      }                  }                    //Hammer E                  if ((Player.GetSpellDamage(enemy' SpellSlot.E) - 20) > enemy.Health && _hamEcd == 0 && Player.Distance(enemy.ServerPosition) <= E2.Range + enemy.BoundingRadius)                  {                      if (!HammerTime && R.IsReady() && enemy.Health > 80)                          R.Cast();                        if (HammerTime && E2.IsReady())                      {                          E2.Cast(enemy);                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,SwitchFormCheck,The following statement contains a magic number: if (target.Health > 80)              {                  //switch to hammer                  if ((CanQcd != 0 || !useQ) &&                      (_canWcd != 0 && !HyperCharged() || !useW) && R.IsReady() &&                       HammerAllReady() && !HammerTime && Player.Distance(target.ServerPosition) < 650 &&                       (useQ2 || useW2 || useE2))                  {                      //Game.PrintChat("Hammer Time");                      R.Cast();                      return;                  }              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,SwitchFormCheck,The following statement contains a magic number: if (target.Health > 80)              {                  //switch to hammer                  if ((CanQcd != 0 || !useQ) &&                      (_canWcd != 0 && !HyperCharged() || !useW) && R.IsReady() &&                       HammerAllReady() && !HammerTime && Player.Distance(target.ServerPosition) < 650 &&                       (useQ2 || useW2 || useE2))                  {                      //Game.PrintChat("Hammer Time");                      R.Cast();                      return;                  }              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,CastQCannon,The following statement contains a magic number: if (tarPred.Hitchance >= HitChanceManager.GetQHitChance(source) && CanQcd == 0 && CanEcd == 0 && useE)              {                  var gateVector = Player.Position + Vector3.Normalize(target.ServerPosition - Player.Position) * gateDis;                    if (Player.Distance(tarPred.CastPosition) < QExtend.Range + 100)                  {                      if (E.IsReady() && QExtend.IsReady())                      {                          E.Cast(gateVector);                          QExtend.Cast(tarPred.CastPosition);                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,AfterAttack,The following statement contains a magic number: if (unit.IsMe && !HammerTime)              {                  if (menu.Item("ComboActive"' true).GetValue<KeyBind>().Active)                  {                      if (_canWcd == 0 && Player.Distance(target.Position) < 600 && !HammerTime && W.Level > 0 && W.IsReady())                          if (useWCombo)                          {                              OrbwalkManager.ResetAutoAttackTimer();                              W.Cast();                          }                  }                    if (menu.Item("HarassActive"' true).GetValue<KeyBind>().Active || menu.Item("HarassActiveT"' true).GetValue<KeyBind>().Active)                  {                      if (_canWcd == 0 && Player.Distance(target.Position) < 600 && !HammerTime && W.Level > 0 && W.IsReady() && target is Obj_AI_Hero)                          if (useWHarass)                          {                              OrbwalkManager.ResetAutoAttackTimer();                              W.Cast();                          }                  }              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,AfterAttack,The following statement contains a magic number: if (unit.IsMe && !HammerTime)              {                  if (menu.Item("ComboActive"' true).GetValue<KeyBind>().Active)                  {                      if (_canWcd == 0 && Player.Distance(target.Position) < 600 && !HammerTime && W.Level > 0 && W.IsReady())                          if (useWCombo)                          {                              OrbwalkManager.ResetAutoAttackTimer();                              W.Cast();                          }                  }                    if (menu.Item("HarassActive"' true).GetValue<KeyBind>().Active || menu.Item("HarassActiveT"' true).GetValue<KeyBind>().Active)                  {                      if (_canWcd == 0 && Player.Distance(target.Position) < 600 && !HammerTime && W.Level > 0 && W.IsReady() && target is Obj_AI_Hero)                          if (useWHarass)                          {                              OrbwalkManager.ResetAutoAttackTimer();                              W.Cast();                          }                  }              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("drawcds"' true).GetValue<bool>())              {                  var wts = Drawing.WorldToScreen(Player.Position);                  if (HammerTime)                  {                        if (CanQcd == 0)                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.White' "Q Ready");                      else                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.Orange' "Q: " + CanQcd.ToString("0.0"));                      if (_canWcd == 0)                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.White' "W Ready");                      else                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.Orange' "W: " + _canWcd.ToString("0.0"));                      if (CanEcd == 0)                          Drawing.DrawText(wts[0]' wts[1]' Color.White' "E Ready");                      else                          Drawing.DrawText(wts[0]' wts[1]' Color.Orange' "E: " + CanEcd.ToString("0.0"));                    }                  else                  {                      if (_hamQcd == 0)                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.White' "Q Ready");                      else                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.Orange' "Q: " + _hamQcd.ToString("0.0"));                      if (_hamWcd == 0)                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.White' "W Ready");                      else                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.Orange' "W: " + _hamWcd.ToString("0.0"));                      if (_hamEcd == 0)                          Drawing.DrawText(wts[0]' wts[1]' Color.White' "E Ready");                      else                          Drawing.DrawText(wts[0]' wts[1]' Color.Orange' "E: " + _hamEcd.ToString("0.0"));                  }              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("drawcds"' true).GetValue<bool>())              {                  var wts = Drawing.WorldToScreen(Player.Position);                  if (HammerTime)                  {                        if (CanQcd == 0)                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.White' "Q Ready");                      else                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.Orange' "Q: " + CanQcd.ToString("0.0"));                      if (_canWcd == 0)                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.White' "W Ready");                      else                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.Orange' "W: " + _canWcd.ToString("0.0"));                      if (CanEcd == 0)                          Drawing.DrawText(wts[0]' wts[1]' Color.White' "E Ready");                      else                          Drawing.DrawText(wts[0]' wts[1]' Color.Orange' "E: " + CanEcd.ToString("0.0"));                    }                  else                  {                      if (_hamQcd == 0)                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.White' "Q Ready");                      else                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.Orange' "Q: " + _hamQcd.ToString("0.0"));                      if (_hamWcd == 0)                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.White' "W Ready");                      else                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.Orange' "W: " + _hamWcd.ToString("0.0"));                      if (_hamEcd == 0)                          Drawing.DrawText(wts[0]' wts[1]' Color.White' "E Ready");                      else                          Drawing.DrawText(wts[0]' wts[1]' Color.Orange' "E: " + _hamEcd.ToString("0.0"));                  }              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("drawcds"' true).GetValue<bool>())              {                  var wts = Drawing.WorldToScreen(Player.Position);                  if (HammerTime)                  {                        if (CanQcd == 0)                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.White' "Q Ready");                      else                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.Orange' "Q: " + CanQcd.ToString("0.0"));                      if (_canWcd == 0)                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.White' "W Ready");                      else                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.Orange' "W: " + _canWcd.ToString("0.0"));                      if (CanEcd == 0)                          Drawing.DrawText(wts[0]' wts[1]' Color.White' "E Ready");                      else                          Drawing.DrawText(wts[0]' wts[1]' Color.Orange' "E: " + CanEcd.ToString("0.0"));                    }                  else                  {                      if (_hamQcd == 0)                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.White' "Q Ready");                      else                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.Orange' "Q: " + _hamQcd.ToString("0.0"));                      if (_hamWcd == 0)                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.White' "W Ready");                      else                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.Orange' "W: " + _hamWcd.ToString("0.0"));                      if (_hamEcd == 0)                          Drawing.DrawText(wts[0]' wts[1]' Color.White' "E Ready");                      else                          Drawing.DrawText(wts[0]' wts[1]' Color.Orange' "E: " + _hamEcd.ToString("0.0"));                  }              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("drawcds"' true).GetValue<bool>())              {                  var wts = Drawing.WorldToScreen(Player.Position);                  if (HammerTime)                  {                        if (CanQcd == 0)                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.White' "Q Ready");                      else                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.Orange' "Q: " + CanQcd.ToString("0.0"));                      if (_canWcd == 0)                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.White' "W Ready");                      else                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.Orange' "W: " + _canWcd.ToString("0.0"));                      if (CanEcd == 0)                          Drawing.DrawText(wts[0]' wts[1]' Color.White' "E Ready");                      else                          Drawing.DrawText(wts[0]' wts[1]' Color.Orange' "E: " + CanEcd.ToString("0.0"));                    }                  else                  {                      if (_hamQcd == 0)                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.White' "Q Ready");                      else                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.Orange' "Q: " + _hamQcd.ToString("0.0"));                      if (_hamWcd == 0)                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.White' "W Ready");                      else                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.Orange' "W: " + _hamWcd.ToString("0.0"));                      if (_hamEcd == 0)                          Drawing.DrawText(wts[0]' wts[1]' Color.White' "E Ready");                      else                          Drawing.DrawText(wts[0]' wts[1]' Color.Orange' "E: " + _hamEcd.ToString("0.0"));                  }              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("drawcds"' true).GetValue<bool>())              {                  var wts = Drawing.WorldToScreen(Player.Position);                  if (HammerTime)                  {                        if (CanQcd == 0)                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.White' "Q Ready");                      else                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.Orange' "Q: " + CanQcd.ToString("0.0"));                      if (_canWcd == 0)                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.White' "W Ready");                      else                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.Orange' "W: " + _canWcd.ToString("0.0"));                      if (CanEcd == 0)                          Drawing.DrawText(wts[0]' wts[1]' Color.White' "E Ready");                      else                          Drawing.DrawText(wts[0]' wts[1]' Color.Orange' "E: " + CanEcd.ToString("0.0"));                    }                  else                  {                      if (_hamQcd == 0)                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.White' "Q Ready");                      else                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.Orange' "Q: " + _hamQcd.ToString("0.0"));                      if (_hamWcd == 0)                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.White' "W Ready");                      else                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.Orange' "W: " + _hamWcd.ToString("0.0"));                      if (_hamEcd == 0)                          Drawing.DrawText(wts[0]' wts[1]' Color.White' "E Ready");                      else                          Drawing.DrawText(wts[0]' wts[1]' Color.Orange' "E: " + _hamEcd.ToString("0.0"));                  }              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("drawcds"' true).GetValue<bool>())              {                  var wts = Drawing.WorldToScreen(Player.Position);                  if (HammerTime)                  {                        if (CanQcd == 0)                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.White' "Q Ready");                      else                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.Orange' "Q: " + CanQcd.ToString("0.0"));                      if (_canWcd == 0)                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.White' "W Ready");                      else                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.Orange' "W: " + _canWcd.ToString("0.0"));                      if (CanEcd == 0)                          Drawing.DrawText(wts[0]' wts[1]' Color.White' "E Ready");                      else                          Drawing.DrawText(wts[0]' wts[1]' Color.Orange' "E: " + CanEcd.ToString("0.0"));                    }                  else                  {                      if (_hamQcd == 0)                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.White' "Q Ready");                      else                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.Orange' "Q: " + _hamQcd.ToString("0.0"));                      if (_hamWcd == 0)                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.White' "W Ready");                      else                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.Orange' "W: " + _hamWcd.ToString("0.0"));                      if (_hamEcd == 0)                          Drawing.DrawText(wts[0]' wts[1]' Color.White' "E Ready");                      else                          Drawing.DrawText(wts[0]' wts[1]' Color.Orange' "E: " + _hamEcd.ToString("0.0"));                  }              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("drawcds"' true).GetValue<bool>())              {                  var wts = Drawing.WorldToScreen(Player.Position);                  if (HammerTime)                  {                        if (CanQcd == 0)                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.White' "Q Ready");                      else                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.Orange' "Q: " + CanQcd.ToString("0.0"));                      if (_canWcd == 0)                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.White' "W Ready");                      else                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.Orange' "W: " + _canWcd.ToString("0.0"));                      if (CanEcd == 0)                          Drawing.DrawText(wts[0]' wts[1]' Color.White' "E Ready");                      else                          Drawing.DrawText(wts[0]' wts[1]' Color.Orange' "E: " + CanEcd.ToString("0.0"));                    }                  else                  {                      if (_hamQcd == 0)                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.White' "Q Ready");                      else                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.Orange' "Q: " + _hamQcd.ToString("0.0"));                      if (_hamWcd == 0)                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.White' "W Ready");                      else                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.Orange' "W: " + _hamWcd.ToString("0.0"));                      if (_hamEcd == 0)                          Drawing.DrawText(wts[0]' wts[1]' Color.White' "E Ready");                      else                          Drawing.DrawText(wts[0]' wts[1]' Color.Orange' "E: " + _hamEcd.ToString("0.0"));                  }              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("drawcds"' true).GetValue<bool>())              {                  var wts = Drawing.WorldToScreen(Player.Position);                  if (HammerTime)                  {                        if (CanQcd == 0)                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.White' "Q Ready");                      else                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.Orange' "Q: " + CanQcd.ToString("0.0"));                      if (_canWcd == 0)                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.White' "W Ready");                      else                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.Orange' "W: " + _canWcd.ToString("0.0"));                      if (CanEcd == 0)                          Drawing.DrawText(wts[0]' wts[1]' Color.White' "E Ready");                      else                          Drawing.DrawText(wts[0]' wts[1]' Color.Orange' "E: " + CanEcd.ToString("0.0"));                    }                  else                  {                      if (_hamQcd == 0)                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.White' "Q Ready");                      else                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.Orange' "Q: " + _hamQcd.ToString("0.0"));                      if (_hamWcd == 0)                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.White' "W Ready");                      else                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.Orange' "W: " + _hamWcd.ToString("0.0"));                      if (_hamEcd == 0)                          Drawing.DrawText(wts[0]' wts[1]' Color.White' "E Ready");                      else                          Drawing.DrawText(wts[0]' wts[1]' Color.Orange' "E: " + _hamEcd.ToString("0.0"));                  }              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("drawcds"' true).GetValue<bool>())              {                  var wts = Drawing.WorldToScreen(Player.Position);                  if (HammerTime)                  {                        if (CanQcd == 0)                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.White' "Q Ready");                      else                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.Orange' "Q: " + CanQcd.ToString("0.0"));                      if (_canWcd == 0)                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.White' "W Ready");                      else                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.Orange' "W: " + _canWcd.ToString("0.0"));                      if (CanEcd == 0)                          Drawing.DrawText(wts[0]' wts[1]' Color.White' "E Ready");                      else                          Drawing.DrawText(wts[0]' wts[1]' Color.Orange' "E: " + CanEcd.ToString("0.0"));                    }                  else                  {                      if (_hamQcd == 0)                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.White' "Q Ready");                      else                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.Orange' "Q: " + _hamQcd.ToString("0.0"));                      if (_hamWcd == 0)                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.White' "W Ready");                      else                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.Orange' "W: " + _hamWcd.ToString("0.0"));                      if (_hamEcd == 0)                          Drawing.DrawText(wts[0]' wts[1]' Color.White' "E Ready");                      else                          Drawing.DrawText(wts[0]' wts[1]' Color.Orange' "E: " + _hamEcd.ToString("0.0"));                  }              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("drawcds"' true).GetValue<bool>())              {                  var wts = Drawing.WorldToScreen(Player.Position);                  if (HammerTime)                  {                        if (CanQcd == 0)                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.White' "Q Ready");                      else                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.Orange' "Q: " + CanQcd.ToString("0.0"));                      if (_canWcd == 0)                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.White' "W Ready");                      else                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.Orange' "W: " + _canWcd.ToString("0.0"));                      if (CanEcd == 0)                          Drawing.DrawText(wts[0]' wts[1]' Color.White' "E Ready");                      else                          Drawing.DrawText(wts[0]' wts[1]' Color.Orange' "E: " + CanEcd.ToString("0.0"));                    }                  else                  {                      if (_hamQcd == 0)                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.White' "Q Ready");                      else                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.Orange' "Q: " + _hamQcd.ToString("0.0"));                      if (_hamWcd == 0)                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.White' "W Ready");                      else                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.Orange' "W: " + _hamWcd.ToString("0.0"));                      if (_hamEcd == 0)                          Drawing.DrawText(wts[0]' wts[1]' Color.White' "E Ready");                      else                          Drawing.DrawText(wts[0]' wts[1]' Color.Orange' "E: " + _hamEcd.ToString("0.0"));                  }              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("drawcds"' true).GetValue<bool>())              {                  var wts = Drawing.WorldToScreen(Player.Position);                  if (HammerTime)                  {                        if (CanQcd == 0)                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.White' "Q Ready");                      else                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.Orange' "Q: " + CanQcd.ToString("0.0"));                      if (_canWcd == 0)                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.White' "W Ready");                      else                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.Orange' "W: " + _canWcd.ToString("0.0"));                      if (CanEcd == 0)                          Drawing.DrawText(wts[0]' wts[1]' Color.White' "E Ready");                      else                          Drawing.DrawText(wts[0]' wts[1]' Color.Orange' "E: " + CanEcd.ToString("0.0"));                    }                  else                  {                      if (_hamQcd == 0)                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.White' "Q Ready");                      else                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.Orange' "Q: " + _hamQcd.ToString("0.0"));                      if (_hamWcd == 0)                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.White' "W Ready");                      else                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.Orange' "W: " + _hamWcd.ToString("0.0"));                      if (_hamEcd == 0)                          Drawing.DrawText(wts[0]' wts[1]' Color.White' "E Ready");                      else                          Drawing.DrawText(wts[0]' wts[1]' Color.Orange' "E: " + _hamEcd.ToString("0.0"));                  }              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("drawcds"' true).GetValue<bool>())              {                  var wts = Drawing.WorldToScreen(Player.Position);                  if (HammerTime)                  {                        if (CanQcd == 0)                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.White' "Q Ready");                      else                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.Orange' "Q: " + CanQcd.ToString("0.0"));                      if (_canWcd == 0)                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.White' "W Ready");                      else                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.Orange' "W: " + _canWcd.ToString("0.0"));                      if (CanEcd == 0)                          Drawing.DrawText(wts[0]' wts[1]' Color.White' "E Ready");                      else                          Drawing.DrawText(wts[0]' wts[1]' Color.Orange' "E: " + CanEcd.ToString("0.0"));                    }                  else                  {                      if (_hamQcd == 0)                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.White' "Q Ready");                      else                          Drawing.DrawText(wts[0] - 80' wts[1]' Color.Orange' "Q: " + _hamQcd.ToString("0.0"));                      if (_hamWcd == 0)                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.White' "W Ready");                      else                          Drawing.DrawText(wts[0] - 30' wts[1] + 30' Color.Orange' "W: " + _hamWcd.ToString("0.0"));                      if (_hamEcd == 0)                          Drawing.DrawText(wts[0]' wts[1]' Color.White' "E Ready");                      else                          Drawing.DrawText(wts[0]' wts[1]' Color.Orange' "E: " + _hamEcd.ToString("0.0"));                  }              }
Magic Number,xSaliceResurrected.Mid,Jayce,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Jayce.cs,GameObject_OnCreate,The following statement contains a magic number: if (unit == Player.Name && name == "JayceShockBlastMis")              {                  if (menu.Item("forceGate"' true).GetValue<bool>() && CanEcd == 0 && E.IsReady())                  {                      var vec = spell.Position - Vector3.Normalize(Player.ServerPosition - spell.Position) * 100;                      E.Cast(vec);                  }              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadSpell,The following statement contains a magic number: SpellManager.Q = new Spell(SpellSlot.Q' 875);
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadSpell,The following statement contains a magic number: SpellManager.W = new Spell(SpellSlot.W' 1000);
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadSpell,The following statement contains a magic number: SpellManager.E = new Spell(SpellSlot.E' 520);
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The following statement contains a magic number: {                  //Q Menu                  var qMenu = new Menu("QSpell"' "QSpell");                  {                      qMenu.AddItem(new MenuItem("qImmo"' "Auto Q Immobile"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("qDash"' "Auto Q Dashing"' true).SetValue(true));                      spells.AddSubMenu(qMenu);                  }                    //W                  var wMenu = new Menu("WSpell"' "WSpell");                  {                      wMenu.AddItem(new MenuItem("wTower"' "Auto W Enemy in Tower"' true).SetValue(true));                      ManaManager.AddManaManagertoMenu(wMenu' "WMana"' 30);                      spells.AddSubMenu(wMenu);                  }                    //E                  var eMenu = new Menu("ESpell"' "ESpell");                  {                      eMenu.AddItem(new MenuItem("eManaCombo"' "Min Mana Combo"' true).SetValue(new Slider(10)));                      eMenu.AddItem(new MenuItem("eManaHarass"' "Min Mana Harass"' true).SetValue(new Slider(70)));                      eMenu.AddItem(new MenuItem("EDelay"' "E Delay Before Turning Off (Milliseconds)"' true).SetValue(new Slider(100' 0' 2000)));                      spells.AddSubMenu(eMenu);                  }                    //R                  var rMenu = new Menu("RSpell"' "RSpell");                  {                      rMenu.AddItem(new MenuItem("rPing"' "Ping if Enemy Is Killable"' true).SetValue(true));                      spells.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spells);              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The following statement contains a magic number: {                  //Q Menu                  var qMenu = new Menu("QSpell"' "QSpell");                  {                      qMenu.AddItem(new MenuItem("qImmo"' "Auto Q Immobile"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("qDash"' "Auto Q Dashing"' true).SetValue(true));                      spells.AddSubMenu(qMenu);                  }                    //W                  var wMenu = new Menu("WSpell"' "WSpell");                  {                      wMenu.AddItem(new MenuItem("wTower"' "Auto W Enemy in Tower"' true).SetValue(true));                      ManaManager.AddManaManagertoMenu(wMenu' "WMana"' 30);                      spells.AddSubMenu(wMenu);                  }                    //E                  var eMenu = new Menu("ESpell"' "ESpell");                  {                      eMenu.AddItem(new MenuItem("eManaCombo"' "Min Mana Combo"' true).SetValue(new Slider(10)));                      eMenu.AddItem(new MenuItem("eManaHarass"' "Min Mana Harass"' true).SetValue(new Slider(70)));                      eMenu.AddItem(new MenuItem("EDelay"' "E Delay Before Turning Off (Milliseconds)"' true).SetValue(new Slider(100' 0' 2000)));                      spells.AddSubMenu(eMenu);                  }                    //R                  var rMenu = new Menu("RSpell"' "RSpell");                  {                      rMenu.AddItem(new MenuItem("rPing"' "Ping if Enemy Is Killable"' true).SetValue(true));                      spells.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spells);              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The following statement contains a magic number: {                  //Q Menu                  var qMenu = new Menu("QSpell"' "QSpell");                  {                      qMenu.AddItem(new MenuItem("qImmo"' "Auto Q Immobile"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("qDash"' "Auto Q Dashing"' true).SetValue(true));                      spells.AddSubMenu(qMenu);                  }                    //W                  var wMenu = new Menu("WSpell"' "WSpell");                  {                      wMenu.AddItem(new MenuItem("wTower"' "Auto W Enemy in Tower"' true).SetValue(true));                      ManaManager.AddManaManagertoMenu(wMenu' "WMana"' 30);                      spells.AddSubMenu(wMenu);                  }                    //E                  var eMenu = new Menu("ESpell"' "ESpell");                  {                      eMenu.AddItem(new MenuItem("eManaCombo"' "Min Mana Combo"' true).SetValue(new Slider(10)));                      eMenu.AddItem(new MenuItem("eManaHarass"' "Min Mana Harass"' true).SetValue(new Slider(70)));                      eMenu.AddItem(new MenuItem("EDelay"' "E Delay Before Turning Off (Milliseconds)"' true).SetValue(new Slider(100' 0' 2000)));                      spells.AddSubMenu(eMenu);                  }                    //R                  var rMenu = new Menu("RSpell"' "RSpell");                  {                      rMenu.AddItem(new MenuItem("rPing"' "Ping if Enemy Is Killable"' true).SetValue(true));                      spells.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spells);              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The following statement contains a magic number: {                  //Q Menu                  var qMenu = new Menu("QSpell"' "QSpell");                  {                      qMenu.AddItem(new MenuItem("qImmo"' "Auto Q Immobile"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("qDash"' "Auto Q Dashing"' true).SetValue(true));                      spells.AddSubMenu(qMenu);                  }                    //W                  var wMenu = new Menu("WSpell"' "WSpell");                  {                      wMenu.AddItem(new MenuItem("wTower"' "Auto W Enemy in Tower"' true).SetValue(true));                      ManaManager.AddManaManagertoMenu(wMenu' "WMana"' 30);                      spells.AddSubMenu(wMenu);                  }                    //E                  var eMenu = new Menu("ESpell"' "ESpell");                  {                      eMenu.AddItem(new MenuItem("eManaCombo"' "Min Mana Combo"' true).SetValue(new Slider(10)));                      eMenu.AddItem(new MenuItem("eManaHarass"' "Min Mana Harass"' true).SetValue(new Slider(70)));                      eMenu.AddItem(new MenuItem("EDelay"' "E Delay Before Turning Off (Milliseconds)"' true).SetValue(new Slider(100' 0' 2000)));                      spells.AddSubMenu(eMenu);                  }                    //R                  var rMenu = new Menu("RSpell"' "RSpell");                  {                      rMenu.AddItem(new MenuItem("rPing"' "Ping if Enemy Is Killable"' true).SetValue(true));                      spells.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spells);              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The following statement contains a magic number: {                  //Q Menu                  var qMenu = new Menu("QSpell"' "QSpell");                  {                      qMenu.AddItem(new MenuItem("qImmo"' "Auto Q Immobile"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("qDash"' "Auto Q Dashing"' true).SetValue(true));                      spells.AddSubMenu(qMenu);                  }                    //W                  var wMenu = new Menu("WSpell"' "WSpell");                  {                      wMenu.AddItem(new MenuItem("wTower"' "Auto W Enemy in Tower"' true).SetValue(true));                      ManaManager.AddManaManagertoMenu(wMenu' "WMana"' 30);                      spells.AddSubMenu(wMenu);                  }                    //E                  var eMenu = new Menu("ESpell"' "ESpell");                  {                      eMenu.AddItem(new MenuItem("eManaCombo"' "Min Mana Combo"' true).SetValue(new Slider(10)));                      eMenu.AddItem(new MenuItem("eManaHarass"' "Min Mana Harass"' true).SetValue(new Slider(70)));                      eMenu.AddItem(new MenuItem("EDelay"' "E Delay Before Turning Off (Milliseconds)"' true).SetValue(new Slider(100' 0' 2000)));                      spells.AddSubMenu(eMenu);                  }                    //R                  var rMenu = new Menu("RSpell"' "RSpell");                  {                      rMenu.AddItem(new MenuItem("rPing"' "Ping if Enemy Is Killable"' true).SetValue(true));                      spells.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spells);              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The following statement contains a magic number: {                  harass.AddItem(new MenuItem("UseQHarass"' "Use Q"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseWHarass"' "Use W"' true).SetValue(false));                  harass.AddItem(new MenuItem("UseEHarass"' "Use E"' true).SetValue(true));                  ManaManager.AddManaManagertoMenu(harass' "Harass"' 30);                  harass.AddSubMenu(HitChanceManager.AddHitChanceMenuHarass(true' true' false' false));                  menu.AddSubMenu(harass);              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(false));                  farm.AddItem(new MenuItem("UseEFarm"' "Use E"' true).SetValue(false));                  ManaManager.AddManaManagertoMenu(harass' "Farm"' 30);                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("drawUlt"' "Killable With ult"' true).SetValue(true));                  MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("drawUlt"' "Killable With ult"' true).SetValue(true));                  MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("drawUlt"' "Killable With ult"' true).SetValue(true));                  MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("drawUlt"' "Killable With ult"' true).SetValue(true));                  MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("drawUlt"' "Killable With ult"' true).SetValue(true));                  MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("drawUlt"' "Killable With ult"' true).SetValue(true));                  MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("drawUlt"' "Killable With ult"' true).SetValue(true));                  MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("drawUlt"' "Killable With ult"' true).SetValue(true));                  MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("drawUlt"' "Killable With ult"' true).SetValue(true));                  MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("drawUlt"' "Killable With ult"' true).SetValue(true));                  MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("drawUlt"' "Killable With ult"' true).SetValue(true));                  MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("drawUlt"' "Killable With ult"' true).SetValue(true));                  MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("drawUlt"' "Killable With ult"' true).SetValue(true));                  MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("drawUlt"' "Killable With ult"' true).SetValue(true));                  MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("drawUlt"' "Killable With ult"' true).SetValue(true));                  MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawMenu.AddItem(new MenuItem("drawUlt"' "Killable With ult"' true).SetValue(true));                  MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,GetComboDamage,The following statement contains a magic number: if (Q.IsReady())                  damage += Player.GetSpellDamage(enemy' SpellSlot.Q) * 2;
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,GetComboDamage,The following statement contains a magic number: if (E.IsReady())                  damage += Player.GetSpellDamage(enemy' SpellSlot.E) * 2;
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      ItemManager.Target = itemTarget;                        float dmg = GetComboDamage(itemTarget);                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      ItemManager.Target = itemTarget;                        float dmg = GetComboDamage(itemTarget);                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,UseSpells,The following statement contains a magic number: if (useE && E.IsReady() && ESpell.ToggleState == 1 && HasManaForE(source) &&                  Utils.TickCount - E.LastCastAttemptT > 500)              {                  var target = TargetSelector.GetTarget(E.Range' TargetSelector.DamageType.Magical);                    if (!target.IsValidTarget(E.Range))                      return;                    E.Cast();              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,GetUltDmg,The following statement contains a magic number: dmg -= target.HPRegenRate * 3.25;
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,GetUltDmg,The following statement contains a magic number: if (Items.HasItem(3155' target))              {                  dmg = dmg - 250;              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,GetUltDmg,The following statement contains a magic number: if (Items.HasItem(3155' target))              {                  dmg = dmg - 250;              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,GetUltDmg,The following statement contains a magic number: if (Items.HasItem(3156' target))              {                  dmg = dmg - 400;              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,GetUltDmg,The following statement contains a magic number: if (Items.HasItem(3156' target))              {                  dmg = dmg - 400;              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,DrawEnemyKillable,The following statement contains a magic number: foreach (                  var enemy in                      ObjectManager.Get<Obj_AI_Hero>().Where(                              x => x.IsValidTarget()))              {                  if (GetUltDmg(enemy) > enemy.Health - 30)                  {                      if (menu.Item("rPing"' true).GetValue<bool>() && Utils.TickCount - _lastNotification > 5000)                      {                          if (Utils.TickCount - _lastNotification > 0)                          {                              Notifications.AddNotification(enemy.CharData.BaseSkinName + " Is Killable!"' 500);                              _lastNotification = Utils.TickCount + 5000;                          }                        }                      kill++;                  }              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,DrawEnemyKillable,The following statement contains a magic number: foreach (                  var enemy in                      ObjectManager.Get<Obj_AI_Hero>().Where(                              x => x.IsValidTarget()))              {                  if (GetUltDmg(enemy) > enemy.Health - 30)                  {                      if (menu.Item("rPing"' true).GetValue<bool>() && Utils.TickCount - _lastNotification > 5000)                      {                          if (Utils.TickCount - _lastNotification > 0)                          {                              Notifications.AddNotification(enemy.CharData.BaseSkinName + " Is Killable!"' 500);                              _lastNotification = Utils.TickCount + 5000;                          }                        }                      kill++;                  }              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,DrawEnemyKillable,The following statement contains a magic number: foreach (                  var enemy in                      ObjectManager.Get<Obj_AI_Hero>().Where(                              x => x.IsValidTarget()))              {                  if (GetUltDmg(enemy) > enemy.Health - 30)                  {                      if (menu.Item("rPing"' true).GetValue<bool>() && Utils.TickCount - _lastNotification > 5000)                      {                          if (Utils.TickCount - _lastNotification > 0)                          {                              Notifications.AddNotification(enemy.CharData.BaseSkinName + " Is Killable!"' 500);                              _lastNotification = Utils.TickCount + 5000;                          }                        }                      kill++;                  }              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,DrawEnemyKillable,The following statement contains a magic number: foreach (                  var enemy in                      ObjectManager.Get<Obj_AI_Hero>().Where(                              x => x.IsValidTarget()))              {                  if (GetUltDmg(enemy) > enemy.Health - 30)                  {                      if (menu.Item("rPing"' true).GetValue<bool>() && Utils.TickCount - _lastNotification > 5000)                      {                          if (Utils.TickCount - _lastNotification > 0)                          {                              Notifications.AddNotification(enemy.CharData.BaseSkinName + " Is Killable!"' 500);                              _lastNotification = Utils.TickCount + 5000;                          }                        }                      kill++;                  }              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,DrawEnemyKillable,The following statement contains a magic number: if (kill > 0)              {                  Vector2 wts = Drawing.WorldToScreen(Player.Position);                  Drawing.DrawText(wts[0] - 100' wts[1]' Color.Red' "Killable with R: " + kill);              }              else              {                  Vector2 wts = Drawing.WorldToScreen(Player.Position);                  Drawing.DrawText(wts[0] - 100' wts[1]' Color.White' "Killable with R: " + kill);              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,DrawEnemyKillable,The following statement contains a magic number: if (kill > 0)              {                  Vector2 wts = Drawing.WorldToScreen(Player.Position);                  Drawing.DrawText(wts[0] - 100' wts[1]' Color.Red' "Killable with R: " + kill);              }              else              {                  Vector2 wts = Drawing.WorldToScreen(Player.Position);                  Drawing.DrawText(wts[0] - 100' wts[1]' Color.White' "Killable with R: " + kill);              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,CheckUnderTower,The following statement contains a magic number: foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(x => Player.Distance(x.Position) < W.Range && x.IsValidTarget(W.Range) && !x.IsDead && x.IsEnemy && x.IsVisible))              {                  if (ObjectManager.Get<Obj_AI_Turret>().Where(turret => turret != null && turret.IsValid && turret.IsAlly && turret.Health > 0).Any(turret => Vector2.Distance(enemy.Position.To2D()' turret.Position.To2D()) < 750 && W.IsReady()))                  {                      var vec = enemy.ServerPosition +                                Vector3.Normalize(enemy.ServerPosition - Player.ServerPosition) * 100;                        W.Cast(vec);                      return;                  }              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,CheckUnderTower,The following statement contains a magic number: foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>().Where(x => Player.Distance(x.Position) < W.Range && x.IsValidTarget(W.Range) && !x.IsDead && x.IsEnemy && x.IsVisible))              {                  if (ObjectManager.Get<Obj_AI_Turret>().Where(turret => turret != null && turret.IsValid && turret.IsAlly && turret.Health > 0).Any(turret => Vector2.Distance(enemy.Position.To2D()' turret.Position.To2D()) < 750 && W.IsReady()))                  {                      var vec = enemy.ServerPosition +                                Vector3.Normalize(enemy.ServerPosition - Player.ServerPosition) * 100;                        W.Cast(vec);                      return;                  }              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,SmartKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(Q.Range) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage))              {                  //Q                  if (Player.Distance(target.ServerPosition) <= Q.Range &&                      (Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 30)                  {                      if (Q.IsReady())                      {                          Q.Cast(target);                          return;                      }                  }                    //E                  if (Player.Distance(target.ServerPosition) <= E.Range && ESpell.ToggleState == 1 &&                      (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 30)                  {                      if (E.IsReady())                      {                          E.Cast();                          return;                      }                  }                }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,SmartKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(Q.Range) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage))              {                  //Q                  if (Player.Distance(target.ServerPosition) <= Q.Range &&                      (Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 30)                  {                      if (Q.IsReady())                      {                          Q.Cast(target);                          return;                      }                  }                    //E                  if (Player.Distance(target.ServerPosition) <= E.Range && ESpell.ToggleState == 1 &&                      (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 30)                  {                      if (E.IsReady())                      {                          E.Cast();                          return;                      }                  }                }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,CheckEState,The following statement contains a magic number: if (Utils.TickCount - (_lastE + 250) < menu.Item("EDelay"' true).GetValue<Slider>().Value)                  E.Cast();
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LastHitQ,The following statement contains a magic number: if (allMinionsQ.Count > 0)              {                  foreach (var minion in allMinionsQ)                  {                      var health = HealthPrediction.GetHealthPrediction(minion' 700);                        var qPred = Q.GetCircularFarmLocation(allMinionsQ' 210);                        if (qPred.MinionsHit == 1)                      {                          if (Player.GetSpellDamage(minion' SpellSlot.Q) - 15 > health)                              Q.Cast(minion);                      }                      else                      {                          if (Player.GetSpellDamage(minion' SpellSlot.Q' 1) - 15 > health)                              Q.Cast(minion);                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LastHitQ,The following statement contains a magic number: if (allMinionsQ.Count > 0)              {                  foreach (var minion in allMinionsQ)                  {                      var health = HealthPrediction.GetHealthPrediction(minion' 700);                        var qPred = Q.GetCircularFarmLocation(allMinionsQ' 210);                        if (qPred.MinionsHit == 1)                      {                          if (Player.GetSpellDamage(minion' SpellSlot.Q) - 15 > health)                              Q.Cast(minion);                      }                      else                      {                          if (Player.GetSpellDamage(minion' SpellSlot.Q' 1) - 15 > health)                              Q.Cast(minion);                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LastHitQ,The following statement contains a magic number: if (allMinionsQ.Count > 0)              {                  foreach (var minion in allMinionsQ)                  {                      var health = HealthPrediction.GetHealthPrediction(minion' 700);                        var qPred = Q.GetCircularFarmLocation(allMinionsQ' 210);                        if (qPred.MinionsHit == 1)                      {                          if (Player.GetSpellDamage(minion' SpellSlot.Q) - 15 > health)                              Q.Cast(minion);                      }                      else                      {                          if (Player.GetSpellDamage(minion' SpellSlot.Q' 1) - 15 > health)                              Q.Cast(minion);                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Karthus,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Karthus.cs,LastHitQ,The following statement contains a magic number: if (allMinionsQ.Count > 0)              {                  foreach (var minion in allMinionsQ)                  {                      var health = HealthPrediction.GetHealthPrediction(minion' 700);                        var qPred = Q.GetCircularFarmLocation(allMinionsQ' 210);                        if (qPred.MinionsHit == 1)                      {                          if (Player.GetSpellDamage(minion' SpellSlot.Q) - 15 > health)                              Q.Cast(minion);                      }                      else                      {                          if (Player.GetSpellDamage(minion' SpellSlot.Q' 1) - 15 > health)                              Q.Cast(minion);                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,SetupSpells,The following statement contains a magic number: SpellManager.Q = new Spell(SpellSlot.Q' 825);
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,SetupSpells,The following statement contains a magic number: SpellManager.E = new Spell(SpellSlot.E' 1100);
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,SetupSpells,The following statement contains a magic number: SpellManager.Q.SetSkillshot(0.25f' 80' 1300' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,SetupSpells,The following statement contains a magic number: SpellManager.Q.SetSkillshot(0.25f' 80' 1300' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,SetupSpells,The following statement contains a magic number: SpellManager.W.SetSkillshot(0f' 250' float.MaxValue' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,SetupSpells,The following statement contains a magic number: SpellManager.E.SetSkillshot(0.25f' 145' 1700' false' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,SetupSpells,The following statement contains a magic number: SpellManager.E.SetSkillshot(0.25f' 145' 1700' false' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,SetupSpells,The following statement contains a magic number: SpellManager.R.SetSkillshot(0.60f' 350' float.MaxValue' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  key.AddItem(new MenuItem("ComboActive"' "Combo!"' true).SetValue(new KeyBind(32' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle)));                  key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("LastHitQQ"' "Last hit with Q"' true).SetValue(new KeyBind("A".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("escape"' "RUN FOR YOUR LIFE!"' true).SetValue(new KeyBind("Z".ToCharArray()[0]' KeyBindType.Press)));                  //add to menu                  menu.AddSubMenu(key);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  //W                  var wMenu = new Menu("WSpell"' "WSpell");                  {                      wMenu.AddItem(new MenuItem("autoW"' "Use W if hit"' true).SetValue(new Slider(2' 1' 5)));                      spellMenu.AddSubMenu(wMenu);                  }                    //E                  var eMenu = new Menu("ESpell"' "ESpell");                  {                      eMenu.AddItem(new MenuItem("saveEMana"' "Do not E To save Mana for Q+W"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("UseEDmg"' "Use E to Dmg"' true).SetValue(true));                      eMenu.AddSubMenu(new Menu("E Ally Inc Spell"' "shield"));                      eMenu.SubMenu("shield").AddItem(new MenuItem("eAllyIfHP"' "If HP < %"' true).SetValue(new Slider(40)));                      foreach (Obj_AI_Hero ally in ObjectManager.Get<Obj_AI_Hero>().Where(ally => ally.IsAlly))                          eMenu.SubMenu("shield").AddItem(new MenuItem("shield" + ally.CharData.BaseSkinName' ally.CharData.BaseSkinName' true).SetValue(true));                        spellMenu.AddSubMenu(eMenu);                  }                  //R                  var rMenu = new Menu("RSpell"' "RSpell");                  {                      rMenu.AddItem(new MenuItem("autoR"' "Use R if hit (Global check)"' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("blockR"' "Block R if no enemy"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("overK"' "OverKill Check"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("killR"' "Use R only if it hits multiple target"' true).SetValue(new KeyBind("T".ToCharArray()[0]' KeyBindType.Toggle)));                        rMenu.AddSubMenu(new Menu("Auto use R on"' "intR"));                      rMenu.SubMenu("intR").AddItem(new MenuItem("AdditonalTargets"' "Require Addition targets"' true).SetValue(new Slider(1' 0' 4)));                      foreach (Obj_AI_Hero enemy in ObjectManager.Get<Obj_AI_Hero>().Where(enemy => enemy.Team != Player.Team))                          rMenu.SubMenu("intR").AddItem(new MenuItem("intR" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  //W                  var wMenu = new Menu("WSpell"' "WSpell");                  {                      wMenu.AddItem(new MenuItem("autoW"' "Use W if hit"' true).SetValue(new Slider(2' 1' 5)));                      spellMenu.AddSubMenu(wMenu);                  }                    //E                  var eMenu = new Menu("ESpell"' "ESpell");                  {                      eMenu.AddItem(new MenuItem("saveEMana"' "Do not E To save Mana for Q+W"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("UseEDmg"' "Use E to Dmg"' true).SetValue(true));                      eMenu.AddSubMenu(new Menu("E Ally Inc Spell"' "shield"));                      eMenu.SubMenu("shield").AddItem(new MenuItem("eAllyIfHP"' "If HP < %"' true).SetValue(new Slider(40)));                      foreach (Obj_AI_Hero ally in ObjectManager.Get<Obj_AI_Hero>().Where(ally => ally.IsAlly))                          eMenu.SubMenu("shield").AddItem(new MenuItem("shield" + ally.CharData.BaseSkinName' ally.CharData.BaseSkinName' true).SetValue(true));                        spellMenu.AddSubMenu(eMenu);                  }                  //R                  var rMenu = new Menu("RSpell"' "RSpell");                  {                      rMenu.AddItem(new MenuItem("autoR"' "Use R if hit (Global check)"' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("blockR"' "Block R if no enemy"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("overK"' "OverKill Check"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("killR"' "Use R only if it hits multiple target"' true).SetValue(new KeyBind("T".ToCharArray()[0]' KeyBindType.Toggle)));                        rMenu.AddSubMenu(new Menu("Auto use R on"' "intR"));                      rMenu.SubMenu("intR").AddItem(new MenuItem("AdditonalTargets"' "Require Addition targets"' true).SetValue(new Slider(1' 0' 4)));                      foreach (Obj_AI_Hero enemy in ObjectManager.Get<Obj_AI_Hero>().Where(enemy => enemy.Team != Player.Team))                          rMenu.SubMenu("intR").AddItem(new MenuItem("intR" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  //W                  var wMenu = new Menu("WSpell"' "WSpell");                  {                      wMenu.AddItem(new MenuItem("autoW"' "Use W if hit"' true).SetValue(new Slider(2' 1' 5)));                      spellMenu.AddSubMenu(wMenu);                  }                    //E                  var eMenu = new Menu("ESpell"' "ESpell");                  {                      eMenu.AddItem(new MenuItem("saveEMana"' "Do not E To save Mana for Q+W"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("UseEDmg"' "Use E to Dmg"' true).SetValue(true));                      eMenu.AddSubMenu(new Menu("E Ally Inc Spell"' "shield"));                      eMenu.SubMenu("shield").AddItem(new MenuItem("eAllyIfHP"' "If HP < %"' true).SetValue(new Slider(40)));                      foreach (Obj_AI_Hero ally in ObjectManager.Get<Obj_AI_Hero>().Where(ally => ally.IsAlly))                          eMenu.SubMenu("shield").AddItem(new MenuItem("shield" + ally.CharData.BaseSkinName' ally.CharData.BaseSkinName' true).SetValue(true));                        spellMenu.AddSubMenu(eMenu);                  }                  //R                  var rMenu = new Menu("RSpell"' "RSpell");                  {                      rMenu.AddItem(new MenuItem("autoR"' "Use R if hit (Global check)"' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("blockR"' "Block R if no enemy"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("overK"' "OverKill Check"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("killR"' "Use R only if it hits multiple target"' true).SetValue(new KeyBind("T".ToCharArray()[0]' KeyBindType.Toggle)));                        rMenu.AddSubMenu(new Menu("Auto use R on"' "intR"));                      rMenu.SubMenu("intR").AddItem(new MenuItem("AdditonalTargets"' "Require Addition targets"' true).SetValue(new Slider(1' 0' 4)));                      foreach (Obj_AI_Hero enemy in ObjectManager.Get<Obj_AI_Hero>().Where(enemy => enemy.Team != Player.Team))                          rMenu.SubMenu("intR").AddItem(new MenuItem("intR" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  //W                  var wMenu = new Menu("WSpell"' "WSpell");                  {                      wMenu.AddItem(new MenuItem("autoW"' "Use W if hit"' true).SetValue(new Slider(2' 1' 5)));                      spellMenu.AddSubMenu(wMenu);                  }                    //E                  var eMenu = new Menu("ESpell"' "ESpell");                  {                      eMenu.AddItem(new MenuItem("saveEMana"' "Do not E To save Mana for Q+W"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("UseEDmg"' "Use E to Dmg"' true).SetValue(true));                      eMenu.AddSubMenu(new Menu("E Ally Inc Spell"' "shield"));                      eMenu.SubMenu("shield").AddItem(new MenuItem("eAllyIfHP"' "If HP < %"' true).SetValue(new Slider(40)));                      foreach (Obj_AI_Hero ally in ObjectManager.Get<Obj_AI_Hero>().Where(ally => ally.IsAlly))                          eMenu.SubMenu("shield").AddItem(new MenuItem("shield" + ally.CharData.BaseSkinName' ally.CharData.BaseSkinName' true).SetValue(true));                        spellMenu.AddSubMenu(eMenu);                  }                  //R                  var rMenu = new Menu("RSpell"' "RSpell");                  {                      rMenu.AddItem(new MenuItem("autoR"' "Use R if hit (Global check)"' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("blockR"' "Block R if no enemy"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("overK"' "OverKill Check"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("killR"' "Use R only if it hits multiple target"' true).SetValue(new KeyBind("T".ToCharArray()[0]' KeyBindType.Toggle)));                        rMenu.AddSubMenu(new Menu("Auto use R on"' "intR"));                      rMenu.SubMenu("intR").AddItem(new MenuItem("AdditonalTargets"' "Require Addition targets"' true).SetValue(new Slider(1' 0' 4)));                      foreach (Obj_AI_Hero enemy in ObjectManager.Get<Obj_AI_Hero>().Where(enemy => enemy.Team != Player.Team))                          rMenu.SubMenu("intR").AddItem(new MenuItem("intR" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  //W                  var wMenu = new Menu("WSpell"' "WSpell");                  {                      wMenu.AddItem(new MenuItem("autoW"' "Use W if hit"' true).SetValue(new Slider(2' 1' 5)));                      spellMenu.AddSubMenu(wMenu);                  }                    //E                  var eMenu = new Menu("ESpell"' "ESpell");                  {                      eMenu.AddItem(new MenuItem("saveEMana"' "Do not E To save Mana for Q+W"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("UseEDmg"' "Use E to Dmg"' true).SetValue(true));                      eMenu.AddSubMenu(new Menu("E Ally Inc Spell"' "shield"));                      eMenu.SubMenu("shield").AddItem(new MenuItem("eAllyIfHP"' "If HP < %"' true).SetValue(new Slider(40)));                      foreach (Obj_AI_Hero ally in ObjectManager.Get<Obj_AI_Hero>().Where(ally => ally.IsAlly))                          eMenu.SubMenu("shield").AddItem(new MenuItem("shield" + ally.CharData.BaseSkinName' ally.CharData.BaseSkinName' true).SetValue(true));                        spellMenu.AddSubMenu(eMenu);                  }                  //R                  var rMenu = new Menu("RSpell"' "RSpell");                  {                      rMenu.AddItem(new MenuItem("autoR"' "Use R if hit (Global check)"' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("blockR"' "Block R if no enemy"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("overK"' "OverKill Check"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("killR"' "Use R only if it hits multiple target"' true).SetValue(new KeyBind("T".ToCharArray()[0]' KeyBindType.Toggle)));                        rMenu.AddSubMenu(new Menu("Auto use R on"' "intR"));                      rMenu.SubMenu("intR").AddItem(new MenuItem("AdditonalTargets"' "Require Addition targets"' true).SetValue(new Slider(1' 0' 4)));                      foreach (Obj_AI_Hero enemy in ObjectManager.Get<Obj_AI_Hero>().Where(enemy => enemy.Team != Player.Team))                          rMenu.SubMenu("intR").AddItem(new MenuItem("intR" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  //W                  var wMenu = new Menu("WSpell"' "WSpell");                  {                      wMenu.AddItem(new MenuItem("autoW"' "Use W if hit"' true).SetValue(new Slider(2' 1' 5)));                      spellMenu.AddSubMenu(wMenu);                  }                    //E                  var eMenu = new Menu("ESpell"' "ESpell");                  {                      eMenu.AddItem(new MenuItem("saveEMana"' "Do not E To save Mana for Q+W"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("UseEDmg"' "Use E to Dmg"' true).SetValue(true));                      eMenu.AddSubMenu(new Menu("E Ally Inc Spell"' "shield"));                      eMenu.SubMenu("shield").AddItem(new MenuItem("eAllyIfHP"' "If HP < %"' true).SetValue(new Slider(40)));                      foreach (Obj_AI_Hero ally in ObjectManager.Get<Obj_AI_Hero>().Where(ally => ally.IsAlly))                          eMenu.SubMenu("shield").AddItem(new MenuItem("shield" + ally.CharData.BaseSkinName' ally.CharData.BaseSkinName' true).SetValue(true));                        spellMenu.AddSubMenu(eMenu);                  }                  //R                  var rMenu = new Menu("RSpell"' "RSpell");                  {                      rMenu.AddItem(new MenuItem("autoR"' "Use R if hit (Global check)"' true).SetValue(new Slider(3' 1' 5)));                      rMenu.AddItem(new MenuItem("blockR"' "Block R if no enemy"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("overK"' "OverKill Check"' true).SetValue(true));                      rMenu.AddItem(new MenuItem("killR"' "Use R only if it hits multiple target"' true).SetValue(new KeyBind("T".ToCharArray()[0]' KeyBindType.Toggle)));                        rMenu.AddSubMenu(new Menu("Auto use R on"' "intR"));                      rMenu.SubMenu("intR").AddItem(new MenuItem("AdditonalTargets"' "Require Addition targets"' true).SetValue(new Slider(1' 0' 4)));                      foreach (Obj_AI_Hero enemy in ObjectManager.Get<Obj_AI_Hero>().Where(enemy => enemy.Team != Player.Team))                          rMenu.SubMenu("intR").AddItem(new MenuItem("intR" + enemy.CharData.BaseSkinName' enemy.CharData.BaseSkinName' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                  menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  combo.AddItem(new MenuItem("UseQCombo"' "Use Q"' true).SetValue(true));                  combo.AddItem(new MenuItem("UseWCombo"' "Use W"' true).SetValue(true));                  combo.AddItem(new MenuItem("UseECombo"' "Use E"' true).SetValue(true));                  combo.AddItem(new MenuItem("UseRCombo"' "Use R"' true).SetValue(true));                  combo.AddItem(new MenuItem("autoRCombo"' "Use R if hit"' true).SetValue(new Slider(2' 1' 5)));                  combo.AddSubMenu(HitChanceManager.AddHitChanceMenuCombo(true' false' false' false));                  menu.AddSubMenu(combo);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  combo.AddItem(new MenuItem("UseQCombo"' "Use Q"' true).SetValue(true));                  combo.AddItem(new MenuItem("UseWCombo"' "Use W"' true).SetValue(true));                  combo.AddItem(new MenuItem("UseECombo"' "Use E"' true).SetValue(true));                  combo.AddItem(new MenuItem("UseRCombo"' "Use R"' true).SetValue(true));                  combo.AddItem(new MenuItem("autoRCombo"' "Use R if hit"' true).SetValue(new Slider(2' 1' 5)));                  combo.AddSubMenu(HitChanceManager.AddHitChanceMenuCombo(true' false' false' false));                  menu.AddSubMenu(combo);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  harass.AddItem(new MenuItem("UseQHarass"' "Use Q"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseWHarass"' "Use W"' true).SetValue(false));                  harass.AddItem(new MenuItem("UseEHarass"' "Use E"' true).SetValue(true));                  harass.AddSubMenu(HitChanceManager.AddHitChanceMenuHarass(true' false' false' false));                  ManaManager.AddManaManagertoMenu(harass' "Harass"' 30);                  menu.AddSubMenu(harass);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(false));                  farm.AddItem(new MenuItem("UseWFarm"' "Use W"' true).SetValue(false));                  farm.AddItem(new MenuItem("qFarm"' "Only Q/W if > minion"' true).SetValue(new Slider(3' 0' 5)));                  ManaManager.AddManaManagertoMenu(farm' "Farm"' 50);                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(false));                  farm.AddItem(new MenuItem("UseWFarm"' "Use W"' true).SetValue(false));                  farm.AddItem(new MenuItem("qFarm"' "Only Q/W if > minion"' true).SetValue(new Slider(3' 0' 5)));                  ManaManager.AddManaManagertoMenu(farm' "Farm"' 50);                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(false));                  farm.AddItem(new MenuItem("UseWFarm"' "Use W"' true).SetValue(false));                  farm.AddItem(new MenuItem("qFarm"' "Only Q/W if > minion"' true).SetValue(new Slider(3' 0' 5)));                  ManaManager.AddManaManagertoMenu(farm' "Farm"' 50);                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,GetComboDamage,The following statement contains a magic number: damage += Player.GetSpellDamage(enemy' SpellSlot.Q) * 1.5;
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,GetComboDamage,The following statement contains a magic number: if (R.IsReady())                  damage += Player.GetSpellDamage(enemy' SpellSlot.R) - 25;
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      var dmg = GetComboDamage(itemTarget);                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      var dmg = GetComboDamage(itemTarget);                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,UseSpells,The following statement contains a magic number: if (useR && target != null && R.IsReady())              {                  if (menu.Item("intR" + target.CharData.BaseSkinName' true) != null)                  {                      foreach (                          Obj_AI_Hero enemy in                              ObjectManager.Get<Obj_AI_Hero>()                                  .Where(x => Player.Distance(x.Position) < 1500 && x.IsValidTarget() && x.IsEnemy && !x.IsDead))                      {                          if (!enemy.IsDead && menu.Item("intR" + enemy.CharData.BaseSkinName' true).GetValue<bool>())                          {                              CastR(enemy' true);                              return;                          }                      }                  }                    if (!(menu.Item("killR"' true).GetValue<KeyBind>().Active)) //check if multi                  {                      if (menu.Item("overK"' true).GetValue<bool>() &&                          (Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.W)) >= target.Health)                      {                          return;                      }                      if (GetComboDamage(target) >= target.Health - 100 && !target.IsZombie)                          CastR(target);                  }              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,UseSpells,The following statement contains a magic number: if (useR && target != null && R.IsReady())              {                  if (menu.Item("intR" + target.CharData.BaseSkinName' true) != null)                  {                      foreach (                          Obj_AI_Hero enemy in                              ObjectManager.Get<Obj_AI_Hero>()                                  .Where(x => Player.Distance(x.Position) < 1500 && x.IsValidTarget() && x.IsEnemy && !x.IsDead))                      {                          if (!enemy.IsDead && menu.Item("intR" + enemy.CharData.BaseSkinName' true).GetValue<bool>())                          {                              CastR(enemy' true);                              return;                          }                      }                  }                    if (!(menu.Item("killR"' true).GetValue<KeyBind>().Active)) //check if multi                  {                      if (menu.Item("overK"' true).GetValue<bool>() &&                          (Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.W)) >= target.Health)                      {                          return;                      }                      if (GetComboDamage(target) >= target.Health - 100 && !target.IsZombie)                          CastR(target);                  }              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,CastE,The following statement contains a magic number: switch (_ballStatus)              {                  case 0:                      if (target != null)                      {                          float travelTime = target.Distance(Player.ServerPosition) / Q.Speed;                          float minTravelTime = 10000f;                            foreach (                              Obj_AI_Hero ally in                                  ObjectManager.Get<Obj_AI_Hero>()                                      .Where(x => x.IsAlly && Player.Distance(x.ServerPosition) <= E.Range && !x.IsMe))                          {                               //dmg enemy with E                              if (menu.Item("UseEDmg"' true).GetValue<bool>())                              {                                  PredictionOutput prediction3 = Util.GetP(Player.ServerPosition' E' target' true);                                  Object[] obj = Util.VectorPointProjectionOnLineSegment(Player.ServerPosition.To2D()'                                      ally.ServerPosition.To2D()' prediction3.UnitPosition.To2D());                                  var isOnseg = (bool)obj[2];                                  var pointLine = (Vector2)obj[1];                                    if (E.IsReady() && isOnseg &&                                      prediction3.UnitPosition.Distance(pointLine.To3D()) < E.Width)                                  {                                      //Console.WriteLine("Dmg 1");                                      E.CastOnUnit(ally);                                      return;                                  }                              }                                float allyRange = target.Distance(ally.ServerPosition) / Q.Speed +                                                  ally.Distance(Player.ServerPosition) / E.Speed;                              if (allyRange < minTravelTime)                              {                                  etarget = ally;                                  minTravelTime = allyRange;                              }                          }                            if (minTravelTime < travelTime && Player.Distance(etarget.ServerPosition) <= E.Range &&                              E.IsReady())                          {                              E.CastOnUnit(etarget);                          }                      }                      break;                  case 1:                      //dmg enemy with E                      if (menu.Item("UseEDmg"' true).GetValue<bool>())                      {                          PredictionOutput prediction = Util.GetP(_currentBallPosition' E' target' true);                          Object[] obj = Util.VectorPointProjectionOnLineSegment(_currentBallPosition.To2D()'                              Player.ServerPosition.To2D()' prediction.UnitPosition.To2D());                          var isOnseg = (bool)obj[2];                          var pointLine = (Vector2)obj[1];                            if (E.IsReady() && isOnseg && prediction.UnitPosition.Distance(pointLine.To3D()) < E.Width)                          {                              //Console.WriteLine("Dmg 2");                              E.CastOnUnit(Player);                              return;                          }                      }                        float travelTime2 = target.Distance(_currentBallPosition) / Q.Speed;                      float minTravelTime2 = target.Distance(Player.ServerPosition) / Q.Speed +                                              Player.Distance(_currentBallPosition) / E.Speed;                        if (minTravelTime2 < travelTime2 && target.Distance(Player.ServerPosition) <= Q.Range + Q.Width &&                          E.IsReady())                      {                          E.CastOnUnit(Player);                      }                        break;                  case 2:                      float travelTime3 = target.Distance(_currentBallPosition) / Q.Speed;                      float minTravelTime3 = 10000f;                        foreach (                          Obj_AI_Hero ally in                              ObjectManager.Get<Obj_AI_Hero>()                                  .Where(x => x.IsAlly && Player.Distance(x.ServerPosition) <= E.Range && !x.IsMe))                      {                          //dmg enemy with E                          if (menu.Item("UseEDmg"' true).GetValue<bool>())                          {                              PredictionOutput prediction2 = Util.GetP(_currentBallPosition' E' target' true);                              Object[] obj = Util.VectorPointProjectionOnLineSegment(_currentBallPosition.To2D()'                                  ally.ServerPosition.To2D()' prediction2.UnitPosition.To2D());                              var isOnseg = (bool)obj[2];                              var pointLine = (Vector2)obj[1];                                if (E.IsReady() && isOnseg &&                                  prediction2.UnitPosition.Distance(pointLine.To3D()) < E.Width)                              {                                  Console.WriteLine("Dmg 3");                                  E.CastOnUnit(ally);                                  return;                              }                          }                            float allyRange2 = target.Distance(ally.ServerPosition) / Q.Speed +                                              ally.Distance(_currentBallPosition) / E.Speed;                            if (allyRange2 < minTravelTime3)                          {                              etarget = ally;                              minTravelTime3 = allyRange2;                          }                      }                        if (minTravelTime3 < travelTime3 && Player.Distance(etarget.ServerPosition) <= E.Range &&                          E.IsReady())                      {                          E.CastOnUnit(etarget);                      }                        break;              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,CastE,The following statement contains a magic number: switch (_ballStatus)              {                  case 0:                      if (target != null)                      {                          float travelTime = target.Distance(Player.ServerPosition) / Q.Speed;                          float minTravelTime = 10000f;                            foreach (                              Obj_AI_Hero ally in                                  ObjectManager.Get<Obj_AI_Hero>()                                      .Where(x => x.IsAlly && Player.Distance(x.ServerPosition) <= E.Range && !x.IsMe))                          {                               //dmg enemy with E                              if (menu.Item("UseEDmg"' true).GetValue<bool>())                              {                                  PredictionOutput prediction3 = Util.GetP(Player.ServerPosition' E' target' true);                                  Object[] obj = Util.VectorPointProjectionOnLineSegment(Player.ServerPosition.To2D()'                                      ally.ServerPosition.To2D()' prediction3.UnitPosition.To2D());                                  var isOnseg = (bool)obj[2];                                  var pointLine = (Vector2)obj[1];                                    if (E.IsReady() && isOnseg &&                                      prediction3.UnitPosition.Distance(pointLine.To3D()) < E.Width)                                  {                                      //Console.WriteLine("Dmg 1");                                      E.CastOnUnit(ally);                                      return;                                  }                              }                                float allyRange = target.Distance(ally.ServerPosition) / Q.Speed +                                                  ally.Distance(Player.ServerPosition) / E.Speed;                              if (allyRange < minTravelTime)                              {                                  etarget = ally;                                  minTravelTime = allyRange;                              }                          }                            if (minTravelTime < travelTime && Player.Distance(etarget.ServerPosition) <= E.Range &&                              E.IsReady())                          {                              E.CastOnUnit(etarget);                          }                      }                      break;                  case 1:                      //dmg enemy with E                      if (menu.Item("UseEDmg"' true).GetValue<bool>())                      {                          PredictionOutput prediction = Util.GetP(_currentBallPosition' E' target' true);                          Object[] obj = Util.VectorPointProjectionOnLineSegment(_currentBallPosition.To2D()'                              Player.ServerPosition.To2D()' prediction.UnitPosition.To2D());                          var isOnseg = (bool)obj[2];                          var pointLine = (Vector2)obj[1];                            if (E.IsReady() && isOnseg && prediction.UnitPosition.Distance(pointLine.To3D()) < E.Width)                          {                              //Console.WriteLine("Dmg 2");                              E.CastOnUnit(Player);                              return;                          }                      }                        float travelTime2 = target.Distance(_currentBallPosition) / Q.Speed;                      float minTravelTime2 = target.Distance(Player.ServerPosition) / Q.Speed +                                              Player.Distance(_currentBallPosition) / E.Speed;                        if (minTravelTime2 < travelTime2 && target.Distance(Player.ServerPosition) <= Q.Range + Q.Width &&                          E.IsReady())                      {                          E.CastOnUnit(Player);                      }                        break;                  case 2:                      float travelTime3 = target.Distance(_currentBallPosition) / Q.Speed;                      float minTravelTime3 = 10000f;                        foreach (                          Obj_AI_Hero ally in                              ObjectManager.Get<Obj_AI_Hero>()                                  .Where(x => x.IsAlly && Player.Distance(x.ServerPosition) <= E.Range && !x.IsMe))                      {                          //dmg enemy with E                          if (menu.Item("UseEDmg"' true).GetValue<bool>())                          {                              PredictionOutput prediction2 = Util.GetP(_currentBallPosition' E' target' true);                              Object[] obj = Util.VectorPointProjectionOnLineSegment(_currentBallPosition.To2D()'                                  ally.ServerPosition.To2D()' prediction2.UnitPosition.To2D());                              var isOnseg = (bool)obj[2];                              var pointLine = (Vector2)obj[1];                                if (E.IsReady() && isOnseg &&                                  prediction2.UnitPosition.Distance(pointLine.To3D()) < E.Width)                              {                                  Console.WriteLine("Dmg 3");                                  E.CastOnUnit(ally);                                  return;                              }                          }                            float allyRange2 = target.Distance(ally.ServerPosition) / Q.Speed +                                              ally.Distance(_currentBallPosition) / E.Speed;                            if (allyRange2 < minTravelTime3)                          {                              etarget = ally;                              minTravelTime3 = allyRange2;                          }                      }                        if (minTravelTime3 < travelTime3 && Player.Distance(etarget.ServerPosition) <= E.Range &&                          E.IsReady())                      {                          E.CastOnUnit(etarget);                      }                        break;              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,CastE,The following statement contains a magic number: switch (_ballStatus)              {                  case 0:                      if (target != null)                      {                          float travelTime = target.Distance(Player.ServerPosition) / Q.Speed;                          float minTravelTime = 10000f;                            foreach (                              Obj_AI_Hero ally in                                  ObjectManager.Get<Obj_AI_Hero>()                                      .Where(x => x.IsAlly && Player.Distance(x.ServerPosition) <= E.Range && !x.IsMe))                          {                               //dmg enemy with E                              if (menu.Item("UseEDmg"' true).GetValue<bool>())                              {                                  PredictionOutput prediction3 = Util.GetP(Player.ServerPosition' E' target' true);                                  Object[] obj = Util.VectorPointProjectionOnLineSegment(Player.ServerPosition.To2D()'                                      ally.ServerPosition.To2D()' prediction3.UnitPosition.To2D());                                  var isOnseg = (bool)obj[2];                                  var pointLine = (Vector2)obj[1];                                    if (E.IsReady() && isOnseg &&                                      prediction3.UnitPosition.Distance(pointLine.To3D()) < E.Width)                                  {                                      //Console.WriteLine("Dmg 1");                                      E.CastOnUnit(ally);                                      return;                                  }                              }                                float allyRange = target.Distance(ally.ServerPosition) / Q.Speed +                                                  ally.Distance(Player.ServerPosition) / E.Speed;                              if (allyRange < minTravelTime)                              {                                  etarget = ally;                                  minTravelTime = allyRange;                              }                          }                            if (minTravelTime < travelTime && Player.Distance(etarget.ServerPosition) <= E.Range &&                              E.IsReady())                          {                              E.CastOnUnit(etarget);                          }                      }                      break;                  case 1:                      //dmg enemy with E                      if (menu.Item("UseEDmg"' true).GetValue<bool>())                      {                          PredictionOutput prediction = Util.GetP(_currentBallPosition' E' target' true);                          Object[] obj = Util.VectorPointProjectionOnLineSegment(_currentBallPosition.To2D()'                              Player.ServerPosition.To2D()' prediction.UnitPosition.To2D());                          var isOnseg = (bool)obj[2];                          var pointLine = (Vector2)obj[1];                            if (E.IsReady() && isOnseg && prediction.UnitPosition.Distance(pointLine.To3D()) < E.Width)                          {                              //Console.WriteLine("Dmg 2");                              E.CastOnUnit(Player);                              return;                          }                      }                        float travelTime2 = target.Distance(_currentBallPosition) / Q.Speed;                      float minTravelTime2 = target.Distance(Player.ServerPosition) / Q.Speed +                                              Player.Distance(_currentBallPosition) / E.Speed;                        if (minTravelTime2 < travelTime2 && target.Distance(Player.ServerPosition) <= Q.Range + Q.Width &&                          E.IsReady())                      {                          E.CastOnUnit(Player);                      }                        break;                  case 2:                      float travelTime3 = target.Distance(_currentBallPosition) / Q.Speed;                      float minTravelTime3 = 10000f;                        foreach (                          Obj_AI_Hero ally in                              ObjectManager.Get<Obj_AI_Hero>()                                  .Where(x => x.IsAlly && Player.Distance(x.ServerPosition) <= E.Range && !x.IsMe))                      {                          //dmg enemy with E                          if (menu.Item("UseEDmg"' true).GetValue<bool>())                          {                              PredictionOutput prediction2 = Util.GetP(_currentBallPosition' E' target' true);                              Object[] obj = Util.VectorPointProjectionOnLineSegment(_currentBallPosition.To2D()'                                  ally.ServerPosition.To2D()' prediction2.UnitPosition.To2D());                              var isOnseg = (bool)obj[2];                              var pointLine = (Vector2)obj[1];                                if (E.IsReady() && isOnseg &&                                  prediction2.UnitPosition.Distance(pointLine.To3D()) < E.Width)                              {                                  Console.WriteLine("Dmg 3");                                  E.CastOnUnit(ally);                                  return;                              }                          }                            float allyRange2 = target.Distance(ally.ServerPosition) / Q.Speed +                                              ally.Distance(_currentBallPosition) / E.Speed;                            if (allyRange2 < minTravelTime3)                          {                              etarget = ally;                              minTravelTime3 = allyRange2;                          }                      }                        if (minTravelTime3 < travelTime3 && Player.Distance(etarget.ServerPosition) <= E.Range &&                          E.IsReady())                      {                          E.CastOnUnit(etarget);                      }                        break;              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,CastE,The following statement contains a magic number: switch (_ballStatus)              {                  case 0:                      if (target != null)                      {                          float travelTime = target.Distance(Player.ServerPosition) / Q.Speed;                          float minTravelTime = 10000f;                            foreach (                              Obj_AI_Hero ally in                                  ObjectManager.Get<Obj_AI_Hero>()                                      .Where(x => x.IsAlly && Player.Distance(x.ServerPosition) <= E.Range && !x.IsMe))                          {                               //dmg enemy with E                              if (menu.Item("UseEDmg"' true).GetValue<bool>())                              {                                  PredictionOutput prediction3 = Util.GetP(Player.ServerPosition' E' target' true);                                  Object[] obj = Util.VectorPointProjectionOnLineSegment(Player.ServerPosition.To2D()'                                      ally.ServerPosition.To2D()' prediction3.UnitPosition.To2D());                                  var isOnseg = (bool)obj[2];                                  var pointLine = (Vector2)obj[1];                                    if (E.IsReady() && isOnseg &&                                      prediction3.UnitPosition.Distance(pointLine.To3D()) < E.Width)                                  {                                      //Console.WriteLine("Dmg 1");                                      E.CastOnUnit(ally);                                      return;                                  }                              }                                float allyRange = target.Distance(ally.ServerPosition) / Q.Speed +                                                  ally.Distance(Player.ServerPosition) / E.Speed;                              if (allyRange < minTravelTime)                              {                                  etarget = ally;                                  minTravelTime = allyRange;                              }                          }                            if (minTravelTime < travelTime && Player.Distance(etarget.ServerPosition) <= E.Range &&                              E.IsReady())                          {                              E.CastOnUnit(etarget);                          }                      }                      break;                  case 1:                      //dmg enemy with E                      if (menu.Item("UseEDmg"' true).GetValue<bool>())                      {                          PredictionOutput prediction = Util.GetP(_currentBallPosition' E' target' true);                          Object[] obj = Util.VectorPointProjectionOnLineSegment(_currentBallPosition.To2D()'                              Player.ServerPosition.To2D()' prediction.UnitPosition.To2D());                          var isOnseg = (bool)obj[2];                          var pointLine = (Vector2)obj[1];                            if (E.IsReady() && isOnseg && prediction.UnitPosition.Distance(pointLine.To3D()) < E.Width)                          {                              //Console.WriteLine("Dmg 2");                              E.CastOnUnit(Player);                              return;                          }                      }                        float travelTime2 = target.Distance(_currentBallPosition) / Q.Speed;                      float minTravelTime2 = target.Distance(Player.ServerPosition) / Q.Speed +                                              Player.Distance(_currentBallPosition) / E.Speed;                        if (minTravelTime2 < travelTime2 && target.Distance(Player.ServerPosition) <= Q.Range + Q.Width &&                          E.IsReady())                      {                          E.CastOnUnit(Player);                      }                        break;                  case 2:                      float travelTime3 = target.Distance(_currentBallPosition) / Q.Speed;                      float minTravelTime3 = 10000f;                        foreach (                          Obj_AI_Hero ally in                              ObjectManager.Get<Obj_AI_Hero>()                                  .Where(x => x.IsAlly && Player.Distance(x.ServerPosition) <= E.Range && !x.IsMe))                      {                          //dmg enemy with E                          if (menu.Item("UseEDmg"' true).GetValue<bool>())                          {                              PredictionOutput prediction2 = Util.GetP(_currentBallPosition' E' target' true);                              Object[] obj = Util.VectorPointProjectionOnLineSegment(_currentBallPosition.To2D()'                                  ally.ServerPosition.To2D()' prediction2.UnitPosition.To2D());                              var isOnseg = (bool)obj[2];                              var pointLine = (Vector2)obj[1];                                if (E.IsReady() && isOnseg &&                                  prediction2.UnitPosition.Distance(pointLine.To3D()) < E.Width)                              {                                  Console.WriteLine("Dmg 3");                                  E.CastOnUnit(ally);                                  return;                              }                          }                            float allyRange2 = target.Distance(ally.ServerPosition) / Q.Speed +                                              ally.Distance(_currentBallPosition) / E.Speed;                            if (allyRange2 < minTravelTime3)                          {                              etarget = ally;                              minTravelTime3 = allyRange2;                          }                      }                        if (minTravelTime3 < travelTime3 && Player.Distance(etarget.ServerPosition) <= E.Range &&                          E.IsReady())                      {                          E.CastOnUnit(etarget);                      }                        break;              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,CheckWMec,The following statement contains a magic number: int hit = (from x in ObjectManager.Get<Obj_AI_Hero>().Where(champ => champ.IsValidTarget(1500) && champ.IsVisible && !champ.IsZombie)                         select Util.GetPCircle(_currentBallPosition' W' x' true)).Count(prediction => W.IsReady() && prediction.UnitPosition.Distance(_currentBallPosition) < W.Width);
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,CheckRMec,The following statement contains a magic number: int hit = (from x in ObjectManager.Get<Obj_AI_Hero>().Where(champ => champ.IsValidTarget(1500) && champ.IsVisible && !champ.IsZombie)                         select Util.GetPCircle(_currentBallPosition' R' x' true)).Count(prediction => R.IsReady() && prediction.UnitPosition.Distance(_currentBallPosition) < R.Width);
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,CheckRMecGlobal,The following statement contains a magic number: int hit = (from x in ObjectManager.Get<Obj_AI_Hero>().Where(champ => champ.IsValidTarget(1500) && champ.IsVisible && !champ.IsZombie)                         select Util.GetPCircle(_currentBallPosition' R' x' true)).Count(prediction => R.IsReady() && prediction.UnitPosition.Distance(_currentBallPosition) < R.Width);
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,CountR,The following statement contains a magic number: return (from enemy in ObjectManager.Get<Obj_AI_Hero>().Where(champ => champ.IsValidTarget(1500) && champ.IsVisible && !champ.IsZombie)                      select Util.GetPCircle(_currentBallPosition' R' enemy' true)).Count(prediction => R.IsReady() && prediction.UnitPosition.Distance(_currentBallPosition) <= R.Width);
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LastHit,The following statement contains a magic number: if (!OrbwalkManager.CanMove(40)) return;
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LastHit,The following statement contains a magic number: if (Q.IsReady())              {                  foreach (Obj_AI_Base minion in allMinions)                  {                      if (minion.IsValidTarget() &&                          HealthPrediction.GetHealthPrediction(minion' (int)(Player.Distance(minion.Position) * 1000 / 1400)) <                          Player.GetSpellDamage(minion' SpellSlot.Q) - 10)                      {                          PredictionOutput prediction = Util.GetP(_currentBallPosition' Q' minion' true);                            if (prediction.Hitchance >= HitChance.High && Q.IsReady())                              Q.Cast(prediction.CastPosition);                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LastHit,The following statement contains a magic number: if (Q.IsReady())              {                  foreach (Obj_AI_Base minion in allMinions)                  {                      if (minion.IsValidTarget() &&                          HealthPrediction.GetHealthPrediction(minion' (int)(Player.Distance(minion.Position) * 1000 / 1400)) <                          Player.GetSpellDamage(minion' SpellSlot.Q) - 10)                      {                          PredictionOutput prediction = Util.GetP(_currentBallPosition' Q' minion' true);                            if (prediction.Hitchance >= HitChance.High && Q.IsReady())                              Q.Cast(prediction.CastPosition);                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,LastHit,The following statement contains a magic number: if (Q.IsReady())              {                  foreach (Obj_AI_Base minion in allMinions)                  {                      if (minion.IsValidTarget() &&                          HealthPrediction.GetHealthPrediction(minion' (int)(Player.Distance(minion.Position) * 1000 / 1400)) <                          Player.GetSpellDamage(minion' SpellSlot.Q) - 10)                      {                          PredictionOutput prediction = Util.GetP(_currentBallPosition' Q' minion' true);                            if (prediction.Hitchance >= HitChance.High && Q.IsReady())                              Q.Cast(prediction.CastPosition);                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,Farm,The following statement contains a magic number: if (!OrbwalkManager.CanMove(40)) return;
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,Farm,The following statement contains a magic number: if (useQ && Q.IsReady())              {                  Q.From = _currentBallPosition;                    MinionManager.FarmLocation pred = Q.GetCircularFarmLocation(allMinionsQ' Q.Width + 15);                    if (pred.MinionsHit >= min)                      Q.Cast(pred.Position);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,OnGainBuff,The following statement contains a magic number: foreach (Obj_AI_Hero ally in                  ObjectManager.Get<Obj_AI_Hero>()                      .Where(ally => ally.IsAlly && !ally.IsDead && ally.HasBuff("orianaghost"' true)))              {                  _ballStatus = 2;                  _currentBallPosition = ally.ServerPosition;                  _allyDraw = ally.Position;                  _isBallMoving = false;                  return;              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,Drawing_OnDraw,The following statement contains a magic number: foreach (Spell spell in SpellList)              {                  var menuItem = menu.Item(spell.Slot + "Range"' true).GetValue<Circle>();                  if ((spell.Slot == SpellSlot.R && menuItem.Active) || (spell.Slot == SpellSlot.W && menuItem.Active))                  {                      if (_ballStatus == 0)                          Render.Circle.DrawCircle(Player.Position' spell.Width' spell.IsReady() ? Color.Aqua : Color.Red);                      else if (_ballStatus == 2)                          Render.Circle.DrawCircle(_allyDraw' spell.Width' spell.IsReady() ? Color.Aqua : Color.Red);                      else                          Render.Circle.DrawCircle(_currentBallPosition' spell.Width' spell.IsReady() ? Color.Aqua : Color.Red);                  }                  else if (menuItem.Active)                      Render.Circle.DrawCircle(Player.Position' spell.Range' spell.IsReady() ? Color.Aqua : Color.Red);              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,Obj_AI_Base_OnProcessSpellCast,The following statement contains a magic number: if (!menu.Item("saveEMana"' true).GetValue<bool>() || Player.Mana - ESpell.ManaCost >= QSpell.ManaCost + WSpell.ManaCost)              {                  if (unit.IsEnemy && unit.Type == GameObjectType.obj_AI_Hero && E.IsReady())                  {                      foreach (                          Obj_AI_Hero ally in                              ObjectManager.Get<Obj_AI_Hero>()                                  .Where(                                      x =>                                          Player.Distance(x.Position) < E.Range && Player.Distance(unit.Position) < 1500 &&                                          x.IsAlly && !x.IsDead).OrderBy(x => x.Distance(args.End)))                      {                          if (menu.Item("shield" + ally.CharData.BaseSkinName' true) != null)                          {                              if (menu.Item("shield" + ally.CharData.BaseSkinName' true).GetValue<bool>())                              {                                  int hp = menu.Item("eAllyIfHP"' true).GetValue<Slider>().Value;                                    if (ally.Distance(args.End) < 500 && ally.HealthPercent <= hp)                                  {                                      //Game.PrintChat("shielding");                                      E.CastOnUnit(ally);                                      _isBallMoving = true;                                      return;                                  }                              }                          }                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,Obj_AI_Base_OnProcessSpellCast,The following statement contains a magic number: if (!menu.Item("saveEMana"' true).GetValue<bool>() || Player.Mana - ESpell.ManaCost >= QSpell.ManaCost + WSpell.ManaCost)              {                  if (unit.IsEnemy && unit.Type == GameObjectType.obj_AI_Hero && E.IsReady())                  {                      foreach (                          Obj_AI_Hero ally in                              ObjectManager.Get<Obj_AI_Hero>()                                  .Where(                                      x =>                                          Player.Distance(x.Position) < E.Range && Player.Distance(unit.Position) < 1500 &&                                          x.IsAlly && !x.IsDead).OrderBy(x => x.Distance(args.End)))                      {                          if (menu.Item("shield" + ally.CharData.BaseSkinName' true) != null)                          {                              if (menu.Item("shield" + ally.CharData.BaseSkinName' true).GetValue<bool>())                              {                                  int hp = menu.Item("eAllyIfHP"' true).GetValue<Slider>().Value;                                    if (ally.Distance(args.End) < 500 && ally.HealthPercent <= hp)                                  {                                      //Game.PrintChat("shielding");                                      E.CastOnUnit(ally);                                      _isBallMoving = true;                                      return;                                  }                              }                          }                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,Obj_AI_Base_OnProcessSpellCast,The following statement contains a magic number: if (castedSlot == SpellSlot.Q)              {                  _isBallMoving = true;                  Utility.DelayAction.Add(                      (int)Math.Max(1' 1000 * (args.End.Distance(_currentBallPosition) - Game.Ping - 0.1) / Q.Speed)' () =>                      {                          _currentBallPosition = args.End;                          _ballStatus = 1;                          _isBallMoving = false;                          //Game.PrintChat("Stopped");                      });              }
Magic Number,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,Obj_AI_Base_OnProcessSpellCast,The following statement contains a magic number: if (castedSlot == SpellSlot.Q)              {                  _isBallMoving = true;                  Utility.DelayAction.Add(                      (int)Math.Max(1' 1000 * (args.End.Distance(_currentBallPosition) - Game.Ping - 0.1) / Q.Speed)' () =>                      {                          _currentBallPosition = args.End;                          _ballStatus = 1;                          _isBallMoving = false;                          //Game.PrintChat("Stopped");                      });              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,SetSpells,The following statement contains a magic number: SpellManager.Q = new Spell(SpellSlot.Q' 800);
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,SetSpells,The following statement contains a magic number: SpellManager.W = new Spell(SpellSlot.W' 950);
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,SetSpells,The following statement contains a magic number: SpellManager.E = new Spell(SpellSlot.E' 700);
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,SetSpells,The following statement contains a magic number: SpellManager.E.SetSkillshot(.25f' (float)(45 * 0.5)' 2500f' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,SetSpells,The following statement contains a magic number: SpellManager.E.SetSkillshot(.25f' (float)(45 * 0.5)' 2500f' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,SetSpells,The following statement contains a magic number: SpellManager.R = new Spell(SpellSlot.R' 750);
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,SetSpells,The following statement contains a magic number: _qe = new Spell(SpellSlot.Q' 1250);
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,LoadMenu,The following statement contains a magic number: {                  key.AddItem(new MenuItem("ComboActive"' "Combo!"' true).SetValue(new KeyBind(32' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle)));                  key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("Misc_QE_Mouse"' "QE to Nearest Target To Mouse"' true).SetValue(new KeyBind("T".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("Misc_QE_Mouse2"' "QE to Mouse"' true).SetValue(new KeyBind("T".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("forceR"' "Force R to best Target"' true).SetValue(new KeyBind("R".ToCharArray()[0]' KeyBindType.Press)));                  //key.AddItem(new MenuItem("qAA"' "Auto Q AAing target"' true).SetValue(new KeyBind("I".ToCharArray()[0]' KeyBindType.Toggle)));                  //add to menu                  menu.AddSubMenu(key);              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,LoadMenu,The following statement contains a magic number: {                  harass.AddItem(new MenuItem("UseQHarass"' "Use Q"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseQEHarass"' "Use QE"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseWHarass"' "Use W"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseEHarass"' "Use E"' true).SetValue(true));                  harass.AddSubMenu(HitChanceManager.AddHitChanceMenuHarass(true' true' true' false' true));                  ManaManager.AddManaManagertoMenu(harass' "Harass"' 30);                  //add to menu                  menu.AddSubMenu(harass);              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseWFarm"' "Use W"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseEFarm"' "Use E"' true).SetValue(true));                  ManaManager.AddManaManagertoMenu(farm' "LaneClear"' 30);                  //add to menu                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_QE"' "Draw QE"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_QE_Line"' "Draw QE Line"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R_Killable"' "Draw R Mark on Killable"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_QE"' "Draw QE"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_QE_Line"' "Draw QE Line"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R_Killable"' "Draw R Mark on Killable"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_QE"' "Draw QE"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_QE_Line"' "Draw QE Line"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R_Killable"' "Draw R Mark on Killable"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_QE"' "Draw QE"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_QE_Line"' "Draw QE Line"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R_Killable"' "Draw R Mark on Killable"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,GetComboDamage,The following statement contains a magic number: if (R.IsReady())                  comboDamage += (3 + GetOrbCount()) * Player.GetSpellDamage(target' SpellSlot.R' 1) - 20;
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,GetComboDamage,The following statement contains a magic number: if (R.IsReady())                  comboDamage += (3 + GetOrbCount()) * Player.GetSpellDamage(target' SpellSlot.R' 1) - 20;
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Get_Ult_Dmg,The following statement contains a magic number: if (R.IsReady())                  damage += (3 + GetOrbCount()) * Player.GetSpellDamage(enemy' SpellSlot.R' 1) - 20;
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Get_Ult_Dmg,The following statement contains a magic number: if (R.IsReady())                  damage += (3 + GetOrbCount()) * Player.GetSpellDamage(enemy' SpellSlot.R' 1) - 20;
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,UseSpells,The following statement contains a magic number: var qTarget = TargetSelector.GetTarget(650' TargetSelector.DamageType.Magical);
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Cast_W,The following statement contains a magic number: if (mode)              {                  var wTarget = TargetSelector.GetTarget(W.Range' TargetSelector.DamageType.Magical);                    var grabbableObj = Get_Nearest_orb();                  var wToggleState = Player.Spellbook.GetSpell(SpellSlot.W).ToggleState;                    if (wTarget == null)                      return;                    if (grabbableObj != null && wToggleState == 1)                  {                      if (Utils.TickCount - W.LastCastAttemptT > Game.Ping && W.IsReady())                      {                          if (grabbableObj.Distance(Player.Position) < W.Range)                          {                              W.Cast(grabbableObj.ServerPosition);                              W.LastCastAttemptT = Utils.TickCount + 500;                              return;                          }                      }                  }                    if (wToggleState != 1 && Get_Current_Orb() != null)                  {                      W.From = Get_Current_Orb().ServerPosition;                      var pred = W.GetPrediction(wTarget);                        if (pred.Hitchance < HitChanceManager.GetWHitChance(source))                          return;                        if (Player.Distance(wTarget.Position) < E.Range - 100)                      {                          if (W.IsReady() && Utils.TickCount - W.LastCastAttemptT > -300 + Game.Ping)                          {                              var vector = pred.CastPosition.Shorten(Player.ServerPosition' 100);                              W.Cast(vector);                              Console.WriteLine("Shooting to vector");                              return;                          }                      }                        if (W.IsReady())                      {                          W.Cast(wTarget);                      }                  }              }              else              {                  var grabbableObj = Get_Nearest_orb();                  var wToggleState = Player.Spellbook.GetSpell(SpellSlot.W).ToggleState;                  var allMinionsW = MinionManager.GetMinions(Player.ServerPosition' W.Range' MinionTypes.All' MinionTeam.NotAlly);                    if (grabbableObj == null || allMinionsW.Count < 1)                      return;                    if (wToggleState == 1 && Utils.TickCount - W.LastCastAttemptT > Game.Ping && W.IsReady())                  {                      W.Cast(grabbableObj.ServerPosition);                      W.LastCastAttemptT = Utils.TickCount + 1000;                      return;                  }                    if (Get_Current_Orb() == null)                      return;                    W.From = Get_Current_Orb().ServerPosition;                    var farmLocation = Q.GetCircularFarmLocation(allMinionsW' W.Width);                    if (farmLocation.MinionsHit > 0)                      W.Cast(farmLocation.Position);                  else                  {                      W.Cast();                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Cast_W,The following statement contains a magic number: if (mode)              {                  var wTarget = TargetSelector.GetTarget(W.Range' TargetSelector.DamageType.Magical);                    var grabbableObj = Get_Nearest_orb();                  var wToggleState = Player.Spellbook.GetSpell(SpellSlot.W).ToggleState;                    if (wTarget == null)                      return;                    if (grabbableObj != null && wToggleState == 1)                  {                      if (Utils.TickCount - W.LastCastAttemptT > Game.Ping && W.IsReady())                      {                          if (grabbableObj.Distance(Player.Position) < W.Range)                          {                              W.Cast(grabbableObj.ServerPosition);                              W.LastCastAttemptT = Utils.TickCount + 500;                              return;                          }                      }                  }                    if (wToggleState != 1 && Get_Current_Orb() != null)                  {                      W.From = Get_Current_Orb().ServerPosition;                      var pred = W.GetPrediction(wTarget);                        if (pred.Hitchance < HitChanceManager.GetWHitChance(source))                          return;                        if (Player.Distance(wTarget.Position) < E.Range - 100)                      {                          if (W.IsReady() && Utils.TickCount - W.LastCastAttemptT > -300 + Game.Ping)                          {                              var vector = pred.CastPosition.Shorten(Player.ServerPosition' 100);                              W.Cast(vector);                              Console.WriteLine("Shooting to vector");                              return;                          }                      }                        if (W.IsReady())                      {                          W.Cast(wTarget);                      }                  }              }              else              {                  var grabbableObj = Get_Nearest_orb();                  var wToggleState = Player.Spellbook.GetSpell(SpellSlot.W).ToggleState;                  var allMinionsW = MinionManager.GetMinions(Player.ServerPosition' W.Range' MinionTypes.All' MinionTeam.NotAlly);                    if (grabbableObj == null || allMinionsW.Count < 1)                      return;                    if (wToggleState == 1 && Utils.TickCount - W.LastCastAttemptT > Game.Ping && W.IsReady())                  {                      W.Cast(grabbableObj.ServerPosition);                      W.LastCastAttemptT = Utils.TickCount + 1000;                      return;                  }                    if (Get_Current_Orb() == null)                      return;                    W.From = Get_Current_Orb().ServerPosition;                    var farmLocation = Q.GetCircularFarmLocation(allMinionsW' W.Width);                    if (farmLocation.MinionsHit > 0)                      W.Cast(farmLocation.Position);                  else                  {                      W.Cast();                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Cast_W,The following statement contains a magic number: if (mode)              {                  var wTarget = TargetSelector.GetTarget(W.Range' TargetSelector.DamageType.Magical);                    var grabbableObj = Get_Nearest_orb();                  var wToggleState = Player.Spellbook.GetSpell(SpellSlot.W).ToggleState;                    if (wTarget == null)                      return;                    if (grabbableObj != null && wToggleState == 1)                  {                      if (Utils.TickCount - W.LastCastAttemptT > Game.Ping && W.IsReady())                      {                          if (grabbableObj.Distance(Player.Position) < W.Range)                          {                              W.Cast(grabbableObj.ServerPosition);                              W.LastCastAttemptT = Utils.TickCount + 500;                              return;                          }                      }                  }                    if (wToggleState != 1 && Get_Current_Orb() != null)                  {                      W.From = Get_Current_Orb().ServerPosition;                      var pred = W.GetPrediction(wTarget);                        if (pred.Hitchance < HitChanceManager.GetWHitChance(source))                          return;                        if (Player.Distance(wTarget.Position) < E.Range - 100)                      {                          if (W.IsReady() && Utils.TickCount - W.LastCastAttemptT > -300 + Game.Ping)                          {                              var vector = pred.CastPosition.Shorten(Player.ServerPosition' 100);                              W.Cast(vector);                              Console.WriteLine("Shooting to vector");                              return;                          }                      }                        if (W.IsReady())                      {                          W.Cast(wTarget);                      }                  }              }              else              {                  var grabbableObj = Get_Nearest_orb();                  var wToggleState = Player.Spellbook.GetSpell(SpellSlot.W).ToggleState;                  var allMinionsW = MinionManager.GetMinions(Player.ServerPosition' W.Range' MinionTypes.All' MinionTeam.NotAlly);                    if (grabbableObj == null || allMinionsW.Count < 1)                      return;                    if (wToggleState == 1 && Utils.TickCount - W.LastCastAttemptT > Game.Ping && W.IsReady())                  {                      W.Cast(grabbableObj.ServerPosition);                      W.LastCastAttemptT = Utils.TickCount + 1000;                      return;                  }                    if (Get_Current_Orb() == null)                      return;                    W.From = Get_Current_Orb().ServerPosition;                    var farmLocation = Q.GetCircularFarmLocation(allMinionsW' W.Width);                    if (farmLocation.MinionsHit > 0)                      W.Cast(farmLocation.Position);                  else                  {                      W.Cast();                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Cast_W,The following statement contains a magic number: if (mode)              {                  var wTarget = TargetSelector.GetTarget(W.Range' TargetSelector.DamageType.Magical);                    var grabbableObj = Get_Nearest_orb();                  var wToggleState = Player.Spellbook.GetSpell(SpellSlot.W).ToggleState;                    if (wTarget == null)                      return;                    if (grabbableObj != null && wToggleState == 1)                  {                      if (Utils.TickCount - W.LastCastAttemptT > Game.Ping && W.IsReady())                      {                          if (grabbableObj.Distance(Player.Position) < W.Range)                          {                              W.Cast(grabbableObj.ServerPosition);                              W.LastCastAttemptT = Utils.TickCount + 500;                              return;                          }                      }                  }                    if (wToggleState != 1 && Get_Current_Orb() != null)                  {                      W.From = Get_Current_Orb().ServerPosition;                      var pred = W.GetPrediction(wTarget);                        if (pred.Hitchance < HitChanceManager.GetWHitChance(source))                          return;                        if (Player.Distance(wTarget.Position) < E.Range - 100)                      {                          if (W.IsReady() && Utils.TickCount - W.LastCastAttemptT > -300 + Game.Ping)                          {                              var vector = pred.CastPosition.Shorten(Player.ServerPosition' 100);                              W.Cast(vector);                              Console.WriteLine("Shooting to vector");                              return;                          }                      }                        if (W.IsReady())                      {                          W.Cast(wTarget);                      }                  }              }              else              {                  var grabbableObj = Get_Nearest_orb();                  var wToggleState = Player.Spellbook.GetSpell(SpellSlot.W).ToggleState;                  var allMinionsW = MinionManager.GetMinions(Player.ServerPosition' W.Range' MinionTypes.All' MinionTeam.NotAlly);                    if (grabbableObj == null || allMinionsW.Count < 1)                      return;                    if (wToggleState == 1 && Utils.TickCount - W.LastCastAttemptT > Game.Ping && W.IsReady())                  {                      W.Cast(grabbableObj.ServerPosition);                      W.LastCastAttemptT = Utils.TickCount + 1000;                      return;                  }                    if (Get_Current_Orb() == null)                      return;                    W.From = Get_Current_Orb().ServerPosition;                    var farmLocation = Q.GetCircularFarmLocation(allMinionsW' W.Width);                    if (farmLocation.MinionsHit > 0)                      W.Cast(farmLocation.Position);                  else                  {                      W.Cast();                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Cast_W,The following statement contains a magic number: if (mode)              {                  var wTarget = TargetSelector.GetTarget(W.Range' TargetSelector.DamageType.Magical);                    var grabbableObj = Get_Nearest_orb();                  var wToggleState = Player.Spellbook.GetSpell(SpellSlot.W).ToggleState;                    if (wTarget == null)                      return;                    if (grabbableObj != null && wToggleState == 1)                  {                      if (Utils.TickCount - W.LastCastAttemptT > Game.Ping && W.IsReady())                      {                          if (grabbableObj.Distance(Player.Position) < W.Range)                          {                              W.Cast(grabbableObj.ServerPosition);                              W.LastCastAttemptT = Utils.TickCount + 500;                              return;                          }                      }                  }                    if (wToggleState != 1 && Get_Current_Orb() != null)                  {                      W.From = Get_Current_Orb().ServerPosition;                      var pred = W.GetPrediction(wTarget);                        if (pred.Hitchance < HitChanceManager.GetWHitChance(source))                          return;                        if (Player.Distance(wTarget.Position) < E.Range - 100)                      {                          if (W.IsReady() && Utils.TickCount - W.LastCastAttemptT > -300 + Game.Ping)                          {                              var vector = pred.CastPosition.Shorten(Player.ServerPosition' 100);                              W.Cast(vector);                              Console.WriteLine("Shooting to vector");                              return;                          }                      }                        if (W.IsReady())                      {                          W.Cast(wTarget);                      }                  }              }              else              {                  var grabbableObj = Get_Nearest_orb();                  var wToggleState = Player.Spellbook.GetSpell(SpellSlot.W).ToggleState;                  var allMinionsW = MinionManager.GetMinions(Player.ServerPosition' W.Range' MinionTypes.All' MinionTeam.NotAlly);                    if (grabbableObj == null || allMinionsW.Count < 1)                      return;                    if (wToggleState == 1 && Utils.TickCount - W.LastCastAttemptT > Game.Ping && W.IsReady())                  {                      W.Cast(grabbableObj.ServerPosition);                      W.LastCastAttemptT = Utils.TickCount + 1000;                      return;                  }                    if (Get_Current_Orb() == null)                      return;                    W.From = Get_Current_Orb().ServerPosition;                    var farmLocation = Q.GetCircularFarmLocation(allMinionsW' W.Width);                    if (farmLocation.MinionsHit > 0)                      W.Cast(farmLocation.Position);                  else                  {                      W.Cast();                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Cast_E,The following statement contains a magic number: var target = TargetSelector.GetTarget(_qe.Range + 100' TargetSelector.DamageType.Magical);
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Cast_E,The following statement contains a magic number: foreach (var orb in _orbs.Where(x => Player.Distance(x.Position) < E.Range))              {                  double rangeLeft = 100 + (-0.6 * Player.Distance(orb.ServerPosition) + 950);                  var startPos = orb.ServerPosition - Vector3.Normalize(orb.ServerPosition - Player.ServerPosition) * 100;                  var endPos = startPos + Vector3.Normalize(startPos - Player.ServerPosition) * (float)rangeLeft;                    _qe.Delay = E.Delay + Player.Distance(orb.Position) / E.Speed + target.Distance(orb.Position) / _qe.Speed;                  _qe.From = startPos;                    var targetPos = _qe.GetPrediction(target);                    var projection = targetPos.UnitPosition.To2D().ProjectOn(startPos.To2D()' endPos.To2D());                    if (!projection.IsOnSegment || targetPos.Hitchance < HitChance.Medium ||                      !(projection.LinePoint.Distance(targetPos.UnitPosition.To2D()) < _qe.Width))                      continue;                    if (targetPos.Hitchance >= HitChanceManager.GetEHitChance(source))                  {                      E.Cast(startPos);                      W.LastCastAttemptT = Utils.TickCount + 500;                      return;                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Cast_E,The following statement contains a magic number: foreach (var orb in _orbs.Where(x => Player.Distance(x.Position) < E.Range))              {                  double rangeLeft = 100 + (-0.6 * Player.Distance(orb.ServerPosition) + 950);                  var startPos = orb.ServerPosition - Vector3.Normalize(orb.ServerPosition - Player.ServerPosition) * 100;                  var endPos = startPos + Vector3.Normalize(startPos - Player.ServerPosition) * (float)rangeLeft;                    _qe.Delay = E.Delay + Player.Distance(orb.Position) / E.Speed + target.Distance(orb.Position) / _qe.Speed;                  _qe.From = startPos;                    var targetPos = _qe.GetPrediction(target);                    var projection = targetPos.UnitPosition.To2D().ProjectOn(startPos.To2D()' endPos.To2D());                    if (!projection.IsOnSegment || targetPos.Hitchance < HitChance.Medium ||                      !(projection.LinePoint.Distance(targetPos.UnitPosition.To2D()) < _qe.Width))                      continue;                    if (targetPos.Hitchance >= HitChanceManager.GetEHitChance(source))                  {                      E.Cast(startPos);                      W.LastCastAttemptT = Utils.TickCount + 500;                      return;                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Cast_E,The following statement contains a magic number: foreach (var orb in _orbs.Where(x => Player.Distance(x.Position) < E.Range))              {                  double rangeLeft = 100 + (-0.6 * Player.Distance(orb.ServerPosition) + 950);                  var startPos = orb.ServerPosition - Vector3.Normalize(orb.ServerPosition - Player.ServerPosition) * 100;                  var endPos = startPos + Vector3.Normalize(startPos - Player.ServerPosition) * (float)rangeLeft;                    _qe.Delay = E.Delay + Player.Distance(orb.Position) / E.Speed + target.Distance(orb.Position) / _qe.Speed;                  _qe.From = startPos;                    var targetPos = _qe.GetPrediction(target);                    var projection = targetPos.UnitPosition.To2D().ProjectOn(startPos.To2D()' endPos.To2D());                    if (!projection.IsOnSegment || targetPos.Hitchance < HitChance.Medium ||                      !(projection.LinePoint.Distance(targetPos.UnitPosition.To2D()) < _qe.Width))                      continue;                    if (targetPos.Hitchance >= HitChanceManager.GetEHitChance(source))                  {                      E.Cast(startPos);                      W.LastCastAttemptT = Utils.TickCount + 500;                      return;                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Cast_E,The following statement contains a magic number: foreach (var orb in _orbs.Where(x => Player.Distance(x.Position) < E.Range))              {                  double rangeLeft = 100 + (-0.6 * Player.Distance(orb.ServerPosition) + 950);                  var startPos = orb.ServerPosition - Vector3.Normalize(orb.ServerPosition - Player.ServerPosition) * 100;                  var endPos = startPos + Vector3.Normalize(startPos - Player.ServerPosition) * (float)rangeLeft;                    _qe.Delay = E.Delay + Player.Distance(orb.Position) / E.Speed + target.Distance(orb.Position) / _qe.Speed;                  _qe.From = startPos;                    var targetPos = _qe.GetPrediction(target);                    var projection = targetPos.UnitPosition.To2D().ProjectOn(startPos.To2D()' endPos.To2D());                    if (!projection.IsOnSegment || targetPos.Hitchance < HitChance.Medium ||                      !(projection.LinePoint.Distance(targetPos.UnitPosition.To2D()) < _qe.Width))                      continue;                    if (targetPos.Hitchance >= HitChanceManager.GetEHitChance(source))                  {                      E.Cast(startPos);                      W.LastCastAttemptT = Utils.TickCount + 500;                      return;                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Cast_E,The following statement contains a magic number: foreach (var orb in _orbs.Where(x => Player.Distance(x.Position) < E.Range))              {                  double rangeLeft = 100 + (-0.6 * Player.Distance(orb.ServerPosition) + 950);                  var startPos = orb.ServerPosition - Vector3.Normalize(orb.ServerPosition - Player.ServerPosition) * 100;                  var endPos = startPos + Vector3.Normalize(startPos - Player.ServerPosition) * (float)rangeLeft;                    _qe.Delay = E.Delay + Player.Distance(orb.Position) / E.Speed + target.Distance(orb.Position) / _qe.Speed;                  _qe.From = startPos;                    var targetPos = _qe.GetPrediction(target);                    var projection = targetPos.UnitPosition.To2D().ProjectOn(startPos.To2D()' endPos.To2D());                    if (!projection.IsOnSegment || targetPos.Hitchance < HitChance.Medium ||                      !(projection.LinePoint.Distance(targetPos.UnitPosition.To2D()) < _qe.Width))                      continue;                    if (targetPos.Hitchance >= HitChanceManager.GetEHitChance(source))                  {                      E.Cast(startPos);                      W.LastCastAttemptT = Utils.TickCount + 500;                      return;                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Cast_R,The following statement contains a magic number: var rTarget = TargetSelector.GetTarget(R.Level > 2 ? R.Range : 675' TargetSelector.DamageType.Magical);
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Cast_R,The following statement contains a magic number: var rTarget = TargetSelector.GetTarget(R.Level > 2 ? R.Range : 675' TargetSelector.DamageType.Magical);
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Cast_R,The following statement contains a magic number: if (menu.Item("R_Overkill_Check"' true).GetValue<bool>())              {                  if (Player.GetSpellDamage(rTarget' SpellSlot.Q) - 25 > rTarget.Health)                  {                      return;                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Cast_R,The following statement contains a magic number: if (Get_Ult_Dmg(rTarget) > rTarget.Health - 20 && rTarget.Distance(Player.Position) < R.Range)              {                  R.Cast(rTarget);              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Cast_QE,The following statement contains a magic number: if (qTarget.IsValidTarget(E.Range))              {                  var pred = Q.GetPrediction(qTarget);                    if (pred.Hitchance >= HitChanceManager.GetQEHitChance(source))                  {                      Q.Cast(pred.CastPosition);                      W.LastCastAttemptT = Utils.TickCount + 500;                      _qe.LastCastAttemptT = Utils.TickCount;                  }              }              else              {                  var startPos = Player.ServerPosition.To2D().Extend(qeTarget.ServerPosition.To2D()' Q.Range).To3D();                  double rangeLeft = 100 + (-0.6*Player.Distance(startPos) + 950);                  var endPos = startPos + Vector3.Normalize(startPos - Player.ServerPosition)*(float) rangeLeft;                    _qe.From = startPos;                  _qe.Delay = E.Delay + Q.Range / E.Speed;                    var qePred = _qe.GetPrediction(qeTarget);                    var poly = new Geometry.Polygon.Rectangle(startPos' endPos' _qe.Width);                    if (!poly.IsInside(qePred.UnitPosition))                      return;                    poly.Draw(Color.LawnGreen);                    if (qePred.Hitchance >= HitChanceManager.GetQEHitChance(source))                  {                      Q.Cast(startPos);                      W.LastCastAttemptT = Utils.TickCount + 500;                      _qe.LastCastAttemptT = Utils.TickCount;                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Cast_QE,The following statement contains a magic number: if (qTarget.IsValidTarget(E.Range))              {                  var pred = Q.GetPrediction(qTarget);                    if (pred.Hitchance >= HitChanceManager.GetQEHitChance(source))                  {                      Q.Cast(pred.CastPosition);                      W.LastCastAttemptT = Utils.TickCount + 500;                      _qe.LastCastAttemptT = Utils.TickCount;                  }              }              else              {                  var startPos = Player.ServerPosition.To2D().Extend(qeTarget.ServerPosition.To2D()' Q.Range).To3D();                  double rangeLeft = 100 + (-0.6*Player.Distance(startPos) + 950);                  var endPos = startPos + Vector3.Normalize(startPos - Player.ServerPosition)*(float) rangeLeft;                    _qe.From = startPos;                  _qe.Delay = E.Delay + Q.Range / E.Speed;                    var qePred = _qe.GetPrediction(qeTarget);                    var poly = new Geometry.Polygon.Rectangle(startPos' endPos' _qe.Width);                    if (!poly.IsInside(qePred.UnitPosition))                      return;                    poly.Draw(Color.LawnGreen);                    if (qePred.Hitchance >= HitChanceManager.GetQEHitChance(source))                  {                      Q.Cast(startPos);                      W.LastCastAttemptT = Utils.TickCount + 500;                      _qe.LastCastAttemptT = Utils.TickCount;                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Cast_QE,The following statement contains a magic number: if (qTarget.IsValidTarget(E.Range))              {                  var pred = Q.GetPrediction(qTarget);                    if (pred.Hitchance >= HitChanceManager.GetQEHitChance(source))                  {                      Q.Cast(pred.CastPosition);                      W.LastCastAttemptT = Utils.TickCount + 500;                      _qe.LastCastAttemptT = Utils.TickCount;                  }              }              else              {                  var startPos = Player.ServerPosition.To2D().Extend(qeTarget.ServerPosition.To2D()' Q.Range).To3D();                  double rangeLeft = 100 + (-0.6*Player.Distance(startPos) + 950);                  var endPos = startPos + Vector3.Normalize(startPos - Player.ServerPosition)*(float) rangeLeft;                    _qe.From = startPos;                  _qe.Delay = E.Delay + Q.Range / E.Speed;                    var qePred = _qe.GetPrediction(qeTarget);                    var poly = new Geometry.Polygon.Rectangle(startPos' endPos' _qe.Width);                    if (!poly.IsInside(qePred.UnitPosition))                      return;                    poly.Draw(Color.LawnGreen);                    if (qePred.Hitchance >= HitChanceManager.GetQEHitChance(source))                  {                      Q.Cast(startPos);                      W.LastCastAttemptT = Utils.TickCount + 500;                      _qe.LastCastAttemptT = Utils.TickCount;                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Cast_QE,The following statement contains a magic number: if (qTarget.IsValidTarget(E.Range))              {                  var pred = Q.GetPrediction(qTarget);                    if (pred.Hitchance >= HitChanceManager.GetQEHitChance(source))                  {                      Q.Cast(pred.CastPosition);                      W.LastCastAttemptT = Utils.TickCount + 500;                      _qe.LastCastAttemptT = Utils.TickCount;                  }              }              else              {                  var startPos = Player.ServerPosition.To2D().Extend(qeTarget.ServerPosition.To2D()' Q.Range).To3D();                  double rangeLeft = 100 + (-0.6*Player.Distance(startPos) + 950);                  var endPos = startPos + Vector3.Normalize(startPos - Player.ServerPosition)*(float) rangeLeft;                    _qe.From = startPos;                  _qe.Delay = E.Delay + Q.Range / E.Speed;                    var qePred = _qe.GetPrediction(qeTarget);                    var poly = new Geometry.Polygon.Rectangle(startPos' endPos' _qe.Width);                    if (!poly.IsInside(qePred.UnitPosition))                      return;                    poly.Draw(Color.LawnGreen);                    if (qePred.Hitchance >= HitChanceManager.GetQEHitChance(source))                  {                      Q.Cast(startPos);                      W.LastCastAttemptT = Utils.TickCount + 500;                      _qe.LastCastAttemptT = Utils.TickCount;                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Cast_QE,The following statement contains a magic number: if (qTarget.IsValidTarget(E.Range))              {                  var pred = Q.GetPrediction(qTarget);                    if (pred.Hitchance >= HitChanceManager.GetQEHitChance(source))                  {                      Q.Cast(pred.CastPosition);                      W.LastCastAttemptT = Utils.TickCount + 500;                      _qe.LastCastAttemptT = Utils.TickCount;                  }              }              else              {                  var startPos = Player.ServerPosition.To2D().Extend(qeTarget.ServerPosition.To2D()' Q.Range).To3D();                  double rangeLeft = 100 + (-0.6*Player.Distance(startPos) + 950);                  var endPos = startPos + Vector3.Normalize(startPos - Player.ServerPosition)*(float) rangeLeft;                    _qe.From = startPos;                  _qe.Delay = E.Delay + Q.Range / E.Speed;                    var qePred = _qe.GetPrediction(qeTarget);                    var poly = new Geometry.Polygon.Rectangle(startPos' endPos' _qe.Width);                    if (!poly.IsInside(qePred.UnitPosition))                      return;                    poly.Draw(Color.LawnGreen);                    if (qePred.Hitchance >= HitChanceManager.GetQEHitChance(source))                  {                      Q.Cast(startPos);                      W.LastCastAttemptT = Utils.TickCount + 500;                      _qe.LastCastAttemptT = Utils.TickCount;                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Game_OnGameUpdate,The following statement contains a magic number: if (R.IsReady())                  R.Range = R.Level == 3 ? 750f : 675f;
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Game_OnGameUpdate,The following statement contains a magic number: if (E.IsReady())                  E.Width = E.Level == 5 ? 45f : (float)(45 * 0.5);
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Game_OnGameUpdate,The following statement contains a magic number: if (E.IsReady())                  E.Width = E.Level == 5 ? 45f : (float)(45 * 0.5);
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Game_OnGameUpdate,The following statement contains a magic number: if (E.IsReady())                  E.Width = E.Level == 5 ? 45f : (float)(45 * 0.5);
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Game_OnGameUpdate,The following statement contains a magic number: if (menu.Item("Misc_QE_Mouse2"' true).GetValue<KeyBind>().Active)              {                  var startPos = Player.ServerPosition + Vector3.Normalize(Game.CursorPos - Player.ServerPosition) * (E.Range - 100);                  Q.Cast(startPos);                  W.LastCastAttemptT = Utils.TickCount + 500;                  _qe.LastCastAttemptT = Utils.TickCount;              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Game_OnGameUpdate,The following statement contains a magic number: if (menu.Item("Misc_QE_Mouse2"' true).GetValue<KeyBind>().Active)              {                  var startPos = Player.ServerPosition + Vector3.Normalize(Game.CursorPos - Player.ServerPosition) * (E.Range - 100);                  Q.Cast(startPos);                  W.LastCastAttemptT = Utils.TickCount + 500;                  _qe.LastCastAttemptT = Utils.TickCount;              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_QE_Line"' true).GetValue<bool>())              {                  var qeTarget = TargetSelector.GetTarget(_qe.Range' TargetSelector.DamageType.Magical);                  if (qeTarget == null || !Q.IsReady() || !E.IsReady())                      return;                    var qTarget = TargetSelector.GetTarget(E.Range' TargetSelector.DamageType.Magical);                  if (qTarget.IsValidTarget(E.Range))                  {                      var pred = Q.GetPrediction(qTarget);                        if (pred.Hitchance >= HitChanceManager.GetQEHitChance("Combo"))                      {                          var poly = new Geometry.Polygon.Rectangle(pred.CastPosition' Player.ServerPosition.Extend(pred.CastPosition' _qe.Range)' _qe.Width);                          poly.Draw(Color.LawnGreen);                          var line = new Geometry.Polygon.Line(Player.Position' Player.ServerPosition.Extend(pred.CastPosition' _qe.Range));                          line.Draw(Color.LawnGreen);                          Render.Circle.DrawCircle(pred.CastPosition' Q.Width / 2' Color.Aquamarine);                          Render.Circle.DrawCircle(Player.ServerPosition.Extend(pred.CastPosition' _qe.Range)' Q.Width / 2' Color.SpringGreen);                      }                  }                  else                  {                      var startPos = Player.ServerPosition.To2D().Extend(qeTarget.ServerPosition.To2D()' Q.Range).To3D();                      double rangeLeft = 100 + (-0.6 * Player.Distance(startPos) + 950);                      var endPos = startPos + Vector3.Normalize(startPos - Player.ServerPosition) * (float)rangeLeft;                        _qe.From = startPos;                      _qe.Delay = E.Delay + Q.Range / E.Speed;                        var qePred = _qe.GetPrediction(qeTarget);                        var poly = new Geometry.Polygon.Rectangle(startPos' endPos' _qe.Width);                        if (!poly.IsInside(qePred.UnitPosition))                          return;                        if (qePred.Hitchance >= HitChanceManager.GetQEHitChance("Combo"))                      {                          poly.Draw(Color.LawnGreen);                          var line = new Geometry.Polygon.Line(Player.Position' endPos);                          line.Draw(Color.LawnGreen);                          Render.Circle.DrawCircle(startPos' Q.Width/2' Color.Aquamarine);                          Render.Circle.DrawCircle(endPos' Q.Width/2' Color.SpringGreen);                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_QE_Line"' true).GetValue<bool>())              {                  var qeTarget = TargetSelector.GetTarget(_qe.Range' TargetSelector.DamageType.Magical);                  if (qeTarget == null || !Q.IsReady() || !E.IsReady())                      return;                    var qTarget = TargetSelector.GetTarget(E.Range' TargetSelector.DamageType.Magical);                  if (qTarget.IsValidTarget(E.Range))                  {                      var pred = Q.GetPrediction(qTarget);                        if (pred.Hitchance >= HitChanceManager.GetQEHitChance("Combo"))                      {                          var poly = new Geometry.Polygon.Rectangle(pred.CastPosition' Player.ServerPosition.Extend(pred.CastPosition' _qe.Range)' _qe.Width);                          poly.Draw(Color.LawnGreen);                          var line = new Geometry.Polygon.Line(Player.Position' Player.ServerPosition.Extend(pred.CastPosition' _qe.Range));                          line.Draw(Color.LawnGreen);                          Render.Circle.DrawCircle(pred.CastPosition' Q.Width / 2' Color.Aquamarine);                          Render.Circle.DrawCircle(Player.ServerPosition.Extend(pred.CastPosition' _qe.Range)' Q.Width / 2' Color.SpringGreen);                      }                  }                  else                  {                      var startPos = Player.ServerPosition.To2D().Extend(qeTarget.ServerPosition.To2D()' Q.Range).To3D();                      double rangeLeft = 100 + (-0.6 * Player.Distance(startPos) + 950);                      var endPos = startPos + Vector3.Normalize(startPos - Player.ServerPosition) * (float)rangeLeft;                        _qe.From = startPos;                      _qe.Delay = E.Delay + Q.Range / E.Speed;                        var qePred = _qe.GetPrediction(qeTarget);                        var poly = new Geometry.Polygon.Rectangle(startPos' endPos' _qe.Width);                        if (!poly.IsInside(qePred.UnitPosition))                          return;                        if (qePred.Hitchance >= HitChanceManager.GetQEHitChance("Combo"))                      {                          poly.Draw(Color.LawnGreen);                          var line = new Geometry.Polygon.Line(Player.Position' endPos);                          line.Draw(Color.LawnGreen);                          Render.Circle.DrawCircle(startPos' Q.Width/2' Color.Aquamarine);                          Render.Circle.DrawCircle(endPos' Q.Width/2' Color.SpringGreen);                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_QE_Line"' true).GetValue<bool>())              {                  var qeTarget = TargetSelector.GetTarget(_qe.Range' TargetSelector.DamageType.Magical);                  if (qeTarget == null || !Q.IsReady() || !E.IsReady())                      return;                    var qTarget = TargetSelector.GetTarget(E.Range' TargetSelector.DamageType.Magical);                  if (qTarget.IsValidTarget(E.Range))                  {                      var pred = Q.GetPrediction(qTarget);                        if (pred.Hitchance >= HitChanceManager.GetQEHitChance("Combo"))                      {                          var poly = new Geometry.Polygon.Rectangle(pred.CastPosition' Player.ServerPosition.Extend(pred.CastPosition' _qe.Range)' _qe.Width);                          poly.Draw(Color.LawnGreen);                          var line = new Geometry.Polygon.Line(Player.Position' Player.ServerPosition.Extend(pred.CastPosition' _qe.Range));                          line.Draw(Color.LawnGreen);                          Render.Circle.DrawCircle(pred.CastPosition' Q.Width / 2' Color.Aquamarine);                          Render.Circle.DrawCircle(Player.ServerPosition.Extend(pred.CastPosition' _qe.Range)' Q.Width / 2' Color.SpringGreen);                      }                  }                  else                  {                      var startPos = Player.ServerPosition.To2D().Extend(qeTarget.ServerPosition.To2D()' Q.Range).To3D();                      double rangeLeft = 100 + (-0.6 * Player.Distance(startPos) + 950);                      var endPos = startPos + Vector3.Normalize(startPos - Player.ServerPosition) * (float)rangeLeft;                        _qe.From = startPos;                      _qe.Delay = E.Delay + Q.Range / E.Speed;                        var qePred = _qe.GetPrediction(qeTarget);                        var poly = new Geometry.Polygon.Rectangle(startPos' endPos' _qe.Width);                        if (!poly.IsInside(qePred.UnitPosition))                          return;                        if (qePred.Hitchance >= HitChanceManager.GetQEHitChance("Combo"))                      {                          poly.Draw(Color.LawnGreen);                          var line = new Geometry.Polygon.Line(Player.Position' endPos);                          line.Draw(Color.LawnGreen);                          Render.Circle.DrawCircle(startPos' Q.Width/2' Color.Aquamarine);                          Render.Circle.DrawCircle(endPos' Q.Width/2' Color.SpringGreen);                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_QE_Line"' true).GetValue<bool>())              {                  var qeTarget = TargetSelector.GetTarget(_qe.Range' TargetSelector.DamageType.Magical);                  if (qeTarget == null || !Q.IsReady() || !E.IsReady())                      return;                    var qTarget = TargetSelector.GetTarget(E.Range' TargetSelector.DamageType.Magical);                  if (qTarget.IsValidTarget(E.Range))                  {                      var pred = Q.GetPrediction(qTarget);                        if (pred.Hitchance >= HitChanceManager.GetQEHitChance("Combo"))                      {                          var poly = new Geometry.Polygon.Rectangle(pred.CastPosition' Player.ServerPosition.Extend(pred.CastPosition' _qe.Range)' _qe.Width);                          poly.Draw(Color.LawnGreen);                          var line = new Geometry.Polygon.Line(Player.Position' Player.ServerPosition.Extend(pred.CastPosition' _qe.Range));                          line.Draw(Color.LawnGreen);                          Render.Circle.DrawCircle(pred.CastPosition' Q.Width / 2' Color.Aquamarine);                          Render.Circle.DrawCircle(Player.ServerPosition.Extend(pred.CastPosition' _qe.Range)' Q.Width / 2' Color.SpringGreen);                      }                  }                  else                  {                      var startPos = Player.ServerPosition.To2D().Extend(qeTarget.ServerPosition.To2D()' Q.Range).To3D();                      double rangeLeft = 100 + (-0.6 * Player.Distance(startPos) + 950);                      var endPos = startPos + Vector3.Normalize(startPos - Player.ServerPosition) * (float)rangeLeft;                        _qe.From = startPos;                      _qe.Delay = E.Delay + Q.Range / E.Speed;                        var qePred = _qe.GetPrediction(qeTarget);                        var poly = new Geometry.Polygon.Rectangle(startPos' endPos' _qe.Width);                        if (!poly.IsInside(qePred.UnitPosition))                          return;                        if (qePred.Hitchance >= HitChanceManager.GetQEHitChance("Combo"))                      {                          poly.Draw(Color.LawnGreen);                          var line = new Geometry.Polygon.Line(Player.Position' endPos);                          line.Draw(Color.LawnGreen);                          Render.Circle.DrawCircle(startPos' Q.Width/2' Color.Aquamarine);                          Render.Circle.DrawCircle(endPos' Q.Width/2' Color.SpringGreen);                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_QE_Line"' true).GetValue<bool>())              {                  var qeTarget = TargetSelector.GetTarget(_qe.Range' TargetSelector.DamageType.Magical);                  if (qeTarget == null || !Q.IsReady() || !E.IsReady())                      return;                    var qTarget = TargetSelector.GetTarget(E.Range' TargetSelector.DamageType.Magical);                  if (qTarget.IsValidTarget(E.Range))                  {                      var pred = Q.GetPrediction(qTarget);                        if (pred.Hitchance >= HitChanceManager.GetQEHitChance("Combo"))                      {                          var poly = new Geometry.Polygon.Rectangle(pred.CastPosition' Player.ServerPosition.Extend(pred.CastPosition' _qe.Range)' _qe.Width);                          poly.Draw(Color.LawnGreen);                          var line = new Geometry.Polygon.Line(Player.Position' Player.ServerPosition.Extend(pred.CastPosition' _qe.Range));                          line.Draw(Color.LawnGreen);                          Render.Circle.DrawCircle(pred.CastPosition' Q.Width / 2' Color.Aquamarine);                          Render.Circle.DrawCircle(Player.ServerPosition.Extend(pred.CastPosition' _qe.Range)' Q.Width / 2' Color.SpringGreen);                      }                  }                  else                  {                      var startPos = Player.ServerPosition.To2D().Extend(qeTarget.ServerPosition.To2D()' Q.Range).To3D();                      double rangeLeft = 100 + (-0.6 * Player.Distance(startPos) + 950);                      var endPos = startPos + Vector3.Normalize(startPos - Player.ServerPosition) * (float)rangeLeft;                        _qe.From = startPos;                      _qe.Delay = E.Delay + Q.Range / E.Speed;                        var qePred = _qe.GetPrediction(qeTarget);                        var poly = new Geometry.Polygon.Rectangle(startPos' endPos' _qe.Width);                        if (!poly.IsInside(qePred.UnitPosition))                          return;                        if (qePred.Hitchance >= HitChanceManager.GetQEHitChance("Combo"))                      {                          poly.Draw(Color.LawnGreen);                          var line = new Geometry.Polygon.Line(Player.Position' endPos);                          line.Draw(Color.LawnGreen);                          Render.Circle.DrawCircle(startPos' Q.Width/2' Color.Aquamarine);                          Render.Circle.DrawCircle(endPos' Q.Width/2' Color.SpringGreen);                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_QE_Line"' true).GetValue<bool>())              {                  var qeTarget = TargetSelector.GetTarget(_qe.Range' TargetSelector.DamageType.Magical);                  if (qeTarget == null || !Q.IsReady() || !E.IsReady())                      return;                    var qTarget = TargetSelector.GetTarget(E.Range' TargetSelector.DamageType.Magical);                  if (qTarget.IsValidTarget(E.Range))                  {                      var pred = Q.GetPrediction(qTarget);                        if (pred.Hitchance >= HitChanceManager.GetQEHitChance("Combo"))                      {                          var poly = new Geometry.Polygon.Rectangle(pred.CastPosition' Player.ServerPosition.Extend(pred.CastPosition' _qe.Range)' _qe.Width);                          poly.Draw(Color.LawnGreen);                          var line = new Geometry.Polygon.Line(Player.Position' Player.ServerPosition.Extend(pred.CastPosition' _qe.Range));                          line.Draw(Color.LawnGreen);                          Render.Circle.DrawCircle(pred.CastPosition' Q.Width / 2' Color.Aquamarine);                          Render.Circle.DrawCircle(Player.ServerPosition.Extend(pred.CastPosition' _qe.Range)' Q.Width / 2' Color.SpringGreen);                      }                  }                  else                  {                      var startPos = Player.ServerPosition.To2D().Extend(qeTarget.ServerPosition.To2D()' Q.Range).To3D();                      double rangeLeft = 100 + (-0.6 * Player.Distance(startPos) + 950);                      var endPos = startPos + Vector3.Normalize(startPos - Player.ServerPosition) * (float)rangeLeft;                        _qe.From = startPos;                      _qe.Delay = E.Delay + Q.Range / E.Speed;                        var qePred = _qe.GetPrediction(qeTarget);                        var poly = new Geometry.Polygon.Rectangle(startPos' endPos' _qe.Width);                        if (!poly.IsInside(qePred.UnitPosition))                          return;                        if (qePred.Hitchance >= HitChanceManager.GetQEHitChance("Combo"))                      {                          poly.Draw(Color.LawnGreen);                          var line = new Geometry.Polygon.Line(Player.Position' endPos);                          line.Draw(Color.LawnGreen);                          Render.Circle.DrawCircle(startPos' Q.Width/2' Color.Aquamarine);                          Render.Circle.DrawCircle(endPos' Q.Width/2' Color.SpringGreen);                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_QE_Line"' true).GetValue<bool>())              {                  var qeTarget = TargetSelector.GetTarget(_qe.Range' TargetSelector.DamageType.Magical);                  if (qeTarget == null || !Q.IsReady() || !E.IsReady())                      return;                    var qTarget = TargetSelector.GetTarget(E.Range' TargetSelector.DamageType.Magical);                  if (qTarget.IsValidTarget(E.Range))                  {                      var pred = Q.GetPrediction(qTarget);                        if (pred.Hitchance >= HitChanceManager.GetQEHitChance("Combo"))                      {                          var poly = new Geometry.Polygon.Rectangle(pred.CastPosition' Player.ServerPosition.Extend(pred.CastPosition' _qe.Range)' _qe.Width);                          poly.Draw(Color.LawnGreen);                          var line = new Geometry.Polygon.Line(Player.Position' Player.ServerPosition.Extend(pred.CastPosition' _qe.Range));                          line.Draw(Color.LawnGreen);                          Render.Circle.DrawCircle(pred.CastPosition' Q.Width / 2' Color.Aquamarine);                          Render.Circle.DrawCircle(Player.ServerPosition.Extend(pred.CastPosition' _qe.Range)' Q.Width / 2' Color.SpringGreen);                      }                  }                  else                  {                      var startPos = Player.ServerPosition.To2D().Extend(qeTarget.ServerPosition.To2D()' Q.Range).To3D();                      double rangeLeft = 100 + (-0.6 * Player.Distance(startPos) + 950);                      var endPos = startPos + Vector3.Normalize(startPos - Player.ServerPosition) * (float)rangeLeft;                        _qe.From = startPos;                      _qe.Delay = E.Delay + Q.Range / E.Speed;                        var qePred = _qe.GetPrediction(qeTarget);                        var poly = new Geometry.Polygon.Rectangle(startPos' endPos' _qe.Width);                        if (!poly.IsInside(qePred.UnitPosition))                          return;                        if (qePred.Hitchance >= HitChanceManager.GetQEHitChance("Combo"))                      {                          poly.Draw(Color.LawnGreen);                          var line = new Geometry.Polygon.Line(Player.Position' endPos);                          line.Draw(Color.LawnGreen);                          Render.Circle.DrawCircle(startPos' Q.Width/2' Color.Aquamarine);                          Render.Circle.DrawCircle(endPos' Q.Width/2' Color.SpringGreen);                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_R_Killable"' true).GetValue<bool>() && R.IsReady())              {                  foreach (var wts in from unit in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(2000) && !x.IsDead && x.IsEnemy).OrderByDescending(GetComboDamage)                                      let health = unit.Health + unit.HPRegenRate + 10                                      where Get_Ult_Dmg(unit) > health                                      select Drawing.WorldToScreen(unit.Position))                  {                      Drawing.DrawText(wts[0] - 20' wts[1]' Color.White' "KILL!!!");                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_R_Killable"' true).GetValue<bool>() && R.IsReady())              {                  foreach (var wts in from unit in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(2000) && !x.IsDead && x.IsEnemy).OrderByDescending(GetComboDamage)                                      let health = unit.Health + unit.HPRegenRate + 10                                      where Get_Ult_Dmg(unit) > health                                      select Drawing.WorldToScreen(unit.Position))                  {                      Drawing.DrawText(wts[0] - 20' wts[1]' Color.White' "KILL!!!");                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_R_Killable"' true).GetValue<bool>() && R.IsReady())              {                  foreach (var wts in from unit in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(2000) && !x.IsDead && x.IsEnemy).OrderByDescending(GetComboDamage)                                      let health = unit.Health + unit.HPRegenRate + 10                                      where Get_Ult_Dmg(unit) > health                                      select Drawing.WorldToScreen(unit.Position))                  {                      Drawing.DrawText(wts[0] - 20' wts[1]' Color.White' "KILL!!!");                  }              }
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,AntiGapcloser_OnEnemyGapcloser,The following statement contains a magic number: W.LastCastAttemptT = Utils.TickCount + 500;
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Obj_AI_Base_OnProcessSpellCast,The following statement contains a magic number: if (!unit.IsMe || !E.IsReady() || (spell.SData.Name != "SyndraQ") ||                  Utils.TickCount - _qe.LastCastAttemptT >= 300)                  return;
Magic Number,xSaliceResurrected.Mid,Syndra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Syndra.cs,Obj_AI_Base_OnProcessSpellCast,The following statement contains a magic number: W.LastCastAttemptT = Utils.TickCount + 500;
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadSpells,The following statement contains a magic number: SpellManager.P = new Spell(SpellSlot.E' 3000);
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadSpells,The following statement contains a magic number: SpellManager.Q = new Spell(SpellSlot.Q' 700);
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadSpells,The following statement contains a magic number: SpellManager.W = new Spell(SpellSlot.W' 700);
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadSpells,The following statement contains a magic number: SpellManager.E = new Spell(SpellSlot.E' 540);
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadSpells,The following statement contains a magic number: SpellManager.E2 = new Spell(SpellSlot.E' 700);
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadSpells,The following statement contains a magic number: SpellManager.R = new Spell(SpellSlot.R' 700);
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadSpells,The following statement contains a magic number: SpellManager.Q.SetTargetted(0.25f' 2000);
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadSpells,The following statement contains a magic number: SpellManager.W.SetSkillshot(.25f' 300' float.MaxValue' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadSpells,The following statement contains a magic number: SpellManager.E.SetSkillshot(0.2f' 90' 1000' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadSpells,The following statement contains a magic number: SpellManager.E.SetSkillshot(0.2f' 90' 1000' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadSpells,The following statement contains a magic number: SpellManager.E2.SetSkillshot(0.2f' 90' 1000' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadSpells,The following statement contains a magic number: SpellManager.E2.SetSkillshot(0.2f' 90' 1000' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadSpells,The following statement contains a magic number: SpellManager.P.SetSkillshot(0.2f' 90' 1000' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadSpells,The following statement contains a magic number: SpellManager.P.SetSkillshot(0.2f' 90' 1000' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadSpells,The following statement contains a magic number: SpellManager.R.SetSkillshot(0.25f' 250' float.MaxValue' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("QAARange"' "Q only if in AA Range"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("wSlow"' "Auto W Slow"' true).SetValue(true));                      wMenu.AddItem(new MenuItem("wImmobile"' "Auto W Immobile"' true).SetValue(true));                      wMenu.AddItem(new MenuItem("wDashing"' "Auto W Dashing"' true).SetValue(true));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("Line_If_Enemy_Count"' "Auto E If >= Enemy' 6 = Off"' true).SetValue(new Slider(4' 1' 6)));                      eMenu.AddItem(new MenuItem("Line_If_Enemy_Count_Combo"' "E if >= In Combo' 6 = off"' true).SetValue(new Slider(3' 1' 6)));                      spellMenu.AddSubMenu(eMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("QAARange"' "Q only if in AA Range"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("wSlow"' "Auto W Slow"' true).SetValue(true));                      wMenu.AddItem(new MenuItem("wImmobile"' "Auto W Immobile"' true).SetValue(true));                      wMenu.AddItem(new MenuItem("wDashing"' "Auto W Dashing"' true).SetValue(true));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("Line_If_Enemy_Count"' "Auto E If >= Enemy' 6 = Off"' true).SetValue(new Slider(4' 1' 6)));                      eMenu.AddItem(new MenuItem("Line_If_Enemy_Count_Combo"' "E if >= In Combo' 6 = off"' true).SetValue(new Slider(3' 1' 6)));                      spellMenu.AddSubMenu(eMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("QAARange"' "Q only if in AA Range"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("wSlow"' "Auto W Slow"' true).SetValue(true));                      wMenu.AddItem(new MenuItem("wImmobile"' "Auto W Immobile"' true).SetValue(true));                      wMenu.AddItem(new MenuItem("wDashing"' "Auto W Dashing"' true).SetValue(true));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("Line_If_Enemy_Count"' "Auto E If >= Enemy' 6 = Off"' true).SetValue(new Slider(4' 1' 6)));                      eMenu.AddItem(new MenuItem("Line_If_Enemy_Count_Combo"' "E if >= In Combo' 6 = off"' true).SetValue(new Slider(3' 1' 6)));                      spellMenu.AddSubMenu(eMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("QAARange"' "Q only if in AA Range"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("wSlow"' "Auto W Slow"' true).SetValue(true));                      wMenu.AddItem(new MenuItem("wImmobile"' "Auto W Immobile"' true).SetValue(true));                      wMenu.AddItem(new MenuItem("wDashing"' "Auto W Dashing"' true).SetValue(true));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("Line_If_Enemy_Count"' "Auto E If >= Enemy' 6 = Off"' true).SetValue(new Slider(4' 1' 6)));                      eMenu.AddItem(new MenuItem("Line_If_Enemy_Count_Combo"' "E if >= In Combo' 6 = off"' true).SetValue(new Slider(3' 1' 6)));                      spellMenu.AddSubMenu(eMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseEFarm"' "Use E"' true).SetValue(true));                  farm.AddItem(new MenuItem("MinMinion"' "Min Minion To E >="' true).SetValue(new Slider(3' 1' 5)));                  //add to menu                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseEFarm"' "Use E"' true).SetValue(true));                  farm.AddItem(new MenuItem("MinMinion"' "Min Minion To E >="' true).SetValue(new Slider(3' 1' 5)));                  //add to menu                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E_Pred"' "Draw E Best Line"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E_Pred"' "Draw E Best Line"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E_Pred"' "Draw E Best Line"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E_Pred"' "Draw E Best Line"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,GetComboDamage,The following statement contains a magic number: if (R.IsReady())              {                  damage += Player.GetSpellDamage(enemy' SpellSlot.R);                  damage += 5 * Player.GetSpellDamage(enemy' SpellSlot.R' 1);              }
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,UseSpells,The following statement contains a magic number: if (useE && E.IsReady())              {                  SpellCastManager.CastBestLine(true' E' E2' (int)(E2.Range / 2)' menu' 1' false);              }
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,ShouldW,The following statement contains a magic number: if (Player.Distance(target.ServerPosition) < 300)                  return true;
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,ShouldR,The following statement contains a magic number: if (dmg + 200 > target.Health)                  return true;
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,AutoR,The following statement contains a magic number: if (_rObj != null && Utils.TickCount - _lastR > 200)              {                  foreach (                      Obj_AI_Hero target in                          HeroManager.Enemies                              .Where(x => x.IsValidTarget(3500) && !x.IsDead && x.Health > 0).OrderByDescending(x => x.Distance(_rObj.Position)))                  {                      Player.Spellbook.CastSpell(SpellSlot.R' target.ServerPosition);                      _lastR = Utils.TickCount;                  }              }
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,AutoR,The following statement contains a magic number: if (_rObj != null && Utils.TickCount - _lastR > 200)              {                  foreach (                      Obj_AI_Hero target in                          HeroManager.Enemies                              .Where(x => x.IsValidTarget(3500) && !x.IsDead && x.Health > 0).OrderByDescending(x => x.Distance(_rObj.Position)))                  {                      Player.Spellbook.CastSpell(SpellSlot.R' target.ServerPosition);                      _lastR = Utils.TickCount;                  }              }
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,Game_OnGameUpdate,The following statement contains a magic number: SpellCastManager.CastBestLine(false' E' E2' (int)(E2.Range/2)' menu);
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LastHit,The following statement contains a magic number: if (!OrbwalkManager.CanMove(40)) return;
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LastHit,The following statement contains a magic number: if (Q.IsReady())              {                  foreach (var minion in allMinions)                  {                      if (minion.IsValidTarget() && HealthPrediction.GetHealthPrediction(minion' (int)(Player.Distance(minion) * 1000 / 1400)) < Player.GetSpellDamage(minion' SpellSlot.Q) - 10)                      {                          Q.Cast(minion);                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LastHit,The following statement contains a magic number: if (Q.IsReady())              {                  foreach (var minion in allMinions)                  {                      if (minion.IsValidTarget() && HealthPrediction.GetHealthPrediction(minion' (int)(Player.Distance(minion) * 1000 / 1400)) < Player.GetSpellDamage(minion' SpellSlot.Q) - 10)                      {                          Q.Cast(minion);                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,LastHit,The following statement contains a magic number: if (Q.IsReady())              {                  foreach (var minion in allMinions)                  {                      if (minion.IsValidTarget() && HealthPrediction.GetHealthPrediction(minion' (int)(Player.Distance(minion) * 1000 / 1400)) < Player.GetSpellDamage(minion' SpellSlot.Q) - 10)                      {                          Q.Cast(minion);                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,GetBestLineFarmLocation,The following statement contains a magic number: for (var i = 0; i < max; i++)              {                  for (var j = 0; j < max; j++)                  {                      if (minionPositions[j] != minionPositions[i])                      {                          minionPositions.Add((minionPositions[j] + minionPositions[i]) / 2);                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,Farm,The following statement contains a magic number: if (!OrbwalkManager.CanMove(40)) return;
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,GameObject_OnCreate,The following statement contains a magic number: if (Player.Distance(obj.Position) < 3000)              {                  if (obj.IsValid && obj.Name == "Storm")                  {                      Console.WriteLine(obj.Type);                      _rObj = (Obj_AI_Minion)obj;                  }              }
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,GameObject_OnDelete,The following statement contains a magic number: if (Player.Distance(obj.Position) < 3000)              {                  if (obj.IsValid && obj.Name == "Storm")                  {                      Console.WriteLine(obj.Type);                      _rObj = null;                  }              }
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_W"' true).GetValue<bool>())                  if (W.Level > 0)                      Render.Circle.DrawCircle(Player.Position' W.Range - 2' W.IsReady() ? Color.Green : Color.Red);
Magic Number,xSaliceResurrected.Mid,Viktor,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Viktor.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_E_Pred"' true).GetValue<bool>() && E.IsReady())              {                  SpellCastManager.DrawBestLine(E' E2' (int)(E2.Range / 2)' 1' false);              }
Magic Number,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,LoadSpell,The following statement contains a magic number: SpellManager.Q = new Spell(SpellSlot.Q' 950);
Magic Number,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,LoadSpell,The following statement contains a magic number: SpellManager.W = new Spell(SpellSlot.W' 650);
Magic Number,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,LoadSpell,The following statement contains a magic number: SpellManager.R = new Spell(SpellSlot.R' 175);
Magic Number,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,LoadSpell,The following statement contains a magic number: SpellManager.W.SetSkillshot(.25f' (float)(30 * 0.5)' float.MaxValue' false' SkillshotType.SkillshotCone);
Magic Number,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,LoadSpell,The following statement contains a magic number: SpellManager.W.SetSkillshot(.25f' (float)(30 * 0.5)' float.MaxValue' false' SkillshotType.SkillshotCone);
Magic Number,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,LoadMenu,The following statement contains a magic number: {                  key.AddItem(new MenuItem("ComboActive"' "Combo!"' true).SetValue(new KeyBind(32' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle)));                  key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("flashR"' "Flash R"' true).SetValue(new KeyBind("T".ToCharArray()[0]' KeyBindType.Press)));                  //add to menu                  menu.AddSubMenu(key);              }
Magic Number,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,LoadMenu,The following statement contains a magic number: {                  harass.AddItem(new MenuItem("UseQHarass"' "Use Q"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseWHarass"' "Use W"' true).SetValue(true));                  harass.AddSubMenu(HitChanceManager.AddHitChanceMenuHarass(true' true' false' false));                  ManaManager.AddManaManagertoMenu(harass' "Harass"' 60);                  //add to menu                  menu.AddSubMenu(harass);              }
Magic Number,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseWFarm"' "Use W"' true).SetValue(true));                  ManaManager.AddManaManagertoMenu(farm' "Farm"' 50);                  //add to menu                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,UseSpells,The following statement contains a magic number: if (itemTarget != null)              {                  var dmg = GetComboDamage(itemTarget);                  ItemManager.Target = itemTarget;                    //see if killable                  if (dmg > itemTarget.Health - 50)                      ItemManager.KillableTarget = true;                    ItemManager.UseTargetted = true;              }
Magic Number,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,UseSpells,The following statement contains a magic number: if (useQ && Q.IsReady())              {                  var target = TargetSelector.GetTarget(Q.Range' TargetSelector.DamageType.Magical);                  if (target.IsValidTarget(Q.Range))                  {                      var pred = Prediction.GetPrediction(target' 625);                        if (pred.Hitchance >= HitChanceManager.GetQHitChance(source) && target.IsMoving)                          Q.Cast(pred.UnitPosition);                  }              }
Magic Number,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,CheckKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(Q.Range)).OrderByDescending(GetComboDamage))              {                  //Q + W                  if (Player.Distance(target.ServerPosition) <= W.Range && Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.W) > target.Health && Q.IsReady() && W.IsReady())                  {                      Q.Cast(target);                      W.Cast(target);                      return;                  }                    //Q                  if (Player.Distance(target.ServerPosition) <= Q.Range && Player.GetSpellDamage(target' SpellSlot.Q) > target.Health && Q.IsReady())                  {                      Q.Cast(target);                      return;                  }                    //W                  if (Player.Distance(target.ServerPosition) <= W.Range && Player.GetSpellDamage(target' SpellSlot.W) > target.Health && W.IsReady())                  {                      W.Cast(target);                      return;                  }                    //R                  if (Player.Distance(target.ServerPosition) <= GetRealRRange(target) && Player.GetSpellDamage(target' SpellSlot.R) > target.Health && R.IsReady() && menu.Item("R_KS"' true).GetValue<bool>())                  {                      R.Cast(target);                      return;                  }                    //Flash + R                  if (Player.Distance(target.ServerPosition) <= GetRealRRange(target) + 375 && Player.Distance(target.ServerPosition) > GetRealRRange(target) + 25                      && R.IsReady() && SummonerManager.Flash_Ready() && menu.Item("R_KS2"' true).GetValue<bool>())                  {                      if (Player.GetSpellDamage(target' SpellSlot.R) +                          (SummonerManager.Ignite_Ready()                              ? ObjectManager.Player.GetSummonerSpellDamage(target' Damage.SummonerSpell.Ignite) - 20                              : 0) > target.Health)                      {                          CastFlashR(target);                          _lastFlash = Utils.TickCount;                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,CheckKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(Q.Range)).OrderByDescending(GetComboDamage))              {                  //Q + W                  if (Player.Distance(target.ServerPosition) <= W.Range && Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.W) > target.Health && Q.IsReady() && W.IsReady())                  {                      Q.Cast(target);                      W.Cast(target);                      return;                  }                    //Q                  if (Player.Distance(target.ServerPosition) <= Q.Range && Player.GetSpellDamage(target' SpellSlot.Q) > target.Health && Q.IsReady())                  {                      Q.Cast(target);                      return;                  }                    //W                  if (Player.Distance(target.ServerPosition) <= W.Range && Player.GetSpellDamage(target' SpellSlot.W) > target.Health && W.IsReady())                  {                      W.Cast(target);                      return;                  }                    //R                  if (Player.Distance(target.ServerPosition) <= GetRealRRange(target) && Player.GetSpellDamage(target' SpellSlot.R) > target.Health && R.IsReady() && menu.Item("R_KS"' true).GetValue<bool>())                  {                      R.Cast(target);                      return;                  }                    //Flash + R                  if (Player.Distance(target.ServerPosition) <= GetRealRRange(target) + 375 && Player.Distance(target.ServerPosition) > GetRealRRange(target) + 25                      && R.IsReady() && SummonerManager.Flash_Ready() && menu.Item("R_KS2"' true).GetValue<bool>())                  {                      if (Player.GetSpellDamage(target' SpellSlot.R) +                          (SummonerManager.Ignite_Ready()                              ? ObjectManager.Player.GetSummonerSpellDamage(target' Damage.SummonerSpell.Ignite) - 20                              : 0) > target.Health)                      {                          CastFlashR(target);                          _lastFlash = Utils.TickCount;                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,CheckKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(Q.Range)).OrderByDescending(GetComboDamage))              {                  //Q + W                  if (Player.Distance(target.ServerPosition) <= W.Range && Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.W) > target.Health && Q.IsReady() && W.IsReady())                  {                      Q.Cast(target);                      W.Cast(target);                      return;                  }                    //Q                  if (Player.Distance(target.ServerPosition) <= Q.Range && Player.GetSpellDamage(target' SpellSlot.Q) > target.Health && Q.IsReady())                  {                      Q.Cast(target);                      return;                  }                    //W                  if (Player.Distance(target.ServerPosition) <= W.Range && Player.GetSpellDamage(target' SpellSlot.W) > target.Health && W.IsReady())                  {                      W.Cast(target);                      return;                  }                    //R                  if (Player.Distance(target.ServerPosition) <= GetRealRRange(target) && Player.GetSpellDamage(target' SpellSlot.R) > target.Health && R.IsReady() && menu.Item("R_KS"' true).GetValue<bool>())                  {                      R.Cast(target);                      return;                  }                    //Flash + R                  if (Player.Distance(target.ServerPosition) <= GetRealRRange(target) + 375 && Player.Distance(target.ServerPosition) > GetRealRRange(target) + 25                      && R.IsReady() && SummonerManager.Flash_Ready() && menu.Item("R_KS2"' true).GetValue<bool>())                  {                      if (Player.GetSpellDamage(target' SpellSlot.R) +                          (SummonerManager.Ignite_Ready()                              ? ObjectManager.Player.GetSummonerSpellDamage(target' Damage.SummonerSpell.Ignite) - 20                              : 0) > target.Health)                      {                          CastFlashR(target);                          _lastFlash = Utils.TickCount;                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,CastFlashR,The following statement contains a magic number: if (dmg > target.Health - 50)                  ItemManager.KillableTarget = true;
Magic Number,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,CastFlashR,The following statement contains a magic number: Utility.DelayAction.Add(25' () => R.Cast(target));
Magic Number,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,Game_OnGameUpdate,The following statement contains a magic number: if (menu.Item("flashR"' true).GetValue<KeyBind>().Active || Utils.TickCount - _lastFlash < 2500)              {                  OrbwalkManager.Orbwalk(null' Game.CursorPos);                  var target = TargetSelector.GetSelectedTarget();                    if(target != null)                      if(target.IsValidTarget(R.Range + 425 + target.BoundingRadius))                          CastFlashR(TargetSelector.GetSelectedTarget());              }
Magic Number,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,Game_OnGameUpdate,The following statement contains a magic number: if (menu.Item("flashR"' true).GetValue<KeyBind>().Active || Utils.TickCount - _lastFlash < 2500)              {                  OrbwalkManager.Orbwalk(null' Game.CursorPos);                  var target = TargetSelector.GetSelectedTarget();                    if(target != null)                      if(target.IsValidTarget(R.Range + 425 + target.BoundingRadius))                          CastFlashR(TargetSelector.GetSelectedTarget());              }
Magic Number,xSaliceResurrected.Mid,Chogath,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Chogath.cs,AntiGapcloser_OnEnemyGapcloser,The following statement contains a magic number: if (Q.IsReady() && gapcloser.Sender.Distance(Player.Position) < 500)                  Q.Cast(gapcloser.Sender);
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,SetUpSpells,The following statement contains a magic number: SpellManager.Q = new Spell(SpellSlot.Q' 675);
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,SetUpSpells,The following statement contains a magic number: SpellManager.W = new Spell(SpellSlot.W' 375);
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,SetUpSpells,The following statement contains a magic number: SpellManager.E = new Spell(SpellSlot.E' 700);
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,SetUpSpells,The following statement contains a magic number: SpellManager.R = new Spell(SpellSlot.R' 550);
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,SetUpSpells,The following statement contains a magic number: SpellManager.Q.SetTargetted(400' 1400);
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,SetUpSpells,The following statement contains a magic number: SpellManager.Q.SetTargetted(400' 1400);
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,SetUpSpells,The following statement contains a magic number: SpellManager.R.SetCharged("KatarinaR"' "KatarinaR"' 550' 550' 1.0f);
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,SetUpSpells,The following statement contains a magic number: SpellManager.R.SetCharged("KatarinaR"' "KatarinaR"' 550' 550' 1.0f);
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The following statement contains a magic number: {                  key.AddItem(new MenuItem("ComboActive"' "Combo!"' true).SetValue(new KeyBind(32' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle)));                  key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("jFarm"' "Jungle Farm"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("lastHit"' "Lasthit!"' true).SetValue(new KeyBind("A".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("Wardjump"' "Escape/Ward jump"' true).SetValue(new KeyBind("Z".ToCharArray()[0]' KeyBindType.Press)));                  //add to menu                  menu.AddSubMenu(key);              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The following statement contains a magic number: {                  combo.AddItem(new MenuItem("UseQCombo"' "Use Q"' true).SetValue(true));                  combo.AddItem(new MenuItem("UseWCombo"' "Use W"' true).SetValue(true));                  combo.AddItem(new MenuItem("UseECombo"' "Use E"' true).SetValue(true));                  combo.AddItem(new MenuItem("eDis"' "E only if >"' true).SetValue(new Slider(0' 0' 700)));                  combo.AddItem(new MenuItem("smartE"' "Smart E with R CD "' true).SetValue(false));                  combo.AddItem(new MenuItem("UseRCombo"' "Use R"' true).SetValue(true));                  combo.AddItem(new MenuItem("comboMode"' "Mode"' true).SetValue(new StringList(new[] { "QEW"' "EQW" })));                  //add to menu                  menu.AddSubMenu(combo);              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The following statement contains a magic number: {                  harass.AddItem(new MenuItem("UseQHarass"' "Use Q"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseWHarass"' "Use W"' true).SetValue(false));                  harass.AddItem(new MenuItem("UseEHarass"' "Use E"' true).SetValue(true));                  harass.AddItem(new MenuItem("harassMode"' "Mode"' true).SetValue(new StringList(new[] { "QEW"' "EQW"' "QW" }' 2)));                  //add to menu                  menu.AddSubMenu(harass);              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The following statement contains a magic number: {                  misc.AddItem(new MenuItem("waitQ"' "Wait For Q Mark to W"' true).SetValue(true));                  misc.AddItem(new MenuItem("autoWz"' "Auto W Enemy"' true).SetValue(true));                  misc.AddItem(new MenuItem("E_Delay_Slider"' "Delay Between E(ms)"' true).SetValue(new Slider(0' 0' 1000)));                  //add to menu                  menu.AddSubMenu(misc);              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("Draw_Mode"' "Draw E Mode"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("Draw_Mode"' "Draw E Mode"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("Draw_Mode"' "Draw E Mode"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("Draw_Mode"' "Draw E Mode"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("Draw_Mode"' "Draw E Mode"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("Draw_Mode"' "Draw E Mode"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("Draw_Mode"' "Draw E Mode"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("Draw_Mode"' "Draw E Mode"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("Draw_Mode"' "Draw E Mode"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("Draw_Mode"' "Draw E Mode"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("Draw_Mode"' "Draw E Mode"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("Draw_Mode"' "Draw E Mode"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("Draw_Mode"' "Draw E Mode"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("Draw_Mode"' "Draw E Mode"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("Draw_Mode"' "Draw E Mode"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("Draw_Mode"' "Draw E Mode"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("Draw_Mode"' "Draw E Mode"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("Draw_Mode"' "Draw E Mode"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("Draw_Mode"' "Draw E Mode"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,GetComboDamage,The following statement contains a magic number: if (R.IsReady() || (RSpell.State == SpellState.Surpressed && R.Level > 0))                  damage += Player.GetSpellDamage(enemy' SpellSlot.R) * 8;
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,Combo,The following statement contains a magic number: if (!target.HasBuffOfType(BuffType.Invulnerability) && !target.IsZombie)              {                  if (mode == 0) //qwe                  {                      //items                        var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                      if (itemTarget != null && E.IsReady())                      {                          var dmg = GetComboDamage(itemTarget);                          ItemManager.Target = itemTarget;                            //see if killable                          if (dmg > itemTarget.Health - 50)                              ItemManager.KillableTarget = true;                            ItemManager.UseTargetted = true;                      }                          if (useQ && Q.IsReady() && Player.Distance(target.Position) <= Q.Range)                      {                          Q.Cast(target);                      }                        if (useE && E.IsReady() && Player.Distance(target.Position) < E.Range && Utils.TickCount - E.LastCastAttemptT > 0 &&                          Player.Distance(target.Position) > eDis && !Q.IsReady())                      {                          if (menu.Item("smartE"' true).GetValue<bool>() &&                              Player.CountEnemiesInRange(500) > 2 &&                              (!R.IsReady() || !(RSpell.State == SpellState.Surpressed && R.Level > 0)))                              return;                            var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                          OrbwalkManager.SetAttack(false);                          OrbwalkManager.SetMovement(false);                          E.Cast(target);                          E.LastCastAttemptT = Utils.TickCount + delay;                      }                  }                  else if (mode == 1) //eqw                  {                      //items                      var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                      if (itemTarget != null && E.IsReady())                      {                          var dmg = GetComboDamage(itemTarget);                          ItemManager.Target = itemTarget;                            //see if killable                          if (dmg > itemTarget.Health - 50)                              ItemManager.KillableTarget = true;                            ItemManager.UseTargetted = true;                      }                        if (useE && E.IsReady() && Player.Distance(target.Position) < E.Range && Utils.TickCount - E.LastCastAttemptT > 0 &&                          Player.Distance(target.Position) > eDis)                      {                          if (menu.Item("smartE"' true).GetValue<bool>() &&                              Player.CountEnemiesInRange(500) > 2 &&                              (!R.IsReady() || !(RSpell.State == SpellState.Surpressed && R.Level > 0)))                              return;                            var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                          OrbwalkManager.SetAttack(false);                          OrbwalkManager.SetMovement(false);                          E.Cast(target);                          E.LastCastAttemptT = Utils.TickCount + delay;                      }                        if (useQ && Q.IsReady() && Player.Distance(target.Position) <= Q.Range)                      {                          Q.Cast(target);                      }                  }                    if (useW && W.IsReady() && Player.Distance(target.Position) <= W.Range && QSuccessfullyCasted())                  {                      W.Cast();                  }                    if (useR && R.IsReady() &&                      Player.CountEnemiesInRange(R.Range) > 0)                  {                      if (!Q.IsReady() && !E.IsReady() && !W.IsReady())                      {                          OrbwalkManager.SetAttack(false);                          OrbwalkManager.SetMovement(false);                          R.Cast();                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,Combo,The following statement contains a magic number: if (!target.HasBuffOfType(BuffType.Invulnerability) && !target.IsZombie)              {                  if (mode == 0) //qwe                  {                      //items                        var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                      if (itemTarget != null && E.IsReady())                      {                          var dmg = GetComboDamage(itemTarget);                          ItemManager.Target = itemTarget;                            //see if killable                          if (dmg > itemTarget.Health - 50)                              ItemManager.KillableTarget = true;                            ItemManager.UseTargetted = true;                      }                          if (useQ && Q.IsReady() && Player.Distance(target.Position) <= Q.Range)                      {                          Q.Cast(target);                      }                        if (useE && E.IsReady() && Player.Distance(target.Position) < E.Range && Utils.TickCount - E.LastCastAttemptT > 0 &&                          Player.Distance(target.Position) > eDis && !Q.IsReady())                      {                          if (menu.Item("smartE"' true).GetValue<bool>() &&                              Player.CountEnemiesInRange(500) > 2 &&                              (!R.IsReady() || !(RSpell.State == SpellState.Surpressed && R.Level > 0)))                              return;                            var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                          OrbwalkManager.SetAttack(false);                          OrbwalkManager.SetMovement(false);                          E.Cast(target);                          E.LastCastAttemptT = Utils.TickCount + delay;                      }                  }                  else if (mode == 1) //eqw                  {                      //items                      var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                      if (itemTarget != null && E.IsReady())                      {                          var dmg = GetComboDamage(itemTarget);                          ItemManager.Target = itemTarget;                            //see if killable                          if (dmg > itemTarget.Health - 50)                              ItemManager.KillableTarget = true;                            ItemManager.UseTargetted = true;                      }                        if (useE && E.IsReady() && Player.Distance(target.Position) < E.Range && Utils.TickCount - E.LastCastAttemptT > 0 &&                          Player.Distance(target.Position) > eDis)                      {                          if (menu.Item("smartE"' true).GetValue<bool>() &&                              Player.CountEnemiesInRange(500) > 2 &&                              (!R.IsReady() || !(RSpell.State == SpellState.Surpressed && R.Level > 0)))                              return;                            var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                          OrbwalkManager.SetAttack(false);                          OrbwalkManager.SetMovement(false);                          E.Cast(target);                          E.LastCastAttemptT = Utils.TickCount + delay;                      }                        if (useQ && Q.IsReady() && Player.Distance(target.Position) <= Q.Range)                      {                          Q.Cast(target);                      }                  }                    if (useW && W.IsReady() && Player.Distance(target.Position) <= W.Range && QSuccessfullyCasted())                  {                      W.Cast();                  }                    if (useR && R.IsReady() &&                      Player.CountEnemiesInRange(R.Range) > 0)                  {                      if (!Q.IsReady() && !E.IsReady() && !W.IsReady())                      {                          OrbwalkManager.SetAttack(false);                          OrbwalkManager.SetMovement(false);                          R.Cast();                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,Combo,The following statement contains a magic number: if (!target.HasBuffOfType(BuffType.Invulnerability) && !target.IsZombie)              {                  if (mode == 0) //qwe                  {                      //items                        var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                      if (itemTarget != null && E.IsReady())                      {                          var dmg = GetComboDamage(itemTarget);                          ItemManager.Target = itemTarget;                            //see if killable                          if (dmg > itemTarget.Health - 50)                              ItemManager.KillableTarget = true;                            ItemManager.UseTargetted = true;                      }                          if (useQ && Q.IsReady() && Player.Distance(target.Position) <= Q.Range)                      {                          Q.Cast(target);                      }                        if (useE && E.IsReady() && Player.Distance(target.Position) < E.Range && Utils.TickCount - E.LastCastAttemptT > 0 &&                          Player.Distance(target.Position) > eDis && !Q.IsReady())                      {                          if (menu.Item("smartE"' true).GetValue<bool>() &&                              Player.CountEnemiesInRange(500) > 2 &&                              (!R.IsReady() || !(RSpell.State == SpellState.Surpressed && R.Level > 0)))                              return;                            var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                          OrbwalkManager.SetAttack(false);                          OrbwalkManager.SetMovement(false);                          E.Cast(target);                          E.LastCastAttemptT = Utils.TickCount + delay;                      }                  }                  else if (mode == 1) //eqw                  {                      //items                      var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                      if (itemTarget != null && E.IsReady())                      {                          var dmg = GetComboDamage(itemTarget);                          ItemManager.Target = itemTarget;                            //see if killable                          if (dmg > itemTarget.Health - 50)                              ItemManager.KillableTarget = true;                            ItemManager.UseTargetted = true;                      }                        if (useE && E.IsReady() && Player.Distance(target.Position) < E.Range && Utils.TickCount - E.LastCastAttemptT > 0 &&                          Player.Distance(target.Position) > eDis)                      {                          if (menu.Item("smartE"' true).GetValue<bool>() &&                              Player.CountEnemiesInRange(500) > 2 &&                              (!R.IsReady() || !(RSpell.State == SpellState.Surpressed && R.Level > 0)))                              return;                            var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                          OrbwalkManager.SetAttack(false);                          OrbwalkManager.SetMovement(false);                          E.Cast(target);                          E.LastCastAttemptT = Utils.TickCount + delay;                      }                        if (useQ && Q.IsReady() && Player.Distance(target.Position) <= Q.Range)                      {                          Q.Cast(target);                      }                  }                    if (useW && W.IsReady() && Player.Distance(target.Position) <= W.Range && QSuccessfullyCasted())                  {                      W.Cast();                  }                    if (useR && R.IsReady() &&                      Player.CountEnemiesInRange(R.Range) > 0)                  {                      if (!Q.IsReady() && !E.IsReady() && !W.IsReady())                      {                          OrbwalkManager.SetAttack(false);                          OrbwalkManager.SetMovement(false);                          R.Cast();                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,Combo,The following statement contains a magic number: if (!target.HasBuffOfType(BuffType.Invulnerability) && !target.IsZombie)              {                  if (mode == 0) //qwe                  {                      //items                        var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                      if (itemTarget != null && E.IsReady())                      {                          var dmg = GetComboDamage(itemTarget);                          ItemManager.Target = itemTarget;                            //see if killable                          if (dmg > itemTarget.Health - 50)                              ItemManager.KillableTarget = true;                            ItemManager.UseTargetted = true;                      }                          if (useQ && Q.IsReady() && Player.Distance(target.Position) <= Q.Range)                      {                          Q.Cast(target);                      }                        if (useE && E.IsReady() && Player.Distance(target.Position) < E.Range && Utils.TickCount - E.LastCastAttemptT > 0 &&                          Player.Distance(target.Position) > eDis && !Q.IsReady())                      {                          if (menu.Item("smartE"' true).GetValue<bool>() &&                              Player.CountEnemiesInRange(500) > 2 &&                              (!R.IsReady() || !(RSpell.State == SpellState.Surpressed && R.Level > 0)))                              return;                            var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                          OrbwalkManager.SetAttack(false);                          OrbwalkManager.SetMovement(false);                          E.Cast(target);                          E.LastCastAttemptT = Utils.TickCount + delay;                      }                  }                  else if (mode == 1) //eqw                  {                      //items                      var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                      if (itemTarget != null && E.IsReady())                      {                          var dmg = GetComboDamage(itemTarget);                          ItemManager.Target = itemTarget;                            //see if killable                          if (dmg > itemTarget.Health - 50)                              ItemManager.KillableTarget = true;                            ItemManager.UseTargetted = true;                      }                        if (useE && E.IsReady() && Player.Distance(target.Position) < E.Range && Utils.TickCount - E.LastCastAttemptT > 0 &&                          Player.Distance(target.Position) > eDis)                      {                          if (menu.Item("smartE"' true).GetValue<bool>() &&                              Player.CountEnemiesInRange(500) > 2 &&                              (!R.IsReady() || !(RSpell.State == SpellState.Surpressed && R.Level > 0)))                              return;                            var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                          OrbwalkManager.SetAttack(false);                          OrbwalkManager.SetMovement(false);                          E.Cast(target);                          E.LastCastAttemptT = Utils.TickCount + delay;                      }                        if (useQ && Q.IsReady() && Player.Distance(target.Position) <= Q.Range)                      {                          Q.Cast(target);                      }                  }                    if (useW && W.IsReady() && Player.Distance(target.Position) <= W.Range && QSuccessfullyCasted())                  {                      W.Cast();                  }                    if (useR && R.IsReady() &&                      Player.CountEnemiesInRange(R.Range) > 0)                  {                      if (!Q.IsReady() && !E.IsReady() && !W.IsReady())                      {                          OrbwalkManager.SetAttack(false);                          OrbwalkManager.SetMovement(false);                          R.Cast();                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,Combo,The following statement contains a magic number: if (!target.HasBuffOfType(BuffType.Invulnerability) && !target.IsZombie)              {                  if (mode == 0) //qwe                  {                      //items                        var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                      if (itemTarget != null && E.IsReady())                      {                          var dmg = GetComboDamage(itemTarget);                          ItemManager.Target = itemTarget;                            //see if killable                          if (dmg > itemTarget.Health - 50)                              ItemManager.KillableTarget = true;                            ItemManager.UseTargetted = true;                      }                          if (useQ && Q.IsReady() && Player.Distance(target.Position) <= Q.Range)                      {                          Q.Cast(target);                      }                        if (useE && E.IsReady() && Player.Distance(target.Position) < E.Range && Utils.TickCount - E.LastCastAttemptT > 0 &&                          Player.Distance(target.Position) > eDis && !Q.IsReady())                      {                          if (menu.Item("smartE"' true).GetValue<bool>() &&                              Player.CountEnemiesInRange(500) > 2 &&                              (!R.IsReady() || !(RSpell.State == SpellState.Surpressed && R.Level > 0)))                              return;                            var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                          OrbwalkManager.SetAttack(false);                          OrbwalkManager.SetMovement(false);                          E.Cast(target);                          E.LastCastAttemptT = Utils.TickCount + delay;                      }                  }                  else if (mode == 1) //eqw                  {                      //items                      var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                      if (itemTarget != null && E.IsReady())                      {                          var dmg = GetComboDamage(itemTarget);                          ItemManager.Target = itemTarget;                            //see if killable                          if (dmg > itemTarget.Health - 50)                              ItemManager.KillableTarget = true;                            ItemManager.UseTargetted = true;                      }                        if (useE && E.IsReady() && Player.Distance(target.Position) < E.Range && Utils.TickCount - E.LastCastAttemptT > 0 &&                          Player.Distance(target.Position) > eDis)                      {                          if (menu.Item("smartE"' true).GetValue<bool>() &&                              Player.CountEnemiesInRange(500) > 2 &&                              (!R.IsReady() || !(RSpell.State == SpellState.Surpressed && R.Level > 0)))                              return;                            var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                          OrbwalkManager.SetAttack(false);                          OrbwalkManager.SetMovement(false);                          E.Cast(target);                          E.LastCastAttemptT = Utils.TickCount + delay;                      }                        if (useQ && Q.IsReady() && Player.Distance(target.Position) <= Q.Range)                      {                          Q.Cast(target);                      }                  }                    if (useW && W.IsReady() && Player.Distance(target.Position) <= W.Range && QSuccessfullyCasted())                  {                      W.Cast();                  }                    if (useR && R.IsReady() &&                      Player.CountEnemiesInRange(R.Range) > 0)                  {                      if (!Q.IsReady() && !E.IsReady() && !W.IsReady())                      {                          OrbwalkManager.SetAttack(false);                          OrbwalkManager.SetMovement(false);                          R.Cast();                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,Combo,The following statement contains a magic number: if (!target.HasBuffOfType(BuffType.Invulnerability) && !target.IsZombie)              {                  if (mode == 0) //qwe                  {                      //items                        var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                      if (itemTarget != null && E.IsReady())                      {                          var dmg = GetComboDamage(itemTarget);                          ItemManager.Target = itemTarget;                            //see if killable                          if (dmg > itemTarget.Health - 50)                              ItemManager.KillableTarget = true;                            ItemManager.UseTargetted = true;                      }                          if (useQ && Q.IsReady() && Player.Distance(target.Position) <= Q.Range)                      {                          Q.Cast(target);                      }                        if (useE && E.IsReady() && Player.Distance(target.Position) < E.Range && Utils.TickCount - E.LastCastAttemptT > 0 &&                          Player.Distance(target.Position) > eDis && !Q.IsReady())                      {                          if (menu.Item("smartE"' true).GetValue<bool>() &&                              Player.CountEnemiesInRange(500) > 2 &&                              (!R.IsReady() || !(RSpell.State == SpellState.Surpressed && R.Level > 0)))                              return;                            var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                          OrbwalkManager.SetAttack(false);                          OrbwalkManager.SetMovement(false);                          E.Cast(target);                          E.LastCastAttemptT = Utils.TickCount + delay;                      }                  }                  else if (mode == 1) //eqw                  {                      //items                      var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                      if (itemTarget != null && E.IsReady())                      {                          var dmg = GetComboDamage(itemTarget);                          ItemManager.Target = itemTarget;                            //see if killable                          if (dmg > itemTarget.Health - 50)                              ItemManager.KillableTarget = true;                            ItemManager.UseTargetted = true;                      }                        if (useE && E.IsReady() && Player.Distance(target.Position) < E.Range && Utils.TickCount - E.LastCastAttemptT > 0 &&                          Player.Distance(target.Position) > eDis)                      {                          if (menu.Item("smartE"' true).GetValue<bool>() &&                              Player.CountEnemiesInRange(500) > 2 &&                              (!R.IsReady() || !(RSpell.State == SpellState.Surpressed && R.Level > 0)))                              return;                            var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                          OrbwalkManager.SetAttack(false);                          OrbwalkManager.SetMovement(false);                          E.Cast(target);                          E.LastCastAttemptT = Utils.TickCount + delay;                      }                        if (useQ && Q.IsReady() && Player.Distance(target.Position) <= Q.Range)                      {                          Q.Cast(target);                      }                  }                    if (useW && W.IsReady() && Player.Distance(target.Position) <= W.Range && QSuccessfullyCasted())                  {                      W.Cast();                  }                    if (useR && R.IsReady() &&                      Player.CountEnemiesInRange(R.Range) > 0)                  {                      if (!Q.IsReady() && !E.IsReady() && !W.IsReady())                      {                          OrbwalkManager.SetAttack(false);                          OrbwalkManager.SetMovement(false);                          R.Cast();                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,Combo,The following statement contains a magic number: if (!target.HasBuffOfType(BuffType.Invulnerability) && !target.IsZombie)              {                  if (mode == 0) //qwe                  {                      //items                        var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                      if (itemTarget != null && E.IsReady())                      {                          var dmg = GetComboDamage(itemTarget);                          ItemManager.Target = itemTarget;                            //see if killable                          if (dmg > itemTarget.Health - 50)                              ItemManager.KillableTarget = true;                            ItemManager.UseTargetted = true;                      }                          if (useQ && Q.IsReady() && Player.Distance(target.Position) <= Q.Range)                      {                          Q.Cast(target);                      }                        if (useE && E.IsReady() && Player.Distance(target.Position) < E.Range && Utils.TickCount - E.LastCastAttemptT > 0 &&                          Player.Distance(target.Position) > eDis && !Q.IsReady())                      {                          if (menu.Item("smartE"' true).GetValue<bool>() &&                              Player.CountEnemiesInRange(500) > 2 &&                              (!R.IsReady() || !(RSpell.State == SpellState.Surpressed && R.Level > 0)))                              return;                            var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                          OrbwalkManager.SetAttack(false);                          OrbwalkManager.SetMovement(false);                          E.Cast(target);                          E.LastCastAttemptT = Utils.TickCount + delay;                      }                  }                  else if (mode == 1) //eqw                  {                      //items                      var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                      if (itemTarget != null && E.IsReady())                      {                          var dmg = GetComboDamage(itemTarget);                          ItemManager.Target = itemTarget;                            //see if killable                          if (dmg > itemTarget.Health - 50)                              ItemManager.KillableTarget = true;                            ItemManager.UseTargetted = true;                      }                        if (useE && E.IsReady() && Player.Distance(target.Position) < E.Range && Utils.TickCount - E.LastCastAttemptT > 0 &&                          Player.Distance(target.Position) > eDis)                      {                          if (menu.Item("smartE"' true).GetValue<bool>() &&                              Player.CountEnemiesInRange(500) > 2 &&                              (!R.IsReady() || !(RSpell.State == SpellState.Surpressed && R.Level > 0)))                              return;                            var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                          OrbwalkManager.SetAttack(false);                          OrbwalkManager.SetMovement(false);                          E.Cast(target);                          E.LastCastAttemptT = Utils.TickCount + delay;                      }                        if (useQ && Q.IsReady() && Player.Distance(target.Position) <= Q.Range)                      {                          Q.Cast(target);                      }                  }                    if (useW && W.IsReady() && Player.Distance(target.Position) <= W.Range && QSuccessfullyCasted())                  {                      W.Cast();                  }                    if (useR && R.IsReady() &&                      Player.CountEnemiesInRange(R.Range) > 0)                  {                      if (!Q.IsReady() && !E.IsReady() && !W.IsReady())                      {                          OrbwalkManager.SetAttack(false);                          OrbwalkManager.SetMovement(false);                          R.Cast();                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,Combo,The following statement contains a magic number: if (!target.HasBuffOfType(BuffType.Invulnerability) && !target.IsZombie)              {                  if (mode == 0) //qwe                  {                      //items                        var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                      if (itemTarget != null && E.IsReady())                      {                          var dmg = GetComboDamage(itemTarget);                          ItemManager.Target = itemTarget;                            //see if killable                          if (dmg > itemTarget.Health - 50)                              ItemManager.KillableTarget = true;                            ItemManager.UseTargetted = true;                      }                          if (useQ && Q.IsReady() && Player.Distance(target.Position) <= Q.Range)                      {                          Q.Cast(target);                      }                        if (useE && E.IsReady() && Player.Distance(target.Position) < E.Range && Utils.TickCount - E.LastCastAttemptT > 0 &&                          Player.Distance(target.Position) > eDis && !Q.IsReady())                      {                          if (menu.Item("smartE"' true).GetValue<bool>() &&                              Player.CountEnemiesInRange(500) > 2 &&                              (!R.IsReady() || !(RSpell.State == SpellState.Surpressed && R.Level > 0)))                              return;                            var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                          OrbwalkManager.SetAttack(false);                          OrbwalkManager.SetMovement(false);                          E.Cast(target);                          E.LastCastAttemptT = Utils.TickCount + delay;                      }                  }                  else if (mode == 1) //eqw                  {                      //items                      var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                      if (itemTarget != null && E.IsReady())                      {                          var dmg = GetComboDamage(itemTarget);                          ItemManager.Target = itemTarget;                            //see if killable                          if (dmg > itemTarget.Health - 50)                              ItemManager.KillableTarget = true;                            ItemManager.UseTargetted = true;                      }                        if (useE && E.IsReady() && Player.Distance(target.Position) < E.Range && Utils.TickCount - E.LastCastAttemptT > 0 &&                          Player.Distance(target.Position) > eDis)                      {                          if (menu.Item("smartE"' true).GetValue<bool>() &&                              Player.CountEnemiesInRange(500) > 2 &&                              (!R.IsReady() || !(RSpell.State == SpellState.Surpressed && R.Level > 0)))                              return;                            var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                          OrbwalkManager.SetAttack(false);                          OrbwalkManager.SetMovement(false);                          E.Cast(target);                          E.LastCastAttemptT = Utils.TickCount + delay;                      }                        if (useQ && Q.IsReady() && Player.Distance(target.Position) <= Q.Range)                      {                          Q.Cast(target);                      }                  }                    if (useW && W.IsReady() && Player.Distance(target.Position) <= W.Range && QSuccessfullyCasted())                  {                      W.Cast();                  }                    if (useR && R.IsReady() &&                      Player.CountEnemiesInRange(R.Range) > 0)                  {                      if (!Q.IsReady() && !E.IsReady() && !W.IsReady())                      {                          OrbwalkManager.SetAttack(false);                          OrbwalkManager.SetMovement(false);                          R.Cast();                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,Harass,The following statement contains a magic number: if (mode == 0) //qwe              {                  if (useQ && Q.IsReady() && qTarget != null)                  {                      if (Player.Distance(qTarget.Position) <= Q.Range)                          Q.Cast(qTarget);                  }                    if (useE && eTarget != null && E.IsReady() && !Q.IsReady())                  {                      if (Player.Distance(eTarget.Position) < E.Range)                          E.Cast(eTarget);                  }              }              else if (mode == 1) //eqw              {                  if (useE && eTarget != null && E.IsReady())                  {                      if (Player.Distance(eTarget.Position) < E.Range)                          E.Cast(eTarget);                  }                    if (useQ && Q.IsReady() && qTarget != null)                  {                      if (Player.Distance(qTarget.Position) <= Q.Range)                          Q.Cast(qTarget);                  }              }              else if (mode == 2)              {                  if (useQ && Q.IsReady() && qTarget != null)                  {                      if (Player.Distance(qTarget.Position) <= Q.Range)                          Q.Cast(qTarget);                  }              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LastHit,The following statement contains a magic number: if (Q.IsReady() && useQ)              {                  foreach (Obj_AI_Base minion in allMinions)                  {                      if (minion.IsValidTarget(Q.Range) &&                          HealthPrediction.GetHealthPrediction(minion' (int)(Player.Distance(minion.Position) * 1000 / 1400)' 200) <                          Player.GetSpellDamage(minion' SpellSlot.Q) - 35)                      {                          Q.Cast(minion);                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LastHit,The following statement contains a magic number: if (Q.IsReady() && useQ)              {                  foreach (Obj_AI_Base minion in allMinions)                  {                      if (minion.IsValidTarget(Q.Range) &&                          HealthPrediction.GetHealthPrediction(minion' (int)(Player.Distance(minion.Position) * 1000 / 1400)' 200) <                          Player.GetSpellDamage(minion' SpellSlot.Q) - 35)                      {                          Q.Cast(minion);                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LastHit,The following statement contains a magic number: if (Q.IsReady() && useQ)              {                  foreach (Obj_AI_Base minion in allMinions)                  {                      if (minion.IsValidTarget(Q.Range) &&                          HealthPrediction.GetHealthPrediction(minion' (int)(Player.Distance(minion.Position) * 1000 / 1400)' 200) <                          Player.GetSpellDamage(minion' SpellSlot.Q) - 35)                      {                          Q.Cast(minion);                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LastHit,The following statement contains a magic number: if (Q.IsReady() && useQ)              {                  foreach (Obj_AI_Base minion in allMinions)                  {                      if (minion.IsValidTarget(Q.Range) &&                          HealthPrediction.GetHealthPrediction(minion' (int)(Player.Distance(minion.Position) * 1000 / 1400)' 200) <                          Player.GetSpellDamage(minion' SpellSlot.Q) - 35)                      {                          Q.Cast(minion);                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,LastHit,The following statement contains a magic number: if (W.IsReady() && useW)              {                  if (allMinions.Where(minion => minion.IsValidTarget(W.Range) && minion.Health < Player.GetSpellDamage(minion' SpellSlot.W) + MarkDmg(minion) - 35).Any(minion => Player.Distance(minion.ServerPosition) < W.Range))                  {                      W.Cast();                  }              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,SmartKs,The following statement contains a magic number: if (menu.Item("rCancel"' true).GetValue<bool>() && Player.CountEnemiesInRange(570) > 1)                  return;
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,SmartKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1375) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage))              {                  if (target != null)                  {                      var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                      bool shouldE = !menu.Item("KS_With_E"' true).GetValue<KeyBind>().Active && Utils.TickCount - E.LastCastAttemptT > 0;                      //QEW                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.Q) + MarkDmg(target) +                           Player.GetSpellDamage(target' SpellSlot.W)) > target.Health + 20)                      {                          if (E.IsReady() && Q.IsReady() && W.IsReady())                          {                              CancelUlt(target);                              Q.Cast(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              if (Player.Distance(target.ServerPosition) < W.Range)                                  W.Cast();                              return;                          }                      }                        //E + W                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.W)) >                          target.Health + 20)                      {                          if (E.IsReady() && W.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              if (Player.Distance(target.ServerPosition) < W.Range)                                  W.Cast();                              //Game.PrintChat("ks 5");                              return;                          }                      }                        //E + Q                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.Q)) >                          target.Health + 20)                      {                          if (E.IsReady() && Q.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              Q.Cast(target);                              //Game.PrintChat("ks 6");                              return;                          }                      }                        //Q                      if ((Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 20)                      {                          if (Q.IsReady() && Player.Distance(target.ServerPosition) <= Q.Range)                          {                              CancelUlt(target);                              Q.Cast(target);                              //Game.PrintChat("ks 7");                              return;                          }                          if (Q.IsReady() && E.IsReady() && Player.Distance(target.ServerPosition) <= 1375 &&                              menu.Item("wardKs"' true).GetValue<bool>() &&                              target.CountEnemiesInRange(500) < 3)                          {                              CancelUlt(target);                              WardJumper.JumpKs(target);                              //Game.PrintChat("wardKS!!!!!");                              return;                          }                      }                        //E                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 20)                      {                          if (E.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              //Game.PrintChat("ks 8");                              return;                          }                      }                        //R                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R) * 5) > target.Health + 20 &&                          menu.Item("rKS"' true).GetValue<bool>())                      {                          if (R.IsReady())                          {                              OrbwalkManager.SetAttack(false);                              OrbwalkManager.SetMovement(false);                              R.Cast();                              //Game.PrintChat("ks 8");                              return;                          }                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,SmartKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1375) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage))              {                  if (target != null)                  {                      var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                      bool shouldE = !menu.Item("KS_With_E"' true).GetValue<KeyBind>().Active && Utils.TickCount - E.LastCastAttemptT > 0;                      //QEW                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.Q) + MarkDmg(target) +                           Player.GetSpellDamage(target' SpellSlot.W)) > target.Health + 20)                      {                          if (E.IsReady() && Q.IsReady() && W.IsReady())                          {                              CancelUlt(target);                              Q.Cast(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              if (Player.Distance(target.ServerPosition) < W.Range)                                  W.Cast();                              return;                          }                      }                        //E + W                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.W)) >                          target.Health + 20)                      {                          if (E.IsReady() && W.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              if (Player.Distance(target.ServerPosition) < W.Range)                                  W.Cast();                              //Game.PrintChat("ks 5");                              return;                          }                      }                        //E + Q                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.Q)) >                          target.Health + 20)                      {                          if (E.IsReady() && Q.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              Q.Cast(target);                              //Game.PrintChat("ks 6");                              return;                          }                      }                        //Q                      if ((Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 20)                      {                          if (Q.IsReady() && Player.Distance(target.ServerPosition) <= Q.Range)                          {                              CancelUlt(target);                              Q.Cast(target);                              //Game.PrintChat("ks 7");                              return;                          }                          if (Q.IsReady() && E.IsReady() && Player.Distance(target.ServerPosition) <= 1375 &&                              menu.Item("wardKs"' true).GetValue<bool>() &&                              target.CountEnemiesInRange(500) < 3)                          {                              CancelUlt(target);                              WardJumper.JumpKs(target);                              //Game.PrintChat("wardKS!!!!!");                              return;                          }                      }                        //E                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 20)                      {                          if (E.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              //Game.PrintChat("ks 8");                              return;                          }                      }                        //R                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R) * 5) > target.Health + 20 &&                          menu.Item("rKS"' true).GetValue<bool>())                      {                          if (R.IsReady())                          {                              OrbwalkManager.SetAttack(false);                              OrbwalkManager.SetMovement(false);                              R.Cast();                              //Game.PrintChat("ks 8");                              return;                          }                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,SmartKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1375) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage))              {                  if (target != null)                  {                      var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                      bool shouldE = !menu.Item("KS_With_E"' true).GetValue<KeyBind>().Active && Utils.TickCount - E.LastCastAttemptT > 0;                      //QEW                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.Q) + MarkDmg(target) +                           Player.GetSpellDamage(target' SpellSlot.W)) > target.Health + 20)                      {                          if (E.IsReady() && Q.IsReady() && W.IsReady())                          {                              CancelUlt(target);                              Q.Cast(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              if (Player.Distance(target.ServerPosition) < W.Range)                                  W.Cast();                              return;                          }                      }                        //E + W                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.W)) >                          target.Health + 20)                      {                          if (E.IsReady() && W.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              if (Player.Distance(target.ServerPosition) < W.Range)                                  W.Cast();                              //Game.PrintChat("ks 5");                              return;                          }                      }                        //E + Q                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.Q)) >                          target.Health + 20)                      {                          if (E.IsReady() && Q.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              Q.Cast(target);                              //Game.PrintChat("ks 6");                              return;                          }                      }                        //Q                      if ((Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 20)                      {                          if (Q.IsReady() && Player.Distance(target.ServerPosition) <= Q.Range)                          {                              CancelUlt(target);                              Q.Cast(target);                              //Game.PrintChat("ks 7");                              return;                          }                          if (Q.IsReady() && E.IsReady() && Player.Distance(target.ServerPosition) <= 1375 &&                              menu.Item("wardKs"' true).GetValue<bool>() &&                              target.CountEnemiesInRange(500) < 3)                          {                              CancelUlt(target);                              WardJumper.JumpKs(target);                              //Game.PrintChat("wardKS!!!!!");                              return;                          }                      }                        //E                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 20)                      {                          if (E.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              //Game.PrintChat("ks 8");                              return;                          }                      }                        //R                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R) * 5) > target.Health + 20 &&                          menu.Item("rKS"' true).GetValue<bool>())                      {                          if (R.IsReady())                          {                              OrbwalkManager.SetAttack(false);                              OrbwalkManager.SetMovement(false);                              R.Cast();                              //Game.PrintChat("ks 8");                              return;                          }                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,SmartKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1375) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage))              {                  if (target != null)                  {                      var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                      bool shouldE = !menu.Item("KS_With_E"' true).GetValue<KeyBind>().Active && Utils.TickCount - E.LastCastAttemptT > 0;                      //QEW                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.Q) + MarkDmg(target) +                           Player.GetSpellDamage(target' SpellSlot.W)) > target.Health + 20)                      {                          if (E.IsReady() && Q.IsReady() && W.IsReady())                          {                              CancelUlt(target);                              Q.Cast(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              if (Player.Distance(target.ServerPosition) < W.Range)                                  W.Cast();                              return;                          }                      }                        //E + W                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.W)) >                          target.Health + 20)                      {                          if (E.IsReady() && W.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              if (Player.Distance(target.ServerPosition) < W.Range)                                  W.Cast();                              //Game.PrintChat("ks 5");                              return;                          }                      }                        //E + Q                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.Q)) >                          target.Health + 20)                      {                          if (E.IsReady() && Q.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              Q.Cast(target);                              //Game.PrintChat("ks 6");                              return;                          }                      }                        //Q                      if ((Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 20)                      {                          if (Q.IsReady() && Player.Distance(target.ServerPosition) <= Q.Range)                          {                              CancelUlt(target);                              Q.Cast(target);                              //Game.PrintChat("ks 7");                              return;                          }                          if (Q.IsReady() && E.IsReady() && Player.Distance(target.ServerPosition) <= 1375 &&                              menu.Item("wardKs"' true).GetValue<bool>() &&                              target.CountEnemiesInRange(500) < 3)                          {                              CancelUlt(target);                              WardJumper.JumpKs(target);                              //Game.PrintChat("wardKS!!!!!");                              return;                          }                      }                        //E                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 20)                      {                          if (E.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              //Game.PrintChat("ks 8");                              return;                          }                      }                        //R                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R) * 5) > target.Health + 20 &&                          menu.Item("rKS"' true).GetValue<bool>())                      {                          if (R.IsReady())                          {                              OrbwalkManager.SetAttack(false);                              OrbwalkManager.SetMovement(false);                              R.Cast();                              //Game.PrintChat("ks 8");                              return;                          }                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,SmartKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1375) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage))              {                  if (target != null)                  {                      var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                      bool shouldE = !menu.Item("KS_With_E"' true).GetValue<KeyBind>().Active && Utils.TickCount - E.LastCastAttemptT > 0;                      //QEW                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.Q) + MarkDmg(target) +                           Player.GetSpellDamage(target' SpellSlot.W)) > target.Health + 20)                      {                          if (E.IsReady() && Q.IsReady() && W.IsReady())                          {                              CancelUlt(target);                              Q.Cast(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              if (Player.Distance(target.ServerPosition) < W.Range)                                  W.Cast();                              return;                          }                      }                        //E + W                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.W)) >                          target.Health + 20)                      {                          if (E.IsReady() && W.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              if (Player.Distance(target.ServerPosition) < W.Range)                                  W.Cast();                              //Game.PrintChat("ks 5");                              return;                          }                      }                        //E + Q                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.Q)) >                          target.Health + 20)                      {                          if (E.IsReady() && Q.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              Q.Cast(target);                              //Game.PrintChat("ks 6");                              return;                          }                      }                        //Q                      if ((Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 20)                      {                          if (Q.IsReady() && Player.Distance(target.ServerPosition) <= Q.Range)                          {                              CancelUlt(target);                              Q.Cast(target);                              //Game.PrintChat("ks 7");                              return;                          }                          if (Q.IsReady() && E.IsReady() && Player.Distance(target.ServerPosition) <= 1375 &&                              menu.Item("wardKs"' true).GetValue<bool>() &&                              target.CountEnemiesInRange(500) < 3)                          {                              CancelUlt(target);                              WardJumper.JumpKs(target);                              //Game.PrintChat("wardKS!!!!!");                              return;                          }                      }                        //E                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 20)                      {                          if (E.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              //Game.PrintChat("ks 8");                              return;                          }                      }                        //R                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R) * 5) > target.Health + 20 &&                          menu.Item("rKS"' true).GetValue<bool>())                      {                          if (R.IsReady())                          {                              OrbwalkManager.SetAttack(false);                              OrbwalkManager.SetMovement(false);                              R.Cast();                              //Game.PrintChat("ks 8");                              return;                          }                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,SmartKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1375) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage))              {                  if (target != null)                  {                      var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                      bool shouldE = !menu.Item("KS_With_E"' true).GetValue<KeyBind>().Active && Utils.TickCount - E.LastCastAttemptT > 0;                      //QEW                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.Q) + MarkDmg(target) +                           Player.GetSpellDamage(target' SpellSlot.W)) > target.Health + 20)                      {                          if (E.IsReady() && Q.IsReady() && W.IsReady())                          {                              CancelUlt(target);                              Q.Cast(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              if (Player.Distance(target.ServerPosition) < W.Range)                                  W.Cast();                              return;                          }                      }                        //E + W                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.W)) >                          target.Health + 20)                      {                          if (E.IsReady() && W.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              if (Player.Distance(target.ServerPosition) < W.Range)                                  W.Cast();                              //Game.PrintChat("ks 5");                              return;                          }                      }                        //E + Q                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.Q)) >                          target.Health + 20)                      {                          if (E.IsReady() && Q.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              Q.Cast(target);                              //Game.PrintChat("ks 6");                              return;                          }                      }                        //Q                      if ((Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 20)                      {                          if (Q.IsReady() && Player.Distance(target.ServerPosition) <= Q.Range)                          {                              CancelUlt(target);                              Q.Cast(target);                              //Game.PrintChat("ks 7");                              return;                          }                          if (Q.IsReady() && E.IsReady() && Player.Distance(target.ServerPosition) <= 1375 &&                              menu.Item("wardKs"' true).GetValue<bool>() &&                              target.CountEnemiesInRange(500) < 3)                          {                              CancelUlt(target);                              WardJumper.JumpKs(target);                              //Game.PrintChat("wardKS!!!!!");                              return;                          }                      }                        //E                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 20)                      {                          if (E.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              //Game.PrintChat("ks 8");                              return;                          }                      }                        //R                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R) * 5) > target.Health + 20 &&                          menu.Item("rKS"' true).GetValue<bool>())                      {                          if (R.IsReady())                          {                              OrbwalkManager.SetAttack(false);                              OrbwalkManager.SetMovement(false);                              R.Cast();                              //Game.PrintChat("ks 8");                              return;                          }                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,SmartKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1375) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage))              {                  if (target != null)                  {                      var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                      bool shouldE = !menu.Item("KS_With_E"' true).GetValue<KeyBind>().Active && Utils.TickCount - E.LastCastAttemptT > 0;                      //QEW                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.Q) + MarkDmg(target) +                           Player.GetSpellDamage(target' SpellSlot.W)) > target.Health + 20)                      {                          if (E.IsReady() && Q.IsReady() && W.IsReady())                          {                              CancelUlt(target);                              Q.Cast(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              if (Player.Distance(target.ServerPosition) < W.Range)                                  W.Cast();                              return;                          }                      }                        //E + W                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.W)) >                          target.Health + 20)                      {                          if (E.IsReady() && W.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              if (Player.Distance(target.ServerPosition) < W.Range)                                  W.Cast();                              //Game.PrintChat("ks 5");                              return;                          }                      }                        //E + Q                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.Q)) >                          target.Health + 20)                      {                          if (E.IsReady() && Q.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              Q.Cast(target);                              //Game.PrintChat("ks 6");                              return;                          }                      }                        //Q                      if ((Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 20)                      {                          if (Q.IsReady() && Player.Distance(target.ServerPosition) <= Q.Range)                          {                              CancelUlt(target);                              Q.Cast(target);                              //Game.PrintChat("ks 7");                              return;                          }                          if (Q.IsReady() && E.IsReady() && Player.Distance(target.ServerPosition) <= 1375 &&                              menu.Item("wardKs"' true).GetValue<bool>() &&                              target.CountEnemiesInRange(500) < 3)                          {                              CancelUlt(target);                              WardJumper.JumpKs(target);                              //Game.PrintChat("wardKS!!!!!");                              return;                          }                      }                        //E                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 20)                      {                          if (E.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              //Game.PrintChat("ks 8");                              return;                          }                      }                        //R                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R) * 5) > target.Health + 20 &&                          menu.Item("rKS"' true).GetValue<bool>())                      {                          if (R.IsReady())                          {                              OrbwalkManager.SetAttack(false);                              OrbwalkManager.SetMovement(false);                              R.Cast();                              //Game.PrintChat("ks 8");                              return;                          }                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,SmartKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1375) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage))              {                  if (target != null)                  {                      var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                      bool shouldE = !menu.Item("KS_With_E"' true).GetValue<KeyBind>().Active && Utils.TickCount - E.LastCastAttemptT > 0;                      //QEW                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.Q) + MarkDmg(target) +                           Player.GetSpellDamage(target' SpellSlot.W)) > target.Health + 20)                      {                          if (E.IsReady() && Q.IsReady() && W.IsReady())                          {                              CancelUlt(target);                              Q.Cast(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              if (Player.Distance(target.ServerPosition) < W.Range)                                  W.Cast();                              return;                          }                      }                        //E + W                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.W)) >                          target.Health + 20)                      {                          if (E.IsReady() && W.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              if (Player.Distance(target.ServerPosition) < W.Range)                                  W.Cast();                              //Game.PrintChat("ks 5");                              return;                          }                      }                        //E + Q                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.Q)) >                          target.Health + 20)                      {                          if (E.IsReady() && Q.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              Q.Cast(target);                              //Game.PrintChat("ks 6");                              return;                          }                      }                        //Q                      if ((Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 20)                      {                          if (Q.IsReady() && Player.Distance(target.ServerPosition) <= Q.Range)                          {                              CancelUlt(target);                              Q.Cast(target);                              //Game.PrintChat("ks 7");                              return;                          }                          if (Q.IsReady() && E.IsReady() && Player.Distance(target.ServerPosition) <= 1375 &&                              menu.Item("wardKs"' true).GetValue<bool>() &&                              target.CountEnemiesInRange(500) < 3)                          {                              CancelUlt(target);                              WardJumper.JumpKs(target);                              //Game.PrintChat("wardKS!!!!!");                              return;                          }                      }                        //E                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 20)                      {                          if (E.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              //Game.PrintChat("ks 8");                              return;                          }                      }                        //R                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R) * 5) > target.Health + 20 &&                          menu.Item("rKS"' true).GetValue<bool>())                      {                          if (R.IsReady())                          {                              OrbwalkManager.SetAttack(false);                              OrbwalkManager.SetMovement(false);                              R.Cast();                              //Game.PrintChat("ks 8");                              return;                          }                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,SmartKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1375) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage))              {                  if (target != null)                  {                      var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                      bool shouldE = !menu.Item("KS_With_E"' true).GetValue<KeyBind>().Active && Utils.TickCount - E.LastCastAttemptT > 0;                      //QEW                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.Q) + MarkDmg(target) +                           Player.GetSpellDamage(target' SpellSlot.W)) > target.Health + 20)                      {                          if (E.IsReady() && Q.IsReady() && W.IsReady())                          {                              CancelUlt(target);                              Q.Cast(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              if (Player.Distance(target.ServerPosition) < W.Range)                                  W.Cast();                              return;                          }                      }                        //E + W                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.W)) >                          target.Health + 20)                      {                          if (E.IsReady() && W.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              if (Player.Distance(target.ServerPosition) < W.Range)                                  W.Cast();                              //Game.PrintChat("ks 5");                              return;                          }                      }                        //E + Q                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.Q)) >                          target.Health + 20)                      {                          if (E.IsReady() && Q.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              Q.Cast(target);                              //Game.PrintChat("ks 6");                              return;                          }                      }                        //Q                      if ((Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 20)                      {                          if (Q.IsReady() && Player.Distance(target.ServerPosition) <= Q.Range)                          {                              CancelUlt(target);                              Q.Cast(target);                              //Game.PrintChat("ks 7");                              return;                          }                          if (Q.IsReady() && E.IsReady() && Player.Distance(target.ServerPosition) <= 1375 &&                              menu.Item("wardKs"' true).GetValue<bool>() &&                              target.CountEnemiesInRange(500) < 3)                          {                              CancelUlt(target);                              WardJumper.JumpKs(target);                              //Game.PrintChat("wardKS!!!!!");                              return;                          }                      }                        //E                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 20)                      {                          if (E.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              //Game.PrintChat("ks 8");                              return;                          }                      }                        //R                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R) * 5) > target.Health + 20 &&                          menu.Item("rKS"' true).GetValue<bool>())                      {                          if (R.IsReady())                          {                              OrbwalkManager.SetAttack(false);                              OrbwalkManager.SetMovement(false);                              R.Cast();                              //Game.PrintChat("ks 8");                              return;                          }                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,SmartKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1375) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage))              {                  if (target != null)                  {                      var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                      bool shouldE = !menu.Item("KS_With_E"' true).GetValue<KeyBind>().Active && Utils.TickCount - E.LastCastAttemptT > 0;                      //QEW                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.Q) + MarkDmg(target) +                           Player.GetSpellDamage(target' SpellSlot.W)) > target.Health + 20)                      {                          if (E.IsReady() && Q.IsReady() && W.IsReady())                          {                              CancelUlt(target);                              Q.Cast(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              if (Player.Distance(target.ServerPosition) < W.Range)                                  W.Cast();                              return;                          }                      }                        //E + W                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.W)) >                          target.Health + 20)                      {                          if (E.IsReady() && W.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              if (Player.Distance(target.ServerPosition) < W.Range)                                  W.Cast();                              //Game.PrintChat("ks 5");                              return;                          }                      }                        //E + Q                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.Q)) >                          target.Health + 20)                      {                          if (E.IsReady() && Q.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              Q.Cast(target);                              //Game.PrintChat("ks 6");                              return;                          }                      }                        //Q                      if ((Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 20)                      {                          if (Q.IsReady() && Player.Distance(target.ServerPosition) <= Q.Range)                          {                              CancelUlt(target);                              Q.Cast(target);                              //Game.PrintChat("ks 7");                              return;                          }                          if (Q.IsReady() && E.IsReady() && Player.Distance(target.ServerPosition) <= 1375 &&                              menu.Item("wardKs"' true).GetValue<bool>() &&                              target.CountEnemiesInRange(500) < 3)                          {                              CancelUlt(target);                              WardJumper.JumpKs(target);                              //Game.PrintChat("wardKS!!!!!");                              return;                          }                      }                        //E                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 20)                      {                          if (E.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              //Game.PrintChat("ks 8");                              return;                          }                      }                        //R                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R) * 5) > target.Health + 20 &&                          menu.Item("rKS"' true).GetValue<bool>())                      {                          if (R.IsReady())                          {                              OrbwalkManager.SetAttack(false);                              OrbwalkManager.SetMovement(false);                              R.Cast();                              //Game.PrintChat("ks 8");                              return;                          }                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,SmartKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1375) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage))              {                  if (target != null)                  {                      var delay = menu.Item("E_Delay_Slider"' true).GetValue<Slider>().Value;                      bool shouldE = !menu.Item("KS_With_E"' true).GetValue<KeyBind>().Active && Utils.TickCount - E.LastCastAttemptT > 0;                      //QEW                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.Q) + MarkDmg(target) +                           Player.GetSpellDamage(target' SpellSlot.W)) > target.Health + 20)                      {                          if (E.IsReady() && Q.IsReady() && W.IsReady())                          {                              CancelUlt(target);                              Q.Cast(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              if (Player.Distance(target.ServerPosition) < W.Range)                                  W.Cast();                              return;                          }                      }                        //E + W                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.W)) >                          target.Health + 20)                      {                          if (E.IsReady() && W.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              if (Player.Distance(target.ServerPosition) < W.Range)                                  W.Cast();                              //Game.PrintChat("ks 5");                              return;                          }                      }                        //E + Q                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E) + Player.GetSpellDamage(target' SpellSlot.Q)) >                          target.Health + 20)                      {                          if (E.IsReady() && Q.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              Q.Cast(target);                              //Game.PrintChat("ks 6");                              return;                          }                      }                        //Q                      if ((Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 20)                      {                          if (Q.IsReady() && Player.Distance(target.ServerPosition) <= Q.Range)                          {                              CancelUlt(target);                              Q.Cast(target);                              //Game.PrintChat("ks 7");                              return;                          }                          if (Q.IsReady() && E.IsReady() && Player.Distance(target.ServerPosition) <= 1375 &&                              menu.Item("wardKs"' true).GetValue<bool>() &&                              target.CountEnemiesInRange(500) < 3)                          {                              CancelUlt(target);                              WardJumper.JumpKs(target);                              //Game.PrintChat("wardKS!!!!!");                              return;                          }                      }                        //E                      if (Player.Distance(target.ServerPosition) <= E.Range && shouldE &&                          (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 20)                      {                          if (E.IsReady())                          {                              CancelUlt(target);                              E.Cast(target);                              E.LastCastAttemptT = Utils.TickCount + delay;                              //Game.PrintChat("ks 8");                              return;                          }                      }                        //R                      if (Player.Distance(target.ServerPosition) <= E.Range &&                          (Player.GetSpellDamage(target' SpellSlot.R) * 5) > target.Health + 20 &&                          menu.Item("rKS"' true).GetValue<bool>())                      {                          if (R.IsReady())                          {                              OrbwalkManager.SetAttack(false);                              OrbwalkManager.SetMovement(false);                              R.Cast();                              //Game.PrintChat("ks 8");                              return;                          }                      }                  }              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,ShouldCancel,The following statement contains a magic number: if (Player.CountEnemiesInRange(500) < 1)              {                  var target = TargetSelector.GetTarget(E.Range' TargetSelector.DamageType.Magical);                    if (target == null)                      return;                    R.LastCastAttemptT = 0;                  Player.IssueOrder(GameObjectOrder.MoveTo' target);              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,QSuccessfullyCasted,The following statement contains a magic number: return Utils.TickCount - Q.LastCastAttemptT > 350 || !menu.Item("waitQ"' true).GetValue<bool>();
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,GameObject_OnCreate,The following statement contains a magic number: if (Utils.TickCount < WardJumper.LastPlaced + 300)              {                  var ward = (Obj_AI_Minion)sender;                  if (ward.Name.ToLower().Contains("ward") && ward.Distance(WardJumper.LastWardPos) < 500 && E.IsReady())                  {                      E.Cast(ward);                  }              }
Magic Number,xSaliceResurrected.Mid,Katarina,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Katarina.cs,GameObject_OnCreate,The following statement contains a magic number: if (Utils.TickCount < WardJumper.LastPlaced + 300)              {                  var ward = (Obj_AI_Minion)sender;                  if (ward.Name.ToLower().Contains("ward") && ward.Distance(WardJumper.LastWardPos) < 500 && E.IsReady())                  {                      E.Cast(ward);                  }              }
Magic Number,xSaliceResurrected,PluginLoader,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\PluginLoader.cs,PluginLoader,The following statement contains a magic number: if (!_loaded)              {                  var webRequest = WebRequest.Create(@"https://raw.githubusercontent.com/xSalice/LSharp/master/xSaliceResurrected/version.txt");                    using (var response = webRequest.GetResponse())                  using (var content = response.GetResponseStream())                      if (content != null)                          using (var reader = new StreamReader(content))                          {                              var strContent = reader.ReadToEnd();                                Notifications.AddNotification("Latest Version: " + strContent' 10000);                              Notifications.AddNotification("Version Loaded: " + Assembly.GetExecutingAssembly().GetName().Version' 10000);                              if (strContent != Assembly.GetExecutingAssembly().GetName().Version.ToString())                                  Notifications.AddNotification("Please Update Assembly!!!");                            }                    switch (ObjectManager.Player.ChampionName.ToLower())                  {                      case "ahri":                          new Ahri();                          _loaded = true;                          break;                      case "akali":                          new Akali();                          _loaded = true;                          break;                      case "cassiopeia":                          new Cassiopeia();                          _loaded = true;                          break;                      case "ashe":                          _loaded = true;                          new Ashe();                          break;                      case "azir":                          new Azir();                          _loaded = true;;                          break;                      case "chogath":                          new Chogath();                          _loaded = true;                          break;                      case "corki":                          new Corki();                          _loaded = true;                          break;                      case "ekko":                          new Ekko();                          _loaded = true;                          break;                      case "ezreal":                          new Ezreal();                          _loaded = true;                          break;                      case "fiora":                          new Fiora();                          _loaded = true;                          break;                      case "irelia":                          new Irelia();                          _loaded = true;                          break;                      case "karthus":                          new Karthus();                          _loaded = true;                          break;                      case "katarina":                          new Katarina();                          _loaded = true;                          break;                      case "kogmaw":                          new KogMaw();                          _loaded = true;                          break;                      case "lissandra":                          new Lissandra();                          _loaded = true;                          break;                      case "lucian":                          new Lucian();                          _loaded = true;                          break;                      case "jayce":                          new Jayce();                          _loaded = true;                          break;                      case "orianna":                          new Orianna();                          _loaded = true;                          break;                      case "rumble":                          new Rumble();                          _loaded = true;                          break;                      case "syndra":                          new Syndra();                          _loaded = true;                          break;                      case "viktor":                          new Viktor();                          _loaded = true;                          break;                      case "vladimir":                          new Vladimir();                          _loaded = true;                          break;                      case "urgot":                          new Urgot();                          _loaded = true;                          break;                      case "zyra":                          new Zyra();                          _loaded = true;                          break;                      /*                      case "anivia":                          new Anivia();                          loaded = true;                          Game.PrintChat("<font color = \"#FFB6C1\">xSalice's " + ObjectManager.Player.ChampionName + " Loaded!</font>");                          break;                      case "annie":                          new Annie();                          loaded = true;                          Game.PrintChat("<font color = \"#FFB6C1\">xSalice's " + ObjectManager.Player.ChampionName + " Loaded!</font>");                          break;                      case "blitzcrank":                          new Blitzcrank();                          loaded = true;                          Game.PrintChat("<font color = \"#FFB6C1\">xSalice's " + ObjectManager.Player.ChampionName + " Loaded!</font>");                          break;                      case "fizz":                          new Fizz();                          loaded = true;                          Game.PrintChat("<font color = \"#FFB6C1\">xSalice's " + ObjectManager.Player.ChampionName + " Loaded!</font>");                          break;                      case "veigar":                          new Veigar();                          loaded = true;                          Game.PrintChat("<font color = \"#FFB6C1\">xSalice's " + ObjectManager.Player.ChampionName + " Loaded!</font>");                          break;                      case "velkoz":                          new Velkoz();                          loaded = true;                          Game.PrintChat("<font color = \"#FFB6C1\">xSalice's " + ObjectManager.Player.ChampionName + " Loaded!</font>");                          break;                      case "yasuo":                          new Yasuo();                          loaded = true;                          Game.PrintChat("<font color = \"#FFB6C1\">xSalice's " + ObjectManager.Player.ChampionName + " Loaded!</font>");                          break;                      case "zed":                          new Zed();                          loaded = true;                          Game.PrintChat("<font color = \"#FFB6C1\">xSalice's " + ObjectManager.Player.ChampionName + " Loaded!</font>");                          break;                       */                      default:                          Notifications.AddNotification(ObjectManager.Player.ChampionName + " not supported!!"' 10000);                          break;                  }              }
Magic Number,xSaliceResurrected,PluginLoader,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\PluginLoader.cs,PluginLoader,The following statement contains a magic number: if (!_loaded)              {                  var webRequest = WebRequest.Create(@"https://raw.githubusercontent.com/xSalice/LSharp/master/xSaliceResurrected/version.txt");                    using (var response = webRequest.GetResponse())                  using (var content = response.GetResponseStream())                      if (content != null)                          using (var reader = new StreamReader(content))                          {                              var strContent = reader.ReadToEnd();                                Notifications.AddNotification("Latest Version: " + strContent' 10000);                              Notifications.AddNotification("Version Loaded: " + Assembly.GetExecutingAssembly().GetName().Version' 10000);                              if (strContent != Assembly.GetExecutingAssembly().GetName().Version.ToString())                                  Notifications.AddNotification("Please Update Assembly!!!");                            }                    switch (ObjectManager.Player.ChampionName.ToLower())                  {                      case "ahri":                          new Ahri();                          _loaded = true;                          break;                      case "akali":                          new Akali();                          _loaded = true;                          break;                      case "cassiopeia":                          new Cassiopeia();                          _loaded = true;                          break;                      case "ashe":                          _loaded = true;                          new Ashe();                          break;                      case "azir":                          new Azir();                          _loaded = true;;                          break;                      case "chogath":                          new Chogath();                          _loaded = true;                          break;                      case "corki":                          new Corki();                          _loaded = true;                          break;                      case "ekko":                          new Ekko();                          _loaded = true;                          break;                      case "ezreal":                          new Ezreal();                          _loaded = true;                          break;                      case "fiora":                          new Fiora();                          _loaded = true;                          break;                      case "irelia":                          new Irelia();                          _loaded = true;                          break;                      case "karthus":                          new Karthus();                          _loaded = true;                          break;                      case "katarina":                          new Katarina();                          _loaded = true;                          break;                      case "kogmaw":                          new KogMaw();                          _loaded = true;                          break;                      case "lissandra":                          new Lissandra();                          _loaded = true;                          break;                      case "lucian":                          new Lucian();                          _loaded = true;                          break;                      case "jayce":                          new Jayce();                          _loaded = true;                          break;                      case "orianna":                          new Orianna();                          _loaded = true;                          break;                      case "rumble":                          new Rumble();                          _loaded = true;                          break;                      case "syndra":                          new Syndra();                          _loaded = true;                          break;                      case "viktor":                          new Viktor();                          _loaded = true;                          break;                      case "vladimir":                          new Vladimir();                          _loaded = true;                          break;                      case "urgot":                          new Urgot();                          _loaded = true;                          break;                      case "zyra":                          new Zyra();                          _loaded = true;                          break;                      /*                      case "anivia":                          new Anivia();                          loaded = true;                          Game.PrintChat("<font color = \"#FFB6C1\">xSalice's " + ObjectManager.Player.ChampionName + " Loaded!</font>");                          break;                      case "annie":                          new Annie();                          loaded = true;                          Game.PrintChat("<font color = \"#FFB6C1\">xSalice's " + ObjectManager.Player.ChampionName + " Loaded!</font>");                          break;                      case "blitzcrank":                          new Blitzcrank();                          loaded = true;                          Game.PrintChat("<font color = \"#FFB6C1\">xSalice's " + ObjectManager.Player.ChampionName + " Loaded!</font>");                          break;                      case "fizz":                          new Fizz();                          loaded = true;                          Game.PrintChat("<font color = \"#FFB6C1\">xSalice's " + ObjectManager.Player.ChampionName + " Loaded!</font>");                          break;                      case "veigar":                          new Veigar();                          loaded = true;                          Game.PrintChat("<font color = \"#FFB6C1\">xSalice's " + ObjectManager.Player.ChampionName + " Loaded!</font>");                          break;                      case "velkoz":                          new Velkoz();                          loaded = true;                          Game.PrintChat("<font color = \"#FFB6C1\">xSalice's " + ObjectManager.Player.ChampionName + " Loaded!</font>");                          break;                      case "yasuo":                          new Yasuo();                          loaded = true;                          Game.PrintChat("<font color = \"#FFB6C1\">xSalice's " + ObjectManager.Player.ChampionName + " Loaded!</font>");                          break;                      case "zed":                          new Zed();                          loaded = true;                          Game.PrintChat("<font color = \"#FFB6C1\">xSalice's " + ObjectManager.Player.ChampionName + " Loaded!</font>");                          break;                       */                      default:                          Notifications.AddNotification(ObjectManager.Player.ChampionName + " not supported!!"' 10000);                          break;                  }              }
Magic Number,xSaliceResurrected,PluginLoader,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\PluginLoader.cs,PluginLoader,The following statement contains a magic number: if (!_loaded)              {                  var webRequest = WebRequest.Create(@"https://raw.githubusercontent.com/xSalice/LSharp/master/xSaliceResurrected/version.txt");                    using (var response = webRequest.GetResponse())                  using (var content = response.GetResponseStream())                      if (content != null)                          using (var reader = new StreamReader(content))                          {                              var strContent = reader.ReadToEnd();                                Notifications.AddNotification("Latest Version: " + strContent' 10000);                              Notifications.AddNotification("Version Loaded: " + Assembly.GetExecutingAssembly().GetName().Version' 10000);                              if (strContent != Assembly.GetExecutingAssembly().GetName().Version.ToString())                                  Notifications.AddNotification("Please Update Assembly!!!");                            }                    switch (ObjectManager.Player.ChampionName.ToLower())                  {                      case "ahri":                          new Ahri();                          _loaded = true;                          break;                      case "akali":                          new Akali();                          _loaded = true;                          break;                      case "cassiopeia":                          new Cassiopeia();                          _loaded = true;                          break;                      case "ashe":                          _loaded = true;                          new Ashe();                          break;                      case "azir":                          new Azir();                          _loaded = true;;                          break;                      case "chogath":                          new Chogath();                          _loaded = true;                          break;                      case "corki":                          new Corki();                          _loaded = true;                          break;                      case "ekko":                          new Ekko();                          _loaded = true;                          break;                      case "ezreal":                          new Ezreal();                          _loaded = true;                          break;                      case "fiora":                          new Fiora();                          _loaded = true;                          break;                      case "irelia":                          new Irelia();                          _loaded = true;                          break;                      case "karthus":                          new Karthus();                          _loaded = true;                          break;                      case "katarina":                          new Katarina();                          _loaded = true;                          break;                      case "kogmaw":                          new KogMaw();                          _loaded = true;                          break;                      case "lissandra":                          new Lissandra();                          _loaded = true;                          break;                      case "lucian":                          new Lucian();                          _loaded = true;                          break;                      case "jayce":                          new Jayce();                          _loaded = true;                          break;                      case "orianna":                          new Orianna();                          _loaded = true;                          break;                      case "rumble":                          new Rumble();                          _loaded = true;                          break;                      case "syndra":                          new Syndra();                          _loaded = true;                          break;                      case "viktor":                          new Viktor();                          _loaded = true;                          break;                      case "vladimir":                          new Vladimir();                          _loaded = true;                          break;                      case "urgot":                          new Urgot();                          _loaded = true;                          break;                      case "zyra":                          new Zyra();                          _loaded = true;                          break;                      /*                      case "anivia":                          new Anivia();                          loaded = true;                          Game.PrintChat("<font color = \"#FFB6C1\">xSalice's " + ObjectManager.Player.ChampionName + " Loaded!</font>");                          break;                      case "annie":                          new Annie();                          loaded = true;                          Game.PrintChat("<font color = \"#FFB6C1\">xSalice's " + ObjectManager.Player.ChampionName + " Loaded!</font>");                          break;                      case "blitzcrank":                          new Blitzcrank();                          loaded = true;                          Game.PrintChat("<font color = \"#FFB6C1\">xSalice's " + ObjectManager.Player.ChampionName + " Loaded!</font>");                          break;                      case "fizz":                          new Fizz();                          loaded = true;                          Game.PrintChat("<font color = \"#FFB6C1\">xSalice's " + ObjectManager.Player.ChampionName + " Loaded!</font>");                          break;                      case "veigar":                          new Veigar();                          loaded = true;                          Game.PrintChat("<font color = \"#FFB6C1\">xSalice's " + ObjectManager.Player.ChampionName + " Loaded!</font>");                          break;                      case "velkoz":                          new Velkoz();                          loaded = true;                          Game.PrintChat("<font color = \"#FFB6C1\">xSalice's " + ObjectManager.Player.ChampionName + " Loaded!</font>");                          break;                      case "yasuo":                          new Yasuo();                          loaded = true;                          Game.PrintChat("<font color = \"#FFB6C1\">xSalice's " + ObjectManager.Player.ChampionName + " Loaded!</font>");                          break;                      case "zed":                          new Zed();                          loaded = true;                          Game.PrintChat("<font color = \"#FFB6C1\">xSalice's " + ObjectManager.Player.ChampionName + " Loaded!</font>");                          break;                       */                      default:                          Notifications.AddNotification(ObjectManager.Player.ChampionName + " not supported!!"' 10000);                          break;                  }              }
Magic Number,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,LoadSpell,The following statement contains a magic number: SpellManager.P = new Spell(SpellSlot.Q' 1470);
Magic Number,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,LoadSpell,The following statement contains a magic number: SpellManager.Q = new Spell(SpellSlot.Q' 800);
Magic Number,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,LoadSpell,The following statement contains a magic number: SpellManager.W = new Spell(SpellSlot.W' 825);
Magic Number,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,LoadSpell,The following statement contains a magic number: SpellManager.E = new Spell(SpellSlot.E' 875);
Magic Number,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,LoadSpell,The following statement contains a magic number: SpellManager.R = new Spell(SpellSlot.R' 700);
Magic Number,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,LoadMenu,The following statement contains a magic number: {                  key.AddItem(new MenuItem("ComboActive"' "Combo!"' true).SetValue(new KeyBind(32' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle)));                  key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("Escape"' "Escape with E"' true).SetValue(new KeyBind("Z".ToCharArray()[0]' KeyBindType.Press)));                  //add to menu                  menu.AddSubMenu(key);              }
Magic Number,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,LoadMenu,The following statement contains a magic number: {                  harass.AddItem(new MenuItem("UseQHarass"' "Use Q"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseWHarass"' "Use W"' true).SetValue(false));                  harass.AddItem(new MenuItem("UseEHarass"' "Use E"' true).SetValue(true));                  harass.AddItem(new MenuItem("disableAA"' "Disable AA"' true).SetValue(true));                  combo.AddSubMenu(HitChanceManager.AddHitChanceMenuCombo(true' false' true' false));                  ManaManager.AddManaManagertoMenu(harass' "Harass"' 30);                  //add to menu                  menu.AddSubMenu(harass);              }
Magic Number,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(false));                  farm.AddItem(new MenuItem("UseWFarm"' "Use W"' true).SetValue(false));                  farm.AddItem(new MenuItem("UseEFarm"' "Use E"' true).SetValue(false));                  harass.AddSubMenu(HitChanceManager.AddHitChanceMenuHarass(true' false' true' false));                  ManaManager.AddManaManagertoMenu(farm' "LaneClear"' 30);                  //add to menu                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawing.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawing.AddItem(new MenuItem("Draw_W"' "Draw Q"' true).SetValue(true));                  drawing.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawing.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawing.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawing.AddItem(new MenuItem("Draw_W"' "Draw Q"' true).SetValue(true));                  drawing.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawing.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawing.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawing.AddItem(new MenuItem("Draw_W"' "Draw Q"' true).SetValue(true));                  drawing.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawing.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawing.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawing.AddItem(new MenuItem("Draw_W"' "Draw Q"' true).SetValue(true));                  drawing.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawing.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,GetComboDamage,The following statement contains a magic number: if (Q.IsReady())                  damage += Player.GetSpellDamage(enemy' SpellSlot.Q) * 2;
Magic Number,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,GetComboDamage,The following statement contains a magic number: if (R.IsReady())                  damage += Player.GetSpellDamage(enemy' SpellSlot.R) * 3;
Magic Number,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,UseSpells,The following statement contains a magic number: if (useW)              {                  if (useE)                  {                      var pred = E.GetPrediction(target' true);                      if (pred.Hitchance >= HitChanceManager.GetEHitChance(source) && E.IsReady())                      {                          E.Cast(target);                          Cast_W(pred.CastPosition);                      }                  }                    //items                  if (source == "Combo")                  {                      var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                      if (itemTarget != null)                      {                          ItemManager.Target = itemTarget;                            //see if killable                          if (dmg > itemTarget.Health - 50)                              ItemManager.KillableTarget = true;                            ItemManager.UseTargetted = true;                      }                  }                    if (useQ)                  {                      var pred = Q.GetPrediction(target);                      if (pred.Hitchance >= HitChanceManager.GetQHitChance(source) && pred.CastPosition.Distance(Player.ServerPosition) < Q.Range)                      {                          Q.Cast(pred.CastPosition);                          Cast_W(pred.CastPosition);                          return;                      }                  }              }              else              {                  if (useQ)                      SpellCastManager.CastBasicSkillShot(Q' Q.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetQHitChance((source)));                    if (useE)                      SpellCastManager.CastBasicSkillShot(E' E.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetEHitChance((source)));              }
Magic Number,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,UseSpells,The following statement contains a magic number: if (useW)              {                  if (useE)                  {                      var pred = E.GetPrediction(target' true);                      if (pred.Hitchance >= HitChanceManager.GetEHitChance(source) && E.IsReady())                      {                          E.Cast(target);                          Cast_W(pred.CastPosition);                      }                  }                    //items                  if (source == "Combo")                  {                      var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                      if (itemTarget != null)                      {                          ItemManager.Target = itemTarget;                            //see if killable                          if (dmg > itemTarget.Health - 50)                              ItemManager.KillableTarget = true;                            ItemManager.UseTargetted = true;                      }                  }                    if (useQ)                  {                      var pred = Q.GetPrediction(target);                      if (pred.Hitchance >= HitChanceManager.GetQHitChance(source) && pred.CastPosition.Distance(Player.ServerPosition) < Q.Range)                      {                          Q.Cast(pred.CastPosition);                          Cast_W(pred.CastPosition);                          return;                      }                  }              }              else              {                  if (useQ)                      SpellCastManager.CastBasicSkillShot(Q' Q.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetQHitChance((source)));                    if (useE)                      SpellCastManager.CastBasicSkillShot(E' E.Range' TargetSelector.DamageType.Magical' HitChanceManager.GetEHitChance((source)));              }
Magic Number,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,Cast_W,The following statement contains a magic number: if (Utils.TickCount - E.LastCastAttemptT > 100 + Game.Ping)                  return;
Magic Number,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,Cast_W,The following statement contains a magic number: if (W.Instance.Ammo == 1)// 1 cast              {                  Utility.DelayAction.Add(50' () => W.Cast(pos));              }              else if (W.Instance.Ammo == 2)// 2 cast              {                  Utility.DelayAction.Add(50' () => W.Cast(pos));                  Utility.DelayAction.Add(350' () => W.Cast(pos));              }
Magic Number,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,Cast_W,The following statement contains a magic number: if (W.Instance.Ammo == 1)// 1 cast              {                  Utility.DelayAction.Add(50' () => W.Cast(pos));              }              else if (W.Instance.Ammo == 2)// 2 cast              {                  Utility.DelayAction.Add(50' () => W.Cast(pos));                  Utility.DelayAction.Add(350' () => W.Cast(pos));              }
Magic Number,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,Cast_W,The following statement contains a magic number: if (W.Instance.Ammo == 1)// 1 cast              {                  Utility.DelayAction.Add(50' () => W.Cast(pos));              }              else if (W.Instance.Ammo == 2)// 2 cast              {                  Utility.DelayAction.Add(50' () => W.Cast(pos));                  Utility.DelayAction.Add(350' () => W.Cast(pos));              }
Magic Number,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,Cast_W,The following statement contains a magic number: if (W.Instance.Ammo == 1)// 1 cast              {                  Utility.DelayAction.Add(50' () => W.Cast(pos));              }              else if (W.Instance.Ammo == 2)// 2 cast              {                  Utility.DelayAction.Add(50' () => W.Cast(pos));                  Utility.DelayAction.Add(350' () => W.Cast(pos));              }
Magic Number,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,Cast_R,The following statement contains a magic number: if (GetComboDamage(target) > target.Health - 150 && pred.Hitchance >= HitChance.High)              {                  R.Cast(pred.UnitPosition);              }
Magic Number,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,CheckKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => Player.IsValidTarget(E.Range)).OrderByDescending(GetComboDamage))              {                  //QEW                  if (Player.Distance(target.ServerPosition) <= Q.Range && Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.E) > target.Health && Q.IsReady() && E.IsReady())                  {                      E.Cast(target);                      Q.Cast(target);                      W.Cast(Q.GetPrediction(target).CastPosition);                      return;                  }                  //Q + plants                  if (Player.Distance(target.ServerPosition) <= Q.Range && Player.GetSpellDamage(target' SpellSlot.Q) * 2 > target.Health && Q.IsReady() && W.IsReady())                  {                      Q.Cast(Q.GetPrediction(target).CastPosition);                      W.Cast(Q.GetPrediction(target).CastPosition);                      return;                  }                  //Q                  if (Player.Distance(target.ServerPosition) <= Q.Range && Player.GetSpellDamage(target' SpellSlot.Q) > target.Health && Q.IsReady())                  {                      Q.Cast(target);                      return;                  }                    //E                  if (Player.Distance(target.ServerPosition) <= E.Range && Player.GetSpellDamage(target' SpellSlot.E) > target.Health && E.IsReady())                  {                      E.Cast(target);                      return;                  }                    //R                  if (Player.Distance(target.ServerPosition) <= R.Range && Player.GetSpellDamage(target' SpellSlot.R) > target.Health && R.IsReady() && menu.Item("R_KS"' true).GetValue<bool>())                  {                      R.Cast(target);                      return;                  }              }
Magic Number,xSaliceResurrected.Support,Zyra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Support\Zyra.cs,AntiGapcloser_OnEnemyGapcloser,The following statement contains a magic number: if (E.IsReady() && gapcloser.Sender.Distance(Player.Position) < 300)                  E.Cast(gapcloser.Sender);
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,SetSpells,The following statement contains a magic number: SpellManager.Q = new Spell(SpellSlot.Q' 600);
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,SetSpells,The following statement contains a magic number: SpellManager.R = new Spell(SpellSlot.R' 400);
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,LoadMenu,The following statement contains a magic number: {                  key.AddItem(new MenuItem("ComboActive"' "Combo!"' true).SetValue(new KeyBind(32' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("LastHitKey"' "Last Hit!"' true).SetValue(new KeyBind("A".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("Combo_Switch"' "Switch mode Key"' true).SetValue(new KeyBind("T".ToCharArray()[0]' KeyBindType.Press)));                  //add to menu                  menu.AddSubMenu(key);              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Min_Distance"' "Min range to Q"' true).SetValue(new Slider(300' 0' 600)));                      qMenu.AddItem(new MenuItem("Q_Gap_Close"' "Q Minion to Gap Close"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                  var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("W_Incoming"' "W Block incoming Atk Always"' true).SetValue(true));                      wMenu.AddItem(new MenuItem("W_Tower"' "Don't W block under Tower"' true).SetValue(true));                      wMenu.AddItem(new MenuItem("W_minion"' "W Block Minion"' true).SetValue(false));                      spellMenu.AddSubMenu(wMenu);                  }                  var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_Reset"' "E Auto-Attack Reset"' true).SetValue(true));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_If_HP"' "R If HP <="' true).SetValue(new Slider(20)));                        //evading spells                      var dangerous = new Menu("Dodge Dangerous"' "Dodge Dangerous");                      {                          foreach (var hero in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsEnemy))                          {                              dangerous.AddSubMenu(new Menu(hero.ChampionName' hero.ChampionName));                              dangerous.SubMenu(hero.ChampionName).AddItem(new MenuItem(hero.Spellbook.GetSpell(SpellSlot.Q).Name + "R_Dodge"' hero.Spellbook.GetSpell(SpellSlot.Q).Name' true).SetValue(false));                              dangerous.SubMenu(hero.ChampionName).AddItem(new MenuItem(hero.Spellbook.GetSpell(SpellSlot.W).Name + "R_Dodge"' hero.Spellbook.GetSpell(SpellSlot.W).Name' true).SetValue(false));                              dangerous.SubMenu(hero.ChampionName).AddItem(new MenuItem(hero.Spellbook.GetSpell(SpellSlot.E).Name + "R_Dodge"' hero.Spellbook.GetSpell(SpellSlot.E).Name' true).SetValue(false));                              dangerous.SubMenu(hero.ChampionName).AddItem(new MenuItem(hero.Spellbook.GetSpell(SpellSlot.R).Name + "R_Dodge"' hero.Spellbook.GetSpell(SpellSlot.R).Name' true).SetValue(false));                          }                          rMenu.AddSubMenu(dangerous);                      }                        spellMenu.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Min_Distance"' "Min range to Q"' true).SetValue(new Slider(300' 0' 600)));                      qMenu.AddItem(new MenuItem("Q_Gap_Close"' "Q Minion to Gap Close"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                  var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("W_Incoming"' "W Block incoming Atk Always"' true).SetValue(true));                      wMenu.AddItem(new MenuItem("W_Tower"' "Don't W block under Tower"' true).SetValue(true));                      wMenu.AddItem(new MenuItem("W_minion"' "W Block Minion"' true).SetValue(false));                      spellMenu.AddSubMenu(wMenu);                  }                  var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_Reset"' "E Auto-Attack Reset"' true).SetValue(true));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_If_HP"' "R If HP <="' true).SetValue(new Slider(20)));                        //evading spells                      var dangerous = new Menu("Dodge Dangerous"' "Dodge Dangerous");                      {                          foreach (var hero in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsEnemy))                          {                              dangerous.AddSubMenu(new Menu(hero.ChampionName' hero.ChampionName));                              dangerous.SubMenu(hero.ChampionName).AddItem(new MenuItem(hero.Spellbook.GetSpell(SpellSlot.Q).Name + "R_Dodge"' hero.Spellbook.GetSpell(SpellSlot.Q).Name' true).SetValue(false));                              dangerous.SubMenu(hero.ChampionName).AddItem(new MenuItem(hero.Spellbook.GetSpell(SpellSlot.W).Name + "R_Dodge"' hero.Spellbook.GetSpell(SpellSlot.W).Name' true).SetValue(false));                              dangerous.SubMenu(hero.ChampionName).AddItem(new MenuItem(hero.Spellbook.GetSpell(SpellSlot.E).Name + "R_Dodge"' hero.Spellbook.GetSpell(SpellSlot.E).Name' true).SetValue(false));                              dangerous.SubMenu(hero.ChampionName).AddItem(new MenuItem(hero.Spellbook.GetSpell(SpellSlot.R).Name + "R_Dodge"' hero.Spellbook.GetSpell(SpellSlot.R).Name' true).SetValue(false));                          }                          rMenu.AddSubMenu(dangerous);                      }                        spellMenu.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Min_Distance"' "Min range to Q"' true).SetValue(new Slider(300' 0' 600)));                      qMenu.AddItem(new MenuItem("Q_Gap_Close"' "Q Minion to Gap Close"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                  var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("W_Incoming"' "W Block incoming Atk Always"' true).SetValue(true));                      wMenu.AddItem(new MenuItem("W_Tower"' "Don't W block under Tower"' true).SetValue(true));                      wMenu.AddItem(new MenuItem("W_minion"' "W Block Minion"' true).SetValue(false));                      spellMenu.AddSubMenu(wMenu);                  }                  var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_Reset"' "E Auto-Attack Reset"' true).SetValue(true));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_If_HP"' "R If HP <="' true).SetValue(new Slider(20)));                        //evading spells                      var dangerous = new Menu("Dodge Dangerous"' "Dodge Dangerous");                      {                          foreach (var hero in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsEnemy))                          {                              dangerous.AddSubMenu(new Menu(hero.ChampionName' hero.ChampionName));                              dangerous.SubMenu(hero.ChampionName).AddItem(new MenuItem(hero.Spellbook.GetSpell(SpellSlot.Q).Name + "R_Dodge"' hero.Spellbook.GetSpell(SpellSlot.Q).Name' true).SetValue(false));                              dangerous.SubMenu(hero.ChampionName).AddItem(new MenuItem(hero.Spellbook.GetSpell(SpellSlot.W).Name + "R_Dodge"' hero.Spellbook.GetSpell(SpellSlot.W).Name' true).SetValue(false));                              dangerous.SubMenu(hero.ChampionName).AddItem(new MenuItem(hero.Spellbook.GetSpell(SpellSlot.E).Name + "R_Dodge"' hero.Spellbook.GetSpell(SpellSlot.E).Name' true).SetValue(false));                              dangerous.SubMenu(hero.ChampionName).AddItem(new MenuItem(hero.Spellbook.GetSpell(SpellSlot.R).Name + "R_Dodge"' hero.Spellbook.GetSpell(SpellSlot.R).Name' true).SetValue(false));                          }                          rMenu.AddSubMenu(dangerous);                      }                        spellMenu.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,LoadMenu,The following statement contains a magic number: {                  harass.AddItem(new MenuItem("UseQHarass"' "Use Q"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseWHarass"' "Use W"' true).SetValue(false));                  harass.AddItem(new MenuItem("UseEHarass"' "Use E"' true).SetValue(true));                  ManaManager.AddManaManagertoMenu(harass' "Harass"' 30);                  //add to menu                  menu.AddSubMenu(harass);              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,LoadMenu,The following statement contains a magic number: {                  lastHit.AddItem(new MenuItem("UseQLastHit"' "Use Q"' true).SetValue(true));                  ManaManager.AddManaManagertoMenu(lastHit' "Lasthit"' 30);                  //add to menu                  menu.AddSubMenu(lastHit);              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseQFarm_Tower"' "Do not Q under Tower"' true).SetValue(true));                  farm.AddItem(new MenuItem("UseEFarm"' "Use E"' true).SetValue(true));                  ManaManager.AddManaManagertoMenu(farm' "LaneClear"' 30);                  //add to menu                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R_Killable"' "Draw R Mark on Killable"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R_Killable"' "Draw R Mark on Killable"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R_Killable"' "Draw R Mark on Killable"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R_Killable"' "Draw R Mark on Killable"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,GetComboDamage,The following statement contains a magic number: if (Q.IsReady())                  comboDamage += Player.GetSpellDamage(target' SpellSlot.Q) * 2;
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,GetComboDamage,The following statement contains a magic number: return (float)(comboDamage + Player.GetAutoAttackDamage(target) * 3);
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      var dmg = GetComboDamage(itemTarget);                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      var dmg = GetComboDamage(itemTarget);                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,SmartKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(Q.Range) && !x.IsDead && !x.HasBuffOfType(BuffType.Invulnerability)))              {                  //Q *2                  if (Player.GetSpellDamage(target' SpellSlot.Q) * 2 > target.Health && Player.Distance(target.Position) < Q.Range && Q.IsReady())                  {                      Q.Cast(target);                      return;                  }                  //Q                  if (Player.GetSpellDamage(target' SpellSlot.Q) > target.Health && Player.Distance(target.Position) < Q.Range && Q.IsReady())                  {                      Q.Cast(target);                      return;                  }              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,Cast_Q,The following statement contains a magic number: var target = TargetSelector.GetTarget(Q.Range * 2' TargetSelector.DamageType.Physical);
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,Cast_Q,The following statement contains a magic number: if (mode == 0)              {                  if (Q.IsReady() && target != null)                  {                      if (Q.IsKillable(target))                          Q.Cast(target);                        if (Player.GetSpellDamage(target' SpellSlot.Q) * 2 > target.Health)                          Q.Cast(target);                        if (Utils.TickCount - Q.LastCastAttemptT > 3800 && Utils.TickCount - Q.LastCastAttemptT < 4000)                          Q.Cast(target);                        var minDistance = menu.Item("Q_Min_Distance"' true).GetValue<Slider>().Value;                        if (Player.Distance(target.Position' true) > Q.RangeSqr && menu.Item("Q_Gap_Close"' true).GetValue<bool>())                      {                          var allMinionQ = MinionManager.GetMinions(Player.ServerPosition' Q.Range' MinionTypes.All' MinionTeam.NotAlly);                            if (allMinionQ.Count < 1)                              return;                            Obj_AI_Base bestMinion = allMinionQ[0];                            foreach (var minion in allMinionQ)                          {                              if (target.Distance(minion.Position' true) < Q.RangeSqr && Player.Distance(minion.Position' true) < Q.RangeSqr &&                                  target.Distance(minion.Position' true) < target.Distance(Player.Position' true))                                  if (target.Distance(minion.Position' true) < target.Distance(bestMinion.Position' true))                                      bestMinion = minion;                          }                            //check if can Q without activating                          if (bestMinion != null && Utils.TickCount - Q.LastCastAttemptT > 4000)                          {                              if (target.Distance(bestMinion.Position' true) < Q.RangeSqr && Player.Distance(bestMinion.Position' true) < Q.RangeSqr)                              {                                  Q.Cast(bestMinion);                                  return;                              }                          }                      }                        if (Player.Distance(target.Position) > minDistance &&                          Player.Distance(target.Position' true) < Q.RangeSqr)                      {                          Q.Cast(target);                      }                  }              }              else if (mode == 1)//Ham mode              {                  if (target == null)                      return;                    if (Q.IsReady() && Utils.TickCount - Q.LastCastAttemptT > 4000 && Player.Distance(target.Position) < Q.Range && Player.Distance(target.Position) > Player.AttackRange)                      Q.Cast(target);              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,Cast_Q,The following statement contains a magic number: if (mode == 0)              {                  if (Q.IsReady() && target != null)                  {                      if (Q.IsKillable(target))                          Q.Cast(target);                        if (Player.GetSpellDamage(target' SpellSlot.Q) * 2 > target.Health)                          Q.Cast(target);                        if (Utils.TickCount - Q.LastCastAttemptT > 3800 && Utils.TickCount - Q.LastCastAttemptT < 4000)                          Q.Cast(target);                        var minDistance = menu.Item("Q_Min_Distance"' true).GetValue<Slider>().Value;                        if (Player.Distance(target.Position' true) > Q.RangeSqr && menu.Item("Q_Gap_Close"' true).GetValue<bool>())                      {                          var allMinionQ = MinionManager.GetMinions(Player.ServerPosition' Q.Range' MinionTypes.All' MinionTeam.NotAlly);                            if (allMinionQ.Count < 1)                              return;                            Obj_AI_Base bestMinion = allMinionQ[0];                            foreach (var minion in allMinionQ)                          {                              if (target.Distance(minion.Position' true) < Q.RangeSqr && Player.Distance(minion.Position' true) < Q.RangeSqr &&                                  target.Distance(minion.Position' true) < target.Distance(Player.Position' true))                                  if (target.Distance(minion.Position' true) < target.Distance(bestMinion.Position' true))                                      bestMinion = minion;                          }                            //check if can Q without activating                          if (bestMinion != null && Utils.TickCount - Q.LastCastAttemptT > 4000)                          {                              if (target.Distance(bestMinion.Position' true) < Q.RangeSqr && Player.Distance(bestMinion.Position' true) < Q.RangeSqr)                              {                                  Q.Cast(bestMinion);                                  return;                              }                          }                      }                        if (Player.Distance(target.Position) > minDistance &&                          Player.Distance(target.Position' true) < Q.RangeSqr)                      {                          Q.Cast(target);                      }                  }              }              else if (mode == 1)//Ham mode              {                  if (target == null)                      return;                    if (Q.IsReady() && Utils.TickCount - Q.LastCastAttemptT > 4000 && Player.Distance(target.Position) < Q.Range && Player.Distance(target.Position) > Player.AttackRange)                      Q.Cast(target);              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,Cast_Q,The following statement contains a magic number: if (mode == 0)              {                  if (Q.IsReady() && target != null)                  {                      if (Q.IsKillable(target))                          Q.Cast(target);                        if (Player.GetSpellDamage(target' SpellSlot.Q) * 2 > target.Health)                          Q.Cast(target);                        if (Utils.TickCount - Q.LastCastAttemptT > 3800 && Utils.TickCount - Q.LastCastAttemptT < 4000)                          Q.Cast(target);                        var minDistance = menu.Item("Q_Min_Distance"' true).GetValue<Slider>().Value;                        if (Player.Distance(target.Position' true) > Q.RangeSqr && menu.Item("Q_Gap_Close"' true).GetValue<bool>())                      {                          var allMinionQ = MinionManager.GetMinions(Player.ServerPosition' Q.Range' MinionTypes.All' MinionTeam.NotAlly);                            if (allMinionQ.Count < 1)                              return;                            Obj_AI_Base bestMinion = allMinionQ[0];                            foreach (var minion in allMinionQ)                          {                              if (target.Distance(minion.Position' true) < Q.RangeSqr && Player.Distance(minion.Position' true) < Q.RangeSqr &&                                  target.Distance(minion.Position' true) < target.Distance(Player.Position' true))                                  if (target.Distance(minion.Position' true) < target.Distance(bestMinion.Position' true))                                      bestMinion = minion;                          }                            //check if can Q without activating                          if (bestMinion != null && Utils.TickCount - Q.LastCastAttemptT > 4000)                          {                              if (target.Distance(bestMinion.Position' true) < Q.RangeSqr && Player.Distance(bestMinion.Position' true) < Q.RangeSqr)                              {                                  Q.Cast(bestMinion);                                  return;                              }                          }                      }                        if (Player.Distance(target.Position) > minDistance &&                          Player.Distance(target.Position' true) < Q.RangeSqr)                      {                          Q.Cast(target);                      }                  }              }              else if (mode == 1)//Ham mode              {                  if (target == null)                      return;                    if (Q.IsReady() && Utils.TickCount - Q.LastCastAttemptT > 4000 && Player.Distance(target.Position) < Q.Range && Player.Distance(target.Position) > Player.AttackRange)                      Q.Cast(target);              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,Cast_Q,The following statement contains a magic number: if (mode == 0)              {                  if (Q.IsReady() && target != null)                  {                      if (Q.IsKillable(target))                          Q.Cast(target);                        if (Player.GetSpellDamage(target' SpellSlot.Q) * 2 > target.Health)                          Q.Cast(target);                        if (Utils.TickCount - Q.LastCastAttemptT > 3800 && Utils.TickCount - Q.LastCastAttemptT < 4000)                          Q.Cast(target);                        var minDistance = menu.Item("Q_Min_Distance"' true).GetValue<Slider>().Value;                        if (Player.Distance(target.Position' true) > Q.RangeSqr && menu.Item("Q_Gap_Close"' true).GetValue<bool>())                      {                          var allMinionQ = MinionManager.GetMinions(Player.ServerPosition' Q.Range' MinionTypes.All' MinionTeam.NotAlly);                            if (allMinionQ.Count < 1)                              return;                            Obj_AI_Base bestMinion = allMinionQ[0];                            foreach (var minion in allMinionQ)                          {                              if (target.Distance(minion.Position' true) < Q.RangeSqr && Player.Distance(minion.Position' true) < Q.RangeSqr &&                                  target.Distance(minion.Position' true) < target.Distance(Player.Position' true))                                  if (target.Distance(minion.Position' true) < target.Distance(bestMinion.Position' true))                                      bestMinion = minion;                          }                            //check if can Q without activating                          if (bestMinion != null && Utils.TickCount - Q.LastCastAttemptT > 4000)                          {                              if (target.Distance(bestMinion.Position' true) < Q.RangeSqr && Player.Distance(bestMinion.Position' true) < Q.RangeSqr)                              {                                  Q.Cast(bestMinion);                                  return;                              }                          }                      }                        if (Player.Distance(target.Position) > minDistance &&                          Player.Distance(target.Position' true) < Q.RangeSqr)                      {                          Q.Cast(target);                      }                  }              }              else if (mode == 1)//Ham mode              {                  if (target == null)                      return;                    if (Q.IsReady() && Utils.TickCount - Q.LastCastAttemptT > 4000 && Player.Distance(target.Position) < Q.Range && Player.Distance(target.Position) > Player.AttackRange)                      Q.Cast(target);              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,Cast_Q,The following statement contains a magic number: if (mode == 0)              {                  if (Q.IsReady() && target != null)                  {                      if (Q.IsKillable(target))                          Q.Cast(target);                        if (Player.GetSpellDamage(target' SpellSlot.Q) * 2 > target.Health)                          Q.Cast(target);                        if (Utils.TickCount - Q.LastCastAttemptT > 3800 && Utils.TickCount - Q.LastCastAttemptT < 4000)                          Q.Cast(target);                        var minDistance = menu.Item("Q_Min_Distance"' true).GetValue<Slider>().Value;                        if (Player.Distance(target.Position' true) > Q.RangeSqr && menu.Item("Q_Gap_Close"' true).GetValue<bool>())                      {                          var allMinionQ = MinionManager.GetMinions(Player.ServerPosition' Q.Range' MinionTypes.All' MinionTeam.NotAlly);                            if (allMinionQ.Count < 1)                              return;                            Obj_AI_Base bestMinion = allMinionQ[0];                            foreach (var minion in allMinionQ)                          {                              if (target.Distance(minion.Position' true) < Q.RangeSqr && Player.Distance(minion.Position' true) < Q.RangeSqr &&                                  target.Distance(minion.Position' true) < target.Distance(Player.Position' true))                                  if (target.Distance(minion.Position' true) < target.Distance(bestMinion.Position' true))                                      bestMinion = minion;                          }                            //check if can Q without activating                          if (bestMinion != null && Utils.TickCount - Q.LastCastAttemptT > 4000)                          {                              if (target.Distance(bestMinion.Position' true) < Q.RangeSqr && Player.Distance(bestMinion.Position' true) < Q.RangeSqr)                              {                                  Q.Cast(bestMinion);                                  return;                              }                          }                      }                        if (Player.Distance(target.Position) > minDistance &&                          Player.Distance(target.Position' true) < Q.RangeSqr)                      {                          Q.Cast(target);                      }                  }              }              else if (mode == 1)//Ham mode              {                  if (target == null)                      return;                    if (Q.IsReady() && Utils.TickCount - Q.LastCastAttemptT > 4000 && Player.Distance(target.Position) < Q.Range && Player.Distance(target.Position) > Player.AttackRange)                      Q.Cast(target);              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,Cast_Q_Last_Hit,The following statement contains a magic number: if (allMinionQ.Count > 0 && Q.IsReady())              {                    foreach (var minion in allMinionQ)                  {                      double dmg = Player.GetSpellDamage(minion' SpellSlot.Q);                        if (dmg > minion.Health + 35)                      {                          if (menu.Item("UseQFarm_Tower"' true).GetValue<bool>())                          {                              if (!minion.UnderTurret(true))                              {                                  Q.Cast(minion);                                  return;                              }                          }                          else                              Q.Cast(minion);                      }                  }              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,Cast_R,The following statement contains a magic number: if (target != null && R.IsReady())              {                  if (Player.GetSpellDamage(target' SpellSlot.R) /                      target.CountEnemiesInRange(R.Range) >                      target.Health - Player.GetAutoAttackDamage(target) * 2)                      R.Cast(target);                    var rHpValue = menu.Item("R_If_HP"' true).GetValue<Slider>().Value;                  if (Player.HealthPercent <= rHpValue)                      R.Cast(target);              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,ModeSwitch,The following statement contains a magic number: if (menu.Item("Combo_Switch"' true).GetValue<KeyBind>().Active && lasttime > Game.Ping)              {                  if (mode == 0)                  {                      menu.Item("Combo_mode"' true).SetValue(new StringList(new[] { "Normal"' "Q-AA-Q-AA-Ult" }' 1));                      _lasttick = Utils.TickCount + 300;                  }                  else if (mode == 1)                  {                      menu.Item("Combo_mode"' true).SetValue(new StringList(new[] { "Normal"' "Q-AA-Q-AA-Ult" }));                      _lasttick = Utils.TickCount + 300;                  }              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,ModeSwitch,The following statement contains a magic number: if (menu.Item("Combo_Switch"' true).GetValue<KeyBind>().Active && lasttime > Game.Ping)              {                  if (mode == 0)                  {                      menu.Item("Combo_mode"' true).SetValue(new StringList(new[] { "Normal"' "Q-AA-Q-AA-Ult" }' 1));                      _lasttick = Utils.TickCount + 300;                  }                  else if (mode == 1)                  {                      menu.Item("Combo_mode"' true).SetValue(new StringList(new[] { "Normal"' "Q-AA-Q-AA-Ult" }));                      _lasttick = Utils.TickCount + 300;                  }              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,Game_OnGameUpdate,The following statement contains a magic number: if (Utils.TickCount - R.LastCastAttemptT < 750 && _dodgeHero != null)                  R.Cast(_dodgeHero);
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,AfterAttack,The following statement contains a magic number: if (unit.IsMe)              {                  if ((menu.Item("ComboActive"' true).GetValue<KeyBind>().Active || menu.Item("HarassActive"' true).GetValue<KeyBind>().Active)                      && (target is Obj_AI_Hero))                  {                      if (menu.Item("E_Reset"' true).GetValue<bool>() && E.IsReady())                      {                          E.Cast();                          Utility.DelayAction.Add(250' OrbwalkManager.ResetAutoAttackTimer);                      }                      int mode = menu.Item("Combo_mode"' true).GetValue<StringList>().SelectedIndex;                      if (mode == 1)                      {                          Q.Cast(target);                            if (QSpell.State == SpellState.Cooldown && R.IsReady())                              R.Cast(target);                      }                  }              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,Obj_AI_Base_OnProcessSpellCast,The following statement contains a magic number: if (OrbwalkManager.IsAutoAttack(args.SData.Name) && args.Target.IsMe && Player.Distance(args.End) < 450)              {                  if (menu.Item("W_Incoming"' true).GetValue<bool>() ||                      (menu.Item("ComboActive"' true).GetValue<KeyBind>().Active && E.IsReady() && menu.Item("UseWCombo"' true).GetValue<bool>()) ||                      (menu.Item("HarassActive"' true).GetValue<KeyBind>().Active && menu.Item("UseWHarass"' true).GetValue<bool>()))                  {                      if (!menu.Item("W_minion"' true).GetValue<bool>() && !(unit is Obj_AI_Hero))                          return;                        if (menu.Item("W_Tower"' true).GetValue<bool>() && Player.UnderTurret(true))                          return;                        W.Cast();                  }              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,Obj_AI_Base_OnProcessSpellCast,The following statement contains a magic number: if (unit.IsEnemy && (unit is Obj_AI_Hero) && menu.Item(args.SData.Name + "R_Dodge"' true) != null)              {                  if (Player.Distance(args.End) > R.Range || !R.IsReady())                      return;                    if (menu.Item(args.SData.Name + "R_Dodge"' true).GetValue<bool>() && args.SData.Name == "SyndraR")                  {                      Utility.DelayAction.Add(150' () => R.Cast(unit));                      return;                  }                    if (menu.Item(args.SData.Name + "R_Dodge"' true).GetValue<bool>())                  {                      //Game.PrintChat("RAWR");                      R.Cast(unit);                      _dodgeHero = unit;                      R.LastCastAttemptT = Utils.TickCount;                  }              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_R_Killable"' true).GetValue<bool>() && R.IsReady())              {                  foreach (var target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(5000) && !x.IsDead && x.IsEnemy).OrderBy(x => x.Health))                  {                      Vector2 wts = Drawing.WorldToScreen(target.Position);                      if (Player.GetSpellDamage(target' SpellSlot.R) / target.CountEnemiesInRange(R.Range) > target.Health)                      {                          Drawing.DrawText(wts[0] - 20' wts[1]' Color.White' "KILL!!!");                        }                  }              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_R_Killable"' true).GetValue<bool>() && R.IsReady())              {                  foreach (var target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(5000) && !x.IsDead && x.IsEnemy).OrderBy(x => x.Health))                  {                      Vector2 wts = Drawing.WorldToScreen(target.Position);                      if (Player.GetSpellDamage(target' SpellSlot.R) / target.CountEnemiesInRange(R.Range) > target.Health)                      {                          Drawing.DrawText(wts[0] - 20' wts[1]' Color.White' "KILL!!!");                        }                  }              }
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,Drawing_OnDraw,The following statement contains a magic number: if (mode == 0)                  Drawing.DrawText(wts2[0] - 20' wts2[1]' Color.White' "Normal");              else if (mode == 1)                  Drawing.DrawText(wts2[0] - 20' wts2[1]' Color.White' "Q-AA-Q-AA-Ult");
Magic Number,xSaliceResurrected.Top,Fiora,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Fiora.cs,Drawing_OnDraw,The following statement contains a magic number: if (mode == 0)                  Drawing.DrawText(wts2[0] - 20' wts2[1]' Color.White' "Normal");              else if (mode == 1)                  Drawing.DrawText(wts2[0] - 20' wts2[1]' Color.White' "Q-AA-Q-AA-Ult");
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,SetSpells,The following statement contains a magic number: SpellManager.Q = new Spell(SpellSlot.Q' 650);
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,SetSpells,The following statement contains a magic number: SpellManager.E = new Spell(SpellSlot.E' 425);
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,SetSpells,The following statement contains a magic number: SpellManager.R = new Spell(SpellSlot.R' 1000);
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,LoadMenu,The following statement contains a magic number: {                  key.AddItem(new MenuItem("ComboActive"' "Combo!"' true).SetValue(new KeyBind(32' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("LastHitKey"' "Last Hit!"' true).SetValue(new KeyBind("A".ToCharArray()[0]' KeyBindType.Press)));                  //add to menu                  menu.AddSubMenu(key);              }
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Min_Distance"' "Min range to Q"' true).SetValue(new Slider(300' 0' 600)));                      qMenu.AddItem(new MenuItem("Q_Gap_Close"' "Q Minion to Gap Close"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Q_Under_Tower"' "Q Enemy Under Tower"' true).SetValue(false));                      spellMenu.AddSubMenu(qMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_Only_Stun"' "Save E to Stun"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("E_Running"' "E On Running Enemy"' true).SetValue(true));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_If_HP"' "R If HP <="' true).SetValue(new Slider(20)));                      //rMenu.AddItem(new MenuItem("R_Wait_Sheen"' "Wait for Sheen"' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Min_Distance"' "Min range to Q"' true).SetValue(new Slider(300' 0' 600)));                      qMenu.AddItem(new MenuItem("Q_Gap_Close"' "Q Minion to Gap Close"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Q_Under_Tower"' "Q Enemy Under Tower"' true).SetValue(false));                      spellMenu.AddSubMenu(qMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_Only_Stun"' "Save E to Stun"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("E_Running"' "E On Running Enemy"' true).SetValue(true));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_If_HP"' "R If HP <="' true).SetValue(new Slider(20)));                      //rMenu.AddItem(new MenuItem("R_Wait_Sheen"' "Wait for Sheen"' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Min_Distance"' "Min range to Q"' true).SetValue(new Slider(300' 0' 600)));                      qMenu.AddItem(new MenuItem("Q_Gap_Close"' "Q Minion to Gap Close"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Q_Under_Tower"' "Q Enemy Under Tower"' true).SetValue(false));                      spellMenu.AddSubMenu(qMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_Only_Stun"' "Save E to Stun"' true).SetValue(true));                      eMenu.AddItem(new MenuItem("E_Running"' "E On Running Enemy"' true).SetValue(true));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("R_If_HP"' "R If HP <="' true).SetValue(new Slider(20)));                      //rMenu.AddItem(new MenuItem("R_Wait_Sheen"' "Wait for Sheen"' true).SetValue(false));                        spellMenu.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,LoadMenu,The following statement contains a magic number: {                  harass.AddItem(new MenuItem("UseQHarass"' "Use Q"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseWHarass"' "Use W"' true).SetValue(false));                  harass.AddItem(new MenuItem("UseEHarass"' "Use E"' true).SetValue(true));                  ManaManager.AddManaManagertoMenu(harass' "Harass"' 30);                  //add to menu                  menu.AddSubMenu(harass);              }
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,LoadMenu,The following statement contains a magic number: {                  lastHit.AddItem(new MenuItem("UseQLastHit"' "Use Q"' true).SetValue(true));                  ManaManager.AddManaManagertoMenu(lastHit' "Lasthit"' 30);                  //add to menu                  menu.AddSubMenu(lastHit);              }
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R_Killable"' "Draw R Mark on Killable"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R_Killable"' "Draw R Mark on Killable"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R_Killable"' "Draw R Mark on Killable"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R_Killable"' "Draw R Mark on Killable"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,GetComboDamage,The following statement contains a magic number: if (W.IsReady())                  comboDamage += Player.GetSpellDamage(target' SpellSlot.W) * 4;
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,GetComboDamage,The following statement contains a magic number: if (R.IsReady())                  comboDamage += Player.GetSpellDamage(target' SpellSlot.R) * 4;
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,GetComboDamage,The following statement contains a magic number: return (float)(comboDamage + Player.GetAutoAttackDamage(target) * 4);
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,GetComboDmgPercent,The following statement contains a magic number: var predHpPercent = predHp / target.MaxHealth * 100;
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      var dmg = GetComboDamage(itemTarget);                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      var dmg = GetComboDamage(itemTarget);                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,Farm,The following statement contains a magic number: List<Obj_AI_Base> allMinionsW = MinionManager.GetMinions(ObjectManager.Player.ServerPosition' 250'                  MinionTypes.All' MinionTeam.NotAlly);
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,Cast_Q,The following statement contains a magic number: var target = TargetSelector.GetTarget(Q.Range * 2' TargetSelector.DamageType.Physical);
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,Cast_Q,The following statement contains a magic number: if (Q.IsReady() && target != null)              {                  if (Q.IsKillable(target))                      Q.Cast(target);                    if (Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.E) > target.Health)                      Q.Cast(target);                    var minDistance = menu.Item("Q_Min_Distance"' true).GetValue<Slider>().Value;                    if (!menu.Item("Q_Under_Tower"' true).GetValue<bool>())                      if (target.UnderTurret(true))                          return;                    if (Player.Distance(target.Position' true) > Q.RangeSqr / 2 && menu.Item("Q_Gap_Close"' true).GetValue<bool>())                  {                      var allMinionQ = MinionManager.GetMinions(Player.ServerPosition' Q.Range' MinionTypes.All' MinionTeam.NotAlly);                        Obj_AI_Base bestMinion = allMinionQ[0];                        foreach (var minion in allMinionQ)                      {                          double dmg = 0;                            dmg += Player.GetSpellDamage(minion' SpellSlot.Q);                          if (W.IsReady() || Player.HasBuff("ireliahitenstylecharged"' true))                              dmg += Player.GetSpellDamage(minion' SpellSlot.W);                            if (target.Distance(minion.Position) < Q.Range && Player.Distance(minion.Position) < Q.Range && target.Distance(minion.Position) < target.Distance(Player.Position) && dmg > minion.Health + 40)                              if (target.Distance(minion.Position) < target.Distance(bestMinion.Position))                                  bestMinion = minion;                      }                        //check if can Q without activating                      if (bestMinion != null)                      {                          if (target.Distance(bestMinion.Position' true) < Q.RangeSqr && Player.Distance(bestMinion.Position' true) < Q.RangeSqr)                          {                              var dmg2 = Player.GetSpellDamage(bestMinion' SpellSlot.Q);                                if (dmg2 > bestMinion.Health + 40)                              {                                  Q.Cast(bestMinion);                                  return;                              }                                if (W.IsReady() || Player.HasBuff("ireliahitenstylecharged"' true))                                  dmg2 += Player.GetSpellDamage(bestMinion' SpellSlot.W);                                if (dmg2 > bestMinion.Health)                              {                                  W.Cast();                                  Q.Cast(bestMinion);                                  return;                              }                          }                      }                  }                    if (Player.Distance(target.Position) > minDistance && Player.Distance(target.Position' true) < Q.RangeSqr)                  {                      Q.Cast(target);                  }              }
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,Cast_Q,The following statement contains a magic number: if (Q.IsReady() && target != null)              {                  if (Q.IsKillable(target))                      Q.Cast(target);                    if (Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.E) > target.Health)                      Q.Cast(target);                    var minDistance = menu.Item("Q_Min_Distance"' true).GetValue<Slider>().Value;                    if (!menu.Item("Q_Under_Tower"' true).GetValue<bool>())                      if (target.UnderTurret(true))                          return;                    if (Player.Distance(target.Position' true) > Q.RangeSqr / 2 && menu.Item("Q_Gap_Close"' true).GetValue<bool>())                  {                      var allMinionQ = MinionManager.GetMinions(Player.ServerPosition' Q.Range' MinionTypes.All' MinionTeam.NotAlly);                        Obj_AI_Base bestMinion = allMinionQ[0];                        foreach (var minion in allMinionQ)                      {                          double dmg = 0;                            dmg += Player.GetSpellDamage(minion' SpellSlot.Q);                          if (W.IsReady() || Player.HasBuff("ireliahitenstylecharged"' true))                              dmg += Player.GetSpellDamage(minion' SpellSlot.W);                            if (target.Distance(minion.Position) < Q.Range && Player.Distance(minion.Position) < Q.Range && target.Distance(minion.Position) < target.Distance(Player.Position) && dmg > minion.Health + 40)                              if (target.Distance(minion.Position) < target.Distance(bestMinion.Position))                                  bestMinion = minion;                      }                        //check if can Q without activating                      if (bestMinion != null)                      {                          if (target.Distance(bestMinion.Position' true) < Q.RangeSqr && Player.Distance(bestMinion.Position' true) < Q.RangeSqr)                          {                              var dmg2 = Player.GetSpellDamage(bestMinion' SpellSlot.Q);                                if (dmg2 > bestMinion.Health + 40)                              {                                  Q.Cast(bestMinion);                                  return;                              }                                if (W.IsReady() || Player.HasBuff("ireliahitenstylecharged"' true))                                  dmg2 += Player.GetSpellDamage(bestMinion' SpellSlot.W);                                if (dmg2 > bestMinion.Health)                              {                                  W.Cast();                                  Q.Cast(bestMinion);                                  return;                              }                          }                      }                  }                    if (Player.Distance(target.Position) > minDistance && Player.Distance(target.Position' true) < Q.RangeSqr)                  {                      Q.Cast(target);                  }              }
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,Cast_Q,The following statement contains a magic number: if (Q.IsReady() && target != null)              {                  if (Q.IsKillable(target))                      Q.Cast(target);                    if (Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.E) > target.Health)                      Q.Cast(target);                    var minDistance = menu.Item("Q_Min_Distance"' true).GetValue<Slider>().Value;                    if (!menu.Item("Q_Under_Tower"' true).GetValue<bool>())                      if (target.UnderTurret(true))                          return;                    if (Player.Distance(target.Position' true) > Q.RangeSqr / 2 && menu.Item("Q_Gap_Close"' true).GetValue<bool>())                  {                      var allMinionQ = MinionManager.GetMinions(Player.ServerPosition' Q.Range' MinionTypes.All' MinionTeam.NotAlly);                        Obj_AI_Base bestMinion = allMinionQ[0];                        foreach (var minion in allMinionQ)                      {                          double dmg = 0;                            dmg += Player.GetSpellDamage(minion' SpellSlot.Q);                          if (W.IsReady() || Player.HasBuff("ireliahitenstylecharged"' true))                              dmg += Player.GetSpellDamage(minion' SpellSlot.W);                            if (target.Distance(minion.Position) < Q.Range && Player.Distance(minion.Position) < Q.Range && target.Distance(minion.Position) < target.Distance(Player.Position) && dmg > minion.Health + 40)                              if (target.Distance(minion.Position) < target.Distance(bestMinion.Position))                                  bestMinion = minion;                      }                        //check if can Q without activating                      if (bestMinion != null)                      {                          if (target.Distance(bestMinion.Position' true) < Q.RangeSqr && Player.Distance(bestMinion.Position' true) < Q.RangeSqr)                          {                              var dmg2 = Player.GetSpellDamage(bestMinion' SpellSlot.Q);                                if (dmg2 > bestMinion.Health + 40)                              {                                  Q.Cast(bestMinion);                                  return;                              }                                if (W.IsReady() || Player.HasBuff("ireliahitenstylecharged"' true))                                  dmg2 += Player.GetSpellDamage(bestMinion' SpellSlot.W);                                if (dmg2 > bestMinion.Health)                              {                                  W.Cast();                                  Q.Cast(bestMinion);                                  return;                              }                          }                      }                  }                    if (Player.Distance(target.Position) > minDistance && Player.Distance(target.Position' true) < Q.RangeSqr)                  {                      Q.Cast(target);                  }              }
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,Cast_Q_Last_Hit,The following statement contains a magic number: if (allMinionQ.Count > 0 && Q.IsReady())              {                    foreach (var minion in allMinionQ)                  {                      double dmg = Player.GetSpellDamage(minion' SpellSlot.Q);                        if (Player.HasBuff("ireliahitenstylecharged"' true))                          dmg += Player.GetSpellDamage(minion' SpellSlot.W);                          if (dmg > minion.Health + 35)                      {                          if (menu.Item("UseQFarm_Tower"' true).GetValue<bool>())                          {                              if (!minion.UnderTurret(true))                              {                                  Q.Cast(minion);                                  return;                              }                          }                          else                              Q.Cast(minion);                      }                  }              }
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,Cast_W,The following statement contains a magic number: var target = TargetSelector.GetTarget(200' TargetSelector.DamageType.Physical);
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,Cast_E,The following statement contains a magic number: if (target != null && E.IsReady())              {                  if (E.IsKillable(target))                      E.Cast(target);                    if (menu.Item("E_Only_Stun"' true).GetValue<bool>())                  {                      var targetHealthPercent = target.Health / target.MaxHealth * 100;                        if (Player.HealthPercent < targetHealthPercent)                      {                          E.Cast(target);                          return;                      }                  }                    if (menu.Item("E_Running"' true).GetValue<bool>())                  {                      var pred = Prediction.GetPrediction(target' 1f);                        if (Player.Distance(target.Position) < Player.Distance(pred.UnitPosition) && Player.Distance(target.Position) > 200)                          E.Cast(target);                  }              }
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,Cast_E,The following statement contains a magic number: if (target != null && E.IsReady())              {                  if (E.IsKillable(target))                      E.Cast(target);                    if (menu.Item("E_Only_Stun"' true).GetValue<bool>())                  {                      var targetHealthPercent = target.Health / target.MaxHealth * 100;                        if (Player.HealthPercent < targetHealthPercent)                      {                          E.Cast(target);                          return;                      }                  }                    if (menu.Item("E_Running"' true).GetValue<bool>())                  {                      var pred = Prediction.GetPrediction(target' 1f);                        if (Player.Distance(target.Position) < Player.Distance(pred.UnitPosition) && Player.Distance(target.Position) > 200)                          E.Cast(target);                  }              }
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,Cast_R,The following statement contains a magic number: if (target != null && R.IsReady())              {                  if (!Player.HasBuff("IreliaTranscendentBlades"))                  {                      if (GetComboDmgPercent(target) < 25)                          R.Cast(target);                        var rHpValue = menu.Item("R_If_HP"' true).GetValue<Slider>().Value;                      if (Player.HealthPercent <= rHpValue)                          R.Cast(target);                  }                  else if (Player.HasBuff("IreliaTranscendentBlades"))                  {                      R.Cast(target);                  }              }
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,Interrupter_OnPosibleToInterrupt,The following statement contains a magic number: if (menu.Item("QE_Interrupt"' true).GetValue<bool>())              {                  var enemyHp = unit.Health / unit.MaxHealth * 100;                  if (Player.HealthPercent > enemyHp)                      return;                    if (unit.IsValidTarget(E.Range))                      E.Cast(unit);                    if (unit.IsValidTarget(Q.Range))                  {                      Q.Cast(unit);                      E.Cast(unit);                  }              }
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_R_Killable"' true).GetValue<bool>())              {                  foreach (var target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(5000) && !x.IsDead && x.IsEnemy).OrderBy(x => x.Health))                  {                      Vector2 wts = Drawing.WorldToScreen(target.Position);                      if (GetComboDmgPercent(target) < 30 && R.IsReady())                      {                          if (Utils.TickCount - _lastNotification > 0)                          {                              Notifications.AddNotification(target.CharData.BaseSkinName + " Is Killable!"' 500);                              _lastNotification = Utils.TickCount + 5000;                          }                      }                        var enemyhp = target.Health / target.MaxHealth * 100;                      if (Player.HealthPercent < enemyhp && E.IsReady())                          Drawing.DrawText(wts[0] - 20' wts[1] - 30' Color.White' "Stunnable");                  }              }
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_R_Killable"' true).GetValue<bool>())              {                  foreach (var target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(5000) && !x.IsDead && x.IsEnemy).OrderBy(x => x.Health))                  {                      Vector2 wts = Drawing.WorldToScreen(target.Position);                      if (GetComboDmgPercent(target) < 30 && R.IsReady())                      {                          if (Utils.TickCount - _lastNotification > 0)                          {                              Notifications.AddNotification(target.CharData.BaseSkinName + " Is Killable!"' 500);                              _lastNotification = Utils.TickCount + 5000;                          }                      }                        var enemyhp = target.Health / target.MaxHealth * 100;                      if (Player.HealthPercent < enemyhp && E.IsReady())                          Drawing.DrawText(wts[0] - 20' wts[1] - 30' Color.White' "Stunnable");                  }              }
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_R_Killable"' true).GetValue<bool>())              {                  foreach (var target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(5000) && !x.IsDead && x.IsEnemy).OrderBy(x => x.Health))                  {                      Vector2 wts = Drawing.WorldToScreen(target.Position);                      if (GetComboDmgPercent(target) < 30 && R.IsReady())                      {                          if (Utils.TickCount - _lastNotification > 0)                          {                              Notifications.AddNotification(target.CharData.BaseSkinName + " Is Killable!"' 500);                              _lastNotification = Utils.TickCount + 5000;                          }                      }                        var enemyhp = target.Health / target.MaxHealth * 100;                      if (Player.HealthPercent < enemyhp && E.IsReady())                          Drawing.DrawText(wts[0] - 20' wts[1] - 30' Color.White' "Stunnable");                  }              }
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_R_Killable"' true).GetValue<bool>())              {                  foreach (var target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(5000) && !x.IsDead && x.IsEnemy).OrderBy(x => x.Health))                  {                      Vector2 wts = Drawing.WorldToScreen(target.Position);                      if (GetComboDmgPercent(target) < 30 && R.IsReady())                      {                          if (Utils.TickCount - _lastNotification > 0)                          {                              Notifications.AddNotification(target.CharData.BaseSkinName + " Is Killable!"' 500);                              _lastNotification = Utils.TickCount + 5000;                          }                      }                        var enemyhp = target.Health / target.MaxHealth * 100;                      if (Player.HealthPercent < enemyhp && E.IsReady())                          Drawing.DrawText(wts[0] - 20' wts[1] - 30' Color.White' "Stunnable");                  }              }
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_R_Killable"' true).GetValue<bool>())              {                  foreach (var target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(5000) && !x.IsDead && x.IsEnemy).OrderBy(x => x.Health))                  {                      Vector2 wts = Drawing.WorldToScreen(target.Position);                      if (GetComboDmgPercent(target) < 30 && R.IsReady())                      {                          if (Utils.TickCount - _lastNotification > 0)                          {                              Notifications.AddNotification(target.CharData.BaseSkinName + " Is Killable!"' 500);                              _lastNotification = Utils.TickCount + 5000;                          }                      }                        var enemyhp = target.Health / target.MaxHealth * 100;                      if (Player.HealthPercent < enemyhp && E.IsReady())                          Drawing.DrawText(wts[0] - 20' wts[1] - 30' Color.White' "Stunnable");                  }              }
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_R_Killable"' true).GetValue<bool>())              {                  foreach (var target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(5000) && !x.IsDead && x.IsEnemy).OrderBy(x => x.Health))                  {                      Vector2 wts = Drawing.WorldToScreen(target.Position);                      if (GetComboDmgPercent(target) < 30 && R.IsReady())                      {                          if (Utils.TickCount - _lastNotification > 0)                          {                              Notifications.AddNotification(target.CharData.BaseSkinName + " Is Killable!"' 500);                              _lastNotification = Utils.TickCount + 5000;                          }                      }                        var enemyhp = target.Health / target.MaxHealth * 100;                      if (Player.HealthPercent < enemyhp && E.IsReady())                          Drawing.DrawText(wts[0] - 20' wts[1] - 30' Color.White' "Stunnable");                  }              }
Magic Number,xSaliceResurrected.Top,Irelia,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Irelia.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_R_Killable"' true).GetValue<bool>())              {                  foreach (var target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(5000) && !x.IsDead && x.IsEnemy).OrderBy(x => x.Health))                  {                      Vector2 wts = Drawing.WorldToScreen(target.Position);                      if (GetComboDmgPercent(target) < 30 && R.IsReady())                      {                          if (Utils.TickCount - _lastNotification > 0)                          {                              Notifications.AddNotification(target.CharData.BaseSkinName + " Is Killable!"' 500);                              _lastNotification = Utils.TickCount + 5000;                          }                      }                        var enemyhp = target.Health / target.MaxHealth * 100;                      if (Player.HealthPercent < enemyhp && E.IsReady())                          Drawing.DrawText(wts[0] - 20' wts[1] - 30' Color.White' "Stunnable");                  }              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadSpell,The following statement contains a magic number: SpellManager.Q = new Spell(SpellSlot.Q' 725);
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadSpell,The following statement contains a magic number: SpellManager.QExtend = new Spell(SpellSlot.Q' 850);
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadSpell,The following statement contains a magic number: SpellManager.W = new Spell(SpellSlot.W' 450);
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadSpell,The following statement contains a magic number: SpellManager.E = new Spell(SpellSlot.E' 1050);
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadSpell,The following statement contains a magic number: SpellManager.R = new Spell(SpellSlot.R' 700);
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadSpell,The following statement contains a magic number: SpellManager.Q.SetSkillshot(0.50f' 100' 1300' false' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadSpell,The following statement contains a magic number: SpellManager.Q.SetSkillshot(0.50f' 100' 1300' false' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadSpell,The following statement contains a magic number: SpellManager.QExtend.SetSkillshot(0.50f' 150' 1300' true' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadSpell,The following statement contains a magic number: SpellManager.QExtend.SetSkillshot(0.50f' 150' 1300' true' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadSpell,The following statement contains a magic number: SpellManager.W.SetSkillshot(0.25f' 450' float.MaxValue' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadSpell,The following statement contains a magic number: SpellManager.E.SetSkillshot(0.50f' 110' 850' false' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadSpell,The following statement contains a magic number: SpellManager.E.SetSkillshot(0.50f' 110' 850' false' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  combo.AddItem(new MenuItem("UseQCombo"' "Use Q"' true).SetValue(true));                  combo.AddItem(new MenuItem("UseWCombo"' "Use W"' true).SetValue(true));                  combo.AddItem(new MenuItem("UseECombo"' "Use E"' true).SetValue(true));                  combo.AddItem(new MenuItem("UseRCombo"' "Use R"' true).SetValue(true));                  combo.AddItem(new MenuItem("rHp"' "R if HP <"' true).SetValue(new Slider(20)));                  combo.AddItem(new MenuItem("defR"' "R Self if > enemy"' true).SetValue(new Slider(3' 0' 5)));                  combo.AddSubMenu(HitChanceManager.AddHitChanceMenuCombo(true' false' true' false));                  menu.AddSubMenu(combo);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  combo.AddItem(new MenuItem("UseQCombo"' "Use Q"' true).SetValue(true));                  combo.AddItem(new MenuItem("UseWCombo"' "Use W"' true).SetValue(true));                  combo.AddItem(new MenuItem("UseECombo"' "Use E"' true).SetValue(true));                  combo.AddItem(new MenuItem("UseRCombo"' "Use R"' true).SetValue(true));                  combo.AddItem(new MenuItem("rHp"' "R if HP <"' true).SetValue(new Slider(20)));                  combo.AddItem(new MenuItem("defR"' "R Self if > enemy"' true).SetValue(new Slider(3' 0' 5)));                  combo.AddSubMenu(HitChanceManager.AddHitChanceMenuCombo(true' false' true' false));                  menu.AddSubMenu(combo);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  combo.AddItem(new MenuItem("UseQCombo"' "Use Q"' true).SetValue(true));                  combo.AddItem(new MenuItem("UseWCombo"' "Use W"' true).SetValue(true));                  combo.AddItem(new MenuItem("UseECombo"' "Use E"' true).SetValue(true));                  combo.AddItem(new MenuItem("UseRCombo"' "Use R"' true).SetValue(true));                  combo.AddItem(new MenuItem("rHp"' "R if HP <"' true).SetValue(new Slider(20)));                  combo.AddItem(new MenuItem("defR"' "R Self if > enemy"' true).SetValue(new Slider(3' 0' 5)));                  combo.AddSubMenu(HitChanceManager.AddHitChanceMenuCombo(true' false' true' false));                  menu.AddSubMenu(combo);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  harass.AddItem(new MenuItem("UseQHarass"' "Use Q"' true).SetValue(true));                  harass.AddItem(new MenuItem("UseWHarass"' "Use W"' true).SetValue(false));                  harass.AddItem(new MenuItem("UseEHarass"' "Use E"' true).SetValue(true));                  harass.AddSubMenu(HitChanceManager.AddHitChanceMenuHarass(true' false' true' false));                  ManaManager.AddManaManagertoMenu(harass' "Harass"' 30);                  menu.AddSubMenu(harass);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  farm.AddItem(new MenuItem("UseQFarm"' "Use Q"' true).SetValue(false));                  farm.AddItem(new MenuItem("UseWFarm"' "Use W"' true).SetValue(false));                  farm.AddItem(new MenuItem("UseEFarm"' "Use E"' true).SetValue(false));                  ManaManager.AddManaManagertoMenu(harass' "Farm"' 30);                  menu.AddSubMenu(farm);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  misc.AddSubMenu(AoeSpellManager.AddHitChanceMenuCombo(true' true' true' false));                  misc.AddItem(new MenuItem("UseInt"' "Use R to Interrupt"' true).SetValue(true));                  misc.AddItem(new MenuItem("UseGap"' "Use W for GapCloser"' true).SetValue(true));                  misc.AddItem(new MenuItem("smartKS"' "Use Smart KS System"' true).SetValue(true));                  misc.AddItem(new MenuItem("UseHAM"' "Always use E"' true).SetValue(new KeyBind("I".ToCharArray()[0]' KeyBindType.Toggle)));                  misc.AddItem(new MenuItem("UseEGap"' "Use E to Gap Close"' true).SetValue(true));                  misc.AddItem(new MenuItem("gapD"' "Min Distance"' true).SetValue(new Slider(600' 300' 1050)));                  menu.AddSubMenu(misc);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  misc.AddSubMenu(AoeSpellManager.AddHitChanceMenuCombo(true' true' true' false));                  misc.AddItem(new MenuItem("UseInt"' "Use R to Interrupt"' true).SetValue(true));                  misc.AddItem(new MenuItem("UseGap"' "Use W for GapCloser"' true).SetValue(true));                  misc.AddItem(new MenuItem("smartKS"' "Use Smart KS System"' true).SetValue(true));                  misc.AddItem(new MenuItem("UseHAM"' "Always use E"' true).SetValue(new KeyBind("I".ToCharArray()[0]' KeyBindType.Toggle)));                  misc.AddItem(new MenuItem("UseEGap"' "Use E to Gap Close"' true).SetValue(true));                  misc.AddItem(new MenuItem("gapD"' "Min Distance"' true).SetValue(new Slider(600' 300' 1050)));                  menu.AddSubMenu(misc);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  misc.AddSubMenu(AoeSpellManager.AddHitChanceMenuCombo(true' true' true' false));                  misc.AddItem(new MenuItem("UseInt"' "Use R to Interrupt"' true).SetValue(true));                  misc.AddItem(new MenuItem("UseGap"' "Use W for GapCloser"' true).SetValue(true));                  misc.AddItem(new MenuItem("smartKS"' "Use Smart KS System"' true).SetValue(true));                  misc.AddItem(new MenuItem("UseHAM"' "Always use E"' true).SetValue(new KeyBind("I".ToCharArray()[0]' KeyBindType.Toggle)));                  misc.AddItem(new MenuItem("UseEGap"' "Use E to Gap Close"' true).SetValue(true));                  misc.AddItem(new MenuItem("gapD"' "Min Distance"' true).SetValue(new Slider(600' 300' 1050)));                  menu.AddSubMenu(misc);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("qExtend"' "Extended Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("qExtend"' "Extended Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("qExtend"' "Extended Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("qExtend"' "Extended Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("qExtend"' "Extended Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("qExtend"' "Extended Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("qExtend"' "Extended Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("qExtend"' "Extended Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("qExtend"' "Extended Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("qExtend"' "Extended Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("qExtend"' "Extended Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("qExtend"' "Extended Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("qExtend"' "Extended Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("qExtend"' "Extended Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("qExtend"' "Extended Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("qExtend"' "Extended Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("qExtend"' "Extended Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("qExtend"' "Extended Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LoadMenu,The following statement contains a magic number: {                  drawing.AddItem(new MenuItem("QRange"' "Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("qExtend"' "Extended Q range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("WRange"' "W range"' true).SetValue(new Circle(true' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("ERange"' "E range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                  drawing.AddItem(new MenuItem("RRange"' "R range"' true).SetValue(new Circle(false' Color.FromArgb(100' 255' 0' 255))));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawing.AddItem(drawComboDamageMenu);                  drawing.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    menu.AddSubMenu(drawing);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,GetComboDamage,The following statement contains a magic number: if (Q.IsReady())                  damage += Player.GetSpellDamage(enemy' SpellSlot.Q) * 2;
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,UseSpells,The following statement contains a magic number: var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,UseSpells,The following statement contains a magic number: if (itemTarget != null)              {                  var dmg = GetComboDamage(itemTarget);                  ItemManager.Target = itemTarget;                    //see if killable                  if (dmg > itemTarget.Health - 50)                      ItemManager.KillableTarget = true;                    ItemManager.UseTargetted = true;              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,ShouldE,The following statement contains a magic number: if (GetComboDamage(target) >= target.Health + 20)                  return true;
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,CastR,The following statement contains a magic number: if (GetComboDamage(target) > target.Health + 20)              {                  R.Cast(target);                  return;              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,CastR,The following statement contains a magic number: if ((Player.GetSpellDamage(target' SpellSlot.R) * 1.2) > target.Health + 20)              {                  R.Cast(target);                  return;              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,CastR,The following statement contains a magic number: if ((Player.GetSpellDamage(target' SpellSlot.R) * 1.2) > target.Health + 20)              {                  R.Cast(target);                  return;              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,CastR,The following statement contains a magic number: var hpPercent = Player.Health / Player.MaxHealth * 100;
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,CastR,The following statement contains a magic number: if (Player.CountEnemiesInRange(300) >= rDef)              {                  R.CastOnUnit(Player);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,SmartKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1000) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage))              {                  //Q                  if (Player.Distance(target.ServerPosition) <= Q.Range && (Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 20)                  {                      if (Q.IsReady())                      {                          Q.Cast(target);                          return;                      }                  }                    //E                  if (Player.Distance(target.ServerPosition) <= E.Range && (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 20)                  {                      if (E.IsReady() && E.GetPrediction(target).Hitchance >= HitChance.High)                      {                          E.Cast(target);                          return;                      }                  }                    //W                  if (Player.Distance(target.ServerPosition) <= W.Width && (Player.GetSpellDamage(target' SpellSlot.W)) > target.Health + 20)                  {                      if (W.IsReady())                      {                          W.Cast();                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,SmartKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1000) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage))              {                  //Q                  if (Player.Distance(target.ServerPosition) <= Q.Range && (Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 20)                  {                      if (Q.IsReady())                      {                          Q.Cast(target);                          return;                      }                  }                    //E                  if (Player.Distance(target.ServerPosition) <= E.Range && (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 20)                  {                      if (E.IsReady() && E.GetPrediction(target).Hitchance >= HitChance.High)                      {                          E.Cast(target);                          return;                      }                  }                    //W                  if (Player.Distance(target.ServerPosition) <= W.Width && (Player.GetSpellDamage(target' SpellSlot.W)) > target.Health + 20)                  {                      if (W.IsReady())                      {                          W.Cast();                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,SmartKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1000) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage))              {                  //Q                  if (Player.Distance(target.ServerPosition) <= Q.Range && (Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 20)                  {                      if (Q.IsReady())                      {                          Q.Cast(target);                          return;                      }                  }                    //E                  if (Player.Distance(target.ServerPosition) <= E.Range && (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 20)                  {                      if (E.IsReady() && E.GetPrediction(target).Hitchance >= HitChance.High)                      {                          E.Cast(target);                          return;                      }                  }                    //W                  if (Player.Distance(target.ServerPosition) <= W.Width && (Player.GetSpellDamage(target' SpellSlot.W)) > target.Health + 20)                  {                      if (W.IsReady())                      {                          W.Cast();                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,SmartKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1000) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage))              {                  //Q                  if (Player.Distance(target.ServerPosition) <= Q.Range && (Player.GetSpellDamage(target' SpellSlot.Q)) > target.Health + 20)                  {                      if (Q.IsReady())                      {                          Q.Cast(target);                          return;                      }                  }                    //E                  if (Player.Distance(target.ServerPosition) <= E.Range && (Player.GetSpellDamage(target' SpellSlot.E)) > target.Health + 20)                  {                      if (E.IsReady() && E.GetPrediction(target).Hitchance >= HitChance.High)                      {                          E.Cast(target);                          return;                      }                  }                    //W                  if (Player.Distance(target.ServerPosition) <= W.Width && (Player.GetSpellDamage(target' SpellSlot.W)) > target.Health + 20)                  {                      if (W.IsReady())                      {                          W.Cast();                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,DetonateE,The following statement contains a magic number: var enemy = TargetSelector.GetTarget(2000' TargetSelector.DamageType.Magical);
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,DetonateE,The following statement contains a magic number: if (_eMissle == null || !enemy.IsValidTarget(2000))                  return;
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,DetonateE,The following statement contains a magic number: if (enemy.ServerPosition.Distance(_eMissle.Position) < 110 && _eCreated && menu.Item("ComboActive"' true).GetValue<KeyBind>().Active && E.IsReady())              {                  E.Cast();              }              else if (_eCreated && menu.Item("ComboActive"' true).GetValue<KeyBind>().Active && menu.Item("UseEGap"' true).GetValue<bool>()                  && Player.Distance(enemy.Position) > enemy.Distance(_eMissle.Position) && E.IsReady())              {                  if (_eMissle.EndPosition.Distance(_eMissle.Position) < 400 && enemy.Distance(_eMissle.Position) < enemy.Distance(_eMissle.EndPosition))                      E.Cast();                  else if (_eMissle.Position == _eMissle.EndPosition)                      E.Cast();              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,DetonateE,The following statement contains a magic number: if (enemy.ServerPosition.Distance(_eMissle.Position) < 110 && _eCreated && menu.Item("ComboActive"' true).GetValue<KeyBind>().Active && E.IsReady())              {                  E.Cast();              }              else if (_eCreated && menu.Item("ComboActive"' true).GetValue<KeyBind>().Active && menu.Item("UseEGap"' true).GetValue<bool>()                  && Player.Distance(enemy.Position) > enemy.Distance(_eMissle.Position) && E.IsReady())              {                  if (_eMissle.EndPosition.Distance(_eMissle.Position) < 400 && enemy.Distance(_eMissle.Position) < enemy.Distance(_eMissle.EndPosition))                      E.Cast();                  else if (_eMissle.Position == _eMissle.EndPosition)                      E.Cast();              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,GapClose,The following statement contains a magic number: var target = TargetSelector.GetTarget(1500' TargetSelector.DamageType.Magical);
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,GapClose,The following statement contains a magic number: if (!target.IsValidTarget(1500))                  return;
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LastHit,The following statement contains a magic number: if (!Orbwalking.CanMove(40)) return;
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LastHit,The following statement contains a magic number: if (Q.IsReady())              {                  foreach (var minion in allMinions)                  {                      if (minion.IsValidTarget() && HealthPrediction.GetHealthPrediction(minion' (int)(Player.Distance(minion.Position) * 1000 / 1400)) < Player.GetSpellDamage(minion' SpellSlot.Q) - 10)                      {                          if (Q.IsReady())                          {                              Q.Cast(minion);                              return;                          }                      }                  }              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LastHit,The following statement contains a magic number: if (Q.IsReady())              {                  foreach (var minion in allMinions)                  {                      if (minion.IsValidTarget() && HealthPrediction.GetHealthPrediction(minion' (int)(Player.Distance(minion.Position) * 1000 / 1400)) < Player.GetSpellDamage(minion' SpellSlot.Q) - 10)                      {                          if (Q.IsReady())                          {                              Q.Cast(minion);                              return;                          }                      }                  }              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,LastHit,The following statement contains a magic number: if (Q.IsReady())              {                  foreach (var minion in allMinions)                  {                      if (minion.IsValidTarget() && HealthPrediction.GetHealthPrediction(minion' (int)(Player.Distance(minion.Position) * 1000 / 1400)) < Player.GetSpellDamage(minion' SpellSlot.Q) - 10)                      {                          if (Q.IsReady())                          {                              Q.Cast(minion);                              return;                          }                      }                  }              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,Farm,The following statement contains a magic number: if (useE && E.IsReady() && !_eCreated)              {                  var ePos = E.GetLineFarmLocation(allMinionsE);                  if (ePos.MinionsHit >= 3)                      E.Cast(ePos.Position);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,Farm,The following statement contains a magic number: if (useQ && Q.IsReady())              {                  var qPos = Q.GetLineFarmLocation(allMinionsQ);                  if (qPos.MinionsHit >= 2)                      Q.Cast(qPos.Position);              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,Farm,The following statement contains a magic number: if (useW && W.IsReady())              {                  if (allMinionsW.Count >= 2)                      W.Cast();              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,CheckUnderTower,The following statement contains a magic number: foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>())              {                  if (enemy.IsEnemy && Player.Distance(enemy.ServerPosition) <= R.Range)                  {                      if (ObjectManager.Get<Obj_AI_Turret>().Where(turret => turret != null && turret.IsValid && turret.IsAlly && turret.Health > 0).Any(turret => Vector2.Distance(enemy.Position.To2D()' turret.Position.To2D()) < 750 && R.IsReady()))                      {                          R.Cast(enemy);                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Top,Lissandra,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Lissandra.cs,Game_OnGameUpdate,The following statement contains a magic number: if (menu.Item("stunMelles"' true).GetValue<KeyBind>().Active && R.IsReady())              {                  foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(200) && !x.HasBuffOfType(BuffType.Invulnerability)).OrderByDescending(GetComboDamage))                  {                      R.Cast(target);                  }              }
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadSpells,The following statement contains a magic number: SpellManager.P = new Spell(SpellSlot.R' 4000);
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadSpells,The following statement contains a magic number: SpellManager.Q = new Spell(SpellSlot.Q' 500);
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadSpells,The following statement contains a magic number: SpellManager.E = new Spell(SpellSlot.E' 950);
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadSpells,The following statement contains a magic number: SpellManager.R = new Spell(SpellSlot.R' 1700);
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadSpells,The following statement contains a magic number: SpellManager.R2 = new Spell(SpellSlot.R' 1000);
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadSpells,The following statement contains a magic number: SpellManager.E.SetSkillshot(0.25f' 70' 1200' true' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadSpells,The following statement contains a magic number: SpellManager.E.SetSkillshot(0.25f' 70' 1200' true' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadSpells,The following statement contains a magic number: SpellManager.P.SetSkillshot(0.4f' 130' 2500' false' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadSpells,The following statement contains a magic number: SpellManager.P.SetSkillshot(0.4f' 130' 2500' false' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadSpells,The following statement contains a magic number: SpellManager.R.SetSkillshot(0.4f' 130' 2500' false' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadSpells,The following statement contains a magic number: SpellManager.R.SetSkillshot(0.4f' 130' 2500' false' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadSpells,The following statement contains a magic number: SpellManager.R2.SetSkillshot(0.4f' 130' 2600' false' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadSpells,The following statement contains a magic number: SpellManager.R2.SetSkillshot(0.4f' 130' 2600' false' SkillshotType.SkillshotLine);
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadMenu,The following statement contains a magic number: {                  key.AddItem(new MenuItem("ComboActive"' "Combo!"' true).SetValue(new KeyBind(32' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle)));                  key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("LastHitE"' "Last hit with E!"' true).SetValue(new KeyBind("A".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("UseMecR"' "Force Best Mec Ult"' true).SetValue(new KeyBind("T".ToCharArray()[0]' KeyBindType.Press)));                  //add to menu                  menu.AddSubMenu(key);              }
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Auto_Heat"' "Use Q To generate Heat"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Q_Over_Heat"' "Q Smart OverHeat KS"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("W_Auto_Heat"' "Use W To generate Heat"' true).SetValue(true));                      wMenu.AddItem(new MenuItem("W_Always"' "Use W Always On Combo/Harass"' true).SetValue(false));                      wMenu.AddItem(new MenuItem("W_Block_Spell"' "Use W On Incoming Spells"' true).SetValue(true));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_Auto_Heat"' "Use E To generate Heat"' true).SetValue(false));                      eMenu.AddItem(new MenuItem("E_Over_Heat"' "E Smart OverHeat KS"' true).SetValue(true));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("Line_If_Enemy_Count"' "Auto R If >= Enemy' 6 = Off"' true).SetValue(new Slider(4' 1' 6)));                      rMenu.AddItem(new MenuItem("Line_If_Enemy_Count_Combo"' "R if >= In Combo' 6 = off"' true).SetValue(new Slider(3' 1' 6)));                      spellMenu.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Auto_Heat"' "Use Q To generate Heat"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Q_Over_Heat"' "Q Smart OverHeat KS"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("W_Auto_Heat"' "Use W To generate Heat"' true).SetValue(true));                      wMenu.AddItem(new MenuItem("W_Always"' "Use W Always On Combo/Harass"' true).SetValue(false));                      wMenu.AddItem(new MenuItem("W_Block_Spell"' "Use W On Incoming Spells"' true).SetValue(true));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_Auto_Heat"' "Use E To generate Heat"' true).SetValue(false));                      eMenu.AddItem(new MenuItem("E_Over_Heat"' "E Smart OverHeat KS"' true).SetValue(true));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("Line_If_Enemy_Count"' "Auto R If >= Enemy' 6 = Off"' true).SetValue(new Slider(4' 1' 6)));                      rMenu.AddItem(new MenuItem("Line_If_Enemy_Count_Combo"' "R if >= In Combo' 6 = off"' true).SetValue(new Slider(3' 1' 6)));                      spellMenu.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Auto_Heat"' "Use Q To generate Heat"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Q_Over_Heat"' "Q Smart OverHeat KS"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("W_Auto_Heat"' "Use W To generate Heat"' true).SetValue(true));                      wMenu.AddItem(new MenuItem("W_Always"' "Use W Always On Combo/Harass"' true).SetValue(false));                      wMenu.AddItem(new MenuItem("W_Block_Spell"' "Use W On Incoming Spells"' true).SetValue(true));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_Auto_Heat"' "Use E To generate Heat"' true).SetValue(false));                      eMenu.AddItem(new MenuItem("E_Over_Heat"' "E Smart OverHeat KS"' true).SetValue(true));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("Line_If_Enemy_Count"' "Auto R If >= Enemy' 6 = Off"' true).SetValue(new Slider(4' 1' 6)));                      rMenu.AddItem(new MenuItem("Line_If_Enemy_Count_Combo"' "R if >= In Combo' 6 = off"' true).SetValue(new Slider(3' 1' 6)));                      spellMenu.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadMenu,The following statement contains a magic number: {                  var qMenu = new Menu("QMenu"' "QMenu");                  {                      qMenu.AddItem(new MenuItem("Q_Auto_Heat"' "Use Q To generate Heat"' true).SetValue(true));                      qMenu.AddItem(new MenuItem("Q_Over_Heat"' "Q Smart OverHeat KS"' true).SetValue(true));                      spellMenu.AddSubMenu(qMenu);                  }                    var wMenu = new Menu("WMenu"' "WMenu");                  {                      wMenu.AddItem(new MenuItem("W_Auto_Heat"' "Use W To generate Heat"' true).SetValue(true));                      wMenu.AddItem(new MenuItem("W_Always"' "Use W Always On Combo/Harass"' true).SetValue(false));                      wMenu.AddItem(new MenuItem("W_Block_Spell"' "Use W On Incoming Spells"' true).SetValue(true));                      spellMenu.AddSubMenu(wMenu);                  }                    var eMenu = new Menu("EMenu"' "EMenu");                  {                      eMenu.AddItem(new MenuItem("E_Auto_Heat"' "Use E To generate Heat"' true).SetValue(false));                      eMenu.AddItem(new MenuItem("E_Over_Heat"' "E Smart OverHeat KS"' true).SetValue(true));                      spellMenu.AddSubMenu(eMenu);                  }                    var rMenu = new Menu("RMenu"' "RMenu");                  {                      rMenu.AddItem(new MenuItem("Line_If_Enemy_Count"' "Auto R If >= Enemy' 6 = Off"' true).SetValue(new Slider(4' 1' 6)));                      rMenu.AddItem(new MenuItem("Line_If_Enemy_Count_Combo"' "R if >= In Combo' 6 = off"' true).SetValue(new Slider(3' 1' 6)));                      spellMenu.AddSubMenu(rMenu);                  }                    menu.AddSubMenu(spellMenu);              }
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R_Pred"' "Draw R Best Line"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R_Pred"' "Draw R Best Line"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R_Pred"' "Draw R Best Line"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_W"' "Draw W"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R_Pred"' "Draw R Best Line"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                    //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,GetComboDamage,The following statement contains a magic number: if (Q.IsReady())                  comboDamage += GetCurrentHeat() > 50 ? Player.GetSpellDamage(target' SpellSlot.Q) * 2 : Player.GetSpellDamage(target' SpellSlot.Q);
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,GetComboDamage,The following statement contains a magic number: if (Q.IsReady())                  comboDamage += GetCurrentHeat() > 50 ? Player.GetSpellDamage(target' SpellSlot.Q) * 2 : Player.GetSpellDamage(target' SpellSlot.Q);
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,GetComboDamage,The following statement contains a magic number: if (E.IsReady())                  comboDamage += GetCurrentHeat() > 50 ? Player.GetSpellDamage(target' SpellSlot.E) * 1.5 : Player.GetSpellDamage(target' SpellSlot.E);
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,GetComboDamage,The following statement contains a magic number: if (E.IsReady())                  comboDamage += GetCurrentHeat() > 50 ? Player.GetSpellDamage(target' SpellSlot.E) * 1.5 : Player.GetSpellDamage(target' SpellSlot.E);
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,GetComboDamage,The following statement contains a magic number: if (R.IsReady())                  comboDamage += Player.GetSpellDamage(target' SpellSlot.R) * 3;
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      var dmg = GetComboDamage(itemTarget);                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      var dmg = GetComboDamage(itemTarget);                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,Farm,The following statement contains a magic number: if (!OrbwalkManager.CanMove(40))                  return;
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,LastHit,The following statement contains a magic number: if (!OrbwalkManager.CanMove(40))                  return;
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,ShouldQ,The following statement contains a magic number: if (!menu.Item("Q_Over_Heat"' true).GetValue<bool>() && GetCurrentHeat() > 80)                  return false;
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,ShouldQ,The following statement contains a magic number: if (GetCurrentHeat() > 80 && !(Player.GetSpellDamage(target' SpellSlot.Q' 1) + Player.GetAutoAttackDamage(target) * 2 > target.Health))                  return false;
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,ShouldQ,The following statement contains a magic number: if (GetCurrentHeat() > 80 && !(Player.GetSpellDamage(target' SpellSlot.Q' 1) + Player.GetAutoAttackDamage(target) * 2 > target.Health))                  return false;
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,ShouldE,The following statement contains a magic number: if (E.GetPrediction(target).Hitchance < HitChanceManager.GetEHitChance(source))                    if (!menu.Item("E_Over_Heat"' true).GetValue<bool>() && GetCurrentHeat() > 80)                      return false;
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,ShouldE,The following statement contains a magic number: if (GetCurrentHeat() > 80 && !(Player.GetSpellDamage(target' SpellSlot.E' 1) + Player.GetAutoAttackDamage(target) * 2 > target.Health))                  return false;
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,ShouldE,The following statement contains a magic number: if (GetCurrentHeat() > 80 && !(Player.GetSpellDamage(target' SpellSlot.E' 1) + Player.GetAutoAttackDamage(target) * 2 > target.Health))                  return false;
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,StayInDangerZone,The following statement contains a magic number: if (GetCurrentHeat() < 31 && W.IsReady() && menu.Item("W_Auto_Heat"' true).GetValue<bool>())              {                  W.Cast();                  return;              }
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,StayInDangerZone,The following statement contains a magic number: if (GetCurrentHeat() < 31 && Q.IsReady() && menu.Item("Q_Auto_Heat"' true).GetValue<bool>())              {                  var enemy = ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsEnemy).OrderBy(x => Player.Distance(x.Position)).FirstOrDefault();                    if (enemy != null)                      Q.Cast(enemy.ServerPosition);                  return;              }
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,StayInDangerZone,The following statement contains a magic number: if (GetCurrentHeat() < 31 && E.IsReady() && menu.Item("E_Auto_Heat"' true).GetValue<bool>())              {                  var enemy = ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsEnemy && !x.IsDead).OrderBy(x => Player.Distance(x.Position)).FirstOrDefault();                    if (enemy != null)                      E.Cast(enemy);              }
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,Game_OnGameUpdate,The following statement contains a magic number: SpellCastManager.CastBestLine(false' R' R2' (int)(R2.Range / 2)' menu' .9f);
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,Game_OnGameUpdate,The following statement contains a magic number: if (menu.Item("ComboActive"' true).GetValue<KeyBind>().Active)              {                  Combo();              }              else              {                  if (menu.Item("UseMecR"' true).GetValue<KeyBind>().Active)                      SpellCastManager.CastBestLine(true' R' R2' (int)(R2.Range / 2 + 100)' menu' .9f);                    if (menu.Item("LastHitE"' true).GetValue<KeyBind>().Active)                      LastHit();                    if (menu.Item("LaneClearActive"' true).GetValue<KeyBind>().Active)                      Farm();                    if (menu.Item("HarassActiveT"' true).GetValue<KeyBind>().Active)                      Harass();                    if (menu.Item("HarassActive"' true).GetValue<KeyBind>().Active)                      Harass();              }
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,Game_OnGameUpdate,The following statement contains a magic number: if (menu.Item("ComboActive"' true).GetValue<KeyBind>().Active)              {                  Combo();              }              else              {                  if (menu.Item("UseMecR"' true).GetValue<KeyBind>().Active)                      SpellCastManager.CastBestLine(true' R' R2' (int)(R2.Range / 2 + 100)' menu' .9f);                    if (menu.Item("LastHitE"' true).GetValue<KeyBind>().Active)                      LastHit();                    if (menu.Item("LaneClearActive"' true).GetValue<KeyBind>().Active)                      Farm();                    if (menu.Item("HarassActiveT"' true).GetValue<KeyBind>().Active)                      Harass();                    if (menu.Item("HarassActive"' true).GetValue<KeyBind>().Active)                      Harass();              }
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,Obj_AI_Base_OnProcessSpellCast,The following statement contains a magic number: if (unit.IsEnemy && unit.Type == GameObjectType.obj_AI_Hero && W.IsReady() && menu.Item("W_Block_Spell"' true).GetValue<bool>())              {                  if (Player.Distance(args.End) < 400 && GetCurrentHeat() < 70)                  {                      //Game.PrintChat("shielding");                      W.Cast();                  }              }
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,Obj_AI_Base_OnProcessSpellCast,The following statement contains a magic number: if (unit.IsEnemy && unit.Type == GameObjectType.obj_AI_Hero && W.IsReady() && menu.Item("W_Block_Spell"' true).GetValue<bool>())              {                  if (Player.Distance(args.End) < 400 && GetCurrentHeat() < 70)                  {                      //Game.PrintChat("shielding");                      W.Cast();                  }              }
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_W"' true).GetValue<bool>())                  if (W.Level > 0)                      Render.Circle.DrawCircle(Player.Position' W.Range - 2' W.IsReady() ? Color.Green : Color.Red);
Magic Number,xSaliceResurrected.Top,Rumble,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Rumble.cs,Drawing_OnDraw,The following statement contains a magic number: if (menu.Item("Draw_R_Pred"' true).GetValue<bool>() && R.IsReady())              {                  SpellCastManager.DrawBestLine(R' R2' (int)(R2.Range/2)' .9f);              }
Magic Number,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,LoadSpell,The following statement contains a magic number: SpellManager.Q = new Spell(SpellSlot.Q' 600);
Magic Number,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,LoadSpell,The following statement contains a magic number: SpellManager.E = new Spell(SpellSlot.E' 575);
Magic Number,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,LoadSpell,The following statement contains a magic number: SpellManager.R = new Spell(SpellSlot.R' 700);
Magic Number,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,LoadSpell,The following statement contains a magic number: SpellManager.R.SetSkillshot(0.25f' 175' 700' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,LoadSpell,The following statement contains a magic number: SpellManager.R.SetSkillshot(0.25f' 175' 700' false' SkillshotType.SkillshotCircle);
Magic Number,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,LoadMenu,The following statement contains a magic number: {                  key.AddItem(new MenuItem("ComboActive"' "Combo!"' true).SetValue(new KeyBind(32' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActive"' "Harass!"' true).SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("HarassActiveT"' "Harass (toggle)!"' true).SetValue(new KeyBind("N".ToCharArray()[0]' KeyBindType.Toggle)));                  key.AddItem(new MenuItem("LaneClearActive"' "Farm!"' true).SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("LastHitKey"' "Last Hit!"' true).SetValue(new KeyBind("A".ToCharArray()[0]' KeyBindType.Press)));                  key.AddItem(new MenuItem("StackE"' "StackE (toggle)!"' true).SetValue(new KeyBind("T".ToCharArray()[0]' KeyBindType.Toggle)));                  //add to menu                  menu.AddSubMenu(key);              }
Magic Number,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R_Killable"' "Draw R Mark on Killable"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R_Killable"' "Draw R Mark on Killable"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R_Killable"' "Draw R Mark on Killable"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,LoadMenu,The following statement contains a magic number: {                  drawMenu.AddItem(new MenuItem("Draw_Disabled"' "Disable All"' true).SetValue(false));                  drawMenu.AddItem(new MenuItem("Draw_Q"' "Draw Q"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_E"' "Draw E"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R"' "Draw R"' true).SetValue(true));                  drawMenu.AddItem(new MenuItem("Draw_R_Killable"' "Draw R Mark on Killable"' true).SetValue(true));                    MenuItem drawComboDamageMenu = new MenuItem("Draw_ComboDamage"' "Draw Combo Damage"' true).SetValue(true);                  MenuItem drawFill = new MenuItem("Draw_Fill"' "Draw Combo Damage Fill"' true).SetValue(new Circle(true' Color.FromArgb(90' 255' 169' 4)));                  drawMenu.AddItem(drawComboDamageMenu);                  drawMenu.AddItem(drawFill);                  DamageIndicator.DamageToUnit = GetComboDamage;                  DamageIndicator.Enabled = drawComboDamageMenu.GetValue<bool>();                  DamageIndicator.Fill = drawFill.GetValue<Circle>().Active;                  DamageIndicator.FillColor = drawFill.GetValue<Circle>().Color;                  drawComboDamageMenu.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Enabled = eventArgs.GetNewValue<bool>();                      };                  drawFill.ValueChanged +=                      delegate(object sender' OnValueChangeEventArgs eventArgs)                      {                          DamageIndicator.Fill = eventArgs.GetNewValue<Circle>().Active;                          DamageIndicator.FillColor = eventArgs.GetNewValue<Circle>().Color;                      };                  //add to menu                  menu.AddSubMenu(drawMenu);              }
Magic Number,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,GetComboDamage,The following statement contains a magic number: if (R.IsReady())              {                  comboDamage += Player.GetSpellDamage(target' SpellSlot.R);                  comboDamage += comboDamage * 1.12;              }              else if (target.HasBuff("vladimirhemoplaguedebuff"' true))              {                  comboDamage += comboDamage * 1.12;              }
Magic Number,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,GetComboDamage,The following statement contains a magic number: if (R.IsReady())              {                  comboDamage += Player.GetSpellDamage(target' SpellSlot.R);                  comboDamage += comboDamage * 1.12;              }              else if (target.HasBuff("vladimirhemoplaguedebuff"' true))              {                  comboDamage += comboDamage * 1.12;              }
Magic Number,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,UseSpells,The following statement contains a magic number: if (source == "Combo")              {                  var itemTarget = TargetSelector.GetTarget(750' TargetSelector.DamageType.Physical);                  if (itemTarget != null)                  {                      ItemManager.Target = itemTarget;                        //see if killable                      if (dmg > itemTarget.Health - 50)                          ItemManager.KillableTarget = true;                        ItemManager.UseTargetted = true;                  }              }
Magic Number,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,LastHit,The following statement contains a magic number: if (Q.IsReady())              {                  foreach (var minion in allMinions)                  {                      if (minion.IsValidTarget() && HealthPrediction.GetHealthPrediction(minion' (int)(Player.Distance(minion.Position) * 1000 / 1400)) < Player.GetSpellDamage(minion' SpellSlot.Q) - 10)                      {                          Q.Cast(minion);                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,LastHit,The following statement contains a magic number: if (Q.IsReady())              {                  foreach (var minion in allMinions)                  {                      if (minion.IsValidTarget() && HealthPrediction.GetHealthPrediction(minion' (int)(Player.Distance(minion.Position) * 1000 / 1400)) < Player.GetSpellDamage(minion' SpellSlot.Q) - 10)                      {                          Q.Cast(minion);                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,LastHit,The following statement contains a magic number: if (Q.IsReady())              {                  foreach (var minion in allMinions)                  {                      if (minion.IsValidTarget() && HealthPrediction.GetHealthPrediction(minion' (int)(Player.Distance(minion.Position) * 1000 / 1400)) < Player.GetSpellDamage(minion' SpellSlot.Q) - 10)                      {                          Q.Cast(minion);                          return;                      }                  }              }
Magic Number,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,CheckKs,The following statement contains a magic number: foreach (Obj_AI_Hero target in ObjectManager.Get<Obj_AI_Hero>().Where(x => x.IsValidTarget(1300)).OrderByDescending(GetComboDamage))              {                  if (Player.Distance(target.ServerPosition) <= E.Range && Player.GetSpellDamage(target' SpellSlot.Q) + Player.GetSpellDamage(target' SpellSlot.E) > target.Health && Q.IsReady() && E.IsReady())                  {                      E.Cast();                      Q.Cast(target);                      return;                  }                    if (Player.Distance(target.ServerPosition) <= Q.Range && Player.GetSpellDamage(target' SpellSlot.Q) > target.Health && Q.IsReady())                  {                      Q.Cast(target);                      return;                  }                    if (Player.Distance(target.ServerPosition) <= E.Range && Player.GetSpellDamage(target' SpellSlot.E) > target.Health && E.IsReady())                  {                      E.Cast();                      return;                  }                    if (Player.Distance(target.ServerPosition) <= R.Range && Player.GetSpellDamage(target' SpellSlot.R) > target.Health && R.IsReady() && menu.Item("R_KS"' true).GetValue<bool>())                  {                      R.Cast(target);                      return;                  }              }
Magic Number,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,Game_OnGameUpdate,The following statement contains a magic number: if (menu.Item("StackE"' true).GetValue<KeyBind>().Active)              {                  if (E.IsReady() && Utils.TickCount - E.LastCastAttemptT >= 9900)                      E.Cast();              }
Magic Number,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,Obj_AI_Base_OnProcessSpellCast,The following statement contains a magic number: if (args.SData.Name == "VladimirTidesofBlood")              {                  E.LastCastAttemptT = Utils.TickCount + 250;              }
Magic Number,xSaliceResurrected.Top,Vladimir,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Top\Vladimir.cs,AntiGapcloser_OnEnemyGapcloser,The following statement contains a magic number: if (W.IsReady() && gapcloser.Sender.Distance(Player.Position) < 300)                  W.Cast();
Magic Number,xSaliceResurrected.Utilities,DamageIndicator,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\DamageIndicator.cs,Drawing_OnDraw,The following statement contains a magic number: foreach (var unit in ObjectManager.Get<Obj_AI_Hero>().Where(h => h.IsValid && h.IsHPBarRendered && h.IsEnemy))              {                  var barPos = unit.HPBarPosition;                  var damage = _damageToUnit(unit);                  var percentHealthAfterDamage = Math.Max(0' unit.Health - damage) / unit.MaxHealth;                  var yPos = barPos.Y + YOffset;                  var xPosDamage = barPos.X + XOffset + Width * percentHealthAfterDamage;                  var xPosCurrentHp = barPos.X + XOffset + Width * unit.Health / unit.MaxHealth;                    if (damage > unit.Health)                  {                      Text.X = (int)barPos.X + XOffset;                      Text.Y = (int)barPos.Y + YOffset - 13;                      Text.text = ((int)(unit.Health - damage)).ToString(CultureInfo.InvariantCulture);                      Text.OnEndScene();                  }                    Drawing.DrawLine(xPosDamage' yPos' xPosDamage' yPos + Height' 2' Color);                    if (Fill)                  {                      float differenceInHp = xPosCurrentHp - xPosDamage;                      var pos1 = barPos.X + 9 + (107 * percentHealthAfterDamage);                        for (int i = 0; i < differenceInHp; i++)                      {                          Drawing.DrawLine(pos1 + i' yPos' pos1 + i' yPos + Height' 1' FillColor);                      }                  }              }
Magic Number,xSaliceResurrected.Utilities,DamageIndicator,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\DamageIndicator.cs,Drawing_OnDraw,The following statement contains a magic number: foreach (var unit in ObjectManager.Get<Obj_AI_Hero>().Where(h => h.IsValid && h.IsHPBarRendered && h.IsEnemy))              {                  var barPos = unit.HPBarPosition;                  var damage = _damageToUnit(unit);                  var percentHealthAfterDamage = Math.Max(0' unit.Health - damage) / unit.MaxHealth;                  var yPos = barPos.Y + YOffset;                  var xPosDamage = barPos.X + XOffset + Width * percentHealthAfterDamage;                  var xPosCurrentHp = barPos.X + XOffset + Width * unit.Health / unit.MaxHealth;                    if (damage > unit.Health)                  {                      Text.X = (int)barPos.X + XOffset;                      Text.Y = (int)barPos.Y + YOffset - 13;                      Text.text = ((int)(unit.Health - damage)).ToString(CultureInfo.InvariantCulture);                      Text.OnEndScene();                  }                    Drawing.DrawLine(xPosDamage' yPos' xPosDamage' yPos + Height' 2' Color);                    if (Fill)                  {                      float differenceInHp = xPosCurrentHp - xPosDamage;                      var pos1 = barPos.X + 9 + (107 * percentHealthAfterDamage);                        for (int i = 0; i < differenceInHp; i++)                      {                          Drawing.DrawLine(pos1 + i' yPos' pos1 + i' yPos + Height' 1' FillColor);                      }                  }              }
Magic Number,xSaliceResurrected.Utilities,DamageIndicator,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\DamageIndicator.cs,Drawing_OnDraw,The following statement contains a magic number: foreach (var unit in ObjectManager.Get<Obj_AI_Hero>().Where(h => h.IsValid && h.IsHPBarRendered && h.IsEnemy))              {                  var barPos = unit.HPBarPosition;                  var damage = _damageToUnit(unit);                  var percentHealthAfterDamage = Math.Max(0' unit.Health - damage) / unit.MaxHealth;                  var yPos = barPos.Y + YOffset;                  var xPosDamage = barPos.X + XOffset + Width * percentHealthAfterDamage;                  var xPosCurrentHp = barPos.X + XOffset + Width * unit.Health / unit.MaxHealth;                    if (damage > unit.Health)                  {                      Text.X = (int)barPos.X + XOffset;                      Text.Y = (int)barPos.Y + YOffset - 13;                      Text.text = ((int)(unit.Health - damage)).ToString(CultureInfo.InvariantCulture);                      Text.OnEndScene();                  }                    Drawing.DrawLine(xPosDamage' yPos' xPosDamage' yPos + Height' 2' Color);                    if (Fill)                  {                      float differenceInHp = xPosCurrentHp - xPosDamage;                      var pos1 = barPos.X + 9 + (107 * percentHealthAfterDamage);                        for (int i = 0; i < differenceInHp; i++)                      {                          Drawing.DrawLine(pos1 + i' yPos' pos1 + i' yPos + Height' 1' FillColor);                      }                  }              }
Magic Number,xSaliceResurrected.Utilities,DamageIndicator,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\DamageIndicator.cs,Drawing_OnDraw,The following statement contains a magic number: foreach (var unit in ObjectManager.Get<Obj_AI_Hero>().Where(h => h.IsValid && h.IsHPBarRendered && h.IsEnemy))              {                  var barPos = unit.HPBarPosition;                  var damage = _damageToUnit(unit);                  var percentHealthAfterDamage = Math.Max(0' unit.Health - damage) / unit.MaxHealth;                  var yPos = barPos.Y + YOffset;                  var xPosDamage = barPos.X + XOffset + Width * percentHealthAfterDamage;                  var xPosCurrentHp = barPos.X + XOffset + Width * unit.Health / unit.MaxHealth;                    if (damage > unit.Health)                  {                      Text.X = (int)barPos.X + XOffset;                      Text.Y = (int)barPos.Y + YOffset - 13;                      Text.text = ((int)(unit.Health - damage)).ToString(CultureInfo.InvariantCulture);                      Text.OnEndScene();                  }                    Drawing.DrawLine(xPosDamage' yPos' xPosDamage' yPos + Height' 2' Color);                    if (Fill)                  {                      float differenceInHp = xPosCurrentHp - xPosDamage;                      var pos1 = barPos.X + 9 + (107 * percentHealthAfterDamage);                        for (int i = 0; i < differenceInHp; i++)                      {                          Drawing.DrawLine(pos1 + i' yPos' pos1 + i' yPos + Height' 1' FillColor);                      }                  }              }
Magic Number,xSaliceResurrected.Utilities,CustomPermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,Drawing_OnDraw,The following statement contains a magic number: foreach (var obj in MyPermaMenus)              {                  if (obj != null)                  {                      if (obj.MenuItem.GetValue<bool>())                      {                          obj.RenderTxt.X = _menuX;                          obj.RenderTxt.Y = _menuY + yOffset;                            if (Champion.menu.Item(obj.Source' true).GetValue<KeyBind>().Active)                          {                              obj.RenderTxt.Color = new ColorBGRA(209' 179' 40' 255);                              obj.RenderTxt.text = obj.Text + "On";                          }                          else                          {                              obj.RenderTxt.Color = new ColorBGRA(255' 0' 0' 255);                              obj.RenderTxt.text = obj.Text + "Off";                          }                            obj.RenderTxt.OnEndScene();                          yOffset += 20;                      }                  }              }
Magic Number,xSaliceResurrected.Utilities,CustomPermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,Drawing_OnDraw,The following statement contains a magic number: foreach (var obj in MyPermaMenus)              {                  if (obj != null)                  {                      if (obj.MenuItem.GetValue<bool>())                      {                          obj.RenderTxt.X = _menuX;                          obj.RenderTxt.Y = _menuY + yOffset;                            if (Champion.menu.Item(obj.Source' true).GetValue<KeyBind>().Active)                          {                              obj.RenderTxt.Color = new ColorBGRA(209' 179' 40' 255);                              obj.RenderTxt.text = obj.Text + "On";                          }                          else                          {                              obj.RenderTxt.Color = new ColorBGRA(255' 0' 0' 255);                              obj.RenderTxt.text = obj.Text + "Off";                          }                            obj.RenderTxt.OnEndScene();                          yOffset += 20;                      }                  }              }
Magic Number,xSaliceResurrected.Utilities,CustomPermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,Drawing_OnDraw,The following statement contains a magic number: foreach (var obj in MyPermaMenus)              {                  if (obj != null)                  {                      if (obj.MenuItem.GetValue<bool>())                      {                          obj.RenderTxt.X = _menuX;                          obj.RenderTxt.Y = _menuY + yOffset;                            if (Champion.menu.Item(obj.Source' true).GetValue<KeyBind>().Active)                          {                              obj.RenderTxt.Color = new ColorBGRA(209' 179' 40' 255);                              obj.RenderTxt.text = obj.Text + "On";                          }                          else                          {                              obj.RenderTxt.Color = new ColorBGRA(255' 0' 0' 255);                              obj.RenderTxt.text = obj.Text + "Off";                          }                            obj.RenderTxt.OnEndScene();                          yOffset += 20;                      }                  }              }
Magic Number,xSaliceResurrected.Utilities,CustomPermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,Drawing_OnDraw,The following statement contains a magic number: foreach (var obj in MyPermaMenus)              {                  if (obj != null)                  {                      if (obj.MenuItem.GetValue<bool>())                      {                          obj.RenderTxt.X = _menuX;                          obj.RenderTxt.Y = _menuY + yOffset;                            if (Champion.menu.Item(obj.Source' true).GetValue<KeyBind>().Active)                          {                              obj.RenderTxt.Color = new ColorBGRA(209' 179' 40' 255);                              obj.RenderTxt.text = obj.Text + "On";                          }                          else                          {                              obj.RenderTxt.Color = new ColorBGRA(255' 0' 0' 255);                              obj.RenderTxt.text = obj.Text + "Off";                          }                            obj.RenderTxt.OnEndScene();                          yOffset += 20;                      }                  }              }
Magic Number,xSaliceResurrected.Utilities,CustomPermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,Drawing_OnDraw,The following statement contains a magic number: foreach (var obj in MyPermaMenus)              {                  if (obj != null)                  {                      if (obj.MenuItem.GetValue<bool>())                      {                          obj.RenderTxt.X = _menuX;                          obj.RenderTxt.Y = _menuY + yOffset;                            if (Champion.menu.Item(obj.Source' true).GetValue<KeyBind>().Active)                          {                              obj.RenderTxt.Color = new ColorBGRA(209' 179' 40' 255);                              obj.RenderTxt.text = obj.Text + "On";                          }                          else                          {                              obj.RenderTxt.Color = new ColorBGRA(255' 0' 0' 255);                              obj.RenderTxt.text = obj.Text + "Off";                          }                            obj.RenderTxt.OnEndScene();                          yOffset += 20;                      }                  }              }
Magic Number,xSaliceResurrected.Utilities,CustomPermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,Drawing_OnDraw,The following statement contains a magic number: foreach (var obj in MyPermaMenus)              {                  if (obj != null)                  {                      if (obj.MenuItem.GetValue<bool>())                      {                          obj.RenderTxt.X = _menuX;                          obj.RenderTxt.Y = _menuY + yOffset;                            if (Champion.menu.Item(obj.Source' true).GetValue<KeyBind>().Active)                          {                              obj.RenderTxt.Color = new ColorBGRA(209' 179' 40' 255);                              obj.RenderTxt.text = obj.Text + "On";                          }                          else                          {                              obj.RenderTxt.Color = new ColorBGRA(255' 0' 0' 255);                              obj.RenderTxt.text = obj.Text + "Off";                          }                            obj.RenderTxt.OnEndScene();                          yOffset += 20;                      }                  }              }
Magic Number,xSaliceResurrected.Utilities,CustomPermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,Drawing_OnDraw,The following statement contains a magic number: foreach (var obj in MyPermaMenus)              {                  if (obj != null)                  {                      if (obj.MenuItem.GetValue<bool>())                      {                          obj.RenderTxt.X = _menuX;                          obj.RenderTxt.Y = _menuY + yOffset;                            if (Champion.menu.Item(obj.Source' true).GetValue<KeyBind>().Active)                          {                              obj.RenderTxt.Color = new ColorBGRA(209' 179' 40' 255);                              obj.RenderTxt.text = obj.Text + "On";                          }                          else                          {                              obj.RenderTxt.Color = new ColorBGRA(255' 0' 0' 255);                              obj.RenderTxt.text = obj.Text + "Off";                          }                            obj.RenderTxt.OnEndScene();                          yOffset += 20;                      }                  }              }
Magic Number,xSaliceResurrected.Utilities,CustomPermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,Drawing_OnDraw,The following statement contains a magic number: MySprite.X = _menuX - 12;
Magic Number,xSaliceResurrected.Utilities,CustomPermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,Drawing_OnDraw,The following statement contains a magic number: MySprite.Y = _menuY - 35;
Magic Number,xSaliceResurrected.Utilities,CustomPermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,Drawing_OnDraw,The following statement contains a magic number: MyLine.Start = new Vector2(_menuX - 10' _menuY - 10);
Magic Number,xSaliceResurrected.Utilities,CustomPermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,Drawing_OnDraw,The following statement contains a magic number: MyLine.Start = new Vector2(_menuX - 10' _menuY - 10);
Magic Number,xSaliceResurrected.Utilities,CustomPermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,Drawing_OnDraw,The following statement contains a magic number: MyLine.End = new Vector2(_menuX - 10' _menuY + yOffset + 10);
Magic Number,xSaliceResurrected.Utilities,CustomPermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,Drawing_OnDraw,The following statement contains a magic number: MyLine.End = new Vector2(_menuX - 10' _menuY + yOffset + 10);
Magic Number,xSaliceResurrected.Utilities,CustomPermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,Drawing_OnDraw,The following statement contains a magic number: MyLine2.Start = new Vector2(_menuX + 135' _menuY - 10);
Magic Number,xSaliceResurrected.Utilities,CustomPermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,Drawing_OnDraw,The following statement contains a magic number: MyLine2.Start = new Vector2(_menuX + 135' _menuY - 10);
Magic Number,xSaliceResurrected.Utilities,CustomPermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,Drawing_OnDraw,The following statement contains a magic number: MyLine2.End = new Vector2(_menuX + 135' _menuY + yOffset + 10);
Magic Number,xSaliceResurrected.Utilities,CustomPermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,Drawing_OnDraw,The following statement contains a magic number: MyLine2.End = new Vector2(_menuX + 135' _menuY + yOffset + 10);
Magic Number,xSaliceResurrected.Utilities,CustomPermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,Drawing_OnDraw,The following statement contains a magic number: MyLine3.Start = new Vector2(_menuX + 135' _menuY - 10);
Magic Number,xSaliceResurrected.Utilities,CustomPermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,Drawing_OnDraw,The following statement contains a magic number: MyLine3.Start = new Vector2(_menuX + 135' _menuY - 10);
Magic Number,xSaliceResurrected.Utilities,CustomPermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,Drawing_OnDraw,The following statement contains a magic number: MyLine3.End = new Vector2(_menuX - 10' _menuY - 10);
Magic Number,xSaliceResurrected.Utilities,CustomPermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,Drawing_OnDraw,The following statement contains a magic number: MyLine3.End = new Vector2(_menuX - 10' _menuY - 10);
Magic Number,xSaliceResurrected.Utilities,CustomPermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,Drawing_OnDraw,The following statement contains a magic number: MyLine4.Start = new Vector2(_menuX + 135' _menuY + yOffset + 10);
Magic Number,xSaliceResurrected.Utilities,CustomPermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,Drawing_OnDraw,The following statement contains a magic number: MyLine4.Start = new Vector2(_menuX + 135' _menuY + yOffset + 10);
Magic Number,xSaliceResurrected.Utilities,CustomPermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,Drawing_OnDraw,The following statement contains a magic number: MyLine4.End = new Vector2(_menuX - 10' _menuY + yOffset + 10);
Magic Number,xSaliceResurrected.Utilities,CustomPermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,Drawing_OnDraw,The following statement contains a magic number: MyLine4.End = new Vector2(_menuX - 10' _menuY + yOffset + 10);
Magic Number,xSaliceResurrected.Utilities,PermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,PermaMenu,The following statement contains a magic number: RenderTxt = new Render.Text(0' 0' "text"' 16' new ColorBGRA(209' 179' 40' 255)' "monospace");
Magic Number,xSaliceResurrected.Utilities,PermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,PermaMenu,The following statement contains a magic number: RenderTxt = new Render.Text(0' 0' "text"' 16' new ColorBGRA(209' 179' 40' 255)' "monospace");
Magic Number,xSaliceResurrected.Utilities,PermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,PermaMenu,The following statement contains a magic number: RenderTxt = new Render.Text(0' 0' "text"' 16' new ColorBGRA(209' 179' 40' 255)' "monospace");
Magic Number,xSaliceResurrected.Utilities,PermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,PermaMenu,The following statement contains a magic number: RenderTxt = new Render.Text(0' 0' "text"' 16' new ColorBGRA(209' 179' 40' 255)' "monospace");
Magic Number,xSaliceResurrected.Utilities,PermaMenu,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\CustomPermaMenu.cs,PermaMenu,The following statement contains a magic number: RenderTxt = new Render.Text(0' 0' "text"' 16' new ColorBGRA(209' 179' 40' 255)' "monospace");
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,AddToMenu,The following statement contains a magic number: menuDrawing.AddItem(new MenuItem("orb_Draw_MinionHPBar_thickness"' "^ HPBar Thickness").SetValue(new Slider(1' 1' 3)));
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,AddToMenu,The following statement contains a magic number: menuMisc.AddItem(new MenuItem("orb_Misc_Holdzone"' "Hold Position").SetValue(new Slider(50' 0' 200)));
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,AddToMenu,The following statement contains a magic number: menuMisc.AddItem(new MenuItem("orb_Misc_Holdzone"' "Hold Position").SetValue(new Slider(50' 0' 200)));
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,AddToMenu,The following statement contains a magic number: menuMisc.AddItem(new MenuItem("orb_Misc_Farmdelay"' "Farm Delay").SetValue(new Slider(0' 0' 300)));
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,AddToMenu,The following statement contains a magic number: menuMisc.AddItem(new MenuItem("orb_Misc_ExtraWindUp"' "Extra Winduptime").SetValue(new Slider(80' 200' 0)));
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,AddToMenu,The following statement contains a magic number: menuMisc.AddItem(new MenuItem("orb_Misc_ExtraWindUp"' "Extra Winduptime").SetValue(new Slider(80' 200' 0)));
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,AddToMenu,The following statement contains a magic number: menuMisc.AddItem(new MenuItem("orb_Misc_Humanizer"' "Humanizer Delays").SetValue(new Slider(50' 0' 500)));
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,AddToMenu,The following statement contains a magic number: menuMisc.AddItem(new MenuItem("orb_Misc_Humanizer"' "Humanizer Delays").SetValue(new Slider(50' 0' 500)));
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,AddToMenu,The following statement contains a magic number: {                  var modeCombo = new Menu("Combo"' "orb_Modes_Combo");                  modeCombo.AddItem(new MenuItem("Combo_Key"' "Key").SetValue(new KeyBind(32' KeyBindType.Press)));                  modeCombo.AddItem(new MenuItem("Combo_move"' "Movement").SetValue(true));                  modeCombo.AddItem(new MenuItem("Combo_attack"' "Attack").SetValue(true));                  menuModes.AddSubMenu(modeCombo);                    var modeHarass = new Menu("Harass"' "orb_Modes_Harass");                  modeHarass.AddItem(new MenuItem("Harass_Key"' "Key").SetValue(new KeyBind("C".ToCharArray()[0]' KeyBindType.Press)));                  modeHarass.AddItem(new MenuItem("Harass_move"' "Movement").SetValue(true));                  modeHarass.AddItem(new MenuItem("Harass_attack"' "Attack").SetValue(true));                  modeHarass.AddItem(new MenuItem("Harass_Lasthit"' "Lasthit Minions").SetValue(true));                  menuModes.AddSubMenu(modeHarass);                    var modeLaneClear = new Menu("LaneClear"' "orb_Modes_LaneClear");                  modeLaneClear.AddItem(new MenuItem("LaneClear_Key"' "Key").SetValue(new KeyBind("V".ToCharArray()[0]' KeyBindType.Press)));                  modeLaneClear.AddItem(new MenuItem("LaneClear_move"' "Movement").SetValue(true));                  modeLaneClear.AddItem(new MenuItem("LaneClear_attack"' "Attack").SetValue(true));                  menuModes.AddSubMenu(modeLaneClear);                    var modeLasthit = new Menu("LastHit"' "orb_Modes_LastHit");                  modeLasthit.AddItem(new MenuItem("LastHit_Key"' "Key").SetValue(new KeyBind("X".ToCharArray()[0]' KeyBindType.Press)));                  modeLasthit.AddItem(new MenuItem("LastHit_move"' "Movement").SetValue(true));                  modeLasthit.AddItem(new MenuItem("LastHit_attack"' "Attack").SetValue(true));                  modeLasthit.AddItem(new MenuItem("NewMode"' "Test Turret Farming").SetValue(false));                  menuModes.AddSubMenu(modeLasthit);                    var modeFlee = new Menu("Flee"' "orb_Modes_Flee");                  modeFlee.AddItem(new MenuItem("Flee_Key"' "Key").SetValue(new KeyBind("A".ToCharArray()[0]' KeyBindType.Press)));                  menuModes.AddSubMenu(modeFlee);              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,ObjAiBaseOnOnPlayAnimation,The following statement contains a magic number: if (args.Animation.Contains("Attack") || args.Animation == "Crit")              {                  Utility.DelayAction.Add((int)(Player.AttackCastDelay * 100 + Game.Ping)' () => _canmove = true);              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnProcessSpell,The following statement contains a magic number: if (unit.IsMe)              {                    if (IsAutoAttackReset(spell.SData.Name))                      Utility.DelayAction.Add(250' ResetAutoAttackTimer);                    if (!IsAutoAttack(spell.SData.Name))                      return;                    if (spell.Target is Obj_AI_Base || spell.Target is Obj_BarracksDampener || spell.Target is Obj_HQ)                  {                        _lastAaTick = Utils.GameTimeTickCount - Game.Ping/2;                        if (spell.Target is Obj_AI_Base)                      {                          _lastTarget = (Obj_AI_Base) spell.Target;                            FireOnTargetSwitch((Obj_AI_Base) spell.Target);                            //for melle                          if (unit.IsMelee)                              Utility.DelayAction.Add((int) (unit.AttackCastDelay*1000 + Game.Ping*0.5) + 50'                                  () => FireAfterAttack(unit' _lastTarget));                      }                        FireOnAttack(unit' _lastTarget);                    }              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnProcessSpell,The following statement contains a magic number: if (unit.IsMe)              {                    if (IsAutoAttackReset(spell.SData.Name))                      Utility.DelayAction.Add(250' ResetAutoAttackTimer);                    if (!IsAutoAttack(spell.SData.Name))                      return;                    if (spell.Target is Obj_AI_Base || spell.Target is Obj_BarracksDampener || spell.Target is Obj_HQ)                  {                        _lastAaTick = Utils.GameTimeTickCount - Game.Ping/2;                        if (spell.Target is Obj_AI_Base)                      {                          _lastTarget = (Obj_AI_Base) spell.Target;                            FireOnTargetSwitch((Obj_AI_Base) spell.Target);                            //for melle                          if (unit.IsMelee)                              Utility.DelayAction.Add((int) (unit.AttackCastDelay*1000 + Game.Ping*0.5) + 50'                                  () => FireAfterAttack(unit' _lastTarget));                      }                        FireOnAttack(unit' _lastTarget);                    }              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnProcessSpell,The following statement contains a magic number: if (unit.IsMe)              {                    if (IsAutoAttackReset(spell.SData.Name))                      Utility.DelayAction.Add(250' ResetAutoAttackTimer);                    if (!IsAutoAttack(spell.SData.Name))                      return;                    if (spell.Target is Obj_AI_Base || spell.Target is Obj_BarracksDampener || spell.Target is Obj_HQ)                  {                        _lastAaTick = Utils.GameTimeTickCount - Game.Ping/2;                        if (spell.Target is Obj_AI_Base)                      {                          _lastTarget = (Obj_AI_Base) spell.Target;                            FireOnTargetSwitch((Obj_AI_Base) spell.Target);                            //for melle                          if (unit.IsMelee)                              Utility.DelayAction.Add((int) (unit.AttackCastDelay*1000 + Game.Ping*0.5) + 50'                                  () => FireAfterAttack(unit' _lastTarget));                      }                        FireOnAttack(unit' _lastTarget);                    }              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnProcessSpell,The following statement contains a magic number: if (unit.IsMe)              {                    if (IsAutoAttackReset(spell.SData.Name))                      Utility.DelayAction.Add(250' ResetAutoAttackTimer);                    if (!IsAutoAttack(spell.SData.Name))                      return;                    if (spell.Target is Obj_AI_Base || spell.Target is Obj_BarracksDampener || spell.Target is Obj_HQ)                  {                        _lastAaTick = Utils.GameTimeTickCount - Game.Ping/2;                        if (spell.Target is Obj_AI_Base)                      {                          _lastTarget = (Obj_AI_Base) spell.Target;                            FireOnTargetSwitch((Obj_AI_Base) spell.Target);                            //for melle                          if (unit.IsMelee)                              Utility.DelayAction.Add((int) (unit.AttackCastDelay*1000 + Game.Ping*0.5) + 50'                                  () => FireAfterAttack(unit' _lastTarget));                      }                        FireOnAttack(unit' _lastTarget);                    }              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnProcessSpell,The following statement contains a magic number: if (unit.IsMe)              {                    if (IsAutoAttackReset(spell.SData.Name))                      Utility.DelayAction.Add(250' ResetAutoAttackTimer);                    if (!IsAutoAttack(spell.SData.Name))                      return;                    if (spell.Target is Obj_AI_Base || spell.Target is Obj_BarracksDampener || spell.Target is Obj_HQ)                  {                        _lastAaTick = Utils.GameTimeTickCount - Game.Ping/2;                        if (spell.Target is Obj_AI_Base)                      {                          _lastTarget = (Obj_AI_Base) spell.Target;                            FireOnTargetSwitch((Obj_AI_Base) spell.Target);                            //for melle                          if (unit.IsMelee)                              Utility.DelayAction.Add((int) (unit.AttackCastDelay*1000 + Game.Ping*0.5) + 50'                                  () => FireAfterAttack(unit' _lastTarget));                      }                        FireOnAttack(unit' _lastTarget);                    }              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnProcessSpell,The following statement contains a magic number: if (!unit.IsValidTarget(2000' false) || !unit.IsAlly || unit is Obj_AI_Hero || !(unit is Obj_AI_Turret) || !IsAutoAttack(spell.SData.Name) || !(spell.Target is Obj_AI_Base))                  return;
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnDraw,The following statement contains a magic number: if (_menu.Item("orb_Draw_AARange_Enemy").GetValue<Circle>().Active ||                  _menu.Item("orb_Draw_hitbox").GetValue<Circle>().Active)              {                  foreach (var enemy in HeroManager.Enemies.Where(enemy => enemy.IsValidTarget(1500)))                  {                      if (_menu.Item("orb_Draw_AARange_Enemy").GetValue<Circle>().Active)                          Render.Circle.DrawCircle(enemy.Position' GetAutoAttackRange(enemy' Player)' _menu.Item("orb_Draw_AARange_Enemy").GetValue<Circle>().Color);                      if (_menu.Item("orb_Draw_hitbox").GetValue<Circle>().Active)                          Render.Circle.DrawCircle(enemy.Position' enemy.BoundingRadius' _menu.Item("orb_Draw_hitbox").GetValue<Circle>().Color);                  }              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnDraw,The following statement contains a magic number: if (_menu.Item("orb_Draw_AARange_Enemy").GetValue<Circle>().Active)              {                  foreach (var enemy in HeroManager.Enemies.Where(enemy => enemy.IsValidTarget(1500)))                  {                      Render.Circle.DrawCircle(enemy.Position' GetAutoAttackRange(enemy' Player)' _menu.Item("orb_Draw_AARange_Enemy").GetValue<Circle>().Color);                    }              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnDraw,The following statement contains a magic number: if (_menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Active || _menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Active || _menu.Item("orb_Draw_nearKill").GetValue<Circle>().Active)              {                  var minionList = MinionManager.GetMinions(Player.Position' GetAutoAttackRange() + 500' MinionTypes.All' MinionTeam.Enemy' MinionOrderTypes.MaxHealth);                  foreach (var minion in minionList.Where(minion => minion.IsValidTarget(GetAutoAttackRange() + 500)))                  {                      var attackToKill = Math.Ceiling(minion.MaxHealth / Player.GetAutoAttackDamage(minion' true));                      var hpBarPosition = minion.HPBarPosition;                      var barWidth = minion.IsMelee() ? 75 : 80;                      if (minion.HasBuff("turretshield"' true))                          barWidth = 70;                      var barDistance = (float)(barWidth / attackToKill);                      if (_menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Active)                      {                          for (var i = 1; i < attackToKill; i++)                          {                              var startposition = hpBarPosition.X + 45 + barDistance * i;                              Drawing.DrawLine(                                  new Vector2(startposition' hpBarPosition.Y + 18)'                                  new Vector2(startposition' hpBarPosition.Y + 23)'                                  _menu.Item("orb_Draw_MinionHPBar_thickness").GetValue<Slider>().Value'                                  _menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Color);                          }                      }                      if (_menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Active &&                          minion.Health <= Player.GetAutoAttackDamage(minion' true))                          Render.Circle.DrawCircle(minion.Position' minion.BoundingRadius' _menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Color);                      else if (_menu.Item("orb_Draw_nearKill").GetValue<Circle>().Active &&                               minion.Health <= Player.GetAutoAttackDamage(minion' true) * 2)                          Render.Circle.DrawCircle(minion.Position' minion.BoundingRadius' _menu.Item("orb_Draw_nearKill").GetValue<Circle>().Color);                  }              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnDraw,The following statement contains a magic number: if (_menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Active || _menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Active || _menu.Item("orb_Draw_nearKill").GetValue<Circle>().Active)              {                  var minionList = MinionManager.GetMinions(Player.Position' GetAutoAttackRange() + 500' MinionTypes.All' MinionTeam.Enemy' MinionOrderTypes.MaxHealth);                  foreach (var minion in minionList.Where(minion => minion.IsValidTarget(GetAutoAttackRange() + 500)))                  {                      var attackToKill = Math.Ceiling(minion.MaxHealth / Player.GetAutoAttackDamage(minion' true));                      var hpBarPosition = minion.HPBarPosition;                      var barWidth = minion.IsMelee() ? 75 : 80;                      if (minion.HasBuff("turretshield"' true))                          barWidth = 70;                      var barDistance = (float)(barWidth / attackToKill);                      if (_menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Active)                      {                          for (var i = 1; i < attackToKill; i++)                          {                              var startposition = hpBarPosition.X + 45 + barDistance * i;                              Drawing.DrawLine(                                  new Vector2(startposition' hpBarPosition.Y + 18)'                                  new Vector2(startposition' hpBarPosition.Y + 23)'                                  _menu.Item("orb_Draw_MinionHPBar_thickness").GetValue<Slider>().Value'                                  _menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Color);                          }                      }                      if (_menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Active &&                          minion.Health <= Player.GetAutoAttackDamage(minion' true))                          Render.Circle.DrawCircle(minion.Position' minion.BoundingRadius' _menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Color);                      else if (_menu.Item("orb_Draw_nearKill").GetValue<Circle>().Active &&                               minion.Health <= Player.GetAutoAttackDamage(minion' true) * 2)                          Render.Circle.DrawCircle(minion.Position' minion.BoundingRadius' _menu.Item("orb_Draw_nearKill").GetValue<Circle>().Color);                  }              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnDraw,The following statement contains a magic number: if (_menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Active || _menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Active || _menu.Item("orb_Draw_nearKill").GetValue<Circle>().Active)              {                  var minionList = MinionManager.GetMinions(Player.Position' GetAutoAttackRange() + 500' MinionTypes.All' MinionTeam.Enemy' MinionOrderTypes.MaxHealth);                  foreach (var minion in minionList.Where(minion => minion.IsValidTarget(GetAutoAttackRange() + 500)))                  {                      var attackToKill = Math.Ceiling(minion.MaxHealth / Player.GetAutoAttackDamage(minion' true));                      var hpBarPosition = minion.HPBarPosition;                      var barWidth = minion.IsMelee() ? 75 : 80;                      if (minion.HasBuff("turretshield"' true))                          barWidth = 70;                      var barDistance = (float)(barWidth / attackToKill);                      if (_menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Active)                      {                          for (var i = 1; i < attackToKill; i++)                          {                              var startposition = hpBarPosition.X + 45 + barDistance * i;                              Drawing.DrawLine(                                  new Vector2(startposition' hpBarPosition.Y + 18)'                                  new Vector2(startposition' hpBarPosition.Y + 23)'                                  _menu.Item("orb_Draw_MinionHPBar_thickness").GetValue<Slider>().Value'                                  _menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Color);                          }                      }                      if (_menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Active &&                          minion.Health <= Player.GetAutoAttackDamage(minion' true))                          Render.Circle.DrawCircle(minion.Position' minion.BoundingRadius' _menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Color);                      else if (_menu.Item("orb_Draw_nearKill").GetValue<Circle>().Active &&                               minion.Health <= Player.GetAutoAttackDamage(minion' true) * 2)                          Render.Circle.DrawCircle(minion.Position' minion.BoundingRadius' _menu.Item("orb_Draw_nearKill").GetValue<Circle>().Color);                  }              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnDraw,The following statement contains a magic number: if (_menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Active || _menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Active || _menu.Item("orb_Draw_nearKill").GetValue<Circle>().Active)              {                  var minionList = MinionManager.GetMinions(Player.Position' GetAutoAttackRange() + 500' MinionTypes.All' MinionTeam.Enemy' MinionOrderTypes.MaxHealth);                  foreach (var minion in minionList.Where(minion => minion.IsValidTarget(GetAutoAttackRange() + 500)))                  {                      var attackToKill = Math.Ceiling(minion.MaxHealth / Player.GetAutoAttackDamage(minion' true));                      var hpBarPosition = minion.HPBarPosition;                      var barWidth = minion.IsMelee() ? 75 : 80;                      if (minion.HasBuff("turretshield"' true))                          barWidth = 70;                      var barDistance = (float)(barWidth / attackToKill);                      if (_menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Active)                      {                          for (var i = 1; i < attackToKill; i++)                          {                              var startposition = hpBarPosition.X + 45 + barDistance * i;                              Drawing.DrawLine(                                  new Vector2(startposition' hpBarPosition.Y + 18)'                                  new Vector2(startposition' hpBarPosition.Y + 23)'                                  _menu.Item("orb_Draw_MinionHPBar_thickness").GetValue<Slider>().Value'                                  _menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Color);                          }                      }                      if (_menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Active &&                          minion.Health <= Player.GetAutoAttackDamage(minion' true))                          Render.Circle.DrawCircle(minion.Position' minion.BoundingRadius' _menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Color);                      else if (_menu.Item("orb_Draw_nearKill").GetValue<Circle>().Active &&                               minion.Health <= Player.GetAutoAttackDamage(minion' true) * 2)                          Render.Circle.DrawCircle(minion.Position' minion.BoundingRadius' _menu.Item("orb_Draw_nearKill").GetValue<Circle>().Color);                  }              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnDraw,The following statement contains a magic number: if (_menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Active || _menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Active || _menu.Item("orb_Draw_nearKill").GetValue<Circle>().Active)              {                  var minionList = MinionManager.GetMinions(Player.Position' GetAutoAttackRange() + 500' MinionTypes.All' MinionTeam.Enemy' MinionOrderTypes.MaxHealth);                  foreach (var minion in minionList.Where(minion => minion.IsValidTarget(GetAutoAttackRange() + 500)))                  {                      var attackToKill = Math.Ceiling(minion.MaxHealth / Player.GetAutoAttackDamage(minion' true));                      var hpBarPosition = minion.HPBarPosition;                      var barWidth = minion.IsMelee() ? 75 : 80;                      if (minion.HasBuff("turretshield"' true))                          barWidth = 70;                      var barDistance = (float)(barWidth / attackToKill);                      if (_menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Active)                      {                          for (var i = 1; i < attackToKill; i++)                          {                              var startposition = hpBarPosition.X + 45 + barDistance * i;                              Drawing.DrawLine(                                  new Vector2(startposition' hpBarPosition.Y + 18)'                                  new Vector2(startposition' hpBarPosition.Y + 23)'                                  _menu.Item("orb_Draw_MinionHPBar_thickness").GetValue<Slider>().Value'                                  _menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Color);                          }                      }                      if (_menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Active &&                          minion.Health <= Player.GetAutoAttackDamage(minion' true))                          Render.Circle.DrawCircle(minion.Position' minion.BoundingRadius' _menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Color);                      else if (_menu.Item("orb_Draw_nearKill").GetValue<Circle>().Active &&                               minion.Health <= Player.GetAutoAttackDamage(minion' true) * 2)                          Render.Circle.DrawCircle(minion.Position' minion.BoundingRadius' _menu.Item("orb_Draw_nearKill").GetValue<Circle>().Color);                  }              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnDraw,The following statement contains a magic number: if (_menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Active || _menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Active || _menu.Item("orb_Draw_nearKill").GetValue<Circle>().Active)              {                  var minionList = MinionManager.GetMinions(Player.Position' GetAutoAttackRange() + 500' MinionTypes.All' MinionTeam.Enemy' MinionOrderTypes.MaxHealth);                  foreach (var minion in minionList.Where(minion => minion.IsValidTarget(GetAutoAttackRange() + 500)))                  {                      var attackToKill = Math.Ceiling(minion.MaxHealth / Player.GetAutoAttackDamage(minion' true));                      var hpBarPosition = minion.HPBarPosition;                      var barWidth = minion.IsMelee() ? 75 : 80;                      if (minion.HasBuff("turretshield"' true))                          barWidth = 70;                      var barDistance = (float)(barWidth / attackToKill);                      if (_menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Active)                      {                          for (var i = 1; i < attackToKill; i++)                          {                              var startposition = hpBarPosition.X + 45 + barDistance * i;                              Drawing.DrawLine(                                  new Vector2(startposition' hpBarPosition.Y + 18)'                                  new Vector2(startposition' hpBarPosition.Y + 23)'                                  _menu.Item("orb_Draw_MinionHPBar_thickness").GetValue<Slider>().Value'                                  _menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Color);                          }                      }                      if (_menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Active &&                          minion.Health <= Player.GetAutoAttackDamage(minion' true))                          Render.Circle.DrawCircle(minion.Position' minion.BoundingRadius' _menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Color);                      else if (_menu.Item("orb_Draw_nearKill").GetValue<Circle>().Active &&                               minion.Health <= Player.GetAutoAttackDamage(minion' true) * 2)                          Render.Circle.DrawCircle(minion.Position' minion.BoundingRadius' _menu.Item("orb_Draw_nearKill").GetValue<Circle>().Color);                  }              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnDraw,The following statement contains a magic number: if (_menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Active || _menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Active || _menu.Item("orb_Draw_nearKill").GetValue<Circle>().Active)              {                  var minionList = MinionManager.GetMinions(Player.Position' GetAutoAttackRange() + 500' MinionTypes.All' MinionTeam.Enemy' MinionOrderTypes.MaxHealth);                  foreach (var minion in minionList.Where(minion => minion.IsValidTarget(GetAutoAttackRange() + 500)))                  {                      var attackToKill = Math.Ceiling(minion.MaxHealth / Player.GetAutoAttackDamage(minion' true));                      var hpBarPosition = minion.HPBarPosition;                      var barWidth = minion.IsMelee() ? 75 : 80;                      if (minion.HasBuff("turretshield"' true))                          barWidth = 70;                      var barDistance = (float)(barWidth / attackToKill);                      if (_menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Active)                      {                          for (var i = 1; i < attackToKill; i++)                          {                              var startposition = hpBarPosition.X + 45 + barDistance * i;                              Drawing.DrawLine(                                  new Vector2(startposition' hpBarPosition.Y + 18)'                                  new Vector2(startposition' hpBarPosition.Y + 23)'                                  _menu.Item("orb_Draw_MinionHPBar_thickness").GetValue<Slider>().Value'                                  _menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Color);                          }                      }                      if (_menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Active &&                          minion.Health <= Player.GetAutoAttackDamage(minion' true))                          Render.Circle.DrawCircle(minion.Position' minion.BoundingRadius' _menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Color);                      else if (_menu.Item("orb_Draw_nearKill").GetValue<Circle>().Active &&                               minion.Health <= Player.GetAutoAttackDamage(minion' true) * 2)                          Render.Circle.DrawCircle(minion.Position' minion.BoundingRadius' _menu.Item("orb_Draw_nearKill").GetValue<Circle>().Color);                  }              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnDraw,The following statement contains a magic number: if (_menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Active || _menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Active || _menu.Item("orb_Draw_nearKill").GetValue<Circle>().Active)              {                  var minionList = MinionManager.GetMinions(Player.Position' GetAutoAttackRange() + 500' MinionTypes.All' MinionTeam.Enemy' MinionOrderTypes.MaxHealth);                  foreach (var minion in minionList.Where(minion => minion.IsValidTarget(GetAutoAttackRange() + 500)))                  {                      var attackToKill = Math.Ceiling(minion.MaxHealth / Player.GetAutoAttackDamage(minion' true));                      var hpBarPosition = minion.HPBarPosition;                      var barWidth = minion.IsMelee() ? 75 : 80;                      if (minion.HasBuff("turretshield"' true))                          barWidth = 70;                      var barDistance = (float)(barWidth / attackToKill);                      if (_menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Active)                      {                          for (var i = 1; i < attackToKill; i++)                          {                              var startposition = hpBarPosition.X + 45 + barDistance * i;                              Drawing.DrawLine(                                  new Vector2(startposition' hpBarPosition.Y + 18)'                                  new Vector2(startposition' hpBarPosition.Y + 23)'                                  _menu.Item("orb_Draw_MinionHPBar_thickness").GetValue<Slider>().Value'                                  _menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Color);                          }                      }                      if (_menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Active &&                          minion.Health <= Player.GetAutoAttackDamage(minion' true))                          Render.Circle.DrawCircle(minion.Position' minion.BoundingRadius' _menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Color);                      else if (_menu.Item("orb_Draw_nearKill").GetValue<Circle>().Active &&                               minion.Health <= Player.GetAutoAttackDamage(minion' true) * 2)                          Render.Circle.DrawCircle(minion.Position' minion.BoundingRadius' _menu.Item("orb_Draw_nearKill").GetValue<Circle>().Color);                  }              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,OnDraw,The following statement contains a magic number: if (_menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Active || _menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Active || _menu.Item("orb_Draw_nearKill").GetValue<Circle>().Active)              {                  var minionList = MinionManager.GetMinions(Player.Position' GetAutoAttackRange() + 500' MinionTypes.All' MinionTeam.Enemy' MinionOrderTypes.MaxHealth);                  foreach (var minion in minionList.Where(minion => minion.IsValidTarget(GetAutoAttackRange() + 500)))                  {                      var attackToKill = Math.Ceiling(minion.MaxHealth / Player.GetAutoAttackDamage(minion' true));                      var hpBarPosition = minion.HPBarPosition;                      var barWidth = minion.IsMelee() ? 75 : 80;                      if (minion.HasBuff("turretshield"' true))                          barWidth = 70;                      var barDistance = (float)(barWidth / attackToKill);                      if (_menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Active)                      {                          for (var i = 1; i < attackToKill; i++)                          {                              var startposition = hpBarPosition.X + 45 + barDistance * i;                              Drawing.DrawLine(                                  new Vector2(startposition' hpBarPosition.Y + 18)'                                  new Vector2(startposition' hpBarPosition.Y + 23)'                                  _menu.Item("orb_Draw_MinionHPBar_thickness").GetValue<Slider>().Value'                                  _menu.Item("orb_Draw_MinionHPBar").GetValue<Circle>().Color);                          }                      }                      if (_menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Active &&                          minion.Health <= Player.GetAutoAttackDamage(minion' true))                          Render.Circle.DrawCircle(minion.Position' minion.BoundingRadius' _menu.Item("orb_Draw_Lasthit").GetValue<Circle>().Color);                      else if (_menu.Item("orb_Draw_nearKill").GetValue<Circle>().Active &&                               minion.Health <= Player.GetAutoAttackDamage(minion' true) * 2)                          Render.Circle.DrawCircle(minion.Position' minion.BoundingRadius' _menu.Item("orb_Draw_nearKill").GetValue<Circle>().Color);                  }              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,Orbwalk,The following statement contains a magic number: if (mytarget is Obj_AI_Base)              {                  var target = (Obj_AI_Base) mytarget;                    if (target != null && (CanAttack || HaveCancled) && IsAllowedToAttack())                  {                      _disableNextAttack = false;                      FireBeforeAttack(target);                      if (!_disableNextAttack)                      {                          if (CurrentMode != Mode.Harass || !target.IsMinion ||                              _menu.Item("Harass_Lasthit").GetValue<bool>())                          {                              Player.IssueOrder(GameObjectOrder.AttackUnit' target);                              _lastAaTick = Utils.GameTimeTickCount + Game.Ping/2;                              _canmove = false;                          }                      }                  }                  if (!CanMoves || !IsAllowedToMove())                      return;                  if (Player.IsMelee() && target != null &&                      target.Distance(Player.Position) < GetAutoAttackRange(Player' target) &&                      _menu.Item("orb_Melee_Prediction").GetValue<bool>() && target is Obj_AI_Hero &&                      Game.CursorPos.Distance(target.Position) < 300)                  {                      _movementPrediction.Delay = Player.BasicAttack.SpellCastTime;                      _movementPrediction.Speed = Player.BasicAttack.MissileSpeed;                      MoveTo(_movementPrediction.GetPrediction(target).UnitPosition);                  }                  else                      MoveTo(goalPosition);              }              else              {                  if (mytarget != null && (CanAttack || HaveCancled) && IsAllowedToAttack())                  {                      _disableNextAttack = false;                      FireBeforeAttack(mytarget);                      if (!_disableNextAttack)                      {                          Player.IssueOrder(GameObjectOrder.AttackUnit' mytarget);                          _lastAaTick = Utils.GameTimeTickCount + Game.Ping / 2;                          _canmove = false;                                                }                  }                  if (!CanMoves || !IsAllowedToMove())                      return;                      MoveTo(goalPosition);              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,Orbwalk,The following statement contains a magic number: if (mytarget is Obj_AI_Base)              {                  var target = (Obj_AI_Base) mytarget;                    if (target != null && (CanAttack || HaveCancled) && IsAllowedToAttack())                  {                      _disableNextAttack = false;                      FireBeforeAttack(target);                      if (!_disableNextAttack)                      {                          if (CurrentMode != Mode.Harass || !target.IsMinion ||                              _menu.Item("Harass_Lasthit").GetValue<bool>())                          {                              Player.IssueOrder(GameObjectOrder.AttackUnit' target);                              _lastAaTick = Utils.GameTimeTickCount + Game.Ping/2;                              _canmove = false;                          }                      }                  }                  if (!CanMoves || !IsAllowedToMove())                      return;                  if (Player.IsMelee() && target != null &&                      target.Distance(Player.Position) < GetAutoAttackRange(Player' target) &&                      _menu.Item("orb_Melee_Prediction").GetValue<bool>() && target is Obj_AI_Hero &&                      Game.CursorPos.Distance(target.Position) < 300)                  {                      _movementPrediction.Delay = Player.BasicAttack.SpellCastTime;                      _movementPrediction.Speed = Player.BasicAttack.MissileSpeed;                      MoveTo(_movementPrediction.GetPrediction(target).UnitPosition);                  }                  else                      MoveTo(goalPosition);              }              else              {                  if (mytarget != null && (CanAttack || HaveCancled) && IsAllowedToAttack())                  {                      _disableNextAttack = false;                      FireBeforeAttack(mytarget);                      if (!_disableNextAttack)                      {                          Player.IssueOrder(GameObjectOrder.AttackUnit' mytarget);                          _lastAaTick = Utils.GameTimeTickCount + Game.Ping / 2;                          _canmove = false;                                                }                  }                  if (!CanMoves || !IsAllowedToMove())                      return;                      MoveTo(goalPosition);              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,Orbwalk,The following statement contains a magic number: if (mytarget is Obj_AI_Base)              {                  var target = (Obj_AI_Base) mytarget;                    if (target != null && (CanAttack || HaveCancled) && IsAllowedToAttack())                  {                      _disableNextAttack = false;                      FireBeforeAttack(target);                      if (!_disableNextAttack)                      {                          if (CurrentMode != Mode.Harass || !target.IsMinion ||                              _menu.Item("Harass_Lasthit").GetValue<bool>())                          {                              Player.IssueOrder(GameObjectOrder.AttackUnit' target);                              _lastAaTick = Utils.GameTimeTickCount + Game.Ping/2;                              _canmove = false;                          }                      }                  }                  if (!CanMoves || !IsAllowedToMove())                      return;                  if (Player.IsMelee() && target != null &&                      target.Distance(Player.Position) < GetAutoAttackRange(Player' target) &&                      _menu.Item("orb_Melee_Prediction").GetValue<bool>() && target is Obj_AI_Hero &&                      Game.CursorPos.Distance(target.Position) < 300)                  {                      _movementPrediction.Delay = Player.BasicAttack.SpellCastTime;                      _movementPrediction.Speed = Player.BasicAttack.MissileSpeed;                      MoveTo(_movementPrediction.GetPrediction(target).UnitPosition);                  }                  else                      MoveTo(goalPosition);              }              else              {                  if (mytarget != null && (CanAttack || HaveCancled) && IsAllowedToAttack())                  {                      _disableNextAttack = false;                      FireBeforeAttack(mytarget);                      if (!_disableNextAttack)                      {                          Player.IssueOrder(GameObjectOrder.AttackUnit' mytarget);                          _lastAaTick = Utils.GameTimeTickCount + Game.Ping / 2;                          _canmove = false;                                                }                  }                  if (!CanMoves || !IsAllowedToMove())                      return;                      MoveTo(goalPosition);              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,MoveTo,The following statement contains a magic number: var point = Player.ServerPosition +              300 * (position.To2D() - Player.ServerPosition.To2D()).Normalized().To3D();
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,GetBestMinion,The following statement contains a magic number: if (_menu.Item("NewMode").GetValue<bool>()) {                   var turret =                      ObjectManager.Get<Obj_AI_Turret>()                          .Where(x => x.IsValid && x.IsAlly)                          .OrderBy(x => Player.Distance(x))                          .FirstOrDefault();                    if (turret != null && lastHitOnly)                  {                      foreach (var minion in enemies.Where(x => turret.Distance(x.ServerPosition) < 1000).OrderBy(x => x.Distance(turret)))                      {                          var playerProjectile = ProjectTime(minion);                          var predHealth = HealthPrediction.GetHealthPrediction(minion' playerProjectile' FarmDelay());                          var turretProjectile = turret.AttackCastDelay * 1000 + turret.Distance(minion) / turret.BasicAttack.MissileSpeed * 1000;                            if (predHealth < 0 || playerProjectile* 1.8 > turretProjectile)                              continue;                            if (predHealth - turret.GetAutoAttackDamage(minion) - Player.GetAutoAttackDamage(minion' true)*2 <=                              0 &&                              predHealth - turret.GetAutoAttackDamage(minion) - Player.GetAutoAttackDamage(minion' true) > 0 &&                              predHealth - turret.GetAutoAttackDamage(minion)*2 < 0)                          {                              return minion;                          }                      }                  }              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,GetBestMinion,The following statement contains a magic number: if (_menu.Item("NewMode").GetValue<bool>()) {                   var turret =                      ObjectManager.Get<Obj_AI_Turret>()                          .Where(x => x.IsValid && x.IsAlly)                          .OrderBy(x => Player.Distance(x))                          .FirstOrDefault();                    if (turret != null && lastHitOnly)                  {                      foreach (var minion in enemies.Where(x => turret.Distance(x.ServerPosition) < 1000).OrderBy(x => x.Distance(turret)))                      {                          var playerProjectile = ProjectTime(minion);                          var predHealth = HealthPrediction.GetHealthPrediction(minion' playerProjectile' FarmDelay());                          var turretProjectile = turret.AttackCastDelay * 1000 + turret.Distance(minion) / turret.BasicAttack.MissileSpeed * 1000;                            if (predHealth < 0 || playerProjectile* 1.8 > turretProjectile)                              continue;                            if (predHealth - turret.GetAutoAttackDamage(minion) - Player.GetAutoAttackDamage(minion' true)*2 <=                              0 &&                              predHealth - turret.GetAutoAttackDamage(minion) - Player.GetAutoAttackDamage(minion' true) > 0 &&                              predHealth - turret.GetAutoAttackDamage(minion)*2 < 0)                          {                              return minion;                          }                      }                  }              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,GetBestMinion,The following statement contains a magic number: if (_menu.Item("NewMode").GetValue<bool>()) {                   var turret =                      ObjectManager.Get<Obj_AI_Turret>()                          .Where(x => x.IsValid && x.IsAlly)                          .OrderBy(x => Player.Distance(x))                          .FirstOrDefault();                    if (turret != null && lastHitOnly)                  {                      foreach (var minion in enemies.Where(x => turret.Distance(x.ServerPosition) < 1000).OrderBy(x => x.Distance(turret)))                      {                          var playerProjectile = ProjectTime(minion);                          var predHealth = HealthPrediction.GetHealthPrediction(minion' playerProjectile' FarmDelay());                          var turretProjectile = turret.AttackCastDelay * 1000 + turret.Distance(minion) / turret.BasicAttack.MissileSpeed * 1000;                            if (predHealth < 0 || playerProjectile* 1.8 > turretProjectile)                              continue;                            if (predHealth - turret.GetAutoAttackDamage(minion) - Player.GetAutoAttackDamage(minion' true)*2 <=                              0 &&                              predHealth - turret.GetAutoAttackDamage(minion) - Player.GetAutoAttackDamage(minion' true) > 0 &&                              predHealth - turret.GetAutoAttackDamage(minion)*2 < 0)                          {                              return minion;                          }                      }                  }              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,GetBestMinion,The following statement contains a magic number: if (_menu.Item("NewMode").GetValue<bool>()) {                   var turret =                      ObjectManager.Get<Obj_AI_Turret>()                          .Where(x => x.IsValid && x.IsAlly)                          .OrderBy(x => Player.Distance(x))                          .FirstOrDefault();                    if (turret != null && lastHitOnly)                  {                      foreach (var minion in enemies.Where(x => turret.Distance(x.ServerPosition) < 1000).OrderBy(x => x.Distance(turret)))                      {                          var playerProjectile = ProjectTime(minion);                          var predHealth = HealthPrediction.GetHealthPrediction(minion' playerProjectile' FarmDelay());                          var turretProjectile = turret.AttackCastDelay * 1000 + turret.Distance(minion) / turret.BasicAttack.MissileSpeed * 1000;                            if (predHealth < 0 || playerProjectile* 1.8 > turretProjectile)                              continue;                            if (predHealth - turret.GetAutoAttackDamage(minion) - Player.GetAutoAttackDamage(minion' true)*2 <=                              0 &&                              predHealth - turret.GetAutoAttackDamage(minion) - Player.GetAutoAttackDamage(minion' true) > 0 &&                              predHealth - turret.GetAutoAttackDamage(minion)*2 < 0)                          {                              return minion;                          }                      }                  }              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,GetBestMinion,The following statement contains a magic number: if (_menu.Item("NewMode").GetValue<bool>()) {                   var turret =                      ObjectManager.Get<Obj_AI_Turret>()                          .Where(x => x.IsValid && x.IsAlly)                          .OrderBy(x => Player.Distance(x))                          .FirstOrDefault();                    if (turret != null && lastHitOnly)                  {                      foreach (var minion in enemies.Where(x => turret.Distance(x.ServerPosition) < 1000).OrderBy(x => x.Distance(turret)))                      {                          var playerProjectile = ProjectTime(minion);                          var predHealth = HealthPrediction.GetHealthPrediction(minion' playerProjectile' FarmDelay());                          var turretProjectile = turret.AttackCastDelay * 1000 + turret.Distance(minion) / turret.BasicAttack.MissileSpeed * 1000;                            if (predHealth < 0 || playerProjectile* 1.8 > turretProjectile)                              continue;                            if (predHealth - turret.GetAutoAttackDamage(minion) - Player.GetAutoAttackDamage(minion' true)*2 <=                              0 &&                              predHealth - turret.GetAutoAttackDamage(minion) - Player.GetAutoAttackDamage(minion' true) > 0 &&                              predHealth - turret.GetAutoAttackDamage(minion)*2 < 0)                          {                              return minion;                          }                      }                  }              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,GetBestMinion,The following statement contains a magic number: if (_menu.Item("NewMode").GetValue<bool>()) {                   var turret =                      ObjectManager.Get<Obj_AI_Turret>()                          .Where(x => x.IsValid && x.IsAlly)                          .OrderBy(x => Player.Distance(x))                          .FirstOrDefault();                    if (turret != null && lastHitOnly)                  {                      foreach (var minion in enemies.Where(x => turret.Distance(x.ServerPosition) < 1000).OrderBy(x => x.Distance(turret)))                      {                          var playerProjectile = ProjectTime(minion);                          var predHealth = HealthPrediction.GetHealthPrediction(minion' playerProjectile' FarmDelay());                          var turretProjectile = turret.AttackCastDelay * 1000 + turret.Distance(minion) / turret.BasicAttack.MissileSpeed * 1000;                            if (predHealth < 0 || playerProjectile* 1.8 > turretProjectile)                              continue;                            if (predHealth - turret.GetAutoAttackDamage(minion) - Player.GetAutoAttackDamage(minion' true)*2 <=                              0 &&                              predHealth - turret.GetAutoAttackDamage(minion) - Player.GetAutoAttackDamage(minion' true) > 0 &&                              predHealth - turret.GetAutoAttackDamage(minion)*2 < 0)                          {                              return minion;                          }                      }                  }              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,GetBestMinion,The following statement contains a magic number: foreach (var minion in from minion in ObjectManager.Get<Obj_AI_Minion>()                  .Where(minion => minion.IsValidTarget(GetAutoAttackRange(Player' minion)) && minion.Name != "Beacon")                                     let predHealth = HealthPrediction.LaneClearHealthPrediction(minion' (int)((Player.AttackDelay * 1000) * LaneClearWaitTimeMod)' FarmDelay())                                     where predHealth >=                                           2 * Player.GetAutoAttackDamage(minion' true) ||                                           Math.Abs(predHealth - minion.Health) < float.Epsilon                                     where minion.Health >= maxhealth[0] || Math.Abs(maxhealth[0] - float.MaxValue) < float.Epsilon                                     select minion)              {                  tempTarget = minion;                  maxhealth[0] = minion.MaxHealth;              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,GetBestMinion,The following statement contains a magic number: foreach (var minion in from minion in ObjectManager.Get<Obj_AI_Minion>()                  .Where(minion => minion.IsValidTarget(GetAutoAttackRange(Player' minion)) && minion.Name != "Beacon")                                     let predHealth = HealthPrediction.LaneClearHealthPrediction(minion' (int)((Player.AttackDelay * 1000) * LaneClearWaitTimeMod)' FarmDelay())                                     where predHealth >=                                           2 * Player.GetAutoAttackDamage(minion' true) ||                                           Math.Abs(predHealth - minion.Health) < float.Epsilon                                     where minion.Health >= maxhealth[0] || Math.Abs(maxhealth[0] - float.MaxValue) < float.Epsilon                                     select minion)              {                  tempTarget = minion;                  maxhealth[0] = minion.MaxHealth;              }
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,ProjectTime,The following statement contains a magic number: return (int) (Player.AttackCastDelay*1000) - 100 + Game.Ping/2 +                     1000*(int) Player.Distance(target.Position)/(int) MyProjectileSpeed;
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,ProjectTime,The following statement contains a magic number: return (int) (Player.AttackCastDelay*1000) - 100 + Game.Ping/2 +                     1000*(int) Player.Distance(target.Position)/(int) MyProjectileSpeed;
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,ProjectTime,The following statement contains a magic number: return (int) (Player.AttackCastDelay*1000) - 100 + Game.Ping/2 +                     1000*(int) Player.Distance(target.Position)/(int) MyProjectileSpeed;
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,ProjectTime,The following statement contains a magic number: return (int) (Player.AttackCastDelay*1000) - 100 + Game.Ping/2 +                     1000*(int) Player.Distance(target.Position)/(int) MyProjectileSpeed;
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,ShouldWait,The following statement contains a magic number: if (turret != null && turret.Target.IsValidTarget())                  return ObjectManager.Get<Obj_AI_Minion>()                      .Any(                      minion =>                      minion.IsValidTarget() && minion.Team != GameObjectTeam.Neutral &&                      InAutoAttackRange(minion) && minion.NetworkId != turret.Target.NetworkId &&                      HealthPrediction.LaneClearHealthPrediction(                      minion' (int)((Player.AttackDelay * 1000) * LaneClearWaitTimeMod)' FarmDelay()) <= Player.GetAutoAttackDamage(minion));
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,ShouldWait,The following statement contains a magic number: return ObjectManager.Get<Obj_AI_Minion>()              .Any(              minion =>              minion.IsValidTarget() && minion.Team != GameObjectTeam.Neutral &&              InAutoAttackRange(minion) &&              HealthPrediction.LaneClearHealthPrediction(              minion' (int)((Player.AttackDelay * 1000) * LaneClearWaitTimeMod)' FarmDelay()) <= Player.GetAutoAttackDamage(minion));
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,GetBestHeroTarget,The following statement contains a magic number: return hitsToKill <= 3 ? killableEnemy : TargetSelector.GetTarget(GetAutoAttackRange()' TargetSelector.DamageType.Physical);
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,CheckAutoWindUp,The following statement contains a magic number: if (Game.Ping >= 100)                  additional = Game.Ping / 100 * 5;              else if (Game.Ping > 40 && Game.Ping < 100)                  additional = Game.Ping / 100 * 10;              else if (Game.Ping <= 40)                  additional = +20;
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,CheckAutoWindUp,The following statement contains a magic number: if (Game.Ping >= 100)                  additional = Game.Ping / 100 * 5;              else if (Game.Ping > 40 && Game.Ping < 100)                  additional = Game.Ping / 100 * 10;              else if (Game.Ping <= 40)                  additional = +20;
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,CheckAutoWindUp,The following statement contains a magic number: if (Game.Ping >= 100)                  additional = Game.Ping / 100 * 5;              else if (Game.Ping > 40 && Game.Ping < 100)                  additional = Game.Ping / 100 * 10;              else if (Game.Ping <= 40)                  additional = +20;
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,CheckAutoWindUp,The following statement contains a magic number: if (Game.Ping >= 100)                  additional = Game.Ping / 100 * 5;              else if (Game.Ping > 40 && Game.Ping < 100)                  additional = Game.Ping / 100 * 10;              else if (Game.Ping <= 40)                  additional = +20;
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,CheckAutoWindUp,The following statement contains a magic number: if (Game.Ping >= 100)                  additional = Game.Ping / 100 * 5;              else if (Game.Ping > 40 && Game.Ping < 100)                  additional = Game.Ping / 100 * 10;              else if (Game.Ping <= 40)                  additional = +20;
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,CheckAutoWindUp,The following statement contains a magic number: if (Game.Ping >= 100)                  additional = Game.Ping / 100 * 5;              else if (Game.Ping > 40 && Game.Ping < 100)                  additional = Game.Ping / 100 * 10;              else if (Game.Ping <= 40)                  additional = +20;
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,CheckAutoWindUp,The following statement contains a magic number: if (Game.Ping >= 100)                  additional = Game.Ping / 100 * 5;              else if (Game.Ping > 40 && Game.Ping < 100)                  additional = Game.Ping / 100 * 10;              else if (Game.Ping <= 40)                  additional = +20;
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,CheckAutoWindUp,The following statement contains a magic number: if (Game.Ping >= 100)                  additional = Game.Ping / 100 * 5;              else if (Game.Ping > 40 && Game.Ping < 100)                  additional = Game.Ping / 100 * 10;              else if (Game.Ping <= 40)                  additional = +20;
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,CheckAutoWindUp,The following statement contains a magic number: if (Game.Ping >= 100)                  additional = Game.Ping / 100 * 5;              else if (Game.Ping > 40 && Game.Ping < 100)                  additional = Game.Ping / 100 * 10;              else if (Game.Ping <= 40)                  additional = +20;
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,CheckAutoWindUp,The following statement contains a magic number: var windUp = Game.Ping - 20 + additional;
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,CheckAutoWindUp,The following statement contains a magic number: if (windUp < 40)                  windUp = 40;
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,CheckAutoWindUp,The following statement contains a magic number: if (windUp < 40)                  windUp = 40;
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,CheckAutoWindUp,The following statement contains a magic number: _menu.Item("orb_Misc_ExtraWindUp").SetValue(windUp < 200 ? new Slider(windUp' 200' 0) : new Slider(200' 200' 0));
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,CheckAutoWindUp,The following statement contains a magic number: _menu.Item("orb_Misc_ExtraWindUp").SetValue(windUp < 200 ? new Slider(windUp' 200' 0) : new Slider(200' 200' 0));
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,CheckAutoWindUp,The following statement contains a magic number: _menu.Item("orb_Misc_ExtraWindUp").SetValue(windUp < 200 ? new Slider(windUp' 200' 0) : new Slider(200' 200' 0));
Magic Number,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,CheckAutoWindUp,The following statement contains a magic number: _menu.Item("orb_Misc_ExtraWindUp").SetValue(windUp < 200 ? new Slider(windUp' 200' 0) : new Slider(200' 200' 0));
Magic Number,xSaliceResurrected.Utilities,Util,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\Util.cs,UnderAllyTurret,The following statement contains a magic number: return                  ObjectManager.Get<Obj_AI_Turret>().Any(turret => turret != null && (turret.IsAlly && !turret.IsDead && turret.Distance(Player) < 800));
Magic Number,xSaliceResurrected.Utilities,Util,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\Util.cs,IsPassWall,The following statement contains a magic number: for (uint i = 0; i <= count; i += 25)              {                  Vector2 pos = start.To2D().Extend(Player.ServerPosition.To2D()' -i);                  if (IsWall(pos))                      return true;              }
Magic Number,xSaliceResurrected.Utilities,Util,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\Util.cs,VectorPointProjectionOnLineSegment,The following statement contains a magic number: float rL = ((cx - ax) * (bx - ax) + (cy - ay) * (by - ay)) /                         ((float)Math.Pow(bx - ax' 2) + (float)Math.Pow(by - ay' 2));
Magic Number,xSaliceResurrected.Utilities,Util,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\Util.cs,VectorPointProjectionOnLineSegment,The following statement contains a magic number: float rL = ((cx - ax) * (bx - ax) + (cy - ay) * (by - ay)) /                         ((float)Math.Pow(bx - ax' 2) + (float)Math.Pow(by - ay' 2));
Magic Number,xSaliceResurrected.Utilities,Util,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\Util.cs,GetTargetFocus,The following statement contains a magic number: if (TargetSelector.GetSelectedTarget() != null)                  if (focusSelected && TargetSelector.GetSelectedTarget().Distance(Player.ServerPosition) < range + 100 && TargetSelector.GetSelectedTarget().Type == GameObjectType.obj_AI_Hero)                  {                      //Game.PrintChat("Focusing: " + TargetSelector.GetSelectedTarget().Name);                      return TargetSelector.GetSelectedTarget();                  }
Magic Number,xSaliceResurrected.Utilities,WardJumper,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\WardJumper.cs,JumpKs,The following statement contains a magic number: if (E.IsReady() && Q.IsReady())              {                  Vector3 position = Player.ServerPosition +                                     Vector3.Normalize(target.ServerPosition - Player.ServerPosition) * 590;                    if (target.Distance(position) < Q.Range)                  {                      InventorySlot invSlot = FindBestWardItem();                      if (invSlot == null) return;                        Player.Spellbook.CastSpell(invSlot.SpellSlot' position);                      LastWardPos = position;                      LastPlaced = Utils.TickCount;                  }              }
Magic Number,xSaliceResurrected.Utilities,WardJumper,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\WardJumper.cs,WardJump,The following statement contains a magic number: foreach (Obj_AI_Minion ward in ObjectManager.Get<Obj_AI_Minion>().Where(ward =>                  ward.Name.ToLower().Contains("ward") && ward.Distance(Game.CursorPos) < 250))              {                  if (E.IsReady())                  {                      E.Cast(ward);                      return;                  }              }
Magic Number,xSaliceResurrected.Utilities,WardJumper,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\WardJumper.cs,WardJump,The following statement contains a magic number: foreach (                  Obj_AI_Hero hero in ObjectManager.Get<Obj_AI_Hero>().Where(hero => hero.Distance(Game.CursorPos) < 250 && !hero.IsDead))              {                  if (E.IsReady())                  {                      E.Cast(hero);                      return;                  }              }
Magic Number,xSaliceResurrected.Utilities,WardJumper,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\WardJumper.cs,WardJump,The following statement contains a magic number: foreach (Obj_AI_Minion minion in ObjectManager.Get<Obj_AI_Minion>().Where(minion =>                  minion.Distance(Game.CursorPos) < 250))              {                  if (E.IsReady())                  {                      E.Cast(minion);                      return;                  }              }
Magic Number,xSaliceResurrected.Utilities,WardJumper,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\WardJumper.cs,WardJump,The following statement contains a magic number: if (Utils.TickCount <= LastPlaced + 3000 || !E.IsReady()) return;
Magic Number,xSaliceResurrected.Utilities,WardJumper,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\WardJumper.cs,WardJump,The following statement contains a magic number: Vector3 wardPosition = myPos + delta * (600 - 5);
Magic Number,xSaliceResurrected.Utilities,WardJumper,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\WardJumper.cs,WardJump,The following statement contains a magic number: Vector3 wardPosition = myPos + delta * (600 - 5);
Missing Default,xSaliceResurrected.Mid,Akali,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Akali.cs,UseSpells,The following switch statement is missing a default case: switch (mode)              {                  case 0:                      if (useQ)                          Cast_Q(true);                      if (useE)                          Cast_E(true);                      if (useW)                          Cast_W();                      if (useR)                          Cast_R(0);                      break;                  case 1:                      if (useQ)                          Cast_Q(true' 1);                      if (useR)                          Cast_R(1);                      if (useE)                          Cast_E(true' 1);                      if (useW)                          Cast_W();                      break;              }
Missing Default,xSaliceResurrected.Mid,Orianna,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Mid\Orianna.cs,CastE,The following switch statement is missing a default case: switch (_ballStatus)              {                  case 0:                      if (target != null)                      {                          float travelTime = target.Distance(Player.ServerPosition) / Q.Speed;                          float minTravelTime = 10000f;                            foreach (                              Obj_AI_Hero ally in                                  ObjectManager.Get<Obj_AI_Hero>()                                      .Where(x => x.IsAlly && Player.Distance(x.ServerPosition) <= E.Range && !x.IsMe))                          {                               //dmg enemy with E                              if (menu.Item("UseEDmg"' true).GetValue<bool>())                              {                                  PredictionOutput prediction3 = Util.GetP(Player.ServerPosition' E' target' true);                                  Object[] obj = Util.VectorPointProjectionOnLineSegment(Player.ServerPosition.To2D()'                                      ally.ServerPosition.To2D()' prediction3.UnitPosition.To2D());                                  var isOnseg = (bool)obj[2];                                  var pointLine = (Vector2)obj[1];                                    if (E.IsReady() && isOnseg &&                                      prediction3.UnitPosition.Distance(pointLine.To3D()) < E.Width)                                  {                                      //Console.WriteLine("Dmg 1");                                      E.CastOnUnit(ally);                                      return;                                  }                              }                                float allyRange = target.Distance(ally.ServerPosition) / Q.Speed +                                                  ally.Distance(Player.ServerPosition) / E.Speed;                              if (allyRange < minTravelTime)                              {                                  etarget = ally;                                  minTravelTime = allyRange;                              }                          }                            if (minTravelTime < travelTime && Player.Distance(etarget.ServerPosition) <= E.Range &&                              E.IsReady())                          {                              E.CastOnUnit(etarget);                          }                      }                      break;                  case 1:                      //dmg enemy with E                      if (menu.Item("UseEDmg"' true).GetValue<bool>())                      {                          PredictionOutput prediction = Util.GetP(_currentBallPosition' E' target' true);                          Object[] obj = Util.VectorPointProjectionOnLineSegment(_currentBallPosition.To2D()'                              Player.ServerPosition.To2D()' prediction.UnitPosition.To2D());                          var isOnseg = (bool)obj[2];                          var pointLine = (Vector2)obj[1];                            if (E.IsReady() && isOnseg && prediction.UnitPosition.Distance(pointLine.To3D()) < E.Width)                          {                              //Console.WriteLine("Dmg 2");                              E.CastOnUnit(Player);                              return;                          }                      }                        float travelTime2 = target.Distance(_currentBallPosition) / Q.Speed;                      float minTravelTime2 = target.Distance(Player.ServerPosition) / Q.Speed +                                              Player.Distance(_currentBallPosition) / E.Speed;                        if (minTravelTime2 < travelTime2 && target.Distance(Player.ServerPosition) <= Q.Range + Q.Width &&                          E.IsReady())                      {                          E.CastOnUnit(Player);                      }                        break;                  case 2:                      float travelTime3 = target.Distance(_currentBallPosition) / Q.Speed;                      float minTravelTime3 = 10000f;                        foreach (                          Obj_AI_Hero ally in                              ObjectManager.Get<Obj_AI_Hero>()                                  .Where(x => x.IsAlly && Player.Distance(x.ServerPosition) <= E.Range && !x.IsMe))                      {                          //dmg enemy with E                          if (menu.Item("UseEDmg"' true).GetValue<bool>())                          {                              PredictionOutput prediction2 = Util.GetP(_currentBallPosition' E' target' true);                              Object[] obj = Util.VectorPointProjectionOnLineSegment(_currentBallPosition.To2D()'                                  ally.ServerPosition.To2D()' prediction2.UnitPosition.To2D());                              var isOnseg = (bool)obj[2];                              var pointLine = (Vector2)obj[1];                                if (E.IsReady() && isOnseg &&                                  prediction2.UnitPosition.Distance(pointLine.To3D()) < E.Width)                              {                                  Console.WriteLine("Dmg 3");                                  E.CastOnUnit(ally);                                  return;                              }                          }                            float allyRange2 = target.Distance(ally.ServerPosition) / Q.Speed +                                              ally.Distance(_currentBallPosition) / E.Speed;                            if (allyRange2 < minTravelTime3)                          {                              etarget = ally;                              minTravelTime3 = allyRange2;                          }                      }                        if (minTravelTime3 < travelTime3 && Player.Distance(etarget.ServerPosition) <= E.Range &&                          E.IsReady())                      {                          E.CastOnUnit(etarget);                      }                        break;              }
Missing Default,xSaliceResurrected.Utilities,xSaliceWalker,C:\repos\xSalice_LSharp\xSaliceResurrected\xSaliceResurrected\Utilities\xSaliceWalker.cs,GetTarget,The following switch statement is missing a default case: switch (CurrentMode)              {                  case Mode.Combo:                      tempTarget = GetBestHeroTarget();                      break;                  case Mode.Harass:                      tempTarget = GetBestMinion(true);                        if (tempTarget != null)                          return tempTarget;                        if (GetBestHeroTarget() != null)                          tempTarget = GetBestHeroTarget();                        if (GetBaseStructures() != null)                          return GetBaseStructures();                      break;                  case Mode.Lasthit:                      tempTarget = GetBestMinion(true);                        if (tempTarget != null)                          return tempTarget;                      break;                  case Mode.LaneClear:                      tempTarget = GetBestMinion(false);                        if (tempTarget != null)                          return tempTarget;                        if (GetBaseStructures() != null)                          return GetBaseStructures();                      break;                  case Mode.None:                      break;              }
