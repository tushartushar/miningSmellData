Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Xamarin.Test.Performance.Utilities,BenchViewTools,C:\repos\xamarin_benchmarker\tools\compare\BenchViewTools.cs,GatherBenchViewData,Cyclomatic complexity of the method is 8
Complex Method,compare,Utils,C:\repos\xamarin_benchmarker\tools\compare\Utils.cs,CompleteCommit,Cyclomatic complexity of the method is 11
Complex Method,Benchmarker.Models,Config,C:\repos\xamarin_benchmarker\tools\libdbmodel\Config.cs,LoadFromString,Cyclomatic complexity of the method is 11
Long Parameter List,compare,UnixRunner,C:\repos\xamarin_benchmarker\tools\compare\UnixRunner.cs,UnixRunner,The method has 7 parameters. Parameters: testsDirectory' _config' _benchmark' _machine' _timeoutSeconds' _runTool' _runToolArguments
Long Parameter List,compare,UnixRunner,C:\repos\xamarin_benchmarker\tools\compare\UnixRunner.cs,Run,The method has 5 parameters. Parameters: profilesDirectory' profileFilename' binaryProtocolFilename' timedOut' stdoutOutput
Long Parameter List,Benchmarker.Models,RunSet,C:\repos\xamarin_benchmarker\tools\libdbmodel\RunSet.cs,FromId,The method has 7 parameters. Parameters: local_machine' local_runsetid' local_config' local_mainCommit' local_secondaryCommits' local_buildURL' local_logURL
Long Statement,Xamarin.Test.Performance.Utilities,BenchViewTools,C:\repos\xamarin_benchmarker\tools\compare\BenchViewTools.cs,GatherBenchViewData,The length of the statement  "			string metaargs = $"\"{s_submissionMetadataPy}\" --name=\"{submissionName}\" --user-email={s_userEmail} -o=\"{s_submissionMetadataJson}\""; " is 139.
Long Statement,Xamarin.Test.Performance.Utilities,BenchViewTools,C:\repos\xamarin_benchmarker\tools\compare\BenchViewTools.cs,GatherBenchViewData,The length of the statement  "			ShellOutVital(s_pythonProcessName' $"\"{s_buildPy}\" --type={submissionType} --repository=\"{giturl}\" --number=\"{commit.Hash}\" --branch=\"{branch}\" --source-timestamp=\"{DateTime.SpecifyKind (commit.CommitDate.Value' DateTimeKind.Utc).ToString (RunSet.DATETIME_FORMAT)}\" -o=\"{s_buildJson}\""); " is 299.
Long Statement,Xamarin.Test.Performance.Utilities,BenchViewTools,C:\repos\xamarin_benchmarker\tools\compare\BenchViewTools.cs,ConvertToMeasurement,The length of the statement  "            ShellOutVital(s_pythonProcessName' $"\"{s_measurementPy}\" xamarin_benchmarker \"{runSetJsonFileName}\" -o=\"{s_measurementJson}\""); " is 133.
Long Statement,compare,Utils,C:\repos\xamarin_benchmarker\tools\compare\Utils.cs,CompleteCommit,The length of the statement  "								Console.Error.WriteLine ("Error: Commit hash for mono specified on command line does not match the one reported with --version."); " is 130.
Long Statement,compare,Utils,C:\repos\xamarin_benchmarker\tools\compare\Utils.cs,CompleteCommit,The length of the statement  "							Console.Error.WriteLine ("Error: Commit hash specified on command line does not match the one from the git repository."); " is 121.
Long Statement,compare,Utils,C:\repos\xamarin_benchmarker\tools\compare\Utils.cs,ResolveFullHashViaGithub,The length of the statement  "				treeResponse = await GitHubInterface.RunWithRetry (() => gitHubClient.GitDatabase.Tree.Get (commit.Product.GitHubUser' commit.Product.GitHubRepo' commit.Hash)); " is 160.
Long Statement,compare,Utils,C:\repos\xamarin_benchmarker\tools\compare\Utils.cs,ResolveFullHashViaGithub,The length of the statement  "				gitHubCommit = await GitHubInterface.RunWithRetry (() => gitHubClient.GitDatabase.Commit.Get (commit.Product.GitHubUser' commit.Product.GitHubRepo' treeResponse.Sha)); " is 167.
Long Statement,compare,UnixRunner,C:\repos\xamarin_benchmarker\tools\compare\UnixRunner.cs,PrintCommandLine,The length of the statement  "			Console.WriteLine("$> {0}: \"{1} {2}\" in \"{3}\" with {4}"' prefix' info.FileName' info.Arguments' info.WorkingDirectory' compare.Utils.PrintableEnvironmentVariables(info)); " is 174.
Long Statement,compare,UnixRunner,C:\repos\xamarin_benchmarker\tools\compare\UnixRunner.cs,RunAOT,The length of the statement  "				var stdout = Task.Factory.StartNew (() => new StreamReader (aotProcess.StandardOutput.BaseStream).ReadToEnd ()' TaskCreationOptions.LongRunning); " is 145.
Long Statement,compare,UnixRunner,C:\repos\xamarin_benchmarker\tools\compare\UnixRunner.cs,RunAOT,The length of the statement  "				var stderr = Task.Factory.StartNew (() => new StreamReader (aotProcess.StandardError.BaseStream).ReadToEnd ()' TaskCreationOptions.LongRunning); " is 144.
Long Statement,compare,UnixRunner,C:\repos\xamarin_benchmarker\tools\compare\UnixRunner.cs,Run,The length of the statement  "						var stdout = Task.Factory.StartNew (() => new StreamReader (mainProcess.StandardOutput.BaseStream).ReadToEnd ()' TaskCreationOptions.LongRunning); " is 146.
Long Statement,compare,UnixRunner,C:\repos\xamarin_benchmarker\tools\compare\UnixRunner.cs,Run,The length of the statement  "						var stderr = Task.Factory.StartNew (() => new StreamReader (mainProcess.StandardError.BaseStream).ReadToEnd ()' TaskCreationOptions.LongRunning); " is 145.
Long Statement,Benchmarker,Accredit,C:\repos\xamarin_benchmarker\tools\libaccredit\Accredit.cs,GetCredentials,The length of the statement  "			string oauthLink = GetResponse ("https://accredit.parseapp.com/requestCredentials"' string.Format("service={0}&key={1}&secret={2}"' serviceName' key' secret)); " is 159.
Long Statement,Benchmarker,Accredit,C:\repos\xamarin_benchmarker\tools\libaccredit\Accredit.cs,GetCredentials,The length of the statement  "			var response = GetResponse ("https://accredit.parseapp.com/getCredentials"' string.Format ("key={0}&secret={1}"' key' secret)); " is 127.
Long Statement,Benchmarker,Helper,C:\repos\xamarin_benchmarker\tools\libdbmodel\Helper.cs,RunWithRetry,The length of the statement  "					Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc); " is 121.
Long Statement,Benchmarker,Helper,C:\repos\xamarin_benchmarker\tools\libdbmodel\Helper.cs,RunWithRetry,The length of the statement  "					Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc); " is 121.
Long Statement,Benchmarker,GitHubInterface,C:\repos\xamarin_benchmarker\tools\libgithub\GitHubInterface.cs,RunWithRetry,The length of the statement  "					Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc); " is 121.
Long Statement,Benchmarker.Models,RunSet,C:\repos\xamarin_benchmarker\tools\libdbmodel\RunSet.cs,FromId,The length of the statement  "				Console.Error.WriteLine ("trying to parse Start date: \"" + db_result ["StartedAt"].ToObject<DateTime> ().ToLocalTime ().ToString (DATETIME_PRETTY) + "\""); " is 156.
Long Statement,Benchmarker.Models,RunSet,C:\repos\xamarin_benchmarker\tools\libdbmodel\RunSet.cs,FromId,The length of the statement  "					throw new Exception (String.Format ("Commit ({0}) does not match the one in the database ({1})."' local_mainCommit.Hash' db_mainProductCommit)); " is 144.
Long Statement,Benchmarker.Models,RunSet,C:\repos\xamarin_benchmarker\tools\libdbmodel\RunSet.cs,FromId,The length of the statement  "					throw new Exception ("Machine does not match the one in the database. \"" + db_machineName + "\" vs. \"" + local_machine.Name + "\""); " is 134.
Long Statement,Benchmarker.Models,HttpApi,C:\repos\xamarin_benchmarker\tools\libdbmodel\HttpApi.cs,ApiUrl,The length of the statement  "				queryString = "?" + String.Join ("&"' args.Select (kvp => String.Format ("{0}={1}"' kvp.Key' Uri.EscapeUriString (kvp.Value)))); " is 128.
Empty Catch Block,compare,Utils,C:\repos\xamarin_benchmarker\tools\compare\Utils.cs,LocalHostnameAndArch,The method has an empty catch block.
Empty Catch Block,compare,UnixRunner,C:\repos\xamarin_benchmarker\tools\compare\UnixRunner.cs,RunAOT,The method has an empty catch block.
Empty Catch Block,compare,UnixRunner,C:\repos\xamarin_benchmarker\tools\compare\UnixRunner.cs,Run,The method has an empty catch block.
Magic Number,compare,Utils,C:\repos\xamarin_benchmarker\tools\compare\Utils.cs,CompleteCommit,The following statement contains a magic number: if (commit.Product.Name == "mono" && !cfg.NoMono) {  				var binaryProtocolFile = cfg.ProducesBinaryProtocol ? "/tmp/binprot.dummy" : null;  				var info = NewProcessStartInfo (cfg' binaryProtocolFile);  				if (!String.IsNullOrWhiteSpace (info.FileName)) {  					/* Run without timing with --version */  					info.Arguments = "--version";    					Console.Out.WriteLine ("\t$> {0} {1} {2}"' PrintableEnvironmentVariables (info)' info.FileName' info.Arguments);    					var process = Process.Start (info);  					var version = Task.Run (() => new StreamReader (process.StandardOutput.BaseStream).ReadToEnd ()).Result;  					var versionError = Task.Run (() => new StreamReader (process.StandardError.BaseStream).ReadToEnd ()).Result;    					process.WaitForExit ();  					process.Close ();    					var line = version.Split (new char[] { '\n' }' 2) [0];  					var regex = new Regex ("^Mono JIT.*\\((.*)/([0-9a-f]+) (.*)\\)");  					var match = regex.Match (line);    					if (match.Success) {  						commit.Branch = match.Groups [1].Value;  						var hash = match.Groups [2].Value;  						if (commit.Hash != null) {  							if (!commit.Hash.StartsWith (hash)) {  								Console.Error.WriteLine ("Error: Commit hash for mono specified on command line does not match the one reported with --version.");  								return false;  							}  						} else {  							commit.Hash = hash;  						}  						var date = match.Groups [3].Value;  						Console.WriteLine ("branch: " + commit.Branch + " hash: " + commit.Hash + " date: " + date);  					}  				}    				if (commit.Branch == "(detached")  					commit.Branch = null;    				try {  					var gitRepoDir = Path.GetDirectoryName (cfg.Mono);  					var repo = new Repository (gitRepoDir);  					var gitHash = repo.RevParse (commit.Hash);  					if (gitHash == null) {  						Console.WriteLine ("Could not get commit " + commit.Hash + " from repository");  					} else {  						Console.WriteLine ("Got commit " + gitHash + " from repository");    						if (commit.Hash != null && commit.Hash != gitHash) {  							Console.Error.WriteLine ("Error: Commit hash specified on command line does not match the one from the git repository.");  							return false;  						}    						commit.Hash = gitHash;  						commit.MergeBaseHash = repo.MergeBase (commit.Hash' "master");  						commit.CommitDate = repo.CommitDate (commit.Hash);    						if (commit.CommitDate == null) {  							Console.Error.WriteLine ("Error: Could not get commit date from the git repository.");  							return false;  						}    						Console.WriteLine ("Commit {0} merge base {1} date {2}"' commit.Hash' commit.MergeBaseHash' commit.CommitDate);  					}  				} catch (Exception) {  					Console.WriteLine ("Could not get git repository");  				}  			}
Magic Number,compare,Utils,C:\repos\xamarin_benchmarker\tools\compare\Utils.cs,CompleteCommit,The following statement contains a magic number: if (commit.Product.Name == "mono" && !cfg.NoMono) {  				var binaryProtocolFile = cfg.ProducesBinaryProtocol ? "/tmp/binprot.dummy" : null;  				var info = NewProcessStartInfo (cfg' binaryProtocolFile);  				if (!String.IsNullOrWhiteSpace (info.FileName)) {  					/* Run without timing with --version */  					info.Arguments = "--version";    					Console.Out.WriteLine ("\t$> {0} {1} {2}"' PrintableEnvironmentVariables (info)' info.FileName' info.Arguments);    					var process = Process.Start (info);  					var version = Task.Run (() => new StreamReader (process.StandardOutput.BaseStream).ReadToEnd ()).Result;  					var versionError = Task.Run (() => new StreamReader (process.StandardError.BaseStream).ReadToEnd ()).Result;    					process.WaitForExit ();  					process.Close ();    					var line = version.Split (new char[] { '\n' }' 2) [0];  					var regex = new Regex ("^Mono JIT.*\\((.*)/([0-9a-f]+) (.*)\\)");  					var match = regex.Match (line);    					if (match.Success) {  						commit.Branch = match.Groups [1].Value;  						var hash = match.Groups [2].Value;  						if (commit.Hash != null) {  							if (!commit.Hash.StartsWith (hash)) {  								Console.Error.WriteLine ("Error: Commit hash for mono specified on command line does not match the one reported with --version.");  								return false;  							}  						} else {  							commit.Hash = hash;  						}  						var date = match.Groups [3].Value;  						Console.WriteLine ("branch: " + commit.Branch + " hash: " + commit.Hash + " date: " + date);  					}  				}    				if (commit.Branch == "(detached")  					commit.Branch = null;    				try {  					var gitRepoDir = Path.GetDirectoryName (cfg.Mono);  					var repo = new Repository (gitRepoDir);  					var gitHash = repo.RevParse (commit.Hash);  					if (gitHash == null) {  						Console.WriteLine ("Could not get commit " + commit.Hash + " from repository");  					} else {  						Console.WriteLine ("Got commit " + gitHash + " from repository");    						if (commit.Hash != null && commit.Hash != gitHash) {  							Console.Error.WriteLine ("Error: Commit hash specified on command line does not match the one from the git repository.");  							return false;  						}    						commit.Hash = gitHash;  						commit.MergeBaseHash = repo.MergeBase (commit.Hash' "master");  						commit.CommitDate = repo.CommitDate (commit.Hash);    						if (commit.CommitDate == null) {  							Console.Error.WriteLine ("Error: Could not get commit date from the git repository.");  							return false;  						}    						Console.WriteLine ("Commit {0} merge base {1} date {2}"' commit.Hash' commit.MergeBaseHash' commit.CommitDate);  					}  				} catch (Exception) {  					Console.WriteLine ("Could not get git repository");  				}  			}
Magic Number,compare,Utils,C:\repos\xamarin_benchmarker\tools\compare\Utils.cs,CompleteCommit,The following statement contains a magic number: if (commit.Product.Name == "mono" && !cfg.NoMono) {  				var binaryProtocolFile = cfg.ProducesBinaryProtocol ? "/tmp/binprot.dummy" : null;  				var info = NewProcessStartInfo (cfg' binaryProtocolFile);  				if (!String.IsNullOrWhiteSpace (info.FileName)) {  					/* Run without timing with --version */  					info.Arguments = "--version";    					Console.Out.WriteLine ("\t$> {0} {1} {2}"' PrintableEnvironmentVariables (info)' info.FileName' info.Arguments);    					var process = Process.Start (info);  					var version = Task.Run (() => new StreamReader (process.StandardOutput.BaseStream).ReadToEnd ()).Result;  					var versionError = Task.Run (() => new StreamReader (process.StandardError.BaseStream).ReadToEnd ()).Result;    					process.WaitForExit ();  					process.Close ();    					var line = version.Split (new char[] { '\n' }' 2) [0];  					var regex = new Regex ("^Mono JIT.*\\((.*)/([0-9a-f]+) (.*)\\)");  					var match = regex.Match (line);    					if (match.Success) {  						commit.Branch = match.Groups [1].Value;  						var hash = match.Groups [2].Value;  						if (commit.Hash != null) {  							if (!commit.Hash.StartsWith (hash)) {  								Console.Error.WriteLine ("Error: Commit hash for mono specified on command line does not match the one reported with --version.");  								return false;  							}  						} else {  							commit.Hash = hash;  						}  						var date = match.Groups [3].Value;  						Console.WriteLine ("branch: " + commit.Branch + " hash: " + commit.Hash + " date: " + date);  					}  				}    				if (commit.Branch == "(detached")  					commit.Branch = null;    				try {  					var gitRepoDir = Path.GetDirectoryName (cfg.Mono);  					var repo = new Repository (gitRepoDir);  					var gitHash = repo.RevParse (commit.Hash);  					if (gitHash == null) {  						Console.WriteLine ("Could not get commit " + commit.Hash + " from repository");  					} else {  						Console.WriteLine ("Got commit " + gitHash + " from repository");    						if (commit.Hash != null && commit.Hash != gitHash) {  							Console.Error.WriteLine ("Error: Commit hash specified on command line does not match the one from the git repository.");  							return false;  						}    						commit.Hash = gitHash;  						commit.MergeBaseHash = repo.MergeBase (commit.Hash' "master");  						commit.CommitDate = repo.CommitDate (commit.Hash);    						if (commit.CommitDate == null) {  							Console.Error.WriteLine ("Error: Could not get commit date from the git repository.");  							return false;  						}    						Console.WriteLine ("Commit {0} merge base {1} date {2}"' commit.Hash' commit.MergeBaseHash' commit.CommitDate);  					}  				} catch (Exception) {  					Console.WriteLine ("Could not get git repository");  				}  			}
Magic Number,compare,UnixRunner,C:\repos\xamarin_benchmarker\tools\compare\UnixRunner.cs,RunAOT,The following statement contains a magic number: using (var aotProcess = Process.Start(InfoAot)) {  				var stdout = Task.Factory.StartNew (() => new StreamReader (aotProcess.StandardOutput.BaseStream).ReadToEnd ()' TaskCreationOptions.LongRunning);  				var stderr = Task.Factory.StartNew (() => new StreamReader (aotProcess.StandardError.BaseStream).ReadToEnd ()' TaskCreationOptions.LongRunning);  				var success = aotProcess.WaitForExit(timeout < 0 ? -1 : (Math.Min (Int32.MaxValue / 1000' timeout) * 1000));    				if (success) {  					if (aotProcess.ExitCode != 0) {  						Console.Out.WriteLine ("AOT failure!");  						success = false;  					}  				} else {  					Console.Out.WriteLine ("AOT timed out!");  					timedOut = true;  				}    				if (!success) {  					try {  						aotProcess.Kill ();  					} catch (InvalidOperationException) {  						// The process might have finished already' so we need to catch this.  					}  				}    				Console.Out.WriteLine ("aot-stdout:\n{0}"' stdout.Result);  				stdoutOutput = stdout.Result;  				Console.Out.WriteLine ("aot-stderr:\n{0}"' stderr.Result);    				if (success)  					return sw.ElapsedMilliseconds;  				else  					return null;  			}
Magic Number,compare,UnixRunner,C:\repos\xamarin_benchmarker\tools\compare\UnixRunner.cs,RunAOT,The following statement contains a magic number: using (var aotProcess = Process.Start(InfoAot)) {  				var stdout = Task.Factory.StartNew (() => new StreamReader (aotProcess.StandardOutput.BaseStream).ReadToEnd ()' TaskCreationOptions.LongRunning);  				var stderr = Task.Factory.StartNew (() => new StreamReader (aotProcess.StandardError.BaseStream).ReadToEnd ()' TaskCreationOptions.LongRunning);  				var success = aotProcess.WaitForExit(timeout < 0 ? -1 : (Math.Min (Int32.MaxValue / 1000' timeout) * 1000));    				if (success) {  					if (aotProcess.ExitCode != 0) {  						Console.Out.WriteLine ("AOT failure!");  						success = false;  					}  				} else {  					Console.Out.WriteLine ("AOT timed out!");  					timedOut = true;  				}    				if (!success) {  					try {  						aotProcess.Kill ();  					} catch (InvalidOperationException) {  						// The process might have finished already' so we need to catch this.  					}  				}    				Console.Out.WriteLine ("aot-stdout:\n{0}"' stdout.Result);  				stdoutOutput = stdout.Result;  				Console.Out.WriteLine ("aot-stderr:\n{0}"' stderr.Result);    				if (success)  					return sw.ElapsedMilliseconds;  				else  					return null;  			}
Magic Number,compare,UnixRunner,C:\repos\xamarin_benchmarker\tools\compare\UnixRunner.cs,Run,The following statement contains a magic number: try {  				if (profilesDirectory != null) {  					if (profileFilename == null) {  						throw new Exception ("must have profile filename");  					}  				} else {  					if (profileFilename != null) {  						throw new Exception ("must have no profile filename");  					}  				}  				if (profilesDirectory == null) {  					Info.Arguments = arguments;  				} else {  					Info.Arguments = String.Format ("--profile=log:counters'countersonly'nocalls'noalloc'output={0} "' Path.Combine (  						profilesDirectory' profileFilename)) + arguments;  				}    				if (runTool == null) {  					Info.FileName = fileName;  				} else {  					Info.FileName = runTool;  					Info.Arguments = runToolArguments + " " + fileName + " " + Info.Arguments;  				}    				if (clientServer) {  					PrintCommandLine ("Server command"' Info);  					PrintCommandLine ("Client command"' ClientInfo);  				} else {  					PrintCommandLine ("Benchmark command"' Info);  				}    				int timeout = GetTimeout ();  				using (var serverProcess = clientServer ? Process.Start (Info) : null) {    					if (clientServer)  						System.Threading.Thread.Sleep (5000);    					var sw = Stopwatch.StartNew ();  					using (var mainProcess = clientServer ? Process.Start (ClientInfo) : Process.Start (Info)) {  						var stdout = Task.Factory.StartNew (() => new StreamReader (mainProcess.StandardOutput.BaseStream).ReadToEnd ()' TaskCreationOptions.LongRunning);  						var stderr = Task.Factory.StartNew (() => new StreamReader (mainProcess.StandardError.BaseStream).ReadToEnd ()' TaskCreationOptions.LongRunning);    						var success = mainProcess.WaitForExit (timeout < 0 ? -1 : (Math.Min (Int32.MaxValue / 1000' timeout) * 1000));    						sw.Stop ();    						if (success) {  							if (mainProcess.ExitCode != 0) {  								Console.Out.WriteLine ("failure!");  								success = false;  							} else {  								Console.Out.WriteLine (sw.ElapsedMilliseconds.ToString () + "ms");  							}  						} else {  							Console.Out.WriteLine ("timed out!");  							timedOut = true;  						}    						if (clientServer)  							serverProcess.Kill ();    						if (!success) {  							try {  								mainProcess.Kill ();  							} catch (InvalidOperationException) {  								// The process might have finished already' so we need to catch this.  							}  						}    						Console.Out.WriteLine ("stdout:\n{0}"' stdout.Result);  						stdoutOutput = stdout.Result;  						Console.Out.WriteLine ("stderr:\n{0}"' stderr.Result);    						if (success)  							return sw.ElapsedMilliseconds;  						else  							return null;  					}  				}  			} catch (Exception exc) {  				Console.Out.WriteLine ("Exception: {0}"' exc);  				return null;  			}
Magic Number,compare,UnixRunner,C:\repos\xamarin_benchmarker\tools\compare\UnixRunner.cs,Run,The following statement contains a magic number: try {  				if (profilesDirectory != null) {  					if (profileFilename == null) {  						throw new Exception ("must have profile filename");  					}  				} else {  					if (profileFilename != null) {  						throw new Exception ("must have no profile filename");  					}  				}  				if (profilesDirectory == null) {  					Info.Arguments = arguments;  				} else {  					Info.Arguments = String.Format ("--profile=log:counters'countersonly'nocalls'noalloc'output={0} "' Path.Combine (  						profilesDirectory' profileFilename)) + arguments;  				}    				if (runTool == null) {  					Info.FileName = fileName;  				} else {  					Info.FileName = runTool;  					Info.Arguments = runToolArguments + " " + fileName + " " + Info.Arguments;  				}    				if (clientServer) {  					PrintCommandLine ("Server command"' Info);  					PrintCommandLine ("Client command"' ClientInfo);  				} else {  					PrintCommandLine ("Benchmark command"' Info);  				}    				int timeout = GetTimeout ();  				using (var serverProcess = clientServer ? Process.Start (Info) : null) {    					if (clientServer)  						System.Threading.Thread.Sleep (5000);    					var sw = Stopwatch.StartNew ();  					using (var mainProcess = clientServer ? Process.Start (ClientInfo) : Process.Start (Info)) {  						var stdout = Task.Factory.StartNew (() => new StreamReader (mainProcess.StandardOutput.BaseStream).ReadToEnd ()' TaskCreationOptions.LongRunning);  						var stderr = Task.Factory.StartNew (() => new StreamReader (mainProcess.StandardError.BaseStream).ReadToEnd ()' TaskCreationOptions.LongRunning);    						var success = mainProcess.WaitForExit (timeout < 0 ? -1 : (Math.Min (Int32.MaxValue / 1000' timeout) * 1000));    						sw.Stop ();    						if (success) {  							if (mainProcess.ExitCode != 0) {  								Console.Out.WriteLine ("failure!");  								success = false;  							} else {  								Console.Out.WriteLine (sw.ElapsedMilliseconds.ToString () + "ms");  							}  						} else {  							Console.Out.WriteLine ("timed out!");  							timedOut = true;  						}    						if (clientServer)  							serverProcess.Kill ();    						if (!success) {  							try {  								mainProcess.Kill ();  							} catch (InvalidOperationException) {  								// The process might have finished already' so we need to catch this.  							}  						}    						Console.Out.WriteLine ("stdout:\n{0}"' stdout.Result);  						stdoutOutput = stdout.Result;  						Console.Out.WriteLine ("stderr:\n{0}"' stderr.Result);    						if (success)  							return sw.ElapsedMilliseconds;  						else  							return null;  					}  				}  			} catch (Exception exc) {  				Console.Out.WriteLine ("Exception: {0}"' exc);  				return null;  			}
Magic Number,compare,UnixRunner,C:\repos\xamarin_benchmarker\tools\compare\UnixRunner.cs,Run,The following statement contains a magic number: try {  				if (profilesDirectory != null) {  					if (profileFilename == null) {  						throw new Exception ("must have profile filename");  					}  				} else {  					if (profileFilename != null) {  						throw new Exception ("must have no profile filename");  					}  				}  				if (profilesDirectory == null) {  					Info.Arguments = arguments;  				} else {  					Info.Arguments = String.Format ("--profile=log:counters'countersonly'nocalls'noalloc'output={0} "' Path.Combine (  						profilesDirectory' profileFilename)) + arguments;  				}    				if (runTool == null) {  					Info.FileName = fileName;  				} else {  					Info.FileName = runTool;  					Info.Arguments = runToolArguments + " " + fileName + " " + Info.Arguments;  				}    				if (clientServer) {  					PrintCommandLine ("Server command"' Info);  					PrintCommandLine ("Client command"' ClientInfo);  				} else {  					PrintCommandLine ("Benchmark command"' Info);  				}    				int timeout = GetTimeout ();  				using (var serverProcess = clientServer ? Process.Start (Info) : null) {    					if (clientServer)  						System.Threading.Thread.Sleep (5000);    					var sw = Stopwatch.StartNew ();  					using (var mainProcess = clientServer ? Process.Start (ClientInfo) : Process.Start (Info)) {  						var stdout = Task.Factory.StartNew (() => new StreamReader (mainProcess.StandardOutput.BaseStream).ReadToEnd ()' TaskCreationOptions.LongRunning);  						var stderr = Task.Factory.StartNew (() => new StreamReader (mainProcess.StandardError.BaseStream).ReadToEnd ()' TaskCreationOptions.LongRunning);    						var success = mainProcess.WaitForExit (timeout < 0 ? -1 : (Math.Min (Int32.MaxValue / 1000' timeout) * 1000));    						sw.Stop ();    						if (success) {  							if (mainProcess.ExitCode != 0) {  								Console.Out.WriteLine ("failure!");  								success = false;  							} else {  								Console.Out.WriteLine (sw.ElapsedMilliseconds.ToString () + "ms");  							}  						} else {  							Console.Out.WriteLine ("timed out!");  							timedOut = true;  						}    						if (clientServer)  							serverProcess.Kill ();    						if (!success) {  							try {  								mainProcess.Kill ();  							} catch (InvalidOperationException) {  								// The process might have finished already' so we need to catch this.  							}  						}    						Console.Out.WriteLine ("stdout:\n{0}"' stdout.Result);  						stdoutOutput = stdout.Result;  						Console.Out.WriteLine ("stderr:\n{0}"' stderr.Result);    						if (success)  							return sw.ElapsedMilliseconds;  						else  							return null;  					}  				}  			} catch (Exception exc) {  				Console.Out.WriteLine ("Exception: {0}"' exc);  				return null;  			}
Magic Number,Benchmarker,Accredit,C:\repos\xamarin_benchmarker\tools\libaccredit\Accredit.cs,WaitForConfirmation,The following statement contains a magic number: while (true) {  				var task = query.FirstOrDefaultAsync ();  				//Console.WriteLine ("FindOrDefaultAsync CredentialsResponse");  				task.Wait ();    				var result = task.Result;  				if (result != null) {  					// FIXME: check that it's successful  					break;  				}  				Thread.Sleep (1000);  			}
Magic Number,Benchmarker,Helper,C:\repos\xamarin_benchmarker\tools\libdbmodel\Helper.cs,RunWithRetry,The following statement contains a magic number: for (var i = 0; i < numTries - 1; ++i) {  				try {  					await run ();  					return;  				} catch (Exception exc) {  					var seconds = (i == 0) ? 10 : 60 * i;  					Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc);  					await Task.Delay (seconds * 1000);  				}  			}
Magic Number,Benchmarker,Helper,C:\repos\xamarin_benchmarker\tools\libdbmodel\Helper.cs,RunWithRetry,The following statement contains a magic number: for (var i = 0; i < numTries - 1; ++i) {  				try {  					await run ();  					return;  				} catch (Exception exc) {  					var seconds = (i == 0) ? 10 : 60 * i;  					Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc);  					await Task.Delay (seconds * 1000);  				}  			}
Magic Number,Benchmarker,Helper,C:\repos\xamarin_benchmarker\tools\libdbmodel\Helper.cs,RunWithRetry,The following statement contains a magic number: for (var i = 0; i < numTries - 1; ++i) {  				try {  					await run ();  					return;  				} catch (Exception exc) {  					var seconds = (i == 0) ? 10 : 60 * i;  					Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc);  					await Task.Delay (seconds * 1000);  				}  			}
Magic Number,Benchmarker,Helper,C:\repos\xamarin_benchmarker\tools\libdbmodel\Helper.cs,RunWithRetry,The following statement contains a magic number: for (var i = 0; i < numTries - 1; ++i) {  				try {  					return await run ();  				} catch (Exception exc) {  					var seconds = (i == 0) ? 10 : 60 * i;  					Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc);  					await Task.Delay (seconds * 1000);  				}  			}
Magic Number,Benchmarker,Helper,C:\repos\xamarin_benchmarker\tools\libdbmodel\Helper.cs,RunWithRetry,The following statement contains a magic number: for (var i = 0; i < numTries - 1; ++i) {  				try {  					return await run ();  				} catch (Exception exc) {  					var seconds = (i == 0) ? 10 : 60 * i;  					Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc);  					await Task.Delay (seconds * 1000);  				}  			}
Magic Number,Benchmarker,Helper,C:\repos\xamarin_benchmarker\tools\libdbmodel\Helper.cs,RunWithRetry,The following statement contains a magic number: for (var i = 0; i < numTries - 1; ++i) {  				try {  					return await run ();  				} catch (Exception exc) {  					var seconds = (i == 0) ? 10 : 60 * i;  					Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc);  					await Task.Delay (seconds * 1000);  				}  			}
Magic Number,Benchmarker,GitHubInterface,C:\repos\xamarin_benchmarker\tools\libgithub\GitHubInterface.cs,RunWithRetry,The following statement contains a magic number: for (var i = 0; i < numTries - 1; ++i) {  				try {  					return await run ();  				} catch (Exception exc) {  					if (exc is NotFoundException)  						throw exc;  					var seconds = (i == 0) ? 10 : 60 * i;  					Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc);  					await Task.Delay (seconds * 1000);  				}  			}
Magic Number,Benchmarker,GitHubInterface,C:\repos\xamarin_benchmarker\tools\libgithub\GitHubInterface.cs,RunWithRetry,The following statement contains a magic number: for (var i = 0; i < numTries - 1; ++i) {  				try {  					return await run ();  				} catch (Exception exc) {  					if (exc is NotFoundException)  						throw exc;  					var seconds = (i == 0) ? 10 : 60 * i;  					Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc);  					await Task.Delay (seconds * 1000);  				}  			}
Magic Number,Benchmarker,GitHubInterface,C:\repos\xamarin_benchmarker\tools\libgithub\GitHubInterface.cs,RunWithRetry,The following statement contains a magic number: for (var i = 0; i < numTries - 1; ++i) {  				try {  					return await run ();  				} catch (Exception exc) {  					if (exc is NotFoundException)  						throw exc;  					var seconds = (i == 0) ? 10 : 60 * i;  					Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc);  					await Task.Delay (seconds * 1000);  				}  			}
Magic Number,Benchmarker.Models,Config,C:\repos\xamarin_benchmarker\tools\libdbmodel\Config.cs,LoadFromString,The following statement contains a magic number: if (config.Count < 1)  				config.Count = 10;
Magic Number,Benchmarker.Models,HttpApi,C:\repos\xamarin_benchmarker\tools\libdbmodel\HttpApi.cs,Send,The following statement contains a magic number: using (var client = new HttpClient ()) {  				client.Timeout = TimeSpan.FromSeconds (350);    				var url = ApiUrl (path' args);  				var message = new HttpRequestMessage (new HttpMethod (method)' url);  				if (content != null)  					message.Content = content;  				client.DefaultRequestHeaders.Add ("Authorization"' "token " + AuthToken);    				var response = await client.SendAsync (message);  				var responseBody = await response.Content.ReadAsStringAsync ();  				if (!response.IsSuccessStatusCode) {  					Console.Error.WriteLine ("Error: {0} to `{1}` not successful: {2}"' method' url' responseBody);  					return null;  				}  				return responseBody;  			}
