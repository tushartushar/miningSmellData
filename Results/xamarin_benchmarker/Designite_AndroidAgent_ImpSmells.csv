Implementation smell,Namespace,Class,File,Method,Description
Long Method,AndroidAgent,MainActivity,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\MainActivity.cs,Iteration,The method has 120 lines of code.
Complex Method,AndroidAgent,MainActivity,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\MainActivity.cs,Iteration,Cyclomatic complexity of the method is 34
Complex Method,AndroidAgent,GcBridge,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\GcBridge.cs,Main,Cyclomatic complexity of the method is 10
Complex Method,Benchmarker.Models,Config,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\libdbmodel\Config.cs,LoadFromString,Cyclomatic complexity of the method is 13
Complex Method,Benchmarker.Models,RunSet,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\libdbmodel\RunSet.cs,FromId,Cyclomatic complexity of the method is 11
Long Parameter List,AndroidAgent,MainActivity,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\MainActivity.cs,RunBenchmark,The method has 5 parameters. Parameters: runSetId' benchmarkName' machineName' architecture' configName
Long Parameter List,Benchmarker.Models,RunSet,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\libdbmodel\RunSet.cs,FromId,The method has 7 parameters. Parameters: local_machine' local_runsetid' local_config' local_mainCommit' local_secondaryCommits' local_buildURL' local_logURL
Long Statement,AndroidAgent,MainActivity,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\MainActivity.cs,Iteration,The length of the statement  "			Logging.GetLogging ().InfoFormat ("Benchmarker | Benchmark{0} \"{1}\": start iteration {2}"' dryRun' benchmark' iteration); " is 123.
Long Statement,AndroidAgent,MainActivity,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\MainActivity.cs,Iteration,The length of the statement  "			Logging.GetLogging ().InfoFormat ("Benchmarker | Benchmark{0} \"{1}\": finished iteration {2}' took {3}ms"' dryRun' benchmark' iteration' sw.ElapsedMilliseconds); " is 162.
Long Statement,AndroidAgent,MainActivity,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\MainActivity.cs,DetermineCommit,The length of the statement  "				Octokit.TreeResponse treeResponse = AsyncContext.Run (() => GitHubInterface.RunWithRetry (() => gitHubClient.GitDatabase.Tree.Get ("mono"' "mono"' hash))); " is 155.
Long Statement,AndroidAgent,MainActivity,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\MainActivity.cs,DetermineCommit,The length of the statement  "				gitHubCommit = AsyncContext.Run (() => GitHubInterface.RunWithRetry (() => gitHubClient.GitDatabase.Commit.Get ("mono"' "mono"' treeResponse.Sha))); " is 148.
Long Statement,AndroidAgent,MainActivity,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\MainActivity.cs,RunBenchmark,The length of the statement  "				runSet = AsyncContext.Run (() => models.RunSet.FromId (machine 'runSetId 'config 'mainCommit 'null 'null 'null /* TODO: logURL? */)); " is 133.
Long Statement,Benchmarker,GitHubInterface,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\libgithub\GitHubInterface.cs,RunWithRetry,The length of the statement  "					Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc); " is 121.
Long Statement,Benchmarker,Helper,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\libdbmodel\Helper.cs,RunWithRetry,The length of the statement  "					Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc); " is 121.
Long Statement,Benchmarker,Helper,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\libdbmodel\Helper.cs,RunWithRetry,The length of the statement  "					Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc); " is 121.
Long Statement,Benchmarker.Models,RunSet,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\libdbmodel\RunSet.cs,FromId,The length of the statement  "				Console.Error.WriteLine ("trying to parse Start date: \"" + db_result ["StartedAt"].ToObject<DateTime> ().ToLocalTime ().ToString (DATETIME_PRETTY) + "\""); " is 156.
Long Statement,Benchmarker.Models,RunSet,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\libdbmodel\RunSet.cs,FromId,The length of the statement  "					throw new Exception (String.Format ("Commit ({0}) does not match the one in the database ({1})."' local_mainCommit.Hash' db_mainProductCommit)); " is 144.
Long Statement,Benchmarker.Models,RunSet,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\libdbmodel\RunSet.cs,FromId,The length of the statement  "					throw new Exception ("Machine does not match the one in the database. \"" + db_machineName + "\" vs. \"" + local_machine.Name + "\""); " is 134.
Long Statement,Benchmarker.Models,HttpApi,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\libdbmodel\HttpApi.cs,ApiUrl,The length of the statement  "				queryString = "?" + String.Join ("&"' args.Select (kvp => String.Format ("{0}={1}"' kvp.Key' Uri.EscapeUriString (kvp.Value)))); " is 128.
Magic Number,AndroidAgent,MainActivity,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\MainActivity.cs,Iteration,The following statement contains a magic number: System.Threading.Thread.Sleep (5 * 1000);
Magic Number,AndroidAgent,MainActivity,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\MainActivity.cs,Iteration,The following statement contains a magic number: System.Threading.Thread.Sleep (5 * 1000);
Magic Number,AndroidAgent,MainActivity,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\MainActivity.cs,DetermineCommit,The following statement contains a magic number: hash = match.Groups [2].Value;
Magic Number,AndroidAgent,MainActivity,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\MainActivity.cs,RunBenchmark,The following statement contains a magic number: const int DRY_RUNS = 3;
Magic Number,AndroidAgent,MainActivity,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\MainActivity.cs,RunBenchmark,The following statement contains a magic number: const int ITERATIONS = 10;
Magic Number,AndroidAgent,GcBridge,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\GcBridge.cs,SetupLinks,The following statement contains a magic number: var r = new Random(100);
Magic Number,AndroidAgent,GcBridge,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\GcBridge.cs,RunTest,The following statement contains a magic number: i < 5
Magic Number,AndroidAgent,GcBridge,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\GcBridge.cs,Main,The following statement contains a magic number: switch (benchmark) {  				case "gcbridge-links":  					RunTest(SetupLinks);  					break;  				case "gcbridge-linkedfan":  					RunTest(SetupLinkedFan);  					break;  				case "gcbridge-inversefan":  					RunTest(SetupInverseFan);  					break;  				case "gcbridge-deadlist":  					RunTest(SetupDeadList);  					break;  				case "gcbridge-selflinks":  					RunTest(SetupSelfLinks);  					break;  				case "gcbridge-spider":  					RunTest(Spider);  					break;  				case "gcbridge-doublefan-1000":  					DFAN_OUT = 1000;    					RunTest(SetupDoubleFan);  					break;  				case "gcbridge-doublefan-4000":  					DFAN_OUT = 4000;    					RunTest(SetupDoubleFan);  					break;  				default:  					logger.ErrorFormat("GC bridge: Unknown test {0}"' benchmark);  					break;  			}
Magic Number,AndroidAgent,GcBridge,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\GcBridge.cs,Main,The following statement contains a magic number: switch (benchmark) {  				case "gcbridge-links":  					RunTest(SetupLinks);  					break;  				case "gcbridge-linkedfan":  					RunTest(SetupLinkedFan);  					break;  				case "gcbridge-inversefan":  					RunTest(SetupInverseFan);  					break;  				case "gcbridge-deadlist":  					RunTest(SetupDeadList);  					break;  				case "gcbridge-selflinks":  					RunTest(SetupSelfLinks);  					break;  				case "gcbridge-spider":  					RunTest(Spider);  					break;  				case "gcbridge-doublefan-1000":  					DFAN_OUT = 1000;    					RunTest(SetupDoubleFan);  					break;  				case "gcbridge-doublefan-4000":  					DFAN_OUT = 4000;    					RunTest(SetupDoubleFan);  					break;  				default:  					logger.ErrorFormat("GC bridge: Unknown test {0}"' benchmark);  					break;  			}
Magic Number,AndroidAgent,AndroidLogger,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\AndroidLogger.cs,DebugFormat,The following statement contains a magic number: switch (args.Length) {  			case 0:  				Android.Util.Log.Debug (appname' format);  				break;  			case 1:  				Android.Util.Log.Debug (appname' String.Format (format' args[0]));  				break;  			case 2:  				Android.Util.Log.Debug (appname' String.Format (format' args[0]' args[1]));  				break;  			case 3:  				Android.Util.Log.Debug (appname' String.Format (format' args[0]' args[1]' args[2]));  				break;  			default:  				throw new NotImplementedException ();  			}
Magic Number,AndroidAgent,AndroidLogger,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\AndroidLogger.cs,DebugFormat,The following statement contains a magic number: switch (args.Length) {  			case 0:  				Android.Util.Log.Debug (appname' format);  				break;  			case 1:  				Android.Util.Log.Debug (appname' String.Format (format' args[0]));  				break;  			case 2:  				Android.Util.Log.Debug (appname' String.Format (format' args[0]' args[1]));  				break;  			case 3:  				Android.Util.Log.Debug (appname' String.Format (format' args[0]' args[1]' args[2]));  				break;  			default:  				throw new NotImplementedException ();  			}
Magic Number,AndroidAgent,AndroidLogger,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\AndroidLogger.cs,DebugFormat,The following statement contains a magic number: switch (args.Length) {  			case 0:  				Android.Util.Log.Debug (appname' format);  				break;  			case 1:  				Android.Util.Log.Debug (appname' String.Format (format' args[0]));  				break;  			case 2:  				Android.Util.Log.Debug (appname' String.Format (format' args[0]' args[1]));  				break;  			case 3:  				Android.Util.Log.Debug (appname' String.Format (format' args[0]' args[1]' args[2]));  				break;  			default:  				throw new NotImplementedException ();  			}
Magic Number,AndroidAgent,AndroidLogger,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\AndroidLogger.cs,InfoFormat,The following statement contains a magic number: switch (args.Length) {  			case 0:  				Android.Util.Log.Info (appname' format);  				break;  			case 1:  				Android.Util.Log.Info (appname' String.Format (format' args[0]));  				break;  			case 2:  				Android.Util.Log.Info (appname' String.Format (format' args[0]' args[1]));  				break;  			case 3:  				Android.Util.Log.Info (appname' String.Format (format' args[0]' args[1]' args[2]));  				break;  			case 4:  				Android.Util.Log.Info (appname' String.Format (format' args[0]' args[1]' args[2]' args[3]));  				break;  			default:  				throw new NotImplementedException ();  			}
Magic Number,AndroidAgent,AndroidLogger,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\AndroidLogger.cs,InfoFormat,The following statement contains a magic number: switch (args.Length) {  			case 0:  				Android.Util.Log.Info (appname' format);  				break;  			case 1:  				Android.Util.Log.Info (appname' String.Format (format' args[0]));  				break;  			case 2:  				Android.Util.Log.Info (appname' String.Format (format' args[0]' args[1]));  				break;  			case 3:  				Android.Util.Log.Info (appname' String.Format (format' args[0]' args[1]' args[2]));  				break;  			case 4:  				Android.Util.Log.Info (appname' String.Format (format' args[0]' args[1]' args[2]' args[3]));  				break;  			default:  				throw new NotImplementedException ();  			}
Magic Number,AndroidAgent,AndroidLogger,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\AndroidLogger.cs,InfoFormat,The following statement contains a magic number: switch (args.Length) {  			case 0:  				Android.Util.Log.Info (appname' format);  				break;  			case 1:  				Android.Util.Log.Info (appname' String.Format (format' args[0]));  				break;  			case 2:  				Android.Util.Log.Info (appname' String.Format (format' args[0]' args[1]));  				break;  			case 3:  				Android.Util.Log.Info (appname' String.Format (format' args[0]' args[1]' args[2]));  				break;  			case 4:  				Android.Util.Log.Info (appname' String.Format (format' args[0]' args[1]' args[2]' args[3]));  				break;  			default:  				throw new NotImplementedException ();  			}
Magic Number,AndroidAgent,AndroidLogger,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\AndroidLogger.cs,InfoFormat,The following statement contains a magic number: switch (args.Length) {  			case 0:  				Android.Util.Log.Info (appname' format);  				break;  			case 1:  				Android.Util.Log.Info (appname' String.Format (format' args[0]));  				break;  			case 2:  				Android.Util.Log.Info (appname' String.Format (format' args[0]' args[1]));  				break;  			case 3:  				Android.Util.Log.Info (appname' String.Format (format' args[0]' args[1]' args[2]));  				break;  			case 4:  				Android.Util.Log.Info (appname' String.Format (format' args[0]' args[1]' args[2]' args[3]));  				break;  			default:  				throw new NotImplementedException ();  			}
Magic Number,AndroidAgent,AndroidLogger,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\AndroidLogger.cs,InfoFormat,The following statement contains a magic number: switch (args.Length) {  			case 0:  				Android.Util.Log.Info (appname' format);  				break;  			case 1:  				Android.Util.Log.Info (appname' String.Format (format' args[0]));  				break;  			case 2:  				Android.Util.Log.Info (appname' String.Format (format' args[0]' args[1]));  				break;  			case 3:  				Android.Util.Log.Info (appname' String.Format (format' args[0]' args[1]' args[2]));  				break;  			case 4:  				Android.Util.Log.Info (appname' String.Format (format' args[0]' args[1]' args[2]' args[3]));  				break;  			default:  				throw new NotImplementedException ();  			}
Magic Number,AndroidAgent,AndroidLogger,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\AndroidLogger.cs,InfoFormat,The following statement contains a magic number: switch (args.Length) {  			case 0:  				Android.Util.Log.Info (appname' format);  				break;  			case 1:  				Android.Util.Log.Info (appname' String.Format (format' args[0]));  				break;  			case 2:  				Android.Util.Log.Info (appname' String.Format (format' args[0]' args[1]));  				break;  			case 3:  				Android.Util.Log.Info (appname' String.Format (format' args[0]' args[1]' args[2]));  				break;  			case 4:  				Android.Util.Log.Info (appname' String.Format (format' args[0]' args[1]' args[2]' args[3]));  				break;  			default:  				throw new NotImplementedException ();  			}
Magic Number,AndroidAgent,AndroidLogger,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\AndroidLogger.cs,WarnFormat,The following statement contains a magic number: switch (args.Length) {  			case 0:  				Android.Util.Log.Warn (appname' format);  				break;  			case 1:  				Android.Util.Log.Warn (appname' String.Format (format' args[0]));  				break;  			case 2:  				Android.Util.Log.Warn (appname' String.Format (format' args[0]' args[1]));  				break;  			case 3:  				Android.Util.Log.Warn (appname' String.Format (format' args[0]' args[1]' args[2]));  				break;  			default:  				throw new NotImplementedException ();  			}
Magic Number,AndroidAgent,AndroidLogger,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\AndroidLogger.cs,WarnFormat,The following statement contains a magic number: switch (args.Length) {  			case 0:  				Android.Util.Log.Warn (appname' format);  				break;  			case 1:  				Android.Util.Log.Warn (appname' String.Format (format' args[0]));  				break;  			case 2:  				Android.Util.Log.Warn (appname' String.Format (format' args[0]' args[1]));  				break;  			case 3:  				Android.Util.Log.Warn (appname' String.Format (format' args[0]' args[1]' args[2]));  				break;  			default:  				throw new NotImplementedException ();  			}
Magic Number,AndroidAgent,AndroidLogger,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\AndroidLogger.cs,WarnFormat,The following statement contains a magic number: switch (args.Length) {  			case 0:  				Android.Util.Log.Warn (appname' format);  				break;  			case 1:  				Android.Util.Log.Warn (appname' String.Format (format' args[0]));  				break;  			case 2:  				Android.Util.Log.Warn (appname' String.Format (format' args[0]' args[1]));  				break;  			case 3:  				Android.Util.Log.Warn (appname' String.Format (format' args[0]' args[1]' args[2]));  				break;  			default:  				throw new NotImplementedException ();  			}
Magic Number,AndroidAgent,AndroidLogger,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\AndroidLogger.cs,ErrorFormat,The following statement contains a magic number: switch (args.Length) {  			case 0:  				Android.Util.Log.Error (appname' format);  				break;  			case 1:  				Android.Util.Log.Error (appname' String.Format (format' args[0]));  				break;  			case 2:  				Android.Util.Log.Error (appname' String.Format (format' args[0]' args[1]));  				break;  			case 3:  				Android.Util.Log.Error (appname' String.Format (format' args[0]' args[1]' args[2]));  				break;  			default:  				throw new NotImplementedException ();  			}
Magic Number,AndroidAgent,AndroidLogger,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\AndroidLogger.cs,ErrorFormat,The following statement contains a magic number: switch (args.Length) {  			case 0:  				Android.Util.Log.Error (appname' format);  				break;  			case 1:  				Android.Util.Log.Error (appname' String.Format (format' args[0]));  				break;  			case 2:  				Android.Util.Log.Error (appname' String.Format (format' args[0]' args[1]));  				break;  			case 3:  				Android.Util.Log.Error (appname' String.Format (format' args[0]' args[1]' args[2]));  				break;  			default:  				throw new NotImplementedException ();  			}
Magic Number,AndroidAgent,AndroidLogger,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\AndroidLogger.cs,ErrorFormat,The following statement contains a magic number: switch (args.Length) {  			case 0:  				Android.Util.Log.Error (appname' format);  				break;  			case 1:  				Android.Util.Log.Error (appname' String.Format (format' args[0]));  				break;  			case 2:  				Android.Util.Log.Error (appname' String.Format (format' args[0]' args[1]));  				break;  			case 3:  				Android.Util.Log.Error (appname' String.Format (format' args[0]' args[1]' args[2]));  				break;  			default:  				throw new NotImplementedException ();  			}
Magic Number,AndroidAgent,ProcessHelper,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\AndroidAgent\AndroidCPUManagment.cs,ReadStreamOutput,The following statement contains a magic number: byte[] buffer = new byte[1024];
Magic Number,Benchmarker.Models,Config,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\libdbmodel\Config.cs,LoadFromString,The following statement contains a magic number: config.Count = 10;
Magic Number,Benchmarker.Models,HttpApi,D:\research\architectureSmells\repos\xamarin_benchmarker\tools\libdbmodel\HttpApi.cs,Send,The following statement contains a magic number: client.Timeout = TimeSpan.FromSeconds (350);
