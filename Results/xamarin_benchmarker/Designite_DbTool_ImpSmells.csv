Implementation smell,Namespace,Class,File,Method,Description
Long Method,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,FindRegressions,The method has 154 lines of code.
Complex Method,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,FindRegressions,Cyclomatic complexity of the method is 30
Complex Method,Benchmarker,Accredit,D:\newReposJune17\xamarin_benchmarker\tools\libaccredit\Accredit.cs,GetCredentials,Cyclomatic complexity of the method is 10
Complex Method,Benchmarker,PostgresInterface,D:\newReposJune17\xamarin_benchmarker\tools\libpostgres\PostgresInterface.cs,Select,Cyclomatic complexity of the method is 9
Complex Method,Benchmarker.Models,Config,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\Config.cs,LoadFromString,Cyclomatic complexity of the method is 13
Complex Method,Benchmarker.Models,RunSet,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\RunSet.cs,FromId,Cyclomatic complexity of the method is 13
Complex Method,Benchmarker.Models,RunSet,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\RunSet.cs,AsDict,Cyclomatic complexity of the method is 7
Long Parameter List,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,SendSlackMessage,The method has 4 parameters.
Long Parameter List,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,WarnIfNecessary,The method has 8 parameters.
Long Parameter List,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,InsertWarned,The method has 4 parameters.
Long Parameter List,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,checkExists,The method has 4 parameters.
Long Parameter List,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,FindRegressions,The method has 5 parameters.
Long Parameter List,Benchmarker,PostgresInterface,D:\newReposJune17\xamarin_benchmarker\tools\libpostgres\PostgresInterface.cs,Select,The method has 4 parameters.
Long Parameter List,Benchmarker,PostgresInterface,D:\newReposJune17\xamarin_benchmarker\tools\libpostgres\PostgresInterface.cs,Select,The method has 5 parameters.
Long Parameter List,Benchmarker,PostgresInterface,D:\newReposJune17\xamarin_benchmarker\tools\libpostgres\PostgresInterface.cs,Select,The method has 5 parameters.
Long Parameter List,Benchmarker,PostgresInterface,D:\newReposJune17\xamarin_benchmarker\tools\libpostgres\PostgresInterface.cs,Insert,The method has 4 parameters.
Long Parameter List,Benchmarker,PostgresInterface,D:\newReposJune17\xamarin_benchmarker\tools\libpostgres\PostgresInterface.cs,Update,The method has 4 parameters.
Long Parameter List,Benchmarker,PostgresInterface,D:\newReposJune17\xamarin_benchmarker\tools\libpostgres\PostgresInterface.cs,Delete,The method has 4 parameters.
Long Parameter List,Benchmarker.Models,Config,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\Config.cs,ExpandInEnvironmentVariables,The method has 4 parameters.
Long Parameter List,Benchmarker.Models,RunSet,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\RunSet.cs,FromId,The method has 7 parameters.
Long Parameter List,Benchmarker.Models,HttpApi,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\HttpApi.cs,Send,The method has 4 parameters.
Long Statement,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,WarnIfNecessary,The length of the statement  "	var timelineUrl = String.Format ("http://xamarin.github.io/benchmarker/front-end/index.html#machine={0}&config={1}"' machineName' configName); " is 142.
Long Statement,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,WarnIfNecessary,The length of the statement  "	var compareUrl = String.Format ("http://xamarin.github.io/benchmarker/front-end/compare.html#ids={0}+{1}"' previousRunSet.GetValue<long> ("rs_id").Value' testRunSet.GetValue<long> ("rs_id").Value); " is 197.
Long Statement,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,WarnIfNecessary,The length of the statement  "	var message = String.Format ("The {0} got {1} between commits {2} and {3} on <{4}|{5}> â€” <{6}|compare>"' benchmarksString' (faster ? "faster" : "slower")' SlackCommitString (previousCommit)' SlackCommitString (commit)' timelineUrl' testRunSet.GetReference<string> ("m_architecture")' compareUrl); " is 296.
Long Statement,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,FindRegressions,The length of the statement  "			var newlyWarnedFaster = await WarnIfNecessary (testRun' fasterBenchmarks' warnedFasterBenchmarks' true' testRunSet' previousRunSet' machineName' configName); " is 157.
Long Statement,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,FindRegressions,The length of the statement  "			var newlyWarnedSlower = await WarnIfNecessary (testRun' slowerBenchmarks' warnedSlowerBenchmarks' false' testRunSet' previousRunSet' machineName' configName); " is 158.
Long Statement,Benchmarker,Accredit,D:\newReposJune17\xamarin_benchmarker\tools\libaccredit\Accredit.cs,GetCredentials,The length of the statement  "	/* Get github OAuth authentication link */string oauthLink = GetResponse ("https://accredit.parseapp.com/requestCredentials"' string.Format ("service={0}&key={1}&secret={2}"' serviceName' key' secret)); " is 202.
Long Statement,Benchmarker,Accredit,D:\newReposJune17\xamarin_benchmarker\tools\libaccredit\Accredit.cs,GetCredentials,The length of the statement  "	/* Request the password */var response = GetResponse ("https://accredit.parseapp.com/getCredentials"' string.Format ("key={0}&secret={1}"' key' secret)); " is 153.
Long Statement,Benchmarker,Helper,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\Helper.cs,RunWithRetry,The length of the statement  "			Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc); " is 121.
Long Statement,Benchmarker,Helper,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\Helper.cs,RunWithRetry,The length of the statement  "			Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc); " is 121.
Long Statement,Benchmarker,PostgresInterface,D:\newReposJune17\xamarin_benchmarker\tools\libpostgres\PostgresInterface.cs,Connect,The length of the statement  "	var connectionString = string.Format ("Host={0};Port={1};Username={2};Password={3};Database={4};SslMode=Require;TrustServerCertificate=true"' host' port' user' password' database); " is 180.
Long Statement,Benchmarker,PostgresInterface,D:\newReposJune17\xamarin_benchmarker\tools\libpostgres\PostgresInterface.cs,Insert,The length of the statement  "	var commandString = string.Format ("insert into {0} ({1}) values ({2}) returning {3}"' table' string.Join ("'"' columns)' string.Join ("'"' columns.Select (c => ":" + c))' keyColumn); " is 183.
Long Statement,Benchmarker,PostgresInterface,D:\newReposJune17\xamarin_benchmarker\tools\libpostgres\PostgresInterface.cs,Update,The length of the statement  "	var commandString = string.Format ("update {0} set {1} where {2} = :{2}"' table' string.Join ("'"' columns.Select (c => c + "=:" + c))' keyColumn); " is 147.
Long Statement,Benchmarker.Models,Config,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\Config.cs,EqualsApiObject,The length of the statement  "	return Name == other ["Name"].ToObject<string> () && MonoExecutable == other ["MonoExecutable"].ToObject<string> () && EnvironmentVariablesEqual (MonoEnvironmentVariables' other ["MonoEnvironmentVariables"]) && OptionsEqual (MonoOptions' other ["MonoOptions"]); " is 261.
Long Statement,Benchmarker.Models,RunSet,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\RunSet.cs,FromId,The length of the statement  "		Console.Error.WriteLine ("trying to parse Start date: \"" + db_result ["StartedAt"].ToObject<DateTime> ().ToLocalTime ().ToString (DATETIME_PRETTY) + "\""); " is 156.
Long Statement,Benchmarker.Models,RunSet,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\RunSet.cs,FromId,The length of the statement  "			throw new Exception (String.Format ("Commit ({0}) does not match the one in the database ({1})."' local_mainCommit.Hash' db_mainProductCommit)); " is 144.
Long Statement,Benchmarker.Models,RunSet,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\RunSet.cs,FromId,The length of the statement  "			throw new Exception ("Machine does not match the one in the database. \"" + db_machineName + "\" vs. \"" + local_machine.Name + "\""); " is 134.
Long Statement,Benchmarker.Models,HttpApi,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\HttpApi.cs,ApiUrl,The length of the statement  "		queryString = "?" + String.Join ("&"' args.Select (kvp => String.Format ("{0}={1}"' kvp.Key' Uri.EscapeUriString (kvp.Value)))); " is 128.
Magic Number,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,WarnIfNecessary,The following statement contains a magic number: if (newlyWarned.Count == 1) {  	benchmarksString = String.Format ("benchmark `{0}`"' newlyWarned [0]);  } else if (newlyWarned.Count == 2) {  	benchmarksString = String.Format ("benchmarks `{0}` and `{1}`"' newlyWarned [0]' newlyWarned [1]);  } else {  	var allButLast = newlyWarned.GetRange (0' newlyWarned.Count - 1).Select (n => String.Format ("`{0}`"' n));  	benchmarksString = String.Format ("benchmarks {0}' and `{1}`"' String.Join ("' "' allButLast)' newlyWarned.Last ());  }  
Magic Number,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,WarnIfNecessary,The following statement contains a magic number: if (newlyWarned.Count == 2) {  	benchmarksString = String.Format ("benchmarks `{0}` and `{1}`"' newlyWarned [0]' newlyWarned [1]);  } else {  	var allButLast = newlyWarned.GetRange (0' newlyWarned.Count - 1).Select (n => String.Format ("`{0}`"' n));  	benchmarksString = String.Format ("benchmarks {0}' and `{1}`"' String.Join ("' "' allButLast)' newlyWarned.Last ());  }  
Magic Number,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,FindRegressions,The following statement contains a magic number: for (var i = baselineWindowSize; i <= sortedRunSets.Count - testWindowSize; ++i) {  	var windowAverages = new Dictionary<string' double> ();  	var windowVariances = new Dictionary<string' double> ();  	var benchmarkCounts = new Dictionary<string' int> ();  	for (var j = 1; j <= baselineWindowSize; ++j) {  		var baselineRunSet = sortedRunSets [i - j];  		var averages = JsonMapToDictionary (baselineRunSet.GetReference<JObject> ("averages"));  		var variances = JsonMapToDictionary (baselineRunSet.GetReference<JObject> ("variances"));  		foreach (var kvp in averages) {  			var name = kvp.Key;  			var average = kvp.Value;  			var variance = variances [name];  			if (!windowAverages.ContainsKey (name)) {  				windowAverages [name] = 0.0;  				windowVariances [name] = 0.0;  				benchmarkCounts [name] = 0;  			}  			windowAverages [name] += average;  			windowVariances [name] += variance;  			benchmarkCounts [name] += 1;  		}  	}  	foreach (var kvp in benchmarkCounts) {  		var name = kvp.Key;  		var count = kvp.Value;  		windowAverages [name] /= count;  		windowVariances [name] /= count;  	}  	var testResults = new Dictionary<string' List<double>> ();  	for (var j = 0; j < testWindowSize; ++j) {  		var results = FetchResultsForRunSet (conn' sortedRunSets [i + j].GetValue<long> ("rs_id").Value);  		foreach (var kvp in results) {  			var benchmark = kvp.Key;  			if (!testResults.ContainsKey (benchmark))  				testResults.Add (benchmark' new List<double> ());  			testResults [benchmark].AddRange (kvp.Value);  		}  	}  	var testRunSet = sortedRunSets [i];  	var commitHash = testRunSet.GetReference<string> ("c_hash");  	var testRunSetId = testRunSet.GetValue<long> ("rs_id").Value;  	Console.WriteLine ("{0} {1}"' testRunSetId' commitHash);  	var fasterBenchmarks = new List<string> ();  	var slowerBenchmarks = new List<string> ();  	foreach (var kvp in benchmarkCounts) {  		var benchmark = kvp.Key;  		if (kvp.Value < baselineWindowSize)  			continue;  		if (lastWarningIndex.ContainsKey (benchmark) && lastWarningIndex [benchmark] >= i - baselineWindowSize)  			continue;  		var average = windowAverages [benchmark];  		var variance = windowVariances [benchmark];  		var stdDev = Math.Sqrt (variance);  		var lowerControlLimit = average - controlLimitSize * stdDev;  		var upperControlLimit = average + controlLimitSize * stdDev;  		if (!testResults.ContainsKey (benchmark))  			continue;  		var results = testResults [benchmark];  		if (results.Count < 5)  			continue;  		var numOutliersFaster = 0;  		var numOutliersSlower = 0;  		foreach (var elapsed in results) {  			if (elapsed < lowerControlLimit)  				++numOutliersFaster;  			if (elapsed > upperControlLimit)  				++numOutliersSlower;  		}  		if (numOutliersFaster > results.Count * 3 / 4) {  			Console.WriteLine ("+ regression in {0}: {1}/{2}"' benchmark' numOutliersFaster' results.Count);  			lastWarningIndex [benchmark] = i;  			fasterBenchmarks.Add (benchmark);  		} else if (numOutliersSlower > results.Count * 3 / 4) {  			Console.WriteLine ("- regression in {0}: {1}/{2}"' benchmark' numOutliersSlower' results.Count);  			lastWarningIndex [benchmark] = i;  			slowerBenchmarks.Add (benchmark);  		}  		/* 					else if (numOutliersFaster == 0 && numOutliersSlower == 0) { 						Console.WriteLine ("  nothing in    {0}"' name); 					} else { 						Console.WriteLine ("? suspected in  {0}: {1}-/{2}+/{3}"' name' numOutliersSlower' numOutliersFaster' runs.Count); 					} 					*/}  	if (fasterBenchmarks.Count != 0 || slowerBenchmarks.Count != 0) {  		var warnedFasterBenchmarks = new List<string> ();  		var warnedSlowerBenchmarks = new List<string> ();  		if (onlyNecessary) {  			var warningValues = new PostgresRow ();  			warningValues.Set ("runset"' NpgsqlTypes.NpgsqlDbType.Bigint' testRunSetId);  			var warnings = PostgresInterface.Select (conn' "RegressionsWarned' benchmark"' new string[] {  				"benchmark.name"'  				"faster"  			}' "benchmark.id = RegressionsWarned.benchmark and runSet = :runset"' warningValues);  			foreach (var row in warnings) {  				var benchmark = row.GetReference<string> ("benchmark.name");  				if (row.GetValue<bool> ("faster").Value)  					warnedFasterBenchmarks.Add (benchmark);  				else  					warnedSlowerBenchmarks.Add (benchmark);  			}  		}  		var previousRunSet = sortedRunSets [i - 1];  		var newlyWarnedFaster = await WarnIfNecessary (testRun' fasterBenchmarks' warnedFasterBenchmarks' true' testRunSet' previousRunSet' machineName' configName);  		var newlyWarnedSlower = await WarnIfNecessary (testRun' slowerBenchmarks' warnedSlowerBenchmarks' false' testRunSet' previousRunSet' machineName' configName);  		if (!testRun) {  			foreach (var benchmark in newlyWarnedFaster)  				InsertWarned (conn' testRunSetId' benchmark' true);  			foreach (var benchmark in newlyWarnedSlower)  				InsertWarned (conn' testRunSetId' benchmark' false);  		}  	}  }  
Magic Number,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,FindRegressions,The following statement contains a magic number: for (var i = baselineWindowSize; i <= sortedRunSets.Count - testWindowSize; ++i) {  	var windowAverages = new Dictionary<string' double> ();  	var windowVariances = new Dictionary<string' double> ();  	var benchmarkCounts = new Dictionary<string' int> ();  	for (var j = 1; j <= baselineWindowSize; ++j) {  		var baselineRunSet = sortedRunSets [i - j];  		var averages = JsonMapToDictionary (baselineRunSet.GetReference<JObject> ("averages"));  		var variances = JsonMapToDictionary (baselineRunSet.GetReference<JObject> ("variances"));  		foreach (var kvp in averages) {  			var name = kvp.Key;  			var average = kvp.Value;  			var variance = variances [name];  			if (!windowAverages.ContainsKey (name)) {  				windowAverages [name] = 0.0;  				windowVariances [name] = 0.0;  				benchmarkCounts [name] = 0;  			}  			windowAverages [name] += average;  			windowVariances [name] += variance;  			benchmarkCounts [name] += 1;  		}  	}  	foreach (var kvp in benchmarkCounts) {  		var name = kvp.Key;  		var count = kvp.Value;  		windowAverages [name] /= count;  		windowVariances [name] /= count;  	}  	var testResults = new Dictionary<string' List<double>> ();  	for (var j = 0; j < testWindowSize; ++j) {  		var results = FetchResultsForRunSet (conn' sortedRunSets [i + j].GetValue<long> ("rs_id").Value);  		foreach (var kvp in results) {  			var benchmark = kvp.Key;  			if (!testResults.ContainsKey (benchmark))  				testResults.Add (benchmark' new List<double> ());  			testResults [benchmark].AddRange (kvp.Value);  		}  	}  	var testRunSet = sortedRunSets [i];  	var commitHash = testRunSet.GetReference<string> ("c_hash");  	var testRunSetId = testRunSet.GetValue<long> ("rs_id").Value;  	Console.WriteLine ("{0} {1}"' testRunSetId' commitHash);  	var fasterBenchmarks = new List<string> ();  	var slowerBenchmarks = new List<string> ();  	foreach (var kvp in benchmarkCounts) {  		var benchmark = kvp.Key;  		if (kvp.Value < baselineWindowSize)  			continue;  		if (lastWarningIndex.ContainsKey (benchmark) && lastWarningIndex [benchmark] >= i - baselineWindowSize)  			continue;  		var average = windowAverages [benchmark];  		var variance = windowVariances [benchmark];  		var stdDev = Math.Sqrt (variance);  		var lowerControlLimit = average - controlLimitSize * stdDev;  		var upperControlLimit = average + controlLimitSize * stdDev;  		if (!testResults.ContainsKey (benchmark))  			continue;  		var results = testResults [benchmark];  		if (results.Count < 5)  			continue;  		var numOutliersFaster = 0;  		var numOutliersSlower = 0;  		foreach (var elapsed in results) {  			if (elapsed < lowerControlLimit)  				++numOutliersFaster;  			if (elapsed > upperControlLimit)  				++numOutliersSlower;  		}  		if (numOutliersFaster > results.Count * 3 / 4) {  			Console.WriteLine ("+ regression in {0}: {1}/{2}"' benchmark' numOutliersFaster' results.Count);  			lastWarningIndex [benchmark] = i;  			fasterBenchmarks.Add (benchmark);  		} else if (numOutliersSlower > results.Count * 3 / 4) {  			Console.WriteLine ("- regression in {0}: {1}/{2}"' benchmark' numOutliersSlower' results.Count);  			lastWarningIndex [benchmark] = i;  			slowerBenchmarks.Add (benchmark);  		}  		/* 					else if (numOutliersFaster == 0 && numOutliersSlower == 0) { 						Console.WriteLine ("  nothing in    {0}"' name); 					} else { 						Console.WriteLine ("? suspected in  {0}: {1}-/{2}+/{3}"' name' numOutliersSlower' numOutliersFaster' runs.Count); 					} 					*/}  	if (fasterBenchmarks.Count != 0 || slowerBenchmarks.Count != 0) {  		var warnedFasterBenchmarks = new List<string> ();  		var warnedSlowerBenchmarks = new List<string> ();  		if (onlyNecessary) {  			var warningValues = new PostgresRow ();  			warningValues.Set ("runset"' NpgsqlTypes.NpgsqlDbType.Bigint' testRunSetId);  			var warnings = PostgresInterface.Select (conn' "RegressionsWarned' benchmark"' new string[] {  				"benchmark.name"'  				"faster"  			}' "benchmark.id = RegressionsWarned.benchmark and runSet = :runset"' warningValues);  			foreach (var row in warnings) {  				var benchmark = row.GetReference<string> ("benchmark.name");  				if (row.GetValue<bool> ("faster").Value)  					warnedFasterBenchmarks.Add (benchmark);  				else  					warnedSlowerBenchmarks.Add (benchmark);  			}  		}  		var previousRunSet = sortedRunSets [i - 1];  		var newlyWarnedFaster = await WarnIfNecessary (testRun' fasterBenchmarks' warnedFasterBenchmarks' true' testRunSet' previousRunSet' machineName' configName);  		var newlyWarnedSlower = await WarnIfNecessary (testRun' slowerBenchmarks' warnedSlowerBenchmarks' false' testRunSet' previousRunSet' machineName' configName);  		if (!testRun) {  			foreach (var benchmark in newlyWarnedFaster)  				InsertWarned (conn' testRunSetId' benchmark' true);  			foreach (var benchmark in newlyWarnedSlower)  				InsertWarned (conn' testRunSetId' benchmark' false);  		}  	}  }  
Magic Number,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,FindRegressions,The following statement contains a magic number: for (var i = baselineWindowSize; i <= sortedRunSets.Count - testWindowSize; ++i) {  	var windowAverages = new Dictionary<string' double> ();  	var windowVariances = new Dictionary<string' double> ();  	var benchmarkCounts = new Dictionary<string' int> ();  	for (var j = 1; j <= baselineWindowSize; ++j) {  		var baselineRunSet = sortedRunSets [i - j];  		var averages = JsonMapToDictionary (baselineRunSet.GetReference<JObject> ("averages"));  		var variances = JsonMapToDictionary (baselineRunSet.GetReference<JObject> ("variances"));  		foreach (var kvp in averages) {  			var name = kvp.Key;  			var average = kvp.Value;  			var variance = variances [name];  			if (!windowAverages.ContainsKey (name)) {  				windowAverages [name] = 0.0;  				windowVariances [name] = 0.0;  				benchmarkCounts [name] = 0;  			}  			windowAverages [name] += average;  			windowVariances [name] += variance;  			benchmarkCounts [name] += 1;  		}  	}  	foreach (var kvp in benchmarkCounts) {  		var name = kvp.Key;  		var count = kvp.Value;  		windowAverages [name] /= count;  		windowVariances [name] /= count;  	}  	var testResults = new Dictionary<string' List<double>> ();  	for (var j = 0; j < testWindowSize; ++j) {  		var results = FetchResultsForRunSet (conn' sortedRunSets [i + j].GetValue<long> ("rs_id").Value);  		foreach (var kvp in results) {  			var benchmark = kvp.Key;  			if (!testResults.ContainsKey (benchmark))  				testResults.Add (benchmark' new List<double> ());  			testResults [benchmark].AddRange (kvp.Value);  		}  	}  	var testRunSet = sortedRunSets [i];  	var commitHash = testRunSet.GetReference<string> ("c_hash");  	var testRunSetId = testRunSet.GetValue<long> ("rs_id").Value;  	Console.WriteLine ("{0} {1}"' testRunSetId' commitHash);  	var fasterBenchmarks = new List<string> ();  	var slowerBenchmarks = new List<string> ();  	foreach (var kvp in benchmarkCounts) {  		var benchmark = kvp.Key;  		if (kvp.Value < baselineWindowSize)  			continue;  		if (lastWarningIndex.ContainsKey (benchmark) && lastWarningIndex [benchmark] >= i - baselineWindowSize)  			continue;  		var average = windowAverages [benchmark];  		var variance = windowVariances [benchmark];  		var stdDev = Math.Sqrt (variance);  		var lowerControlLimit = average - controlLimitSize * stdDev;  		var upperControlLimit = average + controlLimitSize * stdDev;  		if (!testResults.ContainsKey (benchmark))  			continue;  		var results = testResults [benchmark];  		if (results.Count < 5)  			continue;  		var numOutliersFaster = 0;  		var numOutliersSlower = 0;  		foreach (var elapsed in results) {  			if (elapsed < lowerControlLimit)  				++numOutliersFaster;  			if (elapsed > upperControlLimit)  				++numOutliersSlower;  		}  		if (numOutliersFaster > results.Count * 3 / 4) {  			Console.WriteLine ("+ regression in {0}: {1}/{2}"' benchmark' numOutliersFaster' results.Count);  			lastWarningIndex [benchmark] = i;  			fasterBenchmarks.Add (benchmark);  		} else if (numOutliersSlower > results.Count * 3 / 4) {  			Console.WriteLine ("- regression in {0}: {1}/{2}"' benchmark' numOutliersSlower' results.Count);  			lastWarningIndex [benchmark] = i;  			slowerBenchmarks.Add (benchmark);  		}  		/* 					else if (numOutliersFaster == 0 && numOutliersSlower == 0) { 						Console.WriteLine ("  nothing in    {0}"' name); 					} else { 						Console.WriteLine ("? suspected in  {0}: {1}-/{2}+/{3}"' name' numOutliersSlower' numOutliersFaster' runs.Count); 					} 					*/}  	if (fasterBenchmarks.Count != 0 || slowerBenchmarks.Count != 0) {  		var warnedFasterBenchmarks = new List<string> ();  		var warnedSlowerBenchmarks = new List<string> ();  		if (onlyNecessary) {  			var warningValues = new PostgresRow ();  			warningValues.Set ("runset"' NpgsqlTypes.NpgsqlDbType.Bigint' testRunSetId);  			var warnings = PostgresInterface.Select (conn' "RegressionsWarned' benchmark"' new string[] {  				"benchmark.name"'  				"faster"  			}' "benchmark.id = RegressionsWarned.benchmark and runSet = :runset"' warningValues);  			foreach (var row in warnings) {  				var benchmark = row.GetReference<string> ("benchmark.name");  				if (row.GetValue<bool> ("faster").Value)  					warnedFasterBenchmarks.Add (benchmark);  				else  					warnedSlowerBenchmarks.Add (benchmark);  			}  		}  		var previousRunSet = sortedRunSets [i - 1];  		var newlyWarnedFaster = await WarnIfNecessary (testRun' fasterBenchmarks' warnedFasterBenchmarks' true' testRunSet' previousRunSet' machineName' configName);  		var newlyWarnedSlower = await WarnIfNecessary (testRun' slowerBenchmarks' warnedSlowerBenchmarks' false' testRunSet' previousRunSet' machineName' configName);  		if (!testRun) {  			foreach (var benchmark in newlyWarnedFaster)  				InsertWarned (conn' testRunSetId' benchmark' true);  			foreach (var benchmark in newlyWarnedSlower)  				InsertWarned (conn' testRunSetId' benchmark' false);  		}  	}  }  
Magic Number,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,FindRegressions,The following statement contains a magic number: for (var i = baselineWindowSize; i <= sortedRunSets.Count - testWindowSize; ++i) {  	var windowAverages = new Dictionary<string' double> ();  	var windowVariances = new Dictionary<string' double> ();  	var benchmarkCounts = new Dictionary<string' int> ();  	for (var j = 1; j <= baselineWindowSize; ++j) {  		var baselineRunSet = sortedRunSets [i - j];  		var averages = JsonMapToDictionary (baselineRunSet.GetReference<JObject> ("averages"));  		var variances = JsonMapToDictionary (baselineRunSet.GetReference<JObject> ("variances"));  		foreach (var kvp in averages) {  			var name = kvp.Key;  			var average = kvp.Value;  			var variance = variances [name];  			if (!windowAverages.ContainsKey (name)) {  				windowAverages [name] = 0.0;  				windowVariances [name] = 0.0;  				benchmarkCounts [name] = 0;  			}  			windowAverages [name] += average;  			windowVariances [name] += variance;  			benchmarkCounts [name] += 1;  		}  	}  	foreach (var kvp in benchmarkCounts) {  		var name = kvp.Key;  		var count = kvp.Value;  		windowAverages [name] /= count;  		windowVariances [name] /= count;  	}  	var testResults = new Dictionary<string' List<double>> ();  	for (var j = 0; j < testWindowSize; ++j) {  		var results = FetchResultsForRunSet (conn' sortedRunSets [i + j].GetValue<long> ("rs_id").Value);  		foreach (var kvp in results) {  			var benchmark = kvp.Key;  			if (!testResults.ContainsKey (benchmark))  				testResults.Add (benchmark' new List<double> ());  			testResults [benchmark].AddRange (kvp.Value);  		}  	}  	var testRunSet = sortedRunSets [i];  	var commitHash = testRunSet.GetReference<string> ("c_hash");  	var testRunSetId = testRunSet.GetValue<long> ("rs_id").Value;  	Console.WriteLine ("{0} {1}"' testRunSetId' commitHash);  	var fasterBenchmarks = new List<string> ();  	var slowerBenchmarks = new List<string> ();  	foreach (var kvp in benchmarkCounts) {  		var benchmark = kvp.Key;  		if (kvp.Value < baselineWindowSize)  			continue;  		if (lastWarningIndex.ContainsKey (benchmark) && lastWarningIndex [benchmark] >= i - baselineWindowSize)  			continue;  		var average = windowAverages [benchmark];  		var variance = windowVariances [benchmark];  		var stdDev = Math.Sqrt (variance);  		var lowerControlLimit = average - controlLimitSize * stdDev;  		var upperControlLimit = average + controlLimitSize * stdDev;  		if (!testResults.ContainsKey (benchmark))  			continue;  		var results = testResults [benchmark];  		if (results.Count < 5)  			continue;  		var numOutliersFaster = 0;  		var numOutliersSlower = 0;  		foreach (var elapsed in results) {  			if (elapsed < lowerControlLimit)  				++numOutliersFaster;  			if (elapsed > upperControlLimit)  				++numOutliersSlower;  		}  		if (numOutliersFaster > results.Count * 3 / 4) {  			Console.WriteLine ("+ regression in {0}: {1}/{2}"' benchmark' numOutliersFaster' results.Count);  			lastWarningIndex [benchmark] = i;  			fasterBenchmarks.Add (benchmark);  		} else if (numOutliersSlower > results.Count * 3 / 4) {  			Console.WriteLine ("- regression in {0}: {1}/{2}"' benchmark' numOutliersSlower' results.Count);  			lastWarningIndex [benchmark] = i;  			slowerBenchmarks.Add (benchmark);  		}  		/* 					else if (numOutliersFaster == 0 && numOutliersSlower == 0) { 						Console.WriteLine ("  nothing in    {0}"' name); 					} else { 						Console.WriteLine ("? suspected in  {0}: {1}-/{2}+/{3}"' name' numOutliersSlower' numOutliersFaster' runs.Count); 					} 					*/}  	if (fasterBenchmarks.Count != 0 || slowerBenchmarks.Count != 0) {  		var warnedFasterBenchmarks = new List<string> ();  		var warnedSlowerBenchmarks = new List<string> ();  		if (onlyNecessary) {  			var warningValues = new PostgresRow ();  			warningValues.Set ("runset"' NpgsqlTypes.NpgsqlDbType.Bigint' testRunSetId);  			var warnings = PostgresInterface.Select (conn' "RegressionsWarned' benchmark"' new string[] {  				"benchmark.name"'  				"faster"  			}' "benchmark.id = RegressionsWarned.benchmark and runSet = :runset"' warningValues);  			foreach (var row in warnings) {  				var benchmark = row.GetReference<string> ("benchmark.name");  				if (row.GetValue<bool> ("faster").Value)  					warnedFasterBenchmarks.Add (benchmark);  				else  					warnedSlowerBenchmarks.Add (benchmark);  			}  		}  		var previousRunSet = sortedRunSets [i - 1];  		var newlyWarnedFaster = await WarnIfNecessary (testRun' fasterBenchmarks' warnedFasterBenchmarks' true' testRunSet' previousRunSet' machineName' configName);  		var newlyWarnedSlower = await WarnIfNecessary (testRun' slowerBenchmarks' warnedSlowerBenchmarks' false' testRunSet' previousRunSet' machineName' configName);  		if (!testRun) {  			foreach (var benchmark in newlyWarnedFaster)  				InsertWarned (conn' testRunSetId' benchmark' true);  			foreach (var benchmark in newlyWarnedSlower)  				InsertWarned (conn' testRunSetId' benchmark' false);  		}  	}  }  
Magic Number,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,FindRegressions,The following statement contains a magic number: for (var i = baselineWindowSize; i <= sortedRunSets.Count - testWindowSize; ++i) {  	var windowAverages = new Dictionary<string' double> ();  	var windowVariances = new Dictionary<string' double> ();  	var benchmarkCounts = new Dictionary<string' int> ();  	for (var j = 1; j <= baselineWindowSize; ++j) {  		var baselineRunSet = sortedRunSets [i - j];  		var averages = JsonMapToDictionary (baselineRunSet.GetReference<JObject> ("averages"));  		var variances = JsonMapToDictionary (baselineRunSet.GetReference<JObject> ("variances"));  		foreach (var kvp in averages) {  			var name = kvp.Key;  			var average = kvp.Value;  			var variance = variances [name];  			if (!windowAverages.ContainsKey (name)) {  				windowAverages [name] = 0.0;  				windowVariances [name] = 0.0;  				benchmarkCounts [name] = 0;  			}  			windowAverages [name] += average;  			windowVariances [name] += variance;  			benchmarkCounts [name] += 1;  		}  	}  	foreach (var kvp in benchmarkCounts) {  		var name = kvp.Key;  		var count = kvp.Value;  		windowAverages [name] /= count;  		windowVariances [name] /= count;  	}  	var testResults = new Dictionary<string' List<double>> ();  	for (var j = 0; j < testWindowSize; ++j) {  		var results = FetchResultsForRunSet (conn' sortedRunSets [i + j].GetValue<long> ("rs_id").Value);  		foreach (var kvp in results) {  			var benchmark = kvp.Key;  			if (!testResults.ContainsKey (benchmark))  				testResults.Add (benchmark' new List<double> ());  			testResults [benchmark].AddRange (kvp.Value);  		}  	}  	var testRunSet = sortedRunSets [i];  	var commitHash = testRunSet.GetReference<string> ("c_hash");  	var testRunSetId = testRunSet.GetValue<long> ("rs_id").Value;  	Console.WriteLine ("{0} {1}"' testRunSetId' commitHash);  	var fasterBenchmarks = new List<string> ();  	var slowerBenchmarks = new List<string> ();  	foreach (var kvp in benchmarkCounts) {  		var benchmark = kvp.Key;  		if (kvp.Value < baselineWindowSize)  			continue;  		if (lastWarningIndex.ContainsKey (benchmark) && lastWarningIndex [benchmark] >= i - baselineWindowSize)  			continue;  		var average = windowAverages [benchmark];  		var variance = windowVariances [benchmark];  		var stdDev = Math.Sqrt (variance);  		var lowerControlLimit = average - controlLimitSize * stdDev;  		var upperControlLimit = average + controlLimitSize * stdDev;  		if (!testResults.ContainsKey (benchmark))  			continue;  		var results = testResults [benchmark];  		if (results.Count < 5)  			continue;  		var numOutliersFaster = 0;  		var numOutliersSlower = 0;  		foreach (var elapsed in results) {  			if (elapsed < lowerControlLimit)  				++numOutliersFaster;  			if (elapsed > upperControlLimit)  				++numOutliersSlower;  		}  		if (numOutliersFaster > results.Count * 3 / 4) {  			Console.WriteLine ("+ regression in {0}: {1}/{2}"' benchmark' numOutliersFaster' results.Count);  			lastWarningIndex [benchmark] = i;  			fasterBenchmarks.Add (benchmark);  		} else if (numOutliersSlower > results.Count * 3 / 4) {  			Console.WriteLine ("- regression in {0}: {1}/{2}"' benchmark' numOutliersSlower' results.Count);  			lastWarningIndex [benchmark] = i;  			slowerBenchmarks.Add (benchmark);  		}  		/* 					else if (numOutliersFaster == 0 && numOutliersSlower == 0) { 						Console.WriteLine ("  nothing in    {0}"' name); 					} else { 						Console.WriteLine ("? suspected in  {0}: {1}-/{2}+/{3}"' name' numOutliersSlower' numOutliersFaster' runs.Count); 					} 					*/}  	if (fasterBenchmarks.Count != 0 || slowerBenchmarks.Count != 0) {  		var warnedFasterBenchmarks = new List<string> ();  		var warnedSlowerBenchmarks = new List<string> ();  		if (onlyNecessary) {  			var warningValues = new PostgresRow ();  			warningValues.Set ("runset"' NpgsqlTypes.NpgsqlDbType.Bigint' testRunSetId);  			var warnings = PostgresInterface.Select (conn' "RegressionsWarned' benchmark"' new string[] {  				"benchmark.name"'  				"faster"  			}' "benchmark.id = RegressionsWarned.benchmark and runSet = :runset"' warningValues);  			foreach (var row in warnings) {  				var benchmark = row.GetReference<string> ("benchmark.name");  				if (row.GetValue<bool> ("faster").Value)  					warnedFasterBenchmarks.Add (benchmark);  				else  					warnedSlowerBenchmarks.Add (benchmark);  			}  		}  		var previousRunSet = sortedRunSets [i - 1];  		var newlyWarnedFaster = await WarnIfNecessary (testRun' fasterBenchmarks' warnedFasterBenchmarks' true' testRunSet' previousRunSet' machineName' configName);  		var newlyWarnedSlower = await WarnIfNecessary (testRun' slowerBenchmarks' warnedSlowerBenchmarks' false' testRunSet' previousRunSet' machineName' configName);  		if (!testRun) {  			foreach (var benchmark in newlyWarnedFaster)  				InsertWarned (conn' testRunSetId' benchmark' true);  			foreach (var benchmark in newlyWarnedSlower)  				InsertWarned (conn' testRunSetId' benchmark' false);  		}  	}  }  
Magic Number,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,FindRegressions,The following statement contains a magic number: foreach (var kvp in benchmarkCounts) {  	var benchmark = kvp.Key;  	if (kvp.Value < baselineWindowSize)  		continue;  	if (lastWarningIndex.ContainsKey (benchmark) && lastWarningIndex [benchmark] >= i - baselineWindowSize)  		continue;  	var average = windowAverages [benchmark];  	var variance = windowVariances [benchmark];  	var stdDev = Math.Sqrt (variance);  	var lowerControlLimit = average - controlLimitSize * stdDev;  	var upperControlLimit = average + controlLimitSize * stdDev;  	if (!testResults.ContainsKey (benchmark))  		continue;  	var results = testResults [benchmark];  	if (results.Count < 5)  		continue;  	var numOutliersFaster = 0;  	var numOutliersSlower = 0;  	foreach (var elapsed in results) {  		if (elapsed < lowerControlLimit)  			++numOutliersFaster;  		if (elapsed > upperControlLimit)  			++numOutliersSlower;  	}  	if (numOutliersFaster > results.Count * 3 / 4) {  		Console.WriteLine ("+ regression in {0}: {1}/{2}"' benchmark' numOutliersFaster' results.Count);  		lastWarningIndex [benchmark] = i;  		fasterBenchmarks.Add (benchmark);  	} else if (numOutliersSlower > results.Count * 3 / 4) {  		Console.WriteLine ("- regression in {0}: {1}/{2}"' benchmark' numOutliersSlower' results.Count);  		lastWarningIndex [benchmark] = i;  		slowerBenchmarks.Add (benchmark);  	}  	/* 					else if (numOutliersFaster == 0 && numOutliersSlower == 0) { 						Console.WriteLine ("  nothing in    {0}"' name); 					} else { 						Console.WriteLine ("? suspected in  {0}: {1}-/{2}+/{3}"' name' numOutliersSlower' numOutliersFaster' runs.Count); 					} 					*/}  
Magic Number,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,FindRegressions,The following statement contains a magic number: foreach (var kvp in benchmarkCounts) {  	var benchmark = kvp.Key;  	if (kvp.Value < baselineWindowSize)  		continue;  	if (lastWarningIndex.ContainsKey (benchmark) && lastWarningIndex [benchmark] >= i - baselineWindowSize)  		continue;  	var average = windowAverages [benchmark];  	var variance = windowVariances [benchmark];  	var stdDev = Math.Sqrt (variance);  	var lowerControlLimit = average - controlLimitSize * stdDev;  	var upperControlLimit = average + controlLimitSize * stdDev;  	if (!testResults.ContainsKey (benchmark))  		continue;  	var results = testResults [benchmark];  	if (results.Count < 5)  		continue;  	var numOutliersFaster = 0;  	var numOutliersSlower = 0;  	foreach (var elapsed in results) {  		if (elapsed < lowerControlLimit)  			++numOutliersFaster;  		if (elapsed > upperControlLimit)  			++numOutliersSlower;  	}  	if (numOutliersFaster > results.Count * 3 / 4) {  		Console.WriteLine ("+ regression in {0}: {1}/{2}"' benchmark' numOutliersFaster' results.Count);  		lastWarningIndex [benchmark] = i;  		fasterBenchmarks.Add (benchmark);  	} else if (numOutliersSlower > results.Count * 3 / 4) {  		Console.WriteLine ("- regression in {0}: {1}/{2}"' benchmark' numOutliersSlower' results.Count);  		lastWarningIndex [benchmark] = i;  		slowerBenchmarks.Add (benchmark);  	}  	/* 					else if (numOutliersFaster == 0 && numOutliersSlower == 0) { 						Console.WriteLine ("  nothing in    {0}"' name); 					} else { 						Console.WriteLine ("? suspected in  {0}: {1}-/{2}+/{3}"' name' numOutliersSlower' numOutliersFaster' runs.Count); 					} 					*/}  
Magic Number,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,FindRegressions,The following statement contains a magic number: foreach (var kvp in benchmarkCounts) {  	var benchmark = kvp.Key;  	if (kvp.Value < baselineWindowSize)  		continue;  	if (lastWarningIndex.ContainsKey (benchmark) && lastWarningIndex [benchmark] >= i - baselineWindowSize)  		continue;  	var average = windowAverages [benchmark];  	var variance = windowVariances [benchmark];  	var stdDev = Math.Sqrt (variance);  	var lowerControlLimit = average - controlLimitSize * stdDev;  	var upperControlLimit = average + controlLimitSize * stdDev;  	if (!testResults.ContainsKey (benchmark))  		continue;  	var results = testResults [benchmark];  	if (results.Count < 5)  		continue;  	var numOutliersFaster = 0;  	var numOutliersSlower = 0;  	foreach (var elapsed in results) {  		if (elapsed < lowerControlLimit)  			++numOutliersFaster;  		if (elapsed > upperControlLimit)  			++numOutliersSlower;  	}  	if (numOutliersFaster > results.Count * 3 / 4) {  		Console.WriteLine ("+ regression in {0}: {1}/{2}"' benchmark' numOutliersFaster' results.Count);  		lastWarningIndex [benchmark] = i;  		fasterBenchmarks.Add (benchmark);  	} else if (numOutliersSlower > results.Count * 3 / 4) {  		Console.WriteLine ("- regression in {0}: {1}/{2}"' benchmark' numOutliersSlower' results.Count);  		lastWarningIndex [benchmark] = i;  		slowerBenchmarks.Add (benchmark);  	}  	/* 					else if (numOutliersFaster == 0 && numOutliersSlower == 0) { 						Console.WriteLine ("  nothing in    {0}"' name); 					} else { 						Console.WriteLine ("? suspected in  {0}: {1}-/{2}+/{3}"' name' numOutliersSlower' numOutliersFaster' runs.Count); 					} 					*/}  
Magic Number,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,FindRegressions,The following statement contains a magic number: foreach (var kvp in benchmarkCounts) {  	var benchmark = kvp.Key;  	if (kvp.Value < baselineWindowSize)  		continue;  	if (lastWarningIndex.ContainsKey (benchmark) && lastWarningIndex [benchmark] >= i - baselineWindowSize)  		continue;  	var average = windowAverages [benchmark];  	var variance = windowVariances [benchmark];  	var stdDev = Math.Sqrt (variance);  	var lowerControlLimit = average - controlLimitSize * stdDev;  	var upperControlLimit = average + controlLimitSize * stdDev;  	if (!testResults.ContainsKey (benchmark))  		continue;  	var results = testResults [benchmark];  	if (results.Count < 5)  		continue;  	var numOutliersFaster = 0;  	var numOutliersSlower = 0;  	foreach (var elapsed in results) {  		if (elapsed < lowerControlLimit)  			++numOutliersFaster;  		if (elapsed > upperControlLimit)  			++numOutliersSlower;  	}  	if (numOutliersFaster > results.Count * 3 / 4) {  		Console.WriteLine ("+ regression in {0}: {1}/{2}"' benchmark' numOutliersFaster' results.Count);  		lastWarningIndex [benchmark] = i;  		fasterBenchmarks.Add (benchmark);  	} else if (numOutliersSlower > results.Count * 3 / 4) {  		Console.WriteLine ("- regression in {0}: {1}/{2}"' benchmark' numOutliersSlower' results.Count);  		lastWarningIndex [benchmark] = i;  		slowerBenchmarks.Add (benchmark);  	}  	/* 					else if (numOutliersFaster == 0 && numOutliersSlower == 0) { 						Console.WriteLine ("  nothing in    {0}"' name); 					} else { 						Console.WriteLine ("? suspected in  {0}: {1}-/{2}+/{3}"' name' numOutliersSlower' numOutliersFaster' runs.Count); 					} 					*/}  
Magic Number,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,FindRegressions,The following statement contains a magic number: foreach (var kvp in benchmarkCounts) {  	var benchmark = kvp.Key;  	if (kvp.Value < baselineWindowSize)  		continue;  	if (lastWarningIndex.ContainsKey (benchmark) && lastWarningIndex [benchmark] >= i - baselineWindowSize)  		continue;  	var average = windowAverages [benchmark];  	var variance = windowVariances [benchmark];  	var stdDev = Math.Sqrt (variance);  	var lowerControlLimit = average - controlLimitSize * stdDev;  	var upperControlLimit = average + controlLimitSize * stdDev;  	if (!testResults.ContainsKey (benchmark))  		continue;  	var results = testResults [benchmark];  	if (results.Count < 5)  		continue;  	var numOutliersFaster = 0;  	var numOutliersSlower = 0;  	foreach (var elapsed in results) {  		if (elapsed < lowerControlLimit)  			++numOutliersFaster;  		if (elapsed > upperControlLimit)  			++numOutliersSlower;  	}  	if (numOutliersFaster > results.Count * 3 / 4) {  		Console.WriteLine ("+ regression in {0}: {1}/{2}"' benchmark' numOutliersFaster' results.Count);  		lastWarningIndex [benchmark] = i;  		fasterBenchmarks.Add (benchmark);  	} else if (numOutliersSlower > results.Count * 3 / 4) {  		Console.WriteLine ("- regression in {0}: {1}/{2}"' benchmark' numOutliersSlower' results.Count);  		lastWarningIndex [benchmark] = i;  		slowerBenchmarks.Add (benchmark);  	}  	/* 					else if (numOutliersFaster == 0 && numOutliersSlower == 0) { 						Console.WriteLine ("  nothing in    {0}"' name); 					} else { 						Console.WriteLine ("? suspected in  {0}: {1}-/{2}+/{3}"' name' numOutliersSlower' numOutliersFaster' runs.Count); 					} 					*/}  
Magic Number,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,FindRegressions,The following statement contains a magic number: if (results.Count < 5)  	continue;  
Magic Number,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,FindRegressions,The following statement contains a magic number: if (numOutliersFaster > results.Count * 3 / 4) {  	Console.WriteLine ("+ regression in {0}: {1}/{2}"' benchmark' numOutliersFaster' results.Count);  	lastWarningIndex [benchmark] = i;  	fasterBenchmarks.Add (benchmark);  } else if (numOutliersSlower > results.Count * 3 / 4) {  	Console.WriteLine ("- regression in {0}: {1}/{2}"' benchmark' numOutliersSlower' results.Count);  	lastWarningIndex [benchmark] = i;  	slowerBenchmarks.Add (benchmark);  }  
Magic Number,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,FindRegressions,The following statement contains a magic number: if (numOutliersFaster > results.Count * 3 / 4) {  	Console.WriteLine ("+ regression in {0}: {1}/{2}"' benchmark' numOutliersFaster' results.Count);  	lastWarningIndex [benchmark] = i;  	fasterBenchmarks.Add (benchmark);  } else if (numOutliersSlower > results.Count * 3 / 4) {  	Console.WriteLine ("- regression in {0}: {1}/{2}"' benchmark' numOutliersSlower' results.Count);  	lastWarningIndex [benchmark] = i;  	slowerBenchmarks.Add (benchmark);  }  
Magic Number,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,FindRegressions,The following statement contains a magic number: if (numOutliersFaster > results.Count * 3 / 4) {  	Console.WriteLine ("+ regression in {0}: {1}/{2}"' benchmark' numOutliersFaster' results.Count);  	lastWarningIndex [benchmark] = i;  	fasterBenchmarks.Add (benchmark);  } else if (numOutliersSlower > results.Count * 3 / 4) {  	Console.WriteLine ("- regression in {0}: {1}/{2}"' benchmark' numOutliersSlower' results.Count);  	lastWarningIndex [benchmark] = i;  	slowerBenchmarks.Add (benchmark);  }  
Magic Number,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,FindRegressions,The following statement contains a magic number: if (numOutliersFaster > results.Count * 3 / 4) {  	Console.WriteLine ("+ regression in {0}: {1}/{2}"' benchmark' numOutliersFaster' results.Count);  	lastWarningIndex [benchmark] = i;  	fasterBenchmarks.Add (benchmark);  } else if (numOutliersSlower > results.Count * 3 / 4) {  	Console.WriteLine ("- regression in {0}: {1}/{2}"' benchmark' numOutliersSlower' results.Count);  	lastWarningIndex [benchmark] = i;  	slowerBenchmarks.Add (benchmark);  }  
Magic Number,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,FindRegressions,The following statement contains a magic number: if (numOutliersSlower > results.Count * 3 / 4) {  	Console.WriteLine ("- regression in {0}: {1}/{2}"' benchmark' numOutliersSlower' results.Count);  	lastWarningIndex [benchmark] = i;  	slowerBenchmarks.Add (benchmark);  }  
Magic Number,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,FindRegressions,The following statement contains a magic number: if (numOutliersSlower > results.Count * 3 / 4) {  	Console.WriteLine ("- regression in {0}: {1}/{2}"' benchmark' numOutliersSlower' results.Count);  	lastWarningIndex [benchmark] = i;  	slowerBenchmarks.Add (benchmark);  }  
Magic Number,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,Main,The following statement contains a magic number: if (args [0] == "--find-regressions") {  	var machineId = args [1];  	var configId = args [2];  	var testRun = args.Length > 3 && args [3] == "--test-run";  	var onlyNecessary = !testRun || (args.Length > 4 && args [4] == "--only-necessary");  	if (!testRun) {  		var credentials = Accredit.GetCredentials ("regressionSlack");  		SlackHooksUrl = credentials ["hooksURL"].ToString ();  	}  	var conn = PostgresInterface.Connect ();  	AsyncContext.Run (() => FindRegressions (conn' machineId' configId' testRun' onlyNecessary));  } else if (args [0] == "--delete-run-set") {  	models.HttpApi.AuthToken = Accredit.GetCredentials ("httpAPITokens") ["default"].ToString ();  	var runSetId = Int64.Parse (args [1]);  	var output = AsyncContext.Run (() => models.HttpApi.DeleteRunset (runSetId));  	Console.WriteLine ("server answer: " + output);  } else {  	UsageAndExit (false);  }  
Magic Number,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,Main,The following statement contains a magic number: if (args [0] == "--find-regressions") {  	var machineId = args [1];  	var configId = args [2];  	var testRun = args.Length > 3 && args [3] == "--test-run";  	var onlyNecessary = !testRun || (args.Length > 4 && args [4] == "--only-necessary");  	if (!testRun) {  		var credentials = Accredit.GetCredentials ("regressionSlack");  		SlackHooksUrl = credentials ["hooksURL"].ToString ();  	}  	var conn = PostgresInterface.Connect ();  	AsyncContext.Run (() => FindRegressions (conn' machineId' configId' testRun' onlyNecessary));  } else if (args [0] == "--delete-run-set") {  	models.HttpApi.AuthToken = Accredit.GetCredentials ("httpAPITokens") ["default"].ToString ();  	var runSetId = Int64.Parse (args [1]);  	var output = AsyncContext.Run (() => models.HttpApi.DeleteRunset (runSetId));  	Console.WriteLine ("server answer: " + output);  } else {  	UsageAndExit (false);  }  
Magic Number,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,Main,The following statement contains a magic number: if (args [0] == "--find-regressions") {  	var machineId = args [1];  	var configId = args [2];  	var testRun = args.Length > 3 && args [3] == "--test-run";  	var onlyNecessary = !testRun || (args.Length > 4 && args [4] == "--only-necessary");  	if (!testRun) {  		var credentials = Accredit.GetCredentials ("regressionSlack");  		SlackHooksUrl = credentials ["hooksURL"].ToString ();  	}  	var conn = PostgresInterface.Connect ();  	AsyncContext.Run (() => FindRegressions (conn' machineId' configId' testRun' onlyNecessary));  } else if (args [0] == "--delete-run-set") {  	models.HttpApi.AuthToken = Accredit.GetCredentials ("httpAPITokens") ["default"].ToString ();  	var runSetId = Int64.Parse (args [1]);  	var output = AsyncContext.Run (() => models.HttpApi.DeleteRunset (runSetId));  	Console.WriteLine ("server answer: " + output);  } else {  	UsageAndExit (false);  }  
Magic Number,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,Main,The following statement contains a magic number: if (args [0] == "--find-regressions") {  	var machineId = args [1];  	var configId = args [2];  	var testRun = args.Length > 3 && args [3] == "--test-run";  	var onlyNecessary = !testRun || (args.Length > 4 && args [4] == "--only-necessary");  	if (!testRun) {  		var credentials = Accredit.GetCredentials ("regressionSlack");  		SlackHooksUrl = credentials ["hooksURL"].ToString ();  	}  	var conn = PostgresInterface.Connect ();  	AsyncContext.Run (() => FindRegressions (conn' machineId' configId' testRun' onlyNecessary));  } else if (args [0] == "--delete-run-set") {  	models.HttpApi.AuthToken = Accredit.GetCredentials ("httpAPITokens") ["default"].ToString ();  	var runSetId = Int64.Parse (args [1]);  	var output = AsyncContext.Run (() => models.HttpApi.DeleteRunset (runSetId));  	Console.WriteLine ("server answer: " + output);  } else {  	UsageAndExit (false);  }  
Magic Number,DbTool,MainClass,D:\newReposJune17\xamarin_benchmarker\tools\dbtool\Program.cs,Main,The following statement contains a magic number: if (args [0] == "--find-regressions") {  	var machineId = args [1];  	var configId = args [2];  	var testRun = args.Length > 3 && args [3] == "--test-run";  	var onlyNecessary = !testRun || (args.Length > 4 && args [4] == "--only-necessary");  	if (!testRun) {  		var credentials = Accredit.GetCredentials ("regressionSlack");  		SlackHooksUrl = credentials ["hooksURL"].ToString ();  	}  	var conn = PostgresInterface.Connect ();  	AsyncContext.Run (() => FindRegressions (conn' machineId' configId' testRun' onlyNecessary));  } else if (args [0] == "--delete-run-set") {  	models.HttpApi.AuthToken = Accredit.GetCredentials ("httpAPITokens") ["default"].ToString ();  	var runSetId = Int64.Parse (args [1]);  	var output = AsyncContext.Run (() => models.HttpApi.DeleteRunset (runSetId));  	Console.WriteLine ("server answer: " + output);  } else {  	UsageAndExit (false);  }  
Magic Number,Benchmarker,Accredit,D:\newReposJune17\xamarin_benchmarker\tools\libaccredit\Accredit.cs,WaitForConfirmation,The following statement contains a magic number: while (true) {  	var task = query.FirstOrDefaultAsync ();  	//Console.WriteLine ("FindOrDefaultAsync CredentialsResponse");  	task.Wait ();  	var result = task.Result;  	if (result != null) {  		// FIXME: check that it's successful  		break;  	}  	Thread.Sleep (1000);  }  
Magic Number,Benchmarker,Accredit,D:\newReposJune17\xamarin_benchmarker\tools\libaccredit\Accredit.cs,WaitForConfirmation,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,Benchmarker,Helper,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\Helper.cs,RunWithRetry,The following statement contains a magic number: for (var i = 0; i < numTries - 1; ++i) {  	try {  		await run ();  		return;  	} catch (Exception exc) {  		var seconds = (i == 0) ? 10 : 60 * i;  		Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc);  		await Task.Delay (seconds * 1000);  	}  }  
Magic Number,Benchmarker,Helper,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\Helper.cs,RunWithRetry,The following statement contains a magic number: for (var i = 0; i < numTries - 1; ++i) {  	try {  		await run ();  		return;  	} catch (Exception exc) {  		var seconds = (i == 0) ? 10 : 60 * i;  		Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc);  		await Task.Delay (seconds * 1000);  	}  }  
Magic Number,Benchmarker,Helper,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\Helper.cs,RunWithRetry,The following statement contains a magic number: for (var i = 0; i < numTries - 1; ++i) {  	try {  		await run ();  		return;  	} catch (Exception exc) {  		var seconds = (i == 0) ? 10 : 60 * i;  		Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc);  		await Task.Delay (seconds * 1000);  	}  }  
Magic Number,Benchmarker,Helper,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\Helper.cs,RunWithRetry,The following statement contains a magic number: try {  	await run ();  	return;  } catch (Exception exc) {  	var seconds = (i == 0) ? 10 : 60 * i;  	Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc);  	await Task.Delay (seconds * 1000);  }  
Magic Number,Benchmarker,Helper,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\Helper.cs,RunWithRetry,The following statement contains a magic number: try {  	await run ();  	return;  } catch (Exception exc) {  	var seconds = (i == 0) ? 10 : 60 * i;  	Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc);  	await Task.Delay (seconds * 1000);  }  
Magic Number,Benchmarker,Helper,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\Helper.cs,RunWithRetry,The following statement contains a magic number: try {  	await run ();  	return;  } catch (Exception exc) {  	var seconds = (i == 0) ? 10 : 60 * i;  	Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc);  	await Task.Delay (seconds * 1000);  }  
Magic Number,Benchmarker,Helper,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\Helper.cs,RunWithRetry,The following statement contains a magic number: await Task.Delay (seconds * 1000);  
Magic Number,Benchmarker,Helper,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\Helper.cs,RunWithRetry,The following statement contains a magic number: for (var i = 0; i < numTries - 1; ++i) {  	try {  		return await run ();  	} catch (Exception exc) {  		var seconds = (i == 0) ? 10 : 60 * i;  		Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc);  		await Task.Delay (seconds * 1000);  	}  }  
Magic Number,Benchmarker,Helper,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\Helper.cs,RunWithRetry,The following statement contains a magic number: for (var i = 0; i < numTries - 1; ++i) {  	try {  		return await run ();  	} catch (Exception exc) {  		var seconds = (i == 0) ? 10 : 60 * i;  		Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc);  		await Task.Delay (seconds * 1000);  	}  }  
Magic Number,Benchmarker,Helper,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\Helper.cs,RunWithRetry,The following statement contains a magic number: for (var i = 0; i < numTries - 1; ++i) {  	try {  		return await run ();  	} catch (Exception exc) {  		var seconds = (i == 0) ? 10 : 60 * i;  		Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc);  		await Task.Delay (seconds * 1000);  	}  }  
Magic Number,Benchmarker,Helper,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\Helper.cs,RunWithRetry,The following statement contains a magic number: try {  	return await run ();  } catch (Exception exc) {  	var seconds = (i == 0) ? 10 : 60 * i;  	Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc);  	await Task.Delay (seconds * 1000);  }  
Magic Number,Benchmarker,Helper,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\Helper.cs,RunWithRetry,The following statement contains a magic number: try {  	return await run ();  } catch (Exception exc) {  	var seconds = (i == 0) ? 10 : 60 * i;  	Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc);  	await Task.Delay (seconds * 1000);  }  
Magic Number,Benchmarker,Helper,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\Helper.cs,RunWithRetry,The following statement contains a magic number: try {  	return await run ();  } catch (Exception exc) {  	var seconds = (i == 0) ? 10 : 60 * i;  	Logging.GetLogging ().ErrorFormat ("Exception when running task - sleeping {0} seconds and retrying: {1}"' seconds' exc);  	await Task.Delay (seconds * 1000);  }  
Magic Number,Benchmarker,Helper,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\Helper.cs,RunWithRetry,The following statement contains a magic number: await Task.Delay (seconds * 1000);  
Magic Number,Benchmarker,PostgresInterface,D:\newReposJune17\xamarin_benchmarker\tools\libpostgres\PostgresInterface.cs,CreateCommand,The following statement contains a magic number: cmd.CommandTimeout = 1800;  
Magic Number,Benchmarker,PostgresInterface,D:\newReposJune17\xamarin_benchmarker\tools\libpostgres\PostgresInterface.cs,RunInTransactionWithRetry,The following statement contains a magic number: for (var i = 0; i < numRetries; ++i) {  	try {  		if (conn.State != System.Data.ConnectionState.Open) {  			Console.Error.WriteLine ("Database connection isn't open - reopening.");  			conn.Open ();  		}  		var transaction = conn.BeginTransaction ();  		var result = action (conn);  		transaction.Commit ();  		return result;  	} catch (Exception e) {  		if (i + 1 < numRetries) {  			Console.Error.WriteLine ("Error: Transaction failed.  Retrying after {0} seconds.  Exception: {1}"' retryTime' e);  			Thread.Sleep (retryTime * 1000);  			retryTime *= 3;  		} else {  			Console.Error.WriteLine ("Error: Transaction failed.  Giving up.  Exception: {0}"' e);  		}  	}  }  
Magic Number,Benchmarker,PostgresInterface,D:\newReposJune17\xamarin_benchmarker\tools\libpostgres\PostgresInterface.cs,RunInTransactionWithRetry,The following statement contains a magic number: for (var i = 0; i < numRetries; ++i) {  	try {  		if (conn.State != System.Data.ConnectionState.Open) {  			Console.Error.WriteLine ("Database connection isn't open - reopening.");  			conn.Open ();  		}  		var transaction = conn.BeginTransaction ();  		var result = action (conn);  		transaction.Commit ();  		return result;  	} catch (Exception e) {  		if (i + 1 < numRetries) {  			Console.Error.WriteLine ("Error: Transaction failed.  Retrying after {0} seconds.  Exception: {1}"' retryTime' e);  			Thread.Sleep (retryTime * 1000);  			retryTime *= 3;  		} else {  			Console.Error.WriteLine ("Error: Transaction failed.  Giving up.  Exception: {0}"' e);  		}  	}  }  
Magic Number,Benchmarker,PostgresInterface,D:\newReposJune17\xamarin_benchmarker\tools\libpostgres\PostgresInterface.cs,RunInTransactionWithRetry,The following statement contains a magic number: try {  	if (conn.State != System.Data.ConnectionState.Open) {  		Console.Error.WriteLine ("Database connection isn't open - reopening.");  		conn.Open ();  	}  	var transaction = conn.BeginTransaction ();  	var result = action (conn);  	transaction.Commit ();  	return result;  } catch (Exception e) {  	if (i + 1 < numRetries) {  		Console.Error.WriteLine ("Error: Transaction failed.  Retrying after {0} seconds.  Exception: {1}"' retryTime' e);  		Thread.Sleep (retryTime * 1000);  		retryTime *= 3;  	} else {  		Console.Error.WriteLine ("Error: Transaction failed.  Giving up.  Exception: {0}"' e);  	}  }  
Magic Number,Benchmarker,PostgresInterface,D:\newReposJune17\xamarin_benchmarker\tools\libpostgres\PostgresInterface.cs,RunInTransactionWithRetry,The following statement contains a magic number: try {  	if (conn.State != System.Data.ConnectionState.Open) {  		Console.Error.WriteLine ("Database connection isn't open - reopening.");  		conn.Open ();  	}  	var transaction = conn.BeginTransaction ();  	var result = action (conn);  	transaction.Commit ();  	return result;  } catch (Exception e) {  	if (i + 1 < numRetries) {  		Console.Error.WriteLine ("Error: Transaction failed.  Retrying after {0} seconds.  Exception: {1}"' retryTime' e);  		Thread.Sleep (retryTime * 1000);  		retryTime *= 3;  	} else {  		Console.Error.WriteLine ("Error: Transaction failed.  Giving up.  Exception: {0}"' e);  	}  }  
Magic Number,Benchmarker,PostgresInterface,D:\newReposJune17\xamarin_benchmarker\tools\libpostgres\PostgresInterface.cs,RunInTransactionWithRetry,The following statement contains a magic number: if (i + 1 < numRetries) {  	Console.Error.WriteLine ("Error: Transaction failed.  Retrying after {0} seconds.  Exception: {1}"' retryTime' e);  	Thread.Sleep (retryTime * 1000);  	retryTime *= 3;  } else {  	Console.Error.WriteLine ("Error: Transaction failed.  Giving up.  Exception: {0}"' e);  }  
Magic Number,Benchmarker,PostgresInterface,D:\newReposJune17\xamarin_benchmarker\tools\libpostgres\PostgresInterface.cs,RunInTransactionWithRetry,The following statement contains a magic number: if (i + 1 < numRetries) {  	Console.Error.WriteLine ("Error: Transaction failed.  Retrying after {0} seconds.  Exception: {1}"' retryTime' e);  	Thread.Sleep (retryTime * 1000);  	retryTime *= 3;  } else {  	Console.Error.WriteLine ("Error: Transaction failed.  Giving up.  Exception: {0}"' e);  }  
Magic Number,Benchmarker,PostgresInterface,D:\newReposJune17\xamarin_benchmarker\tools\libpostgres\PostgresInterface.cs,RunInTransactionWithRetry,The following statement contains a magic number: Thread.Sleep (retryTime * 1000);  
Magic Number,Benchmarker,PostgresInterface,D:\newReposJune17\xamarin_benchmarker\tools\libpostgres\PostgresInterface.cs,RunInTransactionWithRetry,The following statement contains a magic number: retryTime *= 3;  
Magic Number,Benchmarker.Models,Config,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\Config.cs,LoadFromString,The following statement contains a magic number: if (config.Count < 1)  	config.Count = 10;  
Magic Number,Benchmarker.Models,Config,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\Config.cs,LoadFromString,The following statement contains a magic number: config.Count = 10;  
Magic Number,Benchmarker.Models,HttpApi,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\HttpApi.cs,Send,The following statement contains a magic number: using (var client = new HttpClient ()) {  	client.Timeout = TimeSpan.FromSeconds (350);  	var url = ApiUrl (path' args);  	var message = new HttpRequestMessage (new HttpMethod (method)' url);  	if (content != null)  		message.Content = content;  	client.DefaultRequestHeaders.Add ("Authorization"' "token " + AuthToken);  	var response = await client.SendAsync (message);  	var responseBody = await response.Content.ReadAsStringAsync ();  	if (!response.IsSuccessStatusCode) {  		Console.Error.WriteLine ("Error: {0} to `{1}` not successful: {2}"' method' url' responseBody);  		return null;  	}  	return responseBody;  }  
Magic Number,Benchmarker.Models,HttpApi,D:\newReposJune17\xamarin_benchmarker\tools\libdbmodel\HttpApi.cs,Send,The following statement contains a magic number: client.Timeout = TimeSpan.FromSeconds (350);  
