Implementation smell,Namespace,Class,File,Method,Description
Long Method,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,nextDoubles,The method has 103 lines of code.
Complex Method,SciMark2,CommandLine,C:\repos\xamarin_benchmarker\tests\scimark\CommandLine.cs,Main,Cyclomatic complexity of the method is 17
Complex Method,SciMark2,LU,C:\repos\xamarin_benchmarker\tests\scimark\LU.cs,factor,Cyclomatic complexity of the method is 11
Long Parameter List,SciMark2,SparseCompRow,C:\repos\xamarin_benchmarker\tests\scimark\SparseCompRow.cs,matmult,The method has 6 parameters. Parameters: y' val' row' col' x' NUM_ITERATIONS
Long Statement,SciMark2,CommandLine,C:\repos\xamarin_benchmarker\tests\scimark\CommandLine.cs,Main,The length of the statement  "				Console.WriteLine("FFT            : {0} - ({1})"' numArray[1] != 0.0 ? (object) numArray[1].ToString("F2") : (object) "ERROR' INVALID NUMERICAL RESULT!"' (object) N1); " is 167.
Long Statement,SciMark2,CommandLine,C:\repos\xamarin_benchmarker\tests\scimark\CommandLine.cs,Main,The length of the statement  "			Console.WriteLine("LU             : {1} - ({0}x{0})"' (object) N4' numArray[5] != 0.0 ? (object) numArray[5].ToString("F2") : (object) "ERROR' INVALID NUMERICAL RESULT!"); " is 171.
Long Statement,SciMark2,SOR,C:\repos\xamarin_benchmarker\tests\scimark\SOR.cs,execute,The length of the statement  "						numArray1[index2] = num1 * (numArray2[index2] + numArray3[index2] + numArray1[checked (index2 - 1)] + numArray1[checked (index2 + 1)]) + num2 * numArray1[index2]; " is 162.
Virtual Method Call from Constructor,SciMark2,Stopwatch,C:\repos\xamarin_benchmarker\tests\scimark\Stopwatch.cs,Stopwatch,The constructor "Stopwatch" calls a virtual method "reset".
Magic Number,SciMark2,CommandLine,C:\repos\xamarin_benchmarker\tests\scimark\CommandLine.cs,Main,The following statement contains a magic number: double num = 2.0;
Magic Number,SciMark2,CommandLine,C:\repos\xamarin_benchmarker\tests\scimark\CommandLine.cs,Main,The following statement contains a magic number: int N1 = 1024;
Magic Number,SciMark2,CommandLine,C:\repos\xamarin_benchmarker\tests\scimark\CommandLine.cs,Main,The following statement contains a magic number: int N2 = 100;
Magic Number,SciMark2,CommandLine,C:\repos\xamarin_benchmarker\tests\scimark\CommandLine.cs,Main,The following statement contains a magic number: int N3 = 1000;
Magic Number,SciMark2,CommandLine,C:\repos\xamarin_benchmarker\tests\scimark\CommandLine.cs,Main,The following statement contains a magic number: int nz = 5000;
Magic Number,SciMark2,CommandLine,C:\repos\xamarin_benchmarker\tests\scimark\CommandLine.cs,Main,The following statement contains a magic number: int N4 = 100;
Magic Number,SciMark2,CommandLine,C:\repos\xamarin_benchmarker\tests\scimark\CommandLine.cs,Main,The following statement contains a magic number: if (index < args.Length)  			{  				if (args[index].ToUpper().Equals("-h") || args[index].ToUpper().Equals("-help"))  				{  					Console.WriteLine("Usage: [-large] [minimum_time]");  					return;  				}  				if (args[index].ToUpper().Equals("-LARGE"))  				{  					N1 = 1048576;  					N2 = 1000;  					N3 = 100000;  					nz = 1000000;  					N4 = 1000;  					checked { ++index; }  				}  				if (args.Length > index)  					num = double.Parse(args[index]);  			}
Magic Number,SciMark2,CommandLine,C:\repos\xamarin_benchmarker\tests\scimark\CommandLine.cs,Main,The following statement contains a magic number: if (index < args.Length)  			{  				if (args[index].ToUpper().Equals("-h") || args[index].ToUpper().Equals("-help"))  				{  					Console.WriteLine("Usage: [-large] [minimum_time]");  					return;  				}  				if (args[index].ToUpper().Equals("-LARGE"))  				{  					N1 = 1048576;  					N2 = 1000;  					N3 = 100000;  					nz = 1000000;  					N4 = 1000;  					checked { ++index; }  				}  				if (args.Length > index)  					num = double.Parse(args[index]);  			}
Magic Number,SciMark2,CommandLine,C:\repos\xamarin_benchmarker\tests\scimark\CommandLine.cs,Main,The following statement contains a magic number: if (index < args.Length)  			{  				if (args[index].ToUpper().Equals("-h") || args[index].ToUpper().Equals("-help"))  				{  					Console.WriteLine("Usage: [-large] [minimum_time]");  					return;  				}  				if (args[index].ToUpper().Equals("-LARGE"))  				{  					N1 = 1048576;  					N2 = 1000;  					N3 = 100000;  					nz = 1000000;  					N4 = 1000;  					checked { ++index; }  				}  				if (args.Length > index)  					num = double.Parse(args[index]);  			}
Magic Number,SciMark2,CommandLine,C:\repos\xamarin_benchmarker\tests\scimark\CommandLine.cs,Main,The following statement contains a magic number: if (index < args.Length)  			{  				if (args[index].ToUpper().Equals("-h") || args[index].ToUpper().Equals("-help"))  				{  					Console.WriteLine("Usage: [-large] [minimum_time]");  					return;  				}  				if (args[index].ToUpper().Equals("-LARGE"))  				{  					N1 = 1048576;  					N2 = 1000;  					N3 = 100000;  					nz = 1000000;  					N4 = 1000;  					checked { ++index; }  				}  				if (args.Length > index)  					num = double.Parse(args[index]);  			}
Magic Number,SciMark2,CommandLine,C:\repos\xamarin_benchmarker\tests\scimark\CommandLine.cs,Main,The following statement contains a magic number: if (index < args.Length)  			{  				if (args[index].ToUpper().Equals("-h") || args[index].ToUpper().Equals("-help"))  				{  					Console.WriteLine("Usage: [-large] [minimum_time]");  					return;  				}  				if (args[index].ToUpper().Equals("-LARGE"))  				{  					N1 = 1048576;  					N2 = 1000;  					N3 = 100000;  					nz = 1000000;  					N4 = 1000;  					checked { ++index; }  				}  				if (args.Length > index)  					num = double.Parse(args[index]);  			}
Magic Number,SciMark2,CommandLine,C:\repos\xamarin_benchmarker\tests\scimark\CommandLine.cs,Main,The following statement contains a magic number: double[] numArray = new double[6];
Magic Number,SciMark2,CommandLine,C:\repos\xamarin_benchmarker\tests\scimark\CommandLine.cs,Main,The following statement contains a magic number: Random R = new Random(101010);
Magic Number,SciMark2,CommandLine,C:\repos\xamarin_benchmarker\tests\scimark\CommandLine.cs,Main,The following statement contains a magic number: if (benchmarks.HasFlag((Enum) CommandLine.Benchmarks.SOR))  				numArray[2] = kernel.measureSOR(N2' num' R);
Magic Number,SciMark2,CommandLine,C:\repos\xamarin_benchmarker\tests\scimark\CommandLine.cs,Main,The following statement contains a magic number: if (benchmarks.HasFlag((Enum) CommandLine.Benchmarks.MC))  				numArray[3] = kernel.measureMonteCarlo(num' R);
Magic Number,SciMark2,CommandLine,C:\repos\xamarin_benchmarker\tests\scimark\CommandLine.cs,Main,The following statement contains a magic number: if (benchmarks.HasFlag((Enum) CommandLine.Benchmarks.MM))  				numArray[4] = kernel.measureSparseMatmult(N3' nz' num' R);
Magic Number,SciMark2,CommandLine,C:\repos\xamarin_benchmarker\tests\scimark\CommandLine.cs,Main,The following statement contains a magic number: if (benchmarks.HasFlag((Enum) CommandLine.Benchmarks.LU))  				numArray[5] = kernel.measureLU(N4' num' R);
Magic Number,SciMark2,CommandLine,C:\repos\xamarin_benchmarker\tests\scimark\CommandLine.cs,Main,The following statement contains a magic number: if (benchmarks.HasFlag((Enum) CommandLine.Benchmarks.SOR))  				Console.WriteLine("SOR            : {1:F2} - ({0}x{0})"' (object) N2' (object) numArray[2]);
Magic Number,SciMark2,CommandLine,C:\repos\xamarin_benchmarker\tests\scimark\CommandLine.cs,Main,The following statement contains a magic number: if (benchmarks.HasFlag((Enum) CommandLine.Benchmarks.MC))  				Console.WriteLine("Monte Carlo    :  {0:F2}"' (object) numArray[3]);
Magic Number,SciMark2,CommandLine,C:\repos\xamarin_benchmarker\tests\scimark\CommandLine.cs,Main,The following statement contains a magic number: if (benchmarks.HasFlag((Enum) CommandLine.Benchmarks.MM))  				Console.WriteLine("Sparse MatMult : {2:F2} - (N={0}' nz={1})"' (object) N3' (object) nz' (object) numArray[4]);
Magic Number,SciMark2,CommandLine,C:\repos\xamarin_benchmarker\tests\scimark\CommandLine.cs,Main,The following statement contains a magic number: Console.WriteLine("LU             : {1} - ({0}x{0})"' (object) N4' numArray[5] != 0.0 ? (object) numArray[5].ToString("F2") : (object) "ERROR' INVALID NUMERICAL RESULT!");
Magic Number,SciMark2,CommandLine,C:\repos\xamarin_benchmarker\tests\scimark\CommandLine.cs,Main,The following statement contains a magic number: Console.WriteLine("LU             : {1} - ({0}x{0})"' (object) N4' numArray[5] != 0.0 ? (object) numArray[5].ToString("F2") : (object) "ERROR' INVALID NUMERICAL RESULT!");
Magic Number,SciMark2,FFT,C:\repos\xamarin_benchmarker\tests\scimark\FFT.cs,num_flops,The following statement contains a magic number: return (5.0 * num1 - 2.0) * num2 + 2.0 * (num1 + 1.0);
Magic Number,SciMark2,FFT,C:\repos\xamarin_benchmarker\tests\scimark\FFT.cs,num_flops,The following statement contains a magic number: return (5.0 * num1 - 2.0) * num2 + 2.0 * (num1 + 1.0);
Magic Number,SciMark2,FFT,C:\repos\xamarin_benchmarker\tests\scimark\FFT.cs,num_flops,The following statement contains a magic number: return (5.0 * num1 - 2.0) * num2 + 2.0 * (num1 + 1.0);
Magic Number,SciMark2,FFT,C:\repos\xamarin_benchmarker\tests\scimark\FFT.cs,inverse,The following statement contains a magic number: double num = 1.0 / (double) (length / 2);
Magic Number,SciMark2,FFT,C:\repos\xamarin_benchmarker\tests\scimark\FFT.cs,makeRandom,The following statement contains a magic number: int length = checked (2 * n);
Magic Number,SciMark2,FFT,C:\repos\xamarin_benchmarker\tests\scimark\FFT.cs,log2,The following statement contains a magic number: while (num2 < n)  			{  				checked { num2 *= 2; }  				checked { ++num1; }  			}
Magic Number,SciMark2,FFT,C:\repos\xamarin_benchmarker\tests\scimark\FFT.cs,transform_internal,The following statement contains a magic number: int n = data.Length / 2;
Magic Number,SciMark2,FFT,C:\repos\xamarin_benchmarker\tests\scimark\FFT.cs,transform_internal,The following statement contains a magic number: while (num2 < num1)  			{  				double num4 = 1.0;  				double num5 = 0.0;  				double a = 2.0 * (double) direction * Math.PI / (2.0 * (double) num3);  				double num6 = Math.Sin(a);  				double num7 = Math.Sin(a / 2.0);  				double num8 = 2.0 * num7 * num7;  				int num9 = 0;  				while (num9 < n)  				{  					int index1 = checked (2 * num9);  					int index2 = checked (2 * num9 + num3);  					double num10 = data[index2];  					double num11 = data[checked (index2 + 1)];  					data[index2] = data[index1] - num10;  					data[checked (index2 + 1)] = data[checked (index1 + 1)] - num11;  					data[index1] += num10;  					data[checked (index1 + 1)] += num11;  					checked { num9 += 2 * num3; }  				}  				int num12 = 1;  				while (num12 < num3)  				{  					double num10 = num4 - num6 * num5 - num8 * num4;  					double num11 = num5 + num6 * num4 - num8 * num5;  					num4 = num10;  					num5 = num11;  					int num13 = 0;  					while (num13 < n)  					{  						int index1 = checked (2 * num13 + num12);  						int index2 = checked (2 * num13 + num12 + num3);  						double num14 = data[index2];  						double num15 = data[checked (index2 + 1)];  						double num16 = num4 * num14 - num5 * num15;  						double num17 = num4 * num15 + num5 * num14;  						data[index2] = data[index1] - num16;  						data[checked (index2 + 1)] = data[checked (index1 + 1)] - num17;  						data[index1] += num16;  						data[checked (index1 + 1)] += num17;  						checked { num13 += 2 * num3; }  					}  					checked { ++num12; }  				}  				checked { ++num2; }  				checked { num3 *= 2; }  			}
Magic Number,SciMark2,FFT,C:\repos\xamarin_benchmarker\tests\scimark\FFT.cs,transform_internal,The following statement contains a magic number: while (num2 < num1)  			{  				double num4 = 1.0;  				double num5 = 0.0;  				double a = 2.0 * (double) direction * Math.PI / (2.0 * (double) num3);  				double num6 = Math.Sin(a);  				double num7 = Math.Sin(a / 2.0);  				double num8 = 2.0 * num7 * num7;  				int num9 = 0;  				while (num9 < n)  				{  					int index1 = checked (2 * num9);  					int index2 = checked (2 * num9 + num3);  					double num10 = data[index2];  					double num11 = data[checked (index2 + 1)];  					data[index2] = data[index1] - num10;  					data[checked (index2 + 1)] = data[checked (index1 + 1)] - num11;  					data[index1] += num10;  					data[checked (index1 + 1)] += num11;  					checked { num9 += 2 * num3; }  				}  				int num12 = 1;  				while (num12 < num3)  				{  					double num10 = num4 - num6 * num5 - num8 * num4;  					double num11 = num5 + num6 * num4 - num8 * num5;  					num4 = num10;  					num5 = num11;  					int num13 = 0;  					while (num13 < n)  					{  						int index1 = checked (2 * num13 + num12);  						int index2 = checked (2 * num13 + num12 + num3);  						double num14 = data[index2];  						double num15 = data[checked (index2 + 1)];  						double num16 = num4 * num14 - num5 * num15;  						double num17 = num4 * num15 + num5 * num14;  						data[index2] = data[index1] - num16;  						data[checked (index2 + 1)] = data[checked (index1 + 1)] - num17;  						data[index1] += num16;  						data[checked (index1 + 1)] += num17;  						checked { num13 += 2 * num3; }  					}  					checked { ++num12; }  				}  				checked { ++num2; }  				checked { num3 *= 2; }  			}
Magic Number,SciMark2,FFT,C:\repos\xamarin_benchmarker\tests\scimark\FFT.cs,transform_internal,The following statement contains a magic number: while (num2 < num1)  			{  				double num4 = 1.0;  				double num5 = 0.0;  				double a = 2.0 * (double) direction * Math.PI / (2.0 * (double) num3);  				double num6 = Math.Sin(a);  				double num7 = Math.Sin(a / 2.0);  				double num8 = 2.0 * num7 * num7;  				int num9 = 0;  				while (num9 < n)  				{  					int index1 = checked (2 * num9);  					int index2 = checked (2 * num9 + num3);  					double num10 = data[index2];  					double num11 = data[checked (index2 + 1)];  					data[index2] = data[index1] - num10;  					data[checked (index2 + 1)] = data[checked (index1 + 1)] - num11;  					data[index1] += num10;  					data[checked (index1 + 1)] += num11;  					checked { num9 += 2 * num3; }  				}  				int num12 = 1;  				while (num12 < num3)  				{  					double num10 = num4 - num6 * num5 - num8 * num4;  					double num11 = num5 + num6 * num4 - num8 * num5;  					num4 = num10;  					num5 = num11;  					int num13 = 0;  					while (num13 < n)  					{  						int index1 = checked (2 * num13 + num12);  						int index2 = checked (2 * num13 + num12 + num3);  						double num14 = data[index2];  						double num15 = data[checked (index2 + 1)];  						double num16 = num4 * num14 - num5 * num15;  						double num17 = num4 * num15 + num5 * num14;  						data[index2] = data[index1] - num16;  						data[checked (index2 + 1)] = data[checked (index1 + 1)] - num17;  						data[index1] += num16;  						data[checked (index1 + 1)] += num17;  						checked { num13 += 2 * num3; }  					}  					checked { ++num12; }  				}  				checked { ++num2; }  				checked { num3 *= 2; }  			}
Magic Number,SciMark2,FFT,C:\repos\xamarin_benchmarker\tests\scimark\FFT.cs,transform_internal,The following statement contains a magic number: while (num2 < num1)  			{  				double num4 = 1.0;  				double num5 = 0.0;  				double a = 2.0 * (double) direction * Math.PI / (2.0 * (double) num3);  				double num6 = Math.Sin(a);  				double num7 = Math.Sin(a / 2.0);  				double num8 = 2.0 * num7 * num7;  				int num9 = 0;  				while (num9 < n)  				{  					int index1 = checked (2 * num9);  					int index2 = checked (2 * num9 + num3);  					double num10 = data[index2];  					double num11 = data[checked (index2 + 1)];  					data[index2] = data[index1] - num10;  					data[checked (index2 + 1)] = data[checked (index1 + 1)] - num11;  					data[index1] += num10;  					data[checked (index1 + 1)] += num11;  					checked { num9 += 2 * num3; }  				}  				int num12 = 1;  				while (num12 < num3)  				{  					double num10 = num4 - num6 * num5 - num8 * num4;  					double num11 = num5 + num6 * num4 - num8 * num5;  					num4 = num10;  					num5 = num11;  					int num13 = 0;  					while (num13 < n)  					{  						int index1 = checked (2 * num13 + num12);  						int index2 = checked (2 * num13 + num12 + num3);  						double num14 = data[index2];  						double num15 = data[checked (index2 + 1)];  						double num16 = num4 * num14 - num5 * num15;  						double num17 = num4 * num15 + num5 * num14;  						data[index2] = data[index1] - num16;  						data[checked (index2 + 1)] = data[checked (index1 + 1)] - num17;  						data[index1] += num16;  						data[checked (index1 + 1)] += num17;  						checked { num13 += 2 * num3; }  					}  					checked { ++num12; }  				}  				checked { ++num2; }  				checked { num3 *= 2; }  			}
Magic Number,SciMark2,FFT,C:\repos\xamarin_benchmarker\tests\scimark\FFT.cs,transform_internal,The following statement contains a magic number: while (num2 < num1)  			{  				double num4 = 1.0;  				double num5 = 0.0;  				double a = 2.0 * (double) direction * Math.PI / (2.0 * (double) num3);  				double num6 = Math.Sin(a);  				double num7 = Math.Sin(a / 2.0);  				double num8 = 2.0 * num7 * num7;  				int num9 = 0;  				while (num9 < n)  				{  					int index1 = checked (2 * num9);  					int index2 = checked (2 * num9 + num3);  					double num10 = data[index2];  					double num11 = data[checked (index2 + 1)];  					data[index2] = data[index1] - num10;  					data[checked (index2 + 1)] = data[checked (index1 + 1)] - num11;  					data[index1] += num10;  					data[checked (index1 + 1)] += num11;  					checked { num9 += 2 * num3; }  				}  				int num12 = 1;  				while (num12 < num3)  				{  					double num10 = num4 - num6 * num5 - num8 * num4;  					double num11 = num5 + num6 * num4 - num8 * num5;  					num4 = num10;  					num5 = num11;  					int num13 = 0;  					while (num13 < n)  					{  						int index1 = checked (2 * num13 + num12);  						int index2 = checked (2 * num13 + num12 + num3);  						double num14 = data[index2];  						double num15 = data[checked (index2 + 1)];  						double num16 = num4 * num14 - num5 * num15;  						double num17 = num4 * num15 + num5 * num14;  						data[index2] = data[index1] - num16;  						data[checked (index2 + 1)] = data[checked (index1 + 1)] - num17;  						data[index1] += num16;  						data[checked (index1 + 1)] += num17;  						checked { num13 += 2 * num3; }  					}  					checked { ++num12; }  				}  				checked { ++num2; }  				checked { num3 *= 2; }  			}
Magic Number,SciMark2,FFT,C:\repos\xamarin_benchmarker\tests\scimark\FFT.cs,transform_internal,The following statement contains a magic number: while (num2 < num1)  			{  				double num4 = 1.0;  				double num5 = 0.0;  				double a = 2.0 * (double) direction * Math.PI / (2.0 * (double) num3);  				double num6 = Math.Sin(a);  				double num7 = Math.Sin(a / 2.0);  				double num8 = 2.0 * num7 * num7;  				int num9 = 0;  				while (num9 < n)  				{  					int index1 = checked (2 * num9);  					int index2 = checked (2 * num9 + num3);  					double num10 = data[index2];  					double num11 = data[checked (index2 + 1)];  					data[index2] = data[index1] - num10;  					data[checked (index2 + 1)] = data[checked (index1 + 1)] - num11;  					data[index1] += num10;  					data[checked (index1 + 1)] += num11;  					checked { num9 += 2 * num3; }  				}  				int num12 = 1;  				while (num12 < num3)  				{  					double num10 = num4 - num6 * num5 - num8 * num4;  					double num11 = num5 + num6 * num4 - num8 * num5;  					num4 = num10;  					num5 = num11;  					int num13 = 0;  					while (num13 < n)  					{  						int index1 = checked (2 * num13 + num12);  						int index2 = checked (2 * num13 + num12 + num3);  						double num14 = data[index2];  						double num15 = data[checked (index2 + 1)];  						double num16 = num4 * num14 - num5 * num15;  						double num17 = num4 * num15 + num5 * num14;  						data[index2] = data[index1] - num16;  						data[checked (index2 + 1)] = data[checked (index1 + 1)] - num17;  						data[index1] += num16;  						data[checked (index1 + 1)] += num17;  						checked { num13 += 2 * num3; }  					}  					checked { ++num12; }  				}  				checked { ++num2; }  				checked { num3 *= 2; }  			}
Magic Number,SciMark2,FFT,C:\repos\xamarin_benchmarker\tests\scimark\FFT.cs,transform_internal,The following statement contains a magic number: while (num2 < num1)  			{  				double num4 = 1.0;  				double num5 = 0.0;  				double a = 2.0 * (double) direction * Math.PI / (2.0 * (double) num3);  				double num6 = Math.Sin(a);  				double num7 = Math.Sin(a / 2.0);  				double num8 = 2.0 * num7 * num7;  				int num9 = 0;  				while (num9 < n)  				{  					int index1 = checked (2 * num9);  					int index2 = checked (2 * num9 + num3);  					double num10 = data[index2];  					double num11 = data[checked (index2 + 1)];  					data[index2] = data[index1] - num10;  					data[checked (index2 + 1)] = data[checked (index1 + 1)] - num11;  					data[index1] += num10;  					data[checked (index1 + 1)] += num11;  					checked { num9 += 2 * num3; }  				}  				int num12 = 1;  				while (num12 < num3)  				{  					double num10 = num4 - num6 * num5 - num8 * num4;  					double num11 = num5 + num6 * num4 - num8 * num5;  					num4 = num10;  					num5 = num11;  					int num13 = 0;  					while (num13 < n)  					{  						int index1 = checked (2 * num13 + num12);  						int index2 = checked (2 * num13 + num12 + num3);  						double num14 = data[index2];  						double num15 = data[checked (index2 + 1)];  						double num16 = num4 * num14 - num5 * num15;  						double num17 = num4 * num15 + num5 * num14;  						data[index2] = data[index1] - num16;  						data[checked (index2 + 1)] = data[checked (index1 + 1)] - num17;  						data[index1] += num16;  						data[checked (index1 + 1)] += num17;  						checked { num13 += 2 * num3; }  					}  					checked { ++num12; }  				}  				checked { ++num2; }  				checked { num3 *= 2; }  			}
Magic Number,SciMark2,FFT,C:\repos\xamarin_benchmarker\tests\scimark\FFT.cs,transform_internal,The following statement contains a magic number: while (num2 < num1)  			{  				double num4 = 1.0;  				double num5 = 0.0;  				double a = 2.0 * (double) direction * Math.PI / (2.0 * (double) num3);  				double num6 = Math.Sin(a);  				double num7 = Math.Sin(a / 2.0);  				double num8 = 2.0 * num7 * num7;  				int num9 = 0;  				while (num9 < n)  				{  					int index1 = checked (2 * num9);  					int index2 = checked (2 * num9 + num3);  					double num10 = data[index2];  					double num11 = data[checked (index2 + 1)];  					data[index2] = data[index1] - num10;  					data[checked (index2 + 1)] = data[checked (index1 + 1)] - num11;  					data[index1] += num10;  					data[checked (index1 + 1)] += num11;  					checked { num9 += 2 * num3; }  				}  				int num12 = 1;  				while (num12 < num3)  				{  					double num10 = num4 - num6 * num5 - num8 * num4;  					double num11 = num5 + num6 * num4 - num8 * num5;  					num4 = num10;  					num5 = num11;  					int num13 = 0;  					while (num13 < n)  					{  						int index1 = checked (2 * num13 + num12);  						int index2 = checked (2 * num13 + num12 + num3);  						double num14 = data[index2];  						double num15 = data[checked (index2 + 1)];  						double num16 = num4 * num14 - num5 * num15;  						double num17 = num4 * num15 + num5 * num14;  						data[index2] = data[index1] - num16;  						data[checked (index2 + 1)] = data[checked (index1 + 1)] - num17;  						data[index1] += num16;  						data[checked (index1 + 1)] += num17;  						checked { num13 += 2 * num3; }  					}  					checked { ++num12; }  				}  				checked { ++num2; }  				checked { num3 *= 2; }  			}
Magic Number,SciMark2,FFT,C:\repos\xamarin_benchmarker\tests\scimark\FFT.cs,transform_internal,The following statement contains a magic number: while (num2 < num1)  			{  				double num4 = 1.0;  				double num5 = 0.0;  				double a = 2.0 * (double) direction * Math.PI / (2.0 * (double) num3);  				double num6 = Math.Sin(a);  				double num7 = Math.Sin(a / 2.0);  				double num8 = 2.0 * num7 * num7;  				int num9 = 0;  				while (num9 < n)  				{  					int index1 = checked (2 * num9);  					int index2 = checked (2 * num9 + num3);  					double num10 = data[index2];  					double num11 = data[checked (index2 + 1)];  					data[index2] = data[index1] - num10;  					data[checked (index2 + 1)] = data[checked (index1 + 1)] - num11;  					data[index1] += num10;  					data[checked (index1 + 1)] += num11;  					checked { num9 += 2 * num3; }  				}  				int num12 = 1;  				while (num12 < num3)  				{  					double num10 = num4 - num6 * num5 - num8 * num4;  					double num11 = num5 + num6 * num4 - num8 * num5;  					num4 = num10;  					num5 = num11;  					int num13 = 0;  					while (num13 < n)  					{  						int index1 = checked (2 * num13 + num12);  						int index2 = checked (2 * num13 + num12 + num3);  						double num14 = data[index2];  						double num15 = data[checked (index2 + 1)];  						double num16 = num4 * num14 - num5 * num15;  						double num17 = num4 * num15 + num5 * num14;  						data[index2] = data[index1] - num16;  						data[checked (index2 + 1)] = data[checked (index1 + 1)] - num17;  						data[index1] += num16;  						data[checked (index1 + 1)] += num17;  						checked { num13 += 2 * num3; }  					}  					checked { ++num12; }  				}  				checked { ++num2; }  				checked { num3 *= 2; }  			}
Magic Number,SciMark2,FFT,C:\repos\xamarin_benchmarker\tests\scimark\FFT.cs,transform_internal,The following statement contains a magic number: while (num2 < num1)  			{  				double num4 = 1.0;  				double num5 = 0.0;  				double a = 2.0 * (double) direction * Math.PI / (2.0 * (double) num3);  				double num6 = Math.Sin(a);  				double num7 = Math.Sin(a / 2.0);  				double num8 = 2.0 * num7 * num7;  				int num9 = 0;  				while (num9 < n)  				{  					int index1 = checked (2 * num9);  					int index2 = checked (2 * num9 + num3);  					double num10 = data[index2];  					double num11 = data[checked (index2 + 1)];  					data[index2] = data[index1] - num10;  					data[checked (index2 + 1)] = data[checked (index1 + 1)] - num11;  					data[index1] += num10;  					data[checked (index1 + 1)] += num11;  					checked { num9 += 2 * num3; }  				}  				int num12 = 1;  				while (num12 < num3)  				{  					double num10 = num4 - num6 * num5 - num8 * num4;  					double num11 = num5 + num6 * num4 - num8 * num5;  					num4 = num10;  					num5 = num11;  					int num13 = 0;  					while (num13 < n)  					{  						int index1 = checked (2 * num13 + num12);  						int index2 = checked (2 * num13 + num12 + num3);  						double num14 = data[index2];  						double num15 = data[checked (index2 + 1)];  						double num16 = num4 * num14 - num5 * num15;  						double num17 = num4 * num15 + num5 * num14;  						data[index2] = data[index1] - num16;  						data[checked (index2 + 1)] = data[checked (index1 + 1)] - num17;  						data[index1] += num16;  						data[checked (index1 + 1)] += num17;  						checked { num13 += 2 * num3; }  					}  					checked { ++num12; }  				}  				checked { ++num2; }  				checked { num3 *= 2; }  			}
Magic Number,SciMark2,FFT,C:\repos\xamarin_benchmarker\tests\scimark\FFT.cs,transform_internal,The following statement contains a magic number: while (num2 < num1)  			{  				double num4 = 1.0;  				double num5 = 0.0;  				double a = 2.0 * (double) direction * Math.PI / (2.0 * (double) num3);  				double num6 = Math.Sin(a);  				double num7 = Math.Sin(a / 2.0);  				double num8 = 2.0 * num7 * num7;  				int num9 = 0;  				while (num9 < n)  				{  					int index1 = checked (2 * num9);  					int index2 = checked (2 * num9 + num3);  					double num10 = data[index2];  					double num11 = data[checked (index2 + 1)];  					data[index2] = data[index1] - num10;  					data[checked (index2 + 1)] = data[checked (index1 + 1)] - num11;  					data[index1] += num10;  					data[checked (index1 + 1)] += num11;  					checked { num9 += 2 * num3; }  				}  				int num12 = 1;  				while (num12 < num3)  				{  					double num10 = num4 - num6 * num5 - num8 * num4;  					double num11 = num5 + num6 * num4 - num8 * num5;  					num4 = num10;  					num5 = num11;  					int num13 = 0;  					while (num13 < n)  					{  						int index1 = checked (2 * num13 + num12);  						int index2 = checked (2 * num13 + num12 + num3);  						double num14 = data[index2];  						double num15 = data[checked (index2 + 1)];  						double num16 = num4 * num14 - num5 * num15;  						double num17 = num4 * num15 + num5 * num14;  						data[index2] = data[index1] - num16;  						data[checked (index2 + 1)] = data[checked (index1 + 1)] - num17;  						data[index1] += num16;  						data[checked (index1 + 1)] += num17;  						checked { num13 += 2 * num3; }  					}  					checked { ++num12; }  				}  				checked { ++num2; }  				checked { num3 *= 2; }  			}
Magic Number,SciMark2,FFT,C:\repos\xamarin_benchmarker\tests\scimark\FFT.cs,bitreverse,The following statement contains a magic number: int num1 = data.Length / 2;
Magic Number,SciMark2,kernel,C:\repos\xamarin_benchmarker\tests\scimark\kernel.cs,measureFFT,The following statement contains a magic number: double[] data = kernel.RandomVector(checked (2 * N)' R);
Magic Number,SciMark2,kernel,C:\repos\xamarin_benchmarker\tests\scimark\kernel.cs,measureFFT,The following statement contains a magic number: long num1 = 20000;
Magic Number,SciMark2,kernel,C:\repos\xamarin_benchmarker\tests\scimark\kernel.cs,measureFFT,The following statement contains a magic number: return FFT.num_flops(N) * (double) num1 / stopwatch.read() * 1E-06;
Magic Number,SciMark2,kernel,C:\repos\xamarin_benchmarker\tests\scimark\kernel.cs,measureSOR,The following statement contains a magic number: int num_iterations = 40000;
Magic Number,SciMark2,kernel,C:\repos\xamarin_benchmarker\tests\scimark\kernel.cs,measureSOR,The following statement contains a magic number: SOR.execute(1.25' G' num_iterations);
Magic Number,SciMark2,kernel,C:\repos\xamarin_benchmarker\tests\scimark\kernel.cs,measureSOR,The following statement contains a magic number: return SOR.num_flops(N' N' num_iterations) / stopwatch.read() * 1E-06;
Magic Number,SciMark2,kernel,C:\repos\xamarin_benchmarker\tests\scimark\kernel.cs,measureMonteCarlo,The following statement contains a magic number: int Num_samples = 40000000;
Magic Number,SciMark2,kernel,C:\repos\xamarin_benchmarker\tests\scimark\kernel.cs,measureMonteCarlo,The following statement contains a magic number: return MonteCarlo.num_flops(Num_samples) / stopwatch.read() * 1E-06;
Magic Number,SciMark2,kernel,C:\repos\xamarin_benchmarker\tests\scimark\kernel.cs,measureSparseMatmult,The following statement contains a magic number: int num5 = 150000;
Magic Number,SciMark2,kernel,C:\repos\xamarin_benchmarker\tests\scimark\kernel.cs,measureSparseMatmult,The following statement contains a magic number: return SparseCompRow.num_flops(N' nz' num5) / stopwatch.read() * 1E-06;
Magic Number,SciMark2,kernel,C:\repos\xamarin_benchmarker\tests\scimark\kernel.cs,measureLU,The following statement contains a magic number: int num1 = 4095;
Magic Number,SciMark2,kernel,C:\repos\xamarin_benchmarker\tests\scimark\kernel.cs,measureLU,The following statement contains a magic number: return LU.num_flops(N) * (double) num1 / stopwatch.read() * 1E-06;
Magic Number,SciMark2,kernel,C:\repos\xamarin_benchmarker\tests\scimark\kernel.cs,CopyMatrix,The following statement contains a magic number: int num = length2 & 3;
Magic Number,SciMark2,kernel,C:\repos\xamarin_benchmarker\tests\scimark\kernel.cs,CopyMatrix,The following statement contains a magic number: while (index1 < length1)  			{  				double[] numArray1 = B[index1];  				double[] numArray2 = A[index1];  				int index2 = 0;  				while (index2 < num)  				{  					numArray1[index2] = numArray2[index2];  					checked { ++index2; }  				}  				int index3 = num;  				while (index3 < length2)  				{  					numArray1[index3] = numArray2[index3];  					numArray1[checked (index3 + 1)] = numArray2[checked (index3 + 1)];  					numArray1[checked (index3 + 2)] = numArray2[checked (index3 + 2)];  					numArray1[checked (index3 + 3)] = numArray2[checked (index3 + 3)];  					checked { index3 += 4; }  				}  				checked { ++index1; }  			}
Magic Number,SciMark2,kernel,C:\repos\xamarin_benchmarker\tests\scimark\kernel.cs,CopyMatrix,The following statement contains a magic number: while (index1 < length1)  			{  				double[] numArray1 = B[index1];  				double[] numArray2 = A[index1];  				int index2 = 0;  				while (index2 < num)  				{  					numArray1[index2] = numArray2[index2];  					checked { ++index2; }  				}  				int index3 = num;  				while (index3 < length2)  				{  					numArray1[index3] = numArray2[index3];  					numArray1[checked (index3 + 1)] = numArray2[checked (index3 + 1)];  					numArray1[checked (index3 + 2)] = numArray2[checked (index3 + 2)];  					numArray1[checked (index3 + 3)] = numArray2[checked (index3 + 3)];  					checked { index3 += 4; }  				}  				checked { ++index1; }  			}
Magic Number,SciMark2,kernel,C:\repos\xamarin_benchmarker\tests\scimark\kernel.cs,CopyMatrix,The following statement contains a magic number: while (index1 < length1)  			{  				double[] numArray1 = B[index1];  				double[] numArray2 = A[index1];  				int index2 = 0;  				while (index2 < num)  				{  					numArray1[index2] = numArray2[index2];  					checked { ++index2; }  				}  				int index3 = num;  				while (index3 < length2)  				{  					numArray1[index3] = numArray2[index3];  					numArray1[checked (index3 + 1)] = numArray2[checked (index3 + 1)];  					numArray1[checked (index3 + 2)] = numArray2[checked (index3 + 2)];  					numArray1[checked (index3 + 3)] = numArray2[checked (index3 + 3)];  					checked { index3 += 4; }  				}  				checked { ++index1; }  			}
Magic Number,SciMark2,kernel,C:\repos\xamarin_benchmarker\tests\scimark\kernel.cs,CopyMatrix,The following statement contains a magic number: while (index1 < length1)  			{  				double[] numArray1 = B[index1];  				double[] numArray2 = A[index1];  				int index2 = 0;  				while (index2 < num)  				{  					numArray1[index2] = numArray2[index2];  					checked { ++index2; }  				}  				int index3 = num;  				while (index3 < length2)  				{  					numArray1[index3] = numArray2[index3];  					numArray1[checked (index3 + 1)] = numArray2[checked (index3 + 1)];  					numArray1[checked (index3 + 2)] = numArray2[checked (index3 + 2)];  					numArray1[checked (index3 + 3)] = numArray2[checked (index3 + 3)];  					checked { index3 += 4; }  				}  				checked { ++index1; }  			}
Magic Number,SciMark2,kernel,C:\repos\xamarin_benchmarker\tests\scimark\kernel.cs,CopyMatrix,The following statement contains a magic number: while (index1 < length1)  			{  				double[] numArray1 = B[index1];  				double[] numArray2 = A[index1];  				int index2 = 0;  				while (index2 < num)  				{  					numArray1[index2] = numArray2[index2];  					checked { ++index2; }  				}  				int index3 = num;  				while (index3 < length2)  				{  					numArray1[index3] = numArray2[index3];  					numArray1[checked (index3 + 1)] = numArray2[checked (index3 + 1)];  					numArray1[checked (index3 + 2)] = numArray2[checked (index3 + 2)];  					numArray1[checked (index3 + 3)] = numArray2[checked (index3 + 3)];  					checked { index3 += 4; }  				}  				checked { ++index1; }  			}
Magic Number,SciMark2,LU,C:\repos\xamarin_benchmarker\tests\scimark\LU.cs,num_flops,The following statement contains a magic number: return 2.0 * num * num * num / 3.0;
Magic Number,SciMark2,LU,C:\repos\xamarin_benchmarker\tests\scimark\LU.cs,num_flops,The following statement contains a magic number: return 2.0 * num * num * num / 3.0;
Magic Number,SciMark2,MonteCarlo,C:\repos\xamarin_benchmarker\tests\scimark\MonteCarlo.cs,num_flops,The following statement contains a magic number: return (double) Num_samples * 4.0;
Magic Number,SciMark2,MonteCarlo,C:\repos\xamarin_benchmarker\tests\scimark\MonteCarlo.cs,integrate,The following statement contains a magic number: Random random = new Random(113);
Magic Number,SciMark2,MonteCarlo,C:\repos\xamarin_benchmarker\tests\scimark\MonteCarlo.cs,integrate,The following statement contains a magic number: return (double) num1 / (double) Num_samples * 4.0;
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,nextDouble,The following statement contains a magic number: if (this.i == 0)  				this.i = 16;  			else  				checked { --this.i; }
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,nextDouble,The following statement contains a magic number: if (this.j == 0)  				this.j = 16;  			else  				checked { --this.j; }
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,nextDoubles,The following statement contains a magic number: int num1 = length & 3;
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,nextDoubles,The following statement contains a magic number: if (this.haveRange)  			{  				int index = 0;  				while (index < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index] = this.left + this.dm1 * (double) num2 * this.width;  					checked { ++index; }  				}  			}  			else  			{  				int index1 = 0;  				while (index1 < num1)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index1] = this.dm1 * (double) num2;  					checked { ++index1; }  				}  				int index2 = num1;  				while (index2 < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index2] = this.dm1 * (double) num2;  					int num3 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num3 < 0)  						checked { num3 += this.m1; }  					this.m[this.j] = num3;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 1)] = this.dm1 * (double) num3;  					int num4 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num4 < 0)  						checked { num4 += this.m1; }  					this.m[this.j] = num4;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 2)] = this.dm1 * (double) num4;  					int num5 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num5 < 0)  						checked { num5 += this.m1; }  					this.m[this.j] = num5;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 3)] = this.dm1 * (double) num5;  					checked { index2 += 4; }  				}  			}
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,nextDoubles,The following statement contains a magic number: if (this.haveRange)  			{  				int index = 0;  				while (index < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index] = this.left + this.dm1 * (double) num2 * this.width;  					checked { ++index; }  				}  			}  			else  			{  				int index1 = 0;  				while (index1 < num1)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index1] = this.dm1 * (double) num2;  					checked { ++index1; }  				}  				int index2 = num1;  				while (index2 < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index2] = this.dm1 * (double) num2;  					int num3 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num3 < 0)  						checked { num3 += this.m1; }  					this.m[this.j] = num3;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 1)] = this.dm1 * (double) num3;  					int num4 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num4 < 0)  						checked { num4 += this.m1; }  					this.m[this.j] = num4;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 2)] = this.dm1 * (double) num4;  					int num5 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num5 < 0)  						checked { num5 += this.m1; }  					this.m[this.j] = num5;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 3)] = this.dm1 * (double) num5;  					checked { index2 += 4; }  				}  			}
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,nextDoubles,The following statement contains a magic number: if (this.haveRange)  			{  				int index = 0;  				while (index < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index] = this.left + this.dm1 * (double) num2 * this.width;  					checked { ++index; }  				}  			}  			else  			{  				int index1 = 0;  				while (index1 < num1)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index1] = this.dm1 * (double) num2;  					checked { ++index1; }  				}  				int index2 = num1;  				while (index2 < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index2] = this.dm1 * (double) num2;  					int num3 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num3 < 0)  						checked { num3 += this.m1; }  					this.m[this.j] = num3;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 1)] = this.dm1 * (double) num3;  					int num4 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num4 < 0)  						checked { num4 += this.m1; }  					this.m[this.j] = num4;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 2)] = this.dm1 * (double) num4;  					int num5 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num5 < 0)  						checked { num5 += this.m1; }  					this.m[this.j] = num5;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 3)] = this.dm1 * (double) num5;  					checked { index2 += 4; }  				}  			}
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,nextDoubles,The following statement contains a magic number: if (this.haveRange)  			{  				int index = 0;  				while (index < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index] = this.left + this.dm1 * (double) num2 * this.width;  					checked { ++index; }  				}  			}  			else  			{  				int index1 = 0;  				while (index1 < num1)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index1] = this.dm1 * (double) num2;  					checked { ++index1; }  				}  				int index2 = num1;  				while (index2 < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index2] = this.dm1 * (double) num2;  					int num3 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num3 < 0)  						checked { num3 += this.m1; }  					this.m[this.j] = num3;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 1)] = this.dm1 * (double) num3;  					int num4 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num4 < 0)  						checked { num4 += this.m1; }  					this.m[this.j] = num4;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 2)] = this.dm1 * (double) num4;  					int num5 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num5 < 0)  						checked { num5 += this.m1; }  					this.m[this.j] = num5;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 3)] = this.dm1 * (double) num5;  					checked { index2 += 4; }  				}  			}
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,nextDoubles,The following statement contains a magic number: if (this.haveRange)  			{  				int index = 0;  				while (index < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index] = this.left + this.dm1 * (double) num2 * this.width;  					checked { ++index; }  				}  			}  			else  			{  				int index1 = 0;  				while (index1 < num1)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index1] = this.dm1 * (double) num2;  					checked { ++index1; }  				}  				int index2 = num1;  				while (index2 < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index2] = this.dm1 * (double) num2;  					int num3 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num3 < 0)  						checked { num3 += this.m1; }  					this.m[this.j] = num3;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 1)] = this.dm1 * (double) num3;  					int num4 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num4 < 0)  						checked { num4 += this.m1; }  					this.m[this.j] = num4;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 2)] = this.dm1 * (double) num4;  					int num5 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num5 < 0)  						checked { num5 += this.m1; }  					this.m[this.j] = num5;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 3)] = this.dm1 * (double) num5;  					checked { index2 += 4; }  				}  			}
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,nextDoubles,The following statement contains a magic number: if (this.haveRange)  			{  				int index = 0;  				while (index < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index] = this.left + this.dm1 * (double) num2 * this.width;  					checked { ++index; }  				}  			}  			else  			{  				int index1 = 0;  				while (index1 < num1)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index1] = this.dm1 * (double) num2;  					checked { ++index1; }  				}  				int index2 = num1;  				while (index2 < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index2] = this.dm1 * (double) num2;  					int num3 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num3 < 0)  						checked { num3 += this.m1; }  					this.m[this.j] = num3;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 1)] = this.dm1 * (double) num3;  					int num4 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num4 < 0)  						checked { num4 += this.m1; }  					this.m[this.j] = num4;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 2)] = this.dm1 * (double) num4;  					int num5 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num5 < 0)  						checked { num5 += this.m1; }  					this.m[this.j] = num5;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 3)] = this.dm1 * (double) num5;  					checked { index2 += 4; }  				}  			}
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,nextDoubles,The following statement contains a magic number: if (this.haveRange)  			{  				int index = 0;  				while (index < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index] = this.left + this.dm1 * (double) num2 * this.width;  					checked { ++index; }  				}  			}  			else  			{  				int index1 = 0;  				while (index1 < num1)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index1] = this.dm1 * (double) num2;  					checked { ++index1; }  				}  				int index2 = num1;  				while (index2 < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index2] = this.dm1 * (double) num2;  					int num3 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num3 < 0)  						checked { num3 += this.m1; }  					this.m[this.j] = num3;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 1)] = this.dm1 * (double) num3;  					int num4 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num4 < 0)  						checked { num4 += this.m1; }  					this.m[this.j] = num4;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 2)] = this.dm1 * (double) num4;  					int num5 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num5 < 0)  						checked { num5 += this.m1; }  					this.m[this.j] = num5;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 3)] = this.dm1 * (double) num5;  					checked { index2 += 4; }  				}  			}
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,nextDoubles,The following statement contains a magic number: if (this.haveRange)  			{  				int index = 0;  				while (index < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index] = this.left + this.dm1 * (double) num2 * this.width;  					checked { ++index; }  				}  			}  			else  			{  				int index1 = 0;  				while (index1 < num1)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index1] = this.dm1 * (double) num2;  					checked { ++index1; }  				}  				int index2 = num1;  				while (index2 < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index2] = this.dm1 * (double) num2;  					int num3 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num3 < 0)  						checked { num3 += this.m1; }  					this.m[this.j] = num3;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 1)] = this.dm1 * (double) num3;  					int num4 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num4 < 0)  						checked { num4 += this.m1; }  					this.m[this.j] = num4;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 2)] = this.dm1 * (double) num4;  					int num5 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num5 < 0)  						checked { num5 += this.m1; }  					this.m[this.j] = num5;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 3)] = this.dm1 * (double) num5;  					checked { index2 += 4; }  				}  			}
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,nextDoubles,The following statement contains a magic number: if (this.haveRange)  			{  				int index = 0;  				while (index < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index] = this.left + this.dm1 * (double) num2 * this.width;  					checked { ++index; }  				}  			}  			else  			{  				int index1 = 0;  				while (index1 < num1)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index1] = this.dm1 * (double) num2;  					checked { ++index1; }  				}  				int index2 = num1;  				while (index2 < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index2] = this.dm1 * (double) num2;  					int num3 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num3 < 0)  						checked { num3 += this.m1; }  					this.m[this.j] = num3;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 1)] = this.dm1 * (double) num3;  					int num4 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num4 < 0)  						checked { num4 += this.m1; }  					this.m[this.j] = num4;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 2)] = this.dm1 * (double) num4;  					int num5 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num5 < 0)  						checked { num5 += this.m1; }  					this.m[this.j] = num5;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 3)] = this.dm1 * (double) num5;  					checked { index2 += 4; }  				}  			}
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,nextDoubles,The following statement contains a magic number: if (this.haveRange)  			{  				int index = 0;  				while (index < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index] = this.left + this.dm1 * (double) num2 * this.width;  					checked { ++index; }  				}  			}  			else  			{  				int index1 = 0;  				while (index1 < num1)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index1] = this.dm1 * (double) num2;  					checked { ++index1; }  				}  				int index2 = num1;  				while (index2 < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index2] = this.dm1 * (double) num2;  					int num3 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num3 < 0)  						checked { num3 += this.m1; }  					this.m[this.j] = num3;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 1)] = this.dm1 * (double) num3;  					int num4 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num4 < 0)  						checked { num4 += this.m1; }  					this.m[this.j] = num4;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 2)] = this.dm1 * (double) num4;  					int num5 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num5 < 0)  						checked { num5 += this.m1; }  					this.m[this.j] = num5;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 3)] = this.dm1 * (double) num5;  					checked { index2 += 4; }  				}  			}
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,nextDoubles,The following statement contains a magic number: if (this.haveRange)  			{  				int index = 0;  				while (index < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index] = this.left + this.dm1 * (double) num2 * this.width;  					checked { ++index; }  				}  			}  			else  			{  				int index1 = 0;  				while (index1 < num1)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index1] = this.dm1 * (double) num2;  					checked { ++index1; }  				}  				int index2 = num1;  				while (index2 < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index2] = this.dm1 * (double) num2;  					int num3 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num3 < 0)  						checked { num3 += this.m1; }  					this.m[this.j] = num3;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 1)] = this.dm1 * (double) num3;  					int num4 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num4 < 0)  						checked { num4 += this.m1; }  					this.m[this.j] = num4;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 2)] = this.dm1 * (double) num4;  					int num5 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num5 < 0)  						checked { num5 += this.m1; }  					this.m[this.j] = num5;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 3)] = this.dm1 * (double) num5;  					checked { index2 += 4; }  				}  			}
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,nextDoubles,The following statement contains a magic number: if (this.haveRange)  			{  				int index = 0;  				while (index < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index] = this.left + this.dm1 * (double) num2 * this.width;  					checked { ++index; }  				}  			}  			else  			{  				int index1 = 0;  				while (index1 < num1)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index1] = this.dm1 * (double) num2;  					checked { ++index1; }  				}  				int index2 = num1;  				while (index2 < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index2] = this.dm1 * (double) num2;  					int num3 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num3 < 0)  						checked { num3 += this.m1; }  					this.m[this.j] = num3;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 1)] = this.dm1 * (double) num3;  					int num4 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num4 < 0)  						checked { num4 += this.m1; }  					this.m[this.j] = num4;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 2)] = this.dm1 * (double) num4;  					int num5 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num5 < 0)  						checked { num5 += this.m1; }  					this.m[this.j] = num5;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 3)] = this.dm1 * (double) num5;  					checked { index2 += 4; }  				}  			}
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,nextDoubles,The following statement contains a magic number: if (this.haveRange)  			{  				int index = 0;  				while (index < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index] = this.left + this.dm1 * (double) num2 * this.width;  					checked { ++index; }  				}  			}  			else  			{  				int index1 = 0;  				while (index1 < num1)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index1] = this.dm1 * (double) num2;  					checked { ++index1; }  				}  				int index2 = num1;  				while (index2 < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index2] = this.dm1 * (double) num2;  					int num3 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num3 < 0)  						checked { num3 += this.m1; }  					this.m[this.j] = num3;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 1)] = this.dm1 * (double) num3;  					int num4 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num4 < 0)  						checked { num4 += this.m1; }  					this.m[this.j] = num4;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 2)] = this.dm1 * (double) num4;  					int num5 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num5 < 0)  						checked { num5 += this.m1; }  					this.m[this.j] = num5;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 3)] = this.dm1 * (double) num5;  					checked { index2 += 4; }  				}  			}
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,nextDoubles,The following statement contains a magic number: if (this.haveRange)  			{  				int index = 0;  				while (index < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index] = this.left + this.dm1 * (double) num2 * this.width;  					checked { ++index; }  				}  			}  			else  			{  				int index1 = 0;  				while (index1 < num1)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index1] = this.dm1 * (double) num2;  					checked { ++index1; }  				}  				int index2 = num1;  				while (index2 < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index2] = this.dm1 * (double) num2;  					int num3 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num3 < 0)  						checked { num3 += this.m1; }  					this.m[this.j] = num3;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 1)] = this.dm1 * (double) num3;  					int num4 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num4 < 0)  						checked { num4 += this.m1; }  					this.m[this.j] = num4;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 2)] = this.dm1 * (double) num4;  					int num5 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num5 < 0)  						checked { num5 += this.m1; }  					this.m[this.j] = num5;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 3)] = this.dm1 * (double) num5;  					checked { index2 += 4; }  				}  			}
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,nextDoubles,The following statement contains a magic number: if (this.haveRange)  			{  				int index = 0;  				while (index < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index] = this.left + this.dm1 * (double) num2 * this.width;  					checked { ++index; }  				}  			}  			else  			{  				int index1 = 0;  				while (index1 < num1)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index1] = this.dm1 * (double) num2;  					checked { ++index1; }  				}  				int index2 = num1;  				while (index2 < length)  				{  					int num2 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num2 < 0)  						checked { num2 += this.m1; }  					this.m[this.j] = num2;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[index2] = this.dm1 * (double) num2;  					int num3 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num3 < 0)  						checked { num3 += this.m1; }  					this.m[this.j] = num3;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 1)] = this.dm1 * (double) num3;  					int num4 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num4 < 0)  						checked { num4 += this.m1; }  					this.m[this.j] = num4;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 2)] = this.dm1 * (double) num4;  					int num5 = checked (this.m[this.i] - this.m[this.j]);  					if (this.i == 0)  						this.i = 16;  					else  						checked { --this.i; }  					if (num5 < 0)  						checked { num5 += this.m1; }  					this.m[this.j] = num5;  					if (this.j == 0)  						this.j = 16;  					else  						checked { --this.j; }  					x[checked (index2 + 3)] = this.dm1 * (double) num5;  					checked { index2 += 4; }  				}  			}
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,initialize,The following statement contains a magic number: this.m2 = 65536;
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,initialize,The following statement contains a magic number: this.m = new int[17];
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,initialize,The following statement contains a magic number: if (num1 % 2 == 0)  				checked { --num1; }
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,initialize,The following statement contains a magic number: int num2 = 9069 % this.m2;
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,initialize,The following statement contains a magic number: int num3 = 9069 / this.m2;
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,initialize,The following statement contains a magic number: while (index < 17)  			{  				int num6 = checked (num4 * num2);  				num5 = checked (unchecked (num6 / this.m2) + num4 * num3 + num5 * num2) % (this.m2 / 2);  				num4 = num6 % this.m2;  				this.m[index] = checked (num4 + this.m2 * num5);  				checked { ++index; }  			}
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,initialize,The following statement contains a magic number: while (index < 17)  			{  				int num6 = checked (num4 * num2);  				num5 = checked (unchecked (num6 / this.m2) + num4 * num3 + num5 * num2) % (this.m2 / 2);  				num4 = num6 % this.m2;  				this.m[index] = checked (num4 + this.m2 * num5);  				checked { ++index; }  			}
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,initialize,The following statement contains a magic number: this.i = 4;
Magic Number,SciMark2,Random,C:\repos\xamarin_benchmarker\tests\scimark\Random.cs,initialize,The following statement contains a magic number: this.j = 16;
Magic Number,SciMark2,SOR,C:\repos\xamarin_benchmarker\tests\scimark\SOR.cs,num_flops,The following statement contains a magic number: return ((double) M - 1.0) * ((double) N - 1.0) * (double) num_iterations * 6.0;
Magic Number,SciMark2,SOR,C:\repos\xamarin_benchmarker\tests\scimark\SOR.cs,execute,The following statement contains a magic number: double num1 = omega * 0.25;
Magic Number,SciMark2,SparseCompRow,C:\repos\xamarin_benchmarker\tests\scimark\SparseCompRow.cs,num_flops,The following statement contains a magic number: return (double) checked (unchecked (nz / N) * N) * 2.0 * (double) num_iterations;
Magic Number,SciMark2,Stopwatch,C:\repos\xamarin_benchmarker\tests\scimark\Stopwatch.cs,seconds,The following statement contains a magic number: return (double) DateTime.Now.Ticks * 1E-07;
