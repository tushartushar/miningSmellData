Implementation smell,Namespace,Class,File,Method,Description
Long Method,MigraDoc.RtfRendering,DateFieldRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\DateFieldRenderer.cs,TranslateFormat,The method has 136 lines of code.
Long Method,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,CreateEnumTranslationTable,The method has 116 lines of code.
Complex Method,MigraDoc.RtfRendering,BorderRendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\BorderRendererBase.cs,GetBorderControl,Cyclomatic complexity of the method is 21
Complex Method,MigraDoc.RtfRendering,BordersRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\BordersRenderer.cs,Render,Cyclomatic complexity of the method is 16
Complex Method,MigraDoc.RtfRendering,CharacterRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\CharacterRenderer.cs,Render,Cyclomatic complexity of the method is 78
Complex Method,MigraDoc.RtfRendering,DateFieldRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\DateFieldRenderer.cs,TranslateFormat,Cyclomatic complexity of the method is 82
Complex Method,MigraDoc.RtfRendering,DateFieldRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\DateFieldRenderer.cs,TranslateCustomFormatChar,Cyclomatic complexity of the method is 8
Complex Method,MigraDoc.RtfRendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ImageRenderer.cs,RenderSourceType,Cyclomatic complexity of the method is 19
Complex Method,MigraDoc.RtfRendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ImageRenderer.cs,CalculateImageDimensions,Cyclomatic complexity of the method is 12
Complex Method,MigraDoc.RtfRendering,InfoFieldRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\InfoFieldRenderer.cs,Render,Cyclomatic complexity of the method is 12
Complex Method,MigraDoc.RtfRendering,ListInfoRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ListInfoRenderer.cs,WriteListLevel,Cyclomatic complexity of the method is 26
Complex Method,MigraDoc.RtfRendering,NumericFieldRendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\NumericFieldRendererBase.cs,TranslateFormat,Cyclomatic complexity of the method is 17
Complex Method,MigraDoc.RtfRendering,ParagraphFormatRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ParagraphFormatRenderer.cs,Render,Cyclomatic complexity of the method is 22
Complex Method,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,Translate,Cyclomatic complexity of the method is 9
Complex Method,MigraDoc.RtfRendering,RendererFactory,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererFactory.cs,CreateRenderer,Cyclomatic complexity of the method is 33
Complex Method,MigraDoc.RtfRendering,RowRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RowRenderer.cs,RenderRowHeight,Cyclomatic complexity of the method is 11
Complex Method,MigraDoc.RtfRendering,RtfDocumentRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RtfDocumentRenderer.cs,CollectTables,Cyclomatic complexity of the method is 14
Complex Method,MigraDoc.RtfRendering,RtfWriter,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RtfWriter.cs,WriteText,Cyclomatic complexity of the method is 18
Complex Method,MigraDoc.RtfRendering,RtfWriter,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RtfWriter.cs,IsCp1252Char,Cyclomatic complexity of the method is 32
Complex Method,MigraDoc.RtfRendering,SectionRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\SectionRenderer.cs,Render,Cyclomatic complexity of the method is 8
Complex Method,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,RenderTopPosition,Cyclomatic complexity of the method is 14
Complex Method,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,RenderLeftPosition,Cyclomatic complexity of the method is 14
Complex Method,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,RenderParagraphAlignment,Cyclomatic complexity of the method is 11
Complex Method,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,RenderRelativeHorizontal,Cyclomatic complexity of the method is 13
Complex Method,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,RenderRelativeVertical,Cyclomatic complexity of the method is 13
Complex Method,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,RenderParagraphIndents,Cyclomatic complexity of the method is 11
Complex Method,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,RenderTopBottom,Cyclomatic complexity of the method is 11
Complex Method,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,AlignVertically,Cyclomatic complexity of the method is 11
Complex Method,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,RenderLeftRight,Cyclomatic complexity of the method is 10
Complex Method,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,AlignHorizontally,Cyclomatic complexity of the method is 13
Long Parameter List,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,Translate,The method has 5 parameters.
Long Parameter List,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,Translate,The method has 5 parameters.
Long Statement,MigraDoc.RtfRendering,BorderRendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\BorderRendererBase.cs,RenderBorder,The length of the statement  "	Translate ("Color"' "brdrcf"' RtfUnit.Undefined' this.docRenderer.GetColorIndex (GetDefaultColor ()).ToString (CultureInfo.InvariantCulture)' false); " is 149.
Long Statement,MigraDoc.RtfRendering,ChartRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ChartRenderer.cs,Render,The length of the statement  "	if (elms != null && !renderInParagraph && !(DocumentRelations.GetParent (elms) is Section || DocumentRelations.GetParent (elms) is HeaderFooter)) { " is 147.
Long Statement,MigraDoc.RtfRendering,ChartRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ChartRenderer.cs,StoreTempImage,The length of the statement  "		XGraphics gfx = XGraphics.CreateMeasureContext (new XSize (horzPixels' vertPixels)' XGraphicsUnit.Point' XPageDirection.Downwards); " is 131.
Long Statement,MigraDoc.RtfRendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ImageRenderer.cs,Render,The length of the statement  "	if (elms != null && !renderInParagraph && !(DocumentRelations.GetParent (elms) is Section || DocumentRelations.GetParent (elms) is HeaderFooter)) { " is 147.
Long Statement,MigraDoc.RtfRendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ImageRenderer.cs,RenderSourceType,The length of the statement  "		this.imageFile = Assembly.GetExecutingAssembly ().GetManifestResourceStream ("MigraDoc.RtfRendering.Resources.PDF.png"); " is 120.
Long Statement,MigraDoc.RtfRendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ParagraphRenderer.cs,RenderContent,The length of the statement  "		FootnoteRenderer ftntRenderer = new FootnoteRenderer (DocumentRelations.GetParent (elements) as Footnote' this.docRenderer); " is 124.
Long Statement,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,RenderLineFormat,The length of the statement  "		TranslateAsNameValuePair ("LineFormat.Width"' "lineWidth"' RtfUnit.EMU' ToEmu (1).ToString (CultureInfo.InvariantCulture)); " is 123.
Long Statement,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,RenderInParagraph,The length of the statement  "	if (this.shape.IsNull ("RelativeVertical") || this.shape.RelativeVertical == RelativeVertical.Line || this.shape.RelativeVertical == RelativeVertical.Paragraph) { " is 162.
Long Statement,MigraDoc.RtfRendering,TextFrameRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\TextFrameRenderer.cs,Render,The length of the statement  "	if (this.textFrame.IsNull ("Elements") || !CollectionContainsObjectAssignableTo (this.textFrame.Elements' typeof(Shape)' typeof(Table))) " is 136.
Complex Conditional,MigraDoc.RtfRendering,BorderRendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\BorderRendererBase.cs,RenderBorder,The conditional expression  "visible == null && borderStyle == null && borderColor == null && borderWidth == null"  is complex.
Complex Conditional,MigraDoc.RtfRendering,BorderRendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\BorderRendererBase.cs,RenderBorder,The conditional expression  "(visible != null && !(bool)visible) || (borderStyle != null && ((BorderStyle)borderStyle) == BorderStyle.None)"  is complex.
Complex Conditional,MigraDoc.RtfRendering,ChartRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ChartRenderer.cs,Render,The conditional expression  "elms != null && !renderInParagraph && !(DocumentRelations.GetParent (elms) is Section || DocumentRelations.GetParent (elms) is HeaderFooter)"  is complex.
Complex Conditional,MigraDoc.RtfRendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ImageRenderer.cs,Render,The conditional expression  "elms != null && !renderInParagraph && !(DocumentRelations.GetParent (elms) is Section || DocumentRelations.GetParent (elms) is HeaderFooter)"  is complex.
Magic Number,MigraDoc.RtfRendering,CellFormatRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\CellFormatRenderer.cs,RenderLeftRightPadding,The following statement contains a magic number: if (cellPdgVal == null)  	cellPdgVal = Unit.FromCentimeter (0.12);  
Magic Number,MigraDoc.RtfRendering,CellFormatRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\CellFormatRenderer.cs,RenderLeftRightPadding,The following statement contains a magic number: cellPdgVal = Unit.FromCentimeter (0.12);  
Magic Number,MigraDoc.RtfRendering,CellFormatRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\CellFormatRenderer.cs,RenderLeftRightPadding,The following statement contains a magic number: this.rtfWriter.WriteControl (cellPadUnit + "t"' 3);  
Magic Number,MigraDoc.RtfRendering,CellFormatRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\CellFormatRenderer.cs,RenderLeftRightPadding,The following statement contains a magic number: if (cellPdgVal == null)  	cellPdgVal = Unit.FromCentimeter (0.12);  
Magic Number,MigraDoc.RtfRendering,CellFormatRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\CellFormatRenderer.cs,RenderLeftRightPadding,The following statement contains a magic number: cellPdgVal = Unit.FromCentimeter (0.12);  
Magic Number,MigraDoc.RtfRendering,CellFormatRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\CellFormatRenderer.cs,RenderLeftRightPadding,The following statement contains a magic number: this.rtfWriter.WriteControl (cellPadUnit + "r"' 3);  
Magic Number,MigraDoc.RtfRendering,ChartRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ChartRenderer.cs,RenderDimensionSettings,The following statement contains a magic number: this.rtfWriter.WriteControl ("picscalex"' 100);  
Magic Number,MigraDoc.RtfRendering,ChartRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ChartRenderer.cs,RenderDimensionSettings,The following statement contains a magic number: this.rtfWriter.WriteControl ("picscaley"' 100);  
Magic Number,MigraDoc.RtfRendering,ChartRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ChartRenderer.cs,RenderDimensionSettings,The following statement contains a magic number: this.rtfWriter.WriteControl ("pich"' (int)(GetShapeHeight ().Millimeter * 100));  
Magic Number,MigraDoc.RtfRendering,ChartRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ChartRenderer.cs,RenderDimensionSettings,The following statement contains a magic number: this.rtfWriter.WriteControl ("picw"' (int)(GetShapeWidth ().Millimeter * 100));  
Magic Number,MigraDoc.RtfRendering,ChartRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ChartRenderer.cs,StoreTempImage,The following statement contains a magic number: try {  	float resolution = 96;  	int horzPixels = (int)(GetShapeWidth ().Inch * resolution);  	int vertPixels = (int)(GetShapeHeight ().Inch * resolution);  	Bitmap bmp = new Bitmap (horzPixels' vertPixels);  	#if true  	XGraphics gfx = XGraphics.CreateMeasureContext (new XSize (horzPixels' vertPixels)' XGraphicsUnit.Point' XPageDirection.Downwards);  	#else  	#if GDI  	#        XGraphics gfx = XGraphics.FromGraphics(Graphics.FromImage(bmp)' new XSize(horzPixels' vertPixels)); #endif  	#if WPF  	#        // TODOWPF         XGraphics gfx = null; //XGraphics.FromGraphics(Graphics.FromImage(bmp)' new XSize(horzPixels' vertPixels)); #endif  	#endif  	//REM: Should not be necessary:  	gfx.ScaleTransform (resolution / 72);  	//gfx.PageUnit = XGraphicsUnit.Point;  	DocumentRenderer renderer = new DocumentRenderer (this.chart.Document);  	renderer.RenderObject (gfx' 0' 0' GetShapeWidth ().Point' this.chart);  	bmp.SetResolution (resolution' resolution);  	bmp.Save (fileName' ImageFormat.Png);  }  catch (Exception) {  	return false;  }  
Magic Number,MigraDoc.RtfRendering,ChartRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ChartRenderer.cs,StoreTempImage,The following statement contains a magic number: try {  	float resolution = 96;  	int horzPixels = (int)(GetShapeWidth ().Inch * resolution);  	int vertPixels = (int)(GetShapeHeight ().Inch * resolution);  	Bitmap bmp = new Bitmap (horzPixels' vertPixels);  	#if true  	XGraphics gfx = XGraphics.CreateMeasureContext (new XSize (horzPixels' vertPixels)' XGraphicsUnit.Point' XPageDirection.Downwards);  	#else  	#if GDI  	#        XGraphics gfx = XGraphics.FromGraphics(Graphics.FromImage(bmp)' new XSize(horzPixels' vertPixels)); #endif  	#if WPF  	#        // TODOWPF         XGraphics gfx = null; //XGraphics.FromGraphics(Graphics.FromImage(bmp)' new XSize(horzPixels' vertPixels)); #endif  	#endif  	//REM: Should not be necessary:  	gfx.ScaleTransform (resolution / 72);  	//gfx.PageUnit = XGraphicsUnit.Point;  	DocumentRenderer renderer = new DocumentRenderer (this.chart.Document);  	renderer.RenderObject (gfx' 0' 0' GetShapeWidth ().Point' this.chart);  	bmp.SetResolution (resolution' resolution);  	bmp.Save (fileName' ImageFormat.Png);  }  catch (Exception) {  	return false;  }  
Magic Number,MigraDoc.RtfRendering,ChartRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ChartRenderer.cs,StoreTempImage,The following statement contains a magic number: gfx.ScaleTransform (resolution / 72);  
Magic Number,MigraDoc.RtfRendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ImageRenderer.cs,RenderDimensionSettings,The following statement contains a magic number: this.rtfWriter.WriteControl ("picscalex"' (int)(scaleX * 100));  
Magic Number,MigraDoc.RtfRendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ImageRenderer.cs,RenderDimensionSettings,The following statement contains a magic number: this.rtfWriter.WriteControl ("picscaley"' (int)(scaleY * 100));  
Magic Number,MigraDoc.RtfRendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ImageRenderer.cs,RenderDimensionSettings,The following statement contains a magic number: this.rtfWriter.WriteControl ("pich"' (int)(originalHeight.Millimeter * 100));  
Magic Number,MigraDoc.RtfRendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ImageRenderer.cs,RenderDimensionSettings,The following statement contains a magic number: this.rtfWriter.WriteControl ("picw"' (int)(originalWidth.Millimeter * 100));  
Magic Number,MigraDoc.RtfRendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ImageRenderer.cs,CalculateImageDimensions,The following statement contains a magic number: try {  	this.imageFile = File.OpenRead (this.filePath);  	//System.Drawing.Bitmap bip2 = new System.Drawing.Bitmap(imageFile);  	XImage bip = XImage.FromFile (this.filePath);  	float horzResolution;  	float vertResolution;  	string ext = Path.GetExtension (this.filePath).ToLower ();  	float origHorzRes = (float)bip.HorizontalResolution;  	float origVertRes = (float)bip.VerticalResolution;  	this.originalHeight = bip.PixelHeight * 72 / origVertRes;  	this.originalWidth = bip.PixelWidth * 72 / origHorzRes;  	if (this.image.IsNull ("Resolution")) {  		horzResolution = (ext == ".gif") ? 72 : (float)bip.HorizontalResolution;  		vertResolution = (ext == ".gif") ? 72 : (float)bip.VerticalResolution;  	}  	else {  		horzResolution = (float)GetValueAsIntended ("Resolution");  		vertResolution = horzResolution;  	}  	Unit origHeight = bip.Size.Height * 72 / vertResolution;  	Unit origWidth = bip.Size.Width * 72 / horzResolution;  	this.imageHeight = origHeight;  	this.imageWidth = origWidth;  	bool scaleWidthIsNull = this.image.IsNull ("ScaleWidth");  	bool scaleHeightIsNull = this.image.IsNull ("ScaleHeight");  	float sclHeight = scaleHeightIsNull ? 1 : (float)GetValueAsIntended ("ScaleHeight");  	this.scaleHeight = sclHeight;  	float sclWidth = scaleWidthIsNull ? 1 : (float)GetValueAsIntended ("ScaleWidth");  	this.scaleWidth = sclWidth;  	bool doLockAspectRatio = this.image.IsNull ("LockAspectRatio") || this.image.LockAspectRatio;  	if (doLockAspectRatio && (scaleHeightIsNull || scaleWidthIsNull)) {  		if (!this.image.IsNull ("Width") && this.image.IsNull ("Height")) {  			imageWidth = this.image.Width;  			imageHeight = origHeight * imageWidth / origWidth;  		}  		else if (!this.image.IsNull ("Height") && this.image.IsNull ("Width")) {  			imageHeight = this.image.Height;  			imageWidth = origWidth * imageHeight / origHeight;  		}  		else if (!this.image.IsNull ("Height") && !this.image.IsNull ("Width")) {  			imageWidth = this.image.Width;  			imageHeight = this.image.Height;  		}  		if (scaleWidthIsNull && !scaleHeightIsNull)  			scaleWidth = scaleHeight;  		else if (scaleHeightIsNull && !scaleWidthIsNull)  			scaleHeight = scaleWidth;  	}  	else {  		if (!this.image.IsNull ("Width"))  			imageWidth = this.image.Width;  		if (!this.image.IsNull ("Height"))  			imageHeight = this.image.Height;  	}  	return;  }  catch (FileNotFoundException) {  	Trace.WriteLine (Messages.ImageNotFound (this.image.Name)' "warning");  }  catch (Exception exc) {  	Trace.WriteLine (Messages.ImageNotReadable (this.image.Name' exc.Message)' "warning");  }  
Magic Number,MigraDoc.RtfRendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ImageRenderer.cs,CalculateImageDimensions,The following statement contains a magic number: try {  	this.imageFile = File.OpenRead (this.filePath);  	//System.Drawing.Bitmap bip2 = new System.Drawing.Bitmap(imageFile);  	XImage bip = XImage.FromFile (this.filePath);  	float horzResolution;  	float vertResolution;  	string ext = Path.GetExtension (this.filePath).ToLower ();  	float origHorzRes = (float)bip.HorizontalResolution;  	float origVertRes = (float)bip.VerticalResolution;  	this.originalHeight = bip.PixelHeight * 72 / origVertRes;  	this.originalWidth = bip.PixelWidth * 72 / origHorzRes;  	if (this.image.IsNull ("Resolution")) {  		horzResolution = (ext == ".gif") ? 72 : (float)bip.HorizontalResolution;  		vertResolution = (ext == ".gif") ? 72 : (float)bip.VerticalResolution;  	}  	else {  		horzResolution = (float)GetValueAsIntended ("Resolution");  		vertResolution = horzResolution;  	}  	Unit origHeight = bip.Size.Height * 72 / vertResolution;  	Unit origWidth = bip.Size.Width * 72 / horzResolution;  	this.imageHeight = origHeight;  	this.imageWidth = origWidth;  	bool scaleWidthIsNull = this.image.IsNull ("ScaleWidth");  	bool scaleHeightIsNull = this.image.IsNull ("ScaleHeight");  	float sclHeight = scaleHeightIsNull ? 1 : (float)GetValueAsIntended ("ScaleHeight");  	this.scaleHeight = sclHeight;  	float sclWidth = scaleWidthIsNull ? 1 : (float)GetValueAsIntended ("ScaleWidth");  	this.scaleWidth = sclWidth;  	bool doLockAspectRatio = this.image.IsNull ("LockAspectRatio") || this.image.LockAspectRatio;  	if (doLockAspectRatio && (scaleHeightIsNull || scaleWidthIsNull)) {  		if (!this.image.IsNull ("Width") && this.image.IsNull ("Height")) {  			imageWidth = this.image.Width;  			imageHeight = origHeight * imageWidth / origWidth;  		}  		else if (!this.image.IsNull ("Height") && this.image.IsNull ("Width")) {  			imageHeight = this.image.Height;  			imageWidth = origWidth * imageHeight / origHeight;  		}  		else if (!this.image.IsNull ("Height") && !this.image.IsNull ("Width")) {  			imageWidth = this.image.Width;  			imageHeight = this.image.Height;  		}  		if (scaleWidthIsNull && !scaleHeightIsNull)  			scaleWidth = scaleHeight;  		else if (scaleHeightIsNull && !scaleWidthIsNull)  			scaleHeight = scaleWidth;  	}  	else {  		if (!this.image.IsNull ("Width"))  			imageWidth = this.image.Width;  		if (!this.image.IsNull ("Height"))  			imageHeight = this.image.Height;  	}  	return;  }  catch (FileNotFoundException) {  	Trace.WriteLine (Messages.ImageNotFound (this.image.Name)' "warning");  }  catch (Exception exc) {  	Trace.WriteLine (Messages.ImageNotReadable (this.image.Name' exc.Message)' "warning");  }  
Magic Number,MigraDoc.RtfRendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ImageRenderer.cs,CalculateImageDimensions,The following statement contains a magic number: try {  	this.imageFile = File.OpenRead (this.filePath);  	//System.Drawing.Bitmap bip2 = new System.Drawing.Bitmap(imageFile);  	XImage bip = XImage.FromFile (this.filePath);  	float horzResolution;  	float vertResolution;  	string ext = Path.GetExtension (this.filePath).ToLower ();  	float origHorzRes = (float)bip.HorizontalResolution;  	float origVertRes = (float)bip.VerticalResolution;  	this.originalHeight = bip.PixelHeight * 72 / origVertRes;  	this.originalWidth = bip.PixelWidth * 72 / origHorzRes;  	if (this.image.IsNull ("Resolution")) {  		horzResolution = (ext == ".gif") ? 72 : (float)bip.HorizontalResolution;  		vertResolution = (ext == ".gif") ? 72 : (float)bip.VerticalResolution;  	}  	else {  		horzResolution = (float)GetValueAsIntended ("Resolution");  		vertResolution = horzResolution;  	}  	Unit origHeight = bip.Size.Height * 72 / vertResolution;  	Unit origWidth = bip.Size.Width * 72 / horzResolution;  	this.imageHeight = origHeight;  	this.imageWidth = origWidth;  	bool scaleWidthIsNull = this.image.IsNull ("ScaleWidth");  	bool scaleHeightIsNull = this.image.IsNull ("ScaleHeight");  	float sclHeight = scaleHeightIsNull ? 1 : (float)GetValueAsIntended ("ScaleHeight");  	this.scaleHeight = sclHeight;  	float sclWidth = scaleWidthIsNull ? 1 : (float)GetValueAsIntended ("ScaleWidth");  	this.scaleWidth = sclWidth;  	bool doLockAspectRatio = this.image.IsNull ("LockAspectRatio") || this.image.LockAspectRatio;  	if (doLockAspectRatio && (scaleHeightIsNull || scaleWidthIsNull)) {  		if (!this.image.IsNull ("Width") && this.image.IsNull ("Height")) {  			imageWidth = this.image.Width;  			imageHeight = origHeight * imageWidth / origWidth;  		}  		else if (!this.image.IsNull ("Height") && this.image.IsNull ("Width")) {  			imageHeight = this.image.Height;  			imageWidth = origWidth * imageHeight / origHeight;  		}  		else if (!this.image.IsNull ("Height") && !this.image.IsNull ("Width")) {  			imageWidth = this.image.Width;  			imageHeight = this.image.Height;  		}  		if (scaleWidthIsNull && !scaleHeightIsNull)  			scaleWidth = scaleHeight;  		else if (scaleHeightIsNull && !scaleWidthIsNull)  			scaleHeight = scaleWidth;  	}  	else {  		if (!this.image.IsNull ("Width"))  			imageWidth = this.image.Width;  		if (!this.image.IsNull ("Height"))  			imageHeight = this.image.Height;  	}  	return;  }  catch (FileNotFoundException) {  	Trace.WriteLine (Messages.ImageNotFound (this.image.Name)' "warning");  }  catch (Exception exc) {  	Trace.WriteLine (Messages.ImageNotReadable (this.image.Name' exc.Message)' "warning");  }  
Magic Number,MigraDoc.RtfRendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ImageRenderer.cs,CalculateImageDimensions,The following statement contains a magic number: try {  	this.imageFile = File.OpenRead (this.filePath);  	//System.Drawing.Bitmap bip2 = new System.Drawing.Bitmap(imageFile);  	XImage bip = XImage.FromFile (this.filePath);  	float horzResolution;  	float vertResolution;  	string ext = Path.GetExtension (this.filePath).ToLower ();  	float origHorzRes = (float)bip.HorizontalResolution;  	float origVertRes = (float)bip.VerticalResolution;  	this.originalHeight = bip.PixelHeight * 72 / origVertRes;  	this.originalWidth = bip.PixelWidth * 72 / origHorzRes;  	if (this.image.IsNull ("Resolution")) {  		horzResolution = (ext == ".gif") ? 72 : (float)bip.HorizontalResolution;  		vertResolution = (ext == ".gif") ? 72 : (float)bip.VerticalResolution;  	}  	else {  		horzResolution = (float)GetValueAsIntended ("Resolution");  		vertResolution = horzResolution;  	}  	Unit origHeight = bip.Size.Height * 72 / vertResolution;  	Unit origWidth = bip.Size.Width * 72 / horzResolution;  	this.imageHeight = origHeight;  	this.imageWidth = origWidth;  	bool scaleWidthIsNull = this.image.IsNull ("ScaleWidth");  	bool scaleHeightIsNull = this.image.IsNull ("ScaleHeight");  	float sclHeight = scaleHeightIsNull ? 1 : (float)GetValueAsIntended ("ScaleHeight");  	this.scaleHeight = sclHeight;  	float sclWidth = scaleWidthIsNull ? 1 : (float)GetValueAsIntended ("ScaleWidth");  	this.scaleWidth = sclWidth;  	bool doLockAspectRatio = this.image.IsNull ("LockAspectRatio") || this.image.LockAspectRatio;  	if (doLockAspectRatio && (scaleHeightIsNull || scaleWidthIsNull)) {  		if (!this.image.IsNull ("Width") && this.image.IsNull ("Height")) {  			imageWidth = this.image.Width;  			imageHeight = origHeight * imageWidth / origWidth;  		}  		else if (!this.image.IsNull ("Height") && this.image.IsNull ("Width")) {  			imageHeight = this.image.Height;  			imageWidth = origWidth * imageHeight / origHeight;  		}  		else if (!this.image.IsNull ("Height") && !this.image.IsNull ("Width")) {  			imageWidth = this.image.Width;  			imageHeight = this.image.Height;  		}  		if (scaleWidthIsNull && !scaleHeightIsNull)  			scaleWidth = scaleHeight;  		else if (scaleHeightIsNull && !scaleWidthIsNull)  			scaleHeight = scaleWidth;  	}  	else {  		if (!this.image.IsNull ("Width"))  			imageWidth = this.image.Width;  		if (!this.image.IsNull ("Height"))  			imageHeight = this.image.Height;  	}  	return;  }  catch (FileNotFoundException) {  	Trace.WriteLine (Messages.ImageNotFound (this.image.Name)' "warning");  }  catch (Exception exc) {  	Trace.WriteLine (Messages.ImageNotReadable (this.image.Name' exc.Message)' "warning");  }  
Magic Number,MigraDoc.RtfRendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ImageRenderer.cs,CalculateImageDimensions,The following statement contains a magic number: try {  	this.imageFile = File.OpenRead (this.filePath);  	//System.Drawing.Bitmap bip2 = new System.Drawing.Bitmap(imageFile);  	XImage bip = XImage.FromFile (this.filePath);  	float horzResolution;  	float vertResolution;  	string ext = Path.GetExtension (this.filePath).ToLower ();  	float origHorzRes = (float)bip.HorizontalResolution;  	float origVertRes = (float)bip.VerticalResolution;  	this.originalHeight = bip.PixelHeight * 72 / origVertRes;  	this.originalWidth = bip.PixelWidth * 72 / origHorzRes;  	if (this.image.IsNull ("Resolution")) {  		horzResolution = (ext == ".gif") ? 72 : (float)bip.HorizontalResolution;  		vertResolution = (ext == ".gif") ? 72 : (float)bip.VerticalResolution;  	}  	else {  		horzResolution = (float)GetValueAsIntended ("Resolution");  		vertResolution = horzResolution;  	}  	Unit origHeight = bip.Size.Height * 72 / vertResolution;  	Unit origWidth = bip.Size.Width * 72 / horzResolution;  	this.imageHeight = origHeight;  	this.imageWidth = origWidth;  	bool scaleWidthIsNull = this.image.IsNull ("ScaleWidth");  	bool scaleHeightIsNull = this.image.IsNull ("ScaleHeight");  	float sclHeight = scaleHeightIsNull ? 1 : (float)GetValueAsIntended ("ScaleHeight");  	this.scaleHeight = sclHeight;  	float sclWidth = scaleWidthIsNull ? 1 : (float)GetValueAsIntended ("ScaleWidth");  	this.scaleWidth = sclWidth;  	bool doLockAspectRatio = this.image.IsNull ("LockAspectRatio") || this.image.LockAspectRatio;  	if (doLockAspectRatio && (scaleHeightIsNull || scaleWidthIsNull)) {  		if (!this.image.IsNull ("Width") && this.image.IsNull ("Height")) {  			imageWidth = this.image.Width;  			imageHeight = origHeight * imageWidth / origWidth;  		}  		else if (!this.image.IsNull ("Height") && this.image.IsNull ("Width")) {  			imageHeight = this.image.Height;  			imageWidth = origWidth * imageHeight / origHeight;  		}  		else if (!this.image.IsNull ("Height") && !this.image.IsNull ("Width")) {  			imageWidth = this.image.Width;  			imageHeight = this.image.Height;  		}  		if (scaleWidthIsNull && !scaleHeightIsNull)  			scaleWidth = scaleHeight;  		else if (scaleHeightIsNull && !scaleWidthIsNull)  			scaleHeight = scaleWidth;  	}  	else {  		if (!this.image.IsNull ("Width"))  			imageWidth = this.image.Width;  		if (!this.image.IsNull ("Height"))  			imageHeight = this.image.Height;  	}  	return;  }  catch (FileNotFoundException) {  	Trace.WriteLine (Messages.ImageNotFound (this.image.Name)' "warning");  }  catch (Exception exc) {  	Trace.WriteLine (Messages.ImageNotReadable (this.image.Name' exc.Message)' "warning");  }  
Magic Number,MigraDoc.RtfRendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ImageRenderer.cs,CalculateImageDimensions,The following statement contains a magic number: try {  	this.imageFile = File.OpenRead (this.filePath);  	//System.Drawing.Bitmap bip2 = new System.Drawing.Bitmap(imageFile);  	XImage bip = XImage.FromFile (this.filePath);  	float horzResolution;  	float vertResolution;  	string ext = Path.GetExtension (this.filePath).ToLower ();  	float origHorzRes = (float)bip.HorizontalResolution;  	float origVertRes = (float)bip.VerticalResolution;  	this.originalHeight = bip.PixelHeight * 72 / origVertRes;  	this.originalWidth = bip.PixelWidth * 72 / origHorzRes;  	if (this.image.IsNull ("Resolution")) {  		horzResolution = (ext == ".gif") ? 72 : (float)bip.HorizontalResolution;  		vertResolution = (ext == ".gif") ? 72 : (float)bip.VerticalResolution;  	}  	else {  		horzResolution = (float)GetValueAsIntended ("Resolution");  		vertResolution = horzResolution;  	}  	Unit origHeight = bip.Size.Height * 72 / vertResolution;  	Unit origWidth = bip.Size.Width * 72 / horzResolution;  	this.imageHeight = origHeight;  	this.imageWidth = origWidth;  	bool scaleWidthIsNull = this.image.IsNull ("ScaleWidth");  	bool scaleHeightIsNull = this.image.IsNull ("ScaleHeight");  	float sclHeight = scaleHeightIsNull ? 1 : (float)GetValueAsIntended ("ScaleHeight");  	this.scaleHeight = sclHeight;  	float sclWidth = scaleWidthIsNull ? 1 : (float)GetValueAsIntended ("ScaleWidth");  	this.scaleWidth = sclWidth;  	bool doLockAspectRatio = this.image.IsNull ("LockAspectRatio") || this.image.LockAspectRatio;  	if (doLockAspectRatio && (scaleHeightIsNull || scaleWidthIsNull)) {  		if (!this.image.IsNull ("Width") && this.image.IsNull ("Height")) {  			imageWidth = this.image.Width;  			imageHeight = origHeight * imageWidth / origWidth;  		}  		else if (!this.image.IsNull ("Height") && this.image.IsNull ("Width")) {  			imageHeight = this.image.Height;  			imageWidth = origWidth * imageHeight / origHeight;  		}  		else if (!this.image.IsNull ("Height") && !this.image.IsNull ("Width")) {  			imageWidth = this.image.Width;  			imageHeight = this.image.Height;  		}  		if (scaleWidthIsNull && !scaleHeightIsNull)  			scaleWidth = scaleHeight;  		else if (scaleHeightIsNull && !scaleWidthIsNull)  			scaleHeight = scaleWidth;  	}  	else {  		if (!this.image.IsNull ("Width"))  			imageWidth = this.image.Width;  		if (!this.image.IsNull ("Height"))  			imageHeight = this.image.Height;  	}  	return;  }  catch (FileNotFoundException) {  	Trace.WriteLine (Messages.ImageNotFound (this.image.Name)' "warning");  }  catch (Exception exc) {  	Trace.WriteLine (Messages.ImageNotReadable (this.image.Name' exc.Message)' "warning");  }  
Magic Number,MigraDoc.RtfRendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ImageRenderer.cs,CalculateImageDimensions,The following statement contains a magic number: this.originalHeight = bip.PixelHeight * 72 / origVertRes;  
Magic Number,MigraDoc.RtfRendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ImageRenderer.cs,CalculateImageDimensions,The following statement contains a magic number: this.originalWidth = bip.PixelWidth * 72 / origHorzRes;  
Magic Number,MigraDoc.RtfRendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ImageRenderer.cs,CalculateImageDimensions,The following statement contains a magic number: if (this.image.IsNull ("Resolution")) {  	horzResolution = (ext == ".gif") ? 72 : (float)bip.HorizontalResolution;  	vertResolution = (ext == ".gif") ? 72 : (float)bip.VerticalResolution;  }  else {  	horzResolution = (float)GetValueAsIntended ("Resolution");  	vertResolution = horzResolution;  }  
Magic Number,MigraDoc.RtfRendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ImageRenderer.cs,CalculateImageDimensions,The following statement contains a magic number: if (this.image.IsNull ("Resolution")) {  	horzResolution = (ext == ".gif") ? 72 : (float)bip.HorizontalResolution;  	vertResolution = (ext == ".gif") ? 72 : (float)bip.VerticalResolution;  }  else {  	horzResolution = (float)GetValueAsIntended ("Resolution");  	vertResolution = horzResolution;  }  
Magic Number,MigraDoc.RtfRendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ImageRenderer.cs,CalculateImageDimensions,The following statement contains a magic number: horzResolution = (ext == ".gif") ? 72 : (float)bip.HorizontalResolution;  
Magic Number,MigraDoc.RtfRendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ImageRenderer.cs,CalculateImageDimensions,The following statement contains a magic number: vertResolution = (ext == ".gif") ? 72 : (float)bip.VerticalResolution;  
Magic Number,MigraDoc.RtfRendering,ListInfoRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ListInfoRenderer.cs,Clear,The following statement contains a magic number: templateID = 2;  
Magic Number,MigraDoc.RtfRendering,ListInfoRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ListInfoRenderer.cs,Render,The following statement contains a magic number: listID += 2;  
Magic Number,MigraDoc.RtfRendering,ListInfoRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ListInfoRenderer.cs,Render,The following statement contains a magic number: templateID += 2;  
Magic Number,MigraDoc.RtfRendering,ParagraphFormatRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ParagraphFormatRenderer.cs,Render,The following statement contains a magic number: switch (lineSpcRule) {  case LineSpacingRule.Exactly:  	//A bit strange' but follows the RTF specification:  	this.rtfWriter.WriteControl ("sl"' ToTwips (-lineSpc.Point));  	break;  case LineSpacingRule.AtLeast:  	Translate ("LineSpacing"' "sl");  	break;  case LineSpacingRule.Multiple:  	this.rtfWriter.WriteControl ("sl"' ToRtfUnit (lineSpc' RtfUnit.Lines));  	break;  case LineSpacingRule.Double:  	this.rtfWriter.WriteControl ("sl"' 480);  	//equals 12 * 2 * 20 (Standard line height * 2  in twips)  	break;  case LineSpacingRule.OnePtFive:  	this.rtfWriter.WriteControl ("sl"' 360);  	//equals 12 * 1.5 * 20 (Standard lineheight * 1.5  in twips)  	break;  }  
Magic Number,MigraDoc.RtfRendering,ParagraphFormatRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ParagraphFormatRenderer.cs,Render,The following statement contains a magic number: switch (lineSpcRule) {  case LineSpacingRule.Exactly:  	//A bit strange' but follows the RTF specification:  	this.rtfWriter.WriteControl ("sl"' ToTwips (-lineSpc.Point));  	break;  case LineSpacingRule.AtLeast:  	Translate ("LineSpacing"' "sl");  	break;  case LineSpacingRule.Multiple:  	this.rtfWriter.WriteControl ("sl"' ToRtfUnit (lineSpc' RtfUnit.Lines));  	break;  case LineSpacingRule.Double:  	this.rtfWriter.WriteControl ("sl"' 480);  	//equals 12 * 2 * 20 (Standard line height * 2  in twips)  	break;  case LineSpacingRule.OnePtFive:  	this.rtfWriter.WriteControl ("sl"' 360);  	//equals 12 * 1.5 * 20 (Standard lineheight * 1.5  in twips)  	break;  }  
Magic Number,MigraDoc.RtfRendering,ParagraphFormatRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ParagraphFormatRenderer.cs,Render,The following statement contains a magic number: this.rtfWriter.WriteControl ("sl"' 480);  
Magic Number,MigraDoc.RtfRendering,ParagraphFormatRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ParagraphFormatRenderer.cs,Render,The following statement contains a magic number: this.rtfWriter.WriteControl ("sl"' 360);  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,CreateEnumTranslationTable,The following statement contains a magic number: enumTranslationTable.Add (OutlineLevel.Level3' 2);  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,CreateEnumTranslationTable,The following statement contains a magic number: enumTranslationTable.Add (OutlineLevel.Level4' 3);  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,CreateEnumTranslationTable,The following statement contains a magic number: enumTranslationTable.Add (OutlineLevel.Level5' 4);  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,CreateEnumTranslationTable,The following statement contains a magic number: enumTranslationTable.Add (OutlineLevel.Level6' 5);  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,CreateEnumTranslationTable,The following statement contains a magic number: enumTranslationTable.Add (OutlineLevel.Level7' 6);  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,CreateEnumTranslationTable,The following statement contains a magic number: enumTranslationTable.Add (OutlineLevel.Level8' 7);  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,CreateEnumTranslationTable,The following statement contains a magic number: enumTranslationTable.Add (OutlineLevel.Level9' 8);  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,CreateEnumTranslationTable,The following statement contains a magic number: enumTranslationTable.Add (ListType.BulletList1' 23);  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,CreateEnumTranslationTable,The following statement contains a magic number: enumTranslationTable.Add (ListType.BulletList2' 23);  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,CreateEnumTranslationTable,The following statement contains a magic number: enumTranslationTable.Add (ListType.BulletList3' 23);  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,CreateEnumTranslationTable,The following statement contains a magic number: enumTranslationTable.Add (ListType.NumberList3' 4);  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,CreateEnumTranslationTable,The following statement contains a magic number: enumTranslationTable.Add (WrapStyle.None' 3);  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,CreateEnumTranslationTable,The following statement contains a magic number: enumTranslationTable.Add (WrapStyle.Through' 3);  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,CreateEnumTranslationTable,The following statement contains a magic number: enumTranslationTable.Add (DashStyle.SquareDot' 2);  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,CreateEnumTranslationTable,The following statement contains a magic number: enumTranslationTable.Add (DashStyle.DashDot' 3);  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,CreateEnumTranslationTable,The following statement contains a magic number: enumTranslationTable.Add (DashStyle.DashDotDot' 4);  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,CreateEnumTranslationTable,The following statement contains a magic number: enumTranslationTable.Add (TextOrientation.Downward' 3);  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,CreateEnumTranslationTable,The following statement contains a magic number: enumTranslationTable.Add (TextOrientation.Upward' 2);  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,CreateEnumTranslationTable,The following statement contains a magic number: enumTranslationTable.Add (TextOrientation.Vertical' 3);  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,CreateEnumTranslationTable,The following statement contains a magic number: enumTranslationTable.Add (TextOrientation.VerticalFarEast' 3);  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,ToRtfUnit,The following statement contains a magic number: switch (rtfUnit) {  case RtfUnit.HalfPts:  	return (int)(Math.Round (unit.Point * 2));  case RtfUnit.Twips:  	return (int)(Math.Round (unit.Point * 20));  case RtfUnit.Lines:  	return (int)(Math.Round (unit.Point * 12 * 20));  case RtfUnit.EMU:  	return (int)(Math.Round (unit.Point * 12700));  case RtfUnit.CharUnit100:  	return (int)(Math.Round (unit.Pica * 100));  }  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,ToRtfUnit,The following statement contains a magic number: switch (rtfUnit) {  case RtfUnit.HalfPts:  	return (int)(Math.Round (unit.Point * 2));  case RtfUnit.Twips:  	return (int)(Math.Round (unit.Point * 20));  case RtfUnit.Lines:  	return (int)(Math.Round (unit.Point * 12 * 20));  case RtfUnit.EMU:  	return (int)(Math.Round (unit.Point * 12700));  case RtfUnit.CharUnit100:  	return (int)(Math.Round (unit.Pica * 100));  }  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,ToRtfUnit,The following statement contains a magic number: switch (rtfUnit) {  case RtfUnit.HalfPts:  	return (int)(Math.Round (unit.Point * 2));  case RtfUnit.Twips:  	return (int)(Math.Round (unit.Point * 20));  case RtfUnit.Lines:  	return (int)(Math.Round (unit.Point * 12 * 20));  case RtfUnit.EMU:  	return (int)(Math.Round (unit.Point * 12700));  case RtfUnit.CharUnit100:  	return (int)(Math.Round (unit.Pica * 100));  }  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,ToRtfUnit,The following statement contains a magic number: switch (rtfUnit) {  case RtfUnit.HalfPts:  	return (int)(Math.Round (unit.Point * 2));  case RtfUnit.Twips:  	return (int)(Math.Round (unit.Point * 20));  case RtfUnit.Lines:  	return (int)(Math.Round (unit.Point * 12 * 20));  case RtfUnit.EMU:  	return (int)(Math.Round (unit.Point * 12700));  case RtfUnit.CharUnit100:  	return (int)(Math.Round (unit.Pica * 100));  }  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,ToRtfUnit,The following statement contains a magic number: switch (rtfUnit) {  case RtfUnit.HalfPts:  	return (int)(Math.Round (unit.Point * 2));  case RtfUnit.Twips:  	return (int)(Math.Round (unit.Point * 20));  case RtfUnit.Lines:  	return (int)(Math.Round (unit.Point * 12 * 20));  case RtfUnit.EMU:  	return (int)(Math.Round (unit.Point * 12700));  case RtfUnit.CharUnit100:  	return (int)(Math.Round (unit.Pica * 100));  }  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,ToRtfUnit,The following statement contains a magic number: switch (rtfUnit) {  case RtfUnit.HalfPts:  	return (int)(Math.Round (unit.Point * 2));  case RtfUnit.Twips:  	return (int)(Math.Round (unit.Point * 20));  case RtfUnit.Lines:  	return (int)(Math.Round (unit.Point * 12 * 20));  case RtfUnit.EMU:  	return (int)(Math.Round (unit.Point * 12700));  case RtfUnit.CharUnit100:  	return (int)(Math.Round (unit.Pica * 100));  }  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,ToRtfUnit,The following statement contains a magic number: return (int)(Math.Round (unit.Point * 2));  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,ToRtfUnit,The following statement contains a magic number: return (int)(Math.Round (unit.Point * 20));  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,ToRtfUnit,The following statement contains a magic number: return (int)(Math.Round (unit.Point * 12 * 20));  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,ToRtfUnit,The following statement contains a magic number: return (int)(Math.Round (unit.Point * 12 * 20));  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,ToRtfUnit,The following statement contains a magic number: return (int)(Math.Round (unit.Point * 12700));  
Magic Number,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,ToRtfUnit,The following statement contains a magic number: return (int)(Math.Round (unit.Pica * 100));  
Magic Number,MigraDoc.RtfRendering,RowRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RowRenderer.cs,RenderTopBottomPadding,The following statement contains a magic number: this.rtfWriter.WriteControl (rwPadUnit + "t"' 3);  
Magic Number,MigraDoc.RtfRendering,RowRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RowRenderer.cs,RenderTopBottomPadding,The following statement contains a magic number: this.rtfWriter.WriteControl (rwPadUnit + "b"' 3);  
Magic Number,MigraDoc.RtfRendering,RowsRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RowsRenderer.cs,CalculateLeftIndent,The following statement contains a magic number: if (leftInd == null) {  	leftInd = rows.Table.Columns [0].GetValue ("LeftPadding"' GV.GetNull);  	if (leftInd == null)  		leftInd = Unit.FromCentimeter (-0.12);  	else  		leftInd = Unit.FromPoint (-((Unit)leftInd));  	Cell cell = rows [0].Cells [0];  	object visible = cell.GetValue ("Borders.Left.Visible"' GV.GetNull);  	object lineWidth = cell.GetValue ("Borders.Left.Width"' GV.GetNull);  	object style = cell.GetValue ("Borders.Left.Style"' GV.GetNull);  	object color = cell.GetValue ("Borders.Left.Color"' GV.GetNull);  	if (visible == null || (bool)visible) {  		if (lineWidth != null || style != null || color != null) {  			if (style != null && (BorderStyle)style != BorderStyle.None) {  				if (lineWidth != null)  					leftInd = Unit.FromPoint (((Unit)leftInd).Point - ((Unit)lineWidth).Point);  				else  					leftInd = Unit.FromPoint (((Unit)leftInd).Point - 0.5);  			}  		}  	}  }  
Magic Number,MigraDoc.RtfRendering,RowsRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RowsRenderer.cs,CalculateLeftIndent,The following statement contains a magic number: if (leftInd == null) {  	leftInd = rows.Table.Columns [0].GetValue ("LeftPadding"' GV.GetNull);  	if (leftInd == null)  		leftInd = Unit.FromCentimeter (-0.12);  	else  		leftInd = Unit.FromPoint (-((Unit)leftInd));  	Cell cell = rows [0].Cells [0];  	object visible = cell.GetValue ("Borders.Left.Visible"' GV.GetNull);  	object lineWidth = cell.GetValue ("Borders.Left.Width"' GV.GetNull);  	object style = cell.GetValue ("Borders.Left.Style"' GV.GetNull);  	object color = cell.GetValue ("Borders.Left.Color"' GV.GetNull);  	if (visible == null || (bool)visible) {  		if (lineWidth != null || style != null || color != null) {  			if (style != null && (BorderStyle)style != BorderStyle.None) {  				if (lineWidth != null)  					leftInd = Unit.FromPoint (((Unit)leftInd).Point - ((Unit)lineWidth).Point);  				else  					leftInd = Unit.FromPoint (((Unit)leftInd).Point - 0.5);  			}  		}  	}  }  
Magic Number,MigraDoc.RtfRendering,RowsRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RowsRenderer.cs,CalculateLeftIndent,The following statement contains a magic number: if (leftInd == null)  	leftInd = Unit.FromCentimeter (-0.12);  else  	leftInd = Unit.FromPoint (-((Unit)leftInd));  
Magic Number,MigraDoc.RtfRendering,RowsRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RowsRenderer.cs,CalculateLeftIndent,The following statement contains a magic number: leftInd = Unit.FromCentimeter (-0.12);  
Magic Number,MigraDoc.RtfRendering,RowsRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RowsRenderer.cs,CalculateLeftIndent,The following statement contains a magic number: if (visible == null || (bool)visible) {  	if (lineWidth != null || style != null || color != null) {  		if (style != null && (BorderStyle)style != BorderStyle.None) {  			if (lineWidth != null)  				leftInd = Unit.FromPoint (((Unit)leftInd).Point - ((Unit)lineWidth).Point);  			else  				leftInd = Unit.FromPoint (((Unit)leftInd).Point - 0.5);  		}  	}  }  
Magic Number,MigraDoc.RtfRendering,RowsRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RowsRenderer.cs,CalculateLeftIndent,The following statement contains a magic number: if (lineWidth != null || style != null || color != null) {  	if (style != null && (BorderStyle)style != BorderStyle.None) {  		if (lineWidth != null)  			leftInd = Unit.FromPoint (((Unit)leftInd).Point - ((Unit)lineWidth).Point);  		else  			leftInd = Unit.FromPoint (((Unit)leftInd).Point - 0.5);  	}  }  
Magic Number,MigraDoc.RtfRendering,RowsRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RowsRenderer.cs,CalculateLeftIndent,The following statement contains a magic number: if (style != null && (BorderStyle)style != BorderStyle.None) {  	if (lineWidth != null)  		leftInd = Unit.FromPoint (((Unit)leftInd).Point - ((Unit)lineWidth).Point);  	else  		leftInd = Unit.FromPoint (((Unit)leftInd).Point - 0.5);  }  
Magic Number,MigraDoc.RtfRendering,RowsRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RowsRenderer.cs,CalculateLeftIndent,The following statement contains a magic number: if (lineWidth != null)  	leftInd = Unit.FromPoint (((Unit)leftInd).Point - ((Unit)lineWidth).Point);  else  	leftInd = Unit.FromPoint (((Unit)leftInd).Point - 0.5);  
Magic Number,MigraDoc.RtfRendering,RowsRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RowsRenderer.cs,CalculateLeftIndent,The following statement contains a magic number: leftInd = Unit.FromPoint (((Unit)leftInd).Point - 0.5);  
Magic Number,MigraDoc.RtfRendering,RtfDocumentRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RtfDocumentRenderer.cs,RenderHeader,The following statement contains a magic number: this.rtfWriter.WriteControl ("ansicpg"' 1252);  
Magic Number,MigraDoc.RtfRendering,RtfDocumentRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RtfDocumentRenderer.cs,RenderFontTable,The following statement contains a magic number: for (int idx = 0; idx < this.fontList.Count; ++idx) {  	this.rtfWriter.StartContent ();  	string name = (string)fontList [idx];  	this.rtfWriter.WriteControl ("f"' idx);  	System.Drawing.Font font = new System.Drawing.Font (name' 12);  	//any size  	this.rtfWriter.WriteControl ("fcharset"' (int)font.GdiCharSet);  	this.rtfWriter.WriteText (name);  	this.rtfWriter.WriteSeparator ();  	this.rtfWriter.EndContent ();  }  
Magic Number,MigraDoc.RtfRendering,RtfDocumentRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RtfDocumentRenderer.cs,RenderGlobalPorperties,The following statement contains a magic number: this.rtfWriter.WriteControl ("viewkind"' 4);  
Magic Number,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,AlignVertically,The following statement contains a magic number: switch (shpPos) {  case ShapePosition.Bottom:  	topValue = distanceTopBottom - height - bottomWrap;  	bottomValue = distanceTopBottom - bottomWrap;  	break;  case ShapePosition.Center:  	{  		Unit centerPos = distanceTopBottom / 2.0;  		topValue = centerPos - height / 2.0;  		bottomValue = centerPos + height / 2.0;  	}  	break;  case ShapePosition.Top:  	topValue = topWrap;  	bottomValue = topWrap + height;  	break;  }  
Magic Number,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,AlignVertically,The following statement contains a magic number: switch (shpPos) {  case ShapePosition.Bottom:  	topValue = distanceTopBottom - height - bottomWrap;  	bottomValue = distanceTopBottom - bottomWrap;  	break;  case ShapePosition.Center:  	{  		Unit centerPos = distanceTopBottom / 2.0;  		topValue = centerPos - height / 2.0;  		bottomValue = centerPos + height / 2.0;  	}  	break;  case ShapePosition.Top:  	topValue = topWrap;  	bottomValue = topWrap + height;  	break;  }  
Magic Number,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,AlignVertically,The following statement contains a magic number: switch (shpPos) {  case ShapePosition.Bottom:  	topValue = distanceTopBottom - height - bottomWrap;  	bottomValue = distanceTopBottom - bottomWrap;  	break;  case ShapePosition.Center:  	{  		Unit centerPos = distanceTopBottom / 2.0;  		topValue = centerPos - height / 2.0;  		bottomValue = centerPos + height / 2.0;  	}  	break;  case ShapePosition.Top:  	topValue = topWrap;  	bottomValue = topWrap + height;  	break;  }  
Magic Number,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,AlignVertically,The following statement contains a magic number: topValue = centerPos - height / 2.0;  
Magic Number,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,AlignVertically,The following statement contains a magic number: bottomValue = centerPos + height / 2.0;  
Magic Number,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,AlignHorizontally,The following statement contains a magic number: switch (shpPos) {  case ShapePosition.Right:  //Positioning the shape Outside seems impossible=>Do the best that's possible.  case ShapePosition.Outside:  	leftValue = distanceLeftRight.Point - width - rightWrap;  	rightValue = distanceLeftRight - rightWrap;  	break;  case ShapePosition.Center:  	{  		double centerPos = distanceLeftRight.Point / 2;  		leftValue = centerPos - width / 2.0;  		rightValue = centerPos + width / 2.0;  	}  	break;  case ShapePosition.Left:  //Positioning the shape inside seems impossible=>Do the best that's possible.  case ShapePosition.Inside:  	leftValue = leftWrap;  	rightValue = leftWrap + width;  	break;  }  
Magic Number,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,AlignHorizontally,The following statement contains a magic number: switch (shpPos) {  case ShapePosition.Right:  //Positioning the shape Outside seems impossible=>Do the best that's possible.  case ShapePosition.Outside:  	leftValue = distanceLeftRight.Point - width - rightWrap;  	rightValue = distanceLeftRight - rightWrap;  	break;  case ShapePosition.Center:  	{  		double centerPos = distanceLeftRight.Point / 2;  		leftValue = centerPos - width / 2.0;  		rightValue = centerPos + width / 2.0;  	}  	break;  case ShapePosition.Left:  //Positioning the shape inside seems impossible=>Do the best that's possible.  case ShapePosition.Inside:  	leftValue = leftWrap;  	rightValue = leftWrap + width;  	break;  }  
Magic Number,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,AlignHorizontally,The following statement contains a magic number: switch (shpPos) {  case ShapePosition.Right:  //Positioning the shape Outside seems impossible=>Do the best that's possible.  case ShapePosition.Outside:  	leftValue = distanceLeftRight.Point - width - rightWrap;  	rightValue = distanceLeftRight - rightWrap;  	break;  case ShapePosition.Center:  	{  		double centerPos = distanceLeftRight.Point / 2;  		leftValue = centerPos - width / 2.0;  		rightValue = centerPos + width / 2.0;  	}  	break;  case ShapePosition.Left:  //Positioning the shape inside seems impossible=>Do the best that's possible.  case ShapePosition.Inside:  	leftValue = leftWrap;  	rightValue = leftWrap + width;  	break;  }  
Magic Number,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,AlignHorizontally,The following statement contains a magic number: leftValue = centerPos - width / 2.0;  
Magic Number,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,AlignHorizontally,The following statement contains a magic number: rightValue = centerPos + width / 2.0;  
Magic Number,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,TranslateAsNameValuePair,The following statement contains a magic number: if (val == null)  	valueStr = defaultValue;  else {  	if (val is Unit)  		valueStr = ToRtfUnit ((Unit)val' unit).ToString (CultureInfo.InvariantCulture);  	else if (val is Color) {  		Color col = (Color)val;  		col = col.GetMixedTransparencyColor ();  		valueStr = (col.R + (col.G * 256) + (col.B * 65536)).ToString (CultureInfo.InvariantCulture);  	}  	else if (val is Enum)  		valueStr = enumTranslationTable [val].ToString ();  	else if (val is bool)  		valueStr = (bool)val ? "1" : "0";  	else  		Debug.Assert (false);  }  
Magic Number,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,TranslateAsNameValuePair,The following statement contains a magic number: if (val == null)  	valueStr = defaultValue;  else {  	if (val is Unit)  		valueStr = ToRtfUnit ((Unit)val' unit).ToString (CultureInfo.InvariantCulture);  	else if (val is Color) {  		Color col = (Color)val;  		col = col.GetMixedTransparencyColor ();  		valueStr = (col.R + (col.G * 256) + (col.B * 65536)).ToString (CultureInfo.InvariantCulture);  	}  	else if (val is Enum)  		valueStr = enumTranslationTable [val].ToString ();  	else if (val is bool)  		valueStr = (bool)val ? "1" : "0";  	else  		Debug.Assert (false);  }  
Magic Number,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,TranslateAsNameValuePair,The following statement contains a magic number: if (val is Unit)  	valueStr = ToRtfUnit ((Unit)val' unit).ToString (CultureInfo.InvariantCulture);  else if (val is Color) {  	Color col = (Color)val;  	col = col.GetMixedTransparencyColor ();  	valueStr = (col.R + (col.G * 256) + (col.B * 65536)).ToString (CultureInfo.InvariantCulture);  }  else if (val is Enum)  	valueStr = enumTranslationTable [val].ToString ();  else if (val is bool)  	valueStr = (bool)val ? "1" : "0";  else  	Debug.Assert (false);  
Magic Number,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,TranslateAsNameValuePair,The following statement contains a magic number: if (val is Unit)  	valueStr = ToRtfUnit ((Unit)val' unit).ToString (CultureInfo.InvariantCulture);  else if (val is Color) {  	Color col = (Color)val;  	col = col.GetMixedTransparencyColor ();  	valueStr = (col.R + (col.G * 256) + (col.B * 65536)).ToString (CultureInfo.InvariantCulture);  }  else if (val is Enum)  	valueStr = enumTranslationTable [val].ToString ();  else if (val is bool)  	valueStr = (bool)val ? "1" : "0";  else  	Debug.Assert (false);  
Magic Number,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,TranslateAsNameValuePair,The following statement contains a magic number: if (val is Color) {  	Color col = (Color)val;  	col = col.GetMixedTransparencyColor ();  	valueStr = (col.R + (col.G * 256) + (col.B * 65536)).ToString (CultureInfo.InvariantCulture);  }  else if (val is Enum)  	valueStr = enumTranslationTable [val].ToString ();  else if (val is bool)  	valueStr = (bool)val ? "1" : "0";  else  	Debug.Assert (false);  
Magic Number,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,TranslateAsNameValuePair,The following statement contains a magic number: if (val is Color) {  	Color col = (Color)val;  	col = col.GetMixedTransparencyColor ();  	valueStr = (col.R + (col.G * 256) + (col.B * 65536)).ToString (CultureInfo.InvariantCulture);  }  else if (val is Enum)  	valueStr = enumTranslationTable [val].ToString ();  else if (val is bool)  	valueStr = (bool)val ? "1" : "0";  else  	Debug.Assert (false);  
Magic Number,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,TranslateAsNameValuePair,The following statement contains a magic number: valueStr = (col.R + (col.G * 256) + (col.B * 65536)).ToString (CultureInfo.InvariantCulture);  
Magic Number,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,TranslateAsNameValuePair,The following statement contains a magic number: valueStr = (col.R + (col.G * 256) + (col.B * 65536)).ToString (CultureInfo.InvariantCulture);  
Magic Number,MigraDoc.RtfRendering,TextFrameRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\TextFrameRenderer.cs,RenderLayoutPicture,The following statement contains a magic number: this.rtfWriter.WriteControl ("pich"' (int)(GetShapeHeight ().Millimeter * 100));  
Magic Number,MigraDoc.RtfRendering,TextFrameRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\TextFrameRenderer.cs,RenderLayoutPicture,The following statement contains a magic number: this.rtfWriter.WriteControl ("picw"' (int)(GetShapeWidth ().Millimeter * 100));  
Magic Number,MigraDoc.RtfRendering,TextFrameRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\TextFrameRenderer.cs,RenderLayoutPicture,The following statement contains a magic number: this.rtfWriter.WriteControl ("wmetafile"' 8);  
Magic Number,MigraDoc.RtfRendering,TextFrameRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\TextFrameRenderer.cs,RenderLayoutPicture,The following statement contains a magic number: this.rtfWriter.WriteControl ("blipupi"' 600);  
Missing Default,MigraDoc.RtfRendering,BorderRendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\BorderRendererBase.cs,GetBorderControl,The following switch statement is missing a default case: switch (type) {  case BorderType.Top:  	borderCtrl += "t";  	break;  case BorderType.Bottom:  	borderCtrl += "b";  	break;  case BorderType.Left:  	borderCtrl += "l";  	break;  case BorderType.Right:  	borderCtrl += "r";  	break;  case BorderType.DiagonalDown:  	Debug.Assert (isCellBorder);  	borderCtrl = "cldglu";  	break;  case BorderType.DiagonalUp:  	Debug.Assert (isCellBorder);  	borderCtrl = "cldgll";  	break;  }  
Missing Default,MigraDoc.RtfRendering,CharacterRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\CharacterRenderer.cs,Render,The following switch statement is missing a default case: switch (this.character.SymbolName) {  case SymbolName.Blank:  	for (int i = 0; i < count; ++i)  		this.rtfWriter.WriteBlank ();  	//WriteText wouldn't work if there was a control before.  	break;  case SymbolName.Bullet:  	for (int i = 0; i < count; ++i)  		this.rtfWriter.WriteControl ("bullet");  	break;  case SymbolName.Copyright:  	for (int i = 0; i < count; ++i)  		this.rtfWriter.WriteHex (0xa9);  	break;  case SymbolName.Em:  	for (int i = 0; i < count; ++i) {  		this.rtfWriter.WriteControl ("u"' "8195");  		//I don't know why' but it works:  		this.rtfWriter.WriteHex (0x20);  	}  	break;  case SymbolName.Em4:  	for (int i = 0; i < count; ++i) {  		this.rtfWriter.WriteControl ("u"' "8197");  		//I don't know why' but it works:  		this.rtfWriter.WriteHex (0x20);  	}  	break;  case SymbolName.En:  	for (int i = 0; i < count; ++i) {  		this.rtfWriter.WriteControl ("u"' "8194");  		//I don't know why' but it works:  		this.rtfWriter.WriteHex (0x20);  	}  	break;  case SymbolName.EmDash:  	for (int i = 0; i < count; ++i)  		this.rtfWriter.WriteControl ("emdash");  	break;  case SymbolName.EnDash:  	for (int i = 0; i < count; ++i)  		this.rtfWriter.WriteControl ("endash");  	break;  case SymbolName.Euro:  	for (int i = 0; i < count; ++i)  		this.rtfWriter.WriteHex (0x80);  	break;  case SymbolName.NonBreakableBlank:  	for (int i = 0; i < count; ++i)  		this.rtfWriter.WriteControl ("~");  	break;  case SymbolName.LineBreak:  	for (int i = 0; i < count; ++i)  		this.rtfWriter.WriteControl ("line");  	break;  case SymbolName.Not:  	for (int i = 0; i < count; ++i)  		this.rtfWriter.WriteHex (0xac);  	break;  case SymbolName.ParaBreak:  	for (int i = 0; i < count; ++i)  		this.rtfWriter.WriteControl ("par");  	break;  case SymbolName.RegisteredTrademark:  	for (int i = 0; i < count; ++i)  		this.rtfWriter.WriteHex (0xae);  	break;  case SymbolName.Tab:  	for (int i = 0; i < count; ++i)  		this.rtfWriter.WriteControl ("tab");  	break;  case SymbolName.Trademark:  	for (int i = 0; i < count; ++i)  		this.rtfWriter.WriteHex (0x99);  	break;  }  
Missing Default,MigraDoc.RtfRendering,InfoFieldRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\InfoFieldRenderer.cs,Render,The following switch statement is missing a default case: switch (this.infoField.Name.ToLower ()) {  case "author":  	this.rtfWriter.WriteText ("Author");  	break;  case "title":  	this.rtfWriter.WriteText ("Title");  	break;  case "keywords":  	this.rtfWriter.WriteText ("Keywords");  	break;  case "subject":  	this.rtfWriter.WriteText ("Subject");  	break;  }  
Missing Default,MigraDoc.RtfRendering,ListInfoRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ListInfoRenderer.cs,WriteListLevel,The following switch statement is missing a default case: switch (listType) {  case ListType.NumberList1:  	levelText1 = "'02";  	levelText2 = "'00.";  	levelNumbers = "'01";  	break;  case ListType.NumberList2:  case ListType.NumberList3:  	levelText1 = "'02";  	levelText2 = "'00)";  	levelNumbers = "'01";  	break;  //levelText1 = "'02";  //levelText2 = "'00)";  //levelNumbers = "'01";  //break;  case ListType.BulletList1:  	levelText1 = "'01";  	levelText2 = "u-3913 ?";  	fontIdx = this.docRenderer.GetFontIndex ("Symbol");  	break;  case ListType.BulletList2:  	levelText1 = "'01o";  	levelText2 = "";  	fontIdx = this.docRenderer.GetFontIndex ("Courier New");  	break;  case ListType.BulletList3:  	levelText1 = "'01";  	levelText2 = "u-3929 ?";  	fontIdx = this.docRenderer.GetFontIndex ("Wingdings");  	break;  }  
Missing Default,MigraDoc.RtfRendering,ParagraphFormatRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ParagraphFormatRenderer.cs,Render,The following switch statement is missing a default case: switch (lineSpcRule) {  case LineSpacingRule.Exactly:  	//A bit strange' but follows the RTF specification:  	this.rtfWriter.WriteControl ("sl"' ToTwips (-lineSpc.Point));  	break;  case LineSpacingRule.AtLeast:  	Translate ("LineSpacing"' "sl");  	break;  case LineSpacingRule.Multiple:  	this.rtfWriter.WriteControl ("sl"' ToRtfUnit (lineSpc' RtfUnit.Lines));  	break;  case LineSpacingRule.Double:  	this.rtfWriter.WriteControl ("sl"' 480);  	//equals 12 * 2 * 20 (Standard line height * 2  in twips)  	break;  case LineSpacingRule.OnePtFive:  	this.rtfWriter.WriteControl ("sl"' 360);  	//equals 12 * 1.5 * 20 (Standard lineheight * 1.5  in twips)  	break;  }  
Missing Default,MigraDoc.RtfRendering,RendererBase,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererBase.cs,ToRtfUnit,The following switch statement is missing a default case: switch (rtfUnit) {  case RtfUnit.HalfPts:  	return (int)(Math.Round (unit.Point * 2));  case RtfUnit.Twips:  	return (int)(Math.Round (unit.Point * 20));  case RtfUnit.Lines:  	return (int)(Math.Round (unit.Point * 12 * 20));  case RtfUnit.EMU:  	return (int)(Math.Round (unit.Point * 12700));  case RtfUnit.CharUnit100:  	return (int)(Math.Round (unit.Pica * 100));  }  
Missing Default,MigraDoc.RtfRendering,RendererFactory,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RendererFactory.cs,CreateRenderer,The following switch statement is missing a default case: switch (domObj.GetType ().Name) {  case "Style":  	return new StyleRenderer (domObj' docRenderer);  case "ParagraphFormat":  	return new ParagraphFormatRenderer (domObj' docRenderer);  case "Font":  	return new FontRenderer (domObj' docRenderer);  case "Borders":  	return new BordersRenderer (domObj' docRenderer);  case "Border":  	return new BorderRenderer (domObj' docRenderer);  case "TabStops":  	return new TabStopsRenderer (domObj' docRenderer);  case "TabStop":  	return new TabStopRenderer (domObj' docRenderer);  case "Section":  	return new SectionRenderer (domObj' docRenderer);  case "PageSetup":  	return new PageSetupRenderer (domObj' docRenderer);  case "Paragraph":  	return new ParagraphRenderer (domObj' docRenderer);  case "Text":  	return new TextRenderer (domObj' docRenderer);  case "FormattedText":  	return new FormattedTextRenderer (domObj' docRenderer);  case "Character":  	return new CharacterRenderer (domObj' docRenderer);  //Fields start  case "BookmarkField":  	return new BookmarkFieldRenderer (domObj' docRenderer);  case "PageField":  	return new PageFieldRenderer (domObj' docRenderer);  case "PageRefField":  	return new PageRefFieldRenderer (domObj' docRenderer);  case "NumPagesField":  	return new NumPagesFieldRenderer (domObj' docRenderer);  case "SectionField":  	return new SectionFieldRenderer (domObj' docRenderer);  case "SectionPagesField":  	return new SectionPagesFieldRenderer (domObj' docRenderer);  case "InfoField":  	return new InfoFieldRenderer (domObj' docRenderer);  case "DateField":  	return new DateFieldRenderer (domObj' docRenderer);  //Fields end  case "Hyperlink":  	return new HyperlinkRenderer (domObj' docRenderer);  case "Footnote":  	return new FootnoteRenderer (domObj' docRenderer);  case "ListInfo":  	return new ListInfoRenderer (domObj' docRenderer);  case "Image":  	return new ImageRenderer (domObj' docRenderer);  case "TextFrame":  	return new TextFrameRenderer (domObj' docRenderer);  case "Chart":  	return new ChartRenderer (domObj' docRenderer);  case "HeadersFooters":  	return new HeadersFootersRenderer (domObj' docRenderer);  case "HeaderFooter":  	return new HeaderFooterRenderer (domObj' docRenderer);  case "PageBreak":  	return new PageBreakRenderer (domObj' docRenderer);  //Table  case "Table":  	return new TableRenderer (domObj' docRenderer);  case "Row":  	return new RowRenderer (domObj' docRenderer);  case "Cell":  	return new CellRenderer (domObj' docRenderer);  //Table end  }  
Missing Default,MigraDoc.RtfRendering,RowRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RowRenderer.cs,RenderRowHeight,The following switch statement is missing a default case: switch ((RowHeightRule)heightRlObj) {  case RowHeightRule.AtLeast:  	Translate ("Height"' "trrh"' RtfUnit.Twips' "0"' false);  	break;  case RowHeightRule.Auto:  	this.rtfWriter.WriteControl ("trrh"' 0);  	break;  case RowHeightRule.Exactly:  	if (heightObj != null)  		RenderUnit ("trrh"' -((Unit)heightObj).Point);  	break;  }  
Missing Default,MigraDoc.RtfRendering,RtfWriter,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\RtfWriter.cs,IsCp1252Char,The following switch statement is missing a default case: switch (ch) {  case '\u20AC':  case '\u0081':  case '\u201A':  case '\u0192':  case '\u201E':  case '\u2026':  case '\u2020':  case '\u2021':  case '\u02C6':  case '\u2030':  case '\u0160':  case '\u2039':  case '\u0152':  case '\u008D':  case '\u017D':  case '\u008F':  case '\u0090':  case '\u2018':  case '\u2019':  case '\u201C':  case '\u201D':  case '\u2022':  case '\u2013':  case '\u2014':  case '\u02DC':  case '\u2122':  case '\u0161':  case '\u203A':  case '\u0153':  case '\u009D':  case '\u017E':  case '\u0178':  	return true;  }  
Missing Default,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,RenderTopPosition,The following switch statement is missing a default case: switch (topSP) {  case ShapePosition.Top:  	//WrapFormat.DistanceTop is used slightly different in the rendering module than in word.  	//It must be taken into account for the top value.  	object wrapTop = GetValueAsIntended ("WrapFormat.DistanceTop");  	if (wrapTop == null || ((Unit)wrapTop).Point == 0)  		topValue = "1";  	break;  case ShapePosition.Center:  	topValue = "2";  	break;  case ShapePosition.Bottom:  	//WrapFormat.DistanceBottom is used slightly different in the rendering module than in word.  	//It must be taken into account for the bottom value.  	object wrapBottom = GetValueAsIntended ("WrapFormat.DistanceBottom");  	if (wrapBottom == null || ((Unit)wrapBottom).Point == 0)  		topValue = "3";  	break;  }  
Missing Default,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,RenderLeftPosition,The following switch statement is missing a default case: switch (leftSP) {  case ShapePosition.Left:  	//WrapFormat.DistanceBottom is used slightly different in the rendering module than in word.  	//It must be taken into account for the left value.  	object wrapLeft = GetValueAsIntended ("WrapFormat.DistanceLeft");  	if (wrapLeft == null || ((Unit)wrapLeft).Point == 0)  		leftValue = "1";  	break;  case ShapePosition.Center:  	leftValue = "2";  	break;  case ShapePosition.Right:  	//WrapFormat.DistanceBottom is used slightly different in the rendering module than in word.  	//It must be taken into account for the right value.  	object wrapRight = GetValueAsIntended ("WrapFormat.DistanceRight");  	if (wrapRight == null || ((Unit)wrapRight).Point == 0)  		leftValue = "3";  	break;  }  
Missing Default,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,RenderRelativeHorizontal,The following switch statement is missing a default case: switch (relHor) {  case RelativeHorizontal.Character:  	RenderNameValuePair ("posrelh"' "3");  	break;  case RelativeHorizontal.Column:  	RenderNameValuePair ("posrelh"' "2");  	break;  case RelativeHorizontal.Margin:  	RenderNameValuePair ("posrelh"' "0");  	break;  case RelativeHorizontal.Page:  	RenderNameValuePair ("posrelh"' "1");  	break;  }  
Missing Default,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,RenderRelativeVertical,The following switch statement is missing a default case: switch (relVrt) {  case RelativeVertical.Line:  	RenderNameValuePair ("posrelv"' "3");  	break;  case RelativeVertical.Margin:  	RenderNameValuePair ("posrelv"' "0");  	break;  case RelativeVertical.Page:  	RenderNameValuePair ("posrelv"' "1");  	break;  case RelativeVertical.Paragraph:  	RenderNameValuePair ("posrelv"' "2");  	break;  }  
Missing Default,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,RenderParagraphIndents,The following switch statement is missing a default case: switch (leftPos.ShapePosition) {  case ShapePosition.Undefined:  	leftInd += leftPos.Position;  	leftInd += ((Unit)GetValueOrDefault ("WrapFormat.DistanceLeft"' (Unit)0)).Point;  	break;  case ShapePosition.Left:  	leftInd += ((Unit)GetValueOrDefault ("WrapFormat.DistanceLeft"' (Unit)0)).Point;  	break;  case ShapePosition.Right:  	rightInd += ((Unit)GetValueOrDefault ("WrapFormat.DistanceRight"' (Unit)0)).Point;  	break;  }  
Missing Default,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,RenderTopBottom,The following switch statement is missing a default case: switch (relVert) {  case RelativeVertical.Line:  	AlignVertically (topPos.ShapePosition' height' out top' out bottom);  	break;  case RelativeVertical.Margin:  	AlignVertically (topPos.ShapePosition' pgHeight.Point - topMrg.Point - btmMrg.Point' out top' out bottom);  	break;  case RelativeVertical.Page:  	AlignVertically (topPos.ShapePosition' pgHeight' out top' out bottom);  	break;  }  
Missing Default,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,AlignVertically,The following switch statement is missing a default case: switch (shpPos) {  case ShapePosition.Bottom:  	topValue = distanceTopBottom - height - bottomWrap;  	bottomValue = distanceTopBottom - bottomWrap;  	break;  case ShapePosition.Center:  	{  		Unit centerPos = distanceTopBottom / 2.0;  		topValue = centerPos - height / 2.0;  		bottomValue = centerPos + height / 2.0;  	}  	break;  case ShapePosition.Top:  	topValue = topWrap;  	bottomValue = topWrap + height;  	break;  }  
Missing Default,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,RenderLeftRight,The following switch statement is missing a default case: switch (relHor) {  case RelativeHorizontal.Column:  case RelativeHorizontal.Character:  case RelativeHorizontal.Margin:  	AlignHorizontally (leftPos.ShapePosition' pgWidth.Point - leftMrg.Point - rgtMrg.Point' out left' out right);  	break;  case RelativeHorizontal.Page:  	AlignHorizontally (leftPos.ShapePosition' pgWidth' out left' out right);  	break;  }  
Missing Default,MigraDoc.RtfRendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.RtfRendering\MigraDoc.RtfRendering\ShapeRenderer.cs,AlignHorizontally,The following switch statement is missing a default case: switch (shpPos) {  case ShapePosition.Right:  //Positioning the shape Outside seems impossible=>Do the best that's possible.  case ShapePosition.Outside:  	leftValue = distanceLeftRight.Point - width - rightWrap;  	rightValue = distanceLeftRight - rightWrap;  	break;  case ShapePosition.Center:  	{  		double centerPos = distanceLeftRight.Point / 2;  		leftValue = centerPos - width / 2.0;  		rightValue = centerPos + width / 2.0;  	}  	break;  case ShapePosition.Left:  //Positioning the shape inside seems impossible=>Do the best that's possible.  case ShapePosition.Inside:  	leftValue = leftWrap;  	rightValue = leftWrap + width;  	break;  }  
