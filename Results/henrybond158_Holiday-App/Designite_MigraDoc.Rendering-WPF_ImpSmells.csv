Implementation smell,Namespace,Class,File,Method,Description
Long Method,MigraDoc.Rendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ImageRenderer.cs,CalculateImageDimensions,The method has 115 lines of code.
Long Method,MigraDoc.Rendering,TopDownFormatter,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\TopDownFormatter.cs,FormatOnAreas,The method has 122 lines of code.
Complex Method,MigraDoc.Rendering.Printing,MigraDocPrintDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.Printing\MigraDocPrintDocument.cs,OnBeginPrint,Cyclomatic complexity of the method is 17
Complex Method,MigraDoc.Rendering,BordersRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\BordersRenderer.cs,GetPen,Cyclomatic complexity of the method is 19
Complex Method,MigraDoc.Rendering,BordersRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\BordersRenderer.cs,IsRendered,Cyclomatic complexity of the method is 12
Complex Method,MigraDoc.Rendering,ChartRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ChartRenderer.cs,Render,Cyclomatic complexity of the method is 8
Complex Method,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,PositionHorizontallyToMargin,Cyclomatic complexity of the method is 14
Complex Method,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,PositionHorizontallyToPage,Cyclomatic complexity of the method is 17
Complex Method,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,PositionVerticallyToMargin,Cyclomatic complexity of the method is 18
Complex Method,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,PositionVerticallyToPage,Cyclomatic complexity of the method is 16
Complex Method,MigraDoc.Rendering,FormattedTextFrame,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedTextFrame.cs,PositionHorizontally,Cyclomatic complexity of the method is 13
Complex Method,MigraDoc.Rendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ImageRenderer.cs,RenderFailureImage,Cyclomatic complexity of the method is 13
Complex Method,MigraDoc.Rendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ImageRenderer.cs,CalculateImageDimensions,Cyclomatic complexity of the method is 19
Complex Method,MigraDoc.Rendering,LineFormatRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\LineFormatRenderer.cs,GetPen,Cyclomatic complexity of the method is 15
Complex Method,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,GetFieldValue,Cyclomatic complexity of the method is 10
Complex Method,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,FormatTab,Cyclomatic complexity of the method is 16
Complex Method,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,RenderElement,Cyclomatic complexity of the method is 35
Complex Method,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,RenderCharacter,Cyclomatic complexity of the method is 15
Complex Method,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,RenderTabLeader,Cyclomatic complexity of the method is 16
Complex Method,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,EndHyperlink,Cyclomatic complexity of the method is 12
Complex Method,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,GetListSymbol,Cyclomatic complexity of the method is 27
Complex Method,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,Format,Cyclomatic complexity of the method is 17
Complex Method,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,FinishLayoutInfo,Cyclomatic complexity of the method is 9
Complex Method,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,FormatElement,Cyclomatic complexity of the method is 12
Complex Method,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,GetSpaceWidth,Cyclomatic complexity of the method is 12
Complex Method,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,GetSymbol,Cyclomatic complexity of the method is 31
Complex Method,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,CalcVerticalInfo,Cyclomatic complexity of the method is 21
Complex Method,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,GetUnderlinePen,Cyclomatic complexity of the method is 16
Complex Method,MigraDoc.Rendering,PdfDocumentRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\PdfDocumentRenderer.cs,RenderPages,Cyclomatic complexity of the method is 8
Complex Method,MigraDoc.Rendering,Renderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\Renderer.cs,Create,Cyclomatic complexity of the method is 8
Complex Method,MigraDoc.Rendering,Renderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\Renderer.cs,Create,Cyclomatic complexity of the method is 9
Complex Method,MigraDoc.Rendering,TableRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\TableRenderer.cs,Format,Cyclomatic complexity of the method is 10
Complex Method,MigraDoc.Rendering,TableRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\TableRenderer.cs,FinishLayoutInfo,Cyclomatic complexity of the method is 14
Complex Method,MigraDoc.Rendering,TextFrameRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\TextFrameRenderer.cs,Transform,Cyclomatic complexity of the method is 20
Complex Method,MigraDoc.Rendering,TopDownFormatter,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\TopDownFormatter.cs,FormatOnAreas,Cyclomatic complexity of the method is 19
Complex Method,MigraDoc.Rendering.ChartMapper,AxisMapper,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.ChartMapper\AxisMapper.cs,MapObject,Cyclomatic complexity of the method is 16
Complex Method,MigraDoc.Rendering.ChartMapper,LegendMapper,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.ChartMapper\LegendMapper.cs,MapObject,Cyclomatic complexity of the method is 17
Complex Method,MigraDoc.Rendering.ChartMapper,LineFormatMapper,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.ChartMapper\LineFormatMapper.cs,MapObject,Cyclomatic complexity of the method is 22
Complex Method,MigraDoc.Rendering.ChartMapper,SeriesCollectionMapper,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.ChartMapper\SeriesCollectionMapper.cs,MapObject,Cyclomatic complexity of the method is 11
Long Parameter List,MigraDoc.Rendering,BordersRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\BordersRenderer.cs,RenderDiagonally,The method has 5 parameters.
Long Parameter List,MigraDoc.Rendering,DocumentRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\DocumentRenderer.cs,RenderObject,The method has 5 parameters.
Long Parameter List,MigraDoc.Rendering,FormattedCell,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedCell.cs,FormattedCell,The method has 6 parameters.
Long Parameter List,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,SaveBeforeProbing,The method has 6 parameters.
Long Parameter List,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,RestoreAfterProbing,The method has 6 parameters.
Long Statement,MigraDoc.Rendering.Windows,DocumentPreview,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.Windows\DocumentPreview.xaml.cs,DdlUpdated,The length of the statement  "				//XGraphics gfx = XGraphics.FromDrawingContext(dc' new XSize(XUnit.FromMillimeter(210).Point' XUnit.FromMillimeter(297).Point)' XGraphicsUnit.Point); " is 149.
Long Statement,MigraDoc.Rendering.Windows,DocumentPreview,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.Windows\DocumentPreview.xaml.cs,DdlUpdated,The length of the statement  "				XGraphics gfx = XGraphics.FromDrawingContext (dc' new XSize (pageWidth.Point' pageHeight.Presentation)' XGraphicsUnit.Point); " is 125.
Long Statement,MigraDoc.Rendering,ChartRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ChartRenderer.cs,RenderArea,The length of the statement  "	FillFormatRenderer fillFormatRenderer = new FillFormatRenderer ((FillFormat)textArea.GetValue ("FillFormat"' GV.ReadOnly)' this.gfx); " is 133.
Long Statement,MigraDoc.Rendering,ChartRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ChartRenderer.cs,RenderArea,The length of the statement  "	LineFormatRenderer lineFormatRenderer = new LineFormatRenderer ((LineFormat)textArea.GetValue ("LineFormat"' GV.ReadOnly)' this.gfx); " is 133.
Long Statement,MigraDoc.Rendering,DocumentRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\DocumentRenderer.cs,NextListNumber,The length of the statement  "	bool isNumberList = listType == ListType.NumberList1 || listType == ListType.NumberList2 || listType == ListType.NumberList3; " is 125.
Long Statement,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,FormatHeader,The length of the statement  "		FormattedHeaderFooter formattedHeaderFooter = new FormattedHeaderFooter (header' this.documentRenderer' this.currentFieldInfos); " is 128.
Long Statement,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,FormatFooter,The length of the statement  "		FormattedHeaderFooter formattedHeaderFooter = new FormattedHeaderFooter (footer' this.documentRenderer' this.currentFieldInfos); " is 128.
Long Statement,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,PositionHorizontallyToPage,The length of the statement  "		if (layoutInfo.HorizontalReference == HorizontalReference.Page || layoutInfo.HorizontalReference == HorizontalReference.PageMargin) " is 131.
Long Statement,MigraDoc.Rendering,FormattedTextFrame,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedTextFrame.cs,CalcContentRect,The length of the statement  "	if (this.textframe.Orientation == TextOrientation.Horizontal || this.textframe.Orientation == TextOrientation.HorizontalRotatedFarEast) { " is 137.
Long Statement,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,ProbeAfterTab,The length of the statement  "	return this.currentLeaf != null && !IsLineBreak (this.currentLeaf.Current) && !IsTab (this.currentLeaf.Current) && !wordAppeared; " is 129.
Long Statement,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,GetNextTabStop,The length of the statement  "	if (format.FirstLineIndent < 0 || (!format.IsNull ("ListInfo") && format.ListInfo.NumberPosition < format.LeftIndent)) { " is 120.
Long Statement,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,NextTabOffset,The length of the statement  "	TabOffset offset = this.tabOffsets.Count > this.tabIdx ? (TabOffset)this.tabOffsets [this.tabIdx] : new TabOffset (0' 0); " is 121.
Long Statement,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,FormatSoftHyphen,The length of the statement  "	if (xPosition + hyphenWidth <= fittingRect.X + fittingRect.Width + Tolerance // If one word fits' but not the hyphen' the formatting must continue with the next leaf " is 165.
Long Statement,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,StartNewLine,The length of the statement  "	Rectangle rect = this.formattingArea.GetFittingRect (currentYPosition' this.currentVerticalInfo.height + BottomBorderOffset); " is 125.
Long Statement,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,StoreLineInformation,The length of the statement  "		contentArea = contentArea.Unite (this.formattingArea.GetFittingRect (this.currentYPosition' this.currentVerticalInfo.height)); " is 126.
Long Statement,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,StoreLineInformation,The length of the statement  "		contentArea = contentArea.Unite (this.formattingArea.GetFittingRect (this.currentYPosition + this.currentVerticalInfo.height' bottomBorderOffset)); " is 147.
Long Statement,MigraDoc.Rendering,PdfDocumentRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\PdfDocumentRenderer.cs,PrepareDocumentRenderer,The length of the statement  "		throw new InvalidOperationException (Messages.PropertyNotSetBefore ("DocumentRenderer"' MethodInfo.GetCurrentMethod ().Name)); " is 126.
Long Statement,MigraDoc.Rendering,PdfPrinter,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\PdfPrinter.cs,PrepareDocumentRenderer,The length of the statement  "		throw new InvalidOperationException (Messages.PropertyNotSetBefore ("DocumentRenderer"' MethodInfo.GetCurrentMethod ().Name)); " is 126.
Long Statement,MigraDoc.Rendering,TableRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\TableRenderer.cs,RenderBorders,The length of the statement  "	bordersRenderer.RenderHorizontally (BorderType.Bottom' leftPos - leftWidth' bottomPos' rightPos + rightWidth + leftWidth - leftPos); " is 132.
Long Statement,MigraDoc.Rendering,TableRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\TableRenderer.cs,RenderBorders,The length of the statement  "	bordersRenderer.RenderHorizontally (BorderType.Top' leftPos - leftWidth' topPos - topWidth' rightPos + rightWidth + leftWidth - leftPos); " is 137.
Long Statement,MigraDoc.Rendering,TableRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\TableRenderer.cs,RenderDiagonalBorders,The length of the statement  "	bordersRenderer.RenderDiagonally (BorderType.DiagonalDown' innerRect.X' innerRect.Y' innerRect.Width' innerRect.Height); " is 120.
Long Statement,MigraDoc.Rendering,TableRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\TableRenderer.cs,FormatCells,The length of the statement  "		FormattedCell formattedCell = new FormattedCell (cell' this.documentRenderer' this.mergedCells.GetEffectiveBorders (cell)' this.fieldInfos' 0' 0); " is 146.
Long Statement,MigraDoc.Rendering,TextFrameRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\TextFrameRenderer.cs,Format,The length of the statement  "	FormattedTextFrame formattedTextFrame = new FormattedTextFrame (this.textframe' this.documentRenderer' this.fieldInfos); " is 120.
Long Statement,MigraDoc.Rendering,TopDownFormatter,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\TopDownFormatter.cs,FormatOnAreas,The length of the statement  "			this.documentRenderer.OnPrepareDocumentProgress (this.documentRenderer.ProgressCompleted + idx + 1' this.documentRenderer.ProgressMaximum); " is 139.
Long Statement,MigraDoc.Rendering,TopDownFormatter,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\TopDownFormatter.cs,FormatOnAreas,The length of the statement  "			if (initialLayoutInfo.VerticalReference == VerticalReference.PreviousElement && initialLayoutInfo.Floating != Floating.None) " is 124.
Long Statement,MigraDoc.Rendering,TopDownFormatter,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\TopDownFormatter.cs,FormatOnAreas,The length of the statement  "				if (renderer.RenderInfo.LayoutInfo.VerticalReference == VerticalReference.PreviousElement && renderer.RenderInfo.LayoutInfo.Floating != Floating.None)//Added KlPo 12.07.07 " is 171.
Long Statement,MigraDoc.Rendering.ChartMapper,SeriesCollectionMapper,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.ChartMapper\SeriesCollectionMapper.cs,MapObject,The length of the statement  "			MigraDoc.DocumentObjectModel.Shapes.Charts.Chart chart = (MigraDoc.DocumentObjectModel.Shapes.Charts.Chart)MigraDoc.DocumentObjectModel.DocumentRelations.GetParentOfType (domSeries' typeof(MigraDoc.DocumentObjectModel.Shapes.Charts.Chart)); " is 240.
Long Statement,MigraDoc.Rendering.ChartMapper,XValuesMapper,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.ChartMapper\XValuesMapper.cs,MapObject,The length of the statement  "		MigraDoc.DocumentObjectModel.Shapes.Charts.XSeriesElements domXSeriesElements = domXSeries.GetValue ("XSeriesElements") as MigraDoc.DocumentObjectModel.Shapes.Charts.XSeriesElements; " is 182.
Complex Conditional,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,GetOutlineTitle,The conditional expression  "!ignoreBlank && (IsBlank (current) || IsTab (current) || IsLineBreak (current))"  is complex.
Empty Catch Block,MigraDoc.Rendering.Windows,DocumentPreview,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.Windows\DocumentPreview.xaml.cs,DdlUpdated,The method has an empty catch block.
Magic Number,MigraDoc.Rendering.Forms,DocumentPreview,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.Forms\DocumentPreviewWpf.cs,GetNewZoomFactor,The following statement contains a magic number: if (currentZoom <= 10 && !larger)  	return Windows.Zoom.Percent10;  else if (currentZoom >= 800 && larger)  	return Windows.Zoom.Percent800;  
Magic Number,MigraDoc.Rendering.Forms,DocumentPreview,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.Forms\DocumentPreviewWpf.cs,GetNewZoomFactor,The following statement contains a magic number: if (currentZoom <= 10 && !larger)  	return Windows.Zoom.Percent10;  else if (currentZoom >= 800 && larger)  	return Windows.Zoom.Percent800;  
Magic Number,MigraDoc.Rendering.Forms,DocumentPreview,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.Forms\DocumentPreviewWpf.cs,GetNewZoomFactor,The following statement contains a magic number: if (currentZoom >= 800 && larger)  	return Windows.Zoom.Percent800;  
Magic Number,MigraDoc.Rendering.Printing,MigraDocPrintDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.Printing\MigraDocPrintDocument.cs,OnPrintPage,The following statement contains a magic number: if (!e.Cancel) {  	PageSettings settings = e.PageSettings;  	try {  		Graphics graphics = e.Graphics;  		IntPtr hdc = graphics.GetHdc ();  		int xOffset = GetDeviceCaps (hdc' PHYSICALOFFSETX);  		int yOffset = GetDeviceCaps (hdc' PHYSICALOFFSETY);  		graphics.ReleaseHdc (hdc);  		graphics.TranslateTransform (-xOffset * 100 / graphics.DpiX' -yOffset * 100 / graphics.DpiY);  		// Recall: Width and Height are exchanged when settings.Landscape is true.  		XSize size = new XSize (e.PageSettings.Bounds.Width / 100.0 * 72' e.PageSettings.Bounds.Height / 100.0 * 72);  		float scale = 100f / 72f;  		graphics.ScaleTransform (scale' scale);  		// draw line A4 portrait  		//graphics.DrawLine(Pens.Red' 0' 0' 21f / 2.54f * 72' 29.7f / 2.54f * 72);  		#if WPF  		//#warning TODO WPFPDF  		// TODO WPFPDF  		#else  		          XGraphics gfx = XGraphics.FromGraphics(graphics' size);           this.renderer.RenderPage(gfx' this.pageNumber); #endif  	}  	catch {  		e.Cancel = true;  	}  	this.pageNumber++;  	this.pageCount--;  	e.HasMorePages = this.pageCount > 0;  }  
Magic Number,MigraDoc.Rendering.Printing,MigraDocPrintDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.Printing\MigraDocPrintDocument.cs,OnPrintPage,The following statement contains a magic number: if (!e.Cancel) {  	PageSettings settings = e.PageSettings;  	try {  		Graphics graphics = e.Graphics;  		IntPtr hdc = graphics.GetHdc ();  		int xOffset = GetDeviceCaps (hdc' PHYSICALOFFSETX);  		int yOffset = GetDeviceCaps (hdc' PHYSICALOFFSETY);  		graphics.ReleaseHdc (hdc);  		graphics.TranslateTransform (-xOffset * 100 / graphics.DpiX' -yOffset * 100 / graphics.DpiY);  		// Recall: Width and Height are exchanged when settings.Landscape is true.  		XSize size = new XSize (e.PageSettings.Bounds.Width / 100.0 * 72' e.PageSettings.Bounds.Height / 100.0 * 72);  		float scale = 100f / 72f;  		graphics.ScaleTransform (scale' scale);  		// draw line A4 portrait  		//graphics.DrawLine(Pens.Red' 0' 0' 21f / 2.54f * 72' 29.7f / 2.54f * 72);  		#if WPF  		//#warning TODO WPFPDF  		// TODO WPFPDF  		#else  		          XGraphics gfx = XGraphics.FromGraphics(graphics' size);           this.renderer.RenderPage(gfx' this.pageNumber); #endif  	}  	catch {  		e.Cancel = true;  	}  	this.pageNumber++;  	this.pageCount--;  	e.HasMorePages = this.pageCount > 0;  }  
Magic Number,MigraDoc.Rendering.Printing,MigraDocPrintDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.Printing\MigraDocPrintDocument.cs,OnPrintPage,The following statement contains a magic number: if (!e.Cancel) {  	PageSettings settings = e.PageSettings;  	try {  		Graphics graphics = e.Graphics;  		IntPtr hdc = graphics.GetHdc ();  		int xOffset = GetDeviceCaps (hdc' PHYSICALOFFSETX);  		int yOffset = GetDeviceCaps (hdc' PHYSICALOFFSETY);  		graphics.ReleaseHdc (hdc);  		graphics.TranslateTransform (-xOffset * 100 / graphics.DpiX' -yOffset * 100 / graphics.DpiY);  		// Recall: Width and Height are exchanged when settings.Landscape is true.  		XSize size = new XSize (e.PageSettings.Bounds.Width / 100.0 * 72' e.PageSettings.Bounds.Height / 100.0 * 72);  		float scale = 100f / 72f;  		graphics.ScaleTransform (scale' scale);  		// draw line A4 portrait  		//graphics.DrawLine(Pens.Red' 0' 0' 21f / 2.54f * 72' 29.7f / 2.54f * 72);  		#if WPF  		//#warning TODO WPFPDF  		// TODO WPFPDF  		#else  		          XGraphics gfx = XGraphics.FromGraphics(graphics' size);           this.renderer.RenderPage(gfx' this.pageNumber); #endif  	}  	catch {  		e.Cancel = true;  	}  	this.pageNumber++;  	this.pageCount--;  	e.HasMorePages = this.pageCount > 0;  }  
Magic Number,MigraDoc.Rendering.Printing,MigraDocPrintDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.Printing\MigraDocPrintDocument.cs,OnPrintPage,The following statement contains a magic number: if (!e.Cancel) {  	PageSettings settings = e.PageSettings;  	try {  		Graphics graphics = e.Graphics;  		IntPtr hdc = graphics.GetHdc ();  		int xOffset = GetDeviceCaps (hdc' PHYSICALOFFSETX);  		int yOffset = GetDeviceCaps (hdc' PHYSICALOFFSETY);  		graphics.ReleaseHdc (hdc);  		graphics.TranslateTransform (-xOffset * 100 / graphics.DpiX' -yOffset * 100 / graphics.DpiY);  		// Recall: Width and Height are exchanged when settings.Landscape is true.  		XSize size = new XSize (e.PageSettings.Bounds.Width / 100.0 * 72' e.PageSettings.Bounds.Height / 100.0 * 72);  		float scale = 100f / 72f;  		graphics.ScaleTransform (scale' scale);  		// draw line A4 portrait  		//graphics.DrawLine(Pens.Red' 0' 0' 21f / 2.54f * 72' 29.7f / 2.54f * 72);  		#if WPF  		//#warning TODO WPFPDF  		// TODO WPFPDF  		#else  		          XGraphics gfx = XGraphics.FromGraphics(graphics' size);           this.renderer.RenderPage(gfx' this.pageNumber); #endif  	}  	catch {  		e.Cancel = true;  	}  	this.pageNumber++;  	this.pageCount--;  	e.HasMorePages = this.pageCount > 0;  }  
Magic Number,MigraDoc.Rendering.Printing,MigraDocPrintDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.Printing\MigraDocPrintDocument.cs,OnPrintPage,The following statement contains a magic number: if (!e.Cancel) {  	PageSettings settings = e.PageSettings;  	try {  		Graphics graphics = e.Graphics;  		IntPtr hdc = graphics.GetHdc ();  		int xOffset = GetDeviceCaps (hdc' PHYSICALOFFSETX);  		int yOffset = GetDeviceCaps (hdc' PHYSICALOFFSETY);  		graphics.ReleaseHdc (hdc);  		graphics.TranslateTransform (-xOffset * 100 / graphics.DpiX' -yOffset * 100 / graphics.DpiY);  		// Recall: Width and Height are exchanged when settings.Landscape is true.  		XSize size = new XSize (e.PageSettings.Bounds.Width / 100.0 * 72' e.PageSettings.Bounds.Height / 100.0 * 72);  		float scale = 100f / 72f;  		graphics.ScaleTransform (scale' scale);  		// draw line A4 portrait  		//graphics.DrawLine(Pens.Red' 0' 0' 21f / 2.54f * 72' 29.7f / 2.54f * 72);  		#if WPF  		//#warning TODO WPFPDF  		// TODO WPFPDF  		#else  		          XGraphics gfx = XGraphics.FromGraphics(graphics' size);           this.renderer.RenderPage(gfx' this.pageNumber); #endif  	}  	catch {  		e.Cancel = true;  	}  	this.pageNumber++;  	this.pageCount--;  	e.HasMorePages = this.pageCount > 0;  }  
Magic Number,MigraDoc.Rendering.Printing,MigraDocPrintDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.Printing\MigraDocPrintDocument.cs,OnPrintPage,The following statement contains a magic number: if (!e.Cancel) {  	PageSettings settings = e.PageSettings;  	try {  		Graphics graphics = e.Graphics;  		IntPtr hdc = graphics.GetHdc ();  		int xOffset = GetDeviceCaps (hdc' PHYSICALOFFSETX);  		int yOffset = GetDeviceCaps (hdc' PHYSICALOFFSETY);  		graphics.ReleaseHdc (hdc);  		graphics.TranslateTransform (-xOffset * 100 / graphics.DpiX' -yOffset * 100 / graphics.DpiY);  		// Recall: Width and Height are exchanged when settings.Landscape is true.  		XSize size = new XSize (e.PageSettings.Bounds.Width / 100.0 * 72' e.PageSettings.Bounds.Height / 100.0 * 72);  		float scale = 100f / 72f;  		graphics.ScaleTransform (scale' scale);  		// draw line A4 portrait  		//graphics.DrawLine(Pens.Red' 0' 0' 21f / 2.54f * 72' 29.7f / 2.54f * 72);  		#if WPF  		//#warning TODO WPFPDF  		// TODO WPFPDF  		#else  		          XGraphics gfx = XGraphics.FromGraphics(graphics' size);           this.renderer.RenderPage(gfx' this.pageNumber); #endif  	}  	catch {  		e.Cancel = true;  	}  	this.pageNumber++;  	this.pageCount--;  	e.HasMorePages = this.pageCount > 0;  }  
Magic Number,MigraDoc.Rendering.Printing,MigraDocPrintDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.Printing\MigraDocPrintDocument.cs,OnPrintPage,The following statement contains a magic number: try {  	Graphics graphics = e.Graphics;  	IntPtr hdc = graphics.GetHdc ();  	int xOffset = GetDeviceCaps (hdc' PHYSICALOFFSETX);  	int yOffset = GetDeviceCaps (hdc' PHYSICALOFFSETY);  	graphics.ReleaseHdc (hdc);  	graphics.TranslateTransform (-xOffset * 100 / graphics.DpiX' -yOffset * 100 / graphics.DpiY);  	// Recall: Width and Height are exchanged when settings.Landscape is true.  	XSize size = new XSize (e.PageSettings.Bounds.Width / 100.0 * 72' e.PageSettings.Bounds.Height / 100.0 * 72);  	float scale = 100f / 72f;  	graphics.ScaleTransform (scale' scale);  	// draw line A4 portrait  	//graphics.DrawLine(Pens.Red' 0' 0' 21f / 2.54f * 72' 29.7f / 2.54f * 72);  	#if WPF  	//#warning TODO WPFPDF  	// TODO WPFPDF  	#else  	          XGraphics gfx = XGraphics.FromGraphics(graphics' size);           this.renderer.RenderPage(gfx' this.pageNumber); #endif  }  catch {  	e.Cancel = true;  }  
Magic Number,MigraDoc.Rendering.Printing,MigraDocPrintDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.Printing\MigraDocPrintDocument.cs,OnPrintPage,The following statement contains a magic number: try {  	Graphics graphics = e.Graphics;  	IntPtr hdc = graphics.GetHdc ();  	int xOffset = GetDeviceCaps (hdc' PHYSICALOFFSETX);  	int yOffset = GetDeviceCaps (hdc' PHYSICALOFFSETY);  	graphics.ReleaseHdc (hdc);  	graphics.TranslateTransform (-xOffset * 100 / graphics.DpiX' -yOffset * 100 / graphics.DpiY);  	// Recall: Width and Height are exchanged when settings.Landscape is true.  	XSize size = new XSize (e.PageSettings.Bounds.Width / 100.0 * 72' e.PageSettings.Bounds.Height / 100.0 * 72);  	float scale = 100f / 72f;  	graphics.ScaleTransform (scale' scale);  	// draw line A4 portrait  	//graphics.DrawLine(Pens.Red' 0' 0' 21f / 2.54f * 72' 29.7f / 2.54f * 72);  	#if WPF  	//#warning TODO WPFPDF  	// TODO WPFPDF  	#else  	          XGraphics gfx = XGraphics.FromGraphics(graphics' size);           this.renderer.RenderPage(gfx' this.pageNumber); #endif  }  catch {  	e.Cancel = true;  }  
Magic Number,MigraDoc.Rendering.Printing,MigraDocPrintDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.Printing\MigraDocPrintDocument.cs,OnPrintPage,The following statement contains a magic number: try {  	Graphics graphics = e.Graphics;  	IntPtr hdc = graphics.GetHdc ();  	int xOffset = GetDeviceCaps (hdc' PHYSICALOFFSETX);  	int yOffset = GetDeviceCaps (hdc' PHYSICALOFFSETY);  	graphics.ReleaseHdc (hdc);  	graphics.TranslateTransform (-xOffset * 100 / graphics.DpiX' -yOffset * 100 / graphics.DpiY);  	// Recall: Width and Height are exchanged when settings.Landscape is true.  	XSize size = new XSize (e.PageSettings.Bounds.Width / 100.0 * 72' e.PageSettings.Bounds.Height / 100.0 * 72);  	float scale = 100f / 72f;  	graphics.ScaleTransform (scale' scale);  	// draw line A4 portrait  	//graphics.DrawLine(Pens.Red' 0' 0' 21f / 2.54f * 72' 29.7f / 2.54f * 72);  	#if WPF  	//#warning TODO WPFPDF  	// TODO WPFPDF  	#else  	          XGraphics gfx = XGraphics.FromGraphics(graphics' size);           this.renderer.RenderPage(gfx' this.pageNumber); #endif  }  catch {  	e.Cancel = true;  }  
Magic Number,MigraDoc.Rendering.Printing,MigraDocPrintDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.Printing\MigraDocPrintDocument.cs,OnPrintPage,The following statement contains a magic number: try {  	Graphics graphics = e.Graphics;  	IntPtr hdc = graphics.GetHdc ();  	int xOffset = GetDeviceCaps (hdc' PHYSICALOFFSETX);  	int yOffset = GetDeviceCaps (hdc' PHYSICALOFFSETY);  	graphics.ReleaseHdc (hdc);  	graphics.TranslateTransform (-xOffset * 100 / graphics.DpiX' -yOffset * 100 / graphics.DpiY);  	// Recall: Width and Height are exchanged when settings.Landscape is true.  	XSize size = new XSize (e.PageSettings.Bounds.Width / 100.0 * 72' e.PageSettings.Bounds.Height / 100.0 * 72);  	float scale = 100f / 72f;  	graphics.ScaleTransform (scale' scale);  	// draw line A4 portrait  	//graphics.DrawLine(Pens.Red' 0' 0' 21f / 2.54f * 72' 29.7f / 2.54f * 72);  	#if WPF  	//#warning TODO WPFPDF  	// TODO WPFPDF  	#else  	          XGraphics gfx = XGraphics.FromGraphics(graphics' size);           this.renderer.RenderPage(gfx' this.pageNumber); #endif  }  catch {  	e.Cancel = true;  }  
Magic Number,MigraDoc.Rendering.Printing,MigraDocPrintDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.Printing\MigraDocPrintDocument.cs,OnPrintPage,The following statement contains a magic number: try {  	Graphics graphics = e.Graphics;  	IntPtr hdc = graphics.GetHdc ();  	int xOffset = GetDeviceCaps (hdc' PHYSICALOFFSETX);  	int yOffset = GetDeviceCaps (hdc' PHYSICALOFFSETY);  	graphics.ReleaseHdc (hdc);  	graphics.TranslateTransform (-xOffset * 100 / graphics.DpiX' -yOffset * 100 / graphics.DpiY);  	// Recall: Width and Height are exchanged when settings.Landscape is true.  	XSize size = new XSize (e.PageSettings.Bounds.Width / 100.0 * 72' e.PageSettings.Bounds.Height / 100.0 * 72);  	float scale = 100f / 72f;  	graphics.ScaleTransform (scale' scale);  	// draw line A4 portrait  	//graphics.DrawLine(Pens.Red' 0' 0' 21f / 2.54f * 72' 29.7f / 2.54f * 72);  	#if WPF  	//#warning TODO WPFPDF  	// TODO WPFPDF  	#else  	          XGraphics gfx = XGraphics.FromGraphics(graphics' size);           this.renderer.RenderPage(gfx' this.pageNumber); #endif  }  catch {  	e.Cancel = true;  }  
Magic Number,MigraDoc.Rendering.Printing,MigraDocPrintDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.Printing\MigraDocPrintDocument.cs,OnPrintPage,The following statement contains a magic number: try {  	Graphics graphics = e.Graphics;  	IntPtr hdc = graphics.GetHdc ();  	int xOffset = GetDeviceCaps (hdc' PHYSICALOFFSETX);  	int yOffset = GetDeviceCaps (hdc' PHYSICALOFFSETY);  	graphics.ReleaseHdc (hdc);  	graphics.TranslateTransform (-xOffset * 100 / graphics.DpiX' -yOffset * 100 / graphics.DpiY);  	// Recall: Width and Height are exchanged when settings.Landscape is true.  	XSize size = new XSize (e.PageSettings.Bounds.Width / 100.0 * 72' e.PageSettings.Bounds.Height / 100.0 * 72);  	float scale = 100f / 72f;  	graphics.ScaleTransform (scale' scale);  	// draw line A4 portrait  	//graphics.DrawLine(Pens.Red' 0' 0' 21f / 2.54f * 72' 29.7f / 2.54f * 72);  	#if WPF  	//#warning TODO WPFPDF  	// TODO WPFPDF  	#else  	          XGraphics gfx = XGraphics.FromGraphics(graphics' size);           this.renderer.RenderPage(gfx' this.pageNumber); #endif  }  catch {  	e.Cancel = true;  }  
Magic Number,MigraDoc.Rendering.Printing,MigraDocPrintDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.Printing\MigraDocPrintDocument.cs,OnPrintPage,The following statement contains a magic number: graphics.TranslateTransform (-xOffset * 100 / graphics.DpiX' -yOffset * 100 / graphics.DpiY);  
Magic Number,MigraDoc.Rendering.Printing,MigraDocPrintDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.Printing\MigraDocPrintDocument.cs,OnPrintPage,The following statement contains a magic number: graphics.TranslateTransform (-xOffset * 100 / graphics.DpiX' -yOffset * 100 / graphics.DpiY);  
Magic Number,MigraDoc.Rendering,ColorHelper,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ColorHelper.cs,ToXColor,The following statement contains a magic number: if (cmyk)  	return XColor.FromCmyk (color.Alpha / 100.0' color.C / 100.0' color.M / 100.0' color.Y / 100.0' color.K / 100.0);  else  	return XColor.FromArgb ((int)color.Argb);  
Magic Number,MigraDoc.Rendering,ColorHelper,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ColorHelper.cs,ToXColor,The following statement contains a magic number: if (cmyk)  	return XColor.FromCmyk (color.Alpha / 100.0' color.C / 100.0' color.M / 100.0' color.Y / 100.0' color.K / 100.0);  else  	return XColor.FromArgb ((int)color.Argb);  
Magic Number,MigraDoc.Rendering,ColorHelper,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ColorHelper.cs,ToXColor,The following statement contains a magic number: if (cmyk)  	return XColor.FromCmyk (color.Alpha / 100.0' color.C / 100.0' color.M / 100.0' color.Y / 100.0' color.K / 100.0);  else  	return XColor.FromArgb ((int)color.Argb);  
Magic Number,MigraDoc.Rendering,ColorHelper,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ColorHelper.cs,ToXColor,The following statement contains a magic number: if (cmyk)  	return XColor.FromCmyk (color.Alpha / 100.0' color.C / 100.0' color.M / 100.0' color.Y / 100.0' color.K / 100.0);  else  	return XColor.FromArgb ((int)color.Argb);  
Magic Number,MigraDoc.Rendering,ColorHelper,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ColorHelper.cs,ToXColor,The following statement contains a magic number: if (cmyk)  	return XColor.FromCmyk (color.Alpha / 100.0' color.C / 100.0' color.M / 100.0' color.Y / 100.0' color.K / 100.0);  else  	return XColor.FromArgb ((int)color.Argb);  
Magic Number,MigraDoc.Rendering,ColorHelper,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ColorHelper.cs,ToXColor,The following statement contains a magic number: return XColor.FromCmyk (color.Alpha / 100.0' color.C / 100.0' color.M / 100.0' color.Y / 100.0' color.K / 100.0);  
Magic Number,MigraDoc.Rendering,ColorHelper,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ColorHelper.cs,ToXColor,The following statement contains a magic number: return XColor.FromCmyk (color.Alpha / 100.0' color.C / 100.0' color.M / 100.0' color.Y / 100.0' color.K / 100.0);  
Magic Number,MigraDoc.Rendering,ColorHelper,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ColorHelper.cs,ToXColor,The following statement contains a magic number: return XColor.FromCmyk (color.Alpha / 100.0' color.C / 100.0' color.M / 100.0' color.Y / 100.0' color.K / 100.0);  
Magic Number,MigraDoc.Rendering,ColorHelper,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ColorHelper.cs,ToXColor,The following statement contains a magic number: return XColor.FromCmyk (color.Alpha / 100.0' color.C / 100.0' color.M / 100.0' color.Y / 100.0' color.K / 100.0);  
Magic Number,MigraDoc.Rendering,ColorHelper,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ColorHelper.cs,ToXColor,The following statement contains a magic number: return XColor.FromCmyk (color.Alpha / 100.0' color.C / 100.0' color.M / 100.0' color.Y / 100.0' color.K / 100.0);  
Magic Number,MigraDoc.Rendering,BordersRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\BordersRenderer.cs,GetWidth,The following statement contains a magic number: if (border != null) {  	if (!border.IsNull ("Visible") && !border.Visible)  		return 0;  	if (border != null && !border.IsNull ("Width"))  		return border.Width.Point;  	if (!border.IsNull ("Color") || !border.IsNull ("Style") || border.Visible) {  		if (!this.borders.IsNull ("Width"))  			return this.borders.Width.Point;  		return 0.5;  	}  }  else if (!(type == BorderType.DiagonalDown || type == BorderType.DiagonalUp)) {  	if (!this.borders.IsNull ("Visible") && !this.borders.Visible)  		return 0;  	if (!this.borders.IsNull ("Width"))  		return this.borders.Width.Point;  	if (!this.borders.IsNull ("Color") || !this.borders.IsNull ("Style") || this.borders.Visible)  		return 0.5;  }  
Magic Number,MigraDoc.Rendering,BordersRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\BordersRenderer.cs,GetWidth,The following statement contains a magic number: if (border != null) {  	if (!border.IsNull ("Visible") && !border.Visible)  		return 0;  	if (border != null && !border.IsNull ("Width"))  		return border.Width.Point;  	if (!border.IsNull ("Color") || !border.IsNull ("Style") || border.Visible) {  		if (!this.borders.IsNull ("Width"))  			return this.borders.Width.Point;  		return 0.5;  	}  }  else if (!(type == BorderType.DiagonalDown || type == BorderType.DiagonalUp)) {  	if (!this.borders.IsNull ("Visible") && !this.borders.Visible)  		return 0;  	if (!this.borders.IsNull ("Width"))  		return this.borders.Width.Point;  	if (!this.borders.IsNull ("Color") || !this.borders.IsNull ("Style") || this.borders.Visible)  		return 0.5;  }  
Magic Number,MigraDoc.Rendering,BordersRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\BordersRenderer.cs,GetWidth,The following statement contains a magic number: if (!border.IsNull ("Color") || !border.IsNull ("Style") || border.Visible) {  	if (!this.borders.IsNull ("Width"))  		return this.borders.Width.Point;  	return 0.5;  }  
Magic Number,MigraDoc.Rendering,BordersRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\BordersRenderer.cs,GetWidth,The following statement contains a magic number: return 0.5;  
Magic Number,MigraDoc.Rendering,BordersRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\BordersRenderer.cs,GetWidth,The following statement contains a magic number: if (!(type == BorderType.DiagonalDown || type == BorderType.DiagonalUp)) {  	if (!this.borders.IsNull ("Visible") && !this.borders.Visible)  		return 0;  	if (!this.borders.IsNull ("Width"))  		return this.borders.Width.Point;  	if (!this.borders.IsNull ("Color") || !this.borders.IsNull ("Style") || this.borders.Visible)  		return 0.5;  }  
Magic Number,MigraDoc.Rendering,BordersRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\BordersRenderer.cs,GetWidth,The following statement contains a magic number: if (!this.borders.IsNull ("Color") || !this.borders.IsNull ("Style") || this.borders.Visible)  	return 0.5;  
Magic Number,MigraDoc.Rendering,BordersRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\BordersRenderer.cs,GetWidth,The following statement contains a magic number: return 0.5;  
Magic Number,MigraDoc.Rendering,BordersRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\BordersRenderer.cs,RenderVertically,The following statement contains a magic number: left += borderWidth / 2;  
Magic Number,MigraDoc.Rendering,BordersRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\BordersRenderer.cs,RenderHorizontally,The following statement contains a magic number: top += borderWidth / 2;  
Magic Number,MigraDoc.Rendering,BordersRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\BordersRenderer.cs,GetPen,The following statement contains a magic number: switch (style) {  case BorderStyle.DashDot:  	pen.DashStyle = XDashStyle.DashDot;  	break;  case BorderStyle.DashDotDot:  	pen.DashStyle = XDashStyle.DashDotDot;  	break;  case BorderStyle.DashLargeGap:  	pen.DashPattern = new double[] {  		3'  		3  	};  	break;  case BorderStyle.DashSmallGap:  	pen.DashPattern = new double[] {  		5'  		1  	};  	break;  case BorderStyle.Dot:  	pen.DashStyle = XDashStyle.Dot;  	break;  case BorderStyle.Single:  default:  	pen.DashStyle = XDashStyle.Solid;  	break;  }  
Magic Number,MigraDoc.Rendering,BordersRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\BordersRenderer.cs,GetPen,The following statement contains a magic number: switch (style) {  case BorderStyle.DashDot:  	pen.DashStyle = XDashStyle.DashDot;  	break;  case BorderStyle.DashDotDot:  	pen.DashStyle = XDashStyle.DashDotDot;  	break;  case BorderStyle.DashLargeGap:  	pen.DashPattern = new double[] {  		3'  		3  	};  	break;  case BorderStyle.DashSmallGap:  	pen.DashPattern = new double[] {  		5'  		1  	};  	break;  case BorderStyle.Dot:  	pen.DashStyle = XDashStyle.Dot;  	break;  case BorderStyle.Single:  default:  	pen.DashStyle = XDashStyle.Solid;  	break;  }  
Magic Number,MigraDoc.Rendering,BordersRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\BordersRenderer.cs,GetPen,The following statement contains a magic number: switch (style) {  case BorderStyle.DashDot:  	pen.DashStyle = XDashStyle.DashDot;  	break;  case BorderStyle.DashDotDot:  	pen.DashStyle = XDashStyle.DashDotDot;  	break;  case BorderStyle.DashLargeGap:  	pen.DashPattern = new double[] {  		3'  		3  	};  	break;  case BorderStyle.DashSmallGap:  	pen.DashPattern = new double[] {  		5'  		1  	};  	break;  case BorderStyle.Dot:  	pen.DashStyle = XDashStyle.Dot;  	break;  case BorderStyle.Single:  default:  	pen.DashStyle = XDashStyle.Solid;  	break;  }  
Magic Number,MigraDoc.Rendering,BordersRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\BordersRenderer.cs,GetPen,The following statement contains a magic number: pen.DashPattern = new double[] {  	3'  	3  };  
Magic Number,MigraDoc.Rendering,BordersRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\BordersRenderer.cs,GetPen,The following statement contains a magic number: pen.DashPattern = new double[] {  	3'  	3  };  
Magic Number,MigraDoc.Rendering,BordersRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\BordersRenderer.cs,GetPen,The following statement contains a magic number: pen.DashPattern = new double[] {  	5'  	1  };  
Magic Number,MigraDoc.Rendering,ChartRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ChartRenderer.cs,AlignVertically,The following statement contains a magic number: switch (vAlign) {  case VerticalAlignment.Bottom:  	return bottom - height;  case VerticalAlignment.Center:  	return (top + bottom - height) / 2;  default:  	return top;  }  
Magic Number,MigraDoc.Rendering,ChartRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ChartRenderer.cs,AlignVertically,The following statement contains a magic number: return (top + bottom - height) / 2;  
Magic Number,MigraDoc.Rendering,DocumentRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\DocumentRenderer.cs,PrepareDocument,The following statement contains a magic number: this.previousListNumbers = new Hashtable (3);  
Magic Number,MigraDoc.Rendering,FontHandler,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FontHandler.cs,GetSubSuperScaling,The following statement contains a magic number: return 0.8 * GetAscent (font) / font.GetHeight ();  
Magic Number,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,CalcContentRect,The following statement contains a magic number: if (pageSetup.MirrorMargins)  	x = page % 2 == 0 ? pageSetup.RightMargin.Point : pageSetup.LeftMargin.Point;  else  	x = pageSetup.LeftMargin.Point;  
Magic Number,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,CalcContentRect,The following statement contains a magic number: x = page % 2 == 0 ? pageSetup.RightMargin.Point : pageSetup.LeftMargin.Point;  
Magic Number,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,GetHeaderArea,The following statement contains a magic number: if (pageSetup.MirrorMargins && page % 2 == 0)  	xPos = pageSetup.RightMargin.Point;  else  	xPos = pageSetup.LeftMargin.Point;  
Magic Number,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,GetFooterArea,The following statement contains a magic number: if (pageSetup.MirrorMargins && page % 2 == 0)  	xPos = pageSetup.RightMargin.Point;  else  	xPos = pageSetup.LeftMargin.Point;  
Magic Number,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,ChooseHeaderFooter,The following statement contains a magic number: if (pagePos == PagePosition.Even || this.currentPage % 2 == 0) {  	if (pageSetup.OddAndEvenPagesHeaderFooter)  		return (HeaderFooter)hfs.GetValue ("EvenPage"' GV.ReadOnly);  }  
Magic Number,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,GetCurrentAlignment,The following statement contains a magic number: if (align == ElementAlignment.Inside) {  	if (currentPage % 2 == 0)  		align = ElementAlignment.Far;  	else  		align = ElementAlignment.Near;  }  else if (align == ElementAlignment.Outside) {  	if (currentPage % 2 == 0)  		align = ElementAlignment.Near;  	else  		align = ElementAlignment.Far;  }  
Magic Number,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,GetCurrentAlignment,The following statement contains a magic number: if (align == ElementAlignment.Inside) {  	if (currentPage % 2 == 0)  		align = ElementAlignment.Far;  	else  		align = ElementAlignment.Near;  }  else if (align == ElementAlignment.Outside) {  	if (currentPage % 2 == 0)  		align = ElementAlignment.Near;  	else  		align = ElementAlignment.Far;  }  
Magic Number,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,GetCurrentAlignment,The following statement contains a magic number: if (currentPage % 2 == 0)  	align = ElementAlignment.Far;  else  	align = ElementAlignment.Near;  
Magic Number,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,GetCurrentAlignment,The following statement contains a magic number: if (align == ElementAlignment.Outside) {  	if (currentPage % 2 == 0)  		align = ElementAlignment.Near;  	else  		align = ElementAlignment.Far;  }  
Magic Number,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,GetCurrentAlignment,The following statement contains a magic number: if (currentPage % 2 == 0)  	align = ElementAlignment.Near;  else  	align = ElementAlignment.Far;  
Magic Number,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,PositionHorizontallyToMargin,The following statement contains a magic number: switch (align) {  case ElementAlignment.Near:  	if (layoutInfo.Left != 0) {  		layoutInfo.ContentArea.X += layoutInfo.Left;  		return true;  	}  	else if (layoutInfo.MarginLeft != 0) {  		layoutInfo.ContentArea.X += layoutInfo.MarginLeft;  		return true;  	}  	return false;  case ElementAlignment.Far:  	XUnit xPos = rect.X + rect.Width;  	xPos -= layoutInfo.ContentArea.Width;  	xPos -= layoutInfo.MarginRight;  	layoutInfo.ContentArea.X = xPos;  	return true;  case ElementAlignment.Center:  	xPos = rect.Width;  	xPos -= layoutInfo.ContentArea.Width;  	xPos = rect.X + xPos / 2;  	layoutInfo.ContentArea.X = xPos;  	return true;  }  
Magic Number,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,PositionHorizontallyToMargin,The following statement contains a magic number: xPos = rect.X + xPos / 2;  
Magic Number,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,PositionHorizontallyToPage,The following statement contains a magic number: switch (align) {  case ElementAlignment.Near:  	#if true  	// Allow negative offsets (supporting "Anschnitt" for images)  	if (layoutInfo.HorizontalReference == HorizontalReference.Page || layoutInfo.HorizontalReference == HorizontalReference.PageMargin)  		xPos = layoutInfo.MarginLeft;  	// Ignore layoutInfo.Left if absolute position is specified  	else  		xPos = Math.Max (layoutInfo.MarginLeft' layoutInfo.Left);  	#else  	          //!!!delTHHO 22.10.2008            xPos = Math.Max(layoutInfo.MarginLeft' layoutInfo.Left); #endif  	layoutInfo.ContentArea.X = xPos;  	break;  case ElementAlignment.Far:  	xPos = this.currentSection.PageSetup.PageWidth.Point;  	xPos -= layoutInfo.ContentArea.Width;  	xPos -= layoutInfo.MarginRight;  	layoutInfo.ContentArea.X = xPos;  	break;  case ElementAlignment.Center:  	xPos = this.currentSection.PageSetup.PageWidth.Point;  	xPos -= layoutInfo.ContentArea.Width;  	xPos /= 2;  	layoutInfo.ContentArea.X = xPos;  	break;  }  
Magic Number,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,PositionHorizontallyToPage,The following statement contains a magic number: xPos /= 2;  
Magic Number,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,PositionVerticallyToMargin,The following statement contains a magic number: switch (layoutInfo.VerticalAlignment) {  case ElementAlignment.Near:  	yPos = rect.Y;  	//Added KlPo 12.07.07:  	if (layoutInfo.Top == 0)  		yPos += layoutInfo.MarginTop;  	else  		yPos += layoutInfo.Top;  	//Removed KlPo 12.07.07  	//yPos += Math.Max(layoutInfo.Top' layoutInfo.MarginTop);  	layoutInfo.ContentArea.Y = yPos;  	break;  case ElementAlignment.Far:  	yPos = rect.Y + rect.Height;  	yPos -= layoutInfo.ContentArea.Height;  	yPos -= layoutInfo.MarginBottom;  	layoutInfo.ContentArea.Y = yPos;  	break;  case ElementAlignment.Center:  	yPos = rect.Height;  	yPos -= layoutInfo.ContentArea.Height;  	yPos = rect.Y + yPos / 2;  	layoutInfo.ContentArea.Y = yPos;  	break;  }  
Magic Number,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,PositionVerticallyToMargin,The following statement contains a magic number: yPos = rect.Y + yPos / 2;  
Magic Number,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,NeedsEmptyPage,The following statement contains a magic number: if (startOnOddPage)  	return nextPage % 2 == 0;  else if (startOnEvenPage)  	return nextPage % 2 == 1;  
Magic Number,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,NeedsEmptyPage,The following statement contains a magic number: if (startOnOddPage)  	return nextPage % 2 == 0;  else if (startOnEvenPage)  	return nextPage % 2 == 1;  
Magic Number,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,NeedsEmptyPage,The following statement contains a magic number: return nextPage % 2 == 0;  
Magic Number,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,NeedsEmptyPage,The following statement contains a magic number: if (startOnEvenPage)  	return nextPage % 2 == 1;  
Magic Number,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,NeedsEmptyPage,The following statement contains a magic number: return nextPage % 2 == 1;  
Magic Number,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,PositionVerticallyToPage,The following statement contains a magic number: switch (layoutInfo.VerticalAlignment) {  case ElementAlignment.Near:  	yPos = Math.Max (layoutInfo.MarginTop' layoutInfo.Top);  	layoutInfo.ContentArea.Y = yPos;  	break;  case ElementAlignment.Far:  	yPos = this.currentSection.PageSetup.PageHeight.Point;  	yPos -= layoutInfo.ContentArea.Height;  	yPos -= layoutInfo.MarginBottom;  	layoutInfo.ContentArea.Y = yPos;  	break;  case ElementAlignment.Center:  	yPos = this.currentSection.PageSetup.PageHeight.Point;  	yPos -= layoutInfo.ContentArea.Height;  	yPos /= 2;  	layoutInfo.ContentArea.Y = yPos;  	break;  }  
Magic Number,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,PositionVerticallyToPage,The following statement contains a magic number: yPos /= 2;  
Magic Number,MigraDoc.Rendering,FormattedTextFrame,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedTextFrame.cs,CalcContentRect,The following statement contains a magic number: if (this.textframe.Orientation == TextOrientation.Horizontal || this.textframe.Orientation == TextOrientation.HorizontalRotatedFarEast) {  	width = this.textframe.Width.Point;  	xOffset += this.textframe.MarginLeft;  	yOffset += this.textframe.MarginTop;  	width -= xOffset;  	width -= this.textframe.MarginRight + lineWidth / 2;  }  else {  	width = this.textframe.Height.Point;  	if (this.textframe.Orientation == TextOrientation.Upward) {  		xOffset += this.textframe.MarginBottom;  		yOffset += this.textframe.MarginLeft;  		width -= xOffset;  		width -= this.textframe.MarginTop + lineWidth / 2;  	}  	else {  		xOffset += this.textframe.MarginTop;  		yOffset += this.textframe.MarginRight;  		width -= xOffset;  		width -= this.textframe.MarginBottom + lineWidth / 2;  	}  }  
Magic Number,MigraDoc.Rendering,FormattedTextFrame,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedTextFrame.cs,CalcContentRect,The following statement contains a magic number: if (this.textframe.Orientation == TextOrientation.Horizontal || this.textframe.Orientation == TextOrientation.HorizontalRotatedFarEast) {  	width = this.textframe.Width.Point;  	xOffset += this.textframe.MarginLeft;  	yOffset += this.textframe.MarginTop;  	width -= xOffset;  	width -= this.textframe.MarginRight + lineWidth / 2;  }  else {  	width = this.textframe.Height.Point;  	if (this.textframe.Orientation == TextOrientation.Upward) {  		xOffset += this.textframe.MarginBottom;  		yOffset += this.textframe.MarginLeft;  		width -= xOffset;  		width -= this.textframe.MarginTop + lineWidth / 2;  	}  	else {  		xOffset += this.textframe.MarginTop;  		yOffset += this.textframe.MarginRight;  		width -= xOffset;  		width -= this.textframe.MarginBottom + lineWidth / 2;  	}  }  
Magic Number,MigraDoc.Rendering,FormattedTextFrame,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedTextFrame.cs,CalcContentRect,The following statement contains a magic number: if (this.textframe.Orientation == TextOrientation.Horizontal || this.textframe.Orientation == TextOrientation.HorizontalRotatedFarEast) {  	width = this.textframe.Width.Point;  	xOffset += this.textframe.MarginLeft;  	yOffset += this.textframe.MarginTop;  	width -= xOffset;  	width -= this.textframe.MarginRight + lineWidth / 2;  }  else {  	width = this.textframe.Height.Point;  	if (this.textframe.Orientation == TextOrientation.Upward) {  		xOffset += this.textframe.MarginBottom;  		yOffset += this.textframe.MarginLeft;  		width -= xOffset;  		width -= this.textframe.MarginTop + lineWidth / 2;  	}  	else {  		xOffset += this.textframe.MarginTop;  		yOffset += this.textframe.MarginRight;  		width -= xOffset;  		width -= this.textframe.MarginBottom + lineWidth / 2;  	}  }  
Magic Number,MigraDoc.Rendering,FormattedTextFrame,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedTextFrame.cs,CalcContentRect,The following statement contains a magic number: width -= this.textframe.MarginRight + lineWidth / 2;  
Magic Number,MigraDoc.Rendering,FormattedTextFrame,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedTextFrame.cs,CalcContentRect,The following statement contains a magic number: if (this.textframe.Orientation == TextOrientation.Upward) {  	xOffset += this.textframe.MarginBottom;  	yOffset += this.textframe.MarginLeft;  	width -= xOffset;  	width -= this.textframe.MarginTop + lineWidth / 2;  }  else {  	xOffset += this.textframe.MarginTop;  	yOffset += this.textframe.MarginRight;  	width -= xOffset;  	width -= this.textframe.MarginBottom + lineWidth / 2;  }  
Magic Number,MigraDoc.Rendering,FormattedTextFrame,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedTextFrame.cs,CalcContentRect,The following statement contains a magic number: if (this.textframe.Orientation == TextOrientation.Upward) {  	xOffset += this.textframe.MarginBottom;  	yOffset += this.textframe.MarginLeft;  	width -= xOffset;  	width -= this.textframe.MarginTop + lineWidth / 2;  }  else {  	xOffset += this.textframe.MarginTop;  	yOffset += this.textframe.MarginRight;  	width -= xOffset;  	width -= this.textframe.MarginBottom + lineWidth / 2;  }  
Magic Number,MigraDoc.Rendering,FormattedTextFrame,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedTextFrame.cs,CalcContentRect,The following statement contains a magic number: width -= this.textframe.MarginTop + lineWidth / 2;  
Magic Number,MigraDoc.Rendering,FormattedTextFrame,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedTextFrame.cs,CalcContentRect,The following statement contains a magic number: width -= this.textframe.MarginBottom + lineWidth / 2;  
Magic Number,MigraDoc.Rendering,FormattedTextFrame,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedTextFrame.cs,PositionHorizontally,The following statement contains a magic number: switch (layoutInfo.HorizontalAlignment) {  case ElementAlignment.Near:  	if (layoutInfo.Left != 0) {  		layoutInfo.ContentArea.X += layoutInfo.Left;  		return true;  	}  	return false;  case ElementAlignment.Far:  	XUnit xPos = rect.X + rect.Width;  	xPos -= layoutInfo.ContentArea.Width;  	xPos -= layoutInfo.MarginRight;  	layoutInfo.ContentArea.X = xPos;  	return true;  case ElementAlignment.Center:  	xPos = rect.Width;  	xPos -= layoutInfo.ContentArea.Width;  	xPos = rect.X + xPos / 2;  	layoutInfo.ContentArea.X = xPos;  	return true;  }  
Magic Number,MigraDoc.Rendering,FormattedTextFrame,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedTextFrame.cs,PositionHorizontally,The following statement contains a magic number: xPos = rect.X + xPos / 2;  
Magic Number,MigraDoc.Rendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ImageRenderer.cs,CalculateImageDimensions,The following statement contains a magic number: if (formatInfo.failure == ImageFailure.None) {  	XImage xImage = null;  	try {  		xImage = XImage.FromFile (this.imageFilePath);  	}  	catch (InvalidOperationException ex) {  		Trace.WriteLine (Messages.InvalidImageType (ex.Message));  		formatInfo.failure = ImageFailure.InvalidType;  	}  	try {  		XUnit usrWidth = image.Width.Point;  		XUnit usrHeight = image.Height.Point;  		bool usrWidthSet = !this.image.IsNull ("Width");  		bool usrHeightSet = !this.image.IsNull ("Height");  		XUnit resultWidth = usrWidth;  		XUnit resultHeight = usrHeight;  		double xPixels = xImage.PixelWidth;  		bool usrResolutionSet = !image.IsNull ("Resolution");  		double horzRes = usrResolutionSet ? (double)image.Resolution : xImage.HorizontalResolution;  		XUnit inherentWidth = XUnit.FromInch (xPixels / horzRes);  		double yPixels = xImage.PixelHeight;  		double vertRes = usrResolutionSet ? (double)image.Resolution : xImage.VerticalResolution;  		XUnit inherentHeight = XUnit.FromInch (yPixels / vertRes);  		bool lockRatio = this.image.IsNull ("LockAspectRatio") ? true : image.LockAspectRatio;  		double scaleHeight = this.image.ScaleHeight;  		double scaleWidth = this.image.ScaleWidth;  		bool scaleHeightSet = !this.image.IsNull ("ScaleHeight");  		bool scaleWidthSet = !this.image.IsNull ("ScaleWidth");  		if (lockRatio && !(scaleHeightSet && scaleWidthSet)) {  			if (usrWidthSet && !usrHeightSet) {  				resultHeight = inherentHeight / inherentWidth * usrWidth;  			}  			else if (usrHeightSet && !usrWidthSet) {  				resultWidth = inherentWidth / inherentHeight * usrHeight;  			}  			else if (!usrHeightSet && !usrWidthSet) {  				resultHeight = inherentHeight;  				resultWidth = inherentWidth;  			}  			if (scaleHeightSet) {  				resultHeight = resultHeight * scaleHeight;  				resultWidth = resultWidth * scaleHeight;  			}  			if (scaleWidthSet) {  				resultHeight = resultHeight * scaleWidth;  				resultWidth = resultWidth * scaleWidth;  			}  		}  		else {  			if (!usrHeightSet)  				resultHeight = inherentHeight;  			if (!usrWidthSet)  				resultWidth = inherentWidth;  			if (scaleHeightSet)  				resultHeight = resultHeight * scaleHeight;  			if (scaleWidthSet)  				resultWidth = resultWidth * scaleWidth;  		}  		formatInfo.CropWidth = (int)xPixels;  		formatInfo.CropHeight = (int)yPixels;  		if (!this.image.IsNull ("PictureFormat")) {  			PictureFormat picFormat = this.image.PictureFormat;  			//Cropping in pixels.  			XUnit cropLeft = picFormat.CropLeft.Point;  			XUnit cropRight = picFormat.CropRight.Point;  			XUnit cropTop = picFormat.CropTop.Point;  			XUnit cropBottom = picFormat.CropBottom.Point;  			formatInfo.CropX = (int)(horzRes * cropLeft.Inch);  			formatInfo.CropY = (int)(vertRes * cropTop.Inch);  			formatInfo.CropWidth -= (int)(horzRes * ((XUnit)(cropLeft + cropRight)).Inch);  			formatInfo.CropHeight -= (int)(vertRes * ((XUnit)(cropTop + cropBottom)).Inch);  			//Scaled cropping of the height and width.  			double xScale = resultWidth / inherentWidth;  			double yScale = resultHeight / inherentHeight;  			cropLeft = xScale * cropLeft;  			cropRight = xScale * cropRight;  			cropTop = yScale * cropTop;  			cropBottom = yScale * cropBottom;  			resultHeight = resultHeight - cropTop - cropBottom;  			resultWidth = resultWidth - cropLeft - cropRight;  		}  		if (resultHeight <= 0 || resultWidth <= 0) {  			formatInfo.Width = XUnit.FromCentimeter (2.5);  			formatInfo.Height = XUnit.FromCentimeter (2.5);  			Trace.WriteLine (Messages.EmptyImageSize);  			this.failure = ImageFailure.EmptySize;  		}  		else {  			formatInfo.Width = resultWidth;  			formatInfo.Height = resultHeight;  		}  	}  	catch (Exception ex) {  		Trace.WriteLine (Messages.ImageNotReadable (this.image.Name' ex.Message));  		formatInfo.failure = ImageFailure.NotRead;  	}  	finally {  		if (xImage != null)  			xImage.Dispose ();  	}  }  
Magic Number,MigraDoc.Rendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ImageRenderer.cs,CalculateImageDimensions,The following statement contains a magic number: if (formatInfo.failure == ImageFailure.None) {  	XImage xImage = null;  	try {  		xImage = XImage.FromFile (this.imageFilePath);  	}  	catch (InvalidOperationException ex) {  		Trace.WriteLine (Messages.InvalidImageType (ex.Message));  		formatInfo.failure = ImageFailure.InvalidType;  	}  	try {  		XUnit usrWidth = image.Width.Point;  		XUnit usrHeight = image.Height.Point;  		bool usrWidthSet = !this.image.IsNull ("Width");  		bool usrHeightSet = !this.image.IsNull ("Height");  		XUnit resultWidth = usrWidth;  		XUnit resultHeight = usrHeight;  		double xPixels = xImage.PixelWidth;  		bool usrResolutionSet = !image.IsNull ("Resolution");  		double horzRes = usrResolutionSet ? (double)image.Resolution : xImage.HorizontalResolution;  		XUnit inherentWidth = XUnit.FromInch (xPixels / horzRes);  		double yPixels = xImage.PixelHeight;  		double vertRes = usrResolutionSet ? (double)image.Resolution : xImage.VerticalResolution;  		XUnit inherentHeight = XUnit.FromInch (yPixels / vertRes);  		bool lockRatio = this.image.IsNull ("LockAspectRatio") ? true : image.LockAspectRatio;  		double scaleHeight = this.image.ScaleHeight;  		double scaleWidth = this.image.ScaleWidth;  		bool scaleHeightSet = !this.image.IsNull ("ScaleHeight");  		bool scaleWidthSet = !this.image.IsNull ("ScaleWidth");  		if (lockRatio && !(scaleHeightSet && scaleWidthSet)) {  			if (usrWidthSet && !usrHeightSet) {  				resultHeight = inherentHeight / inherentWidth * usrWidth;  			}  			else if (usrHeightSet && !usrWidthSet) {  				resultWidth = inherentWidth / inherentHeight * usrHeight;  			}  			else if (!usrHeightSet && !usrWidthSet) {  				resultHeight = inherentHeight;  				resultWidth = inherentWidth;  			}  			if (scaleHeightSet) {  				resultHeight = resultHeight * scaleHeight;  				resultWidth = resultWidth * scaleHeight;  			}  			if (scaleWidthSet) {  				resultHeight = resultHeight * scaleWidth;  				resultWidth = resultWidth * scaleWidth;  			}  		}  		else {  			if (!usrHeightSet)  				resultHeight = inherentHeight;  			if (!usrWidthSet)  				resultWidth = inherentWidth;  			if (scaleHeightSet)  				resultHeight = resultHeight * scaleHeight;  			if (scaleWidthSet)  				resultWidth = resultWidth * scaleWidth;  		}  		formatInfo.CropWidth = (int)xPixels;  		formatInfo.CropHeight = (int)yPixels;  		if (!this.image.IsNull ("PictureFormat")) {  			PictureFormat picFormat = this.image.PictureFormat;  			//Cropping in pixels.  			XUnit cropLeft = picFormat.CropLeft.Point;  			XUnit cropRight = picFormat.CropRight.Point;  			XUnit cropTop = picFormat.CropTop.Point;  			XUnit cropBottom = picFormat.CropBottom.Point;  			formatInfo.CropX = (int)(horzRes * cropLeft.Inch);  			formatInfo.CropY = (int)(vertRes * cropTop.Inch);  			formatInfo.CropWidth -= (int)(horzRes * ((XUnit)(cropLeft + cropRight)).Inch);  			formatInfo.CropHeight -= (int)(vertRes * ((XUnit)(cropTop + cropBottom)).Inch);  			//Scaled cropping of the height and width.  			double xScale = resultWidth / inherentWidth;  			double yScale = resultHeight / inherentHeight;  			cropLeft = xScale * cropLeft;  			cropRight = xScale * cropRight;  			cropTop = yScale * cropTop;  			cropBottom = yScale * cropBottom;  			resultHeight = resultHeight - cropTop - cropBottom;  			resultWidth = resultWidth - cropLeft - cropRight;  		}  		if (resultHeight <= 0 || resultWidth <= 0) {  			formatInfo.Width = XUnit.FromCentimeter (2.5);  			formatInfo.Height = XUnit.FromCentimeter (2.5);  			Trace.WriteLine (Messages.EmptyImageSize);  			this.failure = ImageFailure.EmptySize;  		}  		else {  			formatInfo.Width = resultWidth;  			formatInfo.Height = resultHeight;  		}  	}  	catch (Exception ex) {  		Trace.WriteLine (Messages.ImageNotReadable (this.image.Name' ex.Message));  		formatInfo.failure = ImageFailure.NotRead;  	}  	finally {  		if (xImage != null)  			xImage.Dispose ();  	}  }  
Magic Number,MigraDoc.Rendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ImageRenderer.cs,CalculateImageDimensions,The following statement contains a magic number: try {  	XUnit usrWidth = image.Width.Point;  	XUnit usrHeight = image.Height.Point;  	bool usrWidthSet = !this.image.IsNull ("Width");  	bool usrHeightSet = !this.image.IsNull ("Height");  	XUnit resultWidth = usrWidth;  	XUnit resultHeight = usrHeight;  	double xPixels = xImage.PixelWidth;  	bool usrResolutionSet = !image.IsNull ("Resolution");  	double horzRes = usrResolutionSet ? (double)image.Resolution : xImage.HorizontalResolution;  	XUnit inherentWidth = XUnit.FromInch (xPixels / horzRes);  	double yPixels = xImage.PixelHeight;  	double vertRes = usrResolutionSet ? (double)image.Resolution : xImage.VerticalResolution;  	XUnit inherentHeight = XUnit.FromInch (yPixels / vertRes);  	bool lockRatio = this.image.IsNull ("LockAspectRatio") ? true : image.LockAspectRatio;  	double scaleHeight = this.image.ScaleHeight;  	double scaleWidth = this.image.ScaleWidth;  	bool scaleHeightSet = !this.image.IsNull ("ScaleHeight");  	bool scaleWidthSet = !this.image.IsNull ("ScaleWidth");  	if (lockRatio && !(scaleHeightSet && scaleWidthSet)) {  		if (usrWidthSet && !usrHeightSet) {  			resultHeight = inherentHeight / inherentWidth * usrWidth;  		}  		else if (usrHeightSet && !usrWidthSet) {  			resultWidth = inherentWidth / inherentHeight * usrHeight;  		}  		else if (!usrHeightSet && !usrWidthSet) {  			resultHeight = inherentHeight;  			resultWidth = inherentWidth;  		}  		if (scaleHeightSet) {  			resultHeight = resultHeight * scaleHeight;  			resultWidth = resultWidth * scaleHeight;  		}  		if (scaleWidthSet) {  			resultHeight = resultHeight * scaleWidth;  			resultWidth = resultWidth * scaleWidth;  		}  	}  	else {  		if (!usrHeightSet)  			resultHeight = inherentHeight;  		if (!usrWidthSet)  			resultWidth = inherentWidth;  		if (scaleHeightSet)  			resultHeight = resultHeight * scaleHeight;  		if (scaleWidthSet)  			resultWidth = resultWidth * scaleWidth;  	}  	formatInfo.CropWidth = (int)xPixels;  	formatInfo.CropHeight = (int)yPixels;  	if (!this.image.IsNull ("PictureFormat")) {  		PictureFormat picFormat = this.image.PictureFormat;  		//Cropping in pixels.  		XUnit cropLeft = picFormat.CropLeft.Point;  		XUnit cropRight = picFormat.CropRight.Point;  		XUnit cropTop = picFormat.CropTop.Point;  		XUnit cropBottom = picFormat.CropBottom.Point;  		formatInfo.CropX = (int)(horzRes * cropLeft.Inch);  		formatInfo.CropY = (int)(vertRes * cropTop.Inch);  		formatInfo.CropWidth -= (int)(horzRes * ((XUnit)(cropLeft + cropRight)).Inch);  		formatInfo.CropHeight -= (int)(vertRes * ((XUnit)(cropTop + cropBottom)).Inch);  		//Scaled cropping of the height and width.  		double xScale = resultWidth / inherentWidth;  		double yScale = resultHeight / inherentHeight;  		cropLeft = xScale * cropLeft;  		cropRight = xScale * cropRight;  		cropTop = yScale * cropTop;  		cropBottom = yScale * cropBottom;  		resultHeight = resultHeight - cropTop - cropBottom;  		resultWidth = resultWidth - cropLeft - cropRight;  	}  	if (resultHeight <= 0 || resultWidth <= 0) {  		formatInfo.Width = XUnit.FromCentimeter (2.5);  		formatInfo.Height = XUnit.FromCentimeter (2.5);  		Trace.WriteLine (Messages.EmptyImageSize);  		this.failure = ImageFailure.EmptySize;  	}  	else {  		formatInfo.Width = resultWidth;  		formatInfo.Height = resultHeight;  	}  }  catch (Exception ex) {  	Trace.WriteLine (Messages.ImageNotReadable (this.image.Name' ex.Message));  	formatInfo.failure = ImageFailure.NotRead;  }  finally {  	if (xImage != null)  		xImage.Dispose ();  }  
Magic Number,MigraDoc.Rendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ImageRenderer.cs,CalculateImageDimensions,The following statement contains a magic number: try {  	XUnit usrWidth = image.Width.Point;  	XUnit usrHeight = image.Height.Point;  	bool usrWidthSet = !this.image.IsNull ("Width");  	bool usrHeightSet = !this.image.IsNull ("Height");  	XUnit resultWidth = usrWidth;  	XUnit resultHeight = usrHeight;  	double xPixels = xImage.PixelWidth;  	bool usrResolutionSet = !image.IsNull ("Resolution");  	double horzRes = usrResolutionSet ? (double)image.Resolution : xImage.HorizontalResolution;  	XUnit inherentWidth = XUnit.FromInch (xPixels / horzRes);  	double yPixels = xImage.PixelHeight;  	double vertRes = usrResolutionSet ? (double)image.Resolution : xImage.VerticalResolution;  	XUnit inherentHeight = XUnit.FromInch (yPixels / vertRes);  	bool lockRatio = this.image.IsNull ("LockAspectRatio") ? true : image.LockAspectRatio;  	double scaleHeight = this.image.ScaleHeight;  	double scaleWidth = this.image.ScaleWidth;  	bool scaleHeightSet = !this.image.IsNull ("ScaleHeight");  	bool scaleWidthSet = !this.image.IsNull ("ScaleWidth");  	if (lockRatio && !(scaleHeightSet && scaleWidthSet)) {  		if (usrWidthSet && !usrHeightSet) {  			resultHeight = inherentHeight / inherentWidth * usrWidth;  		}  		else if (usrHeightSet && !usrWidthSet) {  			resultWidth = inherentWidth / inherentHeight * usrHeight;  		}  		else if (!usrHeightSet && !usrWidthSet) {  			resultHeight = inherentHeight;  			resultWidth = inherentWidth;  		}  		if (scaleHeightSet) {  			resultHeight = resultHeight * scaleHeight;  			resultWidth = resultWidth * scaleHeight;  		}  		if (scaleWidthSet) {  			resultHeight = resultHeight * scaleWidth;  			resultWidth = resultWidth * scaleWidth;  		}  	}  	else {  		if (!usrHeightSet)  			resultHeight = inherentHeight;  		if (!usrWidthSet)  			resultWidth = inherentWidth;  		if (scaleHeightSet)  			resultHeight = resultHeight * scaleHeight;  		if (scaleWidthSet)  			resultWidth = resultWidth * scaleWidth;  	}  	formatInfo.CropWidth = (int)xPixels;  	formatInfo.CropHeight = (int)yPixels;  	if (!this.image.IsNull ("PictureFormat")) {  		PictureFormat picFormat = this.image.PictureFormat;  		//Cropping in pixels.  		XUnit cropLeft = picFormat.CropLeft.Point;  		XUnit cropRight = picFormat.CropRight.Point;  		XUnit cropTop = picFormat.CropTop.Point;  		XUnit cropBottom = picFormat.CropBottom.Point;  		formatInfo.CropX = (int)(horzRes * cropLeft.Inch);  		formatInfo.CropY = (int)(vertRes * cropTop.Inch);  		formatInfo.CropWidth -= (int)(horzRes * ((XUnit)(cropLeft + cropRight)).Inch);  		formatInfo.CropHeight -= (int)(vertRes * ((XUnit)(cropTop + cropBottom)).Inch);  		//Scaled cropping of the height and width.  		double xScale = resultWidth / inherentWidth;  		double yScale = resultHeight / inherentHeight;  		cropLeft = xScale * cropLeft;  		cropRight = xScale * cropRight;  		cropTop = yScale * cropTop;  		cropBottom = yScale * cropBottom;  		resultHeight = resultHeight - cropTop - cropBottom;  		resultWidth = resultWidth - cropLeft - cropRight;  	}  	if (resultHeight <= 0 || resultWidth <= 0) {  		formatInfo.Width = XUnit.FromCentimeter (2.5);  		formatInfo.Height = XUnit.FromCentimeter (2.5);  		Trace.WriteLine (Messages.EmptyImageSize);  		this.failure = ImageFailure.EmptySize;  	}  	else {  		formatInfo.Width = resultWidth;  		formatInfo.Height = resultHeight;  	}  }  catch (Exception ex) {  	Trace.WriteLine (Messages.ImageNotReadable (this.image.Name' ex.Message));  	formatInfo.failure = ImageFailure.NotRead;  }  finally {  	if (xImage != null)  		xImage.Dispose ();  }  
Magic Number,MigraDoc.Rendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ImageRenderer.cs,CalculateImageDimensions,The following statement contains a magic number: if (resultHeight <= 0 || resultWidth <= 0) {  	formatInfo.Width = XUnit.FromCentimeter (2.5);  	formatInfo.Height = XUnit.FromCentimeter (2.5);  	Trace.WriteLine (Messages.EmptyImageSize);  	this.failure = ImageFailure.EmptySize;  }  else {  	formatInfo.Width = resultWidth;  	formatInfo.Height = resultHeight;  }  
Magic Number,MigraDoc.Rendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ImageRenderer.cs,CalculateImageDimensions,The following statement contains a magic number: if (resultHeight <= 0 || resultWidth <= 0) {  	formatInfo.Width = XUnit.FromCentimeter (2.5);  	formatInfo.Height = XUnit.FromCentimeter (2.5);  	Trace.WriteLine (Messages.EmptyImageSize);  	this.failure = ImageFailure.EmptySize;  }  else {  	formatInfo.Width = resultWidth;  	formatInfo.Height = resultHeight;  }  
Magic Number,MigraDoc.Rendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ImageRenderer.cs,CalculateImageDimensions,The following statement contains a magic number: formatInfo.Width = XUnit.FromCentimeter (2.5);  
Magic Number,MigraDoc.Rendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ImageRenderer.cs,CalculateImageDimensions,The following statement contains a magic number: formatInfo.Height = XUnit.FromCentimeter (2.5);  
Magic Number,MigraDoc.Rendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ImageRenderer.cs,CalculateImageDimensions,The following statement contains a magic number: if (formatInfo.failure != ImageFailure.None) {  	if (!this.image.IsNull ("Width"))  		formatInfo.Width = this.image.Width.Point;  	else  		formatInfo.Width = XUnit.FromCentimeter (2.5);  	if (!this.image.IsNull ("Height"))  		formatInfo.Height = this.image.Height.Point;  	else  		formatInfo.Height = XUnit.FromCentimeter (2.5);  	return;  }  
Magic Number,MigraDoc.Rendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ImageRenderer.cs,CalculateImageDimensions,The following statement contains a magic number: if (formatInfo.failure != ImageFailure.None) {  	if (!this.image.IsNull ("Width"))  		formatInfo.Width = this.image.Width.Point;  	else  		formatInfo.Width = XUnit.FromCentimeter (2.5);  	if (!this.image.IsNull ("Height"))  		formatInfo.Height = this.image.Height.Point;  	else  		formatInfo.Height = XUnit.FromCentimeter (2.5);  	return;  }  
Magic Number,MigraDoc.Rendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ImageRenderer.cs,CalculateImageDimensions,The following statement contains a magic number: if (!this.image.IsNull ("Width"))  	formatInfo.Width = this.image.Width.Point;  else  	formatInfo.Width = XUnit.FromCentimeter (2.5);  
Magic Number,MigraDoc.Rendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ImageRenderer.cs,CalculateImageDimensions,The following statement contains a magic number: formatInfo.Width = XUnit.FromCentimeter (2.5);  
Magic Number,MigraDoc.Rendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ImageRenderer.cs,CalculateImageDimensions,The following statement contains a magic number: if (!this.image.IsNull ("Height"))  	formatInfo.Height = this.image.Height.Point;  else  	formatInfo.Height = XUnit.FromCentimeter (2.5);  
Magic Number,MigraDoc.Rendering,ImageRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ImageRenderer.cs,CalculateImageDimensions,The following statement contains a magic number: formatInfo.Height = XUnit.FromCentimeter (2.5);  
Magic Number,MigraDoc.Rendering,NumberFormatter,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\NumberFormatter.cs,AsRoman,The following statement contains a magic number: if (Math.Abs (number) > 32768) {  	Trace.WriteLine (Messages.NumberTooLargeForRoman (number)' "warning");  	return number.ToString ();  }  
Magic Number,MigraDoc.Rendering,NumberFormatter,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\NumberFormatter.cs,AsLetters,The following statement contains a magic number: if (Math.Abs (number) > 32768) {  	Trace.WriteLine (Messages.NumberTooLargeForLetters (number));  	return number.ToString ();  }  
Magic Number,MigraDoc.Rendering,NumberFormatter,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\NumberFormatter.cs,AsLetters,The following statement contains a magic number: if (lowercase)  	cr = (char)('a' + (number - 1) % 26);  else  	cr = (char)('A' + (number - 1) % 26);  
Magic Number,MigraDoc.Rendering,NumberFormatter,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\NumberFormatter.cs,AsLetters,The following statement contains a magic number: if (lowercase)  	cr = (char)('a' + (number - 1) % 26);  else  	cr = (char)('A' + (number - 1) % 26);  
Magic Number,MigraDoc.Rendering,NumberFormatter,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\NumberFormatter.cs,AsLetters,The following statement contains a magic number: cr = (char)('a' + (number - 1) % 26);  
Magic Number,MigraDoc.Rendering,NumberFormatter,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\NumberFormatter.cs,AsLetters,The following statement contains a magic number: cr = (char)('A' + (number - 1) % 26);  
Magic Number,MigraDoc.Rendering,NumberFormatter,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\NumberFormatter.cs,AsLetters,The following statement contains a magic number: for (int n = 0; n <= (int)((number - 1) / 26); ++n)  	str += cr;  
Magic Number,MigraDoc.Rendering,ParagraphFormatInfo,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphFormatInfo.cs,RemoveEnding,The following statement contains a magic number: if (!this.IsEmpty) {  	if (this.widowControl && this.isEnding && this.LineCount >= 2)  		this.lineInfos.RemoveAt (this.LineCount - 2);  	if (this.LineCount > 0)  		this.lineInfos.RemoveAt (this.LineCount - 1);  	this.isEnding = false;  }  
Magic Number,MigraDoc.Rendering,ParagraphFormatInfo,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphFormatInfo.cs,RemoveEnding,The following statement contains a magic number: if (!this.IsEmpty) {  	if (this.widowControl && this.isEnding && this.LineCount >= 2)  		this.lineInfos.RemoveAt (this.LineCount - 2);  	if (this.LineCount > 0)  		this.lineInfos.RemoveAt (this.LineCount - 1);  	this.isEnding = false;  }  
Magic Number,MigraDoc.Rendering,ParagraphFormatInfo,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphFormatInfo.cs,RemoveEnding,The following statement contains a magic number: if (this.widowControl && this.isEnding && this.LineCount >= 2)  	this.lineInfos.RemoveAt (this.LineCount - 2);  
Magic Number,MigraDoc.Rendering,ParagraphFormatInfo,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphFormatInfo.cs,RemoveEnding,The following statement contains a magic number: if (this.widowControl && this.isEnding && this.LineCount >= 2)  	this.lineInfos.RemoveAt (this.LineCount - 2);  
Magic Number,MigraDoc.Rendering,ParagraphFormatInfo,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphFormatInfo.cs,RemoveEnding,The following statement contains a magic number: this.lineInfos.RemoveAt (this.LineCount - 2);  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,GetOutlineTitle,The following statement contains a magic number: while (iter != null) {  	DocumentObject current = iter.Current;  	if (!ignoreBlank && (IsBlank (current) || IsTab (current) || IsLineBreak (current))) {  		title += " ";  		ignoreBlank = true;  	}  	else if (current is Text) {  		title += ((Text)current).Content;  		ignoreBlank = false;  	}  	else if (IsRenderedField (current)) {  		title += GetFieldValue (current);  		ignoreBlank = false;  	}  	else if (IsSymbol (current)) {  		title += GetSymbol ((Character)current);  		ignoreBlank = false;  	}  	if (title.Length > 64)  		break;  	iter = iter.GetNextLeaf ();  }  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,GetOutlineTitle,The following statement contains a magic number: if (title.Length > 64)  	break;  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,ProbeAfterCenterAlignedTab,The following statement contains a magic number: if (!notFitting) {  	if (xPosition + this.currentLineWidth / 2.0 <= this.formattingArea.X + tabStopPosition) {  		Rectangle rect = this.formattingArea.GetFittingRect (this.currentYPosition' this.currentVerticalInfo.height);  		if (this.formattingArea.X + tabStopPosition + this.currentLineWidth / 2.0 > rect.X + rect.Width - this.RightIndent) {  			//the text is too long on the right hand side of the tabstop => align to right indent.  			xPositionAfterTab = rect.X + rect.Width - this.RightIndent - this.currentLineWidth;  		}  		else  			xPositionAfterTab = this.formattingArea.X + tabStopPosition - this.currentLineWidth / 2;  	}  }  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,ProbeAfterCenterAlignedTab,The following statement contains a magic number: if (!notFitting) {  	if (xPosition + this.currentLineWidth / 2.0 <= this.formattingArea.X + tabStopPosition) {  		Rectangle rect = this.formattingArea.GetFittingRect (this.currentYPosition' this.currentVerticalInfo.height);  		if (this.formattingArea.X + tabStopPosition + this.currentLineWidth / 2.0 > rect.X + rect.Width - this.RightIndent) {  			//the text is too long on the right hand side of the tabstop => align to right indent.  			xPositionAfterTab = rect.X + rect.Width - this.RightIndent - this.currentLineWidth;  		}  		else  			xPositionAfterTab = this.formattingArea.X + tabStopPosition - this.currentLineWidth / 2;  	}  }  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,ProbeAfterCenterAlignedTab,The following statement contains a magic number: if (!notFitting) {  	if (xPosition + this.currentLineWidth / 2.0 <= this.formattingArea.X + tabStopPosition) {  		Rectangle rect = this.formattingArea.GetFittingRect (this.currentYPosition' this.currentVerticalInfo.height);  		if (this.formattingArea.X + tabStopPosition + this.currentLineWidth / 2.0 > rect.X + rect.Width - this.RightIndent) {  			//the text is too long on the right hand side of the tabstop => align to right indent.  			xPositionAfterTab = rect.X + rect.Width - this.RightIndent - this.currentLineWidth;  		}  		else  			xPositionAfterTab = this.formattingArea.X + tabStopPosition - this.currentLineWidth / 2;  	}  }  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,ProbeAfterCenterAlignedTab,The following statement contains a magic number: if (xPosition + this.currentLineWidth / 2.0 <= this.formattingArea.X + tabStopPosition) {  	Rectangle rect = this.formattingArea.GetFittingRect (this.currentYPosition' this.currentVerticalInfo.height);  	if (this.formattingArea.X + tabStopPosition + this.currentLineWidth / 2.0 > rect.X + rect.Width - this.RightIndent) {  		//the text is too long on the right hand side of the tabstop => align to right indent.  		xPositionAfterTab = rect.X + rect.Width - this.RightIndent - this.currentLineWidth;  	}  	else  		xPositionAfterTab = this.formattingArea.X + tabStopPosition - this.currentLineWidth / 2;  }  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,ProbeAfterCenterAlignedTab,The following statement contains a magic number: if (xPosition + this.currentLineWidth / 2.0 <= this.formattingArea.X + tabStopPosition) {  	Rectangle rect = this.formattingArea.GetFittingRect (this.currentYPosition' this.currentVerticalInfo.height);  	if (this.formattingArea.X + tabStopPosition + this.currentLineWidth / 2.0 > rect.X + rect.Width - this.RightIndent) {  		//the text is too long on the right hand side of the tabstop => align to right indent.  		xPositionAfterTab = rect.X + rect.Width - this.RightIndent - this.currentLineWidth;  	}  	else  		xPositionAfterTab = this.formattingArea.X + tabStopPosition - this.currentLineWidth / 2;  }  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,ProbeAfterCenterAlignedTab,The following statement contains a magic number: if (xPosition + this.currentLineWidth / 2.0 <= this.formattingArea.X + tabStopPosition) {  	Rectangle rect = this.formattingArea.GetFittingRect (this.currentYPosition' this.currentVerticalInfo.height);  	if (this.formattingArea.X + tabStopPosition + this.currentLineWidth / 2.0 > rect.X + rect.Width - this.RightIndent) {  		//the text is too long on the right hand side of the tabstop => align to right indent.  		xPositionAfterTab = rect.X + rect.Width - this.RightIndent - this.currentLineWidth;  	}  	else  		xPositionAfterTab = this.formattingArea.X + tabStopPosition - this.currentLineWidth / 2;  }  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,ProbeAfterCenterAlignedTab,The following statement contains a magic number: if (this.formattingArea.X + tabStopPosition + this.currentLineWidth / 2.0 > rect.X + rect.Width - this.RightIndent) {  	//the text is too long on the right hand side of the tabstop => align to right indent.  	xPositionAfterTab = rect.X + rect.Width - this.RightIndent - this.currentLineWidth;  }  else  	xPositionAfterTab = this.formattingArea.X + tabStopPosition - this.currentLineWidth / 2;  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,ProbeAfterCenterAlignedTab,The following statement contains a magic number: if (this.formattingArea.X + tabStopPosition + this.currentLineWidth / 2.0 > rect.X + rect.Width - this.RightIndent) {  	//the text is too long on the right hand side of the tabstop => align to right indent.  	xPositionAfterTab = rect.X + rect.Width - this.RightIndent - this.currentLineWidth;  }  else  	xPositionAfterTab = this.formattingArea.X + tabStopPosition - this.currentLineWidth / 2;  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,ProbeAfterCenterAlignedTab,The following statement contains a magic number: xPositionAfterTab = this.formattingArea.X + tabStopPosition - this.currentLineWidth / 2;  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,FinishLayoutInfo,The following statement contains a magic number: if (parInfo.IsComplete) {  	int limitOfLines = 1;  	if (parInfo.widowControl)  		limitOfLines = 3;  	if (parInfo.LineCount <= limitOfLines)  		layoutInfo.KeepTogether = true;  }  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,FinishLayoutInfo,The following statement contains a magic number: if (parInfo.widowControl)  	limitOfLines = 3;  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,FinishLayoutInfo,The following statement contains a magic number: limitOfLines = 3;  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,FinishLayoutInfo,The following statement contains a magic number: if (parInfo.LineCount > 0) {  	XUnit startingHeight = parInfo.GetFirstLineInfo ().vertical.height;  	if (parInfo.isStarting && this.paragraph.Format.WidowControl && parInfo.LineCount >= 2)  		startingHeight += parInfo.GetLineInfo (1).vertical.height;  	layoutInfo.StartingHeight = startingHeight;  	XUnit trailingHeight = parInfo.GetLastLineInfo ().vertical.height;  	if (parInfo.IsEnding && this.paragraph.Format.WidowControl && parInfo.LineCount >= 2)  		trailingHeight += parInfo.GetLineInfo (parInfo.LineCount - 2).vertical.height;  	layoutInfo.TrailingHeight = trailingHeight;  }  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,FinishLayoutInfo,The following statement contains a magic number: if (parInfo.LineCount > 0) {  	XUnit startingHeight = parInfo.GetFirstLineInfo ().vertical.height;  	if (parInfo.isStarting && this.paragraph.Format.WidowControl && parInfo.LineCount >= 2)  		startingHeight += parInfo.GetLineInfo (1).vertical.height;  	layoutInfo.StartingHeight = startingHeight;  	XUnit trailingHeight = parInfo.GetLastLineInfo ().vertical.height;  	if (parInfo.IsEnding && this.paragraph.Format.WidowControl && parInfo.LineCount >= 2)  		trailingHeight += parInfo.GetLineInfo (parInfo.LineCount - 2).vertical.height;  	layoutInfo.TrailingHeight = trailingHeight;  }  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,FinishLayoutInfo,The following statement contains a magic number: if (parInfo.LineCount > 0) {  	XUnit startingHeight = parInfo.GetFirstLineInfo ().vertical.height;  	if (parInfo.isStarting && this.paragraph.Format.WidowControl && parInfo.LineCount >= 2)  		startingHeight += parInfo.GetLineInfo (1).vertical.height;  	layoutInfo.StartingHeight = startingHeight;  	XUnit trailingHeight = parInfo.GetLastLineInfo ().vertical.height;  	if (parInfo.IsEnding && this.paragraph.Format.WidowControl && parInfo.LineCount >= 2)  		trailingHeight += parInfo.GetLineInfo (parInfo.LineCount - 2).vertical.height;  	layoutInfo.TrailingHeight = trailingHeight;  }  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,FinishLayoutInfo,The following statement contains a magic number: if (parInfo.isStarting && this.paragraph.Format.WidowControl && parInfo.LineCount >= 2)  	startingHeight += parInfo.GetLineInfo (1).vertical.height;  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,FinishLayoutInfo,The following statement contains a magic number: if (parInfo.IsEnding && this.paragraph.Format.WidowControl && parInfo.LineCount >= 2)  	trailingHeight += parInfo.GetLineInfo (parInfo.LineCount - 2).vertical.height;  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,FinishLayoutInfo,The following statement contains a magic number: if (parInfo.IsEnding && this.paragraph.Format.WidowControl && parInfo.LineCount >= 2)  	trailingHeight += parInfo.GetLineInfo (parInfo.LineCount - 2).vertical.height;  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,FinishLayoutInfo,The following statement contains a magic number: trailingHeight += parInfo.GetLineInfo (parInfo.LineCount - 2).vertical.height;  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,GetSpaceWidth,The following statement contains a magic number: switch (character.SymbolName) {  case SymbolName.Blank:  	width = MeasureString (" ");  	break;  case SymbolName.Em:  	width = MeasureString ("m");  	break;  case SymbolName.Em4:  	width = 0.25 * MeasureString ("m");  	break;  case SymbolName.En:  	width = MeasureString ("n");  	break;  }  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,GetSpaceWidth,The following statement contains a magic number: width = 0.25 * MeasureString ("m");  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,CalcVerticalInfo,The following statement contains a magic number: switch (spacingRule) {  case LineSpacingRule.Single:  	lineHeight = singleLineSpace;  	break;  case LineSpacingRule.OnePtFive:  	lineHeight = 1.5 * singleLineSpace;  	break;  case LineSpacingRule.Double:  	lineHeight = 2.0 * singleLineSpace;  	break;  case LineSpacingRule.Multiple:  	lineHeight = this.paragraph.Format.LineSpacing * singleLineSpace;  	break;  case LineSpacingRule.AtLeast:  	lineHeight = Math.Max (singleLineSpace' paragraph.Format.LineSpacing);  	break;  case LineSpacingRule.Exactly:  	lineHeight = new XUnit (paragraph.Format.LineSpacing);  	inherentLineSpace = paragraph.Format.LineSpacing.Point;  	break;  }  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,CalcVerticalInfo,The following statement contains a magic number: switch (spacingRule) {  case LineSpacingRule.Single:  	lineHeight = singleLineSpace;  	break;  case LineSpacingRule.OnePtFive:  	lineHeight = 1.5 * singleLineSpace;  	break;  case LineSpacingRule.Double:  	lineHeight = 2.0 * singleLineSpace;  	break;  case LineSpacingRule.Multiple:  	lineHeight = this.paragraph.Format.LineSpacing * singleLineSpace;  	break;  case LineSpacingRule.AtLeast:  	lineHeight = Math.Max (singleLineSpace' paragraph.Format.LineSpacing);  	break;  case LineSpacingRule.Exactly:  	lineHeight = new XUnit (paragraph.Format.LineSpacing);  	inherentLineSpace = paragraph.Format.LineSpacing.Point;  	break;  }  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,CalcVerticalInfo,The following statement contains a magic number: lineHeight = 1.5 * singleLineSpace;  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,CalcVerticalInfo,The following statement contains a magic number: lineHeight = 2.0 * singleLineSpace;  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,GetLineHeight,The following statement contains a magic number: switch (format.LineSpacingRule) {  case LineSpacingRule.Exactly:  	return format.LineSpacing.Point;  case LineSpacingRule.AtLeast:  	return Math.Max (format.LineSpacing.Point' font.GetHeight (gfx));  case LineSpacingRule.Multiple:  	return format.LineSpacing * format.Font.Size;  case LineSpacingRule.OnePtFive:  	return 1.5 * singleLineSpace;  case LineSpacingRule.Double:  	return 2.0 * singleLineSpace;  case LineSpacingRule.Single:  default:  	return singleLineSpace;  }  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,GetLineHeight,The following statement contains a magic number: switch (format.LineSpacingRule) {  case LineSpacingRule.Exactly:  	return format.LineSpacing.Point;  case LineSpacingRule.AtLeast:  	return Math.Max (format.LineSpacing.Point' font.GetHeight (gfx));  case LineSpacingRule.Multiple:  	return format.LineSpacing * format.Font.Size;  case LineSpacingRule.OnePtFive:  	return 1.5 * singleLineSpace;  case LineSpacingRule.Double:  	return 2.0 * singleLineSpace;  case LineSpacingRule.Single:  default:  	return singleLineSpace;  }  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,GetLineHeight,The following statement contains a magic number: return 1.5 * singleLineSpace;  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,GetLineHeight,The following statement contains a magic number: return 2.0 * singleLineSpace;  
Magic Number,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,EndUnderline,The following statement contains a magic number: yPosition += 0.33 * this.currentVerticalInfo.descent;  
Magic Number,MigraDoc.Rendering,TableRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\TableRenderer.cs,RenderContent,The following statement contains a magic number: if (verticalAlignment == VerticalAlignment.Bottom) {  	targetY = innerRect.Y + innerRect.Height;  	targetY -= cell.Row.BottomPadding;  	targetY -= contentHeight;  }  else if (verticalAlignment == VerticalAlignment.Center) {  	targetY = innerRect.Y + cell.Row.TopPadding;  	targetY += innerRect.Y + innerRect.Height - cell.Row.BottomPadding;  	targetY -= contentHeight;  	targetY /= 2;  }  else  	targetY = innerRect.Y + cell.Row.TopPadding;  
Magic Number,MigraDoc.Rendering,TableRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\TableRenderer.cs,RenderContent,The following statement contains a magic number: if (verticalAlignment == VerticalAlignment.Center) {  	targetY = innerRect.Y + cell.Row.TopPadding;  	targetY += innerRect.Y + innerRect.Height - cell.Row.BottomPadding;  	targetY -= contentHeight;  	targetY /= 2;  }  else  	targetY = innerRect.Y + cell.Row.TopPadding;  
Magic Number,MigraDoc.Rendering,TableRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\TableRenderer.cs,RenderContent,The following statement contains a magic number: targetY /= 2;  
Magic Number,MigraDoc.Rendering,TextFrameRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\TextFrameRenderer.cs,Transform,The following statement contains a magic number: switch (this.textframe.Orientation) {  case TextOrientation.Downward:  case TextOrientation.Vertical:  case TextOrientation.VerticalFarEast:  	xPosition = frameContentArea.X + frameContentArea.Width;  	yPosition = frameContentArea.Y;  	this.gfx.TranslateTransform (xPosition' yPosition);  	this.gfx.RotateTransform (90);  	break;  case TextOrientation.Upward:  	state = this.gfx.Save ();  	xPosition = frameContentArea.X;  	yPosition = frameContentArea.Y + frameContentArea.Height;  	this.gfx.TranslateTransform (xPosition' yPosition);  	this.gfx.RotateTransform (-90);  	break;  default:  	xPosition = frameContentArea.X;  	yPosition = frameContentArea.Y;  	this.gfx.TranslateTransform (xPosition' yPosition);  	break;  }  
Magic Number,MigraDoc.Rendering,TextFrameRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\TextFrameRenderer.cs,Transform,The following statement contains a magic number: switch (this.textframe.Orientation) {  case TextOrientation.Downward:  case TextOrientation.Vertical:  case TextOrientation.VerticalFarEast:  	xPosition = frameContentArea.X + frameContentArea.Width;  	yPosition = frameContentArea.Y;  	this.gfx.TranslateTransform (xPosition' yPosition);  	this.gfx.RotateTransform (90);  	break;  case TextOrientation.Upward:  	state = this.gfx.Save ();  	xPosition = frameContentArea.X;  	yPosition = frameContentArea.Y + frameContentArea.Height;  	this.gfx.TranslateTransform (xPosition' yPosition);  	this.gfx.RotateTransform (-90);  	break;  default:  	xPosition = frameContentArea.X;  	yPosition = frameContentArea.Y;  	this.gfx.TranslateTransform (xPosition' yPosition);  	break;  }  
Magic Number,MigraDoc.Rendering,TextFrameRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\TextFrameRenderer.cs,Transform,The following statement contains a magic number: this.gfx.RotateTransform (90);  
Magic Number,MigraDoc.Rendering,TextFrameRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\TextFrameRenderer.cs,Transform,The following statement contains a magic number: this.gfx.RotateTransform (-90);  
Missing Default,MigraDoc.Rendering,BordersRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\BordersRenderer.cs,IsRendered,The following switch statement is missing a default case: switch (borderType) {  case BorderType.Left:  	if (this.borders.IsNull ("Left"))  		return false;  	return GetWidth (borderType) > 0;  case BorderType.Right:  	if (this.borders.IsNull ("Right"))  		return false;  	return GetWidth (borderType) > 0;  case BorderType.Top:  	if (this.borders.IsNull ("Top"))  		return false;  	return GetWidth (borderType) > 0;  case BorderType.Bottom:  	if (this.borders.IsNull ("Bottom"))  		return false;  	return GetWidth (borderType) > 0;  case BorderType.DiagonalDown:  	if (this.borders.IsNull ("DiagonalDown"))  		return false;  	return GetWidth (borderType) > 0;  case BorderType.DiagonalUp:  	if (borders.IsNull ("DiagonalUp"))  		return false;  	return GetWidth (borderType) > 0;  }  
Missing Default,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,PositionHorizontally,The following switch statement is missing a default case: switch (layoutInfo.HorizontalReference) {  case HorizontalReference.PageMargin:  case HorizontalReference.AreaBoundary:  	return PositionHorizontallyToMargin (layoutInfo);  case HorizontalReference.Page:  	return PositionHorizontallyToPage (layoutInfo);  }  
Missing Default,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,PositionHorizontallyToMargin,The following switch statement is missing a default case: switch (align) {  case ElementAlignment.Near:  	if (layoutInfo.Left != 0) {  		layoutInfo.ContentArea.X += layoutInfo.Left;  		return true;  	}  	else if (layoutInfo.MarginLeft != 0) {  		layoutInfo.ContentArea.X += layoutInfo.MarginLeft;  		return true;  	}  	return false;  case ElementAlignment.Far:  	XUnit xPos = rect.X + rect.Width;  	xPos -= layoutInfo.ContentArea.Width;  	xPos -= layoutInfo.MarginRight;  	layoutInfo.ContentArea.X = xPos;  	return true;  case ElementAlignment.Center:  	xPos = rect.Width;  	xPos -= layoutInfo.ContentArea.Width;  	xPos = rect.X + xPos / 2;  	layoutInfo.ContentArea.X = xPos;  	return true;  }  
Missing Default,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,PositionHorizontallyToPage,The following switch statement is missing a default case: switch (align) {  case ElementAlignment.Near:  	#if true  	// Allow negative offsets (supporting "Anschnitt" for images)  	if (layoutInfo.HorizontalReference == HorizontalReference.Page || layoutInfo.HorizontalReference == HorizontalReference.PageMargin)  		xPos = layoutInfo.MarginLeft;  	// Ignore layoutInfo.Left if absolute position is specified  	else  		xPos = Math.Max (layoutInfo.MarginLeft' layoutInfo.Left);  	#else  	          //!!!delTHHO 22.10.2008            xPos = Math.Max(layoutInfo.MarginLeft' layoutInfo.Left); #endif  	layoutInfo.ContentArea.X = xPos;  	break;  case ElementAlignment.Far:  	xPos = this.currentSection.PageSetup.PageWidth.Point;  	xPos -= layoutInfo.ContentArea.Width;  	xPos -= layoutInfo.MarginRight;  	layoutInfo.ContentArea.X = xPos;  	break;  case ElementAlignment.Center:  	xPos = this.currentSection.PageSetup.PageWidth.Point;  	xPos -= layoutInfo.ContentArea.Width;  	xPos /= 2;  	layoutInfo.ContentArea.X = xPos;  	break;  }  
Missing Default,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,PositionVerticallyToMargin,The following switch statement is missing a default case: switch (layoutInfo.VerticalAlignment) {  case ElementAlignment.Near:  	yPos = rect.Y;  	//Added KlPo 12.07.07:  	if (layoutInfo.Top == 0)  		yPos += layoutInfo.MarginTop;  	else  		yPos += layoutInfo.Top;  	//Removed KlPo 12.07.07  	//yPos += Math.Max(layoutInfo.Top' layoutInfo.MarginTop);  	layoutInfo.ContentArea.Y = yPos;  	break;  case ElementAlignment.Far:  	yPos = rect.Y + rect.Height;  	yPos -= layoutInfo.ContentArea.Height;  	yPos -= layoutInfo.MarginBottom;  	layoutInfo.ContentArea.Y = yPos;  	break;  case ElementAlignment.Center:  	yPos = rect.Height;  	yPos -= layoutInfo.ContentArea.Height;  	yPos = rect.Y + yPos / 2;  	layoutInfo.ContentArea.Y = yPos;  	break;  }  
Missing Default,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,PositionVerticallyToPage,The following switch statement is missing a default case: switch (layoutInfo.VerticalAlignment) {  case ElementAlignment.Near:  	yPos = Math.Max (layoutInfo.MarginTop' layoutInfo.Top);  	layoutInfo.ContentArea.Y = yPos;  	break;  case ElementAlignment.Far:  	yPos = this.currentSection.PageSetup.PageHeight.Point;  	yPos -= layoutInfo.ContentArea.Height;  	yPos -= layoutInfo.MarginBottom;  	layoutInfo.ContentArea.Y = yPos;  	break;  case ElementAlignment.Center:  	yPos = this.currentSection.PageSetup.PageHeight.Point;  	yPos -= layoutInfo.ContentArea.Height;  	yPos /= 2;  	layoutInfo.ContentArea.Y = yPos;  	break;  }  
Missing Default,MigraDoc.Rendering,FormattedDocument,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedDocument.cs,PositionVertically,The following switch statement is missing a default case: switch (layoutInfo.VerticalReference) {  case VerticalReference.PreviousElement:  	return false;  case VerticalReference.AreaBoundary:  case VerticalReference.PageMargin:  	return PositionVerticallyToMargin (layoutInfo);  case VerticalReference.Page:  	return PositionVerticallyToPage (layoutInfo);  }  
Missing Default,MigraDoc.Rendering,FormattedTextFrame,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\FormattedTextFrame.cs,PositionHorizontally,The following switch statement is missing a default case: switch (layoutInfo.HorizontalAlignment) {  case ElementAlignment.Near:  	if (layoutInfo.Left != 0) {  		layoutInfo.ContentArea.X += layoutInfo.Left;  		return true;  	}  	return false;  case ElementAlignment.Far:  	XUnit xPos = rect.X + rect.Width;  	xPos -= layoutInfo.ContentArea.Width;  	xPos -= layoutInfo.MarginRight;  	layoutInfo.ContentArea.X = xPos;  	return true;  case ElementAlignment.Center:  	xPos = rect.Width;  	xPos -= layoutInfo.ContentArea.Width;  	xPos = rect.X + xPos / 2;  	layoutInfo.ContentArea.X = xPos;  	return true;  }  
Missing Default,MigraDoc.Rendering,LineFormatRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\LineFormatRenderer.cs,GetPen,The following switch statement is missing a default case: switch (this.lineFormat.DashStyle) {  case DashStyle.Dash:  	pen.DashStyle = XDashStyle.Dash;  	break;  case DashStyle.DashDot:  	pen.DashStyle = XDashStyle.DashDot;  	break;  case DashStyle.DashDotDot:  	pen.DashStyle = XDashStyle.DashDotDot;  	break;  case DashStyle.Solid:  	pen.DashStyle = XDashStyle.Solid;  	break;  case DashStyle.SquareDot:  	pen.DashStyle = XDashStyle.Dot;  	break;  }  
Missing Default,MigraDoc.Rendering,NumberFormatter,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\NumberFormatter.cs,Format,The following switch statement is missing a default case: switch (format) {  case "ROMAN":  	return AsRoman (number' false);  case "roman":  	return AsRoman (number' true);  case "ALPHABETIC":  	return AsLetters (number' false);  case "alphabetic":  	return AsLetters (number' true);  }  
Missing Default,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,FormatTab,The following switch statement is missing a default case: switch (nextTabStop.Alignment) {  case TabAlignment.Left:  	this.currentXPosition = ProbeAfterLeftAlignedTab (nextTabStop.Position.Point' out notFitting);  	break;  case TabAlignment.Right:  	this.currentXPosition = ProbeAfterRightAlignedTab (nextTabStop.Position.Point' out notFitting);  	break;  case TabAlignment.Center:  	this.currentXPosition = ProbeAfterCenterAlignedTab (nextTabStop.Position.Point' out notFitting);  	break;  case TabAlignment.Decimal:  	this.currentXPosition = ProbeAfterDecimalAlignedTab (nextTabStop.Position.Point' out notFitting);  	break;  }  
Missing Default,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,RenderElement,The following switch statement is missing a default case: switch (typeName) {  case "Text":  	if (IsBlank (docObj))  		RenderBlank ();  	else if (IsSoftHyphen (docObj))  		RenderSoftHyphen ();  	else  		RenderText ((Text)docObj);  	break;  case "Character":  	RenderCharacter ((Character)docObj);  	break;  case "DateField":  	RenderDateField ((DateField)docObj);  	break;  case "InfoField":  	RenderInfoField ((InfoField)docObj);  	break;  case "NumPagesField":  	RenderNumPagesField ((NumPagesField)docObj);  	break;  case "PageField":  	RenderPageField ((PageField)docObj);  	break;  case "SectionField":  	RenderSectionField ((SectionField)docObj);  	break;  case "SectionPagesField":  	RenderSectionPagesField ((SectionPagesField)docObj);  	break;  case "BookmarkField":  	RenderBookmarkField ();  	break;  case "PageRefField":  	RenderPageRefField ((PageRefField)docObj);  	break;  case "Image":  	RenderImage ((Image)docObj);  	break;  //        default:  //          throw new NotImplementedException(typeName + " is coming soon...");  }  
Missing Default,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,EndHyperlink,The following switch statement is missing a default case: switch (hyperlink.Type) {  case HyperlinkType.Local:  	int pageRef = this.fieldInfos.GetPhysicalPageNumber (hyperlink.Name);  	if (pageRef > 0)  		page.AddDocumentLink (new PdfRectangle (rect)' pageRef);  	break;  case HyperlinkType.Web:  	page.AddWebLink (new PdfRectangle (rect)' hyperlink.Name);  	break;  case HyperlinkType.File:  	page.AddFileLink (new PdfRectangle (rect)' hyperlink.Name);  	break;  }  
Missing Default,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,GetListSymbol,The following switch statement is missing a default case: switch (listInfo.ListType) {  case ListType.BulletList1:  	symbol = "·";  	font = new XFont ("Symbol"' size' style);  	break;  case ListType.BulletList2:  	symbol = "o";  	font = new XFont ("Courier New"' size' style);  	break;  case ListType.BulletList3:  	symbol = "§";  	font = new XFont ("Wingdings"' size' style);  	break;  case ListType.NumberList1:  	symbol = this.documentRenderer.NextListNumber (listInfo) + ".";  	font = FontHandler.FontToXFont (format.Font' this.documentRenderer.PrivateFonts' this.gfx.MUH' this.gfx.MFEH);  	break;  case ListType.NumberList2:  	symbol = this.documentRenderer.NextListNumber (listInfo) + ")";  	font = FontHandler.FontToXFont (format.Font' this.documentRenderer.PrivateFonts' this.gfx.MUH' this.gfx.MFEH);  	break;  case ListType.NumberList3:  	symbol = NumberFormatter.Format (this.documentRenderer.NextListNumber (listInfo)' "alphabetic") + ")";  	font = FontHandler.FontToXFont (format.Font' this.documentRenderer.PrivateFonts' this.gfx.MUH' this.gfx.MFEH);  	break;  }  
Missing Default,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,Format,The following switch statement is missing a default case: switch (result) {  case FormatResult.Ignore:  	this.currentLeaf = this.currentLeaf.GetNextLeaf ();  	break;  case FormatResult.Continue:  	lastResult = result;  	this.currentLeaf = this.currentLeaf.GetNextLeaf ();  	break;  case FormatResult.NewLine:  	lastResult = result;  	StoreLineInformation ();  	if (!StartNewLine ()) {  		result = FormatResult.NewArea;  		formatInfo.isEnding = false;  	}  	break;  }  
Missing Default,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,IsSpaceCharacter,The following switch statement is missing a default case: switch (((Character)docObj).SymbolName) {  case SymbolName.Blank:  case SymbolName.Em:  case SymbolName.Em4:  case SymbolName.En:  	return true;  }  
Missing Default,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,GetSpaceWidth,The following switch statement is missing a default case: switch (character.SymbolName) {  case SymbolName.Blank:  	width = MeasureString (" ");  	break;  case SymbolName.Em:  	width = MeasureString ("m");  	break;  case SymbolName.Em4:  	width = 0.25 * MeasureString ("m");  	break;  case SymbolName.En:  	width = MeasureString ("n");  	break;  }  
Missing Default,MigraDoc.Rendering,ParagraphRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ParagraphRenderer.cs,CalcVerticalInfo,The following switch statement is missing a default case: switch (spacingRule) {  case LineSpacingRule.Single:  	lineHeight = singleLineSpace;  	break;  case LineSpacingRule.OnePtFive:  	lineHeight = 1.5 * singleLineSpace;  	break;  case LineSpacingRule.Double:  	lineHeight = 2.0 * singleLineSpace;  	break;  case LineSpacingRule.Multiple:  	lineHeight = this.paragraph.Format.LineSpacing * singleLineSpace;  	break;  case LineSpacingRule.AtLeast:  	lineHeight = Math.Max (singleLineSpace' paragraph.Format.LineSpacing);  	break;  case LineSpacingRule.Exactly:  	lineHeight = new XUnit (paragraph.Format.LineSpacing);  	inherentLineSpace = paragraph.Format.LineSpacing.Point;  	break;  }  
Missing Default,MigraDoc.Rendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ShapeRenderer.cs,GetFloating,The following switch statement is missing a default case: switch (this.shape.WrapFormat.Style) {  case WrapStyle.None:  case WrapStyle.Through:  	return Floating.None;  }  
Missing Default,MigraDoc.Rendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ShapeRenderer.cs,GetHorizontalReference,The following switch statement is missing a default case: switch (this.shape.RelativeHorizontal) {  case RelativeHorizontal.Margin:  	return HorizontalReference.PageMargin;  case RelativeHorizontal.Page:  	return HorizontalReference.Page;  }  
Missing Default,MigraDoc.Rendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ShapeRenderer.cs,GetVerticalReference,The following switch statement is missing a default case: switch (this.shape.RelativeVertical) {  case RelativeVertical.Margin:  	return VerticalReference.PageMargin;  case RelativeVertical.Page:  	return VerticalReference.Page;  }  
Missing Default,MigraDoc.Rendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ShapeRenderer.cs,GetVerticalAlignment,The following switch statement is missing a default case: switch (this.shape.Top.ShapePosition) {  case ShapePosition.Center:  	return ElementAlignment.Center;  case ShapePosition.Bottom:  	return ElementAlignment.Far;  }  
Missing Default,MigraDoc.Rendering,ShapeRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\ShapeRenderer.cs,GetHorizontalAlignment,The following switch statement is missing a default case: switch (this.shape.Left.ShapePosition) {  case ShapePosition.Center:  	return ElementAlignment.Center;  case ShapePosition.Right:  	return ElementAlignment.Far;  case ShapePosition.Outside:  	return ElementAlignment.Outside;  case ShapePosition.Inside:  	return ElementAlignment.Inside;  }  
Missing Default,MigraDoc.Rendering,TableRenderer,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering\TableRenderer.cs,FinishLayoutInfo,The following switch statement is missing a default case: switch (this.table.Rows.Alignment) {  case RowAlignment.Left:  	layoutInfo.HorizontalAlignment = ElementAlignment.Near;  	break;  case RowAlignment.Right:  	layoutInfo.HorizontalAlignment = ElementAlignment.Far;  	break;  case RowAlignment.Center:  	layoutInfo.HorizontalAlignment = ElementAlignment.Center;  	break;  }  
Missing Default,MigraDoc.Rendering.ChartMapper,LineFormatMapper,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\MigraDoc\code\MigraDoc.Rendering\MigraDoc.Rendering.ChartMapper\LineFormatMapper.cs,MapObject,The following switch statement is missing a default case: switch (domLineFormat.Style) {  case MigraDoc.DocumentObjectModel.Shapes.LineStyle.Single:  	lineFormat.Style = LineStyle.Single;  	break;  }  
