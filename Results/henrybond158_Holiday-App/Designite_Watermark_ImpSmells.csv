Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,Cyclomatic complexity of the method is 11
Long Statement,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The length of the statement  "	File.Copy (Path.Combine ("../../../../../PDFs/"' filename)' Path.Combine (Directory.GetCurrentDirectory ()' filename)' true); " is 125.
Long Statement,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The length of the statement  "				gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format); " is 125.
Long Statement,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The length of the statement  "				path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default); " is 173.
Long Statement,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The length of the statement  "				path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default); " is 173.
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: if (document.Version < 14)  	document.Version = 14;  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: if (document.Version < 14)  	document.Version = 14;  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: document.Version = 14;  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: for (int idx = 0; idx < document.Pages.Count; idx++) {  	//if (idx == 1) break;  	PdfPage page = document.Pages [idx];  	switch (idx % 3) {  	case 0:  		{  			// Variation 1: Draw watermark as text string  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			#if true_  			            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a string format  			XStringFormat format = new XStringFormat ();  			format.Alignment = XStringAlignment.Near;  			format.LineAlignment = XLineAlignment.Near;  			// Create a dimmed red brush  			XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  			// Draw the string  			gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  		}  		break;  	case 1:  		{  			// Variation 2: Draw watermark as outlined graphical path  			// Get an XGraphics object for drawing beneath the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen  			XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  			// Stroke the outline of the path  			gfx.DrawPath (pen' path);  		}  		break;  	case 2:  		{  			// Variation 3: Draw watermark as transparent graphical path above text  			// Get an XGraphics object for drawing above the existing content  			XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  			// Get the size (in point) of the text  			XSize size = gfx.MeasureString (watermark' font);  			// Define a rotation transformation at the center of the page  			gfx.TranslateTransform (page.Width / 2' page.Height / 2);  			gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  			gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  			// Create a graphical path  			XGraphicsPath path = new XGraphicsPath ();  			// Add the text to the path  			path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  			// Create a dimmed red pen and brush  			XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  			XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  			// Stroke the outline of the path  			gfx.DrawPath (pen' brush' path);  		}  		break;  	}  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: gfx.TranslateTransform (page.Width / 2' page.Height / 2);  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: gfx.TranslateTransform (page.Width / 2' page.Height / 2);  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: gfx.TranslateTransform (page.Width / 2' page.Height / 2);  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: gfx.TranslateTransform (page.Width / 2' page.Height / 2);  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: gfx.TranslateTransform (page.Width / 2' page.Height / 2);  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: gfx.TranslateTransform (page.Width / 2' page.Height / 2);  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  
Magic Number,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following statement contains a magic number: path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  
Missing Default,Watermark,Program,C:\repos\henrybond158_Holiday-App\Holiday App\External Libraries\PDFsharp\samples\Samples C#\Based on GDI+\Watermark\Program.cs,Main,The following switch statement is missing a default case: switch (idx % 3) {  case 0:  	{  		// Variation 1: Draw watermark as text string  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		#if true_  		            // Fill background with linear gradient color             XRect rect = page.MediaBox.ToXRect();             XLinearGradientBrush gbrush = new XLinearGradientBrush(rect'               XColors.LightSalmon' XColors.WhiteSmoke' XLinearGradientMode.Vertical);             gfx.DrawRectangle(gbrush' rect); #endif  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a string format  		XStringFormat format = new XStringFormat ();  		format.Alignment = XStringAlignment.Near;  		format.LineAlignment = XLineAlignment.Near;  		// Create a dimmed red brush  		XBrush brush = new XSolidBrush (XColor.FromArgb (128' 255' 0' 0));  		// Draw the string  		gfx.DrawString (watermark' font' brush' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' format);  	}  	break;  case 1:  	{  		// Variation 2: Draw watermark as outlined graphical path  		// Get an XGraphics object for drawing beneath the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Prepend);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen  		XPen pen = new XPen (XColor.FromArgb (128' 255' 0' 0)' 2);  		// Stroke the outline of the path  		gfx.DrawPath (pen' path);  	}  	break;  case 2:  	{  		// Variation 3: Draw watermark as transparent graphical path above text  		// Get an XGraphics object for drawing above the existing content  		XGraphics gfx = XGraphics.FromPdfPage (page' XGraphicsPdfPageOptions.Append);  		// Get the size (in point) of the text  		XSize size = gfx.MeasureString (watermark' font);  		// Define a rotation transformation at the center of the page  		gfx.TranslateTransform (page.Width / 2' page.Height / 2);  		gfx.RotateTransform (-Math.Atan (page.Height / page.Width) * 180 / Math.PI);  		gfx.TranslateTransform (-page.Width / 2' -page.Height / 2);  		// Create a graphical path  		XGraphicsPath path = new XGraphicsPath ();  		// Add the text to the path  		path.AddString (watermark' font.FontFamily' XFontStyle.BoldItalic' 150' new XPoint ((page.Width - size.Width) / 2' (page.Height - size.Height) / 2)' XStringFormats.Default);  		// Create a dimmed red pen and brush  		XPen pen = new XPen (XColor.FromArgb (50' 75' 0' 130)' 3);  		XBrush brush = new XSolidBrush (XColor.FromArgb (50' 106' 90' 205));  		// Stroke the outline of the path  		gfx.DrawPath (pen' brush' path);  	}  	break;  }  
