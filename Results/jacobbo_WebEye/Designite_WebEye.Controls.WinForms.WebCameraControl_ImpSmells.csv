Implementation smell,Namespace,Class,File,Method,Description
Magic Number,WebEye.Controls.WinForms.WebCameraControl,DirectShowProxy,C:\repos\jacobbo_WebEye\WebCameraControl\WinForms\WebCameraControl\DirectShowProxy.cs,GetCurrentImage,The following statement contains a magic number: try              {                  BITMAPINFOHEADER biHeader = (BITMAPINFOHEADER)Marshal.PtrToStructure(dibPtr' typeof(BITMAPINFOHEADER));                  Int32 stride = biHeader.biWidth * (biHeader.biBitCount / 8);                    // The bits in the array are packed together' but each scan line must be                  // padded with zeros to end on a LONG data-type boundary.                  Int32 padding = stride % 4 > 0 ? 4 - stride % 4 : 0;                  stride += padding;                    PixelFormat pixelFormat = PixelFormat.Undefined;                  switch (biHeader.biBitCount)                  {                      case 1:                          pixelFormat = PixelFormat.Format1bppIndexed;                          break;                      case 4:                          pixelFormat = PixelFormat.Format4bppIndexed;                          break;                      case 8:                          pixelFormat = PixelFormat.Format8bppIndexed;                          break;                      case 16:                          pixelFormat = PixelFormat.Format16bppRgb555;                          break;                      case 24:                          pixelFormat = PixelFormat.Format24bppRgb;                          break;                      case 32:                          pixelFormat = PixelFormat.Format32bppRgb;                          break;                  }                    Bitmap image = new Bitmap(biHeader.biWidth' biHeader.biHeight' stride'                      pixelFormat' (IntPtr)(dibPtr.ToInt64() + Marshal.SizeOf(biHeader)));                  image.RotateFlip(RotateFlipType.RotateNoneFlipY);                    return image;              }              finally              {                  if (dibPtr != IntPtr.Zero)                  {                      Marshal.FreeCoTaskMem(dibPtr);                  }              }
Magic Number,WebEye.Controls.WinForms.WebCameraControl,DirectShowProxy,C:\repos\jacobbo_WebEye\WebCameraControl\WinForms\WebCameraControl\DirectShowProxy.cs,GetCurrentImage,The following statement contains a magic number: try              {                  BITMAPINFOHEADER biHeader = (BITMAPINFOHEADER)Marshal.PtrToStructure(dibPtr' typeof(BITMAPINFOHEADER));                  Int32 stride = biHeader.biWidth * (biHeader.biBitCount / 8);                    // The bits in the array are packed together' but each scan line must be                  // padded with zeros to end on a LONG data-type boundary.                  Int32 padding = stride % 4 > 0 ? 4 - stride % 4 : 0;                  stride += padding;                    PixelFormat pixelFormat = PixelFormat.Undefined;                  switch (biHeader.biBitCount)                  {                      case 1:                          pixelFormat = PixelFormat.Format1bppIndexed;                          break;                      case 4:                          pixelFormat = PixelFormat.Format4bppIndexed;                          break;                      case 8:                          pixelFormat = PixelFormat.Format8bppIndexed;                          break;                      case 16:                          pixelFormat = PixelFormat.Format16bppRgb555;                          break;                      case 24:                          pixelFormat = PixelFormat.Format24bppRgb;                          break;                      case 32:                          pixelFormat = PixelFormat.Format32bppRgb;                          break;                  }                    Bitmap image = new Bitmap(biHeader.biWidth' biHeader.biHeight' stride'                      pixelFormat' (IntPtr)(dibPtr.ToInt64() + Marshal.SizeOf(biHeader)));                  image.RotateFlip(RotateFlipType.RotateNoneFlipY);                    return image;              }              finally              {                  if (dibPtr != IntPtr.Zero)                  {                      Marshal.FreeCoTaskMem(dibPtr);                  }              }
Magic Number,WebEye.Controls.WinForms.WebCameraControl,DirectShowProxy,C:\repos\jacobbo_WebEye\WebCameraControl\WinForms\WebCameraControl\DirectShowProxy.cs,GetCurrentImage,The following statement contains a magic number: try              {                  BITMAPINFOHEADER biHeader = (BITMAPINFOHEADER)Marshal.PtrToStructure(dibPtr' typeof(BITMAPINFOHEADER));                  Int32 stride = biHeader.biWidth * (biHeader.biBitCount / 8);                    // The bits in the array are packed together' but each scan line must be                  // padded with zeros to end on a LONG data-type boundary.                  Int32 padding = stride % 4 > 0 ? 4 - stride % 4 : 0;                  stride += padding;                    PixelFormat pixelFormat = PixelFormat.Undefined;                  switch (biHeader.biBitCount)                  {                      case 1:                          pixelFormat = PixelFormat.Format1bppIndexed;                          break;                      case 4:                          pixelFormat = PixelFormat.Format4bppIndexed;                          break;                      case 8:                          pixelFormat = PixelFormat.Format8bppIndexed;                          break;                      case 16:                          pixelFormat = PixelFormat.Format16bppRgb555;                          break;                      case 24:                          pixelFormat = PixelFormat.Format24bppRgb;                          break;                      case 32:                          pixelFormat = PixelFormat.Format32bppRgb;                          break;                  }                    Bitmap image = new Bitmap(biHeader.biWidth' biHeader.biHeight' stride'                      pixelFormat' (IntPtr)(dibPtr.ToInt64() + Marshal.SizeOf(biHeader)));                  image.RotateFlip(RotateFlipType.RotateNoneFlipY);                    return image;              }              finally              {                  if (dibPtr != IntPtr.Zero)                  {                      Marshal.FreeCoTaskMem(dibPtr);                  }              }
Magic Number,WebEye.Controls.WinForms.WebCameraControl,DirectShowProxy,C:\repos\jacobbo_WebEye\WebCameraControl\WinForms\WebCameraControl\DirectShowProxy.cs,GetCurrentImage,The following statement contains a magic number: try              {                  BITMAPINFOHEADER biHeader = (BITMAPINFOHEADER)Marshal.PtrToStructure(dibPtr' typeof(BITMAPINFOHEADER));                  Int32 stride = biHeader.biWidth * (biHeader.biBitCount / 8);                    // The bits in the array are packed together' but each scan line must be                  // padded with zeros to end on a LONG data-type boundary.                  Int32 padding = stride % 4 > 0 ? 4 - stride % 4 : 0;                  stride += padding;                    PixelFormat pixelFormat = PixelFormat.Undefined;                  switch (biHeader.biBitCount)                  {                      case 1:                          pixelFormat = PixelFormat.Format1bppIndexed;                          break;                      case 4:                          pixelFormat = PixelFormat.Format4bppIndexed;                          break;                      case 8:                          pixelFormat = PixelFormat.Format8bppIndexed;                          break;                      case 16:                          pixelFormat = PixelFormat.Format16bppRgb555;                          break;                      case 24:                          pixelFormat = PixelFormat.Format24bppRgb;                          break;                      case 32:                          pixelFormat = PixelFormat.Format32bppRgb;                          break;                  }                    Bitmap image = new Bitmap(biHeader.biWidth' biHeader.biHeight' stride'                      pixelFormat' (IntPtr)(dibPtr.ToInt64() + Marshal.SizeOf(biHeader)));                  image.RotateFlip(RotateFlipType.RotateNoneFlipY);                    return image;              }              finally              {                  if (dibPtr != IntPtr.Zero)                  {                      Marshal.FreeCoTaskMem(dibPtr);                  }              }
Magic Number,WebEye.Controls.WinForms.WebCameraControl,DirectShowProxy,C:\repos\jacobbo_WebEye\WebCameraControl\WinForms\WebCameraControl\DirectShowProxy.cs,GetCurrentImage,The following statement contains a magic number: try              {                  BITMAPINFOHEADER biHeader = (BITMAPINFOHEADER)Marshal.PtrToStructure(dibPtr' typeof(BITMAPINFOHEADER));                  Int32 stride = biHeader.biWidth * (biHeader.biBitCount / 8);                    // The bits in the array are packed together' but each scan line must be                  // padded with zeros to end on a LONG data-type boundary.                  Int32 padding = stride % 4 > 0 ? 4 - stride % 4 : 0;                  stride += padding;                    PixelFormat pixelFormat = PixelFormat.Undefined;                  switch (biHeader.biBitCount)                  {                      case 1:                          pixelFormat = PixelFormat.Format1bppIndexed;                          break;                      case 4:                          pixelFormat = PixelFormat.Format4bppIndexed;                          break;                      case 8:                          pixelFormat = PixelFormat.Format8bppIndexed;                          break;                      case 16:                          pixelFormat = PixelFormat.Format16bppRgb555;                          break;                      case 24:                          pixelFormat = PixelFormat.Format24bppRgb;                          break;                      case 32:                          pixelFormat = PixelFormat.Format32bppRgb;                          break;                  }                    Bitmap image = new Bitmap(biHeader.biWidth' biHeader.biHeight' stride'                      pixelFormat' (IntPtr)(dibPtr.ToInt64() + Marshal.SizeOf(biHeader)));                  image.RotateFlip(RotateFlipType.RotateNoneFlipY);                    return image;              }              finally              {                  if (dibPtr != IntPtr.Zero)                  {                      Marshal.FreeCoTaskMem(dibPtr);                  }              }
Magic Number,WebEye.Controls.WinForms.WebCameraControl,DirectShowProxy,C:\repos\jacobbo_WebEye\WebCameraControl\WinForms\WebCameraControl\DirectShowProxy.cs,GetCurrentImage,The following statement contains a magic number: try              {                  BITMAPINFOHEADER biHeader = (BITMAPINFOHEADER)Marshal.PtrToStructure(dibPtr' typeof(BITMAPINFOHEADER));                  Int32 stride = biHeader.biWidth * (biHeader.biBitCount / 8);                    // The bits in the array are packed together' but each scan line must be                  // padded with zeros to end on a LONG data-type boundary.                  Int32 padding = stride % 4 > 0 ? 4 - stride % 4 : 0;                  stride += padding;                    PixelFormat pixelFormat = PixelFormat.Undefined;                  switch (biHeader.biBitCount)                  {                      case 1:                          pixelFormat = PixelFormat.Format1bppIndexed;                          break;                      case 4:                          pixelFormat = PixelFormat.Format4bppIndexed;                          break;                      case 8:                          pixelFormat = PixelFormat.Format8bppIndexed;                          break;                      case 16:                          pixelFormat = PixelFormat.Format16bppRgb555;                          break;                      case 24:                          pixelFormat = PixelFormat.Format24bppRgb;                          break;                      case 32:                          pixelFormat = PixelFormat.Format32bppRgb;                          break;                  }                    Bitmap image = new Bitmap(biHeader.biWidth' biHeader.biHeight' stride'                      pixelFormat' (IntPtr)(dibPtr.ToInt64() + Marshal.SizeOf(biHeader)));                  image.RotateFlip(RotateFlipType.RotateNoneFlipY);                    return image;              }              finally              {                  if (dibPtr != IntPtr.Zero)                  {                      Marshal.FreeCoTaskMem(dibPtr);                  }              }
Magic Number,WebEye.Controls.WinForms.WebCameraControl,DirectShowProxy,C:\repos\jacobbo_WebEye\WebCameraControl\WinForms\WebCameraControl\DirectShowProxy.cs,GetCurrentImage,The following statement contains a magic number: try              {                  BITMAPINFOHEADER biHeader = (BITMAPINFOHEADER)Marshal.PtrToStructure(dibPtr' typeof(BITMAPINFOHEADER));                  Int32 stride = biHeader.biWidth * (biHeader.biBitCount / 8);                    // The bits in the array are packed together' but each scan line must be                  // padded with zeros to end on a LONG data-type boundary.                  Int32 padding = stride % 4 > 0 ? 4 - stride % 4 : 0;                  stride += padding;                    PixelFormat pixelFormat = PixelFormat.Undefined;                  switch (biHeader.biBitCount)                  {                      case 1:                          pixelFormat = PixelFormat.Format1bppIndexed;                          break;                      case 4:                          pixelFormat = PixelFormat.Format4bppIndexed;                          break;                      case 8:                          pixelFormat = PixelFormat.Format8bppIndexed;                          break;                      case 16:                          pixelFormat = PixelFormat.Format16bppRgb555;                          break;                      case 24:                          pixelFormat = PixelFormat.Format24bppRgb;                          break;                      case 32:                          pixelFormat = PixelFormat.Format32bppRgb;                          break;                  }                    Bitmap image = new Bitmap(biHeader.biWidth' biHeader.biHeight' stride'                      pixelFormat' (IntPtr)(dibPtr.ToInt64() + Marshal.SizeOf(biHeader)));                  image.RotateFlip(RotateFlipType.RotateNoneFlipY);                    return image;              }              finally              {                  if (dibPtr != IntPtr.Zero)                  {                      Marshal.FreeCoTaskMem(dibPtr);                  }              }
Magic Number,WebEye.Controls.WinForms.WebCameraControl,DirectShowProxy,C:\repos\jacobbo_WebEye\WebCameraControl\WinForms\WebCameraControl\DirectShowProxy.cs,GetCurrentImage,The following statement contains a magic number: try              {                  BITMAPINFOHEADER biHeader = (BITMAPINFOHEADER)Marshal.PtrToStructure(dibPtr' typeof(BITMAPINFOHEADER));                  Int32 stride = biHeader.biWidth * (biHeader.biBitCount / 8);                    // The bits in the array are packed together' but each scan line must be                  // padded with zeros to end on a LONG data-type boundary.                  Int32 padding = stride % 4 > 0 ? 4 - stride % 4 : 0;                  stride += padding;                    PixelFormat pixelFormat = PixelFormat.Undefined;                  switch (biHeader.biBitCount)                  {                      case 1:                          pixelFormat = PixelFormat.Format1bppIndexed;                          break;                      case 4:                          pixelFormat = PixelFormat.Format4bppIndexed;                          break;                      case 8:                          pixelFormat = PixelFormat.Format8bppIndexed;                          break;                      case 16:                          pixelFormat = PixelFormat.Format16bppRgb555;                          break;                      case 24:                          pixelFormat = PixelFormat.Format24bppRgb;                          break;                      case 32:                          pixelFormat = PixelFormat.Format32bppRgb;                          break;                  }                    Bitmap image = new Bitmap(biHeader.biWidth' biHeader.biHeight' stride'                      pixelFormat' (IntPtr)(dibPtr.ToInt64() + Marshal.SizeOf(biHeader)));                  image.RotateFlip(RotateFlipType.RotateNoneFlipY);                    return image;              }              finally              {                  if (dibPtr != IntPtr.Zero)                  {                      Marshal.FreeCoTaskMem(dibPtr);                  }              }
Magic Number,WebEye.Controls.WinForms.WebCameraControl,DirectShowProxy,C:\repos\jacobbo_WebEye\WebCameraControl\WinForms\WebCameraControl\DirectShowProxy.cs,GetCurrentImage,The following statement contains a magic number: try              {                  BITMAPINFOHEADER biHeader = (BITMAPINFOHEADER)Marshal.PtrToStructure(dibPtr' typeof(BITMAPINFOHEADER));                  Int32 stride = biHeader.biWidth * (biHeader.biBitCount / 8);                    // The bits in the array are packed together' but each scan line must be                  // padded with zeros to end on a LONG data-type boundary.                  Int32 padding = stride % 4 > 0 ? 4 - stride % 4 : 0;                  stride += padding;                    PixelFormat pixelFormat = PixelFormat.Undefined;                  switch (biHeader.biBitCount)                  {                      case 1:                          pixelFormat = PixelFormat.Format1bppIndexed;                          break;                      case 4:                          pixelFormat = PixelFormat.Format4bppIndexed;                          break;                      case 8:                          pixelFormat = PixelFormat.Format8bppIndexed;                          break;                      case 16:                          pixelFormat = PixelFormat.Format16bppRgb555;                          break;                      case 24:                          pixelFormat = PixelFormat.Format24bppRgb;                          break;                      case 32:                          pixelFormat = PixelFormat.Format32bppRgb;                          break;                  }                    Bitmap image = new Bitmap(biHeader.biWidth' biHeader.biHeight' stride'                      pixelFormat' (IntPtr)(dibPtr.ToInt64() + Marshal.SizeOf(biHeader)));                  image.RotateFlip(RotateFlipType.RotateNoneFlipY);                    return image;              }              finally              {                  if (dibPtr != IntPtr.Zero)                  {                      Marshal.FreeCoTaskMem(dibPtr);                  }              }
Magic Number,WebEye.Controls.WinForms.WebCameraControl,WebCameraId,C:\repos\jacobbo_WebEye\WebCameraControl\WinForms\WebCameraControl\WebCameraId.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return (_name.GetHashCode() * 397) ^ _devicePath.GetHashCode();              }
Missing Default,WebEye.Controls.WinForms.WebCameraControl,DirectShowProxy,C:\repos\jacobbo_WebEye\WebCameraControl\WinForms\WebCameraControl\DirectShowProxy.cs,GetCurrentImage,The following switch statement is missing a default case: switch (biHeader.biBitCount)                  {                      case 1:                          pixelFormat = PixelFormat.Format1bppIndexed;                          break;                      case 4:                          pixelFormat = PixelFormat.Format4bppIndexed;                          break;                      case 8:                          pixelFormat = PixelFormat.Format8bppIndexed;                          break;                      case 16:                          pixelFormat = PixelFormat.Format16bppRgb555;                          break;                      case 24:                          pixelFormat = PixelFormat.Format24bppRgb;                          break;                      case 32:                          pixelFormat = PixelFormat.Format32bppRgb;                          break;                  }
