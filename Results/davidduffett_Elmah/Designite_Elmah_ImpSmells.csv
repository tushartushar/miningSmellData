Implementation smell,Namespace,Class,File,Method,Description
Long Method,Elmah,ErrorDetailPage,C:\repos\davidduffett_Elmah\src\Elmah\ErrorDetailPage.cs,RenderError,The method has 117 lines of code.
Complex Method,Elmah,ErrorJson,C:\repos\davidduffett_Elmah\src\Elmah\ErrorJson.cs,Member,Cyclomatic complexity of the method is 13
Complex Method,Elmah,ErrorXml,C:\repos\davidduffett_Elmah\src\Elmah\ErrorXml.cs,UpcodeTo,Cyclomatic complexity of the method is 9
Complex Method,Elmah,MemoryErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\MemoryErrorLog.cs,GetErrors,Cyclomatic complexity of the method is 8
Complex Method,Elmah,StringFormatter,C:\repos\davidduffett_Elmah\src\Elmah\StringFormatter.cs,FormatImpl,Cyclomatic complexity of the method is 9
Complex Method,Elmah,StringFormatter,C:\repos\davidduffett_Elmah\src\Elmah\StringFormatter.cs,BindFormatToken,Cyclomatic complexity of the method is 9
Complex Method,Elmah.Assertions,LogicalAssertion,C:\repos\davidduffett_Elmah\src\Elmah\Assertions\LogicalAssertion.cs,Test,Cyclomatic complexity of the method is 8
Long Parameter List,Elmah,ErrorDetailPage,C:\repos\davidduffett_Elmah\src\Elmah\ErrorDetailPage.cs,StackFrameSpan,The method has 5 parameters. Parameters: text' anchor' klass' group' writer
Long Parameter List,Elmah,ErrorDetailPage,C:\repos\davidduffett_Elmah\src\Elmah\ErrorDetailPage.cs,StackFrameSpan,The method has 7 parameters. Parameters: text' anchor' klass' value' index' length' writer
Long Parameter List,Elmah,ErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\ErrorLog.cs,BeginGetErrors,The method has 5 parameters. Parameters: pageIndex' pageSize' errorEntryList' asyncCallback' asyncState
Long Parameter List,Elmah,ErrorLogPage,C:\repos\davidduffett_Elmah\src\Elmah\ErrorLogPage.cs,RenderLinkToPage,The method has 5 parameters. Parameters: writer' type' text' pageIndex' pageSize
Long Parameter List,Elmah,Commands,C:\repos\davidduffett_Elmah\src\Elmah\MySqlErrorLog.cs,LogError,The method has 10 parameters. Parameters: id' appName' hostName' typeName' source' message' user' statusCode' time' xml
Long Parameter List,Elmah,Commands,C:\repos\davidduffett_Elmah\src\Elmah\MySqlErrorLog.cs,LogError,The method has 10 parameters. Parameters: id' appName' hostName' typeName' source' message' user' statusCode' time' xml
Long Parameter List,Elmah,Commands,C:\repos\davidduffett_Elmah\src\Elmah\MySqlErrorLog.cs,LogError,The method has 10 parameters. Parameters: id' appName' hostName' typeName' source' message' user' statusCode' time' xml
Long Parameter List,Elmah,SqlErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\SqlErrorLog.cs,BeginGetErrors,The method has 5 parameters. Parameters: pageIndex' pageSize' errorEntryList' asyncCallback' asyncState
Long Statement,Elmah,AboutPage,C:\repos\davidduffett_Elmah\src\Elmah\AboutPage.cs,RenderContents,The length of the statement  "            writer.AddAttribute(HtmlTextWriterAttribute.Title' "Checks if your ELMAH version is up to date (requires Internet connection)"); " is 128.
Long Statement,Elmah,AboutPage,C:\repos\davidduffett_Elmah\src\Elmah\AboutPage.cs,GetFileVersion,The length of the statement  "            AssemblyFileVersionAttribute version = (AssemblyFileVersionAttribute) Attribute.GetCustomAttribute(GetType().Assembly' typeof(AssemblyFileVersionAttribute)); " is 157.
Long Statement,Elmah,ConnectionStringHelper,C:\repos\davidduffett_Elmah\src\Elmah\ConnectionStringHelper.cs,GetDataSourceFilePath,The length of the statement  "                throw new ArgumentException("A 'Data Source' parameter was expected in the supplied connection string' but it was not found."); " is 127.
Long Statement,Elmah,ErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\ErrorLog.cs,EndSyncImpl,The length of the statement  "                throw new ArgumentException("IAsyncResult object did not come from the corresponding async method on this type."' "asyncResult"); " is 129.
Long Statement,Elmah,JsonPaddingFormat,C:\repos\davidduffett_Elmah\src\Elmah\ErrorLogDownloadHandler.cs,Header,The length of the statement  "                    output.WriteLine("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">"); " is 146.
Long Statement,Elmah,ErrorLogPage,C:\repos\davidduffett_Elmah\src\Elmah\ErrorLogPage.cs,RenderErrors,The length of the statement  "                bodyRow.Cells.Add(FormatCell(new TableCell()' error.StatusCode.ToString()' "code-col"' HttpWorkerRequest.GetStatusDescription(error.StatusCode) ?? string.Empty)); " is 162.
Long Statement,Elmah,ErrorMailModule,C:\repos\davidduffett_Elmah\src\Elmah\ErrorMailModule.cs,OnInit,The length of the statement  "            MailPriority mailPriority = (MailPriority) Enum.Parse(typeof(MailPriority)' GetSetting(config' "priority"' MailPriority.Normal.ToString())' true); " is 146.
Long Statement,Elmah,ErrorPageBase,C:\repos\davidduffett_Elmah\src\Elmah\ErrorPageBase.cs,RenderDocumentStart,The length of the statement  "            writer.WriteLine("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">"); " is 146.
Long Statement,Elmah,ErrorTweetModule,C:\repos\davidduffett_Elmah\src\Elmah\ErrorTweetModule.cs,OnInit,The length of the statement  "            int maxStatusLength = int.Parse(GetSetting(config' "maxStatusLength"' "140")' NumberStyles.None' CultureInfo.InvariantCulture); " is 127.
Long Statement,Elmah,ErrorXml,C:\repos\davidduffett_Elmah\src\Elmah\ErrorXml.cs,Decode,The length of the statement  "            if (!reader.IsStartElement()) throw new ArgumentException("Reader is not positioned at the start of an element."' "reader"); " is 124.
Long Statement,Elmah,ErrorXml,C:\repos\davidduffett_Elmah\src\Elmah\ErrorXml.cs,ReadXmlAttributes,The length of the statement  "            if (!reader.IsStartElement()) throw new ArgumentException("Reader is not positioned at the start of an element."' "reader"); " is 124.
Long Statement,Elmah,ErrorXml,C:\repos\davidduffett_Elmah\src\Elmah\ErrorXml.cs,Encode,The length of the statement  "            if (writer.WriteState != WriteState.Element) throw new ArgumentException("Writer is not in the expected Element state."' "writer"); " is 131.
Long Statement,Elmah,ErrorXml,C:\repos\davidduffett_Elmah\src\Elmah\ErrorXml.cs,WriteXmlAttributes,The length of the statement  "                WriteXmlAttribute(writer' "time"' XmlConvert.ToString(error.Time.ToUniversalTime()' @"yyyy-MM-dd\THH:mm:ss.fffffff\Z")); " is 120.
Long Statement,Elmah,FixIIS5xWildcardMappingModule,C:\repos\davidduffett_Elmah\src\Elmah\FixIIS5xWildcardMappingModule.cs,GetHandlerPath,The length of the statement  "            System.Web.Configuration.HttpHandlersSection handlersSection = System.Configuration.ConfigurationManager.GetSection("system.web/httpHandlers") as System.Web.Configuration.HttpHandlersSection; " is 191.
Long Statement,Elmah,Commands,C:\repos\davidduffett_Elmah\src\Elmah\MySqlErrorLog.cs,LogError,The length of the statement  "                parameters.Add("Application"' MySqlDbType.VarChar' _maxAppNameLength).Value = appName.Substring(0' Math.Min(_maxAppNameLength' appName.Length)); " is 144.
Long Statement,Elmah,Commands,C:\repos\davidduffett_Elmah\src\Elmah\MySqlErrorLog.cs,GetErrorXml,The length of the statement  "                parameters.Add("App"' MySqlDbType.VarChar' _maxAppNameLength).Value = appName.Substring(0' Math.Min(_maxAppNameLength' appName.Length)); " is 136.
Long Statement,Elmah,Commands,C:\repos\davidduffett_Elmah\src\Elmah\MySqlErrorLog.cs,GetErrorsXml,The length of the statement  "                parameters.Add("App"' MySqlDbType.VarChar' _maxAppNameLength).Value = appName.Substring(0' Math.Min(_maxAppNameLength' appName.Length)); " is 136.
Long Statement,Elmah,PgsqlErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\PgsqlErrorLog.cs,Log,The length of the statement  "            using (NpgsqlCommand command = Commands.LogError(id' this.ApplicationName' error.HostName' error.Type' error.Source' error.Message' error.User' error.StatusCode' error.Time' errorXml)) " is 184.
Long Statement,Elmah,SynchronousAsyncResult,C:\repos\davidduffett_Elmah\src\Elmah\SynchronousAsyncResult.cs,End,The length of the statement  "                throw new InvalidOperationException(string.Format("End{0} can only be called once for each asynchronous operation."' _syncMethodName)); " is 135.
Complex Conditional,Elmah,ErrorLogPageFactory,C:\repos\davidduffett_Elmah\src\Elmah\ErrorLogPageFactory.cs,GetHandler,The conditional expression  "authorized == 0                  || (authorized < 0 // Compatibility case...                      && !context.Request.IsLocal                       && !SecurityConfiguration.Default.AllowRemoteAccess)"  is complex.
Complex Conditional,Elmah,JsonTextWriter,C:\repos\davidduffett_Elmah\src\Elmah\JsonTextWriter.cs,WriteImpl,The conditional expression  "Depth == 0 && (text.Length > 1 || (text[0] != '{' && text[0] != '['))"  is complex.
Empty Catch Block,Elmah,Environment,C:\repos\davidduffett_Elmah\src\Elmah\Environment.cs,TryGetMachineName,The method has an empty catch block.
Empty Catch Block,Elmah,Environment,C:\repos\davidduffett_Elmah\src\Elmah\Environment.cs,TryGetMachineName,The method has an empty catch block.
Empty Catch Block,Elmah,Environment,C:\repos\davidduffett_Elmah\src\Elmah\Environment.cs,TryGetMachineName,The method has an empty catch block.
Empty Catch Block,Elmah,HttpModuleRegistry,C:\repos\davidduffett_Elmah\src\Elmah\HttpModuleRegistry.cs,GetModules,The method has an empty catch block.
Magic Number,Elmah,AccessErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\AccessErrorLog.cs,Log,The following statement contains a magic number: using (OleDbConnection connection = new OleDbConnection(this.ConnectionString))              using (OleDbCommand command = connection.CreateCommand())              {                  connection.Open();                    command.CommandType = CommandType.Text;                  command.CommandText = @"INSERT INTO ELMAH_Error                                              (Application' Host' Type' Source'                                               Message' UserName' StatusCode' TimeUtc' AllXml)                                          VALUES                                              (@Application' @Host' @Type' @Source'                                               @Message' @UserName' @StatusCode' @TimeUtc' @AllXml)";                  command.CommandType = CommandType.Text;                    OleDbParameterCollection parameters = command.Parameters;                    parameters.Add("@Application"' OleDbType.VarChar' _maxAppNameLength).Value = ApplicationName;                  parameters.Add("@Host"' OleDbType.VarChar' 30).Value = error.HostName;                  parameters.Add("@Type"' OleDbType.VarChar' 100).Value = error.Type;                  parameters.Add("@Source"' OleDbType.VarChar' 60).Value = error.Source;                  parameters.Add("@Message"' OleDbType.LongVarChar' error.Message.Length).Value = error.Message;                  parameters.Add("@User"' OleDbType.VarChar' 50).Value = error.User;                  parameters.Add("@StatusCode"' OleDbType.Integer).Value = error.StatusCode;                  parameters.Add("@TimeUtc"' OleDbType.Date).Value = error.Time.ToUniversalTime();                  parameters.Add("@AllXml"' OleDbType.LongVarChar' errorXml.Length).Value = errorXml;                                    command.ExecuteNonQuery();                    using (OleDbCommand identityCommand = connection.CreateCommand())                  {                      identityCommand.CommandType = CommandType.Text;                      identityCommand.CommandText = "SELECT @@IDENTITY";                        return Convert.ToString(identityCommand.ExecuteScalar()' CultureInfo.InvariantCulture);                  }              }
Magic Number,Elmah,AccessErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\AccessErrorLog.cs,Log,The following statement contains a magic number: using (OleDbConnection connection = new OleDbConnection(this.ConnectionString))              using (OleDbCommand command = connection.CreateCommand())              {                  connection.Open();                    command.CommandType = CommandType.Text;                  command.CommandText = @"INSERT INTO ELMAH_Error                                              (Application' Host' Type' Source'                                               Message' UserName' StatusCode' TimeUtc' AllXml)                                          VALUES                                              (@Application' @Host' @Type' @Source'                                               @Message' @UserName' @StatusCode' @TimeUtc' @AllXml)";                  command.CommandType = CommandType.Text;                    OleDbParameterCollection parameters = command.Parameters;                    parameters.Add("@Application"' OleDbType.VarChar' _maxAppNameLength).Value = ApplicationName;                  parameters.Add("@Host"' OleDbType.VarChar' 30).Value = error.HostName;                  parameters.Add("@Type"' OleDbType.VarChar' 100).Value = error.Type;                  parameters.Add("@Source"' OleDbType.VarChar' 60).Value = error.Source;                  parameters.Add("@Message"' OleDbType.LongVarChar' error.Message.Length).Value = error.Message;                  parameters.Add("@User"' OleDbType.VarChar' 50).Value = error.User;                  parameters.Add("@StatusCode"' OleDbType.Integer).Value = error.StatusCode;                  parameters.Add("@TimeUtc"' OleDbType.Date).Value = error.Time.ToUniversalTime();                  parameters.Add("@AllXml"' OleDbType.LongVarChar' errorXml.Length).Value = errorXml;                                    command.ExecuteNonQuery();                    using (OleDbCommand identityCommand = connection.CreateCommand())                  {                      identityCommand.CommandType = CommandType.Text;                      identityCommand.CommandText = "SELECT @@IDENTITY";                        return Convert.ToString(identityCommand.ExecuteScalar()' CultureInfo.InvariantCulture);                  }              }
Magic Number,Elmah,AccessErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\AccessErrorLog.cs,Log,The following statement contains a magic number: using (OleDbConnection connection = new OleDbConnection(this.ConnectionString))              using (OleDbCommand command = connection.CreateCommand())              {                  connection.Open();                    command.CommandType = CommandType.Text;                  command.CommandText = @"INSERT INTO ELMAH_Error                                              (Application' Host' Type' Source'                                               Message' UserName' StatusCode' TimeUtc' AllXml)                                          VALUES                                              (@Application' @Host' @Type' @Source'                                               @Message' @UserName' @StatusCode' @TimeUtc' @AllXml)";                  command.CommandType = CommandType.Text;                    OleDbParameterCollection parameters = command.Parameters;                    parameters.Add("@Application"' OleDbType.VarChar' _maxAppNameLength).Value = ApplicationName;                  parameters.Add("@Host"' OleDbType.VarChar' 30).Value = error.HostName;                  parameters.Add("@Type"' OleDbType.VarChar' 100).Value = error.Type;                  parameters.Add("@Source"' OleDbType.VarChar' 60).Value = error.Source;                  parameters.Add("@Message"' OleDbType.LongVarChar' error.Message.Length).Value = error.Message;                  parameters.Add("@User"' OleDbType.VarChar' 50).Value = error.User;                  parameters.Add("@StatusCode"' OleDbType.Integer).Value = error.StatusCode;                  parameters.Add("@TimeUtc"' OleDbType.Date).Value = error.Time.ToUniversalTime();                  parameters.Add("@AllXml"' OleDbType.LongVarChar' errorXml.Length).Value = errorXml;                                    command.ExecuteNonQuery();                    using (OleDbCommand identityCommand = connection.CreateCommand())                  {                      identityCommand.CommandType = CommandType.Text;                      identityCommand.CommandText = "SELECT @@IDENTITY";                        return Convert.ToString(identityCommand.ExecuteScalar()' CultureInfo.InvariantCulture);                  }              }
Magic Number,Elmah,AccessErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\AccessErrorLog.cs,Log,The following statement contains a magic number: using (OleDbConnection connection = new OleDbConnection(this.ConnectionString))              using (OleDbCommand command = connection.CreateCommand())              {                  connection.Open();                    command.CommandType = CommandType.Text;                  command.CommandText = @"INSERT INTO ELMAH_Error                                              (Application' Host' Type' Source'                                               Message' UserName' StatusCode' TimeUtc' AllXml)                                          VALUES                                              (@Application' @Host' @Type' @Source'                                               @Message' @UserName' @StatusCode' @TimeUtc' @AllXml)";                  command.CommandType = CommandType.Text;                    OleDbParameterCollection parameters = command.Parameters;                    parameters.Add("@Application"' OleDbType.VarChar' _maxAppNameLength).Value = ApplicationName;                  parameters.Add("@Host"' OleDbType.VarChar' 30).Value = error.HostName;                  parameters.Add("@Type"' OleDbType.VarChar' 100).Value = error.Type;                  parameters.Add("@Source"' OleDbType.VarChar' 60).Value = error.Source;                  parameters.Add("@Message"' OleDbType.LongVarChar' error.Message.Length).Value = error.Message;                  parameters.Add("@User"' OleDbType.VarChar' 50).Value = error.User;                  parameters.Add("@StatusCode"' OleDbType.Integer).Value = error.StatusCode;                  parameters.Add("@TimeUtc"' OleDbType.Date).Value = error.Time.ToUniversalTime();                  parameters.Add("@AllXml"' OleDbType.LongVarChar' errorXml.Length).Value = errorXml;                                    command.ExecuteNonQuery();                    using (OleDbCommand identityCommand = connection.CreateCommand())                  {                      identityCommand.CommandType = CommandType.Text;                      identityCommand.CommandText = "SELECT @@IDENTITY";                        return Convert.ToString(identityCommand.ExecuteScalar()' CultureInfo.InvariantCulture);                  }              }
Magic Number,Elmah,AccessErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\AccessErrorLog.cs,GetErrors,The following statement contains a magic number: using (OleDbConnection connection = new OleDbConnection(this.ConnectionString))              using (OleDbCommand command = connection.CreateCommand())              {                  command.CommandType = CommandType.Text;                  command.CommandText = "SELECT COUNT(*) FROM ELMAH_Error";                    connection.Open();                  int totalCount = (int)command.ExecuteScalar();                    if (errorEntryList != null && pageIndex * pageSize < totalCount)                  {                      int maxRecords = pageSize * (pageIndex + 1);                      if (maxRecords > totalCount)                      {                          maxRecords = totalCount;                          pageSize = totalCount - pageSize * (totalCount / pageSize);                      }                        StringBuilder sql = new StringBuilder(1000);                      sql.Append("SELECT e.* FROM (");                      sql.Append("SELECT TOP ");                      sql.Append(pageSize.ToString());                      sql.Append(" TimeUtc' ErrorId FROM (");                      sql.Append("SELECT TOP ");                      sql.Append(maxRecords.ToString());                      sql.Append(" TimeUtc' ErrorId FROM ELMAH_Error ");                      sql.Append("ORDER BY TimeUtc DESC' ErrorId DESC) ");                      sql.Append("ORDER BY TimeUtc ASC' ErrorId ASC) AS i ");                      sql.Append("INNER JOIN Elmah_Error AS e ON i.ErrorId = e.ErrorId ");                      sql.Append("ORDER BY e.TimeUtc DESC' e.ErrorId DESC");                        command.CommandText = sql.ToString();                        using (OleDbDataReader reader = command.ExecuteReader())                      {                          Debug.Assert(reader != null);                            while (reader.Read())                          {                              var id = Convert.ToString(reader["ErrorId"]' CultureInfo.InvariantCulture);                                var error = new Error                              {                                  ApplicationName = reader["Application"].ToString()'                                  HostName = reader["Host"].ToString()'                                  Type = reader["Type"].ToString()'                                  Source = reader["Source"].ToString()'                                  Message = reader["Message"].ToString()'                                  User = reader["UserName"].ToString()'                                  StatusCode = Convert.ToInt32(reader["StatusCode"])'                                  Time = Convert.ToDateTime(reader["TimeUtc"]).ToLocalTime()                              };                                errorEntryList.Add(new ErrorLogEntry(this' id' error));                          }                            reader.Close();                      }                  }                    return totalCount;              }
Magic Number,Elmah,AccessErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\AccessErrorLog.cs,InitializeDatabase,The following statement contains a magic number: lock (_mdbInitializationLock)              {                  //                  // Just double-check that no other thread has created the database while                  // we were waiting for the lock.                  //                    if (File.Exists(dbFilePath))                      return;                    //                  // Create a temporary copy of the mkmdb.vbs script.                  // We do this in the same directory as the resulting database for security permission purposes.                  //                    string scriptPath = Path.Combine(Path.GetDirectoryName(dbFilePath)' _scriptResourceName);                    using (FileStream scriptStream = new FileStream(scriptPath' FileMode.Create' FileAccess.Write' FileShare.None))                  {                      ManifestResourceHelper.WriteResourceToStream(scriptStream' _scriptResourceName);                  }                    //                  // Run the script file to create the database using batch                   // mode (//B)' which suppresses script errors and prompts                   // from displaying.                  //                    ProcessStartInfo psi = new ProcessStartInfo(                      "cscript"' scriptPath + " \"" + dbFilePath + "\" //B //NoLogo");                                    psi.UseShellExecute = false;    // i.e. CreateProcess                  psi.CreateNoWindow = true;      // Stay lean' stay mean                                    try                  {                      using (Process process = Process.Start(psi))                      {                          //                          // A few seconds should be plenty of time to create the database.                          //                            TimeSpan tolerance = TimeSpan.FromSeconds(2);                          if (!process.WaitForExit((int) tolerance.TotalMilliseconds))                          {                              //                              // but it wasn't' so clean up and throw an exception!                              // Realistically' I don't expect to ever get here!                              //                                process.Kill();                                throw new Exception(string.Format(                                  "The Microsoft Access database creation script took longer than the allocated time of {0} seconds to execute. "                                  + "The script was terminated prematurely."'                                   tolerance.TotalSeconds));                          }                            if (process.ExitCode != 0)                          {                              throw new Exception(string.Format(                                  "The Microsoft Access database creation script failed with exit code {0}."'                                  process.ExitCode));                          }                      }                  }                  finally                  {                      //                      // Clean up after ourselves!!                      //                        File.Delete(scriptPath);                  }              }
Magic Number,Elmah,ErrorDetailPage,C:\repos\davidduffett_Elmah\src\Elmah\ErrorDetailPage.cs,RenderCollection,The following statement contains a magic number: for (int keyIndex = 0; keyIndex < keys.Length; keyIndex++)              {                  string key = keys[keyIndex];                    TableRow bodyRow = new TableRow();                  bodyRow.CssClass = keyIndex % 2 == 0 ? "even-row" : "odd-row";                    TableCell cell;                    //                  // Create the key column.                  //                    cell = new TableCell();                  cell.Text = HtmlEncode(key);                  cell.CssClass = "key-col";                    bodyRow.Cells.Add(cell);                    //                  // Create the value column.                  //                    cell = new TableCell();                  cell.Text = HtmlEncode(collection[key]);                  cell.CssClass = "value-col";                    bodyRow.Cells.Add(cell);                    table.Rows.Add(bodyRow);              }
Magic Number,Elmah,ErrorDigestRssHandler,C:\repos\davidduffett_Elmah\src\Elmah\ErrorDigestRssHandler.cs,Render,The following statement contains a magic number: const int pageSize = 30;
Magic Number,Elmah,ErrorDigestRssHandler,C:\repos\davidduffett_Elmah\src\Elmah\ErrorDigestRssHandler.cs,Render,The following statement contains a magic number: const int maxPageLimit = 30;
Magic Number,Elmah,CsvFormat,C:\repos\davidduffett_Elmah\src\Elmah\ErrorLogDownloadHandler.cs,Entries,The following statement contains a magic number: DateTime epoch = new DateTime(1970' 1' 1);
Magic Number,Elmah,ErrorLogPage,C:\repos\davidduffett_Elmah\src\Elmah\ErrorLogPage.cs,RenderStockPageSizes,The following statement contains a magic number: int[] stockSizes = new int[] { 10' 15' 20' 25' 30' 50' 100 };
Magic Number,Elmah,ErrorLogPage,C:\repos\davidduffett_Elmah\src\Elmah\ErrorLogPage.cs,RenderStockPageSizes,The following statement contains a magic number: int[] stockSizes = new int[] { 10' 15' 20' 25' 30' 50' 100 };
Magic Number,Elmah,ErrorLogPage,C:\repos\davidduffett_Elmah\src\Elmah\ErrorLogPage.cs,RenderStockPageSizes,The following statement contains a magic number: int[] stockSizes = new int[] { 10' 15' 20' 25' 30' 50' 100 };
Magic Number,Elmah,ErrorLogPage,C:\repos\davidduffett_Elmah\src\Elmah\ErrorLogPage.cs,RenderStockPageSizes,The following statement contains a magic number: int[] stockSizes = new int[] { 10' 15' 20' 25' 30' 50' 100 };
Magic Number,Elmah,ErrorLogPage,C:\repos\davidduffett_Elmah\src\Elmah\ErrorLogPage.cs,RenderStockPageSizes,The following statement contains a magic number: int[] stockSizes = new int[] { 10' 15' 20' 25' 30' 50' 100 };
Magic Number,Elmah,ErrorLogPage,C:\repos\davidduffett_Elmah\src\Elmah\ErrorLogPage.cs,RenderStockPageSizes,The following statement contains a magic number: int[] stockSizes = new int[] { 10' 15' 20' 25' 30' 50' 100 };
Magic Number,Elmah,ErrorLogPage,C:\repos\davidduffett_Elmah\src\Elmah\ErrorLogPage.cs,RenderStockPageSizes,The following statement contains a magic number: int[] stockSizes = new int[] { 10' 15' 20' 25' 30' 50' 100 };
Magic Number,Elmah,ErrorLogPage,C:\repos\davidduffett_Elmah\src\Elmah\ErrorLogPage.cs,RenderErrors,The following statement contains a magic number: for (int errorIndex = 0; errorIndex < _errorEntryList.Count; errorIndex++)              {                  ErrorLogEntry errorEntry = (ErrorLogEntry) _errorEntryList[errorIndex];                  Error error = errorEntry.Error;                    TableRow bodyRow = new TableRow();                  bodyRow.CssClass = errorIndex % 2 == 0 ? "even-row" : "odd-row";                    //                  // Format host and status code cells.                  //                    bodyRow.Cells.Add(FormatCell(new TableCell()' error.HostName' "host-col"));                  bodyRow.Cells.Add(FormatCell(new TableCell()' error.StatusCode.ToString()' "code-col"' HttpWorkerRequest.GetStatusDescription(error.StatusCode) ?? string.Empty));                  bodyRow.Cells.Add(FormatCell(new TableCell()' ErrorDisplay.HumaneExceptionErrorType(error)' "type-col"' error.Type));                                        //                  // Format the message cell' which contains the message                   // text and a details link pointing to the page where                  // all error details can be viewed.                  //                    TableCell messageCell = new TableCell();                  messageCell.CssClass = "error-col";                    Label messageLabel = new Label();                  messageLabel.Text = this.Server.HtmlEncode(error.Message);                    HyperLink detailsLink = new HyperLink();                  detailsLink.NavigateUrl = BasePageName + "/detail?id=" + HttpUtility.UrlEncode(errorEntry.Id);                  detailsLink.Text = "Details&hellip;";                    messageCell.Controls.Add(messageLabel);                  messageCell.Controls.Add(new LiteralControl(" "));                  messageCell.Controls.Add(detailsLink);                    bodyRow.Cells.Add(messageCell);                    //                  // Format the user' date and time cells.                  //                                        bodyRow.Cells.Add(FormatCell(new TableCell()' error.User' "user-col"));                  bodyRow.Cells.Add(FormatCell(new TableCell()' error.Time.ToShortDateString()' "date-col"'                       error.Time.ToLongDateString()));                  bodyRow.Cells.Add(FormatCell(new TableCell()' error.Time.ToShortTimeString()' "time-col"'                      error.Time.ToLongTimeString()));                    //                  // Finally' add the row to the table.                  //                    table.Rows.Add(bodyRow);              }
Magic Number,Elmah,ErrorLogPageFactory,C:\repos\davidduffett_Elmah\src\Elmah\ErrorLogPageFactory.cs,GetHandler,The following statement contains a magic number: if (handler == null)                  throw new HttpException(404' "Resource not found.");
Magic Number,Elmah,ErrorLogPageFactory,C:\repos\davidduffett_Elmah\src\Elmah\ErrorLogPageFactory.cs,GetAuthorizationHandlers,The following statement contains a magic number: if (handlers == null)              {                  const int capacity = 4;                  List<IRequestAuthorizationHandler> list = new List<IRequestAuthorizationHandler>(capacity);                    HttpApplication application = context.ApplicationInstance;                  IRequestAuthorizationHandler appReqHandler = application as IRequestAuthorizationHandler;                  if (appReqHandler != null)                  {                      list.Add(appReqHandler);                  }                    foreach (IHttpModule module in HttpModuleRegistry.GetModules(application))                  {                      IRequestAuthorizationHandler modReqHander = module as IRequestAuthorizationHandler;                      if (modReqHander != null)                      {                          list.Add(modReqHander);                      }                  }                                    if (list != null)                    context.Items[key] = handlers = list.AsReadOnly();              }
Magic Number,Elmah,ErrorRssHandler,C:\repos\davidduffett_Elmah\src\Elmah\ErrorRssHandler.cs,ProcessRequest,The following statement contains a magic number: const int pageSize = 15;
Magic Number,Elmah,HttpStatus,C:\repos\davidduffett_Elmah\src\Elmah\HttpStatus.cs,HttpStatus,The following statement contains a magic number: Debug.Assert(code >= 100);
Magic Number,Elmah,HttpStatus,C:\repos\davidduffett_Elmah\src\Elmah\HttpStatus.cs,HttpStatus,The following statement contains a magic number: Debug.Assert(code < 1000);
Magic Number,Elmah,JsonTextWriter,C:\repos\davidduffett_Elmah\src\Elmah\JsonTextWriter.cs,JsonTextWriter,The following statement contains a magic number: const int levels = 10 + /* root */ 1;
Magic Number,Elmah,ManifestResourceHelper,C:\repos\davidduffett_Elmah\src\Elmah\ManifestResourceHelper.cs,WriteResourceToStream,The following statement contains a magic number: using (Stream inputStream = thisType.Assembly.GetManifestResourceStream(thisType' resourceName))              {                    //                  // Allocate a buffer for reading the stream. The maximum size                  // of this buffer is fixed to 4 KB.                  //                    byte[] buffer = new byte[Math.Min(inputStream.Length' 4096)];                    //                  // Finally' write out the bytes!                  //                    int readLength = inputStream.Read(buffer' 0' buffer.Length);                    while (readLength > 0)                  {                      outputStream.Write(buffer' 0' readLength);                      readLength = inputStream.Read(buffer' 0' buffer.Length);                  }              }
Magic Number,Elmah,Commands,C:\repos\davidduffett_Elmah\src\Elmah\MySqlErrorLog.cs,LogError,The following statement contains a magic number: parameters.Add("ErrorId"' MySqlDbType.String' 36).Value = id.ToString();
Magic Number,Elmah,Commands,C:\repos\davidduffett_Elmah\src\Elmah\MySqlErrorLog.cs,LogError,The following statement contains a magic number: parameters.Add("Host"' MySqlDbType.VarChar' 30).Value = hostName.Substring(0' Math.Min(30' hostName.Length));
Magic Number,Elmah,Commands,C:\repos\davidduffett_Elmah\src\Elmah\MySqlErrorLog.cs,LogError,The following statement contains a magic number: parameters.Add("Host"' MySqlDbType.VarChar' 30).Value = hostName.Substring(0' Math.Min(30' hostName.Length));
Magic Number,Elmah,Commands,C:\repos\davidduffett_Elmah\src\Elmah\MySqlErrorLog.cs,LogError,The following statement contains a magic number: parameters.Add("Type"' MySqlDbType.VarChar' 100).Value = typeName.Substring(0' Math.Min(100' typeName.Length));
Magic Number,Elmah,Commands,C:\repos\davidduffett_Elmah\src\Elmah\MySqlErrorLog.cs,LogError,The following statement contains a magic number: parameters.Add("Type"' MySqlDbType.VarChar' 100).Value = typeName.Substring(0' Math.Min(100' typeName.Length));
Magic Number,Elmah,Commands,C:\repos\davidduffett_Elmah\src\Elmah\MySqlErrorLog.cs,LogError,The following statement contains a magic number: parameters.Add("Source"' MySqlDbType.VarChar' 60).Value = source.Substring(0' Math.Min(60' source.Length));
Magic Number,Elmah,Commands,C:\repos\davidduffett_Elmah\src\Elmah\MySqlErrorLog.cs,LogError,The following statement contains a magic number: parameters.Add("Source"' MySqlDbType.VarChar' 60).Value = source.Substring(0' Math.Min(60' source.Length));
Magic Number,Elmah,Commands,C:\repos\davidduffett_Elmah\src\Elmah\MySqlErrorLog.cs,LogError,The following statement contains a magic number: parameters.Add("Message"' MySqlDbType.VarChar' 500).Value = message.Substring(0' Math.Min(500' message.Length));
Magic Number,Elmah,Commands,C:\repos\davidduffett_Elmah\src\Elmah\MySqlErrorLog.cs,LogError,The following statement contains a magic number: parameters.Add("Message"' MySqlDbType.VarChar' 500).Value = message.Substring(0' Math.Min(500' message.Length));
Magic Number,Elmah,Commands,C:\repos\davidduffett_Elmah\src\Elmah\MySqlErrorLog.cs,LogError,The following statement contains a magic number: parameters.Add("User"' MySqlDbType.VarChar' 50).Value = user.Substring(0' Math.Min(50' user.Length));
Magic Number,Elmah,Commands,C:\repos\davidduffett_Elmah\src\Elmah\MySqlErrorLog.cs,LogError,The following statement contains a magic number: parameters.Add("User"' MySqlDbType.VarChar' 50).Value = user.Substring(0' Math.Min(50' user.Length));
Magic Number,Elmah,Commands,C:\repos\davidduffett_Elmah\src\Elmah\MySqlErrorLog.cs,GetErrorXml,The following statement contains a magic number: parameters.Add("Id"' MySqlDbType.String' 36).Value = id.ToString();
Magic Number,Elmah,Commands,C:\repos\davidduffett_Elmah\src\Elmah\MySqlErrorLog.cs,LogError,The following statement contains a magic number: parameters.Add("@Host"' SqlDbType.NVarChar' 30).Value = hostName;
Magic Number,Elmah,Commands,C:\repos\davidduffett_Elmah\src\Elmah\MySqlErrorLog.cs,LogError,The following statement contains a magic number: parameters.Add("@Type"' SqlDbType.NVarChar' 100).Value = typeName;
Magic Number,Elmah,Commands,C:\repos\davidduffett_Elmah\src\Elmah\MySqlErrorLog.cs,LogError,The following statement contains a magic number: parameters.Add("@Source"' SqlDbType.NVarChar' 60).Value = source;
Magic Number,Elmah,Commands,C:\repos\davidduffett_Elmah\src\Elmah\MySqlErrorLog.cs,LogError,The following statement contains a magic number: parameters.Add("@Message"' SqlDbType.NVarChar' 500).Value = message;
Magic Number,Elmah,Commands,C:\repos\davidduffett_Elmah\src\Elmah\MySqlErrorLog.cs,LogError,The following statement contains a magic number: parameters.Add("@User"' SqlDbType.NVarChar' 50).Value = user;
Magic Number,Elmah,OracleErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: using (OracleConnection connection = new OracleConnection(this.ConnectionString))              using (OracleCommand command = connection.CreateCommand())              {                  connection.Open();                  using (OracleTransaction transaction = connection.BeginTransaction())                  {                      // because we are storing the XML data in a NClob' we need to jump through a few hoops!!                      // so first we've got to operate within a transaction                      command.Transaction = transaction;                        // then we need to create a temporary lob on the database server                      command.CommandText = "declare xx nclob; begin dbms_lob.createtemporary(xx' false' 0); :tempblob := xx; end;";                      command.CommandType = CommandType.Text;                        OracleParameterCollection parameters = command.Parameters;                      parameters.Add("tempblob"' OracleType.NClob).Direction = ParameterDirection.Output;                      command.ExecuteNonQuery();                        // now we can get a handle to the NClob                      OracleLob xmlLob = (OracleLob)parameters[0].Value;                      // create a temporary buffer in which to store the XML                      byte[] tempbuff = Encoding.Unicode.GetBytes(errorXml);                      // and finally we can write to it!                      xmlLob.BeginBatch(OracleLobOpenMode.ReadWrite);                      xmlLob.Write(tempbuff'0'tempbuff.Length);                      xmlLob.EndBatch();                        command.CommandText = _schemaOwner + "pkg_elmah$log_error.LogError";                      command.CommandType = CommandType.StoredProcedure;                        parameters.Clear();                      parameters.Add("v_ErrorId"' OracleType.NVarChar' 32).Value = id.ToString("N");                      parameters.Add("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;                      parameters.Add("v_Host"' OracleType.NVarChar' 30).Value = error.HostName;                      parameters.Add("v_Type"' OracleType.NVarChar' 100).Value = error.Type;                      parameters.Add("v_Source"' OracleType.NVarChar' 60).Value = error.Source;                      parameters.Add("v_Message"' OracleType.NVarChar' 500).Value = error.Message;                      parameters.Add("v_User"' OracleType.NVarChar' 50).Value = error.User;                      parameters.Add("v_AllXml"' OracleType.NClob).Value = xmlLob;                      parameters.Add("v_StatusCode"' OracleType.Int32).Value = error.StatusCode;                      parameters.Add("v_TimeUtc"' OracleType.DateTime).Value = error.Time.ToUniversalTime();                        command.ExecuteNonQuery();                      transaction.Commit();                  }                  return id.ToString();              }
Magic Number,Elmah,OracleErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: using (OracleConnection connection = new OracleConnection(this.ConnectionString))              using (OracleCommand command = connection.CreateCommand())              {                  connection.Open();                  using (OracleTransaction transaction = connection.BeginTransaction())                  {                      // because we are storing the XML data in a NClob' we need to jump through a few hoops!!                      // so first we've got to operate within a transaction                      command.Transaction = transaction;                        // then we need to create a temporary lob on the database server                      command.CommandText = "declare xx nclob; begin dbms_lob.createtemporary(xx' false' 0); :tempblob := xx; end;";                      command.CommandType = CommandType.Text;                        OracleParameterCollection parameters = command.Parameters;                      parameters.Add("tempblob"' OracleType.NClob).Direction = ParameterDirection.Output;                      command.ExecuteNonQuery();                        // now we can get a handle to the NClob                      OracleLob xmlLob = (OracleLob)parameters[0].Value;                      // create a temporary buffer in which to store the XML                      byte[] tempbuff = Encoding.Unicode.GetBytes(errorXml);                      // and finally we can write to it!                      xmlLob.BeginBatch(OracleLobOpenMode.ReadWrite);                      xmlLob.Write(tempbuff'0'tempbuff.Length);                      xmlLob.EndBatch();                        command.CommandText = _schemaOwner + "pkg_elmah$log_error.LogError";                      command.CommandType = CommandType.StoredProcedure;                        parameters.Clear();                      parameters.Add("v_ErrorId"' OracleType.NVarChar' 32).Value = id.ToString("N");                      parameters.Add("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;                      parameters.Add("v_Host"' OracleType.NVarChar' 30).Value = error.HostName;                      parameters.Add("v_Type"' OracleType.NVarChar' 100).Value = error.Type;                      parameters.Add("v_Source"' OracleType.NVarChar' 60).Value = error.Source;                      parameters.Add("v_Message"' OracleType.NVarChar' 500).Value = error.Message;                      parameters.Add("v_User"' OracleType.NVarChar' 50).Value = error.User;                      parameters.Add("v_AllXml"' OracleType.NClob).Value = xmlLob;                      parameters.Add("v_StatusCode"' OracleType.Int32).Value = error.StatusCode;                      parameters.Add("v_TimeUtc"' OracleType.DateTime).Value = error.Time.ToUniversalTime();                        command.ExecuteNonQuery();                      transaction.Commit();                  }                  return id.ToString();              }
Magic Number,Elmah,OracleErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: using (OracleConnection connection = new OracleConnection(this.ConnectionString))              using (OracleCommand command = connection.CreateCommand())              {                  connection.Open();                  using (OracleTransaction transaction = connection.BeginTransaction())                  {                      // because we are storing the XML data in a NClob' we need to jump through a few hoops!!                      // so first we've got to operate within a transaction                      command.Transaction = transaction;                        // then we need to create a temporary lob on the database server                      command.CommandText = "declare xx nclob; begin dbms_lob.createtemporary(xx' false' 0); :tempblob := xx; end;";                      command.CommandType = CommandType.Text;                        OracleParameterCollection parameters = command.Parameters;                      parameters.Add("tempblob"' OracleType.NClob).Direction = ParameterDirection.Output;                      command.ExecuteNonQuery();                        // now we can get a handle to the NClob                      OracleLob xmlLob = (OracleLob)parameters[0].Value;                      // create a temporary buffer in which to store the XML                      byte[] tempbuff = Encoding.Unicode.GetBytes(errorXml);                      // and finally we can write to it!                      xmlLob.BeginBatch(OracleLobOpenMode.ReadWrite);                      xmlLob.Write(tempbuff'0'tempbuff.Length);                      xmlLob.EndBatch();                        command.CommandText = _schemaOwner + "pkg_elmah$log_error.LogError";                      command.CommandType = CommandType.StoredProcedure;                        parameters.Clear();                      parameters.Add("v_ErrorId"' OracleType.NVarChar' 32).Value = id.ToString("N");                      parameters.Add("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;                      parameters.Add("v_Host"' OracleType.NVarChar' 30).Value = error.HostName;                      parameters.Add("v_Type"' OracleType.NVarChar' 100).Value = error.Type;                      parameters.Add("v_Source"' OracleType.NVarChar' 60).Value = error.Source;                      parameters.Add("v_Message"' OracleType.NVarChar' 500).Value = error.Message;                      parameters.Add("v_User"' OracleType.NVarChar' 50).Value = error.User;                      parameters.Add("v_AllXml"' OracleType.NClob).Value = xmlLob;                      parameters.Add("v_StatusCode"' OracleType.Int32).Value = error.StatusCode;                      parameters.Add("v_TimeUtc"' OracleType.DateTime).Value = error.Time.ToUniversalTime();                        command.ExecuteNonQuery();                      transaction.Commit();                  }                  return id.ToString();              }
Magic Number,Elmah,OracleErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: using (OracleConnection connection = new OracleConnection(this.ConnectionString))              using (OracleCommand command = connection.CreateCommand())              {                  connection.Open();                  using (OracleTransaction transaction = connection.BeginTransaction())                  {                      // because we are storing the XML data in a NClob' we need to jump through a few hoops!!                      // so first we've got to operate within a transaction                      command.Transaction = transaction;                        // then we need to create a temporary lob on the database server                      command.CommandText = "declare xx nclob; begin dbms_lob.createtemporary(xx' false' 0); :tempblob := xx; end;";                      command.CommandType = CommandType.Text;                        OracleParameterCollection parameters = command.Parameters;                      parameters.Add("tempblob"' OracleType.NClob).Direction = ParameterDirection.Output;                      command.ExecuteNonQuery();                        // now we can get a handle to the NClob                      OracleLob xmlLob = (OracleLob)parameters[0].Value;                      // create a temporary buffer in which to store the XML                      byte[] tempbuff = Encoding.Unicode.GetBytes(errorXml);                      // and finally we can write to it!                      xmlLob.BeginBatch(OracleLobOpenMode.ReadWrite);                      xmlLob.Write(tempbuff'0'tempbuff.Length);                      xmlLob.EndBatch();                        command.CommandText = _schemaOwner + "pkg_elmah$log_error.LogError";                      command.CommandType = CommandType.StoredProcedure;                        parameters.Clear();                      parameters.Add("v_ErrorId"' OracleType.NVarChar' 32).Value = id.ToString("N");                      parameters.Add("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;                      parameters.Add("v_Host"' OracleType.NVarChar' 30).Value = error.HostName;                      parameters.Add("v_Type"' OracleType.NVarChar' 100).Value = error.Type;                      parameters.Add("v_Source"' OracleType.NVarChar' 60).Value = error.Source;                      parameters.Add("v_Message"' OracleType.NVarChar' 500).Value = error.Message;                      parameters.Add("v_User"' OracleType.NVarChar' 50).Value = error.User;                      parameters.Add("v_AllXml"' OracleType.NClob).Value = xmlLob;                      parameters.Add("v_StatusCode"' OracleType.Int32).Value = error.StatusCode;                      parameters.Add("v_TimeUtc"' OracleType.DateTime).Value = error.Time.ToUniversalTime();                        command.ExecuteNonQuery();                      transaction.Commit();                  }                  return id.ToString();              }
Magic Number,Elmah,OracleErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: using (OracleConnection connection = new OracleConnection(this.ConnectionString))              using (OracleCommand command = connection.CreateCommand())              {                  connection.Open();                  using (OracleTransaction transaction = connection.BeginTransaction())                  {                      // because we are storing the XML data in a NClob' we need to jump through a few hoops!!                      // so first we've got to operate within a transaction                      command.Transaction = transaction;                        // then we need to create a temporary lob on the database server                      command.CommandText = "declare xx nclob; begin dbms_lob.createtemporary(xx' false' 0); :tempblob := xx; end;";                      command.CommandType = CommandType.Text;                        OracleParameterCollection parameters = command.Parameters;                      parameters.Add("tempblob"' OracleType.NClob).Direction = ParameterDirection.Output;                      command.ExecuteNonQuery();                        // now we can get a handle to the NClob                      OracleLob xmlLob = (OracleLob)parameters[0].Value;                      // create a temporary buffer in which to store the XML                      byte[] tempbuff = Encoding.Unicode.GetBytes(errorXml);                      // and finally we can write to it!                      xmlLob.BeginBatch(OracleLobOpenMode.ReadWrite);                      xmlLob.Write(tempbuff'0'tempbuff.Length);                      xmlLob.EndBatch();                        command.CommandText = _schemaOwner + "pkg_elmah$log_error.LogError";                      command.CommandType = CommandType.StoredProcedure;                        parameters.Clear();                      parameters.Add("v_ErrorId"' OracleType.NVarChar' 32).Value = id.ToString("N");                      parameters.Add("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;                      parameters.Add("v_Host"' OracleType.NVarChar' 30).Value = error.HostName;                      parameters.Add("v_Type"' OracleType.NVarChar' 100).Value = error.Type;                      parameters.Add("v_Source"' OracleType.NVarChar' 60).Value = error.Source;                      parameters.Add("v_Message"' OracleType.NVarChar' 500).Value = error.Message;                      parameters.Add("v_User"' OracleType.NVarChar' 50).Value = error.User;                      parameters.Add("v_AllXml"' OracleType.NClob).Value = xmlLob;                      parameters.Add("v_StatusCode"' OracleType.Int32).Value = error.StatusCode;                      parameters.Add("v_TimeUtc"' OracleType.DateTime).Value = error.Time.ToUniversalTime();                        command.ExecuteNonQuery();                      transaction.Commit();                  }                  return id.ToString();              }
Magic Number,Elmah,OracleErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\OracleErrorLog.cs,Log,The following statement contains a magic number: using (OracleConnection connection = new OracleConnection(this.ConnectionString))              using (OracleCommand command = connection.CreateCommand())              {                  connection.Open();                  using (OracleTransaction transaction = connection.BeginTransaction())                  {                      // because we are storing the XML data in a NClob' we need to jump through a few hoops!!                      // so first we've got to operate within a transaction                      command.Transaction = transaction;                        // then we need to create a temporary lob on the database server                      command.CommandText = "declare xx nclob; begin dbms_lob.createtemporary(xx' false' 0); :tempblob := xx; end;";                      command.CommandType = CommandType.Text;                        OracleParameterCollection parameters = command.Parameters;                      parameters.Add("tempblob"' OracleType.NClob).Direction = ParameterDirection.Output;                      command.ExecuteNonQuery();                        // now we can get a handle to the NClob                      OracleLob xmlLob = (OracleLob)parameters[0].Value;                      // create a temporary buffer in which to store the XML                      byte[] tempbuff = Encoding.Unicode.GetBytes(errorXml);                      // and finally we can write to it!                      xmlLob.BeginBatch(OracleLobOpenMode.ReadWrite);                      xmlLob.Write(tempbuff'0'tempbuff.Length);                      xmlLob.EndBatch();                        command.CommandText = _schemaOwner + "pkg_elmah$log_error.LogError";                      command.CommandType = CommandType.StoredProcedure;                        parameters.Clear();                      parameters.Add("v_ErrorId"' OracleType.NVarChar' 32).Value = id.ToString("N");                      parameters.Add("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;                      parameters.Add("v_Host"' OracleType.NVarChar' 30).Value = error.HostName;                      parameters.Add("v_Type"' OracleType.NVarChar' 100).Value = error.Type;                      parameters.Add("v_Source"' OracleType.NVarChar' 60).Value = error.Source;                      parameters.Add("v_Message"' OracleType.NVarChar' 500).Value = error.Message;                      parameters.Add("v_User"' OracleType.NVarChar' 50).Value = error.User;                      parameters.Add("v_AllXml"' OracleType.NClob).Value = xmlLob;                      parameters.Add("v_StatusCode"' OracleType.Int32).Value = error.StatusCode;                      parameters.Add("v_TimeUtc"' OracleType.DateTime).Value = error.Time.ToUniversalTime();                        command.ExecuteNonQuery();                      transaction.Commit();                  }                  return id.ToString();              }
Magic Number,Elmah,OracleErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\OracleErrorLog.cs,GetError,The following statement contains a magic number: using (OracleConnection connection = new OracleConnection(this.ConnectionString))              using (OracleCommand command = connection.CreateCommand())              {                  command.CommandText = _schemaOwner + "pkg_elmah$get_error.GetErrorXml";                  command.CommandType = CommandType.StoredProcedure;                    OracleParameterCollection parameters = command.Parameters;                  parameters.Add("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;                  parameters.Add("v_ErrorId"' OracleType.NVarChar' 32).Value = errorGuid.ToString("N");                  parameters.Add("v_AllXml"' OracleType.NClob).Direction = ParameterDirection.Output;                    connection.Open();                  command.ExecuteNonQuery();                  OracleLob xmlLob = (OracleLob)command.Parameters["v_AllXml"].Value;                    StreamReader streamreader = new StreamReader(xmlLob' Encoding.Unicode);                  char[] cbuffer = new char[1000];                  int actual;                  StringBuilder sb = new StringBuilder();                  while((actual = streamreader.Read(cbuffer' 0' cbuffer.Length)) >0)                      sb.Append(cbuffer' 0' actual);                  errorXml = sb.ToString();              }
Magic Number,Elmah,OracleErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\OracleErrorLog.cs,GetError,The following statement contains a magic number: using (OracleConnection connection = new OracleConnection(this.ConnectionString))              using (OracleCommand command = connection.CreateCommand())              {                  command.CommandText = _schemaOwner + "pkg_elmah$get_error.GetErrorXml";                  command.CommandType = CommandType.StoredProcedure;                    OracleParameterCollection parameters = command.Parameters;                  parameters.Add("v_Application"' OracleType.NVarChar' _maxAppNameLength).Value = ApplicationName;                  parameters.Add("v_ErrorId"' OracleType.NVarChar' 32).Value = errorGuid.ToString("N");                  parameters.Add("v_AllXml"' OracleType.NClob).Direction = ParameterDirection.Output;                    connection.Open();                  command.ExecuteNonQuery();                  OracleLob xmlLob = (OracleLob)command.Parameters["v_AllXml"].Value;                    StreamReader streamreader = new StreamReader(xmlLob' Encoding.Unicode);                  char[] cbuffer = new char[1000];                  int actual;                  StringBuilder sb = new StringBuilder();                  while((actual = streamreader.Read(cbuffer' 0' cbuffer.Length)) >0)                      sb.Append(cbuffer' 0' actual);                  errorXml = sb.ToString();              }
Magic Number,Elmah,SqlCompactErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\SqlCompactErrorLog.cs,Log,The following statement contains a magic number: using (SqlCeConnection connection = new SqlCeConnection(ConnectionString))              {                  using (SqlCeCommand command = new SqlCeCommand(query' connection))                  {                      SqlCeParameterCollection parameters = command.Parameters;                        parameters.Add("@ErrorId"' SqlDbType.UniqueIdentifier).Value = id;                      parameters.Add("@Application"' SqlDbType.NVarChar' 60).Value = ApplicationName;                      parameters.Add("@Host"' SqlDbType.NVarChar' 30).Value = error.HostName;                      parameters.Add("@Type"' SqlDbType.NVarChar' 100).Value = error.Type;                      parameters.Add("@Source"' SqlDbType.NVarChar' 60).Value = error.Source;                      parameters.Add("@Message"' SqlDbType.NVarChar' 500).Value = error.Message;                      parameters.Add("@User"' SqlDbType.NVarChar' 50).Value = error.User;                      parameters.Add("@StatusCode"' SqlDbType.Int).Value = error.StatusCode;                      parameters.Add("@TimeUtc"' SqlDbType.DateTime).Value = error.Time.ToUniversalTime();                      parameters.Add("@AllXml"' SqlDbType.NText).Value = errorXml;                        command.Connection = connection;                      connection.Open();                      command.ExecuteNonQuery();                      return id.ToString();                  }              }
Magic Number,Elmah,SqlCompactErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\SqlCompactErrorLog.cs,Log,The following statement contains a magic number: using (SqlCeConnection connection = new SqlCeConnection(ConnectionString))              {                  using (SqlCeCommand command = new SqlCeCommand(query' connection))                  {                      SqlCeParameterCollection parameters = command.Parameters;                        parameters.Add("@ErrorId"' SqlDbType.UniqueIdentifier).Value = id;                      parameters.Add("@Application"' SqlDbType.NVarChar' 60).Value = ApplicationName;                      parameters.Add("@Host"' SqlDbType.NVarChar' 30).Value = error.HostName;                      parameters.Add("@Type"' SqlDbType.NVarChar' 100).Value = error.Type;                      parameters.Add("@Source"' SqlDbType.NVarChar' 60).Value = error.Source;                      parameters.Add("@Message"' SqlDbType.NVarChar' 500).Value = error.Message;                      parameters.Add("@User"' SqlDbType.NVarChar' 50).Value = error.User;                      parameters.Add("@StatusCode"' SqlDbType.Int).Value = error.StatusCode;                      parameters.Add("@TimeUtc"' SqlDbType.DateTime).Value = error.Time.ToUniversalTime();                      parameters.Add("@AllXml"' SqlDbType.NText).Value = errorXml;                        command.Connection = connection;                      connection.Open();                      command.ExecuteNonQuery();                      return id.ToString();                  }              }
Magic Number,Elmah,SqlCompactErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\SqlCompactErrorLog.cs,Log,The following statement contains a magic number: using (SqlCeConnection connection = new SqlCeConnection(ConnectionString))              {                  using (SqlCeCommand command = new SqlCeCommand(query' connection))                  {                      SqlCeParameterCollection parameters = command.Parameters;                        parameters.Add("@ErrorId"' SqlDbType.UniqueIdentifier).Value = id;                      parameters.Add("@Application"' SqlDbType.NVarChar' 60).Value = ApplicationName;                      parameters.Add("@Host"' SqlDbType.NVarChar' 30).Value = error.HostName;                      parameters.Add("@Type"' SqlDbType.NVarChar' 100).Value = error.Type;                      parameters.Add("@Source"' SqlDbType.NVarChar' 60).Value = error.Source;                      parameters.Add("@Message"' SqlDbType.NVarChar' 500).Value = error.Message;                      parameters.Add("@User"' SqlDbType.NVarChar' 50).Value = error.User;                      parameters.Add("@StatusCode"' SqlDbType.Int).Value = error.StatusCode;                      parameters.Add("@TimeUtc"' SqlDbType.DateTime).Value = error.Time.ToUniversalTime();                      parameters.Add("@AllXml"' SqlDbType.NText).Value = errorXml;                        command.Connection = connection;                      connection.Open();                      command.ExecuteNonQuery();                      return id.ToString();                  }              }
Magic Number,Elmah,SqlCompactErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\SqlCompactErrorLog.cs,Log,The following statement contains a magic number: using (SqlCeConnection connection = new SqlCeConnection(ConnectionString))              {                  using (SqlCeCommand command = new SqlCeCommand(query' connection))                  {                      SqlCeParameterCollection parameters = command.Parameters;                        parameters.Add("@ErrorId"' SqlDbType.UniqueIdentifier).Value = id;                      parameters.Add("@Application"' SqlDbType.NVarChar' 60).Value = ApplicationName;                      parameters.Add("@Host"' SqlDbType.NVarChar' 30).Value = error.HostName;                      parameters.Add("@Type"' SqlDbType.NVarChar' 100).Value = error.Type;                      parameters.Add("@Source"' SqlDbType.NVarChar' 60).Value = error.Source;                      parameters.Add("@Message"' SqlDbType.NVarChar' 500).Value = error.Message;                      parameters.Add("@User"' SqlDbType.NVarChar' 50).Value = error.User;                      parameters.Add("@StatusCode"' SqlDbType.Int).Value = error.StatusCode;                      parameters.Add("@TimeUtc"' SqlDbType.DateTime).Value = error.Time.ToUniversalTime();                      parameters.Add("@AllXml"' SqlDbType.NText).Value = errorXml;                        command.Connection = connection;                      connection.Open();                      command.ExecuteNonQuery();                      return id.ToString();                  }              }
Magic Number,Elmah,SqlCompactErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\SqlCompactErrorLog.cs,Log,The following statement contains a magic number: using (SqlCeConnection connection = new SqlCeConnection(ConnectionString))              {                  using (SqlCeCommand command = new SqlCeCommand(query' connection))                  {                      SqlCeParameterCollection parameters = command.Parameters;                        parameters.Add("@ErrorId"' SqlDbType.UniqueIdentifier).Value = id;                      parameters.Add("@Application"' SqlDbType.NVarChar' 60).Value = ApplicationName;                      parameters.Add("@Host"' SqlDbType.NVarChar' 30).Value = error.HostName;                      parameters.Add("@Type"' SqlDbType.NVarChar' 100).Value = error.Type;                      parameters.Add("@Source"' SqlDbType.NVarChar' 60).Value = error.Source;                      parameters.Add("@Message"' SqlDbType.NVarChar' 500).Value = error.Message;                      parameters.Add("@User"' SqlDbType.NVarChar' 50).Value = error.User;                      parameters.Add("@StatusCode"' SqlDbType.Int).Value = error.StatusCode;                      parameters.Add("@TimeUtc"' SqlDbType.DateTime).Value = error.Time.ToUniversalTime();                      parameters.Add("@AllXml"' SqlDbType.NText).Value = errorXml;                        command.Connection = connection;                      connection.Open();                      command.ExecuteNonQuery();                      return id.ToString();                  }              }
Magic Number,Elmah,SqlCompactErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\SqlCompactErrorLog.cs,Log,The following statement contains a magic number: using (SqlCeConnection connection = new SqlCeConnection(ConnectionString))              {                  using (SqlCeCommand command = new SqlCeCommand(query' connection))                  {                      SqlCeParameterCollection parameters = command.Parameters;                        parameters.Add("@ErrorId"' SqlDbType.UniqueIdentifier).Value = id;                      parameters.Add("@Application"' SqlDbType.NVarChar' 60).Value = ApplicationName;                      parameters.Add("@Host"' SqlDbType.NVarChar' 30).Value = error.HostName;                      parameters.Add("@Type"' SqlDbType.NVarChar' 100).Value = error.Type;                      parameters.Add("@Source"' SqlDbType.NVarChar' 60).Value = error.Source;                      parameters.Add("@Message"' SqlDbType.NVarChar' 500).Value = error.Message;                      parameters.Add("@User"' SqlDbType.NVarChar' 50).Value = error.User;                      parameters.Add("@StatusCode"' SqlDbType.Int).Value = error.StatusCode;                      parameters.Add("@TimeUtc"' SqlDbType.DateTime).Value = error.Time.ToUniversalTime();                      parameters.Add("@AllXml"' SqlDbType.NText).Value = errorXml;                        command.Connection = connection;                      connection.Open();                      command.ExecuteNonQuery();                      return id.ToString();                  }              }
Magic Number,Elmah,SqlCompactErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\SqlCompactErrorLog.cs,GetErrors,The following statement contains a magic number: using (SqlCeConnection connection = new SqlCeConnection(ConnectionString))              {                  connection.Open();                    using (SqlCeCommand command = new SqlCeCommand(sql' connection))                  {                      SqlCeParameterCollection parameters = command.Parameters;                        parameters.Add("@PageIndex"' SqlDbType.Int).Value = pageIndex;                      parameters.Add("@PageSize"' SqlDbType.Int).Value = pageSize;                      parameters.Add("@Application"' SqlDbType.NVarChar' 60).Value = ApplicationName;                          using (SqlCeDataReader reader = command.ExecuteReader())                      {                          if (errorEntryList != null)                          {                              while (reader.Read())                              {                                  string id = reader["ErrorId"].ToString();                                    Elmah.Error error = new Elmah.Error();                                  error.ApplicationName = reader["Application"].ToString();                                  error.HostName = reader["Host"].ToString();                                  error.Type = reader["Type"].ToString();                                  error.Source = reader["Source"].ToString();                                  error.Message = reader["Message"].ToString();                                  error.User = reader["User"].ToString();                                  error.StatusCode = Convert.ToInt32(reader["StatusCode"]);                                  error.Time = Convert.ToDateTime(reader["TimeUtc"]).ToLocalTime();                                  errorEntryList.Add(new ErrorLogEntry(this' id' error));                              }                          }                      }                  }                    using (SqlCeCommand command = new SqlCeCommand(getCount' connection))                  {                      return (int)command.ExecuteScalar();                  }              }
Magic Number,Elmah,SqlErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\SqlErrorLog.cs,ReadSingleXmlStringResult,The following statement contains a magic number: using (reader)              {                  if (!reader.Read())                      return null;                    //                  // See following MS KB article why the XML string is read                   // and reconstructed in chunks:                  //                  // The XML data row is truncated at 2'033 characters when you use the SqlDataReader object                  // http://support.microsoft.com/kb/310378                  //                   // When you read XML data from Microsoft SQL Server by using                   // the SqlDataReader object' the XML in the first column of                   // the first row is truncated at 2'033 characters. You                   // expect all of the contents of the XML data to be                   // contained in a single row and column. This behavior                   // occurs because' for XML results greater than 2'033                   // characters in length' SQL Server returns the XML in                   // multiple rows of 2'033 characters each.                   //                  // See also comment 18 in issue 129:                  // http://code.google.com/p/elmah/issues/detail?id=129#c18                  //                    StringBuilder sb = new StringBuilder(/* capacity */ 2033);                  do { sb.Append(reader.GetString(0)); } while (reader.Read());                  return sb.ToString();              }
Magic Number,Elmah,StringFormatter,C:\repos\davidduffett_Elmah\src\Elmah\StringFormatter.cs,FormatImpl,The following statement contains a magic number: StringBuilder result = new StringBuilder(format.Length * 2);
Magic Number,Elmah,SQLiteErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\SQLiteErrorLog.cs,Log,The following statement contains a magic number: using (SQLiteConnection connection = new SQLiteConnection(ConnectionString))              using (SQLiteCommand command = new SQLiteCommand(query' connection))              {                  SQLiteParameterCollection parameters = command.Parameters;                    parameters.Add("@Application"' DbType.String' 60).Value = ApplicationName;                  parameters.Add("@Host"' DbType.String' 30).Value = error.HostName;                  parameters.Add("@Type"' DbType.String' 100).Value = error.Type;                  parameters.Add("@Source"' DbType.String' 60).Value = error.Source;                  parameters.Add("@Message"' DbType.String' 500).Value = error.Message;                  parameters.Add("@User"' DbType.String' 50).Value = error.User;                  parameters.Add("@StatusCode"' DbType.Int64).Value = error.StatusCode;                  parameters.Add("@TimeUtc"' DbType.DateTime).Value = error.Time.ToUniversalTime();                  parameters.Add("@AllXml"' DbType.String).Value = errorXml;                    connection.Open();                    return Convert.ToInt64(command.ExecuteScalar()).ToString(CultureInfo.InvariantCulture);              }
Magic Number,Elmah,SQLiteErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\SQLiteErrorLog.cs,Log,The following statement contains a magic number: using (SQLiteConnection connection = new SQLiteConnection(ConnectionString))              using (SQLiteCommand command = new SQLiteCommand(query' connection))              {                  SQLiteParameterCollection parameters = command.Parameters;                    parameters.Add("@Application"' DbType.String' 60).Value = ApplicationName;                  parameters.Add("@Host"' DbType.String' 30).Value = error.HostName;                  parameters.Add("@Type"' DbType.String' 100).Value = error.Type;                  parameters.Add("@Source"' DbType.String' 60).Value = error.Source;                  parameters.Add("@Message"' DbType.String' 500).Value = error.Message;                  parameters.Add("@User"' DbType.String' 50).Value = error.User;                  parameters.Add("@StatusCode"' DbType.Int64).Value = error.StatusCode;                  parameters.Add("@TimeUtc"' DbType.DateTime).Value = error.Time.ToUniversalTime();                  parameters.Add("@AllXml"' DbType.String).Value = errorXml;                    connection.Open();                    return Convert.ToInt64(command.ExecuteScalar()).ToString(CultureInfo.InvariantCulture);              }
Magic Number,Elmah,SQLiteErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\SQLiteErrorLog.cs,Log,The following statement contains a magic number: using (SQLiteConnection connection = new SQLiteConnection(ConnectionString))              using (SQLiteCommand command = new SQLiteCommand(query' connection))              {                  SQLiteParameterCollection parameters = command.Parameters;                    parameters.Add("@Application"' DbType.String' 60).Value = ApplicationName;                  parameters.Add("@Host"' DbType.String' 30).Value = error.HostName;                  parameters.Add("@Type"' DbType.String' 100).Value = error.Type;                  parameters.Add("@Source"' DbType.String' 60).Value = error.Source;                  parameters.Add("@Message"' DbType.String' 500).Value = error.Message;                  parameters.Add("@User"' DbType.String' 50).Value = error.User;                  parameters.Add("@StatusCode"' DbType.Int64).Value = error.StatusCode;                  parameters.Add("@TimeUtc"' DbType.DateTime).Value = error.Time.ToUniversalTime();                  parameters.Add("@AllXml"' DbType.String).Value = errorXml;                    connection.Open();                    return Convert.ToInt64(command.ExecuteScalar()).ToString(CultureInfo.InvariantCulture);              }
Magic Number,Elmah,SQLiteErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\SQLiteErrorLog.cs,Log,The following statement contains a magic number: using (SQLiteConnection connection = new SQLiteConnection(ConnectionString))              using (SQLiteCommand command = new SQLiteCommand(query' connection))              {                  SQLiteParameterCollection parameters = command.Parameters;                    parameters.Add("@Application"' DbType.String' 60).Value = ApplicationName;                  parameters.Add("@Host"' DbType.String' 30).Value = error.HostName;                  parameters.Add("@Type"' DbType.String' 100).Value = error.Type;                  parameters.Add("@Source"' DbType.String' 60).Value = error.Source;                  parameters.Add("@Message"' DbType.String' 500).Value = error.Message;                  parameters.Add("@User"' DbType.String' 50).Value = error.User;                  parameters.Add("@StatusCode"' DbType.Int64).Value = error.StatusCode;                  parameters.Add("@TimeUtc"' DbType.DateTime).Value = error.Time.ToUniversalTime();                  parameters.Add("@AllXml"' DbType.String).Value = errorXml;                    connection.Open();                    return Convert.ToInt64(command.ExecuteScalar()).ToString(CultureInfo.InvariantCulture);              }
Magic Number,Elmah,SQLiteErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\SQLiteErrorLog.cs,Log,The following statement contains a magic number: using (SQLiteConnection connection = new SQLiteConnection(ConnectionString))              using (SQLiteCommand command = new SQLiteCommand(query' connection))              {                  SQLiteParameterCollection parameters = command.Parameters;                    parameters.Add("@Application"' DbType.String' 60).Value = ApplicationName;                  parameters.Add("@Host"' DbType.String' 30).Value = error.HostName;                  parameters.Add("@Type"' DbType.String' 100).Value = error.Type;                  parameters.Add("@Source"' DbType.String' 60).Value = error.Source;                  parameters.Add("@Message"' DbType.String' 500).Value = error.Message;                  parameters.Add("@User"' DbType.String' 50).Value = error.User;                  parameters.Add("@StatusCode"' DbType.Int64).Value = error.StatusCode;                  parameters.Add("@TimeUtc"' DbType.DateTime).Value = error.Time.ToUniversalTime();                  parameters.Add("@AllXml"' DbType.String).Value = errorXml;                    connection.Open();                    return Convert.ToInt64(command.ExecuteScalar()).ToString(CultureInfo.InvariantCulture);              }
Magic Number,Elmah,SQLiteErrorLog,C:\repos\davidduffett_Elmah\src\Elmah\SQLiteErrorLog.cs,Log,The following statement contains a magic number: using (SQLiteConnection connection = new SQLiteConnection(ConnectionString))              using (SQLiteCommand command = new SQLiteCommand(query' connection))              {                  SQLiteParameterCollection parameters = command.Parameters;                    parameters.Add("@Application"' DbType.String' 60).Value = ApplicationName;                  parameters.Add("@Host"' DbType.String' 30).Value = error.HostName;                  parameters.Add("@Type"' DbType.String' 100).Value = error.Type;                  parameters.Add("@Source"' DbType.String' 60).Value = error.Source;                  parameters.Add("@Message"' DbType.String' 500).Value = error.Message;                  parameters.Add("@User"' DbType.String' 50).Value = error.User;                  parameters.Add("@StatusCode"' DbType.Int64).Value = error.StatusCode;                  parameters.Add("@TimeUtc"' DbType.DateTime).Value = error.Time.ToUniversalTime();                  parameters.Add("@AllXml"' DbType.String).Value = errorXml;                    connection.Open();                    return Convert.ToInt64(command.ExecuteScalar()).ToString(CultureInfo.InvariantCulture);              }
Magic Number,Elmah.Assertions,AssertionFactory,C:\repos\davidduffett_Elmah\src\Elmah\Assertions\AssertionFactory.cs,DeserializeStringArray,The following statement contains a magic number: var list = new List<string>(4);
Magic Number,Elmah.Assertions,JScriptAssertion,C:\repos\davidduffett_Elmah\src\Elmah\Assertions\JScriptAssertion.cs,AddDirectiveParameter,The following statement contains a magic number: if (list == null)              {                  list = new List<string>(/* capacity */ (inits != null ? inits.Length : 0) + 4);                  if (inits != null) list.AddRange(inits);              }
