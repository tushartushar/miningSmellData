Implementation smell,Namespace,Class,File,Method,Description
Complex Method,J6.DevFw.Template.Compiler,RemoteLoader,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\Compiler\RemoteLoader.cs,Create,Cyclomatic complexity of the method is 10
Complex Method,J6.DevFw.Template.Compiler.Text,Regx,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\Compiler\Text\Regx.cs,GetMatchStrings,Cyclomatic complexity of the method is 9
Complex Method,J6.DevFw.Template.Compiler.Text,Regx,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\Compiler\Text\Regx.cs,GetMatch,Cyclomatic complexity of the method is 8
Complex Method,J6.DevFw.Template,TemplateUtility,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\TemplateUtility.cs,GetPartialTemplateID,Cyclomatic complexity of the method is 9
Long Statement,J6.DevFw.Template.Compiler,CSharpProvider,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\Compiler\CSharpProvider.cs,InnerCreateInstance,The length of the statement  "	RemoteLoader remoteLoader = (RemoteLoader)_AppDomain.CreateInstance ("Compiler.Dynamic"' "RemoteAccess.RemoteLoader").Unwrap (); " is 128.
Long Statement,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,SetToVariable,The length of the statement  "	const string expressionPattern = "(/*/*)\\$([_a-zA-Z][a-zA-Z0-9_]*)\\s*=\\s*(\"(\\\\\"|[^\"\\\\\\n])*\"|[^<>\\s\\\\\\n\"\\$/]+)(\\s+\\B)*"; " is 139.
Long Statement,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,SetToVariable,The length of the statement  "					throw new NotSupportedException ("数据引用键错误:" + m.Value + "\n" + (message != "" ? "受支持可引用的数据键包括" + message + "\n使用\"$" + varName + "=>键\"进行调用！" : "")); " is 149.
Long Statement,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,EvalMethodToVar,The length of the statement  "	const string expressionPattern = "(/*/*)\\$([a-zA-Z][a-zA-Z0-9_]*)\\s*=>\\s*([a-zA-Z][a-zA-Z0-9_]*)\\((([^\\)]|\\\\\\))*)\\)(\\s+\\B)*"; " is 136.
Long Statement,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,EvalMethodToVar,The length of the statement  "		method = type.GetMethod (methodName' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.IgnoreCase' null' parameterTypes' null); " is 161.
Long Statement,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,ResolveEntityProperties,The length of the statement  "			foreach (PropertyInfo p in var.Type.GetProperties (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.IgnoreCase)) { " is 149.
Long Statement,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,ResolveEntityProperties,The length of the statement  "			throw new NotSupportedException ("不支持的属性调用${" + var.Key + "." + proName + "}\n" + var.Key + "支持可选的属性：" + message + "\n使用\"${" + var.Key + ".属性}\"进行调用！"); " is 153.
Long Statement,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,ResolveVariable,The length of the statement  "	string keyParttern = "\\$\\{" + variable.Key + "\\.([A-Z_a-z\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*|__dict__\\[([^\\]]+)\\])\\}"; " is 130.
Long Statement,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,ResolveVariable,The length of the statement  "			pro = variable.Type.GetProperty (proName' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.IgnoreCase); " is 138.
Long Statement,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,ResolveVariable,The length of the statement  "					pro = variable.Type.GetProperty ("__dict__"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.IgnoreCase); " is 141.
Long Statement,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,ResolveVariable,The length of the statement  "			foreach (PropertyInfo p in variable.Type.GetProperties (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.IgnoreCase)) { " is 154.
Long Statement,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,ResolveVariable,The length of the statement  "					message += (++i == 1 ? "\n=================================\n" : "\n") + p.Name + "\t : \t" + (attr.Length > 0 ? attr [0].Descript : ""); " is 137.
Long Statement,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,ResolveVariable,The length of the statement  "			throw new NotSupportedException ("不支持的属性调用${" + variable.Key + "." + proName + "}\n\n" + variable.Key + "支持下列可选属性：" + message + "\n\n注：使用\"${" + variable.Key + ".属性}\"进行调用，属性不区分大小写。"); " is 184.
Long Statement,J6.DevFw.Template,HttpDataContrainer,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\HttpDataContainer.cs,SetTemplatePageCacheContent,The length of the statement  "	HttpRuntime.Cache.Insert ("tpl_cache_" + templateID' content' new System.Web.Caching.CacheDependency (dependFileName)' DateTime.Now.AddDays (30)' TimeSpan.Zero); " is 161.
Long Statement,J6.DevFw.Template,SimpleTplEngine,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\SimpleTplEngine.cs,ComplieTemplateMethod,The length of the statement  "		method = type.GetMethod (tagName' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.IgnoreCase' null' parameterTypes' null); " is 158.
Long Statement,J6.DevFw.Template,SimpleTplEngine,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\SimpleTplEngine.cs,ComplieTemplateTag,The length of the statement  "		method = type.GetMethod (tagName' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.IgnoreCase' null' parameterTypes' null); " is 158.
Long Statement,J6.DevFw.Template,TemplateUtility,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\TemplateUtility.cs,CompressHtml,The length of the statement  "	////html = Regex.Replace(html' "<!--[^\\[][\\s\\S]*?-->|(^?!=http:|https:)//(.+?)\r\n|\r|\n|\t|(\\s\\s)"' String.Empty); " is 120.
Long Statement,J6.DevFw.Template,TemplateUtility,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\TemplateUtility.cs,PrintTemplatesInfo,The length of the statement  "                                <th style=""width:50px;""></th><th style=""width:150px;"">模板编号</th><th style=""width:80px;"">模板类型</th><th>文件名</th><th>模板注释</th><th>文件路径</th></tr>" is 145.
Long Statement,J6.DevFw.Template,TemplateUtility,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\TemplateUtility.cs,PrintTemplatesInfo,The length of the statement  "        		<tr><td colspan=""6"" align=""center"" style=""background:#c20000;color:white"">扩展名为“.phtml”表示为一个部分视图；部分视图只能使用ID命名</td></tr>" is 124.
Long Statement,J6.DevFw.Template,TemplateUtility,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\TemplateUtility.cs,PrintTemplatesInfo,The length of the statement  "		tplFileName = new Regex ("templates(/|\\\\)+#*(.+?)$"' RegexOptions.IgnoreCase).Match (tpl.FilePath).Groups [2].Value.Replace ("\\"' "/"); " is 138.
Long Statement,J6.DevFw.Template,TemplateUtility,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\TemplateUtility.cs,PrintTemplatesInfo,The length of the statement  "		sb.Append ("<tr><td class=\"center\">").Append ((++i).ToString ()).Append ("</td><td class=\"center\">").Append (key.ToLower ()).Append ("</td><td class=\"center\">").Append (//RegexUtility.partialRegex.IsMatch(tplContent) && tplContent.IndexOf("<title>") != -1  " is 261.
Long Statement,J6.DevFw.Template,TemplateUtility,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\TemplateUtility.cs,PrintTemplatesInfo,The length of the statement  "		!tpl.FilePath.EndsWith (".phtml") ? "<span style=\"color:#333\">模板页面</span>" : "<span style=\"color:#006699\">部分视图</span>").Append ("</td><td>/").Append (tplFileName).Append ("</td><td>").Append (tpl.Comment).Append ("</td><td>").Append (tpl.FilePath).Append ("</td></tr>"); " is 274.
Long Statement,J6.DevFw.Template,TemplateUtility,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\TemplateUtility.cs,PrintTemplatesInfo,The length of the statement  "	sb.Append ("</table><script type=\"text/javascript\">dynamicTable(document.getElementsByTagName('table')[0]);</script>"); " is 121.
Long Statement,J6.DevFw.Template,TemplateRegexUtility,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\TemplateRegexUtility.cs,ReplacePartial,The length of the statement  "			return Regex.IsMatch (matchValue' "^[a-z0-9]+$"' RegexOptions.IgnoreCase) ? TemplateUtility.Read (match.Groups [1].Value) : match.Value; " is 136.
Empty Catch Block,J6.DevFw.Template,TemplatePage,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\TemplatePage.cs,Render,The method has an empty catch block.
Magic Number,J6.DevFw.Template.Compiler.Text,Regx,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\Compiler\Text\Regx.cs,GetMatchStrings,The following statement contains a magic number: if (index < 0) {  	index = regx.IndexOf ("(.+?)");  	if (index >= 0) {  		begin = index + 5;  	}  } else {  	begin = index + 4;  }  
Magic Number,J6.DevFw.Template.Compiler.Text,Regx,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\Compiler\Text\Regx.cs,GetMatchStrings,The following statement contains a magic number: if (index < 0) {  	index = regx.IndexOf ("(.+?)");  	if (index >= 0) {  		begin = index + 5;  	}  } else {  	begin = index + 4;  }  
Magic Number,J6.DevFw.Template.Compiler.Text,Regx,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\Compiler\Text\Regx.cs,GetMatchStrings,The following statement contains a magic number: if (index >= 0) {  	begin = index + 5;  }  
Magic Number,J6.DevFw.Template.Compiler.Text,Regx,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\Compiler\Text\Regx.cs,GetMatchStrings,The following statement contains a magic number: begin = index + 5;  
Magic Number,J6.DevFw.Template.Compiler.Text,Regx,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\Compiler\Text\Regx.cs,GetMatchStrings,The following statement contains a magic number: begin = index + 4;  
Magic Number,J6.DevFw.Template.Compiler.Text,Regx,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\Compiler\Text\Regx.cs,GetMatch,The following statement contains a magic number: if (index < 0) {  	index = regx.IndexOf ("(.+?)");  	if (index >= 0) {  		begin = index + 5;  	}  } else {  	begin = index + 4;  }  
Magic Number,J6.DevFw.Template.Compiler.Text,Regx,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\Compiler\Text\Regx.cs,GetMatch,The following statement contains a magic number: if (index < 0) {  	index = regx.IndexOf ("(.+?)");  	if (index >= 0) {  		begin = index + 5;  	}  } else {  	begin = index + 4;  }  
Magic Number,J6.DevFw.Template.Compiler.Text,Regx,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\Compiler\Text\Regx.cs,GetMatch,The following statement contains a magic number: if (index >= 0) {  	begin = index + 5;  }  
Magic Number,J6.DevFw.Template.Compiler.Text,Regx,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\Compiler\Text\Regx.cs,GetMatch,The following statement contains a magic number: begin = index + 5;  
Magic Number,J6.DevFw.Template.Compiler.Text,Regx,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\Compiler\Text\Regx.cs,GetMatch,The following statement contains a magic number: begin = index + 4;  
Magic Number,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,SetToVariable,The following statement contains a magic number: outHtml = Regex.Replace (content' expressionPattern' m => {  	//注释  	if (m.Groups [1].Value != "")  		return String.Empty;  	//获取变量及表达式  	varName = m.Groups [2].Value;  	varValue = m.Groups [3].Value;  	if (Regex.IsMatch (varValue' specialVarPattern' RegexOptions.IgnoreCase)) {  		valueMatch = Regex.Match (varValue' specialVarPattern' RegexOptions.IgnoreCase);  		varKey = valueMatch.Groups [2].Value;  		switch (valueMatch.Groups [1].Value.ToLower ()) {  		case "item":  			dc.DefineVariable (varName' HttpContext.Current.Items [varKey]);  			break;  		case "cache":  			dc.DefineVariable (varName' HttpRuntime.Cache [varKey]);  			break;  		case "query":  			dc.DefineVariable (varName' HttpContext.Current.Request [varKey]);  			break;  		}  	} else {  		string varRealValue = Regex.Replace (varValue' "\\B\"|\"\\B"' String.Empty);  		//如果为字符'否则读取指定值的变量  		if (Regex.IsMatch (varValue' "\\B\"|\"\\B")) {  			dc.DefineVariable (varName' varRealValue);  		} else {  			object obj = dc.GetVariable (varRealValue);  			if (obj != null) {  				if (obj is Variable) {  					dc.DefineVariable (varName' (Variable)obj);  				} else {  					dc.DefineVariable (varName' obj.ToString ());  				}  			} else {  				string message = "";  				int i = 0;  				foreach (string key in dc.GetDefineVariable ().Keys) {  					message += (++i == 1 ? "" : "'" + key);  				}  				throw new NotSupportedException ("数据引用键错误:" + m.Value + "\n" + (message != "" ? "受支持可引用的数据键包括" + message + "\n使用\"$" + varName + "=>键\"进行调用！" : ""));  			}  		}  	}  	return String.Empty;  }' RegexOptions.Singleline);  
Magic Number,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,SetToVariable,The following statement contains a magic number: outHtml = Regex.Replace (content' expressionPattern' m => {  	//注释  	if (m.Groups [1].Value != "")  		return String.Empty;  	//获取变量及表达式  	varName = m.Groups [2].Value;  	varValue = m.Groups [3].Value;  	if (Regex.IsMatch (varValue' specialVarPattern' RegexOptions.IgnoreCase)) {  		valueMatch = Regex.Match (varValue' specialVarPattern' RegexOptions.IgnoreCase);  		varKey = valueMatch.Groups [2].Value;  		switch (valueMatch.Groups [1].Value.ToLower ()) {  		case "item":  			dc.DefineVariable (varName' HttpContext.Current.Items [varKey]);  			break;  		case "cache":  			dc.DefineVariable (varName' HttpRuntime.Cache [varKey]);  			break;  		case "query":  			dc.DefineVariable (varName' HttpContext.Current.Request [varKey]);  			break;  		}  	} else {  		string varRealValue = Regex.Replace (varValue' "\\B\"|\"\\B"' String.Empty);  		//如果为字符'否则读取指定值的变量  		if (Regex.IsMatch (varValue' "\\B\"|\"\\B")) {  			dc.DefineVariable (varName' varRealValue);  		} else {  			object obj = dc.GetVariable (varRealValue);  			if (obj != null) {  				if (obj is Variable) {  					dc.DefineVariable (varName' (Variable)obj);  				} else {  					dc.DefineVariable (varName' obj.ToString ());  				}  			} else {  				string message = "";  				int i = 0;  				foreach (string key in dc.GetDefineVariable ().Keys) {  					message += (++i == 1 ? "" : "'" + key);  				}  				throw new NotSupportedException ("数据引用键错误:" + m.Value + "\n" + (message != "" ? "受支持可引用的数据键包括" + message + "\n使用\"$" + varName + "=>键\"进行调用！" : ""));  			}  		}  	}  	return String.Empty;  }' RegexOptions.Singleline);  
Magic Number,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,SetToVariable,The following statement contains a magic number: outHtml = Regex.Replace (content' expressionPattern' m => {  	//注释  	if (m.Groups [1].Value != "")  		return String.Empty;  	//获取变量及表达式  	varName = m.Groups [2].Value;  	varValue = m.Groups [3].Value;  	if (Regex.IsMatch (varValue' specialVarPattern' RegexOptions.IgnoreCase)) {  		valueMatch = Regex.Match (varValue' specialVarPattern' RegexOptions.IgnoreCase);  		varKey = valueMatch.Groups [2].Value;  		switch (valueMatch.Groups [1].Value.ToLower ()) {  		case "item":  			dc.DefineVariable (varName' HttpContext.Current.Items [varKey]);  			break;  		case "cache":  			dc.DefineVariable (varName' HttpRuntime.Cache [varKey]);  			break;  		case "query":  			dc.DefineVariable (varName' HttpContext.Current.Request [varKey]);  			break;  		}  	} else {  		string varRealValue = Regex.Replace (varValue' "\\B\"|\"\\B"' String.Empty);  		//如果为字符'否则读取指定值的变量  		if (Regex.IsMatch (varValue' "\\B\"|\"\\B")) {  			dc.DefineVariable (varName' varRealValue);  		} else {  			object obj = dc.GetVariable (varRealValue);  			if (obj != null) {  				if (obj is Variable) {  					dc.DefineVariable (varName' (Variable)obj);  				} else {  					dc.DefineVariable (varName' obj.ToString ());  				}  			} else {  				string message = "";  				int i = 0;  				foreach (string key in dc.GetDefineVariable ().Keys) {  					message += (++i == 1 ? "" : "'" + key);  				}  				throw new NotSupportedException ("数据引用键错误:" + m.Value + "\n" + (message != "" ? "受支持可引用的数据键包括" + message + "\n使用\"$" + varName + "=>键\"进行调用！" : ""));  			}  		}  	}  	return String.Empty;  }' RegexOptions.Singleline);  
Magic Number,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,SetToVariable,The following statement contains a magic number: varName = m.Groups [2].Value;  
Magic Number,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,SetToVariable,The following statement contains a magic number: varValue = m.Groups [3].Value;  
Magic Number,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,SetToVariable,The following statement contains a magic number: if (Regex.IsMatch (varValue' specialVarPattern' RegexOptions.IgnoreCase)) {  	valueMatch = Regex.Match (varValue' specialVarPattern' RegexOptions.IgnoreCase);  	varKey = valueMatch.Groups [2].Value;  	switch (valueMatch.Groups [1].Value.ToLower ()) {  	case "item":  		dc.DefineVariable (varName' HttpContext.Current.Items [varKey]);  		break;  	case "cache":  		dc.DefineVariable (varName' HttpRuntime.Cache [varKey]);  		break;  	case "query":  		dc.DefineVariable (varName' HttpContext.Current.Request [varKey]);  		break;  	}  } else {  	string varRealValue = Regex.Replace (varValue' "\\B\"|\"\\B"' String.Empty);  	//如果为字符'否则读取指定值的变量  	if (Regex.IsMatch (varValue' "\\B\"|\"\\B")) {  		dc.DefineVariable (varName' varRealValue);  	} else {  		object obj = dc.GetVariable (varRealValue);  		if (obj != null) {  			if (obj is Variable) {  				dc.DefineVariable (varName' (Variable)obj);  			} else {  				dc.DefineVariable (varName' obj.ToString ());  			}  		} else {  			string message = "";  			int i = 0;  			foreach (string key in dc.GetDefineVariable ().Keys) {  				message += (++i == 1 ? "" : "'" + key);  			}  			throw new NotSupportedException ("数据引用键错误:" + m.Value + "\n" + (message != "" ? "受支持可引用的数据键包括" + message + "\n使用\"$" + varName + "=>键\"进行调用！" : ""));  		}  	}  }  
Magic Number,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,SetToVariable,The following statement contains a magic number: varKey = valueMatch.Groups [2].Value;  
Magic Number,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,EvalMethodToVar,The following statement contains a magic number: outHtml = Regex.Replace (content' expressionPattern' m => {  	//注释  	if (m.Groups [1].Value != "")  		return String.Empty;  	//获取变量及表达式  	varName = m.Groups [2].Value;  	methodName = m.Groups [3].Value;  	paramArray = m.Groups [4].Value.Replace ("\\'"' "__CSP__");  	parameters = paramArray.Trim ().Length == 0 ? new object[0] : paramArray.Split (''');  	parametersNum = parameters.Length;  	//查找是否存在方法(方法参数均为string类型)  	parameterTypes = new Type[parametersNum];  	for (int i = 0; i < parametersNum; i++) {  		parameterTypes [i] = typeof(String);  		parameters [i] = Regex.Replace (parameters [i].ToString ()' "\\B\"|\"\\B"' String.Empty).Replace ("__CSP__"' "'");  	}  	method = type.GetMethod (methodName' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.IgnoreCase' null' parameterTypes' null);  	if (method != null) {  		Type returnType = method.ReturnType;  		if (returnType != typeof(void)) {  			object result = method.Invoke (data' parameters);  			if (result != null) {  				if (returnType.IsPrimitive || returnType == typeof(String)) {  					dc.DefineVariable (varName' (result ?? "").ToString ());  				} else {  					dc.DefineVariable (varName' new Variable {  						Key = varName'  						Value = result'  						Type = returnType  					});  				}  			}  		}  	}  	/*                 else                 {                     //throw new MissingMethodException("在对象中找不到");                      Config.DC.DefineVar(varName' "<span style=\"color:red\">在对象中找不到方法<b>"+methodName+"</b>"+                         (parametersNum==0?"":"，参数"+parametersNum.ToString()+"个")                         +"。</span>");                 }                 */return String.Empty;  }' RegexOptions.Singleline);  
Magic Number,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,EvalMethodToVar,The following statement contains a magic number: outHtml = Regex.Replace (content' expressionPattern' m => {  	//注释  	if (m.Groups [1].Value != "")  		return String.Empty;  	//获取变量及表达式  	varName = m.Groups [2].Value;  	methodName = m.Groups [3].Value;  	paramArray = m.Groups [4].Value.Replace ("\\'"' "__CSP__");  	parameters = paramArray.Trim ().Length == 0 ? new object[0] : paramArray.Split (''');  	parametersNum = parameters.Length;  	//查找是否存在方法(方法参数均为string类型)  	parameterTypes = new Type[parametersNum];  	for (int i = 0; i < parametersNum; i++) {  		parameterTypes [i] = typeof(String);  		parameters [i] = Regex.Replace (parameters [i].ToString ()' "\\B\"|\"\\B"' String.Empty).Replace ("__CSP__"' "'");  	}  	method = type.GetMethod (methodName' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.IgnoreCase' null' parameterTypes' null);  	if (method != null) {  		Type returnType = method.ReturnType;  		if (returnType != typeof(void)) {  			object result = method.Invoke (data' parameters);  			if (result != null) {  				if (returnType.IsPrimitive || returnType == typeof(String)) {  					dc.DefineVariable (varName' (result ?? "").ToString ());  				} else {  					dc.DefineVariable (varName' new Variable {  						Key = varName'  						Value = result'  						Type = returnType  					});  				}  			}  		}  	}  	/*                 else                 {                     //throw new MissingMethodException("在对象中找不到");                      Config.DC.DefineVar(varName' "<span style=\"color:red\">在对象中找不到方法<b>"+methodName+"</b>"+                         (parametersNum==0?"":"，参数"+parametersNum.ToString()+"个")                         +"。</span>");                 }                 */return String.Empty;  }' RegexOptions.Singleline);  
Magic Number,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,EvalMethodToVar,The following statement contains a magic number: outHtml = Regex.Replace (content' expressionPattern' m => {  	//注释  	if (m.Groups [1].Value != "")  		return String.Empty;  	//获取变量及表达式  	varName = m.Groups [2].Value;  	methodName = m.Groups [3].Value;  	paramArray = m.Groups [4].Value.Replace ("\\'"' "__CSP__");  	parameters = paramArray.Trim ().Length == 0 ? new object[0] : paramArray.Split (''');  	parametersNum = parameters.Length;  	//查找是否存在方法(方法参数均为string类型)  	parameterTypes = new Type[parametersNum];  	for (int i = 0; i < parametersNum; i++) {  		parameterTypes [i] = typeof(String);  		parameters [i] = Regex.Replace (parameters [i].ToString ()' "\\B\"|\"\\B"' String.Empty).Replace ("__CSP__"' "'");  	}  	method = type.GetMethod (methodName' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.IgnoreCase' null' parameterTypes' null);  	if (method != null) {  		Type returnType = method.ReturnType;  		if (returnType != typeof(void)) {  			object result = method.Invoke (data' parameters);  			if (result != null) {  				if (returnType.IsPrimitive || returnType == typeof(String)) {  					dc.DefineVariable (varName' (result ?? "").ToString ());  				} else {  					dc.DefineVariable (varName' new Variable {  						Key = varName'  						Value = result'  						Type = returnType  					});  				}  			}  		}  	}  	/*                 else                 {                     //throw new MissingMethodException("在对象中找不到");                      Config.DC.DefineVar(varName' "<span style=\"color:red\">在对象中找不到方法<b>"+methodName+"</b>"+                         (parametersNum==0?"":"，参数"+parametersNum.ToString()+"个")                         +"。</span>");                 }                 */return String.Empty;  }' RegexOptions.Singleline);  
Magic Number,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,EvalMethodToVar,The following statement contains a magic number: varName = m.Groups [2].Value;  
Magic Number,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,EvalMethodToVar,The following statement contains a magic number: methodName = m.Groups [3].Value;  
Magic Number,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,EvalMethodToVar,The following statement contains a magic number: paramArray = m.Groups [4].Value.Replace ("\\'"' "__CSP__");  
Magic Number,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,EntityVariable,The following statement contains a magic number: outHtml = Regex.Replace (content' expressionPattern' m => {  	//注释  	if (m.Groups [1].Value != "")  		return String.Empty;  	//获取变量及表达式  	varName = m.Groups [2].Value;  	entityName = m.Groups [3].Value;  	object obj = dc.GetVariable (entityName);  	if (obj != null && obj is Variable) {  		Variable var = (Variable)obj;  		obj = var.Value;  		Type type = var.Type;  		//解析属性的值  		PropertyInfo[] pros = type.GetProperties (BindingFlags.Public | BindingFlags.Instance);  		foreach (PropertyInfo pro in pros) {  			outHtml = Regex.Replace (outHtml' String.Format ("\\$\\{0}{1}\\.{1}{2}"' "\\{"' varName' pro.Name' "\\}")' m2 => {  				return (pro.GetValue (obj' null) ?? "").ToString ();  			}' RegexOptions.IgnoreCase);  		}  	}  	return String.Empty;  }' RegexOptions.Singleline);  
Magic Number,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,EntityVariable,The following statement contains a magic number: outHtml = Regex.Replace (content' expressionPattern' m => {  	//注释  	if (m.Groups [1].Value != "")  		return String.Empty;  	//获取变量及表达式  	varName = m.Groups [2].Value;  	entityName = m.Groups [3].Value;  	object obj = dc.GetVariable (entityName);  	if (obj != null && obj is Variable) {  		Variable var = (Variable)obj;  		obj = var.Value;  		Type type = var.Type;  		//解析属性的值  		PropertyInfo[] pros = type.GetProperties (BindingFlags.Public | BindingFlags.Instance);  		foreach (PropertyInfo pro in pros) {  			outHtml = Regex.Replace (outHtml' String.Format ("\\$\\{0}{1}\\.{1}{2}"' "\\{"' varName' pro.Name' "\\}")' m2 => {  				return (pro.GetValue (obj' null) ?? "").ToString ();  			}' RegexOptions.IgnoreCase);  		}  	}  	return String.Empty;  }' RegexOptions.Singleline);  
Magic Number,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,EntityVariable,The following statement contains a magic number: varName = m.Groups [2].Value;  
Magic Number,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,EntityVariable,The following statement contains a magic number: entityName = m.Groups [3].Value;  
Magic Number,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,ResolveEntityProperties,The following statement contains a magic number: templateHtml = Regex.Replace (templateHtml' keyParttern' m => {  	entityName = m.Groups [1].Value;  	proName = m.Groups [2].Value;  	if (!entityValues.Keys.Contains (entityName)) {  		varValue = dc.GetVariable (entityName);  		entityValues.Add (entityName' varValue != null ? (Variable)varValue : default(Variable));  	}  	var = entityValues [entityName];  	if (var.Value != null) {  		//解析属性的值  		pro = var.Type.GetProperty (entityName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);  		if (pro != null) {  			return (pro.GetValue (var.Value' null) ?? "").ToString ();  		}  		string message = "";  		int i = 0;  		foreach (PropertyInfo p in var.Type.GetProperties (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.IgnoreCase)) {  			message += (++i == 1 ? "" : "'") + p.Name;  		}  		throw new NotSupportedException ("不支持的属性调用${" + var.Key + "." + proName + "}\n" + var.Key + "支持可选的属性：" + message + "\n使用\"${" + var.Key + ".属性}\"进行调用！");  	}  	return String.Empty;  });  
Magic Number,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,ResolveEntityProperties,The following statement contains a magic number: proName = m.Groups [2].Value;  
Magic Number,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,ResolveVariable,The following statement contains a magic number: templateHtml = Regex.Replace (templateHtml' keyParttern' m => {  	proName = m.Groups [1].Value;  	if (variable.Value != null) {  		//解析属性的值  		pro = variable.Type.GetProperty (proName' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.IgnoreCase);  		if (pro != null) {  			return (pro.GetValue (variable.Value' null) ?? "").ToString ();  		}  		#region 获取字典  		if (!String.IsNullOrEmpty (m.Groups [2].Value)) {  			//获取属性字典，并缓存  			if (propDict == null) {  				pro = variable.Type.GetProperty ("__dict__"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.IgnoreCase);  				if (pro != null) {  					if (pro.PropertyType != typeof(IDictionary<string' string>)) {  						throw new TypeLoadException ("__dict__属性的类型应为IDictionary<string'string>");  					} else {  						propDict = pro.GetValue (variable.Value' null) as IDictionary<string' string>;  					}  				} else {  					//未定义字典  					throw new TypeLoadException ("字典不存在!");  				}  			}  			//获取值  			dictKey = m.Groups [2].Value;  			if (propDict.ContainsKey (dictKey)) {  				return propDict [dictKey];  			} else {  				//字典不存在值  				return String.Empty;  			}  		}  		#endregion  		string message = "";  		TemplateVariableFieldAttribute[] attr;  		int i = 0;  		foreach (PropertyInfo p in variable.Type.GetProperties (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.IgnoreCase)) {  			if (!p.Name.StartsWith ("_")) {  				attr = (TemplateVariableFieldAttribute[])p.GetCustomAttributes (typeof(TemplateVariableFieldAttribute)' true);  				//message += (++i == 1 ? "" : "'") + p.Name;  				message += (++i == 1 ? "\n=================================\n" : "\n") + p.Name + "\t : \t" + (attr.Length > 0 ? attr [0].Descript : "");  			}  		}  		throw new NotSupportedException ("不支持的属性调用${" + variable.Key + "." + proName + "}\n\n" + variable.Key + "支持下列可选属性：" + message + "\n\n注：使用\"${" + variable.Key + ".属性}\"进行调用，属性不区分大小写。");  	}  	return m.Value;  });  
Magic Number,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,ResolveVariable,The following statement contains a magic number: templateHtml = Regex.Replace (templateHtml' keyParttern' m => {  	proName = m.Groups [1].Value;  	if (variable.Value != null) {  		//解析属性的值  		pro = variable.Type.GetProperty (proName' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.IgnoreCase);  		if (pro != null) {  			return (pro.GetValue (variable.Value' null) ?? "").ToString ();  		}  		#region 获取字典  		if (!String.IsNullOrEmpty (m.Groups [2].Value)) {  			//获取属性字典，并缓存  			if (propDict == null) {  				pro = variable.Type.GetProperty ("__dict__"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.IgnoreCase);  				if (pro != null) {  					if (pro.PropertyType != typeof(IDictionary<string' string>)) {  						throw new TypeLoadException ("__dict__属性的类型应为IDictionary<string'string>");  					} else {  						propDict = pro.GetValue (variable.Value' null) as IDictionary<string' string>;  					}  				} else {  					//未定义字典  					throw new TypeLoadException ("字典不存在!");  				}  			}  			//获取值  			dictKey = m.Groups [2].Value;  			if (propDict.ContainsKey (dictKey)) {  				return propDict [dictKey];  			} else {  				//字典不存在值  				return String.Empty;  			}  		}  		#endregion  		string message = "";  		TemplateVariableFieldAttribute[] attr;  		int i = 0;  		foreach (PropertyInfo p in variable.Type.GetProperties (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.IgnoreCase)) {  			if (!p.Name.StartsWith ("_")) {  				attr = (TemplateVariableFieldAttribute[])p.GetCustomAttributes (typeof(TemplateVariableFieldAttribute)' true);  				//message += (++i == 1 ? "" : "'") + p.Name;  				message += (++i == 1 ? "\n=================================\n" : "\n") + p.Name + "\t : \t" + (attr.Length > 0 ? attr [0].Descript : "");  			}  		}  		throw new NotSupportedException ("不支持的属性调用${" + variable.Key + "." + proName + "}\n\n" + variable.Key + "支持下列可选属性：" + message + "\n\n注：使用\"${" + variable.Key + ".属性}\"进行调用，属性不区分大小写。");  	}  	return m.Value;  });  
Magic Number,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,ResolveVariable,The following statement contains a magic number: if (variable.Value != null) {  	//解析属性的值  	pro = variable.Type.GetProperty (proName' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.IgnoreCase);  	if (pro != null) {  		return (pro.GetValue (variable.Value' null) ?? "").ToString ();  	}  	#region 获取字典  	if (!String.IsNullOrEmpty (m.Groups [2].Value)) {  		//获取属性字典，并缓存  		if (propDict == null) {  			pro = variable.Type.GetProperty ("__dict__"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.IgnoreCase);  			if (pro != null) {  				if (pro.PropertyType != typeof(IDictionary<string' string>)) {  					throw new TypeLoadException ("__dict__属性的类型应为IDictionary<string'string>");  				} else {  					propDict = pro.GetValue (variable.Value' null) as IDictionary<string' string>;  				}  			} else {  				//未定义字典  				throw new TypeLoadException ("字典不存在!");  			}  		}  		//获取值  		dictKey = m.Groups [2].Value;  		if (propDict.ContainsKey (dictKey)) {  			return propDict [dictKey];  		} else {  			//字典不存在值  			return String.Empty;  		}  	}  	#endregion  	string message = "";  	TemplateVariableFieldAttribute[] attr;  	int i = 0;  	foreach (PropertyInfo p in variable.Type.GetProperties (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.IgnoreCase)) {  		if (!p.Name.StartsWith ("_")) {  			attr = (TemplateVariableFieldAttribute[])p.GetCustomAttributes (typeof(TemplateVariableFieldAttribute)' true);  			//message += (++i == 1 ? "" : "'") + p.Name;  			message += (++i == 1 ? "\n=================================\n" : "\n") + p.Name + "\t : \t" + (attr.Length > 0 ? attr [0].Descript : "");  		}  	}  	throw new NotSupportedException ("不支持的属性调用${" + variable.Key + "." + proName + "}\n\n" + variable.Key + "支持下列可选属性：" + message + "\n\n注：使用\"${" + variable.Key + ".属性}\"进行调用，属性不区分大小写。");  }  
Magic Number,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,ResolveVariable,The following statement contains a magic number: if (variable.Value != null) {  	//解析属性的值  	pro = variable.Type.GetProperty (proName' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.IgnoreCase);  	if (pro != null) {  		return (pro.GetValue (variable.Value' null) ?? "").ToString ();  	}  	#region 获取字典  	if (!String.IsNullOrEmpty (m.Groups [2].Value)) {  		//获取属性字典，并缓存  		if (propDict == null) {  			pro = variable.Type.GetProperty ("__dict__"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.IgnoreCase);  			if (pro != null) {  				if (pro.PropertyType != typeof(IDictionary<string' string>)) {  					throw new TypeLoadException ("__dict__属性的类型应为IDictionary<string'string>");  				} else {  					propDict = pro.GetValue (variable.Value' null) as IDictionary<string' string>;  				}  			} else {  				//未定义字典  				throw new TypeLoadException ("字典不存在!");  			}  		}  		//获取值  		dictKey = m.Groups [2].Value;  		if (propDict.ContainsKey (dictKey)) {  			return propDict [dictKey];  		} else {  			//字典不存在值  			return String.Empty;  		}  	}  	#endregion  	string message = "";  	TemplateVariableFieldAttribute[] attr;  	int i = 0;  	foreach (PropertyInfo p in variable.Type.GetProperties (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.IgnoreCase)) {  		if (!p.Name.StartsWith ("_")) {  			attr = (TemplateVariableFieldAttribute[])p.GetCustomAttributes (typeof(TemplateVariableFieldAttribute)' true);  			//message += (++i == 1 ? "" : "'") + p.Name;  			message += (++i == 1 ? "\n=================================\n" : "\n") + p.Name + "\t : \t" + (attr.Length > 0 ? attr [0].Descript : "");  		}  	}  	throw new NotSupportedException ("不支持的属性调用${" + variable.Key + "." + proName + "}\n\n" + variable.Key + "支持下列可选属性：" + message + "\n\n注：使用\"${" + variable.Key + ".属性}\"进行调用，属性不区分大小写。");  }  
Magic Number,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,ResolveVariable,The following statement contains a magic number: if (!String.IsNullOrEmpty (m.Groups [2].Value)) {  	//获取属性字典，并缓存  	if (propDict == null) {  		pro = variable.Type.GetProperty ("__dict__"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.IgnoreCase);  		if (pro != null) {  			if (pro.PropertyType != typeof(IDictionary<string' string>)) {  				throw new TypeLoadException ("__dict__属性的类型应为IDictionary<string'string>");  			} else {  				propDict = pro.GetValue (variable.Value' null) as IDictionary<string' string>;  			}  		} else {  			//未定义字典  			throw new TypeLoadException ("字典不存在!");  		}  	}  	//获取值  	dictKey = m.Groups [2].Value;  	if (propDict.ContainsKey (dictKey)) {  		return propDict [dictKey];  	} else {  		//字典不存在值  		return String.Empty;  	}  }  
Magic Number,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,ResolveVariable,The following statement contains a magic number: if (!String.IsNullOrEmpty (m.Groups [2].Value)) {  	//获取属性字典，并缓存  	if (propDict == null) {  		pro = variable.Type.GetProperty ("__dict__"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.IgnoreCase);  		if (pro != null) {  			if (pro.PropertyType != typeof(IDictionary<string' string>)) {  				throw new TypeLoadException ("__dict__属性的类型应为IDictionary<string'string>");  			} else {  				propDict = pro.GetValue (variable.Value' null) as IDictionary<string' string>;  			}  		} else {  			//未定义字典  			throw new TypeLoadException ("字典不存在!");  		}  	}  	//获取值  	dictKey = m.Groups [2].Value;  	if (propDict.ContainsKey (dictKey)) {  		return propDict [dictKey];  	} else {  		//字典不存在值  		return String.Empty;  	}  }  
Magic Number,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,ResolveVariable,The following statement contains a magic number: dictKey = m.Groups [2].Value;  
Magic Number,J6.DevFw.Template,HttpDataContrainer,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\HttpDataContainer.cs,SetTemplatePageCacheContent,The following statement contains a magic number: HttpRuntime.Cache.Insert ("tpl_cache_" + templateID' content' new System.Web.Caching.CacheDependency (dependFileName)' DateTime.Now.AddDays (30)' TimeSpan.Zero);  
Magic Number,J6.DevFw.Template,MD5,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\MD5.cs,EncodeTo16,The following statement contains a magic number: return BitConverter.ToString (md5.ComputeHash (Encoding.Default.GetBytes (str))' 4' 8).Replace ("-"' String.Empty);  
Magic Number,J6.DevFw.Template,MD5,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\MD5.cs,EncodeTo16,The following statement contains a magic number: return BitConverter.ToString (md5.ComputeHash (Encoding.Default.GetBytes (str))' 4' 8).Replace ("-"' String.Empty);  
Magic Number,J6.DevFw.Template,SimpleTplEngine,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\SimpleTplEngine.cs,ComplieTemplateMethod,The following statement contains a magic number: html = methodRegex.Replace (html' m => {  	tagName = m.Groups [1].Value;  	tagFormat = m.Groups [3].Value;  	//获得参数  	paramMcs = paramRegex.Matches (m.Groups [2].Value);  	//参数'多添加一个tagFormat参数  	parameters = new object[paramMcs.Count + 1];  	//查找是否存在方法(方法参数均为string类型)  	parameterTypes = new Type[parameters.Length];  	for (int i = 0; i < parameterTypes.Length; i++) {  		parameterTypes [i] = typeof(String);  	}  	method = type.GetMethod (tagName' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.IgnoreCase' null' parameterTypes' null);  	//如果方法存在且包含template特性，则执行返回结果，否则返回原始值  	if (method == null || method.GetCustomAttributes (typeof(TemplateMethodAttribute)' true).Length == 0) {  		return m.Value;  	}  	//数字参数  	string intParamValue;  	//则给参数数组赋值  	for (int i = 0; i < paramMcs.Count; i++) {  		intParamValue = paramMcs [i].Groups [2].Value;  		if (intParamValue != String.Empty) {  			parameters [i] = intParamValue;  		} else {  			parameters [i] = paramMcs [i].Groups [1].Value;  		}  	}  	parameters [parameters.Length - 1] = tagFormat;  	if (this.Count != null)  		this.Count.Add (String.Format ("Method:{0}'{1:mmssfff}"' method.Name' DateTime.Now));  	//执行方法并返回结果  	return method.Invoke (this.classInstance' parameters).ToString ();  });  
Magic Number,J6.DevFw.Template,SimpleTplEngine,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\SimpleTplEngine.cs,ComplieTemplateMethod,The following statement contains a magic number: html = methodRegex.Replace (html' m => {  	tagName = m.Groups [1].Value;  	tagFormat = m.Groups [3].Value;  	//获得参数  	paramMcs = paramRegex.Matches (m.Groups [2].Value);  	//参数'多添加一个tagFormat参数  	parameters = new object[paramMcs.Count + 1];  	//查找是否存在方法(方法参数均为string类型)  	parameterTypes = new Type[parameters.Length];  	for (int i = 0; i < parameterTypes.Length; i++) {  		parameterTypes [i] = typeof(String);  	}  	method = type.GetMethod (tagName' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.IgnoreCase' null' parameterTypes' null);  	//如果方法存在且包含template特性，则执行返回结果，否则返回原始值  	if (method == null || method.GetCustomAttributes (typeof(TemplateMethodAttribute)' true).Length == 0) {  		return m.Value;  	}  	//数字参数  	string intParamValue;  	//则给参数数组赋值  	for (int i = 0; i < paramMcs.Count; i++) {  		intParamValue = paramMcs [i].Groups [2].Value;  		if (intParamValue != String.Empty) {  			parameters [i] = intParamValue;  		} else {  			parameters [i] = paramMcs [i].Groups [1].Value;  		}  	}  	parameters [parameters.Length - 1] = tagFormat;  	if (this.Count != null)  		this.Count.Add (String.Format ("Method:{0}'{1:mmssfff}"' method.Name' DateTime.Now));  	//执行方法并返回结果  	return method.Invoke (this.classInstance' parameters).ToString ();  });  
Magic Number,J6.DevFw.Template,SimpleTplEngine,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\SimpleTplEngine.cs,ComplieTemplateMethod,The following statement contains a magic number: html = methodRegex.Replace (html' m => {  	tagName = m.Groups [1].Value;  	tagFormat = m.Groups [3].Value;  	//获得参数  	paramMcs = paramRegex.Matches (m.Groups [2].Value);  	//参数'多添加一个tagFormat参数  	parameters = new object[paramMcs.Count + 1];  	//查找是否存在方法(方法参数均为string类型)  	parameterTypes = new Type[parameters.Length];  	for (int i = 0; i < parameterTypes.Length; i++) {  		parameterTypes [i] = typeof(String);  	}  	method = type.GetMethod (tagName' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.IgnoreCase' null' parameterTypes' null);  	//如果方法存在且包含template特性，则执行返回结果，否则返回原始值  	if (method == null || method.GetCustomAttributes (typeof(TemplateMethodAttribute)' true).Length == 0) {  		return m.Value;  	}  	//数字参数  	string intParamValue;  	//则给参数数组赋值  	for (int i = 0; i < paramMcs.Count; i++) {  		intParamValue = paramMcs [i].Groups [2].Value;  		if (intParamValue != String.Empty) {  			parameters [i] = intParamValue;  		} else {  			parameters [i] = paramMcs [i].Groups [1].Value;  		}  	}  	parameters [parameters.Length - 1] = tagFormat;  	if (this.Count != null)  		this.Count.Add (String.Format ("Method:{0}'{1:mmssfff}"' method.Name' DateTime.Now));  	//执行方法并返回结果  	return method.Invoke (this.classInstance' parameters).ToString ();  });  
Magic Number,J6.DevFw.Template,SimpleTplEngine,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\SimpleTplEngine.cs,ComplieTemplateMethod,The following statement contains a magic number: tagFormat = m.Groups [3].Value;  
Magic Number,J6.DevFw.Template,SimpleTplEngine,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\SimpleTplEngine.cs,ComplieTemplateMethod,The following statement contains a magic number: paramMcs = paramRegex.Matches (m.Groups [2].Value);  
Magic Number,J6.DevFw.Template,SimpleTplEngine,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\SimpleTplEngine.cs,ComplieTemplateMethod,The following statement contains a magic number: for (int i = 0; i < paramMcs.Count; i++) {  	intParamValue = paramMcs [i].Groups [2].Value;  	if (intParamValue != String.Empty) {  		parameters [i] = intParamValue;  	} else {  		parameters [i] = paramMcs [i].Groups [1].Value;  	}  }  
Magic Number,J6.DevFw.Template,SimpleTplEngine,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\SimpleTplEngine.cs,ComplieTemplateMethod,The following statement contains a magic number: intParamValue = paramMcs [i].Groups [2].Value;  
Magic Number,J6.DevFw.Template,SimpleTplEngine,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\SimpleTplEngine.cs,ComplieTemplateTag,The following statement contains a magic number: html = tagRegex.Replace (html' m => {  	tagName = m.Groups [1].Value;  	//获得参数  	paramMcs = paramRegex.Matches (m.Groups [2].Value);  	//参数  	parameters = new object[paramMcs.Count];  	//查找是否存在方法(方法参数均为string类型)  	parameterTypes = new Type[parameters.Length];  	for (int i = 0; i < parameterTypes.Length; i++) {  		parameterTypes [i] = typeof(String);  	}  	method = type.GetMethod (tagName' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.IgnoreCase' null' parameterTypes' null);  	//如果方法存在且包含template特性，则执行返回结果，否则返回原始值  	if (method == null || method.GetCustomAttributes (typeof(TemplateTagAttribute)' true) == null) {  		return m.Value;  	} else {  		//数字参数  		string intParamValue;  		//则给参数数组赋值  		for (int i = 0; i < paramMcs.Count; i++) {  			intParamValue = paramMcs [i].Groups [2].Value;  			if (intParamValue != String.Empty) {  				parameters [i] = intParamValue;  			} else {  				parameters [i] = paramMcs [i].Groups [1].Value;  			}  		}  		if (this.Count != null)  			this.Count.Add (String.Format ("Tag:{0}'{1:mmssfff}"' method.Name' DateTime.Now));  		//执行方法并返回结果  		return method.Invoke (this.classInstance' parameters).ToString ();  	}  });  
Magic Number,J6.DevFw.Template,SimpleTplEngine,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\SimpleTplEngine.cs,ComplieTemplateTag,The following statement contains a magic number: html = tagRegex.Replace (html' m => {  	tagName = m.Groups [1].Value;  	//获得参数  	paramMcs = paramRegex.Matches (m.Groups [2].Value);  	//参数  	parameters = new object[paramMcs.Count];  	//查找是否存在方法(方法参数均为string类型)  	parameterTypes = new Type[parameters.Length];  	for (int i = 0; i < parameterTypes.Length; i++) {  		parameterTypes [i] = typeof(String);  	}  	method = type.GetMethod (tagName' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.IgnoreCase' null' parameterTypes' null);  	//如果方法存在且包含template特性，则执行返回结果，否则返回原始值  	if (method == null || method.GetCustomAttributes (typeof(TemplateTagAttribute)' true) == null) {  		return m.Value;  	} else {  		//数字参数  		string intParamValue;  		//则给参数数组赋值  		for (int i = 0; i < paramMcs.Count; i++) {  			intParamValue = paramMcs [i].Groups [2].Value;  			if (intParamValue != String.Empty) {  				parameters [i] = intParamValue;  			} else {  				parameters [i] = paramMcs [i].Groups [1].Value;  			}  		}  		if (this.Count != null)  			this.Count.Add (String.Format ("Tag:{0}'{1:mmssfff}"' method.Name' DateTime.Now));  		//执行方法并返回结果  		return method.Invoke (this.classInstance' parameters).ToString ();  	}  });  
Magic Number,J6.DevFw.Template,SimpleTplEngine,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\SimpleTplEngine.cs,ComplieTemplateTag,The following statement contains a magic number: paramMcs = paramRegex.Matches (m.Groups [2].Value);  
Magic Number,J6.DevFw.Template,SimpleTplEngine,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\SimpleTplEngine.cs,ComplieTemplateTag,The following statement contains a magic number: if (method == null || method.GetCustomAttributes (typeof(TemplateTagAttribute)' true) == null) {  	return m.Value;  } else {  	//数字参数  	string intParamValue;  	//则给参数数组赋值  	for (int i = 0; i < paramMcs.Count; i++) {  		intParamValue = paramMcs [i].Groups [2].Value;  		if (intParamValue != String.Empty) {  			parameters [i] = intParamValue;  		} else {  			parameters [i] = paramMcs [i].Groups [1].Value;  		}  	}  	if (this.Count != null)  		this.Count.Add (String.Format ("Tag:{0}'{1:mmssfff}"' method.Name' DateTime.Now));  	//执行方法并返回结果  	return method.Invoke (this.classInstance' parameters).ToString ();  }  
Magic Number,J6.DevFw.Template,SimpleTplEngine,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\SimpleTplEngine.cs,ComplieTemplateTag,The following statement contains a magic number: for (int i = 0; i < paramMcs.Count; i++) {  	intParamValue = paramMcs [i].Groups [2].Value;  	if (intParamValue != String.Empty) {  		parameters [i] = intParamValue;  	} else {  		parameters [i] = paramMcs [i].Groups [1].Value;  	}  }  
Magic Number,J6.DevFw.Template,SimpleTplEngine,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\SimpleTplEngine.cs,ComplieTemplateTag,The following statement contains a magic number: intParamValue = paramMcs [i].Groups [2].Value;  
Magic Number,J6.DevFw.Template,TemplateUtility,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\TemplateUtility.cs,GetTemplateId,The following statement contains a magic number: if (!fileName.ToLower ().EndsWith (".phtml") && nametype == TemplateNames.FileName) {  	string id = String.Format ("{0}{1}"' match.Groups [1].Value' match.Groups [2].Value).Replace ('\\'' '/');  	return id.Substring (0' id.LastIndexOf ('.'));  } else {  	return MD5.EncodeTo16 (Regex.Replace (fileName' "/|\\\\"' String.Empty).ToLower ());  }  
Magic Number,J6.DevFw.Template,TemplateUtility,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\TemplateUtility.cs,PrintTemplatesInfo,The following statement contains a magic number: foreach (string key in TemplateCache.templateDictionary.Keys) {  	tpl = TemplateCache.templateDictionary [key];  	tplFileName = new Regex ("templates(/|\\\\)+#*(.+?)$"' RegexOptions.IgnoreCase).Match (tpl.FilePath).Groups [2].Value.Replace ("\\"' "/");  	tplContent = tpl.Content;  	sb.Append ("<tr><td class=\"center\">").Append ((++i).ToString ()).Append ("</td><td class=\"center\">").Append (key.ToLower ()).Append ("</td><td class=\"center\">").Append (//RegexUtility.partialRegex.IsMatch(tplContent) && tplContent.IndexOf("<title>") != -1   	!tpl.FilePath.EndsWith (".phtml") ? "<span style=\"color:#333\">模板页面</span>" : "<span style=\"color:#006699\">部分视图</span>").Append ("</td><td>/").Append (tplFileName).Append ("</td><td>").Append (tpl.Comment).Append ("</td><td>").Append (tpl.FilePath).Append ("</td></tr>");  }  
Magic Number,J6.DevFw.Template,TemplateUtility,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\TemplateUtility.cs,PrintTemplatesInfo,The following statement contains a magic number: tplFileName = new Regex ("templates(/|\\\\)+#*(.+?)$"' RegexOptions.IgnoreCase).Match (tpl.FilePath).Groups [2].Value.Replace ("\\"' "/");  
Missing Default,J6.DevFw.Template,Eval,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\Eval.cs,SetToVariable,The following switch statement is missing a default case: switch (valueMatch.Groups [1].Value.ToLower ()) {  case "item":  	dc.DefineVariable (varName' HttpContext.Current.Items [varKey]);  	break;  case "cache":  	dc.DefineVariable (varName' HttpRuntime.Cache [varKey]);  	break;  case "query":  	dc.DefineVariable (varName' HttpContext.Current.Request [varKey]);  	break;  }  
Missing Default,J6.DevFw.Template,TemplateUtility,F:\newReposMay17\atnet_devfw\J6\src\core\J6.DevFw.Template\old\TemplateUtility.cs,PrintTemplatesInfo,The following switch statement is missing a default case: switch (match.Groups [1].Value) {  case "title":  	return "模板信息";  case "content":  	return sb.ToString ();  case "year":  	return DateTime.Now.Year.ToString ();  }  
