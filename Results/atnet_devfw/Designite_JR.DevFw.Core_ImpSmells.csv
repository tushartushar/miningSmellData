Implementation smell,Namespace,Class,File,Method,Description
Long Method,JR.DevFw.Framework.Automation,EntityForm,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Automation\EntityForm.cs,Build,The method has 172 lines of code.
Long Method,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,MakeThumbnail,The method has 126 lines of code.
Long Method,JR.DevFw.Framework.Text,ChineseSpell,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Text\ChineseSpell.cs,GetSpellWord,The method has 109 lines of code.
Long Method,JR.DevFw.Framework.Web.UI,UrlPager,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\UrlPager.cs,Pager,The method has 143 lines of code.
Complex Method,JR.DevFw.Framework.Automation,EntityForm,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Automation\EntityForm.cs,Build,Cyclomatic complexity of the method is 21
Complex Method,JR.DevFw.Framework.Extensions,CollectionExtensions,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Extensions\CollectionExtensions.cs,GetPropertyValue,Cyclomatic complexity of the method is 10
Complex Method,JR.DevFw.Framework.Extensions,TExtensions,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Extensions\TExtensions.cs,CloneData,Cyclomatic complexity of the method is 14
Complex Method,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,GetSize,Cyclomatic complexity of the method is 9
Complex Method,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,DrawBySize,Cyclomatic complexity of the method is 9
Complex Method,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,MakeThumbnail,Cyclomatic complexity of the method is 16
Complex Method,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,MakeWatermarkImage,Cyclomatic complexity of the method is 9
Complex Method,JR.DevFw.Framework.TaskBox.HttpSync,HttpSimpleRequest,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\TaskBox\HttpSync\HttpSimpleRequest.cs,CreatePostHttpResponse,Cyclomatic complexity of the method is 9
Complex Method,JR.DevFw.Framework.Text,ChineseSpell,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Text\ChineseSpell.cs,GetSpellWord,Cyclomatic complexity of the method is 14
Complex Method,JR.DevFw.Framework.Web.UI,VerifyCodeGenerator,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\VerifyCode.cs,GraphicDrawImage,Cyclomatic complexity of the method is 13
Complex Method,JR.DevFw.Framework.Web.UI,CustomPagingGetter,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\UrlPager.cs,Get,Cyclomatic complexity of the method is 8
Complex Method,JR.DevFw.Framework.Web.UI,UrlPager,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\UrlPager.cs,Pager,Cyclomatic complexity of the method is 15
Complex Method,JR.DevFw.Framework.Web.unused.Handler,ExecuteHandler,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\unused\Handler\ExecuteHandler.cs,ProcessRequest,Cyclomatic complexity of the method is 9
Long Parameter List,JR.DevFw.Framework.Extensions,CollectionExtensions,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Extensions\CollectionExtensions.cs,GetPropertyValue,The method has 5 parameters. Parameters: pro' strType' bitType' proType' value
Long Parameter List,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,DrawBySize,The method has 8 parameters. Parameters: original' mode' width' height' format' imageQuality' compression' graphicsHandler
Long Parameter List,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,DrawBySize,The method has 5 parameters. Parameters: original' mode' width' height' graphicsHandler
Long Parameter List,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,MakeThumbnail,The method has 5 parameters. Parameters: original' mode' width' height' thumbHandler
Long Parameter List,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,SaveThumbnail,The method has 5 parameters. Parameters: originalImagePath' thumbnailPath' mode' width' height
Long Parameter List,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,SaveThumbnail,The method has 5 parameters. Parameters: originalImage' thumbnailPath' mode' width' height
Long Parameter List,JR.DevFw.Framework.TaskBox.HttpSync,HttpSimpleRequest,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\TaskBox\HttpSync\HttpSimpleRequest.cs,CreatePostHttpResponse,The method has 5 parameters. Parameters: url' parameters' userAgent' requestEncoding' cookies
Long Parameter List,JR.DevFw.Framework.Net,FtpClient,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Net\FtpClient.cs,FtpClient,The method has 5 parameters. Parameters: server' port' userName' password' rootPath
Long Parameter List,JR.DevFw.Framework.Net,HttpClient,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Net\HttpClient.cs,Request,The method has 5 parameters. Parameters: url' method' data' cookies' timeout
Long Parameter List,JR.DevFw.Framework.Web.UI,VerifyCodeGenerator,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\VerifyCode.cs,RenderGraphicImage,The method has 5 parameters. Parameters: number' opt' simpleMode' words' contentType
Long Parameter List,JR.DevFw.Framework.Web.UI,VerifyCodeGenerator,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\VerifyCode.cs,GraphicDrawImage,The method has 6 parameters. Parameters: number' opt' simpleMode' font' imageHeight' words
Long Parameter List,JR.DevFw.Framework.Web.UI,IPagingGetter,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\UrlPager.cs,Get,The method has 5 parameters. Parameters: page' total' nowPage' flag' text
Long Parameter List,JR.DevFw.Framework.Web.UI,DefaultPageingGetter,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\UrlPager.cs,Get,The method has 5 parameters. Parameters: page' total' nowPage' flag' text
Long Parameter List,JR.DevFw.Framework.Web.UI,CustomPagingGetter,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\UrlPager.cs,CustomPagingGetter,The method has 6 parameters. Parameters: firstLinkFormat' pagerLinkFormat' firstPageText' lastPageText' previousPageText' nextPageText
Long Parameter List,JR.DevFw.Framework.Web.UI,CustomPagingGetter,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\UrlPager.cs,Get,The method has 5 parameters. Parameters: page' total' nowPage' flag' text
Long Parameter List,JR.DevFw.Framework.Web.UI,UrlPaging,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\UrlPager.cs,PagerHtml,The method has 5 parameters. Parameters: firstFormat' format' currentPageIndex' recordCount' pageCount
Long Parameter List,JR.DevFw.Framework.Web.unused,ExceptionProcess,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\unused\ExceptionProcess.cs,PostError,The method has 6 parameters. Parameters: context' errorUri' ip' type' msg' trace
Long Statement,JR.DevFw.Framework.Extensions,HttpExtensions,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Extensions\HttpExtensions.cs,IscMobileDevice,The length of the statement  "                    @"(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino"' " is 323.
Long Statement,JR.DevFw.Framework.Extensions,HttpExtensions,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Extensions\HttpExtensions.cs,IscMobileDevice,The length of the statement  "                    @"1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-"' " is 1610.
Long Statement,JR.DevFw.Framework.Web.UI,UrlPager,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\UrlPager.cs,Pager,The length of the statement  "            //if (EnableInput) sb.Append("<input type=\"text\" size=\"2\"/><a href=\"#\" class=\"go\" onclick=\"gotoPage(this)\">").Append(InputButtonText ?? "跳页").Append("</a>"); " is 167.
Complex Conditional,Com.Line.Api.Sdk,ApiClient,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Api\ApiClient.cs,postRaw,The conditional expression  "_apiUrl == "" || _key == "" || _signType == "" || _secret == """  is complex.
Complex Conditional,JR.DevFw.Framework.Text,ChineseSpell,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Text\ChineseSpell.cs,GetSpellWord,The conditional expression  "((options & SpellOptions.EnableUnicodeLetter) == SpellOptions.EnableUnicodeLetter)                                  && !(                                      ((tmp[0] >= 97) && (tmp[0] <= 122))                                      || ((tmp[0] >= 65) && (tmp[0] <= 90))                                      || ((tmp[0] >= 48) && (tmp[0] <= 57))                                      )"  is complex.
Complex Conditional,JR.DevFw.Framework.Text,ChineseSpell,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Text\ChineseSpell.cs,GetSpellWord,The conditional expression  "((options & SpellOptions.EnableUnicodeLetter) == SpellOptions.EnableUnicodeLetter)                          || (                              ((local[i] >= 97) && (local[i] <= 122))                              || ((local[i] >= 65) && (local[i] <= 90))                              || ((local[i] >= 48) && (local[i] <= 57))                              )"  is complex.
Complex Conditional,JR.DevFw.Framework.Web.UI,VerifyCodeGenerator,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\VerifyCode.cs,GraphicDrawImage,The conditional expression  "i < _ul_s || i > _ll_e || (i > _ul_e && i < _ll_s)"  is complex.
Complex Conditional,JR.DevFw.Framework.Web.UI,VerifyCodeGenerator,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\VerifyCode.cs,TwistImage,The conditional expression  "nOldX >= 0 && nOldX < destBmp.Width                          && nOldY >= 0 && nOldY < destBmp.Height"  is complex.
Empty Catch Block,JR.DevFw.Framework.Extensions,TExtensions,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Extensions\TExtensions.cs,CloneData,The method has an empty catch block.
Empty Catch Block,JR.DevFw.Framework.Extensions,TExtensions,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Extensions\TExtensions.cs,CloneData,The method has an empty catch block.
Empty Catch Block,JR.DevFw.Framework.Net,HttpClient,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Net\HttpClient.cs,DownloadFile,The method has an empty catch block.
Magic Number,JR.DevFw.Framework,TimeUtils,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\TimeUtils.cs,UnixTime,The following statement contains a magic number: return zone.ToLocalTime(unixVar).Add(new TimeSpan(l * 10000 * 1000));
Magic Number,JR.DevFw.Framework,TimeUtils,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\TimeUtils.cs,UnixTime,The following statement contains a magic number: return zone.ToLocalTime(unixVar).Add(new TimeSpan(l * 10000 * 1000));
Magic Number,JR.DevFw.Framework,TimeUtils,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\TimeUtils.cs,UnixTime,The following statement contains a magic number: TimeSpan ts = new TimeSpan(l * 10000 * 1000);
Magic Number,JR.DevFw.Framework,TimeUtils,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\TimeUtils.cs,UnixTime,The following statement contains a magic number: TimeSpan ts = new TimeSpan(l * 10000 * 1000);
Magic Number,JR.DevFw.Framework.Security,CryptoUtils,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Security\CryptoUtils.cs,MD516,The following statement contains a magic number: return MD5(str).Substring(8' 24);
Magic Number,JR.DevFw.Framework.Security,CryptoUtils,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Security\CryptoUtils.cs,MD516,The following statement contains a magic number: return MD5(str).Substring(8' 24);
Magic Number,JR.DevFw.Framework.Security,Md5CryptoImpl,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Security\Md5CryptoImpl.cs,Encode16MD5,The following statement contains a magic number: return BitConverter.ToString(md5.ComputeHash(Encoding.UTF8.GetBytes(str))' 4' 8).Replace("-"' String.Empty);
Magic Number,JR.DevFw.Framework.Security,Md5CryptoImpl,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Security\Md5CryptoImpl.cs,Encode16MD5,The following statement contains a magic number: return BitConverter.ToString(md5.ComputeHash(Encoding.UTF8.GetBytes(str))' 4' 8).Replace("-"' String.Empty);
Magic Number,JR.DevFw,FwCtx,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\FwCtx.cs,Mono,The following statement contains a magic number: return _platformId == 4 || _platformId == 6 || _platformId == 128;
Magic Number,JR.DevFw,FwCtx,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\FwCtx.cs,Mono,The following statement contains a magic number: return _platformId == 4 || _platformId == 6 || _platformId == 128;
Magic Number,JR.DevFw,FwCtx,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\FwCtx.cs,Mono,The following statement contains a magic number: return _platformId == 4 || _platformId == 6 || _platformId == 128;
Magic Number,JR.DevFw,MicroTemplateEngine,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\MicroTemplateEngine.cs,Execute,The following statement contains a magic number: return fnRegex.Replace(html' m =>              {                  // 方法名称                  String fnName = m.Groups[1].Value;                  // 获得参数                  MatchCollection  paramMatches = paramRegex.Matches(m.Groups[2].Value);                  object[] paramArray = new object[paramMatches.Count];                  // 则给参数数组赋值                  for (int i = 0; i < paramMatches.Count; i++)                  {                                  // 数字参数                      string intParamValue = paramMatches[i].Groups[2].Value;                      if (intParamValue != String.Empty)  paramArray[i] = intParamValue;                      else  paramArray[i] = paramMatches[i].Groups[1].Value;                  }                  // 解析模板数据                  var s = instance.Execute(fnName' paramArray);                  return s == null ? m.Value : s;              });
Magic Number,JR.DevFw,MicroTemplateEngine,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\MicroTemplateEngine.cs,Execute,The following statement contains a magic number: return fnRegex.Replace(html' m =>              {                  // 方法名称                  String fnName = m.Groups[1].Value;                  // 获得参数                  MatchCollection  paramMatches = paramRegex.Matches(m.Groups[2].Value);                  object[] paramArray = new object[paramMatches.Count];                  // 则给参数数组赋值                  for (int i = 0; i < paramMatches.Count; i++)                  {                                  // 数字参数                      string intParamValue = paramMatches[i].Groups[2].Value;                      if (intParamValue != String.Empty)  paramArray[i] = intParamValue;                      else  paramArray[i] = paramMatches[i].Groups[1].Value;                  }                  // 解析模板数据                  var s = instance.Execute(fnName' paramArray);                  return s == null ? m.Value : s;              });
Magic Number,JR.DevFw.Extensions,StreamExtensions,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Extensions\StreamExtensions.cs,CopyTo,The following statement contains a magic number: const int bufferSize = 4096;
Magic Number,JR.DevFw.Framework.Extensions,StringExtensions,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Extensions\StringExtensions.cs,RandomLetters,The following statement contains a magic number: str += cs[rd.Next(24)];
Magic Number,JR.DevFw.Framework.Extensions,StringExtensions,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Extensions\StringExtensions.cs,RandomUpperLetters,The following statement contains a magic number: randomNum = rd.Next(24);
Magic Number,JR.DevFw.Framework.Extensions,StringExtensions,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Extensions\StringExtensions.cs,RandomUpperLetters,The following statement contains a magic number: str += randomNum > 12 ? cs[rd.Next(randomNum)].ToString().ToUpper() : cs[rd.Next(randomNum)].ToString();
Magic Number,JR.DevFw.Framework.Extensions,HttpExtensions,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Extensions\HttpExtensions.cs,IscMobileDevice,The following statement contains a magic number: return b.IsMatch(u) || v.IsMatch(u.Substring(0' 4));
Magic Number,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,DrawBySize,The following statement contains a magic number: x = (original.Width - ow)/2;
Magic Number,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,DrawBySize,The following statement contains a magic number: EncoderParameters ep = new EncoderParameters(2);
Magic Number,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,DrawBySize,The following statement contains a magic number: ep.Param[0] = new EncoderParameter(Encoder.Quality'                      imageQuality > 100 || imageQuality <= 0 ? 100L : imageQuality);
Magic Number,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,DrawBySize,The following statement contains a magic number: ep.Param[0] = new EncoderParameter(Encoder.Quality'                      imageQuality > 100 || imageQuality <= 0 ? 100L : imageQuality);
Magic Number,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,DrawBySize,The following statement contains a magic number: ep.Param[1] = new EncoderParameter(Encoder.Compression' compression < 1L ? 100L : compression);
Magic Number,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,DrawBySize,The following statement contains a magic number: return DrawBySize(original' mode' width' height' ImageFormat.Jpeg' 100L' 60L' graphicsHandler);
Magic Number,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,DrawBySize,The following statement contains a magic number: return DrawBySize(original' mode' width' height' ImageFormat.Jpeg' 100L' 60L' graphicsHandler);
Magic Number,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,MakeThumbnail,The following statement contains a magic number: switch (mode)              {                  case ImageSizeMode.SuitWidth:                      toHeight = original.Height*width/original.Width;                      break;                    case ImageSizeMode.SuitHeight:                      toWidth = original.Width*height/original.Height;                      break;                    case ImageSizeMode.AutoSuit:                      //根据宽度适配                      if (original.Width > original.Height)                      {                          toHeight = original.Height*width/original.Width;                      }                      else //根据高度适配                      {                          toWidth = original.Width*height/original.Height;                      }                      break;                    //填充适应                  case ImageSizeMode.FillFit:                      if ((double) original.Width/(double) original.Height > (double) toWidth/(double) toHeight)                      {                          toWidth = width;                          toHeight = original.Height*width/original.Width;                      }                      else                      {                          toHeight = height;                          toWidth = original.Width*height/original.Height;                      }                        break;                    //裁剪                  case ImageSizeMode.Cut:                      if ((double) original.Width/(double) original.Height > (double) toWidth/(double) toHeight)                      {                          oh = original.Height;                          ow = original.Height*toWidth/toHeight;                          y = 0;                          x = (original.Width - ow)/2;                      }                      else                      {                          ow = original.Width;                          oh = original.Width*height/toWidth;                          x = 0;                          y = (original.Height - oh)/2;                      }                      break;                    default:                  case ImageSizeMode.CustomSize:                      break;              }
Magic Number,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,MakeThumbnail,The following statement contains a magic number: switch (mode)              {                  case ImageSizeMode.SuitWidth:                      toHeight = original.Height*width/original.Width;                      break;                    case ImageSizeMode.SuitHeight:                      toWidth = original.Width*height/original.Height;                      break;                    case ImageSizeMode.AutoSuit:                      //根据宽度适配                      if (original.Width > original.Height)                      {                          toHeight = original.Height*width/original.Width;                      }                      else //根据高度适配                      {                          toWidth = original.Width*height/original.Height;                      }                      break;                    //填充适应                  case ImageSizeMode.FillFit:                      if ((double) original.Width/(double) original.Height > (double) toWidth/(double) toHeight)                      {                          toWidth = width;                          toHeight = original.Height*width/original.Width;                      }                      else                      {                          toHeight = height;                          toWidth = original.Width*height/original.Height;                      }                        break;                    //裁剪                  case ImageSizeMode.Cut:                      if ((double) original.Width/(double) original.Height > (double) toWidth/(double) toHeight)                      {                          oh = original.Height;                          ow = original.Height*toWidth/toHeight;                          y = 0;                          x = (original.Width - ow)/2;                      }                      else                      {                          ow = original.Width;                          oh = original.Width*height/toWidth;                          x = 0;                          y = (original.Height - oh)/2;                      }                      break;                    default:                  case ImageSizeMode.CustomSize:                      break;              }
Magic Number,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,MakeThumbnail,The following statement contains a magic number: g.DrawImage(original'                  new Rectangle((width - toWidth)/2' (height - toHeight)/2' toWidth' toHeight)'                  new Rectangle(x' y' ow' oh)'                  GraphicsUnit.Pixel);
Magic Number,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,MakeThumbnail,The following statement contains a magic number: g.DrawImage(original'                  new Rectangle((width - toWidth)/2' (height - toHeight)/2' toWidth' toHeight)'                  new Rectangle(x' y' ow' oh)'                  GraphicsUnit.Pixel);
Magic Number,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,MakeThumbnail,The following statement contains a magic number: EncoderParameters ep = new EncoderParameters(2);
Magic Number,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,MakeThumbnail,The following statement contains a magic number: ep.Param[0] = new EncoderParameter(System.Drawing.Imaging.Encoder.Quality' 100L);
Magic Number,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,MakeThumbnail,The following statement contains a magic number: ep.Param[1] = new EncoderParameter(System.Drawing.Imaging.Encoder.Compression' 60L);
Magic Number,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,Thumbnal_Test,The following statement contains a magic number: int imgHeight = 480' imgWidth = 600;
Magic Number,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,Thumbnal_Test,The following statement contains a magic number: int imgHeight = 480' imgWidth = 600;
Magic Number,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,Thumbnal_Test,The following statement contains a magic number: byte[] data = GraphicsHelper.DrawBySize(img' ImageSizeMode.CustomSize' width' height' ImageFormat.Jpeg' 90L'                  50L' null);
Magic Number,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,Thumbnal_Test,The following statement contains a magic number: byte[] data = GraphicsHelper.DrawBySize(img' ImageSizeMode.CustomSize' width' height' ImageFormat.Jpeg' 90L'                  50L' null);
Magic Number,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,MakeWatermarkImage,The following statement contains a magic number: int xOffset = 5;
Magic Number,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,MakeWatermarkImage,The following statement contains a magic number: int yOffset = 5;
Magic Number,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,MakeWatermarkImage,The following statement contains a magic number: switch (pos)              {                  case WatermarkPosition.Bottom:                      //正下方                      x = (img.Width - water.Width)/2;                      y = img.Height - water.Height - yOffset;                      break;                  case WatermarkPosition.LeftBottom:                      //左下方                      x = xOffset;                      y = img.Height - water.Height - yOffset;                      break;                  case WatermarkPosition.Right:                      //右方                      x = img.Width - water.Width - xOffset;                      y = (img.Height - water.Height)/2;                      break;                  case WatermarkPosition.Middle:                      //正中                      x = (img.Width - water.Width)/2;                      y = (img.Height - water.Height)/2;                      break;                  case WatermarkPosition.Left:                      //左边                      x = xOffset;                      y = (img.Height - water.Height)/2;                      break;                  case WatermarkPosition.RightTop:                      //右上方                      x = img.Width - water.Width - xOffset;                      y = yOffset;                      break;                  case WatermarkPosition.Top:                      //正上方                      x = (img.Width - water.Width)/2;                      y = yOffset;                      break;                  case WatermarkPosition.LeftTop:                      //左上方                      x = xOffset;                      y = yOffset;                      break;                    default:                  case WatermarkPosition.Default:                  case WatermarkPosition.RightBottom:                      //右下角                      x = img.Width - water.Width - xOffset;                      y = img.Height - water.Height - yOffset;                      break;              }
Magic Number,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,MakeWatermarkImage,The following statement contains a magic number: switch (pos)              {                  case WatermarkPosition.Bottom:                      //正下方                      x = (img.Width - water.Width)/2;                      y = img.Height - water.Height - yOffset;                      break;                  case WatermarkPosition.LeftBottom:                      //左下方                      x = xOffset;                      y = img.Height - water.Height - yOffset;                      break;                  case WatermarkPosition.Right:                      //右方                      x = img.Width - water.Width - xOffset;                      y = (img.Height - water.Height)/2;                      break;                  case WatermarkPosition.Middle:                      //正中                      x = (img.Width - water.Width)/2;                      y = (img.Height - water.Height)/2;                      break;                  case WatermarkPosition.Left:                      //左边                      x = xOffset;                      y = (img.Height - water.Height)/2;                      break;                  case WatermarkPosition.RightTop:                      //右上方                      x = img.Width - water.Width - xOffset;                      y = yOffset;                      break;                  case WatermarkPosition.Top:                      //正上方                      x = (img.Width - water.Width)/2;                      y = yOffset;                      break;                  case WatermarkPosition.LeftTop:                      //左上方                      x = xOffset;                      y = yOffset;                      break;                    default:                  case WatermarkPosition.Default:                  case WatermarkPosition.RightBottom:                      //右下角                      x = img.Width - water.Width - xOffset;                      y = img.Height - water.Height - yOffset;                      break;              }
Magic Number,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,MakeWatermarkImage,The following statement contains a magic number: switch (pos)              {                  case WatermarkPosition.Bottom:                      //正下方                      x = (img.Width - water.Width)/2;                      y = img.Height - water.Height - yOffset;                      break;                  case WatermarkPosition.LeftBottom:                      //左下方                      x = xOffset;                      y = img.Height - water.Height - yOffset;                      break;                  case WatermarkPosition.Right:                      //右方                      x = img.Width - water.Width - xOffset;                      y = (img.Height - water.Height)/2;                      break;                  case WatermarkPosition.Middle:                      //正中                      x = (img.Width - water.Width)/2;                      y = (img.Height - water.Height)/2;                      break;                  case WatermarkPosition.Left:                      //左边                      x = xOffset;                      y = (img.Height - water.Height)/2;                      break;                  case WatermarkPosition.RightTop:                      //右上方                      x = img.Width - water.Width - xOffset;                      y = yOffset;                      break;                  case WatermarkPosition.Top:                      //正上方                      x = (img.Width - water.Width)/2;                      y = yOffset;                      break;                  case WatermarkPosition.LeftTop:                      //左上方                      x = xOffset;                      y = yOffset;                      break;                    default:                  case WatermarkPosition.Default:                  case WatermarkPosition.RightBottom:                      //右下角                      x = img.Width - water.Width - xOffset;                      y = img.Height - water.Height - yOffset;                      break;              }
Magic Number,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,MakeWatermarkImage,The following statement contains a magic number: switch (pos)              {                  case WatermarkPosition.Bottom:                      //正下方                      x = (img.Width - water.Width)/2;                      y = img.Height - water.Height - yOffset;                      break;                  case WatermarkPosition.LeftBottom:                      //左下方                      x = xOffset;                      y = img.Height - water.Height - yOffset;                      break;                  case WatermarkPosition.Right:                      //右方                      x = img.Width - water.Width - xOffset;                      y = (img.Height - water.Height)/2;                      break;                  case WatermarkPosition.Middle:                      //正中                      x = (img.Width - water.Width)/2;                      y = (img.Height - water.Height)/2;                      break;                  case WatermarkPosition.Left:                      //左边                      x = xOffset;                      y = (img.Height - water.Height)/2;                      break;                  case WatermarkPosition.RightTop:                      //右上方                      x = img.Width - water.Width - xOffset;                      y = yOffset;                      break;                  case WatermarkPosition.Top:                      //正上方                      x = (img.Width - water.Width)/2;                      y = yOffset;                      break;                  case WatermarkPosition.LeftTop:                      //左上方                      x = xOffset;                      y = yOffset;                      break;                    default:                  case WatermarkPosition.Default:                  case WatermarkPosition.RightBottom:                      //右下角                      x = img.Width - water.Width - xOffset;                      y = img.Height - water.Height - yOffset;                      break;              }
Magic Number,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,MakeWatermarkImage,The following statement contains a magic number: switch (pos)              {                  case WatermarkPosition.Bottom:                      //正下方                      x = (img.Width - water.Width)/2;                      y = img.Height - water.Height - yOffset;                      break;                  case WatermarkPosition.LeftBottom:                      //左下方                      x = xOffset;                      y = img.Height - water.Height - yOffset;                      break;                  case WatermarkPosition.Right:                      //右方                      x = img.Width - water.Width - xOffset;                      y = (img.Height - water.Height)/2;                      break;                  case WatermarkPosition.Middle:                      //正中                      x = (img.Width - water.Width)/2;                      y = (img.Height - water.Height)/2;                      break;                  case WatermarkPosition.Left:                      //左边                      x = xOffset;                      y = (img.Height - water.Height)/2;                      break;                  case WatermarkPosition.RightTop:                      //右上方                      x = img.Width - water.Width - xOffset;                      y = yOffset;                      break;                  case WatermarkPosition.Top:                      //正上方                      x = (img.Width - water.Width)/2;                      y = yOffset;                      break;                  case WatermarkPosition.LeftTop:                      //左上方                      x = xOffset;                      y = yOffset;                      break;                    default:                  case WatermarkPosition.Default:                  case WatermarkPosition.RightBottom:                      //右下角                      x = img.Width - water.Width - xOffset;                      y = img.Height - water.Height - yOffset;                      break;              }
Magic Number,JR.DevFw.Framework.Graphic,GraphicsHelper,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Graphic\GraphicsHelper.cs,MakeWatermarkImage,The following statement contains a magic number: switch (pos)              {                  case WatermarkPosition.Bottom:                      //正下方                      x = (img.Width - water.Width)/2;                      y = img.Height - water.Height - yOffset;                      break;                  case WatermarkPosition.LeftBottom:                      //左下方                      x = xOffset;                      y = img.Height - water.Height - yOffset;                      break;                  case WatermarkPosition.Right:                      //右方                      x = img.Width - water.Width - xOffset;                      y = (img.Height - water.Height)/2;                      break;                  case WatermarkPosition.Middle:                      //正中                      x = (img.Width - water.Width)/2;                      y = (img.Height - water.Height)/2;                      break;                  case WatermarkPosition.Left:                      //左边                      x = xOffset;                      y = (img.Height - water.Height)/2;                      break;                  case WatermarkPosition.RightTop:                      //右上方                      x = img.Width - water.Width - xOffset;                      y = yOffset;                      break;                  case WatermarkPosition.Top:                      //正上方                      x = (img.Width - water.Width)/2;                      y = yOffset;                      break;                  case WatermarkPosition.LeftTop:                      //左上方                      x = xOffset;                      y = yOffset;                      break;                    default:                  case WatermarkPosition.Default:                  case WatermarkPosition.RightBottom:                      //右下角                      x = img.Width - water.Width - xOffset;                      y = img.Height - water.Height - yOffset;                      break;              }
Magic Number,JR.DevFw.Framework.TaskBox.Toolkit,TaskService,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\TaskBox\Toolkit\TaskService.cs,Start,The following statement contains a magic number: _box = new TaskBox(storage' logProvider' 3);
Magic Number,JR.DevFw.Framework.Net,FtpClient,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Net\FtpClient.cs,FtpClient,The following statement contains a magic number: port = 21;
Magic Number,JR.DevFw.Framework.Net,FtpClient,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Net\FtpClient.cs,FtpClient,The following statement contains a magic number: this.Port = 21;
Magic Number,JR.DevFw.Framework.Net,HttpClient,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Net\HttpClient.cs,DownloadFile,The following statement contains a magic number: const int buffer = 32768;
Magic Number,JR.DevFw.Framework.Text,ChineseSpell,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Text\ChineseSpell.cs,GetSpellWord,The following statement contains a magic number: switch ((int) local[i])                      {                          case 163: // 全角 ASCII                          {                              tmp = ((char) (local[i + 1] - 128)).ToString();                                if (((options & SpellOptions.EnableUnicodeLetter) == SpellOptions.EnableUnicodeLetter)                                  && !(                                      ((tmp[0] >= 97) && (tmp[0] <= 122))                                      || ((tmp[0] >= 65) && (tmp[0] <= 90))                                      || ((tmp[0] >= 48) && (tmp[0] <= 57))                                      )                                  )                              {                                  // 控制不能输出非数字' 字母的字符                                  tmp = "";                              }                                break;                          }                            case 162: // 罗马数字                          {                              if (local[i + 1] > 160)                              {                                  tmp = _charIndex[(int) local[i + 1] - 160];                              }                              else if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                       SpellOptions.TranslateUnknowWordToInterrogation)                              {                                  // 在罗马数字区' 不能翻译的字符非罗马数字                                  tmp = "?";                              }                              else                              {                                  tmp = "";                              }                                break;                          }                            case 166: // 希腊字母                          {                              //                              // TODO:未实现                              //                              break;                          }                            default:                          {                              index = _spellCodeIndex[(int) local[i] - 129' local[i + 1] - 64] - 1;                                if (index == 0) // 无此汉字' 不能翻译的字符' GBK 保留                              {                                  //是否翻译为问号                                  if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                      SpellOptions.TranslateUnknowWordToInterrogation)                                  {                                      tmp = "?";                                  }                                  else                                  {                                      tmp = "";                                  }                              }                              else if ((options & SpellOptions.FirstLetterOnly) == SpellOptions.FirstLetterOnly) //是单拼音                              {                                  tmp = _spellMusicCode[index].ToUpper().Substring(0' 1);                              }                              else                              {                                  tmp = _spellMusicCode[index].ToUpper();                              }                                break;                          }                      }
Magic Number,JR.DevFw.Framework.Text,ChineseSpell,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Text\ChineseSpell.cs,GetSpellWord,The following statement contains a magic number: switch ((int) local[i])                      {                          case 163: // 全角 ASCII                          {                              tmp = ((char) (local[i + 1] - 128)).ToString();                                if (((options & SpellOptions.EnableUnicodeLetter) == SpellOptions.EnableUnicodeLetter)                                  && !(                                      ((tmp[0] >= 97) && (tmp[0] <= 122))                                      || ((tmp[0] >= 65) && (tmp[0] <= 90))                                      || ((tmp[0] >= 48) && (tmp[0] <= 57))                                      )                                  )                              {                                  // 控制不能输出非数字' 字母的字符                                  tmp = "";                              }                                break;                          }                            case 162: // 罗马数字                          {                              if (local[i + 1] > 160)                              {                                  tmp = _charIndex[(int) local[i + 1] - 160];                              }                              else if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                       SpellOptions.TranslateUnknowWordToInterrogation)                              {                                  // 在罗马数字区' 不能翻译的字符非罗马数字                                  tmp = "?";                              }                              else                              {                                  tmp = "";                              }                                break;                          }                            case 166: // 希腊字母                          {                              //                              // TODO:未实现                              //                              break;                          }                            default:                          {                              index = _spellCodeIndex[(int) local[i] - 129' local[i + 1] - 64] - 1;                                if (index == 0) // 无此汉字' 不能翻译的字符' GBK 保留                              {                                  //是否翻译为问号                                  if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                      SpellOptions.TranslateUnknowWordToInterrogation)                                  {                                      tmp = "?";                                  }                                  else                                  {                                      tmp = "";                                  }                              }                              else if ((options & SpellOptions.FirstLetterOnly) == SpellOptions.FirstLetterOnly) //是单拼音                              {                                  tmp = _spellMusicCode[index].ToUpper().Substring(0' 1);                              }                              else                              {                                  tmp = _spellMusicCode[index].ToUpper();                              }                                break;                          }                      }
Magic Number,JR.DevFw.Framework.Text,ChineseSpell,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Text\ChineseSpell.cs,GetSpellWord,The following statement contains a magic number: switch ((int) local[i])                      {                          case 163: // 全角 ASCII                          {                              tmp = ((char) (local[i + 1] - 128)).ToString();                                if (((options & SpellOptions.EnableUnicodeLetter) == SpellOptions.EnableUnicodeLetter)                                  && !(                                      ((tmp[0] >= 97) && (tmp[0] <= 122))                                      || ((tmp[0] >= 65) && (tmp[0] <= 90))                                      || ((tmp[0] >= 48) && (tmp[0] <= 57))                                      )                                  )                              {                                  // 控制不能输出非数字' 字母的字符                                  tmp = "";                              }                                break;                          }                            case 162: // 罗马数字                          {                              if (local[i + 1] > 160)                              {                                  tmp = _charIndex[(int) local[i + 1] - 160];                              }                              else if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                       SpellOptions.TranslateUnknowWordToInterrogation)                              {                                  // 在罗马数字区' 不能翻译的字符非罗马数字                                  tmp = "?";                              }                              else                              {                                  tmp = "";                              }                                break;                          }                            case 166: // 希腊字母                          {                              //                              // TODO:未实现                              //                              break;                          }                            default:                          {                              index = _spellCodeIndex[(int) local[i] - 129' local[i + 1] - 64] - 1;                                if (index == 0) // 无此汉字' 不能翻译的字符' GBK 保留                              {                                  //是否翻译为问号                                  if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                      SpellOptions.TranslateUnknowWordToInterrogation)                                  {                                      tmp = "?";                                  }                                  else                                  {                                      tmp = "";                                  }                              }                              else if ((options & SpellOptions.FirstLetterOnly) == SpellOptions.FirstLetterOnly) //是单拼音                              {                                  tmp = _spellMusicCode[index].ToUpper().Substring(0' 1);                              }                              else                              {                                  tmp = _spellMusicCode[index].ToUpper();                              }                                break;                          }                      }
Magic Number,JR.DevFw.Framework.Text,ChineseSpell,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Text\ChineseSpell.cs,GetSpellWord,The following statement contains a magic number: switch ((int) local[i])                      {                          case 163: // 全角 ASCII                          {                              tmp = ((char) (local[i + 1] - 128)).ToString();                                if (((options & SpellOptions.EnableUnicodeLetter) == SpellOptions.EnableUnicodeLetter)                                  && !(                                      ((tmp[0] >= 97) && (tmp[0] <= 122))                                      || ((tmp[0] >= 65) && (tmp[0] <= 90))                                      || ((tmp[0] >= 48) && (tmp[0] <= 57))                                      )                                  )                              {                                  // 控制不能输出非数字' 字母的字符                                  tmp = "";                              }                                break;                          }                            case 162: // 罗马数字                          {                              if (local[i + 1] > 160)                              {                                  tmp = _charIndex[(int) local[i + 1] - 160];                              }                              else if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                       SpellOptions.TranslateUnknowWordToInterrogation)                              {                                  // 在罗马数字区' 不能翻译的字符非罗马数字                                  tmp = "?";                              }                              else                              {                                  tmp = "";                              }                                break;                          }                            case 166: // 希腊字母                          {                              //                              // TODO:未实现                              //                              break;                          }                            default:                          {                              index = _spellCodeIndex[(int) local[i] - 129' local[i + 1] - 64] - 1;                                if (index == 0) // 无此汉字' 不能翻译的字符' GBK 保留                              {                                  //是否翻译为问号                                  if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                      SpellOptions.TranslateUnknowWordToInterrogation)                                  {                                      tmp = "?";                                  }                                  else                                  {                                      tmp = "";                                  }                              }                              else if ((options & SpellOptions.FirstLetterOnly) == SpellOptions.FirstLetterOnly) //是单拼音                              {                                  tmp = _spellMusicCode[index].ToUpper().Substring(0' 1);                              }                              else                              {                                  tmp = _spellMusicCode[index].ToUpper();                              }                                break;                          }                      }
Magic Number,JR.DevFw.Framework.Text,ChineseSpell,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Text\ChineseSpell.cs,GetSpellWord,The following statement contains a magic number: switch ((int) local[i])                      {                          case 163: // 全角 ASCII                          {                              tmp = ((char) (local[i + 1] - 128)).ToString();                                if (((options & SpellOptions.EnableUnicodeLetter) == SpellOptions.EnableUnicodeLetter)                                  && !(                                      ((tmp[0] >= 97) && (tmp[0] <= 122))                                      || ((tmp[0] >= 65) && (tmp[0] <= 90))                                      || ((tmp[0] >= 48) && (tmp[0] <= 57))                                      )                                  )                              {                                  // 控制不能输出非数字' 字母的字符                                  tmp = "";                              }                                break;                          }                            case 162: // 罗马数字                          {                              if (local[i + 1] > 160)                              {                                  tmp = _charIndex[(int) local[i + 1] - 160];                              }                              else if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                       SpellOptions.TranslateUnknowWordToInterrogation)                              {                                  // 在罗马数字区' 不能翻译的字符非罗马数字                                  tmp = "?";                              }                              else                              {                                  tmp = "";                              }                                break;                          }                            case 166: // 希腊字母                          {                              //                              // TODO:未实现                              //                              break;                          }                            default:                          {                              index = _spellCodeIndex[(int) local[i] - 129' local[i + 1] - 64] - 1;                                if (index == 0) // 无此汉字' 不能翻译的字符' GBK 保留                              {                                  //是否翻译为问号                                  if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                      SpellOptions.TranslateUnknowWordToInterrogation)                                  {                                      tmp = "?";                                  }                                  else                                  {                                      tmp = "";                                  }                              }                              else if ((options & SpellOptions.FirstLetterOnly) == SpellOptions.FirstLetterOnly) //是单拼音                              {                                  tmp = _spellMusicCode[index].ToUpper().Substring(0' 1);                              }                              else                              {                                  tmp = _spellMusicCode[index].ToUpper();                              }                                break;                          }                      }
Magic Number,JR.DevFw.Framework.Text,ChineseSpell,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Text\ChineseSpell.cs,GetSpellWord,The following statement contains a magic number: switch ((int) local[i])                      {                          case 163: // 全角 ASCII                          {                              tmp = ((char) (local[i + 1] - 128)).ToString();                                if (((options & SpellOptions.EnableUnicodeLetter) == SpellOptions.EnableUnicodeLetter)                                  && !(                                      ((tmp[0] >= 97) && (tmp[0] <= 122))                                      || ((tmp[0] >= 65) && (tmp[0] <= 90))                                      || ((tmp[0] >= 48) && (tmp[0] <= 57))                                      )                                  )                              {                                  // 控制不能输出非数字' 字母的字符                                  tmp = "";                              }                                break;                          }                            case 162: // 罗马数字                          {                              if (local[i + 1] > 160)                              {                                  tmp = _charIndex[(int) local[i + 1] - 160];                              }                              else if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                       SpellOptions.TranslateUnknowWordToInterrogation)                              {                                  // 在罗马数字区' 不能翻译的字符非罗马数字                                  tmp = "?";                              }                              else                              {                                  tmp = "";                              }                                break;                          }                            case 166: // 希腊字母                          {                              //                              // TODO:未实现                              //                              break;                          }                            default:                          {                              index = _spellCodeIndex[(int) local[i] - 129' local[i + 1] - 64] - 1;                                if (index == 0) // 无此汉字' 不能翻译的字符' GBK 保留                              {                                  //是否翻译为问号                                  if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                      SpellOptions.TranslateUnknowWordToInterrogation)                                  {                                      tmp = "?";                                  }                                  else                                  {                                      tmp = "";                                  }                              }                              else if ((options & SpellOptions.FirstLetterOnly) == SpellOptions.FirstLetterOnly) //是单拼音                              {                                  tmp = _spellMusicCode[index].ToUpper().Substring(0' 1);                              }                              else                              {                                  tmp = _spellMusicCode[index].ToUpper();                              }                                break;                          }                      }
Magic Number,JR.DevFw.Framework.Text,ChineseSpell,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Text\ChineseSpell.cs,GetSpellWord,The following statement contains a magic number: switch ((int) local[i])                      {                          case 163: // 全角 ASCII                          {                              tmp = ((char) (local[i + 1] - 128)).ToString();                                if (((options & SpellOptions.EnableUnicodeLetter) == SpellOptions.EnableUnicodeLetter)                                  && !(                                      ((tmp[0] >= 97) && (tmp[0] <= 122))                                      || ((tmp[0] >= 65) && (tmp[0] <= 90))                                      || ((tmp[0] >= 48) && (tmp[0] <= 57))                                      )                                  )                              {                                  // 控制不能输出非数字' 字母的字符                                  tmp = "";                              }                                break;                          }                            case 162: // 罗马数字                          {                              if (local[i + 1] > 160)                              {                                  tmp = _charIndex[(int) local[i + 1] - 160];                              }                              else if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                       SpellOptions.TranslateUnknowWordToInterrogation)                              {                                  // 在罗马数字区' 不能翻译的字符非罗马数字                                  tmp = "?";                              }                              else                              {                                  tmp = "";                              }                                break;                          }                            case 166: // 希腊字母                          {                              //                              // TODO:未实现                              //                              break;                          }                            default:                          {                              index = _spellCodeIndex[(int) local[i] - 129' local[i + 1] - 64] - 1;                                if (index == 0) // 无此汉字' 不能翻译的字符' GBK 保留                              {                                  //是否翻译为问号                                  if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                      SpellOptions.TranslateUnknowWordToInterrogation)                                  {                                      tmp = "?";                                  }                                  else                                  {                                      tmp = "";                                  }                              }                              else if ((options & SpellOptions.FirstLetterOnly) == SpellOptions.FirstLetterOnly) //是单拼音                              {                                  tmp = _spellMusicCode[index].ToUpper().Substring(0' 1);                              }                              else                              {                                  tmp = _spellMusicCode[index].ToUpper();                              }                                break;                          }                      }
Magic Number,JR.DevFw.Framework.Text,ChineseSpell,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Text\ChineseSpell.cs,GetSpellWord,The following statement contains a magic number: switch ((int) local[i])                      {                          case 163: // 全角 ASCII                          {                              tmp = ((char) (local[i + 1] - 128)).ToString();                                if (((options & SpellOptions.EnableUnicodeLetter) == SpellOptions.EnableUnicodeLetter)                                  && !(                                      ((tmp[0] >= 97) && (tmp[0] <= 122))                                      || ((tmp[0] >= 65) && (tmp[0] <= 90))                                      || ((tmp[0] >= 48) && (tmp[0] <= 57))                                      )                                  )                              {                                  // 控制不能输出非数字' 字母的字符                                  tmp = "";                              }                                break;                          }                            case 162: // 罗马数字                          {                              if (local[i + 1] > 160)                              {                                  tmp = _charIndex[(int) local[i + 1] - 160];                              }                              else if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                       SpellOptions.TranslateUnknowWordToInterrogation)                              {                                  // 在罗马数字区' 不能翻译的字符非罗马数字                                  tmp = "?";                              }                              else                              {                                  tmp = "";                              }                                break;                          }                            case 166: // 希腊字母                          {                              //                              // TODO:未实现                              //                              break;                          }                            default:                          {                              index = _spellCodeIndex[(int) local[i] - 129' local[i + 1] - 64] - 1;                                if (index == 0) // 无此汉字' 不能翻译的字符' GBK 保留                              {                                  //是否翻译为问号                                  if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                      SpellOptions.TranslateUnknowWordToInterrogation)                                  {                                      tmp = "?";                                  }                                  else                                  {                                      tmp = "";                                  }                              }                              else if ((options & SpellOptions.FirstLetterOnly) == SpellOptions.FirstLetterOnly) //是单拼音                              {                                  tmp = _spellMusicCode[index].ToUpper().Substring(0' 1);                              }                              else                              {                                  tmp = _spellMusicCode[index].ToUpper();                              }                                break;                          }                      }
Magic Number,JR.DevFw.Framework.Text,ChineseSpell,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Text\ChineseSpell.cs,GetSpellWord,The following statement contains a magic number: switch ((int) local[i])                      {                          case 163: // 全角 ASCII                          {                              tmp = ((char) (local[i + 1] - 128)).ToString();                                if (((options & SpellOptions.EnableUnicodeLetter) == SpellOptions.EnableUnicodeLetter)                                  && !(                                      ((tmp[0] >= 97) && (tmp[0] <= 122))                                      || ((tmp[0] >= 65) && (tmp[0] <= 90))                                      || ((tmp[0] >= 48) && (tmp[0] <= 57))                                      )                                  )                              {                                  // 控制不能输出非数字' 字母的字符                                  tmp = "";                              }                                break;                          }                            case 162: // 罗马数字                          {                              if (local[i + 1] > 160)                              {                                  tmp = _charIndex[(int) local[i + 1] - 160];                              }                              else if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                       SpellOptions.TranslateUnknowWordToInterrogation)                              {                                  // 在罗马数字区' 不能翻译的字符非罗马数字                                  tmp = "?";                              }                              else                              {                                  tmp = "";                              }                                break;                          }                            case 166: // 希腊字母                          {                              //                              // TODO:未实现                              //                              break;                          }                            default:                          {                              index = _spellCodeIndex[(int) local[i] - 129' local[i + 1] - 64] - 1;                                if (index == 0) // 无此汉字' 不能翻译的字符' GBK 保留                              {                                  //是否翻译为问号                                  if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                      SpellOptions.TranslateUnknowWordToInterrogation)                                  {                                      tmp = "?";                                  }                                  else                                  {                                      tmp = "";                                  }                              }                              else if ((options & SpellOptions.FirstLetterOnly) == SpellOptions.FirstLetterOnly) //是单拼音                              {                                  tmp = _spellMusicCode[index].ToUpper().Substring(0' 1);                              }                              else                              {                                  tmp = _spellMusicCode[index].ToUpper();                              }                                break;                          }                      }
Magic Number,JR.DevFw.Framework.Text,ChineseSpell,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Text\ChineseSpell.cs,GetSpellWord,The following statement contains a magic number: switch ((int) local[i])                      {                          case 163: // 全角 ASCII                          {                              tmp = ((char) (local[i + 1] - 128)).ToString();                                if (((options & SpellOptions.EnableUnicodeLetter) == SpellOptions.EnableUnicodeLetter)                                  && !(                                      ((tmp[0] >= 97) && (tmp[0] <= 122))                                      || ((tmp[0] >= 65) && (tmp[0] <= 90))                                      || ((tmp[0] >= 48) && (tmp[0] <= 57))                                      )                                  )                              {                                  // 控制不能输出非数字' 字母的字符                                  tmp = "";                              }                                break;                          }                            case 162: // 罗马数字                          {                              if (local[i + 1] > 160)                              {                                  tmp = _charIndex[(int) local[i + 1] - 160];                              }                              else if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                       SpellOptions.TranslateUnknowWordToInterrogation)                              {                                  // 在罗马数字区' 不能翻译的字符非罗马数字                                  tmp = "?";                              }                              else                              {                                  tmp = "";                              }                                break;                          }                            case 166: // 希腊字母                          {                              //                              // TODO:未实现                              //                              break;                          }                            default:                          {                              index = _spellCodeIndex[(int) local[i] - 129' local[i + 1] - 64] - 1;                                if (index == 0) // 无此汉字' 不能翻译的字符' GBK 保留                              {                                  //是否翻译为问号                                  if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                      SpellOptions.TranslateUnknowWordToInterrogation)                                  {                                      tmp = "?";                                  }                                  else                                  {                                      tmp = "";                                  }                              }                              else if ((options & SpellOptions.FirstLetterOnly) == SpellOptions.FirstLetterOnly) //是单拼音                              {                                  tmp = _spellMusicCode[index].ToUpper().Substring(0' 1);                              }                              else                              {                                  tmp = _spellMusicCode[index].ToUpper();                              }                                break;                          }                      }
Magic Number,JR.DevFw.Framework.Text,ChineseSpell,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Text\ChineseSpell.cs,GetSpellWord,The following statement contains a magic number: switch ((int) local[i])                      {                          case 163: // 全角 ASCII                          {                              tmp = ((char) (local[i + 1] - 128)).ToString();                                if (((options & SpellOptions.EnableUnicodeLetter) == SpellOptions.EnableUnicodeLetter)                                  && !(                                      ((tmp[0] >= 97) && (tmp[0] <= 122))                                      || ((tmp[0] >= 65) && (tmp[0] <= 90))                                      || ((tmp[0] >= 48) && (tmp[0] <= 57))                                      )                                  )                              {                                  // 控制不能输出非数字' 字母的字符                                  tmp = "";                              }                                break;                          }                            case 162: // 罗马数字                          {                              if (local[i + 1] > 160)                              {                                  tmp = _charIndex[(int) local[i + 1] - 160];                              }                              else if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                       SpellOptions.TranslateUnknowWordToInterrogation)                              {                                  // 在罗马数字区' 不能翻译的字符非罗马数字                                  tmp = "?";                              }                              else                              {                                  tmp = "";                              }                                break;                          }                            case 166: // 希腊字母                          {                              //                              // TODO:未实现                              //                              break;                          }                            default:                          {                              index = _spellCodeIndex[(int) local[i] - 129' local[i + 1] - 64] - 1;                                if (index == 0) // 无此汉字' 不能翻译的字符' GBK 保留                              {                                  //是否翻译为问号                                  if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                      SpellOptions.TranslateUnknowWordToInterrogation)                                  {                                      tmp = "?";                                  }                                  else                                  {                                      tmp = "";                                  }                              }                              else if ((options & SpellOptions.FirstLetterOnly) == SpellOptions.FirstLetterOnly) //是单拼音                              {                                  tmp = _spellMusicCode[index].ToUpper().Substring(0' 1);                              }                              else                              {                                  tmp = _spellMusicCode[index].ToUpper();                              }                                break;                          }                      }
Magic Number,JR.DevFw.Framework.Text,ChineseSpell,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Text\ChineseSpell.cs,GetSpellWord,The following statement contains a magic number: switch ((int) local[i])                      {                          case 163: // 全角 ASCII                          {                              tmp = ((char) (local[i + 1] - 128)).ToString();                                if (((options & SpellOptions.EnableUnicodeLetter) == SpellOptions.EnableUnicodeLetter)                                  && !(                                      ((tmp[0] >= 97) && (tmp[0] <= 122))                                      || ((tmp[0] >= 65) && (tmp[0] <= 90))                                      || ((tmp[0] >= 48) && (tmp[0] <= 57))                                      )                                  )                              {                                  // 控制不能输出非数字' 字母的字符                                  tmp = "";                              }                                break;                          }                            case 162: // 罗马数字                          {                              if (local[i + 1] > 160)                              {                                  tmp = _charIndex[(int) local[i + 1] - 160];                              }                              else if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                       SpellOptions.TranslateUnknowWordToInterrogation)                              {                                  // 在罗马数字区' 不能翻译的字符非罗马数字                                  tmp = "?";                              }                              else                              {                                  tmp = "";                              }                                break;                          }                            case 166: // 希腊字母                          {                              //                              // TODO:未实现                              //                              break;                          }                            default:                          {                              index = _spellCodeIndex[(int) local[i] - 129' local[i + 1] - 64] - 1;                                if (index == 0) // 无此汉字' 不能翻译的字符' GBK 保留                              {                                  //是否翻译为问号                                  if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                      SpellOptions.TranslateUnknowWordToInterrogation)                                  {                                      tmp = "?";                                  }                                  else                                  {                                      tmp = "";                                  }                              }                              else if ((options & SpellOptions.FirstLetterOnly) == SpellOptions.FirstLetterOnly) //是单拼音                              {                                  tmp = _spellMusicCode[index].ToUpper().Substring(0' 1);                              }                              else                              {                                  tmp = _spellMusicCode[index].ToUpper();                              }                                break;                          }                      }
Magic Number,JR.DevFw.Framework.Text,ChineseSpell,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Text\ChineseSpell.cs,GetSpellWord,The following statement contains a magic number: switch ((int) local[i])                      {                          case 163: // 全角 ASCII                          {                              tmp = ((char) (local[i + 1] - 128)).ToString();                                if (((options & SpellOptions.EnableUnicodeLetter) == SpellOptions.EnableUnicodeLetter)                                  && !(                                      ((tmp[0] >= 97) && (tmp[0] <= 122))                                      || ((tmp[0] >= 65) && (tmp[0] <= 90))                                      || ((tmp[0] >= 48) && (tmp[0] <= 57))                                      )                                  )                              {                                  // 控制不能输出非数字' 字母的字符                                  tmp = "";                              }                                break;                          }                            case 162: // 罗马数字                          {                              if (local[i + 1] > 160)                              {                                  tmp = _charIndex[(int) local[i + 1] - 160];                              }                              else if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                       SpellOptions.TranslateUnknowWordToInterrogation)                              {                                  // 在罗马数字区' 不能翻译的字符非罗马数字                                  tmp = "?";                              }                              else                              {                                  tmp = "";                              }                                break;                          }                            case 166: // 希腊字母                          {                              //                              // TODO:未实现                              //                              break;                          }                            default:                          {                              index = _spellCodeIndex[(int) local[i] - 129' local[i + 1] - 64] - 1;                                if (index == 0) // 无此汉字' 不能翻译的字符' GBK 保留                              {                                  //是否翻译为问号                                  if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                      SpellOptions.TranslateUnknowWordToInterrogation)                                  {                                      tmp = "?";                                  }                                  else                                  {                                      tmp = "";                                  }                              }                              else if ((options & SpellOptions.FirstLetterOnly) == SpellOptions.FirstLetterOnly) //是单拼音                              {                                  tmp = _spellMusicCode[index].ToUpper().Substring(0' 1);                              }                              else                              {                                  tmp = _spellMusicCode[index].ToUpper();                              }                                break;                          }                      }
Magic Number,JR.DevFw.Framework.Text,ChineseSpell,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Text\ChineseSpell.cs,GetSpellWord,The following statement contains a magic number: switch ((int) local[i])                      {                          case 163: // 全角 ASCII                          {                              tmp = ((char) (local[i + 1] - 128)).ToString();                                if (((options & SpellOptions.EnableUnicodeLetter) == SpellOptions.EnableUnicodeLetter)                                  && !(                                      ((tmp[0] >= 97) && (tmp[0] <= 122))                                      || ((tmp[0] >= 65) && (tmp[0] <= 90))                                      || ((tmp[0] >= 48) && (tmp[0] <= 57))                                      )                                  )                              {                                  // 控制不能输出非数字' 字母的字符                                  tmp = "";                              }                                break;                          }                            case 162: // 罗马数字                          {                              if (local[i + 1] > 160)                              {                                  tmp = _charIndex[(int) local[i + 1] - 160];                              }                              else if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                       SpellOptions.TranslateUnknowWordToInterrogation)                              {                                  // 在罗马数字区' 不能翻译的字符非罗马数字                                  tmp = "?";                              }                              else                              {                                  tmp = "";                              }                                break;                          }                            case 166: // 希腊字母                          {                              //                              // TODO:未实现                              //                              break;                          }                            default:                          {                              index = _spellCodeIndex[(int) local[i] - 129' local[i + 1] - 64] - 1;                                if (index == 0) // 无此汉字' 不能翻译的字符' GBK 保留                              {                                  //是否翻译为问号                                  if ((options & SpellOptions.TranslateUnknowWordToInterrogation) ==                                      SpellOptions.TranslateUnknowWordToInterrogation)                                  {                                      tmp = "?";                                  }                                  else                                  {                                      tmp = "";                                  }                              }                              else if ((options & SpellOptions.FirstLetterOnly) == SpellOptions.FirstLetterOnly) //是单拼音                              {                                  tmp = _spellMusicCode[index].ToUpper().Substring(0' 1);                              }                              else                              {                                  tmp = _spellMusicCode[index].ToUpper();                              }                                break;                          }                      }
Magic Number,JR.DevFw.Framework.Text,ChineseSpell,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Text\ChineseSpell.cs,GetSpellWord,The following statement contains a magic number: i += 2;
Magic Number,JR.DevFw.Framework.Text,ChineseSpell,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Text\ChineseSpell.cs,GetSpellWord,The following statement contains a magic number: (local[i] >= 129)                      && (local[i + 1] >= 64)
Magic Number,JR.DevFw.Framework.Text,ChineseSpell,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Text\ChineseSpell.cs,GetSpellWord,The following statement contains a magic number: (local[i] >= 129)                      && (local[i + 1] >= 64)
Magic Number,JR.DevFw.Framework.Web.Cache,CacheUtil,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\Cache\CacheUtil.cs,CheckClientCacheExpires,The following statement contains a magic number: response.StatusCode = 304;
Magic Number,JR.DevFw.Framework.Web.Cache,CacheUtil,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\Cache\CacheUtil.cs,CheckClientCacheExpires,The following statement contains a magic number: response.StatusCode = 304;
Magic Number,JR.DevFw.Framework.Web.Cache,CacheUtil,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\Cache\CacheUtil.cs,Output,The following statement contains a magic number: response.StatusCode = 304;
Magic Number,JR.DevFw.Framework.Web.Cache,CacheUtil,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\Cache\CacheUtil.cs,Output,The following statement contains a magic number: response.StatusCode = 304;
Magic Number,JR.DevFw.Framework.Web.UI,VerifyCodeGenerator,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\VerifyCode.cs,VerifyCodeGenerator,The following statement contains a magic number: i < 10
Magic Number,JR.DevFw.Framework.Web.UI,VerifyCodeGenerator,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\VerifyCode.cs,VerifyCodeGenerator,The following statement contains a magic number: wordArray[36 + i] = _ul_s + i;
Magic Number,JR.DevFw.Framework.Web.UI,VerifyCodeGenerator,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\VerifyCode.cs,VerifyCodeGenerator,The following statement contains a magic number: wordArray[10 + i] = _ll_s + i;
Magic Number,JR.DevFw.Framework.Web.UI,VerifyCodeGenerator,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\VerifyCode.cs,VerifyCodeGenerator,The following statement contains a magic number: i < 26
Magic Number,JR.DevFw.Framework.Web.UI,VerifyCodeGenerator,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\VerifyCode.cs,GetDefaultFont,The following statement contains a magic number: return new Font(GetFontFamily()' 14' FontStyle.Regular' GraphicsUnit.Pixel);
Magic Number,JR.DevFw.Framework.Web.UI,VerifyCodeGenerator,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\VerifyCode.cs,GraphicDrawImage,The following statement contains a magic number: return GraphicDrawImage(number' opt' simpleMode' GetDefaultFont()' 22' out words);
Magic Number,JR.DevFw.Framework.Web.UI,VerifyCodeGenerator,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\VerifyCode.cs,DrawingImage,The following statement contains a magic number: const int _offset = 5;
Magic Number,JR.DevFw.Framework.Web.UI,VerifyCodeGenerator,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\VerifyCode.cs,DrawingImage,The following statement contains a magic number: g.DrawLine(new Pen(Color.FromArgb(200' 200' 200))' x1' y1' x2' y2);
Magic Number,JR.DevFw.Framework.Web.UI,VerifyCodeGenerator,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\VerifyCode.cs,DrawingImage,The following statement contains a magic number: g.DrawLine(new Pen(Color.FromArgb(200' 200' 200))' x1' y1' x2' y2);
Magic Number,JR.DevFw.Framework.Web.UI,VerifyCodeGenerator,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\VerifyCode.cs,DrawingImage,The following statement contains a magic number: g.DrawLine(new Pen(Color.FromArgb(200' 200' 200))' x1' y1' x2' y2);
Magic Number,JR.DevFw.Framework.Web.UI,VerifyCodeGenerator,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\VerifyCode.cs,DrawingImage,The following statement contains a magic number: i < 25
Magic Number,JR.DevFw.Framework.Web.UI,VerifyCodeGenerator,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\VerifyCode.cs,DrawingImage,The following statement contains a magic number: g.DrawString(((char) charNumberArray[i]).ToString()' font' brushs[rd.Next(brushs.Length)]'                      new PointF(_offset + i*(_fontSize - 1)' (_height - _fontSize)/2));
Magic Number,JR.DevFw.Framework.Web.UI,VerifyCodeGenerator,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\VerifyCode.cs,DrawingImage,The following statement contains a magic number: img = TwistImage(img' true' 2' 1);
Magic Number,JR.DevFw.Framework.Web.UI,VerifyCodeGenerator,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\VerifyCode.cs,DrawingImage,The following statement contains a magic number: img.SetPixel(x' y' Color.FromArgb(235' 235' 235));
Magic Number,JR.DevFw.Framework.Web.UI,VerifyCodeGenerator,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\VerifyCode.cs,DrawingImage,The following statement contains a magic number: img.SetPixel(x' y' Color.FromArgb(235' 235' 235));
Magic Number,JR.DevFw.Framework.Web.UI,VerifyCodeGenerator,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\VerifyCode.cs,DrawingImage,The following statement contains a magic number: img.SetPixel(x' y' Color.FromArgb(235' 235' 235));
Magic Number,JR.DevFw.Framework.Web.UI,VerifyCodeGenerator,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\VerifyCode.cs,DrawingImage,The following statement contains a magic number: i < 100
Magic Number,JR.DevFw.Framework.Web.UI,VerifyCodeGenerator,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\VerifyCode.cs,TwistImage,The following statement contains a magic number: const double PI2 = 6.283185307179586476925286766559;
Magic Number,JR.DevFw.Framework.Web.UI,FileUpload,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\FileUpload.cs,SaveStream,The following statement contains a magic number: const int bufferSize = 100;
Magic Number,JR.DevFw.Framework.Web.unused,ExceptionProcess,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\unused\ExceptionProcess.cs,TraceError,The following statement contains a magic number: StringBuilder sb = new StringBuilder(3000);
Magic Number,JR.DevFw.Framework.Web.unused,ExceptionProcess,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\unused\ExceptionProcess.cs,TraceError,The following statement contains a magic number: sb.Append("[Error] Hapend at ").Append(String.Format("{0:yyyy:MM:dd HH:mm:ss}"' DateTime.Now))                  .Append("\tip:").Append(context.Request.UserHostAddress).Append(" \tpath:")                  .Append(context.Request.Url.PathAndQuery).Append("\r\n").Append('-'' 100).Append("\r\n")                  .Append("[message]:").Append(e.Message).Append(" [type]:").Append(e.GetType().ToString())                  .Append("\r\n").Append("[stack]:").Append(e.StackTrace).Append("\r\n");
Magic Number,JR.DevFw.Framework.Web.unused,ExceptionProcess,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\unused\ExceptionProcess.cs,PostError,The following statement contains a magic number: StringBuilder sb = new StringBuilder(3000);
Magic Number,JR.DevFw.Framework.Web.unused,ExceptionProcess,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\unused\ExceptionProcess.cs,PostError,The following statement contains a magic number: sb.Append("[Error] Hapend at ").Append(String.Format("{0:yyyy:MM:dd HH:mm:ss}"' DateTime.Now))                  .Append("\tip:").Append(ip).Append(" \tpath:")                  .Append(errorUri).Append("\r\n").Append('-'' 100).Append("\r\n")                  .Append("[message]:").Append(msg).Append(" [type]:").Append(type)                  .Append("\r\n").Append("[stack]:").Append(trace).Append("\r\n");
Magic Number,JR.DevFw.Framework.Web.unused.Handler,ExecuteHandler,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\unused\Handler\ExecuteHandler.cs,ProcessRequest,The following statement contains a magic number: returnObj = method.GetParameters().Length != 0 && args.Length > 2                      ? method.Invoke(obj' task.Substring(args[0].Length + args[1].Length + 2).Split('''))                      : method.Invoke(obj' null);
Magic Number,JR.DevFw.Framework.Web.unused.Handler,ExecuteHandler,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\unused\Handler\ExecuteHandler.cs,ProcessRequest,The following statement contains a magic number: returnObj = method.GetParameters().Length != 0 && args.Length > 2                      ? method.Invoke(obj' task.Substring(args[0].Length + args[1].Length + 2).Split('''))                      : method.Invoke(obj' null);
Magic Number,JR.DevFw.Framework.Web.unused.Handler,ExecuteHandler,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\unused\Handler\ExecuteHandler.cs,ProcessRequest,The following statement contains a magic number: args.Length >= 2
Missing Default,JR.DevFw.Framework.Security,CryptoUtils,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Security\CryptoUtils.cs,GetAlgorithm,The following switch statement is missing a default case: switch (algorithm.ToLower())                  {                      case "sha1": return SHA1.Create();                      case "md5": return System.Security.Cryptography.MD5.Create();                  }
Missing Default,JR.DevFw,ReflectTemplateClass,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\MicroTemplateEngine.cs,ReflectTemplateClass,The following switch statement is missing a default case: switch (name)                  {                      case "ToString":                      case "Execute":                      case "UpdateEngine":                      case "GetEngine":                      case "SetBinderFlag":                      case "Equals":                      case "Finalize":                      case "GetHashCode":                      case "GetType":                      case "MemberwiseClone":                          continue;                  }
Missing Default,JR.DevFw.Framework.Web.UI,VerifyCodeGenerator,D:\research\architectureSmells\repos\atnet_devfw\src\core\J6.DevFw.Core\Framework\Web\UI\VerifyCode.cs,GraphicDrawImage,The following switch statement is missing a default case: switch (opt)              {                  //纯数字                  case VerifyWordOptions.Number:                        test = (i' array) =>                      {                          if (i == 0) return false;                          else if (i < _n_s || i > _n_e) return false;                          else if (!AllowRepeat && Array.Exists(array' a => a == i)) return false;                          return true;                      };                        for (int i = 0; i < number; i++)                      {                          while (verifyWords[i] == 0)                          {                              _tempInt = wordArray[rd.Next(wordLength)];                              if (test(_tempInt' verifyWords))                              {                                  verifyWords[i] = _tempInt;                              }                          }                      }                        break;                      //纯字母                  case VerifyWordOptions.Letter:                        test = (i' array) =>                      {                          if (i == 0) return false;                          else if (i < _ul_s || i > _ll_e || (i > _ul_e && i < _ll_s)) return false;                          else if (!AllowRepeat && Array.Exists(array' a => a == i)) return false;                          return true;                      };                        for (int i = 0; i < number; i++)                      {                          while (verifyWords[i] == 0)                          {                              _tempInt = wordArray[rd.Next(wordLength)];                              if (test(_tempInt' verifyWords))                              {                                  verifyWords[i] = _tempInt;                              }                          }                      }                        break;                      //字母和数字                  case VerifyWordOptions.LetterAndNumber:                        test = (i' array) =>                      {                          if (i == 0) return false;                          else if (!Array.Exists(wordArray' a => a == i)) return false;                          else if (!AllowRepeat && Array.Exists(array' a => a == i)) return false;                          return true;                      };                        for (int i = 0; i < number; i++)                      {                          while (verifyWords[i] == 0)                          {                              _tempInt = wordArray[rd.Next(wordLength)];                              if (test(_tempInt' verifyWords))                              {                                  verifyWords[i] = _tempInt;                              }                          }                      }                        break;              }
