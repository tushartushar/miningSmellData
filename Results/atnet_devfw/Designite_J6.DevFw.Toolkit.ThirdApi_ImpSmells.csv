Implementation smell,Namespace,Class,File,Method,Description
Long Method,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,GetPayRequest,The method has 110 lines of code.
Long Method,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The method has 129 lines of code.
Complex Method,J6.DevFw.Toolkit.ThirdApi.Discuz,Authcode,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Authcode.cs,CutString,Cyclomatic complexity of the method is 8
Complex Method,J6.DevFw.Toolkit.ThirdApi.Discuz,Request,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Request.cs,CallUCenterAPI,Cyclomatic complexity of the method is 26
Complex Method,J6.DevFw.Toolkit.ThirdApi.Discuz,UCenterClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,GetEditResultDesc,Cyclomatic complexity of the method is 8
Complex Method,J6.DevFw.Toolkit.ThirdApi.ETao,Core,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\ETao\Core.cs,Generate,Cyclomatic complexity of the method is 9
Complex Method,J6.DevFw.Toolkit.ThirdApi.ETao,MultiThreadProcess,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\ETao\MultiThreadProcess.cs,Start,Cyclomatic complexity of the method is 9
Complex Method,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,Notify,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\AlipayNotify.cs,GetSignVeryfy,Cyclomatic complexity of the method is 13
Complex Method,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,Submit,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\AlipaySubmit.cs,BuildRequestMysign,Cyclomatic complexity of the method is 12
Complex Method,J6.DevFw.Toolkit.ThirdApi.NetPay,Bank,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Bank.cs,ReadBankImage,Cyclomatic complexity of the method is 43
Complex Method,J6.DevFw.Toolkit.ThirdApi.NetPay,PaymentHandler,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\PaymentHandler.cs,SubmitRequest,Cyclomatic complexity of the method is 19
Complex Method,J6.DevFw.Toolkit.ThirdApi.NetPay,PayUtil,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\PayUtil.cs,GetGatewayStr,Cyclomatic complexity of the method is 8
Complex Method,J6.DevFw.Toolkit.ThirdApi.NetPay,PayUtil,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\PayUtil.cs,PayReturn,Cyclomatic complexity of the method is 8
Complex Method,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,Cyclomatic complexity of the method is 27
Long Parameter List,J6.DevFw.Toolkit.ThirdApi.Discuz,IUCenter,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,Login,The method has 7 parameters.
Long Parameter List,J6.DevFw.Toolkit.ThirdApi.Discuz,IUCenter,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,Register,The method has 6 parameters.
Long Parameter List,J6.DevFw.Toolkit.ThirdApi.Discuz,IUCenter,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,Edit,The method has 5 parameters.
Long Parameter List,J6.DevFw.Toolkit.ThirdApi.Discuz,IUCenterAPI,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,Edit,The method has 5 parameters.
Long Parameter List,J6.DevFw.Toolkit.ThirdApi.Discuz,UCenterClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,Login,The method has 7 parameters.
Long Parameter List,J6.DevFw.Toolkit.ThirdApi.Discuz,UCenterClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,Register,The method has 6 parameters.
Long Parameter List,J6.DevFw.Toolkit.ThirdApi.Discuz,UCenterClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,Edit,The method has 5 parameters.
Long Parameter List,J6.DevFw.Toolkit.ThirdApi.Discuz,UCenterApi,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,Edit,The method has 5 parameters.
Long Parameter List,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.Core,Submit,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\Core\AlipaySubmit.cs,BuildRequest,The method has 6 parameters.
Long Parameter List,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,Submit,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\AlipaySubmit.cs,BuildRequest,The method has 7 parameters.
Long Parameter List,J6.DevFw.Toolkit.ThirdApi.NetPay,PaymentHandler,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\PaymentHandler.cs,SubmitRequest,The method has 19 parameters.
Long Parameter List,J6.DevFw.Toolkit.ThirdApi.NetPay.ChinaPay,ChinaPaySignData,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\ChinaPay\ChinaPaySignData.cs,check,The method has 8 parameters.
Long Statement,J6.DevFw.Toolkit.ThirdApi.Discuz,Authcode,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Authcode.cs,DiscuzAuthcode,The length of the statement  "	keyc = ckey_length > 0 ? (operation == DiscuzAuthcodeMode.Decode ? CutString (source' 0' ckey_length) : RandomString (ckey_length)) : ""; " is 137.
Long Statement,J6.DevFw.Toolkit.ThirdApi.Discuz,Authcode,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Authcode.cs,DiscuzAuthcode,The length of the statement  "		if ((timestamp == 0 || timestamp - UnixTimestamp () > 0) && CutString (result' 10' 16) == CutString (MD5 (CutString (result' 26) + keyb)' 0' 16)) { " is 147.
Long Statement,J6.DevFw.Toolkit.ThirdApi.Discuz,Authcode,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Authcode.cs,DiscuzAuthcode,The length of the statement  "		source = (expiry == 0 ? "0000000000" : (expiry + UnixTimestamp ()).ToString ()) + CutString (MD5 (source + keyb)' 0' 16) + source; " is 130.
Long Statement,J6.DevFw.Toolkit.ThirdApi.Discuz,Authcode,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Authcode.cs,AscArr2Str,The length of the statement  "	return System.Text.UnicodeEncoding.Unicode.GetString (System.Text.ASCIIEncoding.Convert (System.Text.Encoding.ASCII' System.Text.Encoding.Unicode' b)); " is 151.
Long Statement,J6.DevFw.Toolkit.ThirdApi.Discuz,Request,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Request.cs,SendRequest,The length of the statement  "	sb.Append ("m=").Append (module).Append ("&a=").Append (action).Append ("&inajax=2&appid=").Append (UC_APPID).Append ("&input=").Append (input); " is 144.
Long Statement,J6.DevFw.Toolkit.ThirdApi.Discuz,Request,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Request.cs,CallUCenterAPI,The length of the statement  "	System.Collections.Specialized.NameValueCollection parameters = HttpUtility.ParseQueryString (Authcode.DiscuzAuthcodeDecode (query' UC_KEY)); " is 141.
Long Statement,J6.DevFw.Toolkit.ThirdApi.Discuz,UCenterClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,Login,The length of the statement  "	string xmlContent = Request.SendRequest ("index.php"' "user"' "login"' String.Format ("isuid={0}&uid={1}&username={1}&password={2}&checkques={3}&questionid={4}&answer={5}"' isUid == true ? "1" : "0"' username' password' checkQues == true ? "1" : "0"' questionId' answer)).ToString (); " is 284.
Long Statement,J6.DevFw.Toolkit.ThirdApi.Discuz,UCenterClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,Register,The length of the statement  "	string resultTag = Request.SendRequest ("index.php"' "user"' "register"' String.Format ("username={0}&password={1}&email={2}&questionid={3}&answer={4}&regip={5}"' username' password' email' questionId' answer' regIp)).ToString (); " is 230.
Long Statement,J6.DevFw.Toolkit.ThirdApi.Discuz,UCenterClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,SyncLogin,The length of the statement  "	string xmlContent = Request.SendRequest ("index.php"' "user"' "login"' "isuid=0&uid=&username=" + username + "&password=" + password).ToString (); " is 146.
Long Statement,J6.DevFw.Toolkit.ThirdApi.Discuz,UCenterClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,Edit,The length of the statement  "	int.TryParse (Request.SendRequest ("index.php"' "user"' "edit"' "username=" + username + "&oldpw=" + oldpwd + "&newpw=" + newpwd + "&email=" + email + "&ignoreoldpw=" + (ignorePwd ? "1" : "0")).ToString ()' out result); " is 219.
Long Statement,J6.DevFw.Toolkit.ThirdApi.Discuz,UCenterClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,GetUser,The length of the statement  "	string xmlContent = Request.SendRequest ("index.php"' "user"' "get_user"' String.Format ("isuid={0}&username={1}"' isuid == true ? "1" : "0"' username)).ToString (); " is 165.
Long Statement,J6.DevFw.Toolkit.ThirdApi.Discuz,UCenterClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,CheckName,The length of the statement  "	int.TryParse (Request.SendRequest ("index.php"' "user"' "check_username"' "username=" + username).ToString ()' out result); " is 123.
Long Statement,J6.DevFw.Toolkit.ThirdApi.Discuz,UCenterApi,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,SyncLogin,The length of the statement  "	HttpContext.Current.Response.AppendHeader ("P3P"' "CP=\"CURa ADMa DEVa PSAo PSDo OUR BUS UNI PUR INT DEM STA PRE COM NAV OTC NOI DSP COR\""); " is 141.
Long Statement,J6.DevFw.Toolkit.ThirdApi.Discuz,UCenterApi,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,SyncLogout,The length of the statement  "	HttpContext.Current.Response.AppendHeader ("P3P"' "CP=\"CURa ADMa DEVa PSAo PSDo OUR BUS UNI PUR INT DEM STA PRE COM NAV OTC NOI DSP COR\""); " is 141.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay,AlipayComfireApi,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\AlipayComfireApi.cs,GetPayFormHtml,The length of the statement  "	string notify_url = ht.Contains ("notify_url") ? ht ["notify_url"].ToString () : PayUtil.GetNotifyUrl (PayMethods.Alipay' PayApiType.Guarantee); " is 144.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay,AlipayComfireApi,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\AlipayComfireApi.cs,GetPayFormHtml,The length of the statement  "	string return_url = ht.Contains ("return_url") ? ht ["return_url"].ToString () : PayUtil.GetReturnUrl (PayMethods.Alipay' PayApiType.Guarantee); " is 144.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay,AlipayMobile,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\AlipayMobile.cs,GetPayRequest,The length of the statement  "	////////////////////////////////////////////调用授权接口alipay.wap.trade.create.direct获取授权码token//////////////////////////////////////////// " is 134.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay,AlipayMobile,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\AlipayMobile.cs,GetPayRequest,The length of the statement  "	string notify_url = hash.Contains ("notify_url") ? hash ["notify_url"].ToString () : PayUtil.GetNotifyUrl (PayMethods.Alipay' PayApiType.Direct); " is 145.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay,AlipayMobile,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\AlipayMobile.cs,GetPayRequest,The length of the statement  "	string return_url = hash.Contains ("return_url") ? hash ["return_url"].ToString () : PayUtil.GetReturnUrl (PayMethods.Alipay' PayApiType.Direct); " is 145.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay,AlipayMobile,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\AlipayMobile.cs,GetPayRequest,The length of the statement  "	string req_dataToken = "<direct_trade_create_req><notify_url>" + notify_url + "</notify_url><call_back_url>" + return_url + "</call_back_url><seller_account_name>" + seller_email + "</seller_account_name><out_trade_no>" + out_trade_no + "</out_trade_no><subject>" + subject + "</subject><total_fee>" + total_fee + "</total_fee><merchant_url>" + merchant_url + "</merchant_url></direct_trade_create_req>"; " is 404.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay,AlipayMobile,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\AlipayMobile.cs,GetPayRequest,The length of the statement  "	////////////////////////////////////////////根据授权码token调用交易接口alipay.wap.auth.authAndExecute//////////////////////////////////////////// " is 134.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay,AlipayMobile,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\AlipayMobile.cs,Notify,The length of the statement  "             * http://localhost:8080/pay/notify_1_3.html?body=%d6%a7%b8%b6%b6%a9%b5%a5&buyer_email=newmin.net@gmail.com&buyer_id=2088302384317810&exterface=create_direct_pay_by_user&is_success=T&notify_id=RqPnCoPT3K9%2Fvwbh3I73%2FBJ%2FCypvvG4k72c8QSXT5yE44%2FMSUK0zqoTBaXxNf4BPOKZI&notify_time=2013-03-21+11:42:53&notify_type=trade_status_sync&out_trade_no=20130125033249408&payment_type=1&seller_email=chiaus_im@163.com&seller_id=2088801968591818&subject=%E6%94%AF%E4%BB%98%E8%AE%A2%E5%8D%95&total_fee=0.01&trade_no=2013032154249581&trade_status=TRADE_SUCCESS&sign=af01b9aa0bd11df2a723eb5ef52e9298&sign_type=MD5" is 599.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay,AlipayNormal,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\AlipayNormal.cs,GetPayRequest,The length of the statement  "	string notify_url = hash.Contains ("notify_url") ? hash ["notify_url"].ToString () : PayUtil.GetNotifyUrl (PayMethods.Alipay' PayApiType.Normal); " is 145.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay,AlipayNormal,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\AlipayNormal.cs,GetPayRequest,The length of the statement  "	string return_url = hash.Contains ("return_url") ? hash ["return_url"].ToString () : PayUtil.GetReturnUrl (PayMethods.Alipay' PayApiType.Normal); " is 145.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay,AlipayRedirect,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\AlipayRedirect.cs,GetPayRequest,The length of the statement  "	string notify_url = hash.Contains ("notify_url") ? hash ["notify_url"].ToString () : PayUtil.GetNotifyUrl (PayMethods.Alipay' PayApiType.Direct); " is 145.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay,AlipayRedirect,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\AlipayRedirect.cs,GetPayRequest,The length of the statement  "	string return_url = hash.Contains ("return_url") ? hash ["return_url"].ToString () : PayUtil.GetReturnUrl (PayMethods.Alipay' PayApiType.Direct); " is 145.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay,AlipayRedirect,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\AlipayRedirect.cs,Return,The length of the statement  "			if (request.QueryString ["trade_status"] == "TRADE_FINISHED" || request.QueryString ["trade_status"] == "TRADE_SUCCESS") { " is 122.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay,AlipayRedirect,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\AlipayRedirect.cs,Notify,The length of the statement  "             * http://localhost:8080/pay/notify_1_3.html?body=%d6%a7%b8%b6%b6%a9%b5%a5&buyer_email=newmin.net@gmail.com&buyer_id=2088302384317810&exterface=create_direct_pay_by_user&is_success=T&notify_id=RqPnCoPT3K9%2Fvwbh3I73%2FBJ%2FCypvvG4k72c8QSXT5yE44%2FMSUK0zqoTBaXxNf4BPOKZI&notify_time=2013-03-21+11:42:53&notify_type=trade_status_sync&out_trade_no=20130125033249408&payment_type=1&seller_email=chiaus_im@163.com&seller_id=2088801968591818&subject=%E6%94%AF%E4%BB%98%E8%AE%A2%E5%8D%95&total_fee=0.01&trade_no=2013032154249581&trade_status=TRADE_SUCCESS&sign=af01b9aa0bd11df2a723eb5ef52e9298&sign_type=MD5" is 599.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.Core,Notify,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\Core\AlipayNotify.cs,Verify,The length of the statement  "	//string sWord = "Partner:"+Config.Partner+"\r\nSecret:"+ Config.Key+"\r\n responseTxt=" + responseTxt + "\n isSign=" + isSign.ToString() + "\n 返回回来的参数：" + GetPreSignStr(inputPara) + "\n "; " is 189.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.Core,Submit,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\Core\AlipaySubmit.cs,BuildRequest,The length of the statement  "	sbHtml.Append ("<form id='alipaysubmit' name='alipaysubmit' action='" + GATEWAY_NEW + "_input_charset=" + AlipayConfig.Input_charset + "' method='" + strMethod.ToLower ().Trim () + "'>"); " is 187.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,Notify,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\AlipayNotify.cs,VerifyReturn,The length of the statement  "	// string sWord = "patern:"+Config.Partner+"\r\n key:"+Config.Key+"\r\n"+"isSign="+ isSign.ToString() + "\n 返回回来的参数：" + GetPreSignStr(inputPara) + "\n "; " is 153.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,Notify,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\AlipayNotify.cs,VerifyNotify,The length of the statement  "	//string sWord = "responseTxt=" + responseTxt + "\n isSign=" + isSign.ToString() + "\n 返回回来的参数：" + GetPreSignStr(inputPara) + "\n "; " is 132.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,Notify,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\AlipayNotify.cs,Decrypt,The length of the statement  "		inputPara ["notify_data"] = RSAFromPkcs8.decryptData (inputPara ["notify_data"]' AlipayMobileConfig.Private_key' AlipayMobileConfig.Input_charset); " is 147.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,Submit,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\AlipaySubmit.cs,BuildRequest,The length of the statement  "	sbHtml.Append ("<form id='alipaysubmit' name='alipaysubmit' action='" + GATEWAY_NEW + "_input_charset=" + AlipayMobileConfig.Input_charset + "' method='" + strMethod.ToLower ().Trim () + "'>"); " is 193.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,Submit,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\AlipaySubmit.cs,ParseResponse,The length of the statement  "			dicText ["res_data"] = RSAFromPkcs8.decryptData (dicText ["res_data"]' AlipayMobileConfig.Private_key' AlipayMobileConfig.Input_charset); " is 137.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,Submit,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\AlipaySubmit.cs,Query_timestamp,The length of the statement  "	string url = GATEWAY_NEW + "service=query_timestamp&partner=" + AlipayMobileConfig.Partner + "&_input_charset=" + AlipayMobileConfig.Input_charset; " is 147.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay,PaymentHandler,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\PaymentHandler.cs,SubmitRequest,The length of the statement  "			payHtml = String.Format ("<script>location.replace('{0}')</script>"' PayUtil.GetGatewayStr (PayMethods.Tenpay' pt' ht)); " is 120.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay,PayUtil,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\PayUtil.cs,GetNotifyUrl,The length of the statement  "	return String.Format ("http://{0}{1}/netpay/notify_{2}_{3}.html"' req.Url.Host' req.Url.Port == 80 ? "" : ":" + req.Url.Port' ((int)ap).ToString ()' ((int)at).ToString ()); " is 172.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay,PayUtil,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\PayUtil.cs,GetReturnUrl,The length of the statement  "	return String.Format ("http://{0}{1}/netpay/return_{2}_{3}.html"' req.Url.Host' req.Url.Port == 80 ? "" : ":" + req.Url.Port' ((int)ap).ToString ()' ((int)at).ToString ()); " is 172.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay,PayUtil,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\PayUtil.cs,GetGatewaySubmit,The length of the statement  "		sb.Append ("<input type='hidden' name='").Append (key).Append ("' value='").Append ((dict [key] ?? "").Replace ("'"' "\\'")).Append ("'/>"); " is 140.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.ChinaPay,ChinaPayApi,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\ChinaPay\ChinaPayApi.cs,GetPayRequest,The length of the statement  "	//test url   //http://localhost:8080/pay/notify_3_1.html?merid=808080201301103&orderno=2013052309145966&transdate=20130523&amount=000000000001&currencycode=156&transtype=0001&status=1001&checkvalue=872E476C3C0B471CF6C408F2B311E8A89FB78D5166676B60FB06F45797F24FFAD092FDE5CE85BA084CCDEFF4097D31DA68DDCCB5A59B719E0EB1718EB2CC77FA72F0F0039AE03684CC59EE6204A2EC104B792F33321D4EC66D7A90F9C3BD7531A50FA47199FE084D4715DEC312117C8E62A673947B293472BD8B5685C67106B8&GateId=8607&Priv1=beizhu " is 479.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.ChinaPay,ChinaPayApi,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\ChinaPay\ChinaPayApi.cs,GetPayRequest,The length of the statement  "	return gatewayHTML.Template (MerId' "20070129"' OrdId' TransAmt' CuryId' TransDate' TransType' PayUtil.GetNotifyUrl (PayMethods.ChinaPay' PayApiType.Normal)' PayUtil.GetReturnUrl (PayMethods.ChinaPay' PayApiType.Normal)' ""' //网关留空'为银联支付 " is 237.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay.Code,ResponseHandler,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Code\ResponseHandler.cs,doShow,The length of the statement  "	string strHtml = "<html><head>\r\n" + "<meta name=\"TENCENT_ONLINE_PAYMENT\" content=\"China TENCENT\">\r\n" + "<script language=\"javascript\">\r\n" + "window.location.href='" + show_url + "';\r\n" + "</script>\r\n" + "</head><body></body></html>"; " is 249.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay.Code,TenpayHttpClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Code\TenpayHttpClient.cs,call,The length of the statement  "		ServicePointManager.ServerCertificateValidationCallback = new System.Net.Security.RemoteCertificateValidationCallback (CheckValidationResult); " is 142.
Long Statement,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The length of the statement  "			if (queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1") { " is 170.
Complex Conditional,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.Core,Core,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\Core\AlipayCore.cs,FilterPara,The conditional expression  "temp.Key.ToLower () != "sign" && temp.Key.ToLower () != "sign_type" && temp.Value != "" && temp.Value != null"  is complex.
Complex Conditional,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,Core,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\AlipayCore.cs,FilterPara,The conditional expression  "temp.Key.ToLower () != "sign" && temp.Key.ToLower () != "sign_type" && temp.Value != "" && temp.Value != null"  is complex.
Complex Conditional,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay.Code,ClientResponseHandler,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Code\ClientResponseHandler.cs,isTenpaySign,The conditional expression  "null != v && "".CompareTo (v) != 0 && "sign".CompareTo (k) != 0 && "key".CompareTo (k) != 0"  is complex.
Complex Conditional,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay.Code,ClientResponseHandler,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Code\ClientResponseHandler.cs,_isTenpaySign,The conditional expression  "null != v && "".CompareTo (v) != 0 && "sign".CompareTo (k) != 0 && "key".CompareTo (k) != 0"  is complex.
Complex Conditional,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay.Code,RequestHandler,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Code\RequestHandler.cs,createSign,The conditional expression  "null != v && "".CompareTo (v) != 0 && "sign".CompareTo (k) != 0 && "key".CompareTo (k) != 0"  is complex.
Complex Conditional,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay.Code,ResponseHandler,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Code\ResponseHandler.cs,isTenpaySign,The conditional expression  "null != v && "".CompareTo (v) != 0 && "sign".CompareTo (k) != 0 && "key".CompareTo (k) != 0"  is complex.
Complex Conditional,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay.Code,ResponseHandler,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Code\ResponseHandler.cs,_isTenpaySign,The conditional expression  "null != v && "".CompareTo (v) != 0 && "sign".CompareTo (k) != 0 && "key".CompareTo (k) != 0"  is complex.
Complex Conditional,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The conditional expression  "queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1""  is complex.
Empty Catch Block,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,Notify,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\AlipayNotify.cs,Decrypt,The method has an empty catch block.
Empty Catch Block,J6.DevFw.Toolkit.ThirdApi.NetPay,PaymentHandler,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\PaymentHandler.cs,SubmitRequest,The method has an empty catch block.
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,Authcode,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Authcode.cs,MD5,The following statement contains a magic number: for (int i = 0; i < b.Length; i++) {  	ret += b [i].ToString ("x").PadLeft (2' '0');  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,Authcode,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Authcode.cs,MD5,The following statement contains a magic number: ret += b [i].ToString ("x").PadLeft (2' '0');  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,Authcode,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Authcode.cs,DiscuzAuthcode,The following statement contains a magic number: keya = MD5 (CutString (key' 0' 16));  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,Authcode,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Authcode.cs,DiscuzAuthcode,The following statement contains a magic number: keyb = MD5 (CutString (key' 16' 16));  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,Authcode,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Authcode.cs,DiscuzAuthcode,The following statement contains a magic number: keyb = MD5 (CutString (key' 16' 16));  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,Authcode,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Authcode.cs,DiscuzAuthcode,The following statement contains a magic number: if (operation == DiscuzAuthcodeMode.Decode) {  	byte[] temp;  	try {  		temp = System.Convert.FromBase64String (CutString (source' ckey_length));  	} catch {  		try {  			temp = System.Convert.FromBase64String (CutString (source + "="' ckey_length));  		} catch {  			try {  				temp = System.Convert.FromBase64String (CutString (source + "=="' ckey_length));  			} catch {  				return "";  			}  		}  	}  	result = encoding.GetString (RC4 (temp' cryptkey));  	//throw new Exception(CutString(result' 0' 10));  	long timestamp = long.Parse (CutString (result' 0' 10));  	if ((timestamp == 0 || timestamp - UnixTimestamp () > 0) && CutString (result' 10' 16) == CutString (MD5 (CutString (result' 26) + keyb)' 0' 16)) {  		return CutString (result' 26);  	} else {  		return "";  	}  } else {  	source = (expiry == 0 ? "0000000000" : (expiry + UnixTimestamp ()).ToString ()) + CutString (MD5 (source + keyb)' 0' 16) + source;  	byte[] temp = RC4 (encoding.GetBytes (source)' cryptkey);  	return keyc + System.Convert.ToBase64String (temp);  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,Authcode,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Authcode.cs,DiscuzAuthcode,The following statement contains a magic number: if (operation == DiscuzAuthcodeMode.Decode) {  	byte[] temp;  	try {  		temp = System.Convert.FromBase64String (CutString (source' ckey_length));  	} catch {  		try {  			temp = System.Convert.FromBase64String (CutString (source + "="' ckey_length));  		} catch {  			try {  				temp = System.Convert.FromBase64String (CutString (source + "=="' ckey_length));  			} catch {  				return "";  			}  		}  	}  	result = encoding.GetString (RC4 (temp' cryptkey));  	//throw new Exception(CutString(result' 0' 10));  	long timestamp = long.Parse (CutString (result' 0' 10));  	if ((timestamp == 0 || timestamp - UnixTimestamp () > 0) && CutString (result' 10' 16) == CutString (MD5 (CutString (result' 26) + keyb)' 0' 16)) {  		return CutString (result' 26);  	} else {  		return "";  	}  } else {  	source = (expiry == 0 ? "0000000000" : (expiry + UnixTimestamp ()).ToString ()) + CutString (MD5 (source + keyb)' 0' 16) + source;  	byte[] temp = RC4 (encoding.GetBytes (source)' cryptkey);  	return keyc + System.Convert.ToBase64String (temp);  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,Authcode,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Authcode.cs,DiscuzAuthcode,The following statement contains a magic number: if (operation == DiscuzAuthcodeMode.Decode) {  	byte[] temp;  	try {  		temp = System.Convert.FromBase64String (CutString (source' ckey_length));  	} catch {  		try {  			temp = System.Convert.FromBase64String (CutString (source + "="' ckey_length));  		} catch {  			try {  				temp = System.Convert.FromBase64String (CutString (source + "=="' ckey_length));  			} catch {  				return "";  			}  		}  	}  	result = encoding.GetString (RC4 (temp' cryptkey));  	//throw new Exception(CutString(result' 0' 10));  	long timestamp = long.Parse (CutString (result' 0' 10));  	if ((timestamp == 0 || timestamp - UnixTimestamp () > 0) && CutString (result' 10' 16) == CutString (MD5 (CutString (result' 26) + keyb)' 0' 16)) {  		return CutString (result' 26);  	} else {  		return "";  	}  } else {  	source = (expiry == 0 ? "0000000000" : (expiry + UnixTimestamp ()).ToString ()) + CutString (MD5 (source + keyb)' 0' 16) + source;  	byte[] temp = RC4 (encoding.GetBytes (source)' cryptkey);  	return keyc + System.Convert.ToBase64String (temp);  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,Authcode,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Authcode.cs,DiscuzAuthcode,The following statement contains a magic number: if (operation == DiscuzAuthcodeMode.Decode) {  	byte[] temp;  	try {  		temp = System.Convert.FromBase64String (CutString (source' ckey_length));  	} catch {  		try {  			temp = System.Convert.FromBase64String (CutString (source + "="' ckey_length));  		} catch {  			try {  				temp = System.Convert.FromBase64String (CutString (source + "=="' ckey_length));  			} catch {  				return "";  			}  		}  	}  	result = encoding.GetString (RC4 (temp' cryptkey));  	//throw new Exception(CutString(result' 0' 10));  	long timestamp = long.Parse (CutString (result' 0' 10));  	if ((timestamp == 0 || timestamp - UnixTimestamp () > 0) && CutString (result' 10' 16) == CutString (MD5 (CutString (result' 26) + keyb)' 0' 16)) {  		return CutString (result' 26);  	} else {  		return "";  	}  } else {  	source = (expiry == 0 ? "0000000000" : (expiry + UnixTimestamp ()).ToString ()) + CutString (MD5 (source + keyb)' 0' 16) + source;  	byte[] temp = RC4 (encoding.GetBytes (source)' cryptkey);  	return keyc + System.Convert.ToBase64String (temp);  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,Authcode,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Authcode.cs,DiscuzAuthcode,The following statement contains a magic number: if (operation == DiscuzAuthcodeMode.Decode) {  	byte[] temp;  	try {  		temp = System.Convert.FromBase64String (CutString (source' ckey_length));  	} catch {  		try {  			temp = System.Convert.FromBase64String (CutString (source + "="' ckey_length));  		} catch {  			try {  				temp = System.Convert.FromBase64String (CutString (source + "=="' ckey_length));  			} catch {  				return "";  			}  		}  	}  	result = encoding.GetString (RC4 (temp' cryptkey));  	//throw new Exception(CutString(result' 0' 10));  	long timestamp = long.Parse (CutString (result' 0' 10));  	if ((timestamp == 0 || timestamp - UnixTimestamp () > 0) && CutString (result' 10' 16) == CutString (MD5 (CutString (result' 26) + keyb)' 0' 16)) {  		return CutString (result' 26);  	} else {  		return "";  	}  } else {  	source = (expiry == 0 ? "0000000000" : (expiry + UnixTimestamp ()).ToString ()) + CutString (MD5 (source + keyb)' 0' 16) + source;  	byte[] temp = RC4 (encoding.GetBytes (source)' cryptkey);  	return keyc + System.Convert.ToBase64String (temp);  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,Authcode,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Authcode.cs,DiscuzAuthcode,The following statement contains a magic number: if (operation == DiscuzAuthcodeMode.Decode) {  	byte[] temp;  	try {  		temp = System.Convert.FromBase64String (CutString (source' ckey_length));  	} catch {  		try {  			temp = System.Convert.FromBase64String (CutString (source + "="' ckey_length));  		} catch {  			try {  				temp = System.Convert.FromBase64String (CutString (source + "=="' ckey_length));  			} catch {  				return "";  			}  		}  	}  	result = encoding.GetString (RC4 (temp' cryptkey));  	//throw new Exception(CutString(result' 0' 10));  	long timestamp = long.Parse (CutString (result' 0' 10));  	if ((timestamp == 0 || timestamp - UnixTimestamp () > 0) && CutString (result' 10' 16) == CutString (MD5 (CutString (result' 26) + keyb)' 0' 16)) {  		return CutString (result' 26);  	} else {  		return "";  	}  } else {  	source = (expiry == 0 ? "0000000000" : (expiry + UnixTimestamp ()).ToString ()) + CutString (MD5 (source + keyb)' 0' 16) + source;  	byte[] temp = RC4 (encoding.GetBytes (source)' cryptkey);  	return keyc + System.Convert.ToBase64String (temp);  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,Authcode,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Authcode.cs,DiscuzAuthcode,The following statement contains a magic number: if (operation == DiscuzAuthcodeMode.Decode) {  	byte[] temp;  	try {  		temp = System.Convert.FromBase64String (CutString (source' ckey_length));  	} catch {  		try {  			temp = System.Convert.FromBase64String (CutString (source + "="' ckey_length));  		} catch {  			try {  				temp = System.Convert.FromBase64String (CutString (source + "=="' ckey_length));  			} catch {  				return "";  			}  		}  	}  	result = encoding.GetString (RC4 (temp' cryptkey));  	//throw new Exception(CutString(result' 0' 10));  	long timestamp = long.Parse (CutString (result' 0' 10));  	if ((timestamp == 0 || timestamp - UnixTimestamp () > 0) && CutString (result' 10' 16) == CutString (MD5 (CutString (result' 26) + keyb)' 0' 16)) {  		return CutString (result' 26);  	} else {  		return "";  	}  } else {  	source = (expiry == 0 ? "0000000000" : (expiry + UnixTimestamp ()).ToString ()) + CutString (MD5 (source + keyb)' 0' 16) + source;  	byte[] temp = RC4 (encoding.GetBytes (source)' cryptkey);  	return keyc + System.Convert.ToBase64String (temp);  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,Authcode,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Authcode.cs,DiscuzAuthcode,The following statement contains a magic number: if ((timestamp == 0 || timestamp - UnixTimestamp () > 0) && CutString (result' 10' 16) == CutString (MD5 (CutString (result' 26) + keyb)' 0' 16)) {  	return CutString (result' 26);  } else {  	return "";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,Authcode,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Authcode.cs,DiscuzAuthcode,The following statement contains a magic number: if ((timestamp == 0 || timestamp - UnixTimestamp () > 0) && CutString (result' 10' 16) == CutString (MD5 (CutString (result' 26) + keyb)' 0' 16)) {  	return CutString (result' 26);  } else {  	return "";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,Authcode,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Authcode.cs,DiscuzAuthcode,The following statement contains a magic number: if ((timestamp == 0 || timestamp - UnixTimestamp () > 0) && CutString (result' 10' 16) == CutString (MD5 (CutString (result' 26) + keyb)' 0' 16)) {  	return CutString (result' 26);  } else {  	return "";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,Authcode,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Authcode.cs,DiscuzAuthcode,The following statement contains a magic number: if ((timestamp == 0 || timestamp - UnixTimestamp () > 0) && CutString (result' 10' 16) == CutString (MD5 (CutString (result' 26) + keyb)' 0' 16)) {  	return CutString (result' 26);  } else {  	return "";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,Authcode,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Authcode.cs,DiscuzAuthcode,The following statement contains a magic number: if ((timestamp == 0 || timestamp - UnixTimestamp () > 0) && CutString (result' 10' 16) == CutString (MD5 (CutString (result' 26) + keyb)' 0' 16)) {  	return CutString (result' 26);  } else {  	return "";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,Authcode,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Authcode.cs,DiscuzAuthcode,The following statement contains a magic number: return CutString (result' 26);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,Authcode,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Authcode.cs,DiscuzAuthcode,The following statement contains a magic number: source = (expiry == 0 ? "0000000000" : (expiry + UnixTimestamp ()).ToString ()) + CutString (MD5 (source + keyb)' 0' 16) + source;  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,Authcode,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Authcode.cs,UnixTimestamp,The following statement contains a magic number: return long.Parse (timeStamp.Substring (0' timeStamp.Length - 7));  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,Request,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Request.cs,Request,The following statement contains a magic number: hostPattern = "^(?=" + UC_API.Remove (UC_API.IndexOf ("/"' 7)).Replace ("/"' "\\/") + "|http:\\/\\/" + HttpContext.Current.Request.Url.Host + ")";  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,Request,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Request.cs,SendRequest,The following statement contains a magic number: request.Timeout = 30000;  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,UCenterClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,GetUser,The following statement contains a magic number: users [2] = xd.SelectSingleNode (xpath).InnerText;  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,UCenterClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,GetLoginResultDesc,The following statement contains a magic number: switch (result) {  case -1:  	return "用户不存在，或者被删除";  case -2:  	return "密码错";  case -3:  	return "安全提问错";  default:  	return "登陆成功";  //(返回结果大于0)  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,UCenterClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,GetLoginResultDesc,The following statement contains a magic number: switch (result) {  case -1:  	return "用户不存在，或者被删除";  case -2:  	return "密码错";  case -3:  	return "安全提问错";  default:  	return "登陆成功";  //(返回结果大于0)  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,UCenterClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,GetRegResultDesc,The following statement contains a magic number: switch (result) {  case -1:  	return "用户名不合法";  case -2:  	return "包含不允许注册的词语";  case -3:  	return "用户名已经存在";  case -4:  	return "Email 格式有误";  case -5:  	return "Email 不允许注册";  case -6:  	return "该 Email 已经被注册";  default:  	return "注册成功";  //(返回结果大于0)  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,UCenterClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,GetRegResultDesc,The following statement contains a magic number: switch (result) {  case -1:  	return "用户名不合法";  case -2:  	return "包含不允许注册的词语";  case -3:  	return "用户名已经存在";  case -4:  	return "Email 格式有误";  case -5:  	return "Email 不允许注册";  case -6:  	return "该 Email 已经被注册";  default:  	return "注册成功";  //(返回结果大于0)  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,UCenterClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,GetRegResultDesc,The following statement contains a magic number: switch (result) {  case -1:  	return "用户名不合法";  case -2:  	return "包含不允许注册的词语";  case -3:  	return "用户名已经存在";  case -4:  	return "Email 格式有误";  case -5:  	return "Email 不允许注册";  case -6:  	return "该 Email 已经被注册";  default:  	return "注册成功";  //(返回结果大于0)  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,UCenterClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,GetRegResultDesc,The following statement contains a magic number: switch (result) {  case -1:  	return "用户名不合法";  case -2:  	return "包含不允许注册的词语";  case -3:  	return "用户名已经存在";  case -4:  	return "Email 格式有误";  case -5:  	return "Email 不允许注册";  case -6:  	return "该 Email 已经被注册";  default:  	return "注册成功";  //(返回结果大于0)  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,UCenterClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,GetRegResultDesc,The following statement contains a magic number: switch (result) {  case -1:  	return "用户名不合法";  case -2:  	return "包含不允许注册的词语";  case -3:  	return "用户名已经存在";  case -4:  	return "Email 格式有误";  case -5:  	return "Email 不允许注册";  case -6:  	return "该 Email 已经被注册";  default:  	return "注册成功";  //(返回结果大于0)  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,UCenterClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,GetEditResultDesc,The following statement contains a magic number: switch (result) {  case 1:  	return "更新成功";  case -1:  	return "旧密码不正确";  case -4:  	return "Email 格式有误";  case -5:  	return "Email 不允许注册";  case -6:  	return "该 Email 已经被注册";  case -7:  	return "没有做任何修改";  case -8:  	return "该用户受保护无权限更改";  default:  	return "未作任何修改";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,UCenterClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,GetEditResultDesc,The following statement contains a magic number: switch (result) {  case 1:  	return "更新成功";  case -1:  	return "旧密码不正确";  case -4:  	return "Email 格式有误";  case -5:  	return "Email 不允许注册";  case -6:  	return "该 Email 已经被注册";  case -7:  	return "没有做任何修改";  case -8:  	return "该用户受保护无权限更改";  default:  	return "未作任何修改";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,UCenterClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,GetEditResultDesc,The following statement contains a magic number: switch (result) {  case 1:  	return "更新成功";  case -1:  	return "旧密码不正确";  case -4:  	return "Email 格式有误";  case -5:  	return "Email 不允许注册";  case -6:  	return "该 Email 已经被注册";  case -7:  	return "没有做任何修改";  case -8:  	return "该用户受保护无权限更改";  default:  	return "未作任何修改";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,UCenterClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,GetEditResultDesc,The following statement contains a magic number: switch (result) {  case 1:  	return "更新成功";  case -1:  	return "旧密码不正确";  case -4:  	return "Email 格式有误";  case -5:  	return "Email 不允许注册";  case -6:  	return "该 Email 已经被注册";  case -7:  	return "没有做任何修改";  case -8:  	return "该用户受保护无权限更改";  default:  	return "未作任何修改";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.Discuz,UCenterClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\UCenter.cs,GetEditResultDesc,The following statement contains a magic number: switch (result) {  case 1:  	return "更新成功";  case -1:  	return "旧密码不正确";  case -4:  	return "Email 格式有误";  case -5:  	return "Email 不允许注册";  case -6:  	return "该 Email 已经被注册";  case -7:  	return "没有做任何修改";  case -8:  	return "该用户受保护无权限更改";  default:  	return "未作任何修改";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.ETao,Config,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\ETao\Config.cs,Config,The following statement contains a magic number: LastBuildTime = DateTime.Now.AddDays (-2);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.ETao,Core,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\ETao\Core.cs,StartService,The following statement contains a magic number: new global::System.Threading.Thread (() => {  	while (true) {  		DateTime dt = DateTime.Now;  		if ((dt - ETao.Config.LastBuildTime).Days >= 1) {  			ETao.Core.GenerateFullIndex (hand ());  			ETao.Core.Generate (hand2 ());  			ETao.Config.LastBuildTime = dt;  			global::System.Threading.Thread.Sleep (interval * 24);  		} else {  			global::System.Threading.Thread.Sleep (interval);  		}  	}  }).Start ();  
Magic Number,J6.DevFw.Toolkit.ThirdApi.ETao,Core,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\ETao\Core.cs,StartService,The following statement contains a magic number: while (true) {  	DateTime dt = DateTime.Now;  	if ((dt - ETao.Config.LastBuildTime).Days >= 1) {  		ETao.Core.GenerateFullIndex (hand ());  		ETao.Core.Generate (hand2 ());  		ETao.Config.LastBuildTime = dt;  		global::System.Threading.Thread.Sleep (interval * 24);  	} else {  		global::System.Threading.Thread.Sleep (interval);  	}  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.ETao,Core,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\ETao\Core.cs,StartService,The following statement contains a magic number: if ((dt - ETao.Config.LastBuildTime).Days >= 1) {  	ETao.Core.GenerateFullIndex (hand ());  	ETao.Core.Generate (hand2 ());  	ETao.Config.LastBuildTime = dt;  	global::System.Threading.Thread.Sleep (interval * 24);  } else {  	global::System.Threading.Thread.Sleep (interval);  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.ETao,Core,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\ETao\Core.cs,StartService,The following statement contains a magic number: global::System.Threading.Thread.Sleep (interval * 24);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.Core,Core,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\Core\AlipayCore.cs,GetAbstractToMD5,The following statement contains a magic number: for (int i = 0; i < result.Length; i++) {  	sb.Append (result [i].ToString ("x").PadLeft (2' '0'));  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.Core,Core,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\Core\AlipayCore.cs,GetAbstractToMD5,The following statement contains a magic number: sb.Append (result [i].ToString ("x").PadLeft (2' '0'));  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.Core,Core,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\Core\AlipayCore.cs,GetAbstractToMD5,The following statement contains a magic number: for (int i = 0; i < result.Length; i++) {  	sb.Append (result [i].ToString ("x").PadLeft (2' '0'));  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.Core,Core,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\Core\AlipayCore.cs,GetAbstractToMD5,The following statement contains a magic number: sb.Append (result [i].ToString ("x").PadLeft (2' '0'));  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.Core,AlipayMD5,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\Core\MD5.cs,Sign,The following statement contains a magic number: for (int i = 0; i < t.Length; i++) {  	sb.Append (t [i].ToString ("x").PadLeft (2' '0'));  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.Core,AlipayMD5,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\Core\MD5.cs,Sign,The following statement contains a magic number: sb.Append (t [i].ToString ("x").PadLeft (2' '0'));  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,Core,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\AlipayCore.cs,GetAbstractToMD5,The following statement contains a magic number: for (int i = 0; i < result.Length; i++) {  	sb.Append (result [i].ToString ("x").PadLeft (2' '0'));  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,Core,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\AlipayCore.cs,GetAbstractToMD5,The following statement contains a magic number: sb.Append (result [i].ToString ("x").PadLeft (2' '0'));  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,Core,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\AlipayCore.cs,GetAbstractToMD5,The following statement contains a magic number: for (int i = 0; i < result.Length; i++) {  	sb.Append (result [i].ToString ("x").PadLeft (2' '0'));  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,Core,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\AlipayCore.cs,GetAbstractToMD5,The following statement contains a magic number: sb.Append (result [i].ToString ("x").PadLeft (2' '0'));  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,decryptData,The following statement contains a magic number: for (int j = 0; j < DataToDecrypt.Length / 128; j++) {  	byte[] buf = new byte[128];  	for (int i = 0; i < 128; i++) {  		buf [i] = DataToDecrypt [i + 128 * j];  	}  	result.AddRange (decrypt (buf' privateKey' input_charset));  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,decryptData,The following statement contains a magic number: for (int j = 0; j < DataToDecrypt.Length / 128; j++) {  	byte[] buf = new byte[128];  	for (int i = 0; i < 128; i++) {  		buf [i] = DataToDecrypt [i + 128 * j];  	}  	result.AddRange (decrypt (buf' privateKey' input_charset));  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,decryptData,The following statement contains a magic number: for (int j = 0; j < DataToDecrypt.Length / 128; j++) {  	byte[] buf = new byte[128];  	for (int i = 0; i < 128; i++) {  		buf [i] = DataToDecrypt [i + 128 * j];  	}  	result.AddRange (decrypt (buf' privateKey' input_charset));  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,decryptData,The following statement contains a magic number: for (int j = 0; j < DataToDecrypt.Length / 128; j++) {  	byte[] buf = new byte[128];  	for (int i = 0; i < 128; i++) {  		buf [i] = DataToDecrypt [i + 128 * j];  	}  	result.AddRange (decrypt (buf' privateKey' input_charset));  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,decryptData,The following statement contains a magic number: for (int i = 0; i < 128; i++) {  	buf [i] = DataToDecrypt [i + 128 * j];  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,decryptData,The following statement contains a magic number: for (int i = 0; i < 128; i++) {  	buf [i] = DataToDecrypt [i + 128 * j];  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,decryptData,The following statement contains a magic number: buf [i] = DataToDecrypt [i + 128 * j];  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,DecodePrivateKeyInfo,The following statement contains a magic number: try {  	twobytes = binr.ReadUInt16 ();  	if (twobytes == 0x8130)  		//data read as little endian order (actual data order for Sequence is 30 81)  		binr.ReadByte ();  	//advance 1 byte  	else if (twobytes == 0x8230)  		binr.ReadInt16 ();  	//advance 2 bytes  	else  		return null;  	bt = binr.ReadByte ();  	if (bt != 0x02)  		return null;  	twobytes = binr.ReadUInt16 ();  	if (twobytes != 0x0001)  		return null;  	seq = binr.ReadBytes (15);  	//read the Sequence OID  	if (!CompareBytearrays (seq' SeqOID))  		//make sure Sequence for OID is correct  		return null;  	bt = binr.ReadByte ();  	if (bt != 0x04)  		//expect an Octet string   		return null;  	bt = binr.ReadByte ();  	//read next byte' or next 2 bytes is  0x81 or 0x82; otherwise bt is the byte count  	if (bt == 0x81)  		binr.ReadByte ();  	else if (bt == 0x82)  		binr.ReadUInt16 ();  	//------ at this stage' the remaining sequence should be the RSA private key  	byte[] rsaprivkey = binr.ReadBytes ((int)(lenstream - mem.Position));  	RSACryptoServiceProvider rsacsp = DecodeRSAPrivateKey (rsaprivkey);  	return rsacsp;  } catch (Exception) {  	return null;  } finally {  	binr.Close ();  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,DecodePrivateKeyInfo,The following statement contains a magic number: seq = binr.ReadBytes (15);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPublicKey,The following statement contains a magic number: if (keyData.Length < 162) {  	throw new ArgumentException ("pem file content is incorrect.");  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPublicKey,The following statement contains a magic number: Array.Copy (keyData' 29' pemModulus' 0' 128);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPublicKey,The following statement contains a magic number: Array.Copy (keyData' 29' pemModulus' 0' 128);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPublicKey,The following statement contains a magic number: Array.Copy (keyData' 159' pemPublicExponent' 0' 3);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPublicKey,The following statement contains a magic number: Array.Copy (keyData' 159' pemPublicExponent' 0' 3);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: if (keyData.Length < 609) {  	throw new ArgumentException ("pem file content is incorrect.");  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: Array.Copy (keyData' index' pemModulus' 0' 128);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: index += 128;  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: index += 2;  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: Array.Copy (keyData' index' pemPublicExponent' 0' 3);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: index += 3;  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: index += 4;  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: Array.Copy (keyData' index' pemPrivateExponent' 0' 128);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: index += 128;  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: index += ((int)keyData [index + 1] == 64 ? 2 : 3);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: index += ((int)keyData [index + 1] == 64 ? 2 : 3);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: index += ((int)keyData [index + 1] == 64 ? 2 : 3);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: Array.Copy (keyData' index' pemPrime1' 0' 64);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: index += 64;  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: index += ((int)keyData [index + 1] == 64 ? 2 : 3);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: index += ((int)keyData [index + 1] == 64 ? 2 : 3);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: index += ((int)keyData [index + 1] == 64 ? 2 : 3);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: Array.Copy (keyData' index' pemPrime2' 0' 64);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: index += 64;  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: index += ((int)keyData [index + 1] == 64 ? 2 : 3);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: index += ((int)keyData [index + 1] == 64 ? 2 : 3);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: index += ((int)keyData [index + 1] == 64 ? 2 : 3);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: Array.Copy (keyData' index' pemExponent1' 0' 64);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: index += 64;  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: index += ((int)keyData [index + 1] == 64 ? 2 : 3);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: index += ((int)keyData [index + 1] == 64 ? 2 : 3);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: index += ((int)keyData [index + 1] == 64 ? 2 : 3);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: Array.Copy (keyData' index' pemExponent2' 0' 64);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: index += 64;  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: index += ((int)keyData [index + 1] == 64 ? 2 : 3);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: index += ((int)keyData [index + 1] == 64 ? 2 : 3);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: index += ((int)keyData [index + 1] == 64 ? 2 : 3);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Alipay.MobileCore,RSAFromPkcs8,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Alipay\MobileCore\RSA.cs,ConvertFromPrivateKey,The following statement contains a magic number: Array.Copy (keyData' index' pemCoefficient' 0' 64);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay,PaymentHandler,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\PaymentHandler.cs,SubmitRequest,The following statement contains a magic number: if (pm != PayMethods.Unknown) {  	string payHtml = String.Empty;  	switch (pm) {  	//财付通  	case PayMethods.Tenpay:  		ht.Add ("tenpay_key"' partner_id);  		ht.Add ("tenpay_secret"' partner_secret);  		ht.Add ("trade_mode"' -((int)pt - 4));  		//1:即时到帐'2:中介担保'3:自己选择  		payHtml = String.Format ("<script>location.replace('{0}')</script>"' PayUtil.GetGatewayStr (PayMethods.Tenpay' pt' ht));  		break;  	//支付宝  	case PayMethods.Alipay:  		ht.Add ("alipay_key"' partner_id);  		ht.Add ("alipay_secret"' partner_secret);  		payHtml = PayUtil.GetGatewayStr (PayMethods.Alipay' pt' ht);  		break;  	//在线支付  	default:  	case PayMethods.OnlinePay:  		//  		//UNDONE:  		//  		throw new NotImplementedException ("暂不支持银行支付!");  	}  	//准备支付  	// orderPM.RepairPay();  	//跳转到支付页面  	return payHtml;  } else {  	return "不支持的支付方式!";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay,PaymentHandler,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\PaymentHandler.cs,SubmitRequest,The following statement contains a magic number: switch (pm) {  //财付通  case PayMethods.Tenpay:  	ht.Add ("tenpay_key"' partner_id);  	ht.Add ("tenpay_secret"' partner_secret);  	ht.Add ("trade_mode"' -((int)pt - 4));  	//1:即时到帐'2:中介担保'3:自己选择  	payHtml = String.Format ("<script>location.replace('{0}')</script>"' PayUtil.GetGatewayStr (PayMethods.Tenpay' pt' ht));  	break;  //支付宝  case PayMethods.Alipay:  	ht.Add ("alipay_key"' partner_id);  	ht.Add ("alipay_secret"' partner_secret);  	payHtml = PayUtil.GetGatewayStr (PayMethods.Alipay' pt' ht);  	break;  //在线支付  default:  case PayMethods.OnlinePay:  	//  	//UNDONE:  	//  	throw new NotImplementedException ("暂不支持银行支付!");  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay,PaymentHandler,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\PaymentHandler.cs,SubmitRequest,The following statement contains a magic number: ht.Add ("trade_mode"' -((int)pt - 4));  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay,PayUtil,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\PayUtil.cs,GetNotifyUrl,The following statement contains a magic number: return String.Format ("http://{0}{1}/netpay/notify_{2}_{3}.html"' req.Url.Host' req.Url.Port == 80 ? "" : ":" + req.Url.Port' ((int)ap).ToString ()' ((int)at).ToString ());  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay,PayUtil,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\PayUtil.cs,GetReturnUrl,The following statement contains a magic number: return String.Format ("http://{0}{1}/netpay/return_{2}_{3}.html"' req.Url.Host' req.Url.Port == 80 ? "" : ":" + req.Url.Port' ((int)ap).ToString ()' ((int)at).ToString ());  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.ChinaPay,ChinaPayApi,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\ChinaPay\ChinaPayApi.cs,GetPayRequest,The following statement contains a magic number: if (ChkValue == null || ChkValue.Length != 256) {  	return "签名不正确'无法支付!";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay.Code,TenpayHttpClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Code\TenpayHttpClient.cs,TenpayHttpClient,The following statement contains a magic number: this.timeOut = 1 * 60;  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay.Code,TenpayHttpClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Code\TenpayHttpClient.cs,call,The following statement contains a magic number: try {  	string postData = null;  	if (this.method.ToUpper () == "POST") {  		string[] sArray = System.Text.RegularExpressions.Regex.Split (this.reqContent' "\\?");  		hp = (HttpWebRequest)WebRequest.Create (sArray [0]);  		if (sArray.Length >= 2) {  			postData = sArray [1];  		}  	} else {  		hp = (HttpWebRequest)WebRequest.Create (this.reqContent);  	}  	ServicePointManager.ServerCertificateValidationCallback = new System.Net.Security.RemoteCertificateValidationCallback (CheckValidationResult);  	if (this.certFile != "") {  		hp.ClientCertificates.Add (new X509Certificate2 (this.certFile' this.certPasswd));  	}  	hp.Timeout = this.timeOut * 1000;  	System.Text.Encoding encoding = System.Text.Encoding.GetEncoding (this.charset);  	if (postData != null) {  		byte[] data = encoding.GetBytes (postData);  		hp.Method = "POST";  		hp.ContentType = "application/x-www-form-urlencoded";  		hp.ContentLength = data.Length;  		Stream ws = hp.GetRequestStream ();  		// 发送数据  		ws.Write (data' 0' data.Length);  		ws.Close ();  	}  	wr = (HttpWebResponse)hp.GetResponse ();  	sr = new StreamReader (wr.GetResponseStream ()' encoding);  	this.resContent = sr.ReadToEnd ();  	sr.Close ();  	wr.Close ();  } catch (Exception exp) {  	this.errInfo += exp.Message;  	if (wr != null) {  		this.responseCode = Convert.ToInt32 (wr.StatusCode);  	}  	return false;  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay.Code,TenpayHttpClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Code\TenpayHttpClient.cs,call,The following statement contains a magic number: try {  	string postData = null;  	if (this.method.ToUpper () == "POST") {  		string[] sArray = System.Text.RegularExpressions.Regex.Split (this.reqContent' "\\?");  		hp = (HttpWebRequest)WebRequest.Create (sArray [0]);  		if (sArray.Length >= 2) {  			postData = sArray [1];  		}  	} else {  		hp = (HttpWebRequest)WebRequest.Create (this.reqContent);  	}  	ServicePointManager.ServerCertificateValidationCallback = new System.Net.Security.RemoteCertificateValidationCallback (CheckValidationResult);  	if (this.certFile != "") {  		hp.ClientCertificates.Add (new X509Certificate2 (this.certFile' this.certPasswd));  	}  	hp.Timeout = this.timeOut * 1000;  	System.Text.Encoding encoding = System.Text.Encoding.GetEncoding (this.charset);  	if (postData != null) {  		byte[] data = encoding.GetBytes (postData);  		hp.Method = "POST";  		hp.ContentType = "application/x-www-form-urlencoded";  		hp.ContentLength = data.Length;  		Stream ws = hp.GetRequestStream ();  		// 发送数据  		ws.Write (data' 0' data.Length);  		ws.Close ();  	}  	wr = (HttpWebResponse)hp.GetResponse ();  	sr = new StreamReader (wr.GetResponseStream ()' encoding);  	this.resContent = sr.ReadToEnd ();  	sr.Close ();  	wr.Close ();  } catch (Exception exp) {  	this.errInfo += exp.Message;  	if (wr != null) {  		this.responseCode = Convert.ToInt32 (wr.StatusCode);  	}  	return false;  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay.Code,TenpayHttpClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Code\TenpayHttpClient.cs,call,The following statement contains a magic number: if (this.method.ToUpper () == "POST") {  	string[] sArray = System.Text.RegularExpressions.Regex.Split (this.reqContent' "\\?");  	hp = (HttpWebRequest)WebRequest.Create (sArray [0]);  	if (sArray.Length >= 2) {  		postData = sArray [1];  	}  } else {  	hp = (HttpWebRequest)WebRequest.Create (this.reqContent);  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay.Code,TenpayHttpClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Code\TenpayHttpClient.cs,call,The following statement contains a magic number: if (sArray.Length >= 2) {  	postData = sArray [1];  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay.Code,TenpayHttpClient,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Code\TenpayHttpClient.cs,call,The following statement contains a magic number: hp.Timeout = this.timeOut * 1000;  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (resHandler.isTenpaySign ()) {  	///通知id  	string notify_id = resHandler.getParameter ("notify_id");  	//通过通知ID查询，确保通知来至财付通  	//创建查询请求  	RequestHandler queryReq = new RequestHandler (System.Web.HttpContext.Current);  	queryReq.init ();  	queryReq.setKey (key);  	queryReq.setGateUrl ("https://gw.tenpay.com/gateway/verifynotifyid.xml");  	queryReq.setParameter ("partner"' partner);  	queryReq.setParameter ("notify_id"' notify_id);  	//通信对象  	TenpayHttpClient httpClient = new TenpayHttpClient ();  	httpClient.setTimeOut (5);  	//设置请求内容  	httpClient.setReqContent (queryReq.getRequestURL ());  	//后台调用  	if (httpClient.call ()) {  		//设置结果参数  		ClientResponseHandler queryRes = new ClientResponseHandler ();  		queryRes.setContent (httpClient.getResContent ());  		queryRes.setKey (key);  		//判断签名及结果  		//只有签名正确'retcode为0，trade_state为0才是支付成功  		if (queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1") {  			//取结果参数做业务处理  			string out_trade_no = queryRes.getParameter ("out_trade_no");  			//财付通订单号  			string transaction_id = queryRes.getParameter ("transaction_id");  			//金额'以分为单位  			string total_fee = queryRes.getParameter ("total_fee");  			//如果有使用折扣券，discount有值，total_fee+discount=原请求的total_fee  			string discount = queryRes.getParameter ("discount");  			//支付结果  			string trade_state = resHandler.getParameter ("trade_state");  			//交易模式，1即时到帐 2中介担保  			string trade_mode = resHandler.getParameter ("trade_mode");  			proc.Init (out_trade_no);  			//判断签名及结果  			if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  				// Response.Write("id验证成功");  				if ("1".Equals (trade_mode)) {  					//即时到账   					if ("0".Equals (trade_state)) {  						proc.PaidSuccess ();  						return "Success";  					} else {  						proc.PaidFail ();  						//SetLogMessage("即时到账支付失败");  						return "即时到账支付失败";  					}  				} else if ("2".Equals (trade_mode)) {  					//中介担保  					//------------------------------  					//中介担保处理业务开始  					//------------------------------  					//处理数据库逻辑  					//注意交易单不要重复处理  					//注意判断返回金额  					int iStatus = 0;  					switch (iStatus) {  					case 0:  						//付款成功  						break;  					case 1:  						//交易创建  						break;  					case 2:  						//收获地址填写完毕  						break;  					case 4:  						//卖家发货成功  						break;  					case 5:  						//买家收货确认，交易成功  						break;  					case 6:  						//交易关闭，未完成超时关闭  						break;  					case 7:  						//修改交易价格成功  						break;  					case 8:  						//买家发起退款  						break;  					case 9:  						//退款成功  						break;  					case 10:  						//退款关闭  						break;  					}  					//------------------------------  					//中介担保处理业务开始  					//------------------------------  					//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  					proc.PaidSuccess ();  					return "Success";  				}  			} else {  				//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  				//通知财付通处理失败，需要重新通知\  				// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  				proc.PaidFail ();  				return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  				;  			}  		} else {  			//通知财付通处理失败，需要重新通知  			//SetLogMessage("后台调用通信失败\r\ncall err:" + httpClient.getErrInfo() + "<br>" + httpClient.getResponseCode() + "<br>");  			proc.PaidFail ();  			return "后台调用通信失败call err:" + httpClient.getErrInfo () + "<br>" + httpClient.getResponseCode () + "<br>";  		}  	} else {  		proc.PaidFail ();  		return "通知签名验证失败";  	}  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (resHandler.isTenpaySign ()) {  	///通知id  	string notify_id = resHandler.getParameter ("notify_id");  	//通过通知ID查询，确保通知来至财付通  	//创建查询请求  	RequestHandler queryReq = new RequestHandler (System.Web.HttpContext.Current);  	queryReq.init ();  	queryReq.setKey (key);  	queryReq.setGateUrl ("https://gw.tenpay.com/gateway/verifynotifyid.xml");  	queryReq.setParameter ("partner"' partner);  	queryReq.setParameter ("notify_id"' notify_id);  	//通信对象  	TenpayHttpClient httpClient = new TenpayHttpClient ();  	httpClient.setTimeOut (5);  	//设置请求内容  	httpClient.setReqContent (queryReq.getRequestURL ());  	//后台调用  	if (httpClient.call ()) {  		//设置结果参数  		ClientResponseHandler queryRes = new ClientResponseHandler ();  		queryRes.setContent (httpClient.getResContent ());  		queryRes.setKey (key);  		//判断签名及结果  		//只有签名正确'retcode为0，trade_state为0才是支付成功  		if (queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1") {  			//取结果参数做业务处理  			string out_trade_no = queryRes.getParameter ("out_trade_no");  			//财付通订单号  			string transaction_id = queryRes.getParameter ("transaction_id");  			//金额'以分为单位  			string total_fee = queryRes.getParameter ("total_fee");  			//如果有使用折扣券，discount有值，total_fee+discount=原请求的total_fee  			string discount = queryRes.getParameter ("discount");  			//支付结果  			string trade_state = resHandler.getParameter ("trade_state");  			//交易模式，1即时到帐 2中介担保  			string trade_mode = resHandler.getParameter ("trade_mode");  			proc.Init (out_trade_no);  			//判断签名及结果  			if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  				// Response.Write("id验证成功");  				if ("1".Equals (trade_mode)) {  					//即时到账   					if ("0".Equals (trade_state)) {  						proc.PaidSuccess ();  						return "Success";  					} else {  						proc.PaidFail ();  						//SetLogMessage("即时到账支付失败");  						return "即时到账支付失败";  					}  				} else if ("2".Equals (trade_mode)) {  					//中介担保  					//------------------------------  					//中介担保处理业务开始  					//------------------------------  					//处理数据库逻辑  					//注意交易单不要重复处理  					//注意判断返回金额  					int iStatus = 0;  					switch (iStatus) {  					case 0:  						//付款成功  						break;  					case 1:  						//交易创建  						break;  					case 2:  						//收获地址填写完毕  						break;  					case 4:  						//卖家发货成功  						break;  					case 5:  						//买家收货确认，交易成功  						break;  					case 6:  						//交易关闭，未完成超时关闭  						break;  					case 7:  						//修改交易价格成功  						break;  					case 8:  						//买家发起退款  						break;  					case 9:  						//退款成功  						break;  					case 10:  						//退款关闭  						break;  					}  					//------------------------------  					//中介担保处理业务开始  					//------------------------------  					//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  					proc.PaidSuccess ();  					return "Success";  				}  			} else {  				//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  				//通知财付通处理失败，需要重新通知\  				// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  				proc.PaidFail ();  				return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  				;  			}  		} else {  			//通知财付通处理失败，需要重新通知  			//SetLogMessage("后台调用通信失败\r\ncall err:" + httpClient.getErrInfo() + "<br>" + httpClient.getResponseCode() + "<br>");  			proc.PaidFail ();  			return "后台调用通信失败call err:" + httpClient.getErrInfo () + "<br>" + httpClient.getResponseCode () + "<br>";  		}  	} else {  		proc.PaidFail ();  		return "通知签名验证失败";  	}  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (resHandler.isTenpaySign ()) {  	///通知id  	string notify_id = resHandler.getParameter ("notify_id");  	//通过通知ID查询，确保通知来至财付通  	//创建查询请求  	RequestHandler queryReq = new RequestHandler (System.Web.HttpContext.Current);  	queryReq.init ();  	queryReq.setKey (key);  	queryReq.setGateUrl ("https://gw.tenpay.com/gateway/verifynotifyid.xml");  	queryReq.setParameter ("partner"' partner);  	queryReq.setParameter ("notify_id"' notify_id);  	//通信对象  	TenpayHttpClient httpClient = new TenpayHttpClient ();  	httpClient.setTimeOut (5);  	//设置请求内容  	httpClient.setReqContent (queryReq.getRequestURL ());  	//后台调用  	if (httpClient.call ()) {  		//设置结果参数  		ClientResponseHandler queryRes = new ClientResponseHandler ();  		queryRes.setContent (httpClient.getResContent ());  		queryRes.setKey (key);  		//判断签名及结果  		//只有签名正确'retcode为0，trade_state为0才是支付成功  		if (queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1") {  			//取结果参数做业务处理  			string out_trade_no = queryRes.getParameter ("out_trade_no");  			//财付通订单号  			string transaction_id = queryRes.getParameter ("transaction_id");  			//金额'以分为单位  			string total_fee = queryRes.getParameter ("total_fee");  			//如果有使用折扣券，discount有值，total_fee+discount=原请求的total_fee  			string discount = queryRes.getParameter ("discount");  			//支付结果  			string trade_state = resHandler.getParameter ("trade_state");  			//交易模式，1即时到帐 2中介担保  			string trade_mode = resHandler.getParameter ("trade_mode");  			proc.Init (out_trade_no);  			//判断签名及结果  			if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  				// Response.Write("id验证成功");  				if ("1".Equals (trade_mode)) {  					//即时到账   					if ("0".Equals (trade_state)) {  						proc.PaidSuccess ();  						return "Success";  					} else {  						proc.PaidFail ();  						//SetLogMessage("即时到账支付失败");  						return "即时到账支付失败";  					}  				} else if ("2".Equals (trade_mode)) {  					//中介担保  					//------------------------------  					//中介担保处理业务开始  					//------------------------------  					//处理数据库逻辑  					//注意交易单不要重复处理  					//注意判断返回金额  					int iStatus = 0;  					switch (iStatus) {  					case 0:  						//付款成功  						break;  					case 1:  						//交易创建  						break;  					case 2:  						//收获地址填写完毕  						break;  					case 4:  						//卖家发货成功  						break;  					case 5:  						//买家收货确认，交易成功  						break;  					case 6:  						//交易关闭，未完成超时关闭  						break;  					case 7:  						//修改交易价格成功  						break;  					case 8:  						//买家发起退款  						break;  					case 9:  						//退款成功  						break;  					case 10:  						//退款关闭  						break;  					}  					//------------------------------  					//中介担保处理业务开始  					//------------------------------  					//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  					proc.PaidSuccess ();  					return "Success";  				}  			} else {  				//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  				//通知财付通处理失败，需要重新通知\  				// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  				proc.PaidFail ();  				return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  				;  			}  		} else {  			//通知财付通处理失败，需要重新通知  			//SetLogMessage("后台调用通信失败\r\ncall err:" + httpClient.getErrInfo() + "<br>" + httpClient.getResponseCode() + "<br>");  			proc.PaidFail ();  			return "后台调用通信失败call err:" + httpClient.getErrInfo () + "<br>" + httpClient.getResponseCode () + "<br>";  		}  	} else {  		proc.PaidFail ();  		return "通知签名验证失败";  	}  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (resHandler.isTenpaySign ()) {  	///通知id  	string notify_id = resHandler.getParameter ("notify_id");  	//通过通知ID查询，确保通知来至财付通  	//创建查询请求  	RequestHandler queryReq = new RequestHandler (System.Web.HttpContext.Current);  	queryReq.init ();  	queryReq.setKey (key);  	queryReq.setGateUrl ("https://gw.tenpay.com/gateway/verifynotifyid.xml");  	queryReq.setParameter ("partner"' partner);  	queryReq.setParameter ("notify_id"' notify_id);  	//通信对象  	TenpayHttpClient httpClient = new TenpayHttpClient ();  	httpClient.setTimeOut (5);  	//设置请求内容  	httpClient.setReqContent (queryReq.getRequestURL ());  	//后台调用  	if (httpClient.call ()) {  		//设置结果参数  		ClientResponseHandler queryRes = new ClientResponseHandler ();  		queryRes.setContent (httpClient.getResContent ());  		queryRes.setKey (key);  		//判断签名及结果  		//只有签名正确'retcode为0，trade_state为0才是支付成功  		if (queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1") {  			//取结果参数做业务处理  			string out_trade_no = queryRes.getParameter ("out_trade_no");  			//财付通订单号  			string transaction_id = queryRes.getParameter ("transaction_id");  			//金额'以分为单位  			string total_fee = queryRes.getParameter ("total_fee");  			//如果有使用折扣券，discount有值，total_fee+discount=原请求的total_fee  			string discount = queryRes.getParameter ("discount");  			//支付结果  			string trade_state = resHandler.getParameter ("trade_state");  			//交易模式，1即时到帐 2中介担保  			string trade_mode = resHandler.getParameter ("trade_mode");  			proc.Init (out_trade_no);  			//判断签名及结果  			if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  				// Response.Write("id验证成功");  				if ("1".Equals (trade_mode)) {  					//即时到账   					if ("0".Equals (trade_state)) {  						proc.PaidSuccess ();  						return "Success";  					} else {  						proc.PaidFail ();  						//SetLogMessage("即时到账支付失败");  						return "即时到账支付失败";  					}  				} else if ("2".Equals (trade_mode)) {  					//中介担保  					//------------------------------  					//中介担保处理业务开始  					//------------------------------  					//处理数据库逻辑  					//注意交易单不要重复处理  					//注意判断返回金额  					int iStatus = 0;  					switch (iStatus) {  					case 0:  						//付款成功  						break;  					case 1:  						//交易创建  						break;  					case 2:  						//收获地址填写完毕  						break;  					case 4:  						//卖家发货成功  						break;  					case 5:  						//买家收货确认，交易成功  						break;  					case 6:  						//交易关闭，未完成超时关闭  						break;  					case 7:  						//修改交易价格成功  						break;  					case 8:  						//买家发起退款  						break;  					case 9:  						//退款成功  						break;  					case 10:  						//退款关闭  						break;  					}  					//------------------------------  					//中介担保处理业务开始  					//------------------------------  					//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  					proc.PaidSuccess ();  					return "Success";  				}  			} else {  				//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  				//通知财付通处理失败，需要重新通知\  				// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  				proc.PaidFail ();  				return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  				;  			}  		} else {  			//通知财付通处理失败，需要重新通知  			//SetLogMessage("后台调用通信失败\r\ncall err:" + httpClient.getErrInfo() + "<br>" + httpClient.getResponseCode() + "<br>");  			proc.PaidFail ();  			return "后台调用通信失败call err:" + httpClient.getErrInfo () + "<br>" + httpClient.getResponseCode () + "<br>";  		}  	} else {  		proc.PaidFail ();  		return "通知签名验证失败";  	}  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (resHandler.isTenpaySign ()) {  	///通知id  	string notify_id = resHandler.getParameter ("notify_id");  	//通过通知ID查询，确保通知来至财付通  	//创建查询请求  	RequestHandler queryReq = new RequestHandler (System.Web.HttpContext.Current);  	queryReq.init ();  	queryReq.setKey (key);  	queryReq.setGateUrl ("https://gw.tenpay.com/gateway/verifynotifyid.xml");  	queryReq.setParameter ("partner"' partner);  	queryReq.setParameter ("notify_id"' notify_id);  	//通信对象  	TenpayHttpClient httpClient = new TenpayHttpClient ();  	httpClient.setTimeOut (5);  	//设置请求内容  	httpClient.setReqContent (queryReq.getRequestURL ());  	//后台调用  	if (httpClient.call ()) {  		//设置结果参数  		ClientResponseHandler queryRes = new ClientResponseHandler ();  		queryRes.setContent (httpClient.getResContent ());  		queryRes.setKey (key);  		//判断签名及结果  		//只有签名正确'retcode为0，trade_state为0才是支付成功  		if (queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1") {  			//取结果参数做业务处理  			string out_trade_no = queryRes.getParameter ("out_trade_no");  			//财付通订单号  			string transaction_id = queryRes.getParameter ("transaction_id");  			//金额'以分为单位  			string total_fee = queryRes.getParameter ("total_fee");  			//如果有使用折扣券，discount有值，total_fee+discount=原请求的total_fee  			string discount = queryRes.getParameter ("discount");  			//支付结果  			string trade_state = resHandler.getParameter ("trade_state");  			//交易模式，1即时到帐 2中介担保  			string trade_mode = resHandler.getParameter ("trade_mode");  			proc.Init (out_trade_no);  			//判断签名及结果  			if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  				// Response.Write("id验证成功");  				if ("1".Equals (trade_mode)) {  					//即时到账   					if ("0".Equals (trade_state)) {  						proc.PaidSuccess ();  						return "Success";  					} else {  						proc.PaidFail ();  						//SetLogMessage("即时到账支付失败");  						return "即时到账支付失败";  					}  				} else if ("2".Equals (trade_mode)) {  					//中介担保  					//------------------------------  					//中介担保处理业务开始  					//------------------------------  					//处理数据库逻辑  					//注意交易单不要重复处理  					//注意判断返回金额  					int iStatus = 0;  					switch (iStatus) {  					case 0:  						//付款成功  						break;  					case 1:  						//交易创建  						break;  					case 2:  						//收获地址填写完毕  						break;  					case 4:  						//卖家发货成功  						break;  					case 5:  						//买家收货确认，交易成功  						break;  					case 6:  						//交易关闭，未完成超时关闭  						break;  					case 7:  						//修改交易价格成功  						break;  					case 8:  						//买家发起退款  						break;  					case 9:  						//退款成功  						break;  					case 10:  						//退款关闭  						break;  					}  					//------------------------------  					//中介担保处理业务开始  					//------------------------------  					//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  					proc.PaidSuccess ();  					return "Success";  				}  			} else {  				//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  				//通知财付通处理失败，需要重新通知\  				// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  				proc.PaidFail ();  				return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  				;  			}  		} else {  			//通知财付通处理失败，需要重新通知  			//SetLogMessage("后台调用通信失败\r\ncall err:" + httpClient.getErrInfo() + "<br>" + httpClient.getResponseCode() + "<br>");  			proc.PaidFail ();  			return "后台调用通信失败call err:" + httpClient.getErrInfo () + "<br>" + httpClient.getResponseCode () + "<br>";  		}  	} else {  		proc.PaidFail ();  		return "通知签名验证失败";  	}  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (resHandler.isTenpaySign ()) {  	///通知id  	string notify_id = resHandler.getParameter ("notify_id");  	//通过通知ID查询，确保通知来至财付通  	//创建查询请求  	RequestHandler queryReq = new RequestHandler (System.Web.HttpContext.Current);  	queryReq.init ();  	queryReq.setKey (key);  	queryReq.setGateUrl ("https://gw.tenpay.com/gateway/verifynotifyid.xml");  	queryReq.setParameter ("partner"' partner);  	queryReq.setParameter ("notify_id"' notify_id);  	//通信对象  	TenpayHttpClient httpClient = new TenpayHttpClient ();  	httpClient.setTimeOut (5);  	//设置请求内容  	httpClient.setReqContent (queryReq.getRequestURL ());  	//后台调用  	if (httpClient.call ()) {  		//设置结果参数  		ClientResponseHandler queryRes = new ClientResponseHandler ();  		queryRes.setContent (httpClient.getResContent ());  		queryRes.setKey (key);  		//判断签名及结果  		//只有签名正确'retcode为0，trade_state为0才是支付成功  		if (queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1") {  			//取结果参数做业务处理  			string out_trade_no = queryRes.getParameter ("out_trade_no");  			//财付通订单号  			string transaction_id = queryRes.getParameter ("transaction_id");  			//金额'以分为单位  			string total_fee = queryRes.getParameter ("total_fee");  			//如果有使用折扣券，discount有值，total_fee+discount=原请求的total_fee  			string discount = queryRes.getParameter ("discount");  			//支付结果  			string trade_state = resHandler.getParameter ("trade_state");  			//交易模式，1即时到帐 2中介担保  			string trade_mode = resHandler.getParameter ("trade_mode");  			proc.Init (out_trade_no);  			//判断签名及结果  			if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  				// Response.Write("id验证成功");  				if ("1".Equals (trade_mode)) {  					//即时到账   					if ("0".Equals (trade_state)) {  						proc.PaidSuccess ();  						return "Success";  					} else {  						proc.PaidFail ();  						//SetLogMessage("即时到账支付失败");  						return "即时到账支付失败";  					}  				} else if ("2".Equals (trade_mode)) {  					//中介担保  					//------------------------------  					//中介担保处理业务开始  					//------------------------------  					//处理数据库逻辑  					//注意交易单不要重复处理  					//注意判断返回金额  					int iStatus = 0;  					switch (iStatus) {  					case 0:  						//付款成功  						break;  					case 1:  						//交易创建  						break;  					case 2:  						//收获地址填写完毕  						break;  					case 4:  						//卖家发货成功  						break;  					case 5:  						//买家收货确认，交易成功  						break;  					case 6:  						//交易关闭，未完成超时关闭  						break;  					case 7:  						//修改交易价格成功  						break;  					case 8:  						//买家发起退款  						break;  					case 9:  						//退款成功  						break;  					case 10:  						//退款关闭  						break;  					}  					//------------------------------  					//中介担保处理业务开始  					//------------------------------  					//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  					proc.PaidSuccess ();  					return "Success";  				}  			} else {  				//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  				//通知财付通处理失败，需要重新通知\  				// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  				proc.PaidFail ();  				return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  				;  			}  		} else {  			//通知财付通处理失败，需要重新通知  			//SetLogMessage("后台调用通信失败\r\ncall err:" + httpClient.getErrInfo() + "<br>" + httpClient.getResponseCode() + "<br>");  			proc.PaidFail ();  			return "后台调用通信失败call err:" + httpClient.getErrInfo () + "<br>" + httpClient.getResponseCode () + "<br>";  		}  	} else {  		proc.PaidFail ();  		return "通知签名验证失败";  	}  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (resHandler.isTenpaySign ()) {  	///通知id  	string notify_id = resHandler.getParameter ("notify_id");  	//通过通知ID查询，确保通知来至财付通  	//创建查询请求  	RequestHandler queryReq = new RequestHandler (System.Web.HttpContext.Current);  	queryReq.init ();  	queryReq.setKey (key);  	queryReq.setGateUrl ("https://gw.tenpay.com/gateway/verifynotifyid.xml");  	queryReq.setParameter ("partner"' partner);  	queryReq.setParameter ("notify_id"' notify_id);  	//通信对象  	TenpayHttpClient httpClient = new TenpayHttpClient ();  	httpClient.setTimeOut (5);  	//设置请求内容  	httpClient.setReqContent (queryReq.getRequestURL ());  	//后台调用  	if (httpClient.call ()) {  		//设置结果参数  		ClientResponseHandler queryRes = new ClientResponseHandler ();  		queryRes.setContent (httpClient.getResContent ());  		queryRes.setKey (key);  		//判断签名及结果  		//只有签名正确'retcode为0，trade_state为0才是支付成功  		if (queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1") {  			//取结果参数做业务处理  			string out_trade_no = queryRes.getParameter ("out_trade_no");  			//财付通订单号  			string transaction_id = queryRes.getParameter ("transaction_id");  			//金额'以分为单位  			string total_fee = queryRes.getParameter ("total_fee");  			//如果有使用折扣券，discount有值，total_fee+discount=原请求的total_fee  			string discount = queryRes.getParameter ("discount");  			//支付结果  			string trade_state = resHandler.getParameter ("trade_state");  			//交易模式，1即时到帐 2中介担保  			string trade_mode = resHandler.getParameter ("trade_mode");  			proc.Init (out_trade_no);  			//判断签名及结果  			if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  				// Response.Write("id验证成功");  				if ("1".Equals (trade_mode)) {  					//即时到账   					if ("0".Equals (trade_state)) {  						proc.PaidSuccess ();  						return "Success";  					} else {  						proc.PaidFail ();  						//SetLogMessage("即时到账支付失败");  						return "即时到账支付失败";  					}  				} else if ("2".Equals (trade_mode)) {  					//中介担保  					//------------------------------  					//中介担保处理业务开始  					//------------------------------  					//处理数据库逻辑  					//注意交易单不要重复处理  					//注意判断返回金额  					int iStatus = 0;  					switch (iStatus) {  					case 0:  						//付款成功  						break;  					case 1:  						//交易创建  						break;  					case 2:  						//收获地址填写完毕  						break;  					case 4:  						//卖家发货成功  						break;  					case 5:  						//买家收货确认，交易成功  						break;  					case 6:  						//交易关闭，未完成超时关闭  						break;  					case 7:  						//修改交易价格成功  						break;  					case 8:  						//买家发起退款  						break;  					case 9:  						//退款成功  						break;  					case 10:  						//退款关闭  						break;  					}  					//------------------------------  					//中介担保处理业务开始  					//------------------------------  					//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  					proc.PaidSuccess ();  					return "Success";  				}  			} else {  				//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  				//通知财付通处理失败，需要重新通知\  				// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  				proc.PaidFail ();  				return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  				;  			}  		} else {  			//通知财付通处理失败，需要重新通知  			//SetLogMessage("后台调用通信失败\r\ncall err:" + httpClient.getErrInfo() + "<br>" + httpClient.getResponseCode() + "<br>");  			proc.PaidFail ();  			return "后台调用通信失败call err:" + httpClient.getErrInfo () + "<br>" + httpClient.getResponseCode () + "<br>";  		}  	} else {  		proc.PaidFail ();  		return "通知签名验证失败";  	}  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (resHandler.isTenpaySign ()) {  	///通知id  	string notify_id = resHandler.getParameter ("notify_id");  	//通过通知ID查询，确保通知来至财付通  	//创建查询请求  	RequestHandler queryReq = new RequestHandler (System.Web.HttpContext.Current);  	queryReq.init ();  	queryReq.setKey (key);  	queryReq.setGateUrl ("https://gw.tenpay.com/gateway/verifynotifyid.xml");  	queryReq.setParameter ("partner"' partner);  	queryReq.setParameter ("notify_id"' notify_id);  	//通信对象  	TenpayHttpClient httpClient = new TenpayHttpClient ();  	httpClient.setTimeOut (5);  	//设置请求内容  	httpClient.setReqContent (queryReq.getRequestURL ());  	//后台调用  	if (httpClient.call ()) {  		//设置结果参数  		ClientResponseHandler queryRes = new ClientResponseHandler ();  		queryRes.setContent (httpClient.getResContent ());  		queryRes.setKey (key);  		//判断签名及结果  		//只有签名正确'retcode为0，trade_state为0才是支付成功  		if (queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1") {  			//取结果参数做业务处理  			string out_trade_no = queryRes.getParameter ("out_trade_no");  			//财付通订单号  			string transaction_id = queryRes.getParameter ("transaction_id");  			//金额'以分为单位  			string total_fee = queryRes.getParameter ("total_fee");  			//如果有使用折扣券，discount有值，total_fee+discount=原请求的total_fee  			string discount = queryRes.getParameter ("discount");  			//支付结果  			string trade_state = resHandler.getParameter ("trade_state");  			//交易模式，1即时到帐 2中介担保  			string trade_mode = resHandler.getParameter ("trade_mode");  			proc.Init (out_trade_no);  			//判断签名及结果  			if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  				// Response.Write("id验证成功");  				if ("1".Equals (trade_mode)) {  					//即时到账   					if ("0".Equals (trade_state)) {  						proc.PaidSuccess ();  						return "Success";  					} else {  						proc.PaidFail ();  						//SetLogMessage("即时到账支付失败");  						return "即时到账支付失败";  					}  				} else if ("2".Equals (trade_mode)) {  					//中介担保  					//------------------------------  					//中介担保处理业务开始  					//------------------------------  					//处理数据库逻辑  					//注意交易单不要重复处理  					//注意判断返回金额  					int iStatus = 0;  					switch (iStatus) {  					case 0:  						//付款成功  						break;  					case 1:  						//交易创建  						break;  					case 2:  						//收获地址填写完毕  						break;  					case 4:  						//卖家发货成功  						break;  					case 5:  						//买家收货确认，交易成功  						break;  					case 6:  						//交易关闭，未完成超时关闭  						break;  					case 7:  						//修改交易价格成功  						break;  					case 8:  						//买家发起退款  						break;  					case 9:  						//退款成功  						break;  					case 10:  						//退款关闭  						break;  					}  					//------------------------------  					//中介担保处理业务开始  					//------------------------------  					//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  					proc.PaidSuccess ();  					return "Success";  				}  			} else {  				//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  				//通知财付通处理失败，需要重新通知\  				// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  				proc.PaidFail ();  				return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  				;  			}  		} else {  			//通知财付通处理失败，需要重新通知  			//SetLogMessage("后台调用通信失败\r\ncall err:" + httpClient.getErrInfo() + "<br>" + httpClient.getResponseCode() + "<br>");  			proc.PaidFail ();  			return "后台调用通信失败call err:" + httpClient.getErrInfo () + "<br>" + httpClient.getResponseCode () + "<br>";  		}  	} else {  		proc.PaidFail ();  		return "通知签名验证失败";  	}  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (resHandler.isTenpaySign ()) {  	///通知id  	string notify_id = resHandler.getParameter ("notify_id");  	//通过通知ID查询，确保通知来至财付通  	//创建查询请求  	RequestHandler queryReq = new RequestHandler (System.Web.HttpContext.Current);  	queryReq.init ();  	queryReq.setKey (key);  	queryReq.setGateUrl ("https://gw.tenpay.com/gateway/verifynotifyid.xml");  	queryReq.setParameter ("partner"' partner);  	queryReq.setParameter ("notify_id"' notify_id);  	//通信对象  	TenpayHttpClient httpClient = new TenpayHttpClient ();  	httpClient.setTimeOut (5);  	//设置请求内容  	httpClient.setReqContent (queryReq.getRequestURL ());  	//后台调用  	if (httpClient.call ()) {  		//设置结果参数  		ClientResponseHandler queryRes = new ClientResponseHandler ();  		queryRes.setContent (httpClient.getResContent ());  		queryRes.setKey (key);  		//判断签名及结果  		//只有签名正确'retcode为0，trade_state为0才是支付成功  		if (queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1") {  			//取结果参数做业务处理  			string out_trade_no = queryRes.getParameter ("out_trade_no");  			//财付通订单号  			string transaction_id = queryRes.getParameter ("transaction_id");  			//金额'以分为单位  			string total_fee = queryRes.getParameter ("total_fee");  			//如果有使用折扣券，discount有值，total_fee+discount=原请求的total_fee  			string discount = queryRes.getParameter ("discount");  			//支付结果  			string trade_state = resHandler.getParameter ("trade_state");  			//交易模式，1即时到帐 2中介担保  			string trade_mode = resHandler.getParameter ("trade_mode");  			proc.Init (out_trade_no);  			//判断签名及结果  			if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  				// Response.Write("id验证成功");  				if ("1".Equals (trade_mode)) {  					//即时到账   					if ("0".Equals (trade_state)) {  						proc.PaidSuccess ();  						return "Success";  					} else {  						proc.PaidFail ();  						//SetLogMessage("即时到账支付失败");  						return "即时到账支付失败";  					}  				} else if ("2".Equals (trade_mode)) {  					//中介担保  					//------------------------------  					//中介担保处理业务开始  					//------------------------------  					//处理数据库逻辑  					//注意交易单不要重复处理  					//注意判断返回金额  					int iStatus = 0;  					switch (iStatus) {  					case 0:  						//付款成功  						break;  					case 1:  						//交易创建  						break;  					case 2:  						//收获地址填写完毕  						break;  					case 4:  						//卖家发货成功  						break;  					case 5:  						//买家收货确认，交易成功  						break;  					case 6:  						//交易关闭，未完成超时关闭  						break;  					case 7:  						//修改交易价格成功  						break;  					case 8:  						//买家发起退款  						break;  					case 9:  						//退款成功  						break;  					case 10:  						//退款关闭  						break;  					}  					//------------------------------  					//中介担保处理业务开始  					//------------------------------  					//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  					proc.PaidSuccess ();  					return "Success";  				}  			} else {  				//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  				//通知财付通处理失败，需要重新通知\  				// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  				proc.PaidFail ();  				return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  				;  			}  		} else {  			//通知财付通处理失败，需要重新通知  			//SetLogMessage("后台调用通信失败\r\ncall err:" + httpClient.getErrInfo() + "<br>" + httpClient.getResponseCode() + "<br>");  			proc.PaidFail ();  			return "后台调用通信失败call err:" + httpClient.getErrInfo () + "<br>" + httpClient.getResponseCode () + "<br>";  		}  	} else {  		proc.PaidFail ();  		return "通知签名验证失败";  	}  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: httpClient.setTimeOut (5);  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (httpClient.call ()) {  	//设置结果参数  	ClientResponseHandler queryRes = new ClientResponseHandler ();  	queryRes.setContent (httpClient.getResContent ());  	queryRes.setKey (key);  	//判断签名及结果  	//只有签名正确'retcode为0，trade_state为0才是支付成功  	if (queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1") {  		//取结果参数做业务处理  		string out_trade_no = queryRes.getParameter ("out_trade_no");  		//财付通订单号  		string transaction_id = queryRes.getParameter ("transaction_id");  		//金额'以分为单位  		string total_fee = queryRes.getParameter ("total_fee");  		//如果有使用折扣券，discount有值，total_fee+discount=原请求的total_fee  		string discount = queryRes.getParameter ("discount");  		//支付结果  		string trade_state = resHandler.getParameter ("trade_state");  		//交易模式，1即时到帐 2中介担保  		string trade_mode = resHandler.getParameter ("trade_mode");  		proc.Init (out_trade_no);  		//判断签名及结果  		if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  			// Response.Write("id验证成功");  			if ("1".Equals (trade_mode)) {  				//即时到账   				if ("0".Equals (trade_state)) {  					proc.PaidSuccess ();  					return "Success";  				} else {  					proc.PaidFail ();  					//SetLogMessage("即时到账支付失败");  					return "即时到账支付失败";  				}  			} else if ("2".Equals (trade_mode)) {  				//中介担保  				//------------------------------  				//中介担保处理业务开始  				//------------------------------  				//处理数据库逻辑  				//注意交易单不要重复处理  				//注意判断返回金额  				int iStatus = 0;  				switch (iStatus) {  				case 0:  					//付款成功  					break;  				case 1:  					//交易创建  					break;  				case 2:  					//收获地址填写完毕  					break;  				case 4:  					//卖家发货成功  					break;  				case 5:  					//买家收货确认，交易成功  					break;  				case 6:  					//交易关闭，未完成超时关闭  					break;  				case 7:  					//修改交易价格成功  					break;  				case 8:  					//买家发起退款  					break;  				case 9:  					//退款成功  					break;  				case 10:  					//退款关闭  					break;  				}  				//------------------------------  				//中介担保处理业务开始  				//------------------------------  				//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  				proc.PaidSuccess ();  				return "Success";  			}  		} else {  			//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  			//通知财付通处理失败，需要重新通知\  			// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  			proc.PaidFail ();  			return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  			;  		}  	} else {  		//通知财付通处理失败，需要重新通知  		//SetLogMessage("后台调用通信失败\r\ncall err:" + httpClient.getErrInfo() + "<br>" + httpClient.getResponseCode() + "<br>");  		proc.PaidFail ();  		return "后台调用通信失败call err:" + httpClient.getErrInfo () + "<br>" + httpClient.getResponseCode () + "<br>";  	}  } else {  	proc.PaidFail ();  	return "通知签名验证失败";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (httpClient.call ()) {  	//设置结果参数  	ClientResponseHandler queryRes = new ClientResponseHandler ();  	queryRes.setContent (httpClient.getResContent ());  	queryRes.setKey (key);  	//判断签名及结果  	//只有签名正确'retcode为0，trade_state为0才是支付成功  	if (queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1") {  		//取结果参数做业务处理  		string out_trade_no = queryRes.getParameter ("out_trade_no");  		//财付通订单号  		string transaction_id = queryRes.getParameter ("transaction_id");  		//金额'以分为单位  		string total_fee = queryRes.getParameter ("total_fee");  		//如果有使用折扣券，discount有值，total_fee+discount=原请求的total_fee  		string discount = queryRes.getParameter ("discount");  		//支付结果  		string trade_state = resHandler.getParameter ("trade_state");  		//交易模式，1即时到帐 2中介担保  		string trade_mode = resHandler.getParameter ("trade_mode");  		proc.Init (out_trade_no);  		//判断签名及结果  		if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  			// Response.Write("id验证成功");  			if ("1".Equals (trade_mode)) {  				//即时到账   				if ("0".Equals (trade_state)) {  					proc.PaidSuccess ();  					return "Success";  				} else {  					proc.PaidFail ();  					//SetLogMessage("即时到账支付失败");  					return "即时到账支付失败";  				}  			} else if ("2".Equals (trade_mode)) {  				//中介担保  				//------------------------------  				//中介担保处理业务开始  				//------------------------------  				//处理数据库逻辑  				//注意交易单不要重复处理  				//注意判断返回金额  				int iStatus = 0;  				switch (iStatus) {  				case 0:  					//付款成功  					break;  				case 1:  					//交易创建  					break;  				case 2:  					//收获地址填写完毕  					break;  				case 4:  					//卖家发货成功  					break;  				case 5:  					//买家收货确认，交易成功  					break;  				case 6:  					//交易关闭，未完成超时关闭  					break;  				case 7:  					//修改交易价格成功  					break;  				case 8:  					//买家发起退款  					break;  				case 9:  					//退款成功  					break;  				case 10:  					//退款关闭  					break;  				}  				//------------------------------  				//中介担保处理业务开始  				//------------------------------  				//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  				proc.PaidSuccess ();  				return "Success";  			}  		} else {  			//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  			//通知财付通处理失败，需要重新通知\  			// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  			proc.PaidFail ();  			return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  			;  		}  	} else {  		//通知财付通处理失败，需要重新通知  		//SetLogMessage("后台调用通信失败\r\ncall err:" + httpClient.getErrInfo() + "<br>" + httpClient.getResponseCode() + "<br>");  		proc.PaidFail ();  		return "后台调用通信失败call err:" + httpClient.getErrInfo () + "<br>" + httpClient.getResponseCode () + "<br>";  	}  } else {  	proc.PaidFail ();  	return "通知签名验证失败";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (httpClient.call ()) {  	//设置结果参数  	ClientResponseHandler queryRes = new ClientResponseHandler ();  	queryRes.setContent (httpClient.getResContent ());  	queryRes.setKey (key);  	//判断签名及结果  	//只有签名正确'retcode为0，trade_state为0才是支付成功  	if (queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1") {  		//取结果参数做业务处理  		string out_trade_no = queryRes.getParameter ("out_trade_no");  		//财付通订单号  		string transaction_id = queryRes.getParameter ("transaction_id");  		//金额'以分为单位  		string total_fee = queryRes.getParameter ("total_fee");  		//如果有使用折扣券，discount有值，total_fee+discount=原请求的total_fee  		string discount = queryRes.getParameter ("discount");  		//支付结果  		string trade_state = resHandler.getParameter ("trade_state");  		//交易模式，1即时到帐 2中介担保  		string trade_mode = resHandler.getParameter ("trade_mode");  		proc.Init (out_trade_no);  		//判断签名及结果  		if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  			// Response.Write("id验证成功");  			if ("1".Equals (trade_mode)) {  				//即时到账   				if ("0".Equals (trade_state)) {  					proc.PaidSuccess ();  					return "Success";  				} else {  					proc.PaidFail ();  					//SetLogMessage("即时到账支付失败");  					return "即时到账支付失败";  				}  			} else if ("2".Equals (trade_mode)) {  				//中介担保  				//------------------------------  				//中介担保处理业务开始  				//------------------------------  				//处理数据库逻辑  				//注意交易单不要重复处理  				//注意判断返回金额  				int iStatus = 0;  				switch (iStatus) {  				case 0:  					//付款成功  					break;  				case 1:  					//交易创建  					break;  				case 2:  					//收获地址填写完毕  					break;  				case 4:  					//卖家发货成功  					break;  				case 5:  					//买家收货确认，交易成功  					break;  				case 6:  					//交易关闭，未完成超时关闭  					break;  				case 7:  					//修改交易价格成功  					break;  				case 8:  					//买家发起退款  					break;  				case 9:  					//退款成功  					break;  				case 10:  					//退款关闭  					break;  				}  				//------------------------------  				//中介担保处理业务开始  				//------------------------------  				//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  				proc.PaidSuccess ();  				return "Success";  			}  		} else {  			//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  			//通知财付通处理失败，需要重新通知\  			// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  			proc.PaidFail ();  			return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  			;  		}  	} else {  		//通知财付通处理失败，需要重新通知  		//SetLogMessage("后台调用通信失败\r\ncall err:" + httpClient.getErrInfo() + "<br>" + httpClient.getResponseCode() + "<br>");  		proc.PaidFail ();  		return "后台调用通信失败call err:" + httpClient.getErrInfo () + "<br>" + httpClient.getResponseCode () + "<br>";  	}  } else {  	proc.PaidFail ();  	return "通知签名验证失败";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (httpClient.call ()) {  	//设置结果参数  	ClientResponseHandler queryRes = new ClientResponseHandler ();  	queryRes.setContent (httpClient.getResContent ());  	queryRes.setKey (key);  	//判断签名及结果  	//只有签名正确'retcode为0，trade_state为0才是支付成功  	if (queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1") {  		//取结果参数做业务处理  		string out_trade_no = queryRes.getParameter ("out_trade_no");  		//财付通订单号  		string transaction_id = queryRes.getParameter ("transaction_id");  		//金额'以分为单位  		string total_fee = queryRes.getParameter ("total_fee");  		//如果有使用折扣券，discount有值，total_fee+discount=原请求的total_fee  		string discount = queryRes.getParameter ("discount");  		//支付结果  		string trade_state = resHandler.getParameter ("trade_state");  		//交易模式，1即时到帐 2中介担保  		string trade_mode = resHandler.getParameter ("trade_mode");  		proc.Init (out_trade_no);  		//判断签名及结果  		if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  			// Response.Write("id验证成功");  			if ("1".Equals (trade_mode)) {  				//即时到账   				if ("0".Equals (trade_state)) {  					proc.PaidSuccess ();  					return "Success";  				} else {  					proc.PaidFail ();  					//SetLogMessage("即时到账支付失败");  					return "即时到账支付失败";  				}  			} else if ("2".Equals (trade_mode)) {  				//中介担保  				//------------------------------  				//中介担保处理业务开始  				//------------------------------  				//处理数据库逻辑  				//注意交易单不要重复处理  				//注意判断返回金额  				int iStatus = 0;  				switch (iStatus) {  				case 0:  					//付款成功  					break;  				case 1:  					//交易创建  					break;  				case 2:  					//收获地址填写完毕  					break;  				case 4:  					//卖家发货成功  					break;  				case 5:  					//买家收货确认，交易成功  					break;  				case 6:  					//交易关闭，未完成超时关闭  					break;  				case 7:  					//修改交易价格成功  					break;  				case 8:  					//买家发起退款  					break;  				case 9:  					//退款成功  					break;  				case 10:  					//退款关闭  					break;  				}  				//------------------------------  				//中介担保处理业务开始  				//------------------------------  				//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  				proc.PaidSuccess ();  				return "Success";  			}  		} else {  			//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  			//通知财付通处理失败，需要重新通知\  			// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  			proc.PaidFail ();  			return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  			;  		}  	} else {  		//通知财付通处理失败，需要重新通知  		//SetLogMessage("后台调用通信失败\r\ncall err:" + httpClient.getErrInfo() + "<br>" + httpClient.getResponseCode() + "<br>");  		proc.PaidFail ();  		return "后台调用通信失败call err:" + httpClient.getErrInfo () + "<br>" + httpClient.getResponseCode () + "<br>";  	}  } else {  	proc.PaidFail ();  	return "通知签名验证失败";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (httpClient.call ()) {  	//设置结果参数  	ClientResponseHandler queryRes = new ClientResponseHandler ();  	queryRes.setContent (httpClient.getResContent ());  	queryRes.setKey (key);  	//判断签名及结果  	//只有签名正确'retcode为0，trade_state为0才是支付成功  	if (queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1") {  		//取结果参数做业务处理  		string out_trade_no = queryRes.getParameter ("out_trade_no");  		//财付通订单号  		string transaction_id = queryRes.getParameter ("transaction_id");  		//金额'以分为单位  		string total_fee = queryRes.getParameter ("total_fee");  		//如果有使用折扣券，discount有值，total_fee+discount=原请求的total_fee  		string discount = queryRes.getParameter ("discount");  		//支付结果  		string trade_state = resHandler.getParameter ("trade_state");  		//交易模式，1即时到帐 2中介担保  		string trade_mode = resHandler.getParameter ("trade_mode");  		proc.Init (out_trade_no);  		//判断签名及结果  		if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  			// Response.Write("id验证成功");  			if ("1".Equals (trade_mode)) {  				//即时到账   				if ("0".Equals (trade_state)) {  					proc.PaidSuccess ();  					return "Success";  				} else {  					proc.PaidFail ();  					//SetLogMessage("即时到账支付失败");  					return "即时到账支付失败";  				}  			} else if ("2".Equals (trade_mode)) {  				//中介担保  				//------------------------------  				//中介担保处理业务开始  				//------------------------------  				//处理数据库逻辑  				//注意交易单不要重复处理  				//注意判断返回金额  				int iStatus = 0;  				switch (iStatus) {  				case 0:  					//付款成功  					break;  				case 1:  					//交易创建  					break;  				case 2:  					//收获地址填写完毕  					break;  				case 4:  					//卖家发货成功  					break;  				case 5:  					//买家收货确认，交易成功  					break;  				case 6:  					//交易关闭，未完成超时关闭  					break;  				case 7:  					//修改交易价格成功  					break;  				case 8:  					//买家发起退款  					break;  				case 9:  					//退款成功  					break;  				case 10:  					//退款关闭  					break;  				}  				//------------------------------  				//中介担保处理业务开始  				//------------------------------  				//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  				proc.PaidSuccess ();  				return "Success";  			}  		} else {  			//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  			//通知财付通处理失败，需要重新通知\  			// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  			proc.PaidFail ();  			return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  			;  		}  	} else {  		//通知财付通处理失败，需要重新通知  		//SetLogMessage("后台调用通信失败\r\ncall err:" + httpClient.getErrInfo() + "<br>" + httpClient.getResponseCode() + "<br>");  		proc.PaidFail ();  		return "后台调用通信失败call err:" + httpClient.getErrInfo () + "<br>" + httpClient.getResponseCode () + "<br>";  	}  } else {  	proc.PaidFail ();  	return "通知签名验证失败";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (httpClient.call ()) {  	//设置结果参数  	ClientResponseHandler queryRes = new ClientResponseHandler ();  	queryRes.setContent (httpClient.getResContent ());  	queryRes.setKey (key);  	//判断签名及结果  	//只有签名正确'retcode为0，trade_state为0才是支付成功  	if (queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1") {  		//取结果参数做业务处理  		string out_trade_no = queryRes.getParameter ("out_trade_no");  		//财付通订单号  		string transaction_id = queryRes.getParameter ("transaction_id");  		//金额'以分为单位  		string total_fee = queryRes.getParameter ("total_fee");  		//如果有使用折扣券，discount有值，total_fee+discount=原请求的total_fee  		string discount = queryRes.getParameter ("discount");  		//支付结果  		string trade_state = resHandler.getParameter ("trade_state");  		//交易模式，1即时到帐 2中介担保  		string trade_mode = resHandler.getParameter ("trade_mode");  		proc.Init (out_trade_no);  		//判断签名及结果  		if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  			// Response.Write("id验证成功");  			if ("1".Equals (trade_mode)) {  				//即时到账   				if ("0".Equals (trade_state)) {  					proc.PaidSuccess ();  					return "Success";  				} else {  					proc.PaidFail ();  					//SetLogMessage("即时到账支付失败");  					return "即时到账支付失败";  				}  			} else if ("2".Equals (trade_mode)) {  				//中介担保  				//------------------------------  				//中介担保处理业务开始  				//------------------------------  				//处理数据库逻辑  				//注意交易单不要重复处理  				//注意判断返回金额  				int iStatus = 0;  				switch (iStatus) {  				case 0:  					//付款成功  					break;  				case 1:  					//交易创建  					break;  				case 2:  					//收获地址填写完毕  					break;  				case 4:  					//卖家发货成功  					break;  				case 5:  					//买家收货确认，交易成功  					break;  				case 6:  					//交易关闭，未完成超时关闭  					break;  				case 7:  					//修改交易价格成功  					break;  				case 8:  					//买家发起退款  					break;  				case 9:  					//退款成功  					break;  				case 10:  					//退款关闭  					break;  				}  				//------------------------------  				//中介担保处理业务开始  				//------------------------------  				//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  				proc.PaidSuccess ();  				return "Success";  			}  		} else {  			//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  			//通知财付通处理失败，需要重新通知\  			// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  			proc.PaidFail ();  			return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  			;  		}  	} else {  		//通知财付通处理失败，需要重新通知  		//SetLogMessage("后台调用通信失败\r\ncall err:" + httpClient.getErrInfo() + "<br>" + httpClient.getResponseCode() + "<br>");  		proc.PaidFail ();  		return "后台调用通信失败call err:" + httpClient.getErrInfo () + "<br>" + httpClient.getResponseCode () + "<br>";  	}  } else {  	proc.PaidFail ();  	return "通知签名验证失败";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (httpClient.call ()) {  	//设置结果参数  	ClientResponseHandler queryRes = new ClientResponseHandler ();  	queryRes.setContent (httpClient.getResContent ());  	queryRes.setKey (key);  	//判断签名及结果  	//只有签名正确'retcode为0，trade_state为0才是支付成功  	if (queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1") {  		//取结果参数做业务处理  		string out_trade_no = queryRes.getParameter ("out_trade_no");  		//财付通订单号  		string transaction_id = queryRes.getParameter ("transaction_id");  		//金额'以分为单位  		string total_fee = queryRes.getParameter ("total_fee");  		//如果有使用折扣券，discount有值，total_fee+discount=原请求的total_fee  		string discount = queryRes.getParameter ("discount");  		//支付结果  		string trade_state = resHandler.getParameter ("trade_state");  		//交易模式，1即时到帐 2中介担保  		string trade_mode = resHandler.getParameter ("trade_mode");  		proc.Init (out_trade_no);  		//判断签名及结果  		if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  			// Response.Write("id验证成功");  			if ("1".Equals (trade_mode)) {  				//即时到账   				if ("0".Equals (trade_state)) {  					proc.PaidSuccess ();  					return "Success";  				} else {  					proc.PaidFail ();  					//SetLogMessage("即时到账支付失败");  					return "即时到账支付失败";  				}  			} else if ("2".Equals (trade_mode)) {  				//中介担保  				//------------------------------  				//中介担保处理业务开始  				//------------------------------  				//处理数据库逻辑  				//注意交易单不要重复处理  				//注意判断返回金额  				int iStatus = 0;  				switch (iStatus) {  				case 0:  					//付款成功  					break;  				case 1:  					//交易创建  					break;  				case 2:  					//收获地址填写完毕  					break;  				case 4:  					//卖家发货成功  					break;  				case 5:  					//买家收货确认，交易成功  					break;  				case 6:  					//交易关闭，未完成超时关闭  					break;  				case 7:  					//修改交易价格成功  					break;  				case 8:  					//买家发起退款  					break;  				case 9:  					//退款成功  					break;  				case 10:  					//退款关闭  					break;  				}  				//------------------------------  				//中介担保处理业务开始  				//------------------------------  				//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  				proc.PaidSuccess ();  				return "Success";  			}  		} else {  			//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  			//通知财付通处理失败，需要重新通知\  			// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  			proc.PaidFail ();  			return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  			;  		}  	} else {  		//通知财付通处理失败，需要重新通知  		//SetLogMessage("后台调用通信失败\r\ncall err:" + httpClient.getErrInfo() + "<br>" + httpClient.getResponseCode() + "<br>");  		proc.PaidFail ();  		return "后台调用通信失败call err:" + httpClient.getErrInfo () + "<br>" + httpClient.getResponseCode () + "<br>";  	}  } else {  	proc.PaidFail ();  	return "通知签名验证失败";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (httpClient.call ()) {  	//设置结果参数  	ClientResponseHandler queryRes = new ClientResponseHandler ();  	queryRes.setContent (httpClient.getResContent ());  	queryRes.setKey (key);  	//判断签名及结果  	//只有签名正确'retcode为0，trade_state为0才是支付成功  	if (queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1") {  		//取结果参数做业务处理  		string out_trade_no = queryRes.getParameter ("out_trade_no");  		//财付通订单号  		string transaction_id = queryRes.getParameter ("transaction_id");  		//金额'以分为单位  		string total_fee = queryRes.getParameter ("total_fee");  		//如果有使用折扣券，discount有值，total_fee+discount=原请求的total_fee  		string discount = queryRes.getParameter ("discount");  		//支付结果  		string trade_state = resHandler.getParameter ("trade_state");  		//交易模式，1即时到帐 2中介担保  		string trade_mode = resHandler.getParameter ("trade_mode");  		proc.Init (out_trade_no);  		//判断签名及结果  		if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  			// Response.Write("id验证成功");  			if ("1".Equals (trade_mode)) {  				//即时到账   				if ("0".Equals (trade_state)) {  					proc.PaidSuccess ();  					return "Success";  				} else {  					proc.PaidFail ();  					//SetLogMessage("即时到账支付失败");  					return "即时到账支付失败";  				}  			} else if ("2".Equals (trade_mode)) {  				//中介担保  				//------------------------------  				//中介担保处理业务开始  				//------------------------------  				//处理数据库逻辑  				//注意交易单不要重复处理  				//注意判断返回金额  				int iStatus = 0;  				switch (iStatus) {  				case 0:  					//付款成功  					break;  				case 1:  					//交易创建  					break;  				case 2:  					//收获地址填写完毕  					break;  				case 4:  					//卖家发货成功  					break;  				case 5:  					//买家收货确认，交易成功  					break;  				case 6:  					//交易关闭，未完成超时关闭  					break;  				case 7:  					//修改交易价格成功  					break;  				case 8:  					//买家发起退款  					break;  				case 9:  					//退款成功  					break;  				case 10:  					//退款关闭  					break;  				}  				//------------------------------  				//中介担保处理业务开始  				//------------------------------  				//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  				proc.PaidSuccess ();  				return "Success";  			}  		} else {  			//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  			//通知财付通处理失败，需要重新通知\  			// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  			proc.PaidFail ();  			return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  			;  		}  	} else {  		//通知财付通处理失败，需要重新通知  		//SetLogMessage("后台调用通信失败\r\ncall err:" + httpClient.getErrInfo() + "<br>" + httpClient.getResponseCode() + "<br>");  		proc.PaidFail ();  		return "后台调用通信失败call err:" + httpClient.getErrInfo () + "<br>" + httpClient.getResponseCode () + "<br>";  	}  } else {  	proc.PaidFail ();  	return "通知签名验证失败";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1") {  	//取结果参数做业务处理  	string out_trade_no = queryRes.getParameter ("out_trade_no");  	//财付通订单号  	string transaction_id = queryRes.getParameter ("transaction_id");  	//金额'以分为单位  	string total_fee = queryRes.getParameter ("total_fee");  	//如果有使用折扣券，discount有值，total_fee+discount=原请求的total_fee  	string discount = queryRes.getParameter ("discount");  	//支付结果  	string trade_state = resHandler.getParameter ("trade_state");  	//交易模式，1即时到帐 2中介担保  	string trade_mode = resHandler.getParameter ("trade_mode");  	proc.Init (out_trade_no);  	//判断签名及结果  	if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  		// Response.Write("id验证成功");  		if ("1".Equals (trade_mode)) {  			//即时到账   			if ("0".Equals (trade_state)) {  				proc.PaidSuccess ();  				return "Success";  			} else {  				proc.PaidFail ();  				//SetLogMessage("即时到账支付失败");  				return "即时到账支付失败";  			}  		} else if ("2".Equals (trade_mode)) {  			//中介担保  			//------------------------------  			//中介担保处理业务开始  			//------------------------------  			//处理数据库逻辑  			//注意交易单不要重复处理  			//注意判断返回金额  			int iStatus = 0;  			switch (iStatus) {  			case 0:  				//付款成功  				break;  			case 1:  				//交易创建  				break;  			case 2:  				//收获地址填写完毕  				break;  			case 4:  				//卖家发货成功  				break;  			case 5:  				//买家收货确认，交易成功  				break;  			case 6:  				//交易关闭，未完成超时关闭  				break;  			case 7:  				//修改交易价格成功  				break;  			case 8:  				//买家发起退款  				break;  			case 9:  				//退款成功  				break;  			case 10:  				//退款关闭  				break;  			}  			//------------------------------  			//中介担保处理业务开始  			//------------------------------  			//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  			proc.PaidSuccess ();  			return "Success";  		}  	} else {  		//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  		//通知财付通处理失败，需要重新通知\  		// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  		proc.PaidFail ();  		return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  		;  	}  } else {  	//通知财付通处理失败，需要重新通知  	//SetLogMessage("后台调用通信失败\r\ncall err:" + httpClient.getErrInfo() + "<br>" + httpClient.getResponseCode() + "<br>");  	proc.PaidFail ();  	return "后台调用通信失败call err:" + httpClient.getErrInfo () + "<br>" + httpClient.getResponseCode () + "<br>";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1") {  	//取结果参数做业务处理  	string out_trade_no = queryRes.getParameter ("out_trade_no");  	//财付通订单号  	string transaction_id = queryRes.getParameter ("transaction_id");  	//金额'以分为单位  	string total_fee = queryRes.getParameter ("total_fee");  	//如果有使用折扣券，discount有值，total_fee+discount=原请求的total_fee  	string discount = queryRes.getParameter ("discount");  	//支付结果  	string trade_state = resHandler.getParameter ("trade_state");  	//交易模式，1即时到帐 2中介担保  	string trade_mode = resHandler.getParameter ("trade_mode");  	proc.Init (out_trade_no);  	//判断签名及结果  	if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  		// Response.Write("id验证成功");  		if ("1".Equals (trade_mode)) {  			//即时到账   			if ("0".Equals (trade_state)) {  				proc.PaidSuccess ();  				return "Success";  			} else {  				proc.PaidFail ();  				//SetLogMessage("即时到账支付失败");  				return "即时到账支付失败";  			}  		} else if ("2".Equals (trade_mode)) {  			//中介担保  			//------------------------------  			//中介担保处理业务开始  			//------------------------------  			//处理数据库逻辑  			//注意交易单不要重复处理  			//注意判断返回金额  			int iStatus = 0;  			switch (iStatus) {  			case 0:  				//付款成功  				break;  			case 1:  				//交易创建  				break;  			case 2:  				//收获地址填写完毕  				break;  			case 4:  				//卖家发货成功  				break;  			case 5:  				//买家收货确认，交易成功  				break;  			case 6:  				//交易关闭，未完成超时关闭  				break;  			case 7:  				//修改交易价格成功  				break;  			case 8:  				//买家发起退款  				break;  			case 9:  				//退款成功  				break;  			case 10:  				//退款关闭  				break;  			}  			//------------------------------  			//中介担保处理业务开始  			//------------------------------  			//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  			proc.PaidSuccess ();  			return "Success";  		}  	} else {  		//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  		//通知财付通处理失败，需要重新通知\  		// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  		proc.PaidFail ();  		return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  		;  	}  } else {  	//通知财付通处理失败，需要重新通知  	//SetLogMessage("后台调用通信失败\r\ncall err:" + httpClient.getErrInfo() + "<br>" + httpClient.getResponseCode() + "<br>");  	proc.PaidFail ();  	return "后台调用通信失败call err:" + httpClient.getErrInfo () + "<br>" + httpClient.getResponseCode () + "<br>";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1") {  	//取结果参数做业务处理  	string out_trade_no = queryRes.getParameter ("out_trade_no");  	//财付通订单号  	string transaction_id = queryRes.getParameter ("transaction_id");  	//金额'以分为单位  	string total_fee = queryRes.getParameter ("total_fee");  	//如果有使用折扣券，discount有值，total_fee+discount=原请求的total_fee  	string discount = queryRes.getParameter ("discount");  	//支付结果  	string trade_state = resHandler.getParameter ("trade_state");  	//交易模式，1即时到帐 2中介担保  	string trade_mode = resHandler.getParameter ("trade_mode");  	proc.Init (out_trade_no);  	//判断签名及结果  	if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  		// Response.Write("id验证成功");  		if ("1".Equals (trade_mode)) {  			//即时到账   			if ("0".Equals (trade_state)) {  				proc.PaidSuccess ();  				return "Success";  			} else {  				proc.PaidFail ();  				//SetLogMessage("即时到账支付失败");  				return "即时到账支付失败";  			}  		} else if ("2".Equals (trade_mode)) {  			//中介担保  			//------------------------------  			//中介担保处理业务开始  			//------------------------------  			//处理数据库逻辑  			//注意交易单不要重复处理  			//注意判断返回金额  			int iStatus = 0;  			switch (iStatus) {  			case 0:  				//付款成功  				break;  			case 1:  				//交易创建  				break;  			case 2:  				//收获地址填写完毕  				break;  			case 4:  				//卖家发货成功  				break;  			case 5:  				//买家收货确认，交易成功  				break;  			case 6:  				//交易关闭，未完成超时关闭  				break;  			case 7:  				//修改交易价格成功  				break;  			case 8:  				//买家发起退款  				break;  			case 9:  				//退款成功  				break;  			case 10:  				//退款关闭  				break;  			}  			//------------------------------  			//中介担保处理业务开始  			//------------------------------  			//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  			proc.PaidSuccess ();  			return "Success";  		}  	} else {  		//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  		//通知财付通处理失败，需要重新通知\  		// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  		proc.PaidFail ();  		return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  		;  	}  } else {  	//通知财付通处理失败，需要重新通知  	//SetLogMessage("后台调用通信失败\r\ncall err:" + httpClient.getErrInfo() + "<br>" + httpClient.getResponseCode() + "<br>");  	proc.PaidFail ();  	return "后台调用通信失败call err:" + httpClient.getErrInfo () + "<br>" + httpClient.getResponseCode () + "<br>";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1") {  	//取结果参数做业务处理  	string out_trade_no = queryRes.getParameter ("out_trade_no");  	//财付通订单号  	string transaction_id = queryRes.getParameter ("transaction_id");  	//金额'以分为单位  	string total_fee = queryRes.getParameter ("total_fee");  	//如果有使用折扣券，discount有值，total_fee+discount=原请求的total_fee  	string discount = queryRes.getParameter ("discount");  	//支付结果  	string trade_state = resHandler.getParameter ("trade_state");  	//交易模式，1即时到帐 2中介担保  	string trade_mode = resHandler.getParameter ("trade_mode");  	proc.Init (out_trade_no);  	//判断签名及结果  	if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  		// Response.Write("id验证成功");  		if ("1".Equals (trade_mode)) {  			//即时到账   			if ("0".Equals (trade_state)) {  				proc.PaidSuccess ();  				return "Success";  			} else {  				proc.PaidFail ();  				//SetLogMessage("即时到账支付失败");  				return "即时到账支付失败";  			}  		} else if ("2".Equals (trade_mode)) {  			//中介担保  			//------------------------------  			//中介担保处理业务开始  			//------------------------------  			//处理数据库逻辑  			//注意交易单不要重复处理  			//注意判断返回金额  			int iStatus = 0;  			switch (iStatus) {  			case 0:  				//付款成功  				break;  			case 1:  				//交易创建  				break;  			case 2:  				//收获地址填写完毕  				break;  			case 4:  				//卖家发货成功  				break;  			case 5:  				//买家收货确认，交易成功  				break;  			case 6:  				//交易关闭，未完成超时关闭  				break;  			case 7:  				//修改交易价格成功  				break;  			case 8:  				//买家发起退款  				break;  			case 9:  				//退款成功  				break;  			case 10:  				//退款关闭  				break;  			}  			//------------------------------  			//中介担保处理业务开始  			//------------------------------  			//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  			proc.PaidSuccess ();  			return "Success";  		}  	} else {  		//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  		//通知财付通处理失败，需要重新通知\  		// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  		proc.PaidFail ();  		return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  		;  	}  } else {  	//通知财付通处理失败，需要重新通知  	//SetLogMessage("后台调用通信失败\r\ncall err:" + httpClient.getErrInfo() + "<br>" + httpClient.getResponseCode() + "<br>");  	proc.PaidFail ();  	return "后台调用通信失败call err:" + httpClient.getErrInfo () + "<br>" + httpClient.getResponseCode () + "<br>";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1") {  	//取结果参数做业务处理  	string out_trade_no = queryRes.getParameter ("out_trade_no");  	//财付通订单号  	string transaction_id = queryRes.getParameter ("transaction_id");  	//金额'以分为单位  	string total_fee = queryRes.getParameter ("total_fee");  	//如果有使用折扣券，discount有值，total_fee+discount=原请求的total_fee  	string discount = queryRes.getParameter ("discount");  	//支付结果  	string trade_state = resHandler.getParameter ("trade_state");  	//交易模式，1即时到帐 2中介担保  	string trade_mode = resHandler.getParameter ("trade_mode");  	proc.Init (out_trade_no);  	//判断签名及结果  	if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  		// Response.Write("id验证成功");  		if ("1".Equals (trade_mode)) {  			//即时到账   			if ("0".Equals (trade_state)) {  				proc.PaidSuccess ();  				return "Success";  			} else {  				proc.PaidFail ();  				//SetLogMessage("即时到账支付失败");  				return "即时到账支付失败";  			}  		} else if ("2".Equals (trade_mode)) {  			//中介担保  			//------------------------------  			//中介担保处理业务开始  			//------------------------------  			//处理数据库逻辑  			//注意交易单不要重复处理  			//注意判断返回金额  			int iStatus = 0;  			switch (iStatus) {  			case 0:  				//付款成功  				break;  			case 1:  				//交易创建  				break;  			case 2:  				//收获地址填写完毕  				break;  			case 4:  				//卖家发货成功  				break;  			case 5:  				//买家收货确认，交易成功  				break;  			case 6:  				//交易关闭，未完成超时关闭  				break;  			case 7:  				//修改交易价格成功  				break;  			case 8:  				//买家发起退款  				break;  			case 9:  				//退款成功  				break;  			case 10:  				//退款关闭  				break;  			}  			//------------------------------  			//中介担保处理业务开始  			//------------------------------  			//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  			proc.PaidSuccess ();  			return "Success";  		}  	} else {  		//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  		//通知财付通处理失败，需要重新通知\  		// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  		proc.PaidFail ();  		return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  		;  	}  } else {  	//通知财付通处理失败，需要重新通知  	//SetLogMessage("后台调用通信失败\r\ncall err:" + httpClient.getErrInfo() + "<br>" + httpClient.getResponseCode() + "<br>");  	proc.PaidFail ();  	return "后台调用通信失败call err:" + httpClient.getErrInfo () + "<br>" + httpClient.getResponseCode () + "<br>";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1") {  	//取结果参数做业务处理  	string out_trade_no = queryRes.getParameter ("out_trade_no");  	//财付通订单号  	string transaction_id = queryRes.getParameter ("transaction_id");  	//金额'以分为单位  	string total_fee = queryRes.getParameter ("total_fee");  	//如果有使用折扣券，discount有值，total_fee+discount=原请求的total_fee  	string discount = queryRes.getParameter ("discount");  	//支付结果  	string trade_state = resHandler.getParameter ("trade_state");  	//交易模式，1即时到帐 2中介担保  	string trade_mode = resHandler.getParameter ("trade_mode");  	proc.Init (out_trade_no);  	//判断签名及结果  	if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  		// Response.Write("id验证成功");  		if ("1".Equals (trade_mode)) {  			//即时到账   			if ("0".Equals (trade_state)) {  				proc.PaidSuccess ();  				return "Success";  			} else {  				proc.PaidFail ();  				//SetLogMessage("即时到账支付失败");  				return "即时到账支付失败";  			}  		} else if ("2".Equals (trade_mode)) {  			//中介担保  			//------------------------------  			//中介担保处理业务开始  			//------------------------------  			//处理数据库逻辑  			//注意交易单不要重复处理  			//注意判断返回金额  			int iStatus = 0;  			switch (iStatus) {  			case 0:  				//付款成功  				break;  			case 1:  				//交易创建  				break;  			case 2:  				//收获地址填写完毕  				break;  			case 4:  				//卖家发货成功  				break;  			case 5:  				//买家收货确认，交易成功  				break;  			case 6:  				//交易关闭，未完成超时关闭  				break;  			case 7:  				//修改交易价格成功  				break;  			case 8:  				//买家发起退款  				break;  			case 9:  				//退款成功  				break;  			case 10:  				//退款关闭  				break;  			}  			//------------------------------  			//中介担保处理业务开始  			//------------------------------  			//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  			proc.PaidSuccess ();  			return "Success";  		}  	} else {  		//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  		//通知财付通处理失败，需要重新通知\  		// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  		proc.PaidFail ();  		return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  		;  	}  } else {  	//通知财付通处理失败，需要重新通知  	//SetLogMessage("后台调用通信失败\r\ncall err:" + httpClient.getErrInfo() + "<br>" + httpClient.getResponseCode() + "<br>");  	proc.PaidFail ();  	return "后台调用通信失败call err:" + httpClient.getErrInfo () + "<br>" + httpClient.getResponseCode () + "<br>";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1") {  	//取结果参数做业务处理  	string out_trade_no = queryRes.getParameter ("out_trade_no");  	//财付通订单号  	string transaction_id = queryRes.getParameter ("transaction_id");  	//金额'以分为单位  	string total_fee = queryRes.getParameter ("total_fee");  	//如果有使用折扣券，discount有值，total_fee+discount=原请求的total_fee  	string discount = queryRes.getParameter ("discount");  	//支付结果  	string trade_state = resHandler.getParameter ("trade_state");  	//交易模式，1即时到帐 2中介担保  	string trade_mode = resHandler.getParameter ("trade_mode");  	proc.Init (out_trade_no);  	//判断签名及结果  	if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  		// Response.Write("id验证成功");  		if ("1".Equals (trade_mode)) {  			//即时到账   			if ("0".Equals (trade_state)) {  				proc.PaidSuccess ();  				return "Success";  			} else {  				proc.PaidFail ();  				//SetLogMessage("即时到账支付失败");  				return "即时到账支付失败";  			}  		} else if ("2".Equals (trade_mode)) {  			//中介担保  			//------------------------------  			//中介担保处理业务开始  			//------------------------------  			//处理数据库逻辑  			//注意交易单不要重复处理  			//注意判断返回金额  			int iStatus = 0;  			switch (iStatus) {  			case 0:  				//付款成功  				break;  			case 1:  				//交易创建  				break;  			case 2:  				//收获地址填写完毕  				break;  			case 4:  				//卖家发货成功  				break;  			case 5:  				//买家收货确认，交易成功  				break;  			case 6:  				//交易关闭，未完成超时关闭  				break;  			case 7:  				//修改交易价格成功  				break;  			case 8:  				//买家发起退款  				break;  			case 9:  				//退款成功  				break;  			case 10:  				//退款关闭  				break;  			}  			//------------------------------  			//中介担保处理业务开始  			//------------------------------  			//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  			proc.PaidSuccess ();  			return "Success";  		}  	} else {  		//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  		//通知财付通处理失败，需要重新通知\  		// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  		proc.PaidFail ();  		return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  		;  	}  } else {  	//通知财付通处理失败，需要重新通知  	//SetLogMessage("后台调用通信失败\r\ncall err:" + httpClient.getErrInfo() + "<br>" + httpClient.getResponseCode() + "<br>");  	proc.PaidFail ();  	return "后台调用通信失败call err:" + httpClient.getErrInfo () + "<br>" + httpClient.getResponseCode () + "<br>";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (queryRes.isTenpaySign () && queryRes.getParameter ("retcode") == "0" && queryRes.getParameter ("trade_state") == "0" && queryRes.getParameter ("trade_mode") == "1") {  	//取结果参数做业务处理  	string out_trade_no = queryRes.getParameter ("out_trade_no");  	//财付通订单号  	string transaction_id = queryRes.getParameter ("transaction_id");  	//金额'以分为单位  	string total_fee = queryRes.getParameter ("total_fee");  	//如果有使用折扣券，discount有值，total_fee+discount=原请求的total_fee  	string discount = queryRes.getParameter ("discount");  	//支付结果  	string trade_state = resHandler.getParameter ("trade_state");  	//交易模式，1即时到帐 2中介担保  	string trade_mode = resHandler.getParameter ("trade_mode");  	proc.Init (out_trade_no);  	//判断签名及结果  	if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  		// Response.Write("id验证成功");  		if ("1".Equals (trade_mode)) {  			//即时到账   			if ("0".Equals (trade_state)) {  				proc.PaidSuccess ();  				return "Success";  			} else {  				proc.PaidFail ();  				//SetLogMessage("即时到账支付失败");  				return "即时到账支付失败";  			}  		} else if ("2".Equals (trade_mode)) {  			//中介担保  			//------------------------------  			//中介担保处理业务开始  			//------------------------------  			//处理数据库逻辑  			//注意交易单不要重复处理  			//注意判断返回金额  			int iStatus = 0;  			switch (iStatus) {  			case 0:  				//付款成功  				break;  			case 1:  				//交易创建  				break;  			case 2:  				//收获地址填写完毕  				break;  			case 4:  				//卖家发货成功  				break;  			case 5:  				//买家收货确认，交易成功  				break;  			case 6:  				//交易关闭，未完成超时关闭  				break;  			case 7:  				//修改交易价格成功  				break;  			case 8:  				//买家发起退款  				break;  			case 9:  				//退款成功  				break;  			case 10:  				//退款关闭  				break;  			}  			//------------------------------  			//中介担保处理业务开始  			//------------------------------  			//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  			proc.PaidSuccess ();  			return "Success";  		}  	} else {  		//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  		//通知财付通处理失败，需要重新通知\  		// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  		proc.PaidFail ();  		return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  		;  	}  } else {  	//通知财付通处理失败，需要重新通知  	//SetLogMessage("后台调用通信失败\r\ncall err:" + httpClient.getErrInfo() + "<br>" + httpClient.getResponseCode() + "<br>");  	proc.PaidFail ();  	return "后台调用通信失败call err:" + httpClient.getErrInfo () + "<br>" + httpClient.getResponseCode () + "<br>";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  	// Response.Write("id验证成功");  	if ("1".Equals (trade_mode)) {  		//即时到账   		if ("0".Equals (trade_state)) {  			proc.PaidSuccess ();  			return "Success";  		} else {  			proc.PaidFail ();  			//SetLogMessage("即时到账支付失败");  			return "即时到账支付失败";  		}  	} else if ("2".Equals (trade_mode)) {  		//中介担保  		//------------------------------  		//中介担保处理业务开始  		//------------------------------  		//处理数据库逻辑  		//注意交易单不要重复处理  		//注意判断返回金额  		int iStatus = 0;  		switch (iStatus) {  		case 0:  			//付款成功  			break;  		case 1:  			//交易创建  			break;  		case 2:  			//收获地址填写完毕  			break;  		case 4:  			//卖家发货成功  			break;  		case 5:  			//买家收货确认，交易成功  			break;  		case 6:  			//交易关闭，未完成超时关闭  			break;  		case 7:  			//修改交易价格成功  			break;  		case 8:  			//买家发起退款  			break;  		case 9:  			//退款成功  			break;  		case 10:  			//退款关闭  			break;  		}  		//------------------------------  		//中介担保处理业务开始  		//------------------------------  		//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  		proc.PaidSuccess ();  		return "Success";  	}  } else {  	//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  	//通知财付通处理失败，需要重新通知\  	// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  	proc.PaidFail ();  	return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  	;  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  	// Response.Write("id验证成功");  	if ("1".Equals (trade_mode)) {  		//即时到账   		if ("0".Equals (trade_state)) {  			proc.PaidSuccess ();  			return "Success";  		} else {  			proc.PaidFail ();  			//SetLogMessage("即时到账支付失败");  			return "即时到账支付失败";  		}  	} else if ("2".Equals (trade_mode)) {  		//中介担保  		//------------------------------  		//中介担保处理业务开始  		//------------------------------  		//处理数据库逻辑  		//注意交易单不要重复处理  		//注意判断返回金额  		int iStatus = 0;  		switch (iStatus) {  		case 0:  			//付款成功  			break;  		case 1:  			//交易创建  			break;  		case 2:  			//收获地址填写完毕  			break;  		case 4:  			//卖家发货成功  			break;  		case 5:  			//买家收货确认，交易成功  			break;  		case 6:  			//交易关闭，未完成超时关闭  			break;  		case 7:  			//修改交易价格成功  			break;  		case 8:  			//买家发起退款  			break;  		case 9:  			//退款成功  			break;  		case 10:  			//退款关闭  			break;  		}  		//------------------------------  		//中介担保处理业务开始  		//------------------------------  		//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  		proc.PaidSuccess ();  		return "Success";  	}  } else {  	//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  	//通知财付通处理失败，需要重新通知\  	// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  	proc.PaidFail ();  	return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  	;  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  	// Response.Write("id验证成功");  	if ("1".Equals (trade_mode)) {  		//即时到账   		if ("0".Equals (trade_state)) {  			proc.PaidSuccess ();  			return "Success";  		} else {  			proc.PaidFail ();  			//SetLogMessage("即时到账支付失败");  			return "即时到账支付失败";  		}  	} else if ("2".Equals (trade_mode)) {  		//中介担保  		//------------------------------  		//中介担保处理业务开始  		//------------------------------  		//处理数据库逻辑  		//注意交易单不要重复处理  		//注意判断返回金额  		int iStatus = 0;  		switch (iStatus) {  		case 0:  			//付款成功  			break;  		case 1:  			//交易创建  			break;  		case 2:  			//收获地址填写完毕  			break;  		case 4:  			//卖家发货成功  			break;  		case 5:  			//买家收货确认，交易成功  			break;  		case 6:  			//交易关闭，未完成超时关闭  			break;  		case 7:  			//修改交易价格成功  			break;  		case 8:  			//买家发起退款  			break;  		case 9:  			//退款成功  			break;  		case 10:  			//退款关闭  			break;  		}  		//------------------------------  		//中介担保处理业务开始  		//------------------------------  		//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  		proc.PaidSuccess ();  		return "Success";  	}  } else {  	//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  	//通知财付通处理失败，需要重新通知\  	// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  	proc.PaidFail ();  	return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  	;  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  	// Response.Write("id验证成功");  	if ("1".Equals (trade_mode)) {  		//即时到账   		if ("0".Equals (trade_state)) {  			proc.PaidSuccess ();  			return "Success";  		} else {  			proc.PaidFail ();  			//SetLogMessage("即时到账支付失败");  			return "即时到账支付失败";  		}  	} else if ("2".Equals (trade_mode)) {  		//中介担保  		//------------------------------  		//中介担保处理业务开始  		//------------------------------  		//处理数据库逻辑  		//注意交易单不要重复处理  		//注意判断返回金额  		int iStatus = 0;  		switch (iStatus) {  		case 0:  			//付款成功  			break;  		case 1:  			//交易创建  			break;  		case 2:  			//收获地址填写完毕  			break;  		case 4:  			//卖家发货成功  			break;  		case 5:  			//买家收货确认，交易成功  			break;  		case 6:  			//交易关闭，未完成超时关闭  			break;  		case 7:  			//修改交易价格成功  			break;  		case 8:  			//买家发起退款  			break;  		case 9:  			//退款成功  			break;  		case 10:  			//退款关闭  			break;  		}  		//------------------------------  		//中介担保处理业务开始  		//------------------------------  		//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  		proc.PaidSuccess ();  		return "Success";  	}  } else {  	//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  	//通知财付通处理失败，需要重新通知\  	// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  	proc.PaidFail ();  	return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  	;  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  	// Response.Write("id验证成功");  	if ("1".Equals (trade_mode)) {  		//即时到账   		if ("0".Equals (trade_state)) {  			proc.PaidSuccess ();  			return "Success";  		} else {  			proc.PaidFail ();  			//SetLogMessage("即时到账支付失败");  			return "即时到账支付失败";  		}  	} else if ("2".Equals (trade_mode)) {  		//中介担保  		//------------------------------  		//中介担保处理业务开始  		//------------------------------  		//处理数据库逻辑  		//注意交易单不要重复处理  		//注意判断返回金额  		int iStatus = 0;  		switch (iStatus) {  		case 0:  			//付款成功  			break;  		case 1:  			//交易创建  			break;  		case 2:  			//收获地址填写完毕  			break;  		case 4:  			//卖家发货成功  			break;  		case 5:  			//买家收货确认，交易成功  			break;  		case 6:  			//交易关闭，未完成超时关闭  			break;  		case 7:  			//修改交易价格成功  			break;  		case 8:  			//买家发起退款  			break;  		case 9:  			//退款成功  			break;  		case 10:  			//退款关闭  			break;  		}  		//------------------------------  		//中介担保处理业务开始  		//------------------------------  		//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  		proc.PaidSuccess ();  		return "Success";  	}  } else {  	//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  	//通知财付通处理失败，需要重新通知\  	// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  	proc.PaidFail ();  	return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  	;  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  	// Response.Write("id验证成功");  	if ("1".Equals (trade_mode)) {  		//即时到账   		if ("0".Equals (trade_state)) {  			proc.PaidSuccess ();  			return "Success";  		} else {  			proc.PaidFail ();  			//SetLogMessage("即时到账支付失败");  			return "即时到账支付失败";  		}  	} else if ("2".Equals (trade_mode)) {  		//中介担保  		//------------------------------  		//中介担保处理业务开始  		//------------------------------  		//处理数据库逻辑  		//注意交易单不要重复处理  		//注意判断返回金额  		int iStatus = 0;  		switch (iStatus) {  		case 0:  			//付款成功  			break;  		case 1:  			//交易创建  			break;  		case 2:  			//收获地址填写完毕  			break;  		case 4:  			//卖家发货成功  			break;  		case 5:  			//买家收货确认，交易成功  			break;  		case 6:  			//交易关闭，未完成超时关闭  			break;  		case 7:  			//修改交易价格成功  			break;  		case 8:  			//买家发起退款  			break;  		case 9:  			//退款成功  			break;  		case 10:  			//退款关闭  			break;  		}  		//------------------------------  		//中介担保处理业务开始  		//------------------------------  		//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  		proc.PaidSuccess ();  		return "Success";  	}  } else {  	//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  	//通知财付通处理失败，需要重新通知\  	// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  	proc.PaidFail ();  	return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  	;  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  	// Response.Write("id验证成功");  	if ("1".Equals (trade_mode)) {  		//即时到账   		if ("0".Equals (trade_state)) {  			proc.PaidSuccess ();  			return "Success";  		} else {  			proc.PaidFail ();  			//SetLogMessage("即时到账支付失败");  			return "即时到账支付失败";  		}  	} else if ("2".Equals (trade_mode)) {  		//中介担保  		//------------------------------  		//中介担保处理业务开始  		//------------------------------  		//处理数据库逻辑  		//注意交易单不要重复处理  		//注意判断返回金额  		int iStatus = 0;  		switch (iStatus) {  		case 0:  			//付款成功  			break;  		case 1:  			//交易创建  			break;  		case 2:  			//收获地址填写完毕  			break;  		case 4:  			//卖家发货成功  			break;  		case 5:  			//买家收货确认，交易成功  			break;  		case 6:  			//交易关闭，未完成超时关闭  			break;  		case 7:  			//修改交易价格成功  			break;  		case 8:  			//买家发起退款  			break;  		case 9:  			//退款成功  			break;  		case 10:  			//退款关闭  			break;  		}  		//------------------------------  		//中介担保处理业务开始  		//------------------------------  		//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  		proc.PaidSuccess ();  		return "Success";  	}  } else {  	//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  	//通知财付通处理失败，需要重新通知\  	// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  	proc.PaidFail ();  	return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  	;  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if (queryRes.isTenpaySign () && "0".Equals (queryRes.getParameter ("retcode"))) {  	// Response.Write("id验证成功");  	if ("1".Equals (trade_mode)) {  		//即时到账   		if ("0".Equals (trade_state)) {  			proc.PaidSuccess ();  			return "Success";  		} else {  			proc.PaidFail ();  			//SetLogMessage("即时到账支付失败");  			return "即时到账支付失败";  		}  	} else if ("2".Equals (trade_mode)) {  		//中介担保  		//------------------------------  		//中介担保处理业务开始  		//------------------------------  		//处理数据库逻辑  		//注意交易单不要重复处理  		//注意判断返回金额  		int iStatus = 0;  		switch (iStatus) {  		case 0:  			//付款成功  			break;  		case 1:  			//交易创建  			break;  		case 2:  			//收获地址填写完毕  			break;  		case 4:  			//卖家发货成功  			break;  		case 5:  			//买家收货确认，交易成功  			break;  		case 6:  			//交易关闭，未完成超时关闭  			break;  		case 7:  			//修改交易价格成功  			break;  		case 8:  			//买家发起退款  			break;  		case 9:  			//退款成功  			break;  		case 10:  			//退款关闭  			break;  		}  		//------------------------------  		//中介担保处理业务开始  		//------------------------------  		//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  		proc.PaidSuccess ();  		return "Success";  	}  } else {  	//错误时，返回结果可能没有签名，写日志trade_state、retcode、retmsg看失败详情。  	//通知财付通处理失败，需要重新通知\  	// SetLogMessage("查询验证签名失败或id验证失败\r\nretcode:" + queryRes.getParameter("retcode"));  	proc.PaidFail ();  	return "查询验证签名失败或id验证失败retcode:" + queryRes.getParameter ("retcode");  	;  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if ("1".Equals (trade_mode)) {  	//即时到账   	if ("0".Equals (trade_state)) {  		proc.PaidSuccess ();  		return "Success";  	} else {  		proc.PaidFail ();  		//SetLogMessage("即时到账支付失败");  		return "即时到账支付失败";  	}  } else if ("2".Equals (trade_mode)) {  	//中介担保  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//处理数据库逻辑  	//注意交易单不要重复处理  	//注意判断返回金额  	int iStatus = 0;  	switch (iStatus) {  	case 0:  		//付款成功  		break;  	case 1:  		//交易创建  		break;  	case 2:  		//收获地址填写完毕  		break;  	case 4:  		//卖家发货成功  		break;  	case 5:  		//买家收货确认，交易成功  		break;  	case 6:  		//交易关闭，未完成超时关闭  		break;  	case 7:  		//修改交易价格成功  		break;  	case 8:  		//买家发起退款  		break;  	case 9:  		//退款成功  		break;  	case 10:  		//退款关闭  		break;  	}  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  	proc.PaidSuccess ();  	return "Success";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if ("1".Equals (trade_mode)) {  	//即时到账   	if ("0".Equals (trade_state)) {  		proc.PaidSuccess ();  		return "Success";  	} else {  		proc.PaidFail ();  		//SetLogMessage("即时到账支付失败");  		return "即时到账支付失败";  	}  } else if ("2".Equals (trade_mode)) {  	//中介担保  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//处理数据库逻辑  	//注意交易单不要重复处理  	//注意判断返回金额  	int iStatus = 0;  	switch (iStatus) {  	case 0:  		//付款成功  		break;  	case 1:  		//交易创建  		break;  	case 2:  		//收获地址填写完毕  		break;  	case 4:  		//卖家发货成功  		break;  	case 5:  		//买家收货确认，交易成功  		break;  	case 6:  		//交易关闭，未完成超时关闭  		break;  	case 7:  		//修改交易价格成功  		break;  	case 8:  		//买家发起退款  		break;  	case 9:  		//退款成功  		break;  	case 10:  		//退款关闭  		break;  	}  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  	proc.PaidSuccess ();  	return "Success";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if ("1".Equals (trade_mode)) {  	//即时到账   	if ("0".Equals (trade_state)) {  		proc.PaidSuccess ();  		return "Success";  	} else {  		proc.PaidFail ();  		//SetLogMessage("即时到账支付失败");  		return "即时到账支付失败";  	}  } else if ("2".Equals (trade_mode)) {  	//中介担保  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//处理数据库逻辑  	//注意交易单不要重复处理  	//注意判断返回金额  	int iStatus = 0;  	switch (iStatus) {  	case 0:  		//付款成功  		break;  	case 1:  		//交易创建  		break;  	case 2:  		//收获地址填写完毕  		break;  	case 4:  		//卖家发货成功  		break;  	case 5:  		//买家收货确认，交易成功  		break;  	case 6:  		//交易关闭，未完成超时关闭  		break;  	case 7:  		//修改交易价格成功  		break;  	case 8:  		//买家发起退款  		break;  	case 9:  		//退款成功  		break;  	case 10:  		//退款关闭  		break;  	}  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  	proc.PaidSuccess ();  	return "Success";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if ("1".Equals (trade_mode)) {  	//即时到账   	if ("0".Equals (trade_state)) {  		proc.PaidSuccess ();  		return "Success";  	} else {  		proc.PaidFail ();  		//SetLogMessage("即时到账支付失败");  		return "即时到账支付失败";  	}  } else if ("2".Equals (trade_mode)) {  	//中介担保  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//处理数据库逻辑  	//注意交易单不要重复处理  	//注意判断返回金额  	int iStatus = 0;  	switch (iStatus) {  	case 0:  		//付款成功  		break;  	case 1:  		//交易创建  		break;  	case 2:  		//收获地址填写完毕  		break;  	case 4:  		//卖家发货成功  		break;  	case 5:  		//买家收货确认，交易成功  		break;  	case 6:  		//交易关闭，未完成超时关闭  		break;  	case 7:  		//修改交易价格成功  		break;  	case 8:  		//买家发起退款  		break;  	case 9:  		//退款成功  		break;  	case 10:  		//退款关闭  		break;  	}  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  	proc.PaidSuccess ();  	return "Success";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if ("1".Equals (trade_mode)) {  	//即时到账   	if ("0".Equals (trade_state)) {  		proc.PaidSuccess ();  		return "Success";  	} else {  		proc.PaidFail ();  		//SetLogMessage("即时到账支付失败");  		return "即时到账支付失败";  	}  } else if ("2".Equals (trade_mode)) {  	//中介担保  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//处理数据库逻辑  	//注意交易单不要重复处理  	//注意判断返回金额  	int iStatus = 0;  	switch (iStatus) {  	case 0:  		//付款成功  		break;  	case 1:  		//交易创建  		break;  	case 2:  		//收获地址填写完毕  		break;  	case 4:  		//卖家发货成功  		break;  	case 5:  		//买家收货确认，交易成功  		break;  	case 6:  		//交易关闭，未完成超时关闭  		break;  	case 7:  		//修改交易价格成功  		break;  	case 8:  		//买家发起退款  		break;  	case 9:  		//退款成功  		break;  	case 10:  		//退款关闭  		break;  	}  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  	proc.PaidSuccess ();  	return "Success";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if ("1".Equals (trade_mode)) {  	//即时到账   	if ("0".Equals (trade_state)) {  		proc.PaidSuccess ();  		return "Success";  	} else {  		proc.PaidFail ();  		//SetLogMessage("即时到账支付失败");  		return "即时到账支付失败";  	}  } else if ("2".Equals (trade_mode)) {  	//中介担保  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//处理数据库逻辑  	//注意交易单不要重复处理  	//注意判断返回金额  	int iStatus = 0;  	switch (iStatus) {  	case 0:  		//付款成功  		break;  	case 1:  		//交易创建  		break;  	case 2:  		//收获地址填写完毕  		break;  	case 4:  		//卖家发货成功  		break;  	case 5:  		//买家收货确认，交易成功  		break;  	case 6:  		//交易关闭，未完成超时关闭  		break;  	case 7:  		//修改交易价格成功  		break;  	case 8:  		//买家发起退款  		break;  	case 9:  		//退款成功  		break;  	case 10:  		//退款关闭  		break;  	}  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  	proc.PaidSuccess ();  	return "Success";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if ("1".Equals (trade_mode)) {  	//即时到账   	if ("0".Equals (trade_state)) {  		proc.PaidSuccess ();  		return "Success";  	} else {  		proc.PaidFail ();  		//SetLogMessage("即时到账支付失败");  		return "即时到账支付失败";  	}  } else if ("2".Equals (trade_mode)) {  	//中介担保  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//处理数据库逻辑  	//注意交易单不要重复处理  	//注意判断返回金额  	int iStatus = 0;  	switch (iStatus) {  	case 0:  		//付款成功  		break;  	case 1:  		//交易创建  		break;  	case 2:  		//收获地址填写完毕  		break;  	case 4:  		//卖家发货成功  		break;  	case 5:  		//买家收货确认，交易成功  		break;  	case 6:  		//交易关闭，未完成超时关闭  		break;  	case 7:  		//修改交易价格成功  		break;  	case 8:  		//买家发起退款  		break;  	case 9:  		//退款成功  		break;  	case 10:  		//退款关闭  		break;  	}  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  	proc.PaidSuccess ();  	return "Success";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if ("1".Equals (trade_mode)) {  	//即时到账   	if ("0".Equals (trade_state)) {  		proc.PaidSuccess ();  		return "Success";  	} else {  		proc.PaidFail ();  		//SetLogMessage("即时到账支付失败");  		return "即时到账支付失败";  	}  } else if ("2".Equals (trade_mode)) {  	//中介担保  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//处理数据库逻辑  	//注意交易单不要重复处理  	//注意判断返回金额  	int iStatus = 0;  	switch (iStatus) {  	case 0:  		//付款成功  		break;  	case 1:  		//交易创建  		break;  	case 2:  		//收获地址填写完毕  		break;  	case 4:  		//卖家发货成功  		break;  	case 5:  		//买家收货确认，交易成功  		break;  	case 6:  		//交易关闭，未完成超时关闭  		break;  	case 7:  		//修改交易价格成功  		break;  	case 8:  		//买家发起退款  		break;  	case 9:  		//退款成功  		break;  	case 10:  		//退款关闭  		break;  	}  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  	proc.PaidSuccess ();  	return "Success";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if ("2".Equals (trade_mode)) {  	//中介担保  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//处理数据库逻辑  	//注意交易单不要重复处理  	//注意判断返回金额  	int iStatus = 0;  	switch (iStatus) {  	case 0:  		//付款成功  		break;  	case 1:  		//交易创建  		break;  	case 2:  		//收获地址填写完毕  		break;  	case 4:  		//卖家发货成功  		break;  	case 5:  		//买家收货确认，交易成功  		break;  	case 6:  		//交易关闭，未完成超时关闭  		break;  	case 7:  		//修改交易价格成功  		break;  	case 8:  		//买家发起退款  		break;  	case 9:  		//退款成功  		break;  	case 10:  		//退款关闭  		break;  	}  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  	proc.PaidSuccess ();  	return "Success";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if ("2".Equals (trade_mode)) {  	//中介担保  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//处理数据库逻辑  	//注意交易单不要重复处理  	//注意判断返回金额  	int iStatus = 0;  	switch (iStatus) {  	case 0:  		//付款成功  		break;  	case 1:  		//交易创建  		break;  	case 2:  		//收获地址填写完毕  		break;  	case 4:  		//卖家发货成功  		break;  	case 5:  		//买家收货确认，交易成功  		break;  	case 6:  		//交易关闭，未完成超时关闭  		break;  	case 7:  		//修改交易价格成功  		break;  	case 8:  		//买家发起退款  		break;  	case 9:  		//退款成功  		break;  	case 10:  		//退款关闭  		break;  	}  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  	proc.PaidSuccess ();  	return "Success";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if ("2".Equals (trade_mode)) {  	//中介担保  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//处理数据库逻辑  	//注意交易单不要重复处理  	//注意判断返回金额  	int iStatus = 0;  	switch (iStatus) {  	case 0:  		//付款成功  		break;  	case 1:  		//交易创建  		break;  	case 2:  		//收获地址填写完毕  		break;  	case 4:  		//卖家发货成功  		break;  	case 5:  		//买家收货确认，交易成功  		break;  	case 6:  		//交易关闭，未完成超时关闭  		break;  	case 7:  		//修改交易价格成功  		break;  	case 8:  		//买家发起退款  		break;  	case 9:  		//退款成功  		break;  	case 10:  		//退款关闭  		break;  	}  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  	proc.PaidSuccess ();  	return "Success";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if ("2".Equals (trade_mode)) {  	//中介担保  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//处理数据库逻辑  	//注意交易单不要重复处理  	//注意判断返回金额  	int iStatus = 0;  	switch (iStatus) {  	case 0:  		//付款成功  		break;  	case 1:  		//交易创建  		break;  	case 2:  		//收获地址填写完毕  		break;  	case 4:  		//卖家发货成功  		break;  	case 5:  		//买家收货确认，交易成功  		break;  	case 6:  		//交易关闭，未完成超时关闭  		break;  	case 7:  		//修改交易价格成功  		break;  	case 8:  		//买家发起退款  		break;  	case 9:  		//退款成功  		break;  	case 10:  		//退款关闭  		break;  	}  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  	proc.PaidSuccess ();  	return "Success";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if ("2".Equals (trade_mode)) {  	//中介担保  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//处理数据库逻辑  	//注意交易单不要重复处理  	//注意判断返回金额  	int iStatus = 0;  	switch (iStatus) {  	case 0:  		//付款成功  		break;  	case 1:  		//交易创建  		break;  	case 2:  		//收获地址填写完毕  		break;  	case 4:  		//卖家发货成功  		break;  	case 5:  		//买家收货确认，交易成功  		break;  	case 6:  		//交易关闭，未完成超时关闭  		break;  	case 7:  		//修改交易价格成功  		break;  	case 8:  		//买家发起退款  		break;  	case 9:  		//退款成功  		break;  	case 10:  		//退款关闭  		break;  	}  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  	proc.PaidSuccess ();  	return "Success";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if ("2".Equals (trade_mode)) {  	//中介担保  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//处理数据库逻辑  	//注意交易单不要重复处理  	//注意判断返回金额  	int iStatus = 0;  	switch (iStatus) {  	case 0:  		//付款成功  		break;  	case 1:  		//交易创建  		break;  	case 2:  		//收获地址填写完毕  		break;  	case 4:  		//卖家发货成功  		break;  	case 5:  		//买家收货确认，交易成功  		break;  	case 6:  		//交易关闭，未完成超时关闭  		break;  	case 7:  		//修改交易价格成功  		break;  	case 8:  		//买家发起退款  		break;  	case 9:  		//退款成功  		break;  	case 10:  		//退款关闭  		break;  	}  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  	proc.PaidSuccess ();  	return "Success";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if ("2".Equals (trade_mode)) {  	//中介担保  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//处理数据库逻辑  	//注意交易单不要重复处理  	//注意判断返回金额  	int iStatus = 0;  	switch (iStatus) {  	case 0:  		//付款成功  		break;  	case 1:  		//交易创建  		break;  	case 2:  		//收获地址填写完毕  		break;  	case 4:  		//卖家发货成功  		break;  	case 5:  		//买家收货确认，交易成功  		break;  	case 6:  		//交易关闭，未完成超时关闭  		break;  	case 7:  		//修改交易价格成功  		break;  	case 8:  		//买家发起退款  		break;  	case 9:  		//退款成功  		break;  	case 10:  		//退款关闭  		break;  	}  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  	proc.PaidSuccess ();  	return "Success";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: if ("2".Equals (trade_mode)) {  	//中介担保  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//处理数据库逻辑  	//注意交易单不要重复处理  	//注意判断返回金额  	int iStatus = 0;  	switch (iStatus) {  	case 0:  		//付款成功  		break;  	case 1:  		//交易创建  		break;  	case 2:  		//收获地址填写完毕  		break;  	case 4:  		//卖家发货成功  		break;  	case 5:  		//买家收货确认，交易成功  		break;  	case 6:  		//交易关闭，未完成超时关闭  		break;  	case 7:  		//修改交易价格成功  		break;  	case 8:  		//买家发起退款  		break;  	case 9:  		//退款成功  		break;  	case 10:  		//退款关闭  		break;  	}  	//------------------------------  	//中介担保处理业务开始  	//------------------------------  	//给财付通系统发送成功信息，财付通系统收到此结果后不再进行后续通知  	proc.PaidSuccess ();  	return "Success";  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: switch (iStatus) {  case 0:  	//付款成功  	break;  case 1:  	//交易创建  	break;  case 2:  	//收获地址填写完毕  	break;  case 4:  	//卖家发货成功  	break;  case 5:  	//买家收货确认，交易成功  	break;  case 6:  	//交易关闭，未完成超时关闭  	break;  case 7:  	//修改交易价格成功  	break;  case 8:  	//买家发起退款  	break;  case 9:  	//退款成功  	break;  case 10:  	//退款关闭  	break;  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: switch (iStatus) {  case 0:  	//付款成功  	break;  case 1:  	//交易创建  	break;  case 2:  	//收获地址填写完毕  	break;  case 4:  	//卖家发货成功  	break;  case 5:  	//买家收货确认，交易成功  	break;  case 6:  	//交易关闭，未完成超时关闭  	break;  case 7:  	//修改交易价格成功  	break;  case 8:  	//买家发起退款  	break;  case 9:  	//退款成功  	break;  case 10:  	//退款关闭  	break;  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: switch (iStatus) {  case 0:  	//付款成功  	break;  case 1:  	//交易创建  	break;  case 2:  	//收获地址填写完毕  	break;  case 4:  	//卖家发货成功  	break;  case 5:  	//买家收货确认，交易成功  	break;  case 6:  	//交易关闭，未完成超时关闭  	break;  case 7:  	//修改交易价格成功  	break;  case 8:  	//买家发起退款  	break;  case 9:  	//退款成功  	break;  case 10:  	//退款关闭  	break;  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: switch (iStatus) {  case 0:  	//付款成功  	break;  case 1:  	//交易创建  	break;  case 2:  	//收获地址填写完毕  	break;  case 4:  	//卖家发货成功  	break;  case 5:  	//买家收货确认，交易成功  	break;  case 6:  	//交易关闭，未完成超时关闭  	break;  case 7:  	//修改交易价格成功  	break;  case 8:  	//买家发起退款  	break;  case 9:  	//退款成功  	break;  case 10:  	//退款关闭  	break;  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: switch (iStatus) {  case 0:  	//付款成功  	break;  case 1:  	//交易创建  	break;  case 2:  	//收获地址填写完毕  	break;  case 4:  	//卖家发货成功  	break;  case 5:  	//买家收货确认，交易成功  	break;  case 6:  	//交易关闭，未完成超时关闭  	break;  case 7:  	//修改交易价格成功  	break;  case 8:  	//买家发起退款  	break;  case 9:  	//退款成功  	break;  case 10:  	//退款关闭  	break;  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: switch (iStatus) {  case 0:  	//付款成功  	break;  case 1:  	//交易创建  	break;  case 2:  	//收获地址填写完毕  	break;  case 4:  	//卖家发货成功  	break;  case 5:  	//买家收货确认，交易成功  	break;  case 6:  	//交易关闭，未完成超时关闭  	break;  case 7:  	//修改交易价格成功  	break;  case 8:  	//买家发起退款  	break;  case 9:  	//退款成功  	break;  case 10:  	//退款关闭  	break;  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: switch (iStatus) {  case 0:  	//付款成功  	break;  case 1:  	//交易创建  	break;  case 2:  	//收获地址填写完毕  	break;  case 4:  	//卖家发货成功  	break;  case 5:  	//买家收货确认，交易成功  	break;  case 6:  	//交易关闭，未完成超时关闭  	break;  case 7:  	//修改交易价格成功  	break;  case 8:  	//买家发起退款  	break;  case 9:  	//退款成功  	break;  case 10:  	//退款关闭  	break;  }  
Magic Number,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following statement contains a magic number: switch (iStatus) {  case 0:  	//付款成功  	break;  case 1:  	//交易创建  	break;  case 2:  	//收获地址填写完毕  	break;  case 4:  	//卖家发货成功  	break;  case 5:  	//买家收货确认，交易成功  	break;  case 6:  	//交易关闭，未完成超时关闭  	break;  case 7:  	//修改交易价格成功  	break;  case 8:  	//买家发起退款  	break;  case 9:  	//退款成功  	break;  case 10:  	//退款关闭  	break;  }  
Missing Default,J6.DevFw.Toolkit.ThirdApi.Discuz,Request,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\Discuz\Request.cs,CallUCenterAPI,The following switch statement is missing a default case: switch (parameters ["action"]) {  case "test":  	TraceLog.Record ("与UCenter建立通信成功!");  	return "1";  case "addfeed":  	return api.AddFeed ();  case "deleteuser":  	return api.DeleteUser (parameters ["ids"]);  case "synlogin":  	api.SyncLogin (parameters ["username"]' parameters ["password"]);  	return "";  case "synlogout":  	api.SyncLogout ();  	return "";  case "updatepw":  	return api.Edit (parameters ["username"]' parameters ["oldpw"]' parameters ["newpw"]' parameters ["email"]' true);  case "getcreditsettings":  	break;  case "gettag":  	break;  case "renameuser":  	return api.RenameUser (int.Parse (parameters ["uid"])' parameters ["oldusername"]' parameters ["newusername"]);  case "updateapps":  	break;  case "updatebadwords":  	break;  case "updateclient":  	break;  case "updatecredit":  	break;  case "updatecreditsettings":  	break;  case "updatehosts":  	break;  }  
Missing Default,J6.DevFw.Toolkit.ThirdApi.NetPay,Bank,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Bank.cs,ReadBankImage,The following switch statement is missing a default case: switch (sign) {  case BankSign.ICBC:  	img = BankRes.ICBC;  	break;  case BankSign.ABC:  	img = BankRes.ABC;  	break;  case BankSign.CCB:  	img = BankRes.CCB;  	break;  case BankSign.BOC:  	img = BankRes.BOC;  	break;  case BankSign.CIB:  	img = BankRes.CIB;  	break;  case BankSign.CITIC:  	img = BankRes.CITIC;  	break;  case BankSign.CMB:  	img = BankRes.CMB;  	break;  case BankSign.CMBC:  	img = BankRes.CMBC;  	break;  case BankSign.CEB:  	img = BankRes.CEB;  	break;  case BankSign.COMM:  	img = BankRes.COMM;  	break;  case BankSign.GDB:  	img = BankRes.GDB;  	break;  case BankSign.SPAB:  	img = BankRes.SPAB;  	break;  case BankSign.POSTGC:  	img = BankRes.POSTGC;  	break;  case BankSign.SPDB:  	img = BankRes.SPDB;  	break;  }  
Missing Default,J6.DevFw.Toolkit.ThirdApi.NetPay.Tenpay,Tenpay,F:\newReposMay17\atnet_devfw\J6\src\toolkit\J6.DevFw.Toolkit.ThirdApi\NetPay\Tenpay\Tenpay.cs,Notify,The following switch statement is missing a default case: switch (iStatus) {  case 0:  	//付款成功  	break;  case 1:  	//交易创建  	break;  case 2:  	//收获地址填写完毕  	break;  case 4:  	//卖家发货成功  	break;  case 5:  	//买家收货确认，交易成功  	break;  case 6:  	//交易关闭，未完成超时关闭  	break;  case 7:  	//修改交易价格成功  	break;  case 8:  	//买家发起退款  	break;  case 9:  	//退款成功  	break;  case 10:  	//退款关闭  	break;  }  
