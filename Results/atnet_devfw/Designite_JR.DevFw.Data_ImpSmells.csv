Implementation smell,Namespace,Class,File,Method,Description
Complex Method,JR.DevFw.Data.Extensions,DataTableExtensions,C:\repos\atnet_devfw\src\core\J6.DevFw.Data\Extensions\DataExtensions.cs,ToEntityList,Cyclomatic complexity of the method is 9
Complex Method,JR.DevFw.Data.Extensions,DataTableExtensions,C:\repos\atnet_devfw\src\core\J6.DevFw.Data\Extensions\DataExtensions.cs,ToEntityList,Cyclomatic complexity of the method is 9
Magic Number,JR.DevFw.Data,DataUtil,C:\repos\atnet_devfw\src\core\J6.DevFw.Data\DataUtil.cs,ToParams,The following statement contains a magic number: if (data != null)              {                  int l = data.GetLength(0);                  if (l != 0 && data.GetLength(1) != 2)                  {                      throw new ArgumentOutOfRangeException("data"' "多纬数组的二维长度必须为2");                  }                    DbParameter[] parameter = new DbParameter[l];                  for (int i = 0; i < l; i++)                  {                      parameter[i] = db.CreateParameter(data[i' 0].ToString()' data[i' 1]);                  }                  return parameter;              }
Magic Number,JR.DevFw.Data.Extensions,DataTableExtensions,C:\repos\atnet_devfw\src\core\J6.DevFw.Data\Extensions\DataExtensions.cs,GetDbParameter,The following statement contains a magic number: if (autoPro)              {                  PropertyInfo[] pros =                      type.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);                  parameters = new object[pros.Length' 2];                    int i = 0;                  foreach (PropertyInfo _pro in pros)                  {                      proValue = _pro.GetValue(obj' null);                      parameters[i' 0] = String.Format("@{0}"' _pro.Name);                      parameters[i' 1] = proValue;                      ++i;                  }              }              else              {                  filedArray = fields.Split(' '' ''');                    //初始化参数数组                  int fieldCount = filedArray.Length;                    //参数数组                  parameters = new object[fieldCount' 2];                      string fieldName;                    for (int i = 0; i < parameters.GetLength(0); i++)                  {                      fieldName = filedArray[i];                      pro = type.GetProperty(fieldName'                          BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);                      if (pro == null)                      {                          throw new Exception(String.Format("对象不存在属性：{0}"' fieldName));                      }                      //获取对象的值                      proValue = pro.GetValue(obj' null);                      if (proValue == null)                      {                          throw new Exception(String.Format("对象属性必须赋值，属性名称:{0}"' fieldName));                      }                        parameters[i' 0] = String.Format("@{0}"' fieldName);                      parameters[i' 1] = proValue;                  }              }
Magic Number,JR.DevFw.Data.Extensions,DataTableExtensions,C:\repos\atnet_devfw\src\core\J6.DevFw.Data\Extensions\DataExtensions.cs,GetDbParameter,The following statement contains a magic number: if (autoPro)              {                  PropertyInfo[] pros =                      type.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);                  parameters = new object[pros.Length' 2];                    int i = 0;                  foreach (PropertyInfo _pro in pros)                  {                      proValue = _pro.GetValue(obj' null);                      parameters[i' 0] = String.Format("@{0}"' _pro.Name);                      parameters[i' 1] = proValue;                      ++i;                  }              }              else              {                  filedArray = fields.Split(' '' ''');                    //初始化参数数组                  int fieldCount = filedArray.Length;                    //参数数组                  parameters = new object[fieldCount' 2];                      string fieldName;                    for (int i = 0; i < parameters.GetLength(0); i++)                  {                      fieldName = filedArray[i];                      pro = type.GetProperty(fieldName'                          BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);                      if (pro == null)                      {                          throw new Exception(String.Format("对象不存在属性：{0}"' fieldName));                      }                      //获取对象的值                      proValue = pro.GetValue(obj' null);                      if (proValue == null)                      {                          throw new Exception(String.Format("对象属性必须赋值，属性名称:{0}"' fieldName));                      }                        parameters[i' 0] = String.Format("@{0}"' fieldName);                      parameters[i' 1] = proValue;                  }              }
Magic Number,JR.DevFw.Data.Orm,EntityManager<Entity>,C:\repos\atnet_devfw\src\core\J6.DevFw.Data\Orm\EntityManager.cs,Save,The following statement contains a magic number: StringBuilder sb = new StringBuilder(300);
Magic Number,JR.DevFw.Data.Orm,EntityManager<Entity>,C:\repos\atnet_devfw\src\core\J6.DevFw.Data\Orm\EntityManager.cs,Update,The following statement contains a magic number: StringBuilder sb = new StringBuilder(300);
Magic Number,JR.DevFw.Data.Orm,EntityManager<Entity>,C:\repos\atnet_devfw\src\core\J6.DevFw.Data\Orm\EntityManager.cs,GetEntityList,The following statement contains a magic number: StringBuilder sb = new StringBuilder("select * from " + tableName' 400);
Missing Default,JR.DevFw.Data,DataBaseAccess,C:\repos\atnet_devfw\src\core\J6.DevFw.Data\DataBaseAccess.cs,DataBaseAccess,The following switch statement is missing a default case: switch (type)              {                  case DataBaseType.OLEDB:                      dbFactory = new OleDbFactory(connectionString);                      break;                  case DataBaseType.SQLite:                      dbFactory = new SQLiteFactory(connectionString);                      break;                  case DataBaseType.MonoSQLite:                      dbFactory = new MonoSQLiteFactory(connectionString);                      break;                  case DataBaseType.SQLServer:                      dbFactory = new SqlServerFactory(connectionString);                      break;                  case DataBaseType.MySQL:                      dbFactory = new MySqlFactory(connectionString);                      break;              }
