Implementation smell,Namespace,Class,File,Method,Description
Long Method,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,ReceiveMessages,The method has 100 lines of code.
Complex Method,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,ReleaseMessage,Cyclomatic complexity of the method is 11
Long Parameter List,EducationPathways.ServiceBus,BrokeredMessageExtensions,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\BrokeredMessageExtensions.cs,SafeCompleteAsync,The method has 7 parameters.
Long Parameter List,EducationPathways.ServiceBus,BrokeredMessageExtensions,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\BrokeredMessageExtensions.cs,SafeAbandonAsync,The method has 7 parameters.
Long Parameter List,EducationPathways.ServiceBus,BrokeredMessageExtensions,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\BrokeredMessageExtensions.cs,SafeDeadLetterAsync,The method has 9 parameters.
Long Parameter List,EducationPathways.ServiceBus,BrokeredMessageExtensions,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\BrokeredMessageExtensions.cs,SafeMessagingActionAsync,The method has 14 parameters.
Long Parameter List,EducationPathways.ServiceBus,DynamicThrottling,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\DynamicThrottling.cs,DynamicThrottling,The method has 7 parameters.
Long Parameter List,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,SubscriptionReceiver,The method has 7 parameters.
Long Parameter List,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,ReceiveMessages,The method has 7 parameters.
Long Parameter List,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,ReleaseMessage,The method has 8 parameters.
Long Parameter List,EducationPathways.ServiceBus,TopicSender,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\TopicSender.cs,TopicSender,The method has 5 parameters.
Long Parameter List,EducationPathways.ServiceBus,TopicSender,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\TopicSender.cs,SendAsync,The method has 5 parameters.
Long Parameter List,EducationPathways.ServiceBus.Handling,EventDispatcher,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\Handling\EventDispatcher.cs,BuildHandlerInvocations,The method has 7 parameters.
Long Identifier,EducationPathways.ServiceBus,DynamicThrottling,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\DynamicThrottling.cs,DynamicThrottling,The length of the parameter intervalForRestoringDegreeOfParallelism is 39.
Long Identifier,EducationPathways.ServiceBus.Handling,EventDispatcher,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\Handling\EventDispatcher.cs,BuildHandlerInvocations,The length of the parameter envelopedEventHandlerInvocations is 32.
Long Statement,EducationPathways.ServiceBus,BrokeredMessageExtensions,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\BrokeredMessageExtensions.cs,SafeCompleteAsync,The length of the statement  "	SafeMessagingActionAsync (ac => message.BeginComplete (ac' null)' message.EndComplete' message' callback' "An error occurred while completing message {0} in subscription {1} with processing time {3} (scheduling {4} request {5} roundtrip {6}). Error message: {2}"' message.MessageId' subscription' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch); " is 379.
Long Statement,EducationPathways.ServiceBus,BrokeredMessageExtensions,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\BrokeredMessageExtensions.cs,SafeAbandonAsync,The length of the statement  "	SafeMessagingActionAsync (ac => message.BeginAbandon (ac' null)' message.EndAbandon' message' callback' "An error occurred while abandoning message {0} in subscription {1} with processing time {3} (scheduling {4} request {5} roundtrip {6}). Error message: {2}"' message.MessageId' subscription' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch); " is 377.
Long Statement,EducationPathways.ServiceBus,BrokeredMessageExtensions,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\BrokeredMessageExtensions.cs,SafeDeadLetterAsync,The length of the statement  "	SafeMessagingActionAsync (ac => message.BeginDeadLetter (reason' description' ac' null)' message.EndDeadLetter' message' callback' "An error occurred while dead-lettering message {0} in subscription {1} with processing time {3} (scheduling {4} request {5} roundtrip {6}). Error message: {2}"' message.MessageId' subscription' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch); " is 408.
Long Statement,EducationPathways.ServiceBus,BrokeredMessageExtensions,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\BrokeredMessageExtensions.cs,SafeMessagingActionAsync,The length of the statement  "		Trace.TraceWarning ("An error occurred in attempt number {1} to release message {3} in subscription {2}: {0}"' e.LastException.GetType ().Name + " - " + e.LastException.Message' e.CurrentRetryCount' subscription' message.MessageId); " is 232.
Long Statement,EducationPathways.ServiceBus,BrokeredMessageExtensions,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\BrokeredMessageExtensions.cs,SafeMessagingActionAsync,The length of the statement  "			Trace.TraceWarning (actionErrorDescription' messageId' subscription' e.GetType ().Name + " - " + e.Message' processingElapsedMilliseconds' schedulingElapsedMilliseconds' messagingActionStart' roundtripStopwatch.ElapsedMilliseconds); " is 232.
Long Statement,EducationPathways.ServiceBus,DynamicThrottling,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\DynamicThrottling.cs,WaitUntilAllowedParallelism,The length of the statement  "		// Trace.WriteLine("Waiting for available degrees of parallelism. Available: " + this.availableDegreesOfParallelism + ". In use: " + this.currentParallelJobs); " is 159.
Long Statement,EducationPathways.ServiceBus,DynamicThrottling,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\DynamicThrottling.cs,Start,The length of the statement  "	this.parallelismRestoringTimer.Change (intervalForRestoringDegreeOfParallelism' intervalForRestoringDegreeOfParallelism); " is 121.
Long Statement,EducationPathways.ServiceBus,StandardMetadataProvider,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\StandardMetadataProvider.cs,GetMetadata,The length of the statement  "	metadata [StandardMetadata.AssemblyName] = Path.GetFileNameWithoutExtension (type.Assembly.ManifestModule.FullyQualifiedName); " is 126.
Long Statement,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,ReceiveMessages,The length of the statement  "	// Declare an action acting as a callback whenever a non-transient exception occurs while receiving or processing messages. " is 123.
Long Statement,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,ReceiveMessages,The length of the statement  "						this.ReleaseMessage (msg' releaseAction' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch); " is 123.
Long Statement,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,ReceiveMessages,The length of the statement  "	// Initialize a custom action acting as a callback whenever a non-transient exception occurs while receiving or processing messages. " is 132.
Long Statement,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,ReceiveMessages,The length of the statement  "		Trace.TraceError ("An unrecoverable error occurred while trying to receive a new message from subscription {1}:\r\n{0}"' ex' this.subscription); " is 144.
Long Statement,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,ReleaseMessage,The length of the statement  "		msg.SafeDeadLetterAsync (this.subscription' releaseAction.DeadLetterReason' releaseAction.DeadLetterDescription' success =>  { " is 126.
Long Statement,EducationPathways.ServiceBus,TopicSender,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\TopicSender.cs,SendAsync,The length of the statement  "	this.retryPolicy.ExecuteAction (ac => this.DoBeginSendMessage (messageFactory ()' ac)' this.DoEndSendMessage' successCallback' ex =>  { " is 135.
Long Statement,EducationPathways.ServiceBus.Handling,EventDispatcher,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\Handling\EventDispatcher.cs,DoDispatchMessage,The length of the statement  "			// Trace.WriteLine(string.Format(CultureInfo.InvariantCulture' "Event{0} handled by {1}."' traceIdentifier' handler.Item1.FullName)); " is 133.
Long Statement,EducationPathways.ServiceBus.Handling,EventDispatcher,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\Handling\EventDispatcher.cs,BuildHandlerInvocations,The length of the statement  "	var eventHandlerInvocations = interfaces.Where (i => i.IsGenericType && i.GetGenericTypeDefinition () == typeof(IEventHandler<>)).Select (i => new { " is 148.
Long Statement,EducationPathways.ServiceBus.Handling,EventDispatcher,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\Handling\EventDispatcher.cs,BuildHandlerInvocations,The length of the statement  "	}).Select (e => new Tuple<Type' Action<Envelope>> (e.EventType' this.BuildHandlerInvocation (handler' e.HandlerInterface' e.EventType))); " is 137.
Long Statement,EducationPathways.ServiceBus.Handling,EventDispatcher,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\Handling\EventDispatcher.cs,BuildHandlerInvocations,The length of the statement  "	var envelopedEventHandlerInvocations = interfaces.Where (i => i.IsGenericType && i.GetGenericTypeDefinition () == typeof(IEnvelopedEventHandler<>)).Select (i => new { " is 166.
Long Statement,EducationPathways.ServiceBus.Handling,EventDispatcher,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\Handling\EventDispatcher.cs,BuildHandlerInvocations,The length of the statement  "	}).Select (e => new Tuple<Type' Action<Envelope>> (e.EventType' this.BuildEnvelopeHandlerInvocation (handler' e.HandlerInterface' e.EventType))); " is 145.
Long Statement,EducationPathways.ServiceBus.Handling,EventDispatcher,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\Handling\EventDispatcher.cs,BuildHandlerInvocation,The length of the statement  "	var invocationExpression = Expression.Lambda (Expression.Block (Expression.Call (Expression.Convert (Expression.Constant (handler)' handlerType)' handlerType.GetMethod ("Handle")' Expression.Property (Expression.Convert (parameter' envelopeType)' "Body")))' parameter); " is 269.
Long Statement,EducationPathways.ServiceBus.Handling,EventDispatcher,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\Handling\EventDispatcher.cs,BuildEnvelopeHandlerInvocation,The length of the statement  "	var invocationExpression = Expression.Lambda (Expression.Block (Expression.Call (Expression.Convert (Expression.Constant (handler)' handlerType)' handlerType.GetMethod ("Handle")' Expression.Convert (parameter' envelopeType)))' parameter); " is 239.
Long Statement,EducationPathways.ServiceBus.Handling,EventDispatcher,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\Handling\EventDispatcher.cs,BuildDispatchInvocation,The length of the statement  "	var dispatchExpression = Expression.Lambda (Expression.Block (Expression.Call (Expression.Constant (this)' this.GetType ().GetMethod ("DoDispatchMessage"' BindingFlags.Instance | BindingFlags.NonPublic).MakeGenericMethod (eventType)' Expression.Convert (eventParameter' eventType)' messageIdParameter' correlationIdParameter' traceIdParameter))' eventParameter' messageIdParameter' correlationIdParameter' traceIdParameter); " is 424.
Long Statement,EducationPathways.ServiceBus.Handling,MessageProcessor,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\Handling\MessageProcessor.cs,HandleProcessingException,The length of the statement  "		Trace.TraceError ("An error occurred while processing the message" + traceIdentifier + " and will be dead-lettered:\r\n{0}"' e); " is 128.
Long Statement,EducationPathways.ServiceBus.Handling,MessageProcessor,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\Handling\MessageProcessor.cs,HandleProcessingException,The length of the statement  "		Trace.TraceWarning ("An error occurred while processing the message" + traceIdentifier + " and will be abandoned:\r\n{0}"' e); " is 126.
Empty Catch Block,EducationPathways.ServiceBus.Handling,MessageProcessor,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\Handling\MessageProcessor.cs,BuildTraceIdentifier,The method has an empty catch block.
Magic Number,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,SubscriptionReceiver,The following statement contains a magic number: if (this.processInParallel) {  	this.client.PrefetchCount = 18;  }  else {  	this.client.PrefetchCount = 14;  }  
Magic Number,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,SubscriptionReceiver,The following statement contains a magic number: if (this.processInParallel) {  	this.client.PrefetchCount = 18;  }  else {  	this.client.PrefetchCount = 14;  }  
Magic Number,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,SubscriptionReceiver,The following statement contains a magic number: this.client.PrefetchCount = 18;  
Magic Number,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,SubscriptionReceiver,The following statement contains a magic number: this.client.PrefetchCount = 14;  
Magic Number,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,SubscriptionReceiver,The following statement contains a magic number: this.dynamicThrottling = new DynamicThrottling (maxDegreeOfParallelism: 100' minDegreeOfParallelism: 50' penaltyAmount: 3' workFailedPenaltyAmount: 5' workCompletedParallelismGain: 1' intervalForRestoringDegreeOfParallelism: 8000);  
Magic Number,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,SubscriptionReceiver,The following statement contains a magic number: this.dynamicThrottling = new DynamicThrottling (maxDegreeOfParallelism: 100' minDegreeOfParallelism: 50' penaltyAmount: 3' workFailedPenaltyAmount: 5' workCompletedParallelismGain: 1' intervalForRestoringDegreeOfParallelism: 8000);  
Magic Number,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,SubscriptionReceiver,The following statement contains a magic number: this.dynamicThrottling = new DynamicThrottling (maxDegreeOfParallelism: 100' minDegreeOfParallelism: 50' penaltyAmount: 3' workFailedPenaltyAmount: 5' workCompletedParallelismGain: 1' intervalForRestoringDegreeOfParallelism: 8000);  
Magic Number,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,SubscriptionReceiver,The following statement contains a magic number: this.dynamicThrottling = new DynamicThrottling (maxDegreeOfParallelism: 100' minDegreeOfParallelism: 50' penaltyAmount: 3' workFailedPenaltyAmount: 5' workCompletedParallelismGain: 1' intervalForRestoringDegreeOfParallelism: 8000);  
Magic Number,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,SubscriptionReceiver,The following statement contains a magic number: this.dynamicThrottling = new DynamicThrottling (maxDegreeOfParallelism: 100' minDegreeOfParallelism: 50' penaltyAmount: 3' workFailedPenaltyAmount: 5' workCompletedParallelismGain: 1' intervalForRestoringDegreeOfParallelism: 8000);  
Magic Number,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,ReceiveMessages,The following statement contains a magic number: this.receiveRetryPolicy.ExecuteAction (cb =>  {  	// Start receiving a new message asynchronously.  	this.client.BeginReceive (ReceiveLongPollingTimeout' cb' null);  }' ar =>  {  	// Complete the asynchronous operation. This may throw an exception that will be handled internally by retry policy.  	try {  		return this.client.EndReceive (ar);  	}  	catch (TimeoutException) {  		// TimeoutException is not just transient but completely expected in this case' so not relying on Topaz to retry  		return null;  	}  }' msg =>  {  	// Process the message once it was successfully received  	if (this.processInParallel) {  		// Continue receiving and processing new messages asynchronously  		Task.Factory.StartNew (receiveNext);  	}  	// Check if we actually received any messages.  	if (msg != null) {  		var roundtripStopwatch = Stopwatch.StartNew ();  		long schedulingElapsedMilliseconds = 0;  		long processingElapsedMilliseconds = 0;  		Task.Factory.StartNew (() =>  {  			var releaseAction = MessageReleaseAction.AbandonMessage;  			try {  				schedulingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds;  				// Make sure the process was told to stop receiving while it was waiting for a new message.  				if (!cancellationToken.IsCancellationRequested) {  					try {  						try {  							// Process the received message.  							releaseAction = this.InvokeMessageHandler (msg);  							processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  						}  						catch {  							processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  							throw;  						}  					}  					finally {  						if (roundtripStopwatch.Elapsed > TimeSpan.FromSeconds (45)) {  							this.dynamicThrottling.Penalize ();  						}  					}  				}  			}  			finally {  				// Ensure that any resources allocated by a BrokeredMessage instance are released.  				this.ReleaseMessage (msg' releaseAction' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch);  			}  			if (!this.processInParallel) {  				// Continue receiving and processing new messages until told to stop.  				receiveNext.Invoke ();  			}  		});  	}  	else {  		this.dynamicThrottling.NotifyWorkCompleted ();  		if (!this.processInParallel) {  			// Continue receiving and processing new messages until told to stop.  			receiveNext.Invoke ();  		}  	}  }' ex =>  {  	// Invoke a custom action to indicate that we have encountered an exception and  	// need further decision as to whether to continue receiving messages.  	recoverReceive.Invoke (ex);  });  
Magic Number,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,ReceiveMessages,The following statement contains a magic number: if (msg != null) {  	var roundtripStopwatch = Stopwatch.StartNew ();  	long schedulingElapsedMilliseconds = 0;  	long processingElapsedMilliseconds = 0;  	Task.Factory.StartNew (() =>  {  		var releaseAction = MessageReleaseAction.AbandonMessage;  		try {  			schedulingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds;  			// Make sure the process was told to stop receiving while it was waiting for a new message.  			if (!cancellationToken.IsCancellationRequested) {  				try {  					try {  						// Process the received message.  						releaseAction = this.InvokeMessageHandler (msg);  						processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  					}  					catch {  						processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  						throw;  					}  				}  				finally {  					if (roundtripStopwatch.Elapsed > TimeSpan.FromSeconds (45)) {  						this.dynamicThrottling.Penalize ();  					}  				}  			}  		}  		finally {  			// Ensure that any resources allocated by a BrokeredMessage instance are released.  			this.ReleaseMessage (msg' releaseAction' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch);  		}  		if (!this.processInParallel) {  			// Continue receiving and processing new messages until told to stop.  			receiveNext.Invoke ();  		}  	});  }  else {  	this.dynamicThrottling.NotifyWorkCompleted ();  	if (!this.processInParallel) {  		// Continue receiving and processing new messages until told to stop.  		receiveNext.Invoke ();  	}  }  
Magic Number,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,ReceiveMessages,The following statement contains a magic number: Task.Factory.StartNew (() =>  {  	var releaseAction = MessageReleaseAction.AbandonMessage;  	try {  		schedulingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds;  		// Make sure the process was told to stop receiving while it was waiting for a new message.  		if (!cancellationToken.IsCancellationRequested) {  			try {  				try {  					// Process the received message.  					releaseAction = this.InvokeMessageHandler (msg);  					processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  				}  				catch {  					processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  					throw;  				}  			}  			finally {  				if (roundtripStopwatch.Elapsed > TimeSpan.FromSeconds (45)) {  					this.dynamicThrottling.Penalize ();  				}  			}  		}  	}  	finally {  		// Ensure that any resources allocated by a BrokeredMessage instance are released.  		this.ReleaseMessage (msg' releaseAction' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch);  	}  	if (!this.processInParallel) {  		// Continue receiving and processing new messages until told to stop.  		receiveNext.Invoke ();  	}  });  
Magic Number,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,ReceiveMessages,The following statement contains a magic number: try {  	schedulingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds;  	// Make sure the process was told to stop receiving while it was waiting for a new message.  	if (!cancellationToken.IsCancellationRequested) {  		try {  			try {  				// Process the received message.  				releaseAction = this.InvokeMessageHandler (msg);  				processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  			}  			catch {  				processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  				throw;  			}  		}  		finally {  			if (roundtripStopwatch.Elapsed > TimeSpan.FromSeconds (45)) {  				this.dynamicThrottling.Penalize ();  			}  		}  	}  }  finally {  	// Ensure that any resources allocated by a BrokeredMessage instance are released.  	this.ReleaseMessage (msg' releaseAction' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch);  }  
Magic Number,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,ReceiveMessages,The following statement contains a magic number: if (!cancellationToken.IsCancellationRequested) {  	try {  		try {  			// Process the received message.  			releaseAction = this.InvokeMessageHandler (msg);  			processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  		}  		catch {  			processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  			throw;  		}  	}  	finally {  		if (roundtripStopwatch.Elapsed > TimeSpan.FromSeconds (45)) {  			this.dynamicThrottling.Penalize ();  		}  	}  }  
Magic Number,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,ReceiveMessages,The following statement contains a magic number: try {  	try {  		// Process the received message.  		releaseAction = this.InvokeMessageHandler (msg);  		processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  	}  	catch {  		processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  		throw;  	}  }  finally {  	if (roundtripStopwatch.Elapsed > TimeSpan.FromSeconds (45)) {  		this.dynamicThrottling.Penalize ();  	}  }  
Magic Number,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,ReceiveMessages,The following statement contains a magic number: if (roundtripStopwatch.Elapsed > TimeSpan.FromSeconds (45)) {  	this.dynamicThrottling.Penalize ();  }  
Magic Number,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,ReceiveMessages,The following statement contains a magic number: recoverReceive = ex =>  {  	// Just log an exception. Do not allow an unhandled exception to terminate the message receive loop abnormally.  	Trace.TraceError ("An unrecoverable error occurred while trying to receive a new message from subscription {1}:\r\n{0}"' ex' this.subscription);  	this.dynamicThrottling.NotifyWorkCompletedWithError ();  	if (!cancellationToken.IsCancellationRequested) {  		// Continue receiving and processing new messages until told to stop regardless of any exceptions.  		TaskEx.Delay (10000).ContinueWith (t => receiveMessage.Invoke ());  	}  };  
Magic Number,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,ReceiveMessages,The following statement contains a magic number: if (!cancellationToken.IsCancellationRequested) {  	// Continue receiving and processing new messages until told to stop regardless of any exceptions.  	TaskEx.Delay (10000).ContinueWith (t => receiveMessage.Invoke ());  }  
Magic Number,EducationPathways.ServiceBus,SubscriptionReceiver,C:\repos\pebblecode_EducationPathways\EducationPathways.ServiceBus\SubscriptionReceiver.cs,ReceiveMessages,The following statement contains a magic number: TaskEx.Delay (10000).ContinueWith (t => receiveMessage.Invoke ());  
