Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Breakout,Ball,C:\repos\DeltaEngine_DeltaEngine.MonoGame\Samples\Breakout\Ball.cs,ReflectVelocity,Cyclomatic complexity of the method is 12
Long Statement,Breakout,Ball,C:\repos\DeltaEngine_DeltaEngine.MonoGame\Samples\Breakout\Ball.cs,IsInAreaOfPaddle,The length of the statement  "		return Position.X + Radius > paddle.Position.X - Paddle.HalfWidth && Position.X - Radius < paddle.Position.X + Paddle.HalfWidth; " is 128.
Long Statement,Breakout,MainMenu,C:\repos\DeltaEngine_DeltaEngine.MonoGame\Samples\Breakout\MainMenu.cs,AddGameLogo,The length of the statement  "	Add (new Sprite (new Material (ShaderFlags.Position2DColoredTextured' "BreakoutLogo")' Rectangle.FromCenter (0.5f' 0.2f' 0.7f' 0.3f))); " is 135.
Long Statement,Breakout,Game,C:\repos\DeltaEngine_DeltaEngine.MonoGame\Samples\Breakout\Game.cs,InitGame,The length of the statement  "		gameOverMessage = new FontText (Font.Default' "That's it.\nGame Over!\n\nPress \"Q\" to " + "go back to the Main Menu."' Rectangle.One); " is 136.
Long Statement,Breakout,Game,C:\repos\DeltaEngine_DeltaEngine.MonoGame\Samples\Breakout\Game.cs,InitGame,The length of the statement  "		restartCommand = new Command (InitGame).Add (new KeyTrigger (Key.Space)).Add (new MouseButtonTrigger ()).Add (new TouchTapTrigger ()); " is 134.
Long Statement,Breakout,Level,C:\repos\DeltaEngine_DeltaEngine.MonoGame\Samples\Breakout\Level.cs,GetBrickAt,The length of the statement  "	if (brickIndexX < 0 || brickIndexX >= rows || brickIndexY < 0 || brickIndexY >= columns || bricks [brickIndexX' brickIndexY].IsVisible != true) " is 143.
Complex Conditional,Breakout,Level,C:\repos\DeltaEngine_DeltaEngine.MonoGame\Samples\Breakout\Level.cs,GetBrickAt,The conditional expression  "brickIndexX < 0 || brickIndexX >= rows || brickIndexY < 0 || brickIndexY >= columns || bricks [brickIndexX' brickIndexY].IsVisible != true"  is complex.
Magic Number,Breakout,Ball,C:\repos\DeltaEngine_DeltaEngine.MonoGame\Samples\Breakout\Ball.cs,Ball,The following statement contains a magic number: RenderLayer = 5;  
Magic Number,Breakout,UI,C:\repos\DeltaEngine_DeltaEngine.MonoGame\Samples\Breakout\UI.cs,UI,The following statement contains a magic number: new Command (() => window.SetFullscreen (new Size (1920' 1080))).Add (new KeyTrigger (Key.F));  
Magic Number,Breakout,UI,C:\repos\DeltaEngine_DeltaEngine.MonoGame\Samples\Breakout\UI.cs,UI,The following statement contains a magic number: new Command (() => window.SetFullscreen (new Size (1920' 1080))).Add (new KeyTrigger (Key.F));  
Magic Number,Breakout,Score,C:\repos\DeltaEngine_DeltaEngine.MonoGame\Samples\Breakout\Score.cs,LifeLost,The following statement contains a magic number: destroyedBlocksInARow /= 2;  
Magic Number,Breakout,Level,C:\repos\DeltaEngine_DeltaEngine.MonoGame\Samples\Breakout\Level.cs,Level,The following statement contains a magic number: explosionData = new ParticleEmitterData {  	Color = new RangeGraph<Color> (Color.White' Color.TransparentWhite)'  	Size = new RangeGraph<Size> (ExplosionSize' ExplosionSize * 2)'  	ParticleMaterial = explosionMaterial'  	MaximumNumberOfParticles = 1'  	LifeTime = 0.6f'  	SpawnInterval = -1  };  
Magic Number,Breakout,Level,C:\repos\DeltaEngine_DeltaEngine.MonoGame\Samples\Breakout\Level.cs,CreateBricks,The following statement contains a magic number: for (int x = 0; x < rows; x++)  	for (int y = 0; y < columns; y++) {  		bricks [x' y] = new Sprite (brickMaterial' GetBounds (x' y));  		bricks [x' y].Set (GetBrickColor (x' y));  		bricks [x' y].RenderLayer = 5;  	}  
Magic Number,Breakout,Level,C:\repos\DeltaEngine_DeltaEngine.MonoGame\Samples\Breakout\Level.cs,CreateBricks,The following statement contains a magic number: for (int y = 0; y < columns; y++) {  	bricks [x' y] = new Sprite (brickMaterial' GetBounds (x' y));  	bricks [x' y].Set (GetBrickColor (x' y));  	bricks [x' y].RenderLayer = 5;  }  
Magic Number,Breakout,Level,C:\repos\DeltaEngine_DeltaEngine.MonoGame\Samples\Breakout\Level.cs,CreateBricks,The following statement contains a magic number: bricks [x' y].RenderLayer = 5;  
Magic Number,Breakout,Level,C:\repos\DeltaEngine_DeltaEngine.MonoGame\Samples\Breakout\Level.cs,GetBrickColor,The following statement contains a magic number: if (score.Level == 2)  	return GetLevelTwoBrickColor (y);  
Magic Number,Breakout,Level,C:\repos\DeltaEngine_DeltaEngine.MonoGame\Samples\Breakout\Level.cs,GetBrickColor,The following statement contains a magic number: if (score.Level == 3)  	return GetLevelThreeBrickColor (x' y);  
Magic Number,Breakout,Level,C:\repos\DeltaEngine_DeltaEngine.MonoGame\Samples\Breakout\Level.cs,GetBrickColor,The following statement contains a magic number: if (score.Level == 4)  	return GetLevelFourBrickColor (x' y);  
Magic Number,Breakout,Level,C:\repos\DeltaEngine_DeltaEngine.MonoGame\Samples\Breakout\Level.cs,GetLevelThreeBrickColor,The following statement contains a magic number: return LevelThreeColors [(x * 4 + y) % LevelThreeColors.Length];  
Magic Number,Breakout,Level,C:\repos\DeltaEngine_DeltaEngine.MonoGame\Samples\Breakout\Level.cs,GetLevelFourBrickColor,The following statement contains a magic number: return new Color (x * 0.2f + 0.1f' 0.2f' (x + y / 2) * 0.15f + 0.2f);  
Magic Number,Breakout,Level,C:\repos\DeltaEngine_DeltaEngine.MonoGame\Samples\Breakout\Level.cs,GetLevelFiveOrAboveBrickColor,The following statement contains a magic number: return new Color (0.9f - x * 0.15f' 0.5f' (x + y / 2) * 0.1f + 0.2f);  
Magic Number,Breakout,Paddle,C:\repos\DeltaEngine_DeltaEngine.MonoGame\Samples\Breakout\Paddle.cs,Paddle,The following statement contains a magic number: RenderLayer = 5;  
Magic Number,Breakout,Program,C:\repos\DeltaEngine_DeltaEngine.MonoGame\Samples\Breakout\Program.cs,Program,The following statement contains a magic number: Resolve<Settings> ().UpdatesPerSecond = 60;  
Missing Default,Breakout,Ball,C:\repos\DeltaEngine_DeltaEngine.MonoGame\Samples\Breakout\Ball.cs,ReflectVelocity,The following switch statement is missing a default case: switch (collisionSide) {  case Direction.Left:  	velocity.X = Math.Abs (velocity.X);  	break;  case Direction.Top:  	velocity.Y = Math.Abs (velocity.Y);  	break;  case Direction.Right:  	velocity.X = -Math.Abs (velocity.X);  	break;  case Direction.Bottom:  	velocity.Y = -Math.Abs (velocity.Y);  	break;  }  
