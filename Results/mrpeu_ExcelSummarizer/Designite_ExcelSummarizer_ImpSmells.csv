Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ExcelSummarizer.Parser,Parser,C:\repos\mrpeu_ExcelSummarizer\summary\Parser\Parser.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,ExcelSummarizer.Parser,Summarist,C:\repos\mrpeu_ExcelSummarizer\summary\Parser\Summarist.cs,CreateSummary,Cyclomatic complexity of the method is 19
Long Parameter List,ExcelSummarizer.Parser,Summarist,C:\repos\mrpeu_ExcelSummarizer\summary\Parser\Summarist.cs,Summarize,The method has 5 parameters.
Long Parameter List,ExcelSummarizer.Parser,Summarist,C:\repos\mrpeu_ExcelSummarizer\summary\Parser\Summarist.cs,CreateSummary,The method has 7 parameters.
Long Statement,ExcelSummarizer,AddIn,C:\repos\mrpeu_ExcelSummarizer\AddIn.cs,RegisterRibbon,The length of the statement  "	ribbon.Images [Ribbon.EControlIds.txt_template] = Configuration.IsTemplateValid ? Resources.bullet_green : Resources.bullet_pink; " is 129.
Long Statement,ExcelSummarizer,AddIn,C:\repos\mrpeu_ExcelSummarizer\AddIn.cs,RegisterRibbon,The length of the statement  "	ribbon.Images [Ribbon.EControlIds.txt_target] = Configuration.IsTargetValid ? Resources.bullet_green : Resources.bullet_pink; " is 125.
Long Statement,ExcelSummarizer.Parser,Summarist,C:\repos\mrpeu_ExcelSummarizer\summary\Parser\Summarist.cs,CreateSummary,The length of the statement  "	var headers = pck.Workbook.Names.Where (c => sFields.Contains (c.Name)).ToDictionary (c => Enum.Parse (typeof(InputDoc.Field)' c.Name)); " is 136.
Long Statement,ExcelSummarizer.Parser,Summarist,C:\repos\mrpeu_ExcelSummarizer\summary\Parser\Summarist.cs,CreateSummary,The length of the statement  "				System.Windows.Forms.MessageBox.Show ("Check your header " + field' "Summarist"' System.Windows.Forms.MessageBoxButtons.OK' System.Windows.Forms.MessageBoxIcon.Exclamation); " is 173.
Empty Catch Block,ExcelSummarizer,AddIn,C:\repos\mrpeu_ExcelSummarizer\AddIn.cs,ribbon_SummaryClicked,The method has an empty catch block.
Magic Number,ExcelSummarizer.Parser,Parser,C:\repos\mrpeu_ExcelSummarizer\summary\Parser\Parser.cs,Parse,The following statement contains a magic number: using (var pck = new ExcelPackage (file)) {  	if (!ValidateExcelPackage (pck))  		throw new Exception ("Invalid Excel package!");  	var wks = pck.Workbook.Worksheets.First ();  	doc = new InputDoc ();  	log (String.Format ("New bill( {0} )"' file.FullName));  	object val = null;  	foreach (var kvp in _fieldCells) {  		val = wks.Cells [kvp.Value].Value;  		if (val != null) {  			doc.SetData (kvp.Key' val.ToString ());  			//log( String.Format( "  {0}: {1}"' kvp.Key.ToString()' val ) );  		}  		else {  			doc.SetData (kvp.Key' "#ERROR");  			log (String.Format ("\"{0}\" wasn't found in [{1}]"' kvp.Key' kvp.Value));  		}  	}  	if (!cts.IsCancellationRequested) {  		//------------  		// look for Bill.Price  		// Its legend cell should be in column 'H'' between row 29 and 300  		string col = "H";  		int row' minRow = 30' maxRow = 300;  		row = minRow;  		ExcelRange cell = wks.Cells [col + row];  		val = cell.Value;  		string sVal = null;  		while ((sVal == null || !sVal.Contains ("Rechnungsbetrag")) && row < maxRow) {  			cell = wks.Cells [col + ++row];  			sVal = cell.Value as String;  		}  		// then the price should be on its right  		if (sVal != null && sVal.Contains ("Rechnungsbetrag")) {  			cell = wks.Cells ["M" + row];  			val = cell.Value;  			doc.SetData (InputDoc.Field.Price' val);  		}  		else {  			doc.SetData (InputDoc.Field.Price' Double.NaN);  			//log( String.Format( "\"{0}\" wasn't found in [M{1}-M{2}]"' Bill.Field.Price' minRow' minRow + maxRow ) );  			//log( "Cancelling parsing of " + file );  			//return null;  		}  	}  }  
Magic Number,ExcelSummarizer.Parser,Parser,C:\repos\mrpeu_ExcelSummarizer\summary\Parser\Parser.cs,Parse,The following statement contains a magic number: using (var pck = new ExcelPackage (file)) {  	if (!ValidateExcelPackage (pck))  		throw new Exception ("Invalid Excel package!");  	var wks = pck.Workbook.Worksheets.First ();  	doc = new InputDoc ();  	log (String.Format ("New bill( {0} )"' file.FullName));  	object val = null;  	foreach (var kvp in _fieldCells) {  		val = wks.Cells [kvp.Value].Value;  		if (val != null) {  			doc.SetData (kvp.Key' val.ToString ());  			//log( String.Format( "  {0}: {1}"' kvp.Key.ToString()' val ) );  		}  		else {  			doc.SetData (kvp.Key' "#ERROR");  			log (String.Format ("\"{0}\" wasn't found in [{1}]"' kvp.Key' kvp.Value));  		}  	}  	if (!cts.IsCancellationRequested) {  		//------------  		// look for Bill.Price  		// Its legend cell should be in column 'H'' between row 29 and 300  		string col = "H";  		int row' minRow = 30' maxRow = 300;  		row = minRow;  		ExcelRange cell = wks.Cells [col + row];  		val = cell.Value;  		string sVal = null;  		while ((sVal == null || !sVal.Contains ("Rechnungsbetrag")) && row < maxRow) {  			cell = wks.Cells [col + ++row];  			sVal = cell.Value as String;  		}  		// then the price should be on its right  		if (sVal != null && sVal.Contains ("Rechnungsbetrag")) {  			cell = wks.Cells ["M" + row];  			val = cell.Value;  			doc.SetData (InputDoc.Field.Price' val);  		}  		else {  			doc.SetData (InputDoc.Field.Price' Double.NaN);  			//log( String.Format( "\"{0}\" wasn't found in [M{1}-M{2}]"' Bill.Field.Price' minRow' minRow + maxRow ) );  			//log( "Cancelling parsing of " + file );  			//return null;  		}  	}  }  
Magic Number,ExcelSummarizer.Parser,Parser,C:\repos\mrpeu_ExcelSummarizer\summary\Parser\Parser.cs,Parse,The following statement contains a magic number: if (!cts.IsCancellationRequested) {  	//------------  	// look for Bill.Price  	// Its legend cell should be in column 'H'' between row 29 and 300  	string col = "H";  	int row' minRow = 30' maxRow = 300;  	row = minRow;  	ExcelRange cell = wks.Cells [col + row];  	val = cell.Value;  	string sVal = null;  	while ((sVal == null || !sVal.Contains ("Rechnungsbetrag")) && row < maxRow) {  		cell = wks.Cells [col + ++row];  		sVal = cell.Value as String;  	}  	// then the price should be on its right  	if (sVal != null && sVal.Contains ("Rechnungsbetrag")) {  		cell = wks.Cells ["M" + row];  		val = cell.Value;  		doc.SetData (InputDoc.Field.Price' val);  	}  	else {  		doc.SetData (InputDoc.Field.Price' Double.NaN);  		//log( String.Format( "\"{0}\" wasn't found in [M{1}-M{2}]"' Bill.Field.Price' minRow' minRow + maxRow ) );  		//log( "Cancelling parsing of " + file );  		//return null;  	}  }  
Magic Number,ExcelSummarizer.Parser,Parser,C:\repos\mrpeu_ExcelSummarizer\summary\Parser\Parser.cs,Parse,The following statement contains a magic number: if (!cts.IsCancellationRequested) {  	//------------  	// look for Bill.Price  	// Its legend cell should be in column 'H'' between row 29 and 300  	string col = "H";  	int row' minRow = 30' maxRow = 300;  	row = minRow;  	ExcelRange cell = wks.Cells [col + row];  	val = cell.Value;  	string sVal = null;  	while ((sVal == null || !sVal.Contains ("Rechnungsbetrag")) && row < maxRow) {  		cell = wks.Cells [col + ++row];  		sVal = cell.Value as String;  	}  	// then the price should be on its right  	if (sVal != null && sVal.Contains ("Rechnungsbetrag")) {  		cell = wks.Cells ["M" + row];  		val = cell.Value;  		doc.SetData (InputDoc.Field.Price' val);  	}  	else {  		doc.SetData (InputDoc.Field.Price' Double.NaN);  		//log( String.Format( "\"{0}\" wasn't found in [M{1}-M{2}]"' Bill.Field.Price' minRow' minRow + maxRow ) );  		//log( "Cancelling parsing of " + file );  		//return null;  	}  }  
