Implementation smell,Namespace,Class,File,Method,Description
Long Method,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,_DaemonPipe_OnReceiveLine,The method has 151 lines of code.
Complex Method,libsecondlife.Utilities,ConnectionManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,PersistentLogin,Cyclomatic complexity of the method is 9
Complex Method,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,Cyclomatic complexity of the method is 11
Complex Method,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,Cyclomatic complexity of the method is 14
Complex Method,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Parcels_OnParcelProperties,Cyclomatic complexity of the method is 10
Complex Method,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,_DaemonPipe_OnReceiveLine,Cyclomatic complexity of the method is 122
Complex Method,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,ProcessEvent,Cyclomatic complexity of the method is 64
Long Parameter List,libsecondlife.Utilities,ConnectionManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,PersistentLogin,The method has 7 parameters.
Long Parameter List,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Parcels_OnParcelAccessList,The method has 5 parameters.
Long Statement,libsecondlife,RegistrationApi,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\RegistrationApi.cs,GatherCaps,The length of the statement  "	byte[] postData = Encoding.ASCII.GetBytes (String.Format ("first_name={0}&last_name={1}&password={2}"' _userInfo.FirstName' _userInfo.LastName' _userInfo.Password)); " is 165.
Long Statement,libsecondlife.Utilities,ConnectionManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,PersistentLogin,The length of the statement  "				Logger.Log ("Unknown login error' waiting 2 minutes: " + client.Network.LoginErrorKey' Helpers.LogLevel.Warning' client); " is 121.
Long Statement,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The length of the statement  "							Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client); " is 129.
Long Statement,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The length of the statement  "		Logger.Log ("GetWaterType() will not work without Settings.STORE_LAND_PATCHES set to true"' Helpers.LogLevel.Error' Client); " is 124.
Long Statement,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The length of the statement  "							Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client); " is 129.
Long Statement,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Parcels_OnParcelProperties,The length of the statement  "		Logger.Log ("ParcelDownloader received unexpected parcel data for " + parcel.Simulator' Helpers.LogLevel.Warning' Client); " is 122.
Long Statement,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,RequestCaptureDevices,The length of the statement  "		_DaemonPipe.SendData (Encoding.ASCII.GetBytes (String.Format ("<Request requestId=\"{0}\" action=\"Aux.GetCaptureDevices.1\"></Request>{1}"' _CommandCookie++' REQUEST_TERMINATOR))); " is 181.
Long Statement,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,RequestCaptureDevices,The length of the statement  "		Logger.Log ("VoiceManager.RequestCaptureDevices() called when the daemon pipe is disconnected"' Helpers.LogLevel.Error' Client); " is 128.
Long Statement,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,RequestRenderDevices,The length of the statement  "		_DaemonPipe.SendData (Encoding.ASCII.GetBytes (String.Format ("<Request requestId=\"{0}\" action=\"Aux.GetRenderDevices.1\"></Request>{1}"' _CommandCookie++' REQUEST_TERMINATOR))); " is 180.
Long Statement,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,RequestRenderDevices,The length of the statement  "		Logger.Log ("VoiceManager.RequestRenderDevices() called when the daemon pipe is disconnected"' Helpers.LogLevel.Error' Client); " is 127.
Long Statement,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,RequestCreateConnector,The length of the statement  "		Logger.Log ("VoiceManager.CreateConnector() called when the daemon pipe is disconnected"' Helpers.LogLevel.Error' Client); " is 122.
Long Statement,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,RequestSetRenderDevice,The length of the statement  "		_DaemonPipe.SendData (Encoding.ASCII.GetBytes (String.Format ("<Request requestId=\"{0}\" action=\"Aux.SetRenderDevice.1\"><RenderDeviceSpecifier>{1}</RenderDeviceSpecifier></Request>{2}"' _CommandCookie' deviceName' REQUEST_TERMINATOR))); " is 239.
Long Statement,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,RequestSetRenderDevice,The length of the statement  "		Logger.Log ("VoiceManager.RequestSetRenderDevice() called when the daemon pipe is disconnected"' Helpers.LogLevel.Error' Client); " is 129.
Long Statement,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,RequestStartTuningMode,The length of the statement  "		_DaemonPipe.SendData (Encoding.ASCII.GetBytes (String.Format ("<Request requestId=\"{0}\" action=\"Aux.CaptureAudioStart.1\"><Duration>{1}</Duration></Request>{2}"' _CommandCookie' duration' REQUEST_TERMINATOR))); " is 213.
Long Statement,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,RequestStartTuningMode,The length of the statement  "		Logger.Log ("VoiceManager.RequestStartTuningMode() called when the daemon pipe is disconnected"' Helpers.LogLevel.Error' Client); " is 129.
Long Statement,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,RequestStopTuningMode,The length of the statement  "		_DaemonPipe.SendData (Encoding.ASCII.GetBytes (String.Format ("<Request requestId=\"{0}\" action=\"Aux.CaptureAudioStop.1\"></Request>{1}"' _CommandCookie' REQUEST_TERMINATOR))); " is 178.
Long Statement,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,RequestStopTuningMode,The length of the statement  "		Logger.Log ("VoiceManager.RequestStopTuningMode() called when the daemon pipe is disconnected"' Helpers.LogLevel.Error' Client); " is 128.
Long Statement,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,RequestSetSpeakerVolume,The length of the statement  "		_DaemonPipe.SendData (Encoding.ASCII.GetBytes (String.Format ("<Request requestId=\"{0}\" action=\"Aux.SetSpeakerLevel.1\"><Level>{1}</Level></Request>{2}"' _CommandCookie' volume' REQUEST_TERMINATOR))); " is 203.
Long Statement,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,RequestSetSpeakerVolume,The length of the statement  "		Logger.Log ("VoiceManager.RequestSetSpeakerVolume() called when the daemon pipe is disconnected"' Helpers.LogLevel.Error' Client); " is 130.
Long Statement,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,RequestSetCaptureVolume,The length of the statement  "		_DaemonPipe.SendData (Encoding.ASCII.GetBytes (String.Format ("<Request requestId=\"{0}\" action=\"Aux.SetMicLevel.1\"><Level>{1}</Level></Request>{2}"' _CommandCookie' volume' REQUEST_TERMINATOR))); " is 199.
Long Statement,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,RequestSetCaptureVolume,The length of the statement  "		Logger.Log ("VoiceManager.RequestSetCaptureVolume() called when the daemon pipe is disconnected"' Helpers.LogLevel.Error' Client); " is 130.
Long Statement,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,RequestRenderAudioStart,The length of the statement  "		_DaemonPipe.SendData (Encoding.ASCII.GetBytes (String.Format ("<Request requestId=\"{0}\" action=\"Aux.RenderAudioStart.1\"><SoundFilePath>{1}</SoundFilePath><Loop>{2}</Loop></Request>{3}"' _CommandCookie++' _TuningSoundFile' (loop ? "1" : "0")' REQUEST_TERMINATOR))); " is 268.
Long Statement,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,RequestRenderAudioStart,The length of the statement  "		Logger.Log ("VoiceManager.RequestRenderAudioStart() called when the daemon pipe is disconnected"' Helpers.LogLevel.Error' Client); " is 130.
Long Statement,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,RequestRenderAudioStop,The length of the statement  "		_DaemonPipe.SendData (Encoding.ASCII.GetBytes (String.Format ("<Request requestId=\"{0}\" action=\"Aux.RenderAudioStop.1\"><SoundFilePath>{1}</SoundFilePath></Request>{2}"' _CommandCookie++' _TuningSoundFile' REQUEST_TERMINATOR))); " is 231.
Long Statement,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,RequestRenderAudioStop,The length of the statement  "		Logger.Log ("VoiceManager.RequestRenderAudioStop() called when the daemon pipe is disconnected"' Helpers.LogLevel.Error' Client); " is 129.
Long Statement,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,RequiredVoiceVersionEventHandler,The length of the statement  "			Logger.Log (String.Format ("Voice version mismatch! Got {0}' expecting {1}. Disabling the voice manager"' majorVersion' VOICE_MAJOR_VERSION)' Helpers.LogLevel.Error' Client); " is 174.
Long Statement,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,_DaemonPipe_OnReceiveLine,The length of the statement  "						Logger.Log ("VoiceManager._DaemonPipe_OnReceiveLine(): Failed to parse InputXml for the cookie"' Helpers.LogLevel.Warning' Client); " is 131.
Long Statement,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,ProcessEvent,The length of the statement  "				OnParticipantStateChange (cookie' uriString' statusCode' statusString' state' nameString' displayNameString' participantType); " is 126.
Long Statement,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,ProcessEvent,The length of the statement  "				OnParticipantProperties (cookie' uriString' statusCode' statusString' isLocallyMuted' isModeratorMuted' isSpeaking' volume' energy); " is 132.
Complex Conditional,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,UUIDFromVoiceAccount,The conditional expression  "accountName.Length == 25 && accountName [0] == 'x' && accountName [23] == '=' && accountName [24] == '='"  is complex.
Magic Number,libsecondlife,RegistrationApi,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\RegistrationApi.cs,RegistrationApi,The following statement contains a magic number: _initializing = -2;  
Magic Number,libsecondlife,RegistrationApi,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\RegistrationApi.cs,WaitForInitialization,The following statement contains a magic number: while (Initializing)  	System.Threading.Thread.Sleep (10);  
Magic Number,libsecondlife,RegistrationApi,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\RegistrationApi.cs,WaitForInitialization,The following statement contains a magic number: System.Threading.Thread.Sleep (10);  
Magic Number,libsecondlife.Utilities,Realism,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Chat,The following statement contains a magic number: Chat (client' message' ChatType.Normal' 3);  
Magic Number,libsecondlife.Utilities,Realism,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Chat,The following statement contains a magic number: while (characters < message.Length) {  	if (!typing) {  		// Start typing again  		client.Self.Chat (String.Empty' 0' ChatType.StartTyping);  		client.Self.AnimationStart (Animations.TYPE' false);  		typing = true;  	}  	else {  		// Randomly pause typing  		if (rand.Next (10) >= 9) {  			client.Self.Chat (String.Empty' 0' ChatType.StopTyping);  			client.Self.AnimationStop (Animations.TYPE' false);  			typing = false;  		}  	}  	// Sleep for a second and increase the amount of characters we've typed  	System.Threading.Thread.Sleep (1000);  	characters += cps;  }  
Magic Number,libsecondlife.Utilities,Realism,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Chat,The following statement contains a magic number: while (characters < message.Length) {  	if (!typing) {  		// Start typing again  		client.Self.Chat (String.Empty' 0' ChatType.StartTyping);  		client.Self.AnimationStart (Animations.TYPE' false);  		typing = true;  	}  	else {  		// Randomly pause typing  		if (rand.Next (10) >= 9) {  			client.Self.Chat (String.Empty' 0' ChatType.StopTyping);  			client.Self.AnimationStop (Animations.TYPE' false);  			typing = false;  		}  	}  	// Sleep for a second and increase the amount of characters we've typed  	System.Threading.Thread.Sleep (1000);  	characters += cps;  }  
Magic Number,libsecondlife.Utilities,Realism,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Chat,The following statement contains a magic number: while (characters < message.Length) {  	if (!typing) {  		// Start typing again  		client.Self.Chat (String.Empty' 0' ChatType.StartTyping);  		client.Self.AnimationStart (Animations.TYPE' false);  		typing = true;  	}  	else {  		// Randomly pause typing  		if (rand.Next (10) >= 9) {  			client.Self.Chat (String.Empty' 0' ChatType.StopTyping);  			client.Self.AnimationStop (Animations.TYPE' false);  			typing = false;  		}  	}  	// Sleep for a second and increase the amount of characters we've typed  	System.Threading.Thread.Sleep (1000);  	characters += cps;  }  
Magic Number,libsecondlife.Utilities,Realism,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Chat,The following statement contains a magic number: if (!typing) {  	// Start typing again  	client.Self.Chat (String.Empty' 0' ChatType.StartTyping);  	client.Self.AnimationStart (Animations.TYPE' false);  	typing = true;  }  else {  	// Randomly pause typing  	if (rand.Next (10) >= 9) {  		client.Self.Chat (String.Empty' 0' ChatType.StopTyping);  		client.Self.AnimationStop (Animations.TYPE' false);  		typing = false;  	}  }  
Magic Number,libsecondlife.Utilities,Realism,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Chat,The following statement contains a magic number: if (!typing) {  	// Start typing again  	client.Self.Chat (String.Empty' 0' ChatType.StartTyping);  	client.Self.AnimationStart (Animations.TYPE' false);  	typing = true;  }  else {  	// Randomly pause typing  	if (rand.Next (10) >= 9) {  		client.Self.Chat (String.Empty' 0' ChatType.StopTyping);  		client.Self.AnimationStop (Animations.TYPE' false);  		typing = false;  	}  }  
Magic Number,libsecondlife.Utilities,Realism,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Chat,The following statement contains a magic number: if (rand.Next (10) >= 9) {  	client.Self.Chat (String.Empty' 0' ChatType.StopTyping);  	client.Self.AnimationStop (Animations.TYPE' false);  	typing = false;  }  
Magic Number,libsecondlife.Utilities,Realism,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Chat,The following statement contains a magic number: if (rand.Next (10) >= 9) {  	client.Self.Chat (String.Empty' 0' ChatType.StopTyping);  	client.Self.AnimationStop (Animations.TYPE' false);  	typing = false;  }  
Magic Number,libsecondlife.Utilities,Realism,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Chat,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,libsecondlife.Utilities,ConnectionManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,PersistentLogin,The following statement contains a magic number: if (client.Network.Login (firstName' lastName' password' userAgent' start' author)) {  	Logger.Log ("Logged in to " + client.Network.CurrentSim' Helpers.LogLevel.Info' client);  	return true;  }  else {  	if (client.Network.LoginErrorKey == "god") {  		Logger.Log ("Grid is down' waiting 10 minutes"' Helpers.LogLevel.Warning' client);  		LoginWait (10);  		goto Start;  	}  	else if (client.Network.LoginErrorKey == "key") {  		Logger.Log ("Bad username or password' giving up on login"' Helpers.LogLevel.Error' client);  		return false;  	}  	else if (client.Network.LoginErrorKey == "presence") {  		Logger.Log ("Server is still logging us out' waiting 1 minute"' Helpers.LogLevel.Warning' client);  		LoginWait (1);  		goto Start;  	}  	else if (client.Network.LoginErrorKey == "disabled") {  		Logger.Log ("This account has been banned! Giving up on login"' Helpers.LogLevel.Error' client);  		return false;  	}  	else if (client.Network.LoginErrorKey == "timed out" || client.Network.LoginErrorKey == "no connection") {  		Logger.Log ("Login request timed out' waiting 1 minute"' Helpers.LogLevel.Warning' client);  		LoginWait (1);  		goto Start;  	}  	else if (client.Network.LoginErrorKey == "bad response") {  		Logger.Log ("Login server returned unparsable result"' Helpers.LogLevel.Warning' client);  		LoginWait (1);  		goto Start;  	}  	else {  		++unknownLogins;  		if (unknownLogins < 5) {  			Logger.Log ("Unknown login error' waiting 2 minutes: " + client.Network.LoginErrorKey' Helpers.LogLevel.Warning' client);  			LoginWait (2);  			goto Start;  		}  		else {  			Logger.Log ("Too many unknown login error codes' giving up"' Helpers.LogLevel.Error' client);  			return false;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ConnectionManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,PersistentLogin,The following statement contains a magic number: if (client.Network.Login (firstName' lastName' password' userAgent' start' author)) {  	Logger.Log ("Logged in to " + client.Network.CurrentSim' Helpers.LogLevel.Info' client);  	return true;  }  else {  	if (client.Network.LoginErrorKey == "god") {  		Logger.Log ("Grid is down' waiting 10 minutes"' Helpers.LogLevel.Warning' client);  		LoginWait (10);  		goto Start;  	}  	else if (client.Network.LoginErrorKey == "key") {  		Logger.Log ("Bad username or password' giving up on login"' Helpers.LogLevel.Error' client);  		return false;  	}  	else if (client.Network.LoginErrorKey == "presence") {  		Logger.Log ("Server is still logging us out' waiting 1 minute"' Helpers.LogLevel.Warning' client);  		LoginWait (1);  		goto Start;  	}  	else if (client.Network.LoginErrorKey == "disabled") {  		Logger.Log ("This account has been banned! Giving up on login"' Helpers.LogLevel.Error' client);  		return false;  	}  	else if (client.Network.LoginErrorKey == "timed out" || client.Network.LoginErrorKey == "no connection") {  		Logger.Log ("Login request timed out' waiting 1 minute"' Helpers.LogLevel.Warning' client);  		LoginWait (1);  		goto Start;  	}  	else if (client.Network.LoginErrorKey == "bad response") {  		Logger.Log ("Login server returned unparsable result"' Helpers.LogLevel.Warning' client);  		LoginWait (1);  		goto Start;  	}  	else {  		++unknownLogins;  		if (unknownLogins < 5) {  			Logger.Log ("Unknown login error' waiting 2 minutes: " + client.Network.LoginErrorKey' Helpers.LogLevel.Warning' client);  			LoginWait (2);  			goto Start;  		}  		else {  			Logger.Log ("Too many unknown login error codes' giving up"' Helpers.LogLevel.Error' client);  			return false;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ConnectionManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,PersistentLogin,The following statement contains a magic number: if (client.Network.Login (firstName' lastName' password' userAgent' start' author)) {  	Logger.Log ("Logged in to " + client.Network.CurrentSim' Helpers.LogLevel.Info' client);  	return true;  }  else {  	if (client.Network.LoginErrorKey == "god") {  		Logger.Log ("Grid is down' waiting 10 minutes"' Helpers.LogLevel.Warning' client);  		LoginWait (10);  		goto Start;  	}  	else if (client.Network.LoginErrorKey == "key") {  		Logger.Log ("Bad username or password' giving up on login"' Helpers.LogLevel.Error' client);  		return false;  	}  	else if (client.Network.LoginErrorKey == "presence") {  		Logger.Log ("Server is still logging us out' waiting 1 minute"' Helpers.LogLevel.Warning' client);  		LoginWait (1);  		goto Start;  	}  	else if (client.Network.LoginErrorKey == "disabled") {  		Logger.Log ("This account has been banned! Giving up on login"' Helpers.LogLevel.Error' client);  		return false;  	}  	else if (client.Network.LoginErrorKey == "timed out" || client.Network.LoginErrorKey == "no connection") {  		Logger.Log ("Login request timed out' waiting 1 minute"' Helpers.LogLevel.Warning' client);  		LoginWait (1);  		goto Start;  	}  	else if (client.Network.LoginErrorKey == "bad response") {  		Logger.Log ("Login server returned unparsable result"' Helpers.LogLevel.Warning' client);  		LoginWait (1);  		goto Start;  	}  	else {  		++unknownLogins;  		if (unknownLogins < 5) {  			Logger.Log ("Unknown login error' waiting 2 minutes: " + client.Network.LoginErrorKey' Helpers.LogLevel.Warning' client);  			LoginWait (2);  			goto Start;  		}  		else {  			Logger.Log ("Too many unknown login error codes' giving up"' Helpers.LogLevel.Error' client);  			return false;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ConnectionManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,PersistentLogin,The following statement contains a magic number: if (client.Network.LoginErrorKey == "god") {  	Logger.Log ("Grid is down' waiting 10 minutes"' Helpers.LogLevel.Warning' client);  	LoginWait (10);  	goto Start;  }  else if (client.Network.LoginErrorKey == "key") {  	Logger.Log ("Bad username or password' giving up on login"' Helpers.LogLevel.Error' client);  	return false;  }  else if (client.Network.LoginErrorKey == "presence") {  	Logger.Log ("Server is still logging us out' waiting 1 minute"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else if (client.Network.LoginErrorKey == "disabled") {  	Logger.Log ("This account has been banned! Giving up on login"' Helpers.LogLevel.Error' client);  	return false;  }  else if (client.Network.LoginErrorKey == "timed out" || client.Network.LoginErrorKey == "no connection") {  	Logger.Log ("Login request timed out' waiting 1 minute"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else if (client.Network.LoginErrorKey == "bad response") {  	Logger.Log ("Login server returned unparsable result"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else {  	++unknownLogins;  	if (unknownLogins < 5) {  		Logger.Log ("Unknown login error' waiting 2 minutes: " + client.Network.LoginErrorKey' Helpers.LogLevel.Warning' client);  		LoginWait (2);  		goto Start;  	}  	else {  		Logger.Log ("Too many unknown login error codes' giving up"' Helpers.LogLevel.Error' client);  		return false;  	}  }  
Magic Number,libsecondlife.Utilities,ConnectionManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,PersistentLogin,The following statement contains a magic number: if (client.Network.LoginErrorKey == "god") {  	Logger.Log ("Grid is down' waiting 10 minutes"' Helpers.LogLevel.Warning' client);  	LoginWait (10);  	goto Start;  }  else if (client.Network.LoginErrorKey == "key") {  	Logger.Log ("Bad username or password' giving up on login"' Helpers.LogLevel.Error' client);  	return false;  }  else if (client.Network.LoginErrorKey == "presence") {  	Logger.Log ("Server is still logging us out' waiting 1 minute"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else if (client.Network.LoginErrorKey == "disabled") {  	Logger.Log ("This account has been banned! Giving up on login"' Helpers.LogLevel.Error' client);  	return false;  }  else if (client.Network.LoginErrorKey == "timed out" || client.Network.LoginErrorKey == "no connection") {  	Logger.Log ("Login request timed out' waiting 1 minute"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else if (client.Network.LoginErrorKey == "bad response") {  	Logger.Log ("Login server returned unparsable result"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else {  	++unknownLogins;  	if (unknownLogins < 5) {  		Logger.Log ("Unknown login error' waiting 2 minutes: " + client.Network.LoginErrorKey' Helpers.LogLevel.Warning' client);  		LoginWait (2);  		goto Start;  	}  	else {  		Logger.Log ("Too many unknown login error codes' giving up"' Helpers.LogLevel.Error' client);  		return false;  	}  }  
Magic Number,libsecondlife.Utilities,ConnectionManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,PersistentLogin,The following statement contains a magic number: if (client.Network.LoginErrorKey == "god") {  	Logger.Log ("Grid is down' waiting 10 minutes"' Helpers.LogLevel.Warning' client);  	LoginWait (10);  	goto Start;  }  else if (client.Network.LoginErrorKey == "key") {  	Logger.Log ("Bad username or password' giving up on login"' Helpers.LogLevel.Error' client);  	return false;  }  else if (client.Network.LoginErrorKey == "presence") {  	Logger.Log ("Server is still logging us out' waiting 1 minute"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else if (client.Network.LoginErrorKey == "disabled") {  	Logger.Log ("This account has been banned! Giving up on login"' Helpers.LogLevel.Error' client);  	return false;  }  else if (client.Network.LoginErrorKey == "timed out" || client.Network.LoginErrorKey == "no connection") {  	Logger.Log ("Login request timed out' waiting 1 minute"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else if (client.Network.LoginErrorKey == "bad response") {  	Logger.Log ("Login server returned unparsable result"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else {  	++unknownLogins;  	if (unknownLogins < 5) {  		Logger.Log ("Unknown login error' waiting 2 minutes: " + client.Network.LoginErrorKey' Helpers.LogLevel.Warning' client);  		LoginWait (2);  		goto Start;  	}  	else {  		Logger.Log ("Too many unknown login error codes' giving up"' Helpers.LogLevel.Error' client);  		return false;  	}  }  
Magic Number,libsecondlife.Utilities,ConnectionManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,PersistentLogin,The following statement contains a magic number: LoginWait (10);  
Magic Number,libsecondlife.Utilities,ConnectionManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,PersistentLogin,The following statement contains a magic number: if (client.Network.LoginErrorKey == "key") {  	Logger.Log ("Bad username or password' giving up on login"' Helpers.LogLevel.Error' client);  	return false;  }  else if (client.Network.LoginErrorKey == "presence") {  	Logger.Log ("Server is still logging us out' waiting 1 minute"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else if (client.Network.LoginErrorKey == "disabled") {  	Logger.Log ("This account has been banned! Giving up on login"' Helpers.LogLevel.Error' client);  	return false;  }  else if (client.Network.LoginErrorKey == "timed out" || client.Network.LoginErrorKey == "no connection") {  	Logger.Log ("Login request timed out' waiting 1 minute"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else if (client.Network.LoginErrorKey == "bad response") {  	Logger.Log ("Login server returned unparsable result"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else {  	++unknownLogins;  	if (unknownLogins < 5) {  		Logger.Log ("Unknown login error' waiting 2 minutes: " + client.Network.LoginErrorKey' Helpers.LogLevel.Warning' client);  		LoginWait (2);  		goto Start;  	}  	else {  		Logger.Log ("Too many unknown login error codes' giving up"' Helpers.LogLevel.Error' client);  		return false;  	}  }  
Magic Number,libsecondlife.Utilities,ConnectionManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,PersistentLogin,The following statement contains a magic number: if (client.Network.LoginErrorKey == "key") {  	Logger.Log ("Bad username or password' giving up on login"' Helpers.LogLevel.Error' client);  	return false;  }  else if (client.Network.LoginErrorKey == "presence") {  	Logger.Log ("Server is still logging us out' waiting 1 minute"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else if (client.Network.LoginErrorKey == "disabled") {  	Logger.Log ("This account has been banned! Giving up on login"' Helpers.LogLevel.Error' client);  	return false;  }  else if (client.Network.LoginErrorKey == "timed out" || client.Network.LoginErrorKey == "no connection") {  	Logger.Log ("Login request timed out' waiting 1 minute"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else if (client.Network.LoginErrorKey == "bad response") {  	Logger.Log ("Login server returned unparsable result"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else {  	++unknownLogins;  	if (unknownLogins < 5) {  		Logger.Log ("Unknown login error' waiting 2 minutes: " + client.Network.LoginErrorKey' Helpers.LogLevel.Warning' client);  		LoginWait (2);  		goto Start;  	}  	else {  		Logger.Log ("Too many unknown login error codes' giving up"' Helpers.LogLevel.Error' client);  		return false;  	}  }  
Magic Number,libsecondlife.Utilities,ConnectionManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,PersistentLogin,The following statement contains a magic number: if (client.Network.LoginErrorKey == "presence") {  	Logger.Log ("Server is still logging us out' waiting 1 minute"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else if (client.Network.LoginErrorKey == "disabled") {  	Logger.Log ("This account has been banned! Giving up on login"' Helpers.LogLevel.Error' client);  	return false;  }  else if (client.Network.LoginErrorKey == "timed out" || client.Network.LoginErrorKey == "no connection") {  	Logger.Log ("Login request timed out' waiting 1 minute"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else if (client.Network.LoginErrorKey == "bad response") {  	Logger.Log ("Login server returned unparsable result"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else {  	++unknownLogins;  	if (unknownLogins < 5) {  		Logger.Log ("Unknown login error' waiting 2 minutes: " + client.Network.LoginErrorKey' Helpers.LogLevel.Warning' client);  		LoginWait (2);  		goto Start;  	}  	else {  		Logger.Log ("Too many unknown login error codes' giving up"' Helpers.LogLevel.Error' client);  		return false;  	}  }  
Magic Number,libsecondlife.Utilities,ConnectionManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,PersistentLogin,The following statement contains a magic number: if (client.Network.LoginErrorKey == "presence") {  	Logger.Log ("Server is still logging us out' waiting 1 minute"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else if (client.Network.LoginErrorKey == "disabled") {  	Logger.Log ("This account has been banned! Giving up on login"' Helpers.LogLevel.Error' client);  	return false;  }  else if (client.Network.LoginErrorKey == "timed out" || client.Network.LoginErrorKey == "no connection") {  	Logger.Log ("Login request timed out' waiting 1 minute"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else if (client.Network.LoginErrorKey == "bad response") {  	Logger.Log ("Login server returned unparsable result"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else {  	++unknownLogins;  	if (unknownLogins < 5) {  		Logger.Log ("Unknown login error' waiting 2 minutes: " + client.Network.LoginErrorKey' Helpers.LogLevel.Warning' client);  		LoginWait (2);  		goto Start;  	}  	else {  		Logger.Log ("Too many unknown login error codes' giving up"' Helpers.LogLevel.Error' client);  		return false;  	}  }  
Magic Number,libsecondlife.Utilities,ConnectionManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,PersistentLogin,The following statement contains a magic number: if (client.Network.LoginErrorKey == "disabled") {  	Logger.Log ("This account has been banned! Giving up on login"' Helpers.LogLevel.Error' client);  	return false;  }  else if (client.Network.LoginErrorKey == "timed out" || client.Network.LoginErrorKey == "no connection") {  	Logger.Log ("Login request timed out' waiting 1 minute"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else if (client.Network.LoginErrorKey == "bad response") {  	Logger.Log ("Login server returned unparsable result"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else {  	++unknownLogins;  	if (unknownLogins < 5) {  		Logger.Log ("Unknown login error' waiting 2 minutes: " + client.Network.LoginErrorKey' Helpers.LogLevel.Warning' client);  		LoginWait (2);  		goto Start;  	}  	else {  		Logger.Log ("Too many unknown login error codes' giving up"' Helpers.LogLevel.Error' client);  		return false;  	}  }  
Magic Number,libsecondlife.Utilities,ConnectionManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,PersistentLogin,The following statement contains a magic number: if (client.Network.LoginErrorKey == "disabled") {  	Logger.Log ("This account has been banned! Giving up on login"' Helpers.LogLevel.Error' client);  	return false;  }  else if (client.Network.LoginErrorKey == "timed out" || client.Network.LoginErrorKey == "no connection") {  	Logger.Log ("Login request timed out' waiting 1 minute"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else if (client.Network.LoginErrorKey == "bad response") {  	Logger.Log ("Login server returned unparsable result"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else {  	++unknownLogins;  	if (unknownLogins < 5) {  		Logger.Log ("Unknown login error' waiting 2 minutes: " + client.Network.LoginErrorKey' Helpers.LogLevel.Warning' client);  		LoginWait (2);  		goto Start;  	}  	else {  		Logger.Log ("Too many unknown login error codes' giving up"' Helpers.LogLevel.Error' client);  		return false;  	}  }  
Magic Number,libsecondlife.Utilities,ConnectionManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,PersistentLogin,The following statement contains a magic number: if (client.Network.LoginErrorKey == "timed out" || client.Network.LoginErrorKey == "no connection") {  	Logger.Log ("Login request timed out' waiting 1 minute"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else if (client.Network.LoginErrorKey == "bad response") {  	Logger.Log ("Login server returned unparsable result"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else {  	++unknownLogins;  	if (unknownLogins < 5) {  		Logger.Log ("Unknown login error' waiting 2 minutes: " + client.Network.LoginErrorKey' Helpers.LogLevel.Warning' client);  		LoginWait (2);  		goto Start;  	}  	else {  		Logger.Log ("Too many unknown login error codes' giving up"' Helpers.LogLevel.Error' client);  		return false;  	}  }  
Magic Number,libsecondlife.Utilities,ConnectionManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,PersistentLogin,The following statement contains a magic number: if (client.Network.LoginErrorKey == "timed out" || client.Network.LoginErrorKey == "no connection") {  	Logger.Log ("Login request timed out' waiting 1 minute"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else if (client.Network.LoginErrorKey == "bad response") {  	Logger.Log ("Login server returned unparsable result"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else {  	++unknownLogins;  	if (unknownLogins < 5) {  		Logger.Log ("Unknown login error' waiting 2 minutes: " + client.Network.LoginErrorKey' Helpers.LogLevel.Warning' client);  		LoginWait (2);  		goto Start;  	}  	else {  		Logger.Log ("Too many unknown login error codes' giving up"' Helpers.LogLevel.Error' client);  		return false;  	}  }  
Magic Number,libsecondlife.Utilities,ConnectionManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,PersistentLogin,The following statement contains a magic number: if (client.Network.LoginErrorKey == "bad response") {  	Logger.Log ("Login server returned unparsable result"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else {  	++unknownLogins;  	if (unknownLogins < 5) {  		Logger.Log ("Unknown login error' waiting 2 minutes: " + client.Network.LoginErrorKey' Helpers.LogLevel.Warning' client);  		LoginWait (2);  		goto Start;  	}  	else {  		Logger.Log ("Too many unknown login error codes' giving up"' Helpers.LogLevel.Error' client);  		return false;  	}  }  
Magic Number,libsecondlife.Utilities,ConnectionManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,PersistentLogin,The following statement contains a magic number: if (client.Network.LoginErrorKey == "bad response") {  	Logger.Log ("Login server returned unparsable result"' Helpers.LogLevel.Warning' client);  	LoginWait (1);  	goto Start;  }  else {  	++unknownLogins;  	if (unknownLogins < 5) {  		Logger.Log ("Unknown login error' waiting 2 minutes: " + client.Network.LoginErrorKey' Helpers.LogLevel.Warning' client);  		LoginWait (2);  		goto Start;  	}  	else {  		Logger.Log ("Too many unknown login error codes' giving up"' Helpers.LogLevel.Error' client);  		return false;  	}  }  
Magic Number,libsecondlife.Utilities,ConnectionManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,PersistentLogin,The following statement contains a magic number: if (unknownLogins < 5) {  	Logger.Log ("Unknown login error' waiting 2 minutes: " + client.Network.LoginErrorKey' Helpers.LogLevel.Warning' client);  	LoginWait (2);  	goto Start;  }  else {  	Logger.Log ("Too many unknown login error codes' giving up"' Helpers.LogLevel.Error' client);  	return false;  }  
Magic Number,libsecondlife.Utilities,ConnectionManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,PersistentLogin,The following statement contains a magic number: if (unknownLogins < 5) {  	Logger.Log ("Unknown login error' waiting 2 minutes: " + client.Network.LoginErrorKey' Helpers.LogLevel.Warning' client);  	LoginWait (2);  	goto Start;  }  else {  	Logger.Log ("Too many unknown login error codes' giving up"' Helpers.LogLevel.Error' client);  	return false;  }  
Magic Number,libsecondlife.Utilities,ConnectionManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,PersistentLogin,The following statement contains a magic number: LoginWait (2);  
Magic Number,libsecondlife.Utilities,ConnectionManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,LoginWait,The following statement contains a magic number: Thread.Sleep (1000 * 60 * minutes);  
Magic Number,libsecondlife.Utilities,ConnectionManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,LoginWait,The following statement contains a magic number: Thread.Sleep (1000 * 60 * minutes);  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,DownloadSimParcels,The following statement contains a magic number: lock (ParcelMarked) {  	if (!ParcelMarked.ContainsKey (simulator)) {  		ParcelMarked [simulator] = new int[64' 64];  		Parcels [simulator] = new Dictionary<int' Parcel> ();  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,DownloadSimParcels,The following statement contains a magic number: lock (ParcelMarked) {  	if (!ParcelMarked.ContainsKey (simulator)) {  		ParcelMarked [simulator] = new int[64' 64];  		Parcels [simulator] = new Dictionary<int' Parcel> ();  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,DownloadSimParcels,The following statement contains a magic number: if (!ParcelMarked.ContainsKey (simulator)) {  	ParcelMarked [simulator] = new int[64' 64];  	Parcels [simulator] = new Dictionary<int' Parcel> ();  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,DownloadSimParcels,The following statement contains a magic number: if (!ParcelMarked.ContainsKey (simulator)) {  	ParcelMarked [simulator] = new int[64' 64];  	Parcels [simulator] = new Dictionary<int' Parcel> ();  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,DownloadSimParcels,The following statement contains a magic number: ParcelMarked [simulator] = new int[64' 64];  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,DownloadSimParcels,The following statement contains a magic number: ParcelMarked [simulator] = new int[64' 64];  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int y = 0; y < 64; y++) {  	for (int x = 0; x < 64; x++) {  		if (map [y' x] == localid) {  			for (int y1 = 0; y1 < 4; y1++) {  				for (int x1 = 0; x1 < 4; x1++) {  					float height;  					int tries = 0;  					CheckHeight:  					if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  						if (height < min)  							min = height;  						if (height > max)  							max = height;  					}  					else if (tries > 4) {  						Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  						continue;  					}  					else {  						Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  						// Terrain at this point hasn't been downloaded' move the camera to this spot  						// and try again  						LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  						Client.Self.Movement.Camera.Position = position;  						Client.Self.Movement.SendUpdate (true);  						Thread.Sleep (1000);  						goto CheckHeight;  					}  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int y = 0; y < 64; y++) {  	for (int x = 0; x < 64; x++) {  		if (map [y' x] == localid) {  			for (int y1 = 0; y1 < 4; y1++) {  				for (int x1 = 0; x1 < 4; x1++) {  					float height;  					int tries = 0;  					CheckHeight:  					if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  						if (height < min)  							min = height;  						if (height > max)  							max = height;  					}  					else if (tries > 4) {  						Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  						continue;  					}  					else {  						Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  						// Terrain at this point hasn't been downloaded' move the camera to this spot  						// and try again  						LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  						Client.Self.Movement.Camera.Position = position;  						Client.Self.Movement.SendUpdate (true);  						Thread.Sleep (1000);  						goto CheckHeight;  					}  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int y = 0; y < 64; y++) {  	for (int x = 0; x < 64; x++) {  		if (map [y' x] == localid) {  			for (int y1 = 0; y1 < 4; y1++) {  				for (int x1 = 0; x1 < 4; x1++) {  					float height;  					int tries = 0;  					CheckHeight:  					if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  						if (height < min)  							min = height;  						if (height > max)  							max = height;  					}  					else if (tries > 4) {  						Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  						continue;  					}  					else {  						Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  						// Terrain at this point hasn't been downloaded' move the camera to this spot  						// and try again  						LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  						Client.Self.Movement.Camera.Position = position;  						Client.Self.Movement.SendUpdate (true);  						Thread.Sleep (1000);  						goto CheckHeight;  					}  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int y = 0; y < 64; y++) {  	for (int x = 0; x < 64; x++) {  		if (map [y' x] == localid) {  			for (int y1 = 0; y1 < 4; y1++) {  				for (int x1 = 0; x1 < 4; x1++) {  					float height;  					int tries = 0;  					CheckHeight:  					if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  						if (height < min)  							min = height;  						if (height > max)  							max = height;  					}  					else if (tries > 4) {  						Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  						continue;  					}  					else {  						Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  						// Terrain at this point hasn't been downloaded' move the camera to this spot  						// and try again  						LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  						Client.Self.Movement.Camera.Position = position;  						Client.Self.Movement.SendUpdate (true);  						Thread.Sleep (1000);  						goto CheckHeight;  					}  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int y = 0; y < 64; y++) {  	for (int x = 0; x < 64; x++) {  		if (map [y' x] == localid) {  			for (int y1 = 0; y1 < 4; y1++) {  				for (int x1 = 0; x1 < 4; x1++) {  					float height;  					int tries = 0;  					CheckHeight:  					if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  						if (height < min)  							min = height;  						if (height > max)  							max = height;  					}  					else if (tries > 4) {  						Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  						continue;  					}  					else {  						Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  						// Terrain at this point hasn't been downloaded' move the camera to this spot  						// and try again  						LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  						Client.Self.Movement.Camera.Position = position;  						Client.Self.Movement.SendUpdate (true);  						Thread.Sleep (1000);  						goto CheckHeight;  					}  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int y = 0; y < 64; y++) {  	for (int x = 0; x < 64; x++) {  		if (map [y' x] == localid) {  			for (int y1 = 0; y1 < 4; y1++) {  				for (int x1 = 0; x1 < 4; x1++) {  					float height;  					int tries = 0;  					CheckHeight:  					if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  						if (height < min)  							min = height;  						if (height > max)  							max = height;  					}  					else if (tries > 4) {  						Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  						continue;  					}  					else {  						Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  						// Terrain at this point hasn't been downloaded' move the camera to this spot  						// and try again  						LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  						Client.Self.Movement.Camera.Position = position;  						Client.Self.Movement.SendUpdate (true);  						Thread.Sleep (1000);  						goto CheckHeight;  					}  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int y = 0; y < 64; y++) {  	for (int x = 0; x < 64; x++) {  		if (map [y' x] == localid) {  			for (int y1 = 0; y1 < 4; y1++) {  				for (int x1 = 0; x1 < 4; x1++) {  					float height;  					int tries = 0;  					CheckHeight:  					if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  						if (height < min)  							min = height;  						if (height > max)  							max = height;  					}  					else if (tries > 4) {  						Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  						continue;  					}  					else {  						Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  						// Terrain at this point hasn't been downloaded' move the camera to this spot  						// and try again  						LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  						Client.Self.Movement.Camera.Position = position;  						Client.Self.Movement.SendUpdate (true);  						Thread.Sleep (1000);  						goto CheckHeight;  					}  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int y = 0; y < 64; y++) {  	for (int x = 0; x < 64; x++) {  		if (map [y' x] == localid) {  			for (int y1 = 0; y1 < 4; y1++) {  				for (int x1 = 0; x1 < 4; x1++) {  					float height;  					int tries = 0;  					CheckHeight:  					if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  						if (height < min)  							min = height;  						if (height > max)  							max = height;  					}  					else if (tries > 4) {  						Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  						continue;  					}  					else {  						Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  						// Terrain at this point hasn't been downloaded' move the camera to this spot  						// and try again  						LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  						Client.Self.Movement.Camera.Position = position;  						Client.Self.Movement.SendUpdate (true);  						Thread.Sleep (1000);  						goto CheckHeight;  					}  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int y = 0; y < 64; y++) {  	for (int x = 0; x < 64; x++) {  		if (map [y' x] == localid) {  			for (int y1 = 0; y1 < 4; y1++) {  				for (int x1 = 0; x1 < 4; x1++) {  					float height;  					int tries = 0;  					CheckHeight:  					if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  						if (height < min)  							min = height;  						if (height > max)  							max = height;  					}  					else if (tries > 4) {  						Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  						continue;  					}  					else {  						Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  						// Terrain at this point hasn't been downloaded' move the camera to this spot  						// and try again  						LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  						Client.Self.Movement.Camera.Position = position;  						Client.Self.Movement.SendUpdate (true);  						Thread.Sleep (1000);  						goto CheckHeight;  					}  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int y = 0; y < 64; y++) {  	for (int x = 0; x < 64; x++) {  		if (map [y' x] == localid) {  			for (int y1 = 0; y1 < 4; y1++) {  				for (int x1 = 0; x1 < 4; x1++) {  					float height;  					int tries = 0;  					CheckHeight:  					if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  						if (height < min)  							min = height;  						if (height > max)  							max = height;  					}  					else if (tries > 4) {  						Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  						continue;  					}  					else {  						Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  						// Terrain at this point hasn't been downloaded' move the camera to this spot  						// and try again  						LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  						Client.Self.Movement.Camera.Position = position;  						Client.Self.Movement.SendUpdate (true);  						Thread.Sleep (1000);  						goto CheckHeight;  					}  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int y = 0; y < 64; y++) {  	for (int x = 0; x < 64; x++) {  		if (map [y' x] == localid) {  			for (int y1 = 0; y1 < 4; y1++) {  				for (int x1 = 0; x1 < 4; x1++) {  					float height;  					int tries = 0;  					CheckHeight:  					if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  						if (height < min)  							min = height;  						if (height > max)  							max = height;  					}  					else if (tries > 4) {  						Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  						continue;  					}  					else {  						Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  						// Terrain at this point hasn't been downloaded' move the camera to this spot  						// and try again  						LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  						Client.Self.Movement.Camera.Position = position;  						Client.Self.Movement.SendUpdate (true);  						Thread.Sleep (1000);  						goto CheckHeight;  					}  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int y = 0; y < 64; y++) {  	for (int x = 0; x < 64; x++) {  		if (map [y' x] == localid) {  			for (int y1 = 0; y1 < 4; y1++) {  				for (int x1 = 0; x1 < 4; x1++) {  					float height;  					int tries = 0;  					CheckHeight:  					if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  						if (height < min)  							min = height;  						if (height > max)  							max = height;  					}  					else if (tries > 4) {  						Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  						continue;  					}  					else {  						Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  						// Terrain at this point hasn't been downloaded' move the camera to this spot  						// and try again  						LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  						Client.Self.Movement.Camera.Position = position;  						Client.Self.Movement.SendUpdate (true);  						Thread.Sleep (1000);  						goto CheckHeight;  					}  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int x = 0; x < 64; x++) {  	if (map [y' x] == localid) {  		for (int y1 = 0; y1 < 4; y1++) {  			for (int x1 = 0; x1 < 4; x1++) {  				float height;  				int tries = 0;  				CheckHeight:  				if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  					if (height < min)  						min = height;  					if (height > max)  						max = height;  				}  				else if (tries > 4) {  					Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  					continue;  				}  				else {  					Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  					// Terrain at this point hasn't been downloaded' move the camera to this spot  					// and try again  					LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  					Client.Self.Movement.Camera.Position = position;  					Client.Self.Movement.SendUpdate (true);  					Thread.Sleep (1000);  					goto CheckHeight;  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int x = 0; x < 64; x++) {  	if (map [y' x] == localid) {  		for (int y1 = 0; y1 < 4; y1++) {  			for (int x1 = 0; x1 < 4; x1++) {  				float height;  				int tries = 0;  				CheckHeight:  				if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  					if (height < min)  						min = height;  					if (height > max)  						max = height;  				}  				else if (tries > 4) {  					Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  					continue;  				}  				else {  					Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  					// Terrain at this point hasn't been downloaded' move the camera to this spot  					// and try again  					LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  					Client.Self.Movement.Camera.Position = position;  					Client.Self.Movement.SendUpdate (true);  					Thread.Sleep (1000);  					goto CheckHeight;  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int x = 0; x < 64; x++) {  	if (map [y' x] == localid) {  		for (int y1 = 0; y1 < 4; y1++) {  			for (int x1 = 0; x1 < 4; x1++) {  				float height;  				int tries = 0;  				CheckHeight:  				if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  					if (height < min)  						min = height;  					if (height > max)  						max = height;  				}  				else if (tries > 4) {  					Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  					continue;  				}  				else {  					Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  					// Terrain at this point hasn't been downloaded' move the camera to this spot  					// and try again  					LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  					Client.Self.Movement.Camera.Position = position;  					Client.Self.Movement.SendUpdate (true);  					Thread.Sleep (1000);  					goto CheckHeight;  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int x = 0; x < 64; x++) {  	if (map [y' x] == localid) {  		for (int y1 = 0; y1 < 4; y1++) {  			for (int x1 = 0; x1 < 4; x1++) {  				float height;  				int tries = 0;  				CheckHeight:  				if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  					if (height < min)  						min = height;  					if (height > max)  						max = height;  				}  				else if (tries > 4) {  					Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  					continue;  				}  				else {  					Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  					// Terrain at this point hasn't been downloaded' move the camera to this spot  					// and try again  					LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  					Client.Self.Movement.Camera.Position = position;  					Client.Self.Movement.SendUpdate (true);  					Thread.Sleep (1000);  					goto CheckHeight;  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int x = 0; x < 64; x++) {  	if (map [y' x] == localid) {  		for (int y1 = 0; y1 < 4; y1++) {  			for (int x1 = 0; x1 < 4; x1++) {  				float height;  				int tries = 0;  				CheckHeight:  				if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  					if (height < min)  						min = height;  					if (height > max)  						max = height;  				}  				else if (tries > 4) {  					Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  					continue;  				}  				else {  					Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  					// Terrain at this point hasn't been downloaded' move the camera to this spot  					// and try again  					LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  					Client.Self.Movement.Camera.Position = position;  					Client.Self.Movement.SendUpdate (true);  					Thread.Sleep (1000);  					goto CheckHeight;  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int x = 0; x < 64; x++) {  	if (map [y' x] == localid) {  		for (int y1 = 0; y1 < 4; y1++) {  			for (int x1 = 0; x1 < 4; x1++) {  				float height;  				int tries = 0;  				CheckHeight:  				if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  					if (height < min)  						min = height;  					if (height > max)  						max = height;  				}  				else if (tries > 4) {  					Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  					continue;  				}  				else {  					Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  					// Terrain at this point hasn't been downloaded' move the camera to this spot  					// and try again  					LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  					Client.Self.Movement.Camera.Position = position;  					Client.Self.Movement.SendUpdate (true);  					Thread.Sleep (1000);  					goto CheckHeight;  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int x = 0; x < 64; x++) {  	if (map [y' x] == localid) {  		for (int y1 = 0; y1 < 4; y1++) {  			for (int x1 = 0; x1 < 4; x1++) {  				float height;  				int tries = 0;  				CheckHeight:  				if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  					if (height < min)  						min = height;  					if (height > max)  						max = height;  				}  				else if (tries > 4) {  					Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  					continue;  				}  				else {  					Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  					// Terrain at this point hasn't been downloaded' move the camera to this spot  					// and try again  					LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  					Client.Self.Movement.Camera.Position = position;  					Client.Self.Movement.SendUpdate (true);  					Thread.Sleep (1000);  					goto CheckHeight;  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int x = 0; x < 64; x++) {  	if (map [y' x] == localid) {  		for (int y1 = 0; y1 < 4; y1++) {  			for (int x1 = 0; x1 < 4; x1++) {  				float height;  				int tries = 0;  				CheckHeight:  				if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  					if (height < min)  						min = height;  					if (height > max)  						max = height;  				}  				else if (tries > 4) {  					Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  					continue;  				}  				else {  					Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  					// Terrain at this point hasn't been downloaded' move the camera to this spot  					// and try again  					LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  					Client.Self.Movement.Camera.Position = position;  					Client.Self.Movement.SendUpdate (true);  					Thread.Sleep (1000);  					goto CheckHeight;  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int x = 0; x < 64; x++) {  	if (map [y' x] == localid) {  		for (int y1 = 0; y1 < 4; y1++) {  			for (int x1 = 0; x1 < 4; x1++) {  				float height;  				int tries = 0;  				CheckHeight:  				if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  					if (height < min)  						min = height;  					if (height > max)  						max = height;  				}  				else if (tries > 4) {  					Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  					continue;  				}  				else {  					Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  					// Terrain at this point hasn't been downloaded' move the camera to this spot  					// and try again  					LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  					Client.Self.Movement.Camera.Position = position;  					Client.Self.Movement.SendUpdate (true);  					Thread.Sleep (1000);  					goto CheckHeight;  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int x = 0; x < 64; x++) {  	if (map [y' x] == localid) {  		for (int y1 = 0; y1 < 4; y1++) {  			for (int x1 = 0; x1 < 4; x1++) {  				float height;  				int tries = 0;  				CheckHeight:  				if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  					if (height < min)  						min = height;  					if (height > max)  						max = height;  				}  				else if (tries > 4) {  					Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  					continue;  				}  				else {  					Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  					// Terrain at this point hasn't been downloaded' move the camera to this spot  					// and try again  					LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  					Client.Self.Movement.Camera.Position = position;  					Client.Self.Movement.SendUpdate (true);  					Thread.Sleep (1000);  					goto CheckHeight;  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int x = 0; x < 64; x++) {  	if (map [y' x] == localid) {  		for (int y1 = 0; y1 < 4; y1++) {  			for (int x1 = 0; x1 < 4; x1++) {  				float height;  				int tries = 0;  				CheckHeight:  				if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  					if (height < min)  						min = height;  					if (height > max)  						max = height;  				}  				else if (tries > 4) {  					Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  					continue;  				}  				else {  					Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  					// Terrain at this point hasn't been downloaded' move the camera to this spot  					// and try again  					LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  					Client.Self.Movement.Camera.Position = position;  					Client.Self.Movement.SendUpdate (true);  					Thread.Sleep (1000);  					goto CheckHeight;  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: if (map [y' x] == localid) {  	for (int y1 = 0; y1 < 4; y1++) {  		for (int x1 = 0; x1 < 4; x1++) {  			float height;  			int tries = 0;  			CheckHeight:  			if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  				if (height < min)  					min = height;  				if (height > max)  					max = height;  			}  			else if (tries > 4) {  				Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  				continue;  			}  			else {  				Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  				// Terrain at this point hasn't been downloaded' move the camera to this spot  				// and try again  				LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  				Client.Self.Movement.Camera.Position = position;  				Client.Self.Movement.SendUpdate (true);  				Thread.Sleep (1000);  				goto CheckHeight;  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: if (map [y' x] == localid) {  	for (int y1 = 0; y1 < 4; y1++) {  		for (int x1 = 0; x1 < 4; x1++) {  			float height;  			int tries = 0;  			CheckHeight:  			if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  				if (height < min)  					min = height;  				if (height > max)  					max = height;  			}  			else if (tries > 4) {  				Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  				continue;  			}  			else {  				Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  				// Terrain at this point hasn't been downloaded' move the camera to this spot  				// and try again  				LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  				Client.Self.Movement.Camera.Position = position;  				Client.Self.Movement.SendUpdate (true);  				Thread.Sleep (1000);  				goto CheckHeight;  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: if (map [y' x] == localid) {  	for (int y1 = 0; y1 < 4; y1++) {  		for (int x1 = 0; x1 < 4; x1++) {  			float height;  			int tries = 0;  			CheckHeight:  			if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  				if (height < min)  					min = height;  				if (height > max)  					max = height;  			}  			else if (tries > 4) {  				Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  				continue;  			}  			else {  				Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  				// Terrain at this point hasn't been downloaded' move the camera to this spot  				// and try again  				LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  				Client.Self.Movement.Camera.Position = position;  				Client.Self.Movement.SendUpdate (true);  				Thread.Sleep (1000);  				goto CheckHeight;  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: if (map [y' x] == localid) {  	for (int y1 = 0; y1 < 4; y1++) {  		for (int x1 = 0; x1 < 4; x1++) {  			float height;  			int tries = 0;  			CheckHeight:  			if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  				if (height < min)  					min = height;  				if (height > max)  					max = height;  			}  			else if (tries > 4) {  				Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  				continue;  			}  			else {  				Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  				// Terrain at this point hasn't been downloaded' move the camera to this spot  				// and try again  				LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  				Client.Self.Movement.Camera.Position = position;  				Client.Self.Movement.SendUpdate (true);  				Thread.Sleep (1000);  				goto CheckHeight;  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: if (map [y' x] == localid) {  	for (int y1 = 0; y1 < 4; y1++) {  		for (int x1 = 0; x1 < 4; x1++) {  			float height;  			int tries = 0;  			CheckHeight:  			if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  				if (height < min)  					min = height;  				if (height > max)  					max = height;  			}  			else if (tries > 4) {  				Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  				continue;  			}  			else {  				Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  				// Terrain at this point hasn't been downloaded' move the camera to this spot  				// and try again  				LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  				Client.Self.Movement.Camera.Position = position;  				Client.Self.Movement.SendUpdate (true);  				Thread.Sleep (1000);  				goto CheckHeight;  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: if (map [y' x] == localid) {  	for (int y1 = 0; y1 < 4; y1++) {  		for (int x1 = 0; x1 < 4; x1++) {  			float height;  			int tries = 0;  			CheckHeight:  			if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  				if (height < min)  					min = height;  				if (height > max)  					max = height;  			}  			else if (tries > 4) {  				Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  				continue;  			}  			else {  				Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  				// Terrain at this point hasn't been downloaded' move the camera to this spot  				// and try again  				LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  				Client.Self.Movement.Camera.Position = position;  				Client.Self.Movement.SendUpdate (true);  				Thread.Sleep (1000);  				goto CheckHeight;  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: if (map [y' x] == localid) {  	for (int y1 = 0; y1 < 4; y1++) {  		for (int x1 = 0; x1 < 4; x1++) {  			float height;  			int tries = 0;  			CheckHeight:  			if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  				if (height < min)  					min = height;  				if (height > max)  					max = height;  			}  			else if (tries > 4) {  				Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  				continue;  			}  			else {  				Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  				// Terrain at this point hasn't been downloaded' move the camera to this spot  				// and try again  				LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  				Client.Self.Movement.Camera.Position = position;  				Client.Self.Movement.SendUpdate (true);  				Thread.Sleep (1000);  				goto CheckHeight;  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: if (map [y' x] == localid) {  	for (int y1 = 0; y1 < 4; y1++) {  		for (int x1 = 0; x1 < 4; x1++) {  			float height;  			int tries = 0;  			CheckHeight:  			if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  				if (height < min)  					min = height;  				if (height > max)  					max = height;  			}  			else if (tries > 4) {  				Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  				continue;  			}  			else {  				Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  				// Terrain at this point hasn't been downloaded' move the camera to this spot  				// and try again  				LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  				Client.Self.Movement.Camera.Position = position;  				Client.Self.Movement.SendUpdate (true);  				Thread.Sleep (1000);  				goto CheckHeight;  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: if (map [y' x] == localid) {  	for (int y1 = 0; y1 < 4; y1++) {  		for (int x1 = 0; x1 < 4; x1++) {  			float height;  			int tries = 0;  			CheckHeight:  			if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  				if (height < min)  					min = height;  				if (height > max)  					max = height;  			}  			else if (tries > 4) {  				Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  				continue;  			}  			else {  				Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  				// Terrain at this point hasn't been downloaded' move the camera to this spot  				// and try again  				LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  				Client.Self.Movement.Camera.Position = position;  				Client.Self.Movement.SendUpdate (true);  				Thread.Sleep (1000);  				goto CheckHeight;  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: if (map [y' x] == localid) {  	for (int y1 = 0; y1 < 4; y1++) {  		for (int x1 = 0; x1 < 4; x1++) {  			float height;  			int tries = 0;  			CheckHeight:  			if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  				if (height < min)  					min = height;  				if (height > max)  					max = height;  			}  			else if (tries > 4) {  				Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  				continue;  			}  			else {  				Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  				// Terrain at this point hasn't been downloaded' move the camera to this spot  				// and try again  				LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  				Client.Self.Movement.Camera.Position = position;  				Client.Self.Movement.SendUpdate (true);  				Thread.Sleep (1000);  				goto CheckHeight;  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int y1 = 0; y1 < 4; y1++) {  	for (int x1 = 0; x1 < 4; x1++) {  		float height;  		int tries = 0;  		CheckHeight:  		if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  			if (height < min)  				min = height;  			if (height > max)  				max = height;  		}  		else if (tries > 4) {  			Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  			continue;  		}  		else {  			Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  			// Terrain at this point hasn't been downloaded' move the camera to this spot  			// and try again  			LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  			Client.Self.Movement.Camera.Position = position;  			Client.Self.Movement.SendUpdate (true);  			Thread.Sleep (1000);  			goto CheckHeight;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int y1 = 0; y1 < 4; y1++) {  	for (int x1 = 0; x1 < 4; x1++) {  		float height;  		int tries = 0;  		CheckHeight:  		if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  			if (height < min)  				min = height;  			if (height > max)  				max = height;  		}  		else if (tries > 4) {  			Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  			continue;  		}  		else {  			Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  			// Terrain at this point hasn't been downloaded' move the camera to this spot  			// and try again  			LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  			Client.Self.Movement.Camera.Position = position;  			Client.Self.Movement.SendUpdate (true);  			Thread.Sleep (1000);  			goto CheckHeight;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int y1 = 0; y1 < 4; y1++) {  	for (int x1 = 0; x1 < 4; x1++) {  		float height;  		int tries = 0;  		CheckHeight:  		if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  			if (height < min)  				min = height;  			if (height > max)  				max = height;  		}  		else if (tries > 4) {  			Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  			continue;  		}  		else {  			Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  			// Terrain at this point hasn't been downloaded' move the camera to this spot  			// and try again  			LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  			Client.Self.Movement.Camera.Position = position;  			Client.Self.Movement.SendUpdate (true);  			Thread.Sleep (1000);  			goto CheckHeight;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int y1 = 0; y1 < 4; y1++) {  	for (int x1 = 0; x1 < 4; x1++) {  		float height;  		int tries = 0;  		CheckHeight:  		if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  			if (height < min)  				min = height;  			if (height > max)  				max = height;  		}  		else if (tries > 4) {  			Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  			continue;  		}  		else {  			Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  			// Terrain at this point hasn't been downloaded' move the camera to this spot  			// and try again  			LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  			Client.Self.Movement.Camera.Position = position;  			Client.Self.Movement.SendUpdate (true);  			Thread.Sleep (1000);  			goto CheckHeight;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int y1 = 0; y1 < 4; y1++) {  	for (int x1 = 0; x1 < 4; x1++) {  		float height;  		int tries = 0;  		CheckHeight:  		if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  			if (height < min)  				min = height;  			if (height > max)  				max = height;  		}  		else if (tries > 4) {  			Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  			continue;  		}  		else {  			Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  			// Terrain at this point hasn't been downloaded' move the camera to this spot  			// and try again  			LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  			Client.Self.Movement.Camera.Position = position;  			Client.Self.Movement.SendUpdate (true);  			Thread.Sleep (1000);  			goto CheckHeight;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int y1 = 0; y1 < 4; y1++) {  	for (int x1 = 0; x1 < 4; x1++) {  		float height;  		int tries = 0;  		CheckHeight:  		if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  			if (height < min)  				min = height;  			if (height > max)  				max = height;  		}  		else if (tries > 4) {  			Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  			continue;  		}  		else {  			Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  			// Terrain at this point hasn't been downloaded' move the camera to this spot  			// and try again  			LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  			Client.Self.Movement.Camera.Position = position;  			Client.Self.Movement.SendUpdate (true);  			Thread.Sleep (1000);  			goto CheckHeight;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int y1 = 0; y1 < 4; y1++) {  	for (int x1 = 0; x1 < 4; x1++) {  		float height;  		int tries = 0;  		CheckHeight:  		if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  			if (height < min)  				min = height;  			if (height > max)  				max = height;  		}  		else if (tries > 4) {  			Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  			continue;  		}  		else {  			Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  			// Terrain at this point hasn't been downloaded' move the camera to this spot  			// and try again  			LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  			Client.Self.Movement.Camera.Position = position;  			Client.Self.Movement.SendUpdate (true);  			Thread.Sleep (1000);  			goto CheckHeight;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int y1 = 0; y1 < 4; y1++) {  	for (int x1 = 0; x1 < 4; x1++) {  		float height;  		int tries = 0;  		CheckHeight:  		if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  			if (height < min)  				min = height;  			if (height > max)  				max = height;  		}  		else if (tries > 4) {  			Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  			continue;  		}  		else {  			Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  			// Terrain at this point hasn't been downloaded' move the camera to this spot  			// and try again  			LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  			Client.Self.Movement.Camera.Position = position;  			Client.Self.Movement.SendUpdate (true);  			Thread.Sleep (1000);  			goto CheckHeight;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int y1 = 0; y1 < 4; y1++) {  	for (int x1 = 0; x1 < 4; x1++) {  		float height;  		int tries = 0;  		CheckHeight:  		if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  			if (height < min)  				min = height;  			if (height > max)  				max = height;  		}  		else if (tries > 4) {  			Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  			continue;  		}  		else {  			Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  			// Terrain at this point hasn't been downloaded' move the camera to this spot  			// and try again  			LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  			Client.Self.Movement.Camera.Position = position;  			Client.Self.Movement.SendUpdate (true);  			Thread.Sleep (1000);  			goto CheckHeight;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int y1 = 0; y1 < 4; y1++) {  	for (int x1 = 0; x1 < 4; x1++) {  		float height;  		int tries = 0;  		CheckHeight:  		if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  			if (height < min)  				min = height;  			if (height > max)  				max = height;  		}  		else if (tries > 4) {  			Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  			continue;  		}  		else {  			Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  			// Terrain at this point hasn't been downloaded' move the camera to this spot  			// and try again  			LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  			Client.Self.Movement.Camera.Position = position;  			Client.Self.Movement.SendUpdate (true);  			Thread.Sleep (1000);  			goto CheckHeight;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int x1 = 0; x1 < 4; x1++) {  	float height;  	int tries = 0;  	CheckHeight:  	if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  		if (height < min)  			min = height;  		if (height > max)  			max = height;  	}  	else if (tries > 4) {  		Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  		continue;  	}  	else {  		Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  		// Terrain at this point hasn't been downloaded' move the camera to this spot  		// and try again  		LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  		Client.Self.Movement.Camera.Position = position;  		Client.Self.Movement.SendUpdate (true);  		Thread.Sleep (1000);  		goto CheckHeight;  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int x1 = 0; x1 < 4; x1++) {  	float height;  	int tries = 0;  	CheckHeight:  	if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  		if (height < min)  			min = height;  		if (height > max)  			max = height;  	}  	else if (tries > 4) {  		Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  		continue;  	}  	else {  		Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  		// Terrain at this point hasn't been downloaded' move the camera to this spot  		// and try again  		LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  		Client.Self.Movement.Camera.Position = position;  		Client.Self.Movement.SendUpdate (true);  		Thread.Sleep (1000);  		goto CheckHeight;  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int x1 = 0; x1 < 4; x1++) {  	float height;  	int tries = 0;  	CheckHeight:  	if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  		if (height < min)  			min = height;  		if (height > max)  			max = height;  	}  	else if (tries > 4) {  		Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  		continue;  	}  	else {  		Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  		// Terrain at this point hasn't been downloaded' move the camera to this spot  		// and try again  		LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  		Client.Self.Movement.Camera.Position = position;  		Client.Self.Movement.SendUpdate (true);  		Thread.Sleep (1000);  		goto CheckHeight;  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int x1 = 0; x1 < 4; x1++) {  	float height;  	int tries = 0;  	CheckHeight:  	if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  		if (height < min)  			min = height;  		if (height > max)  			max = height;  	}  	else if (tries > 4) {  		Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  		continue;  	}  	else {  		Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  		// Terrain at this point hasn't been downloaded' move the camera to this spot  		// and try again  		LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  		Client.Self.Movement.Camera.Position = position;  		Client.Self.Movement.SendUpdate (true);  		Thread.Sleep (1000);  		goto CheckHeight;  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int x1 = 0; x1 < 4; x1++) {  	float height;  	int tries = 0;  	CheckHeight:  	if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  		if (height < min)  			min = height;  		if (height > max)  			max = height;  	}  	else if (tries > 4) {  		Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  		continue;  	}  	else {  		Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  		// Terrain at this point hasn't been downloaded' move the camera to this spot  		// and try again  		LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  		Client.Self.Movement.Camera.Position = position;  		Client.Self.Movement.SendUpdate (true);  		Thread.Sleep (1000);  		goto CheckHeight;  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int x1 = 0; x1 < 4; x1++) {  	float height;  	int tries = 0;  	CheckHeight:  	if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  		if (height < min)  			min = height;  		if (height > max)  			max = height;  	}  	else if (tries > 4) {  		Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  		continue;  	}  	else {  		Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  		// Terrain at this point hasn't been downloaded' move the camera to this spot  		// and try again  		LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  		Client.Self.Movement.Camera.Position = position;  		Client.Self.Movement.SendUpdate (true);  		Thread.Sleep (1000);  		goto CheckHeight;  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int x1 = 0; x1 < 4; x1++) {  	float height;  	int tries = 0;  	CheckHeight:  	if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  		if (height < min)  			min = height;  		if (height > max)  			max = height;  	}  	else if (tries > 4) {  		Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  		continue;  	}  	else {  		Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  		// Terrain at this point hasn't been downloaded' move the camera to this spot  		// and try again  		LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  		Client.Self.Movement.Camera.Position = position;  		Client.Self.Movement.SendUpdate (true);  		Thread.Sleep (1000);  		goto CheckHeight;  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int x1 = 0; x1 < 4; x1++) {  	float height;  	int tries = 0;  	CheckHeight:  	if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  		if (height < min)  			min = height;  		if (height > max)  			max = height;  	}  	else if (tries > 4) {  		Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  		continue;  	}  	else {  		Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  		// Terrain at this point hasn't been downloaded' move the camera to this spot  		// and try again  		LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  		Client.Self.Movement.Camera.Position = position;  		Client.Self.Movement.SendUpdate (true);  		Thread.Sleep (1000);  		goto CheckHeight;  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: for (int x1 = 0; x1 < 4; x1++) {  	float height;  	int tries = 0;  	CheckHeight:  	if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  		if (height < min)  			min = height;  		if (height > max)  			max = height;  	}  	else if (tries > 4) {  		Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  		continue;  	}  	else {  		Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  		// Terrain at this point hasn't been downloaded' move the camera to this spot  		// and try again  		LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  		Client.Self.Movement.Camera.Position = position;  		Client.Self.Movement.SendUpdate (true);  		Thread.Sleep (1000);  		goto CheckHeight;  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  	if (height < min)  		min = height;  	if (height > max)  		max = height;  }  else if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  	if (height < min)  		min = height;  	if (height > max)  		max = height;  }  else if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  	if (height < min)  		min = height;  	if (height > max)  		max = height;  }  else if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  	if (height < min)  		min = height;  	if (height > max)  		max = height;  }  else if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  	if (height < min)  		min = height;  	if (height > max)  		max = height;  }  else if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  	if (height < min)  		min = height;  	if (height > max)  		max = height;  }  else if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  	if (height < min)  		min = height;  	if (height > max)  		max = height;  }  else if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  	if (height < min)  		min = height;  	if (height > max)  		max = height;  }  else if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetHeightRange,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int y = 0; y < 64; y++) {  	for (int x = 0; x < 64; x++) {  		if (map [y' x] == localid) {  			for (int y1 = 0; y1 < 4; y1++) {  				for (int x1 = 0; x1 < 4; x1++) {  					float height;  					int tries = 0;  					CheckHeight:  					tries++;  					if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  						if (height < Client.Network.CurrentSim.WaterHeight) {  							underwater = true;  						}  						else {  							abovewater = true;  						}  					}  					else if (tries > 4) {  						Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  						continue;  					}  					else {  						Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  						// Terrain at this point hasn't been downloaded' move the camera to this spot  						// and try again  						LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  						Client.Self.Movement.Camera.Position = position;  						Client.Self.Movement.SendUpdate (true);  						Thread.Sleep (1000);  						goto CheckHeight;  					}  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int y = 0; y < 64; y++) {  	for (int x = 0; x < 64; x++) {  		if (map [y' x] == localid) {  			for (int y1 = 0; y1 < 4; y1++) {  				for (int x1 = 0; x1 < 4; x1++) {  					float height;  					int tries = 0;  					CheckHeight:  					tries++;  					if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  						if (height < Client.Network.CurrentSim.WaterHeight) {  							underwater = true;  						}  						else {  							abovewater = true;  						}  					}  					else if (tries > 4) {  						Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  						continue;  					}  					else {  						Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  						// Terrain at this point hasn't been downloaded' move the camera to this spot  						// and try again  						LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  						Client.Self.Movement.Camera.Position = position;  						Client.Self.Movement.SendUpdate (true);  						Thread.Sleep (1000);  						goto CheckHeight;  					}  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int y = 0; y < 64; y++) {  	for (int x = 0; x < 64; x++) {  		if (map [y' x] == localid) {  			for (int y1 = 0; y1 < 4; y1++) {  				for (int x1 = 0; x1 < 4; x1++) {  					float height;  					int tries = 0;  					CheckHeight:  					tries++;  					if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  						if (height < Client.Network.CurrentSim.WaterHeight) {  							underwater = true;  						}  						else {  							abovewater = true;  						}  					}  					else if (tries > 4) {  						Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  						continue;  					}  					else {  						Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  						// Terrain at this point hasn't been downloaded' move the camera to this spot  						// and try again  						LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  						Client.Self.Movement.Camera.Position = position;  						Client.Self.Movement.SendUpdate (true);  						Thread.Sleep (1000);  						goto CheckHeight;  					}  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int y = 0; y < 64; y++) {  	for (int x = 0; x < 64; x++) {  		if (map [y' x] == localid) {  			for (int y1 = 0; y1 < 4; y1++) {  				for (int x1 = 0; x1 < 4; x1++) {  					float height;  					int tries = 0;  					CheckHeight:  					tries++;  					if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  						if (height < Client.Network.CurrentSim.WaterHeight) {  							underwater = true;  						}  						else {  							abovewater = true;  						}  					}  					else if (tries > 4) {  						Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  						continue;  					}  					else {  						Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  						// Terrain at this point hasn't been downloaded' move the camera to this spot  						// and try again  						LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  						Client.Self.Movement.Camera.Position = position;  						Client.Self.Movement.SendUpdate (true);  						Thread.Sleep (1000);  						goto CheckHeight;  					}  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int y = 0; y < 64; y++) {  	for (int x = 0; x < 64; x++) {  		if (map [y' x] == localid) {  			for (int y1 = 0; y1 < 4; y1++) {  				for (int x1 = 0; x1 < 4; x1++) {  					float height;  					int tries = 0;  					CheckHeight:  					tries++;  					if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  						if (height < Client.Network.CurrentSim.WaterHeight) {  							underwater = true;  						}  						else {  							abovewater = true;  						}  					}  					else if (tries > 4) {  						Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  						continue;  					}  					else {  						Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  						// Terrain at this point hasn't been downloaded' move the camera to this spot  						// and try again  						LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  						Client.Self.Movement.Camera.Position = position;  						Client.Self.Movement.SendUpdate (true);  						Thread.Sleep (1000);  						goto CheckHeight;  					}  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int y = 0; y < 64; y++) {  	for (int x = 0; x < 64; x++) {  		if (map [y' x] == localid) {  			for (int y1 = 0; y1 < 4; y1++) {  				for (int x1 = 0; x1 < 4; x1++) {  					float height;  					int tries = 0;  					CheckHeight:  					tries++;  					if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  						if (height < Client.Network.CurrentSim.WaterHeight) {  							underwater = true;  						}  						else {  							abovewater = true;  						}  					}  					else if (tries > 4) {  						Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  						continue;  					}  					else {  						Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  						// Terrain at this point hasn't been downloaded' move the camera to this spot  						// and try again  						LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  						Client.Self.Movement.Camera.Position = position;  						Client.Self.Movement.SendUpdate (true);  						Thread.Sleep (1000);  						goto CheckHeight;  					}  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int y = 0; y < 64; y++) {  	for (int x = 0; x < 64; x++) {  		if (map [y' x] == localid) {  			for (int y1 = 0; y1 < 4; y1++) {  				for (int x1 = 0; x1 < 4; x1++) {  					float height;  					int tries = 0;  					CheckHeight:  					tries++;  					if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  						if (height < Client.Network.CurrentSim.WaterHeight) {  							underwater = true;  						}  						else {  							abovewater = true;  						}  					}  					else if (tries > 4) {  						Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  						continue;  					}  					else {  						Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  						// Terrain at this point hasn't been downloaded' move the camera to this spot  						// and try again  						LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  						Client.Self.Movement.Camera.Position = position;  						Client.Self.Movement.SendUpdate (true);  						Thread.Sleep (1000);  						goto CheckHeight;  					}  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int y = 0; y < 64; y++) {  	for (int x = 0; x < 64; x++) {  		if (map [y' x] == localid) {  			for (int y1 = 0; y1 < 4; y1++) {  				for (int x1 = 0; x1 < 4; x1++) {  					float height;  					int tries = 0;  					CheckHeight:  					tries++;  					if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  						if (height < Client.Network.CurrentSim.WaterHeight) {  							underwater = true;  						}  						else {  							abovewater = true;  						}  					}  					else if (tries > 4) {  						Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  						continue;  					}  					else {  						Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  						// Terrain at this point hasn't been downloaded' move the camera to this spot  						// and try again  						LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  						Client.Self.Movement.Camera.Position = position;  						Client.Self.Movement.SendUpdate (true);  						Thread.Sleep (1000);  						goto CheckHeight;  					}  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int y = 0; y < 64; y++) {  	for (int x = 0; x < 64; x++) {  		if (map [y' x] == localid) {  			for (int y1 = 0; y1 < 4; y1++) {  				for (int x1 = 0; x1 < 4; x1++) {  					float height;  					int tries = 0;  					CheckHeight:  					tries++;  					if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  						if (height < Client.Network.CurrentSim.WaterHeight) {  							underwater = true;  						}  						else {  							abovewater = true;  						}  					}  					else if (tries > 4) {  						Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  						continue;  					}  					else {  						Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  						// Terrain at this point hasn't been downloaded' move the camera to this spot  						// and try again  						LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  						Client.Self.Movement.Camera.Position = position;  						Client.Self.Movement.SendUpdate (true);  						Thread.Sleep (1000);  						goto CheckHeight;  					}  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int y = 0; y < 64; y++) {  	for (int x = 0; x < 64; x++) {  		if (map [y' x] == localid) {  			for (int y1 = 0; y1 < 4; y1++) {  				for (int x1 = 0; x1 < 4; x1++) {  					float height;  					int tries = 0;  					CheckHeight:  					tries++;  					if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  						if (height < Client.Network.CurrentSim.WaterHeight) {  							underwater = true;  						}  						else {  							abovewater = true;  						}  					}  					else if (tries > 4) {  						Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  						continue;  					}  					else {  						Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  						// Terrain at this point hasn't been downloaded' move the camera to this spot  						// and try again  						LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  						Client.Self.Movement.Camera.Position = position;  						Client.Self.Movement.SendUpdate (true);  						Thread.Sleep (1000);  						goto CheckHeight;  					}  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int y = 0; y < 64; y++) {  	for (int x = 0; x < 64; x++) {  		if (map [y' x] == localid) {  			for (int y1 = 0; y1 < 4; y1++) {  				for (int x1 = 0; x1 < 4; x1++) {  					float height;  					int tries = 0;  					CheckHeight:  					tries++;  					if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  						if (height < Client.Network.CurrentSim.WaterHeight) {  							underwater = true;  						}  						else {  							abovewater = true;  						}  					}  					else if (tries > 4) {  						Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  						continue;  					}  					else {  						Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  						// Terrain at this point hasn't been downloaded' move the camera to this spot  						// and try again  						LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  						Client.Self.Movement.Camera.Position = position;  						Client.Self.Movement.SendUpdate (true);  						Thread.Sleep (1000);  						goto CheckHeight;  					}  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int y = 0; y < 64; y++) {  	for (int x = 0; x < 64; x++) {  		if (map [y' x] == localid) {  			for (int y1 = 0; y1 < 4; y1++) {  				for (int x1 = 0; x1 < 4; x1++) {  					float height;  					int tries = 0;  					CheckHeight:  					tries++;  					if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  						if (height < Client.Network.CurrentSim.WaterHeight) {  							underwater = true;  						}  						else {  							abovewater = true;  						}  					}  					else if (tries > 4) {  						Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  						continue;  					}  					else {  						Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  						// Terrain at this point hasn't been downloaded' move the camera to this spot  						// and try again  						LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  						Client.Self.Movement.Camera.Position = position;  						Client.Self.Movement.SendUpdate (true);  						Thread.Sleep (1000);  						goto CheckHeight;  					}  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int x = 0; x < 64; x++) {  	if (map [y' x] == localid) {  		for (int y1 = 0; y1 < 4; y1++) {  			for (int x1 = 0; x1 < 4; x1++) {  				float height;  				int tries = 0;  				CheckHeight:  				tries++;  				if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  					if (height < Client.Network.CurrentSim.WaterHeight) {  						underwater = true;  					}  					else {  						abovewater = true;  					}  				}  				else if (tries > 4) {  					Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  					continue;  				}  				else {  					Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  					// Terrain at this point hasn't been downloaded' move the camera to this spot  					// and try again  					LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  					Client.Self.Movement.Camera.Position = position;  					Client.Self.Movement.SendUpdate (true);  					Thread.Sleep (1000);  					goto CheckHeight;  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int x = 0; x < 64; x++) {  	if (map [y' x] == localid) {  		for (int y1 = 0; y1 < 4; y1++) {  			for (int x1 = 0; x1 < 4; x1++) {  				float height;  				int tries = 0;  				CheckHeight:  				tries++;  				if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  					if (height < Client.Network.CurrentSim.WaterHeight) {  						underwater = true;  					}  					else {  						abovewater = true;  					}  				}  				else if (tries > 4) {  					Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  					continue;  				}  				else {  					Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  					// Terrain at this point hasn't been downloaded' move the camera to this spot  					// and try again  					LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  					Client.Self.Movement.Camera.Position = position;  					Client.Self.Movement.SendUpdate (true);  					Thread.Sleep (1000);  					goto CheckHeight;  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int x = 0; x < 64; x++) {  	if (map [y' x] == localid) {  		for (int y1 = 0; y1 < 4; y1++) {  			for (int x1 = 0; x1 < 4; x1++) {  				float height;  				int tries = 0;  				CheckHeight:  				tries++;  				if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  					if (height < Client.Network.CurrentSim.WaterHeight) {  						underwater = true;  					}  					else {  						abovewater = true;  					}  				}  				else if (tries > 4) {  					Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  					continue;  				}  				else {  					Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  					// Terrain at this point hasn't been downloaded' move the camera to this spot  					// and try again  					LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  					Client.Self.Movement.Camera.Position = position;  					Client.Self.Movement.SendUpdate (true);  					Thread.Sleep (1000);  					goto CheckHeight;  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int x = 0; x < 64; x++) {  	if (map [y' x] == localid) {  		for (int y1 = 0; y1 < 4; y1++) {  			for (int x1 = 0; x1 < 4; x1++) {  				float height;  				int tries = 0;  				CheckHeight:  				tries++;  				if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  					if (height < Client.Network.CurrentSim.WaterHeight) {  						underwater = true;  					}  					else {  						abovewater = true;  					}  				}  				else if (tries > 4) {  					Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  					continue;  				}  				else {  					Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  					// Terrain at this point hasn't been downloaded' move the camera to this spot  					// and try again  					LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  					Client.Self.Movement.Camera.Position = position;  					Client.Self.Movement.SendUpdate (true);  					Thread.Sleep (1000);  					goto CheckHeight;  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int x = 0; x < 64; x++) {  	if (map [y' x] == localid) {  		for (int y1 = 0; y1 < 4; y1++) {  			for (int x1 = 0; x1 < 4; x1++) {  				float height;  				int tries = 0;  				CheckHeight:  				tries++;  				if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  					if (height < Client.Network.CurrentSim.WaterHeight) {  						underwater = true;  					}  					else {  						abovewater = true;  					}  				}  				else if (tries > 4) {  					Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  					continue;  				}  				else {  					Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  					// Terrain at this point hasn't been downloaded' move the camera to this spot  					// and try again  					LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  					Client.Self.Movement.Camera.Position = position;  					Client.Self.Movement.SendUpdate (true);  					Thread.Sleep (1000);  					goto CheckHeight;  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int x = 0; x < 64; x++) {  	if (map [y' x] == localid) {  		for (int y1 = 0; y1 < 4; y1++) {  			for (int x1 = 0; x1 < 4; x1++) {  				float height;  				int tries = 0;  				CheckHeight:  				tries++;  				if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  					if (height < Client.Network.CurrentSim.WaterHeight) {  						underwater = true;  					}  					else {  						abovewater = true;  					}  				}  				else if (tries > 4) {  					Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  					continue;  				}  				else {  					Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  					// Terrain at this point hasn't been downloaded' move the camera to this spot  					// and try again  					LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  					Client.Self.Movement.Camera.Position = position;  					Client.Self.Movement.SendUpdate (true);  					Thread.Sleep (1000);  					goto CheckHeight;  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int x = 0; x < 64; x++) {  	if (map [y' x] == localid) {  		for (int y1 = 0; y1 < 4; y1++) {  			for (int x1 = 0; x1 < 4; x1++) {  				float height;  				int tries = 0;  				CheckHeight:  				tries++;  				if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  					if (height < Client.Network.CurrentSim.WaterHeight) {  						underwater = true;  					}  					else {  						abovewater = true;  					}  				}  				else if (tries > 4) {  					Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  					continue;  				}  				else {  					Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  					// Terrain at this point hasn't been downloaded' move the camera to this spot  					// and try again  					LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  					Client.Self.Movement.Camera.Position = position;  					Client.Self.Movement.SendUpdate (true);  					Thread.Sleep (1000);  					goto CheckHeight;  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int x = 0; x < 64; x++) {  	if (map [y' x] == localid) {  		for (int y1 = 0; y1 < 4; y1++) {  			for (int x1 = 0; x1 < 4; x1++) {  				float height;  				int tries = 0;  				CheckHeight:  				tries++;  				if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  					if (height < Client.Network.CurrentSim.WaterHeight) {  						underwater = true;  					}  					else {  						abovewater = true;  					}  				}  				else if (tries > 4) {  					Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  					continue;  				}  				else {  					Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  					// Terrain at this point hasn't been downloaded' move the camera to this spot  					// and try again  					LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  					Client.Self.Movement.Camera.Position = position;  					Client.Self.Movement.SendUpdate (true);  					Thread.Sleep (1000);  					goto CheckHeight;  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int x = 0; x < 64; x++) {  	if (map [y' x] == localid) {  		for (int y1 = 0; y1 < 4; y1++) {  			for (int x1 = 0; x1 < 4; x1++) {  				float height;  				int tries = 0;  				CheckHeight:  				tries++;  				if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  					if (height < Client.Network.CurrentSim.WaterHeight) {  						underwater = true;  					}  					else {  						abovewater = true;  					}  				}  				else if (tries > 4) {  					Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  					continue;  				}  				else {  					Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  					// Terrain at this point hasn't been downloaded' move the camera to this spot  					// and try again  					LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  					Client.Self.Movement.Camera.Position = position;  					Client.Self.Movement.SendUpdate (true);  					Thread.Sleep (1000);  					goto CheckHeight;  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int x = 0; x < 64; x++) {  	if (map [y' x] == localid) {  		for (int y1 = 0; y1 < 4; y1++) {  			for (int x1 = 0; x1 < 4; x1++) {  				float height;  				int tries = 0;  				CheckHeight:  				tries++;  				if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  					if (height < Client.Network.CurrentSim.WaterHeight) {  						underwater = true;  					}  					else {  						abovewater = true;  					}  				}  				else if (tries > 4) {  					Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  					continue;  				}  				else {  					Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  					// Terrain at this point hasn't been downloaded' move the camera to this spot  					// and try again  					LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  					Client.Self.Movement.Camera.Position = position;  					Client.Self.Movement.SendUpdate (true);  					Thread.Sleep (1000);  					goto CheckHeight;  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int x = 0; x < 64; x++) {  	if (map [y' x] == localid) {  		for (int y1 = 0; y1 < 4; y1++) {  			for (int x1 = 0; x1 < 4; x1++) {  				float height;  				int tries = 0;  				CheckHeight:  				tries++;  				if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  					if (height < Client.Network.CurrentSim.WaterHeight) {  						underwater = true;  					}  					else {  						abovewater = true;  					}  				}  				else if (tries > 4) {  					Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  					continue;  				}  				else {  					Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  					// Terrain at this point hasn't been downloaded' move the camera to this spot  					// and try again  					LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  					Client.Self.Movement.Camera.Position = position;  					Client.Self.Movement.SendUpdate (true);  					Thread.Sleep (1000);  					goto CheckHeight;  				}  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: if (map [y' x] == localid) {  	for (int y1 = 0; y1 < 4; y1++) {  		for (int x1 = 0; x1 < 4; x1++) {  			float height;  			int tries = 0;  			CheckHeight:  			tries++;  			if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  				if (height < Client.Network.CurrentSim.WaterHeight) {  					underwater = true;  				}  				else {  					abovewater = true;  				}  			}  			else if (tries > 4) {  				Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  				continue;  			}  			else {  				Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  				// Terrain at this point hasn't been downloaded' move the camera to this spot  				// and try again  				LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  				Client.Self.Movement.Camera.Position = position;  				Client.Self.Movement.SendUpdate (true);  				Thread.Sleep (1000);  				goto CheckHeight;  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: if (map [y' x] == localid) {  	for (int y1 = 0; y1 < 4; y1++) {  		for (int x1 = 0; x1 < 4; x1++) {  			float height;  			int tries = 0;  			CheckHeight:  			tries++;  			if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  				if (height < Client.Network.CurrentSim.WaterHeight) {  					underwater = true;  				}  				else {  					abovewater = true;  				}  			}  			else if (tries > 4) {  				Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  				continue;  			}  			else {  				Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  				// Terrain at this point hasn't been downloaded' move the camera to this spot  				// and try again  				LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  				Client.Self.Movement.Camera.Position = position;  				Client.Self.Movement.SendUpdate (true);  				Thread.Sleep (1000);  				goto CheckHeight;  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: if (map [y' x] == localid) {  	for (int y1 = 0; y1 < 4; y1++) {  		for (int x1 = 0; x1 < 4; x1++) {  			float height;  			int tries = 0;  			CheckHeight:  			tries++;  			if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  				if (height < Client.Network.CurrentSim.WaterHeight) {  					underwater = true;  				}  				else {  					abovewater = true;  				}  			}  			else if (tries > 4) {  				Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  				continue;  			}  			else {  				Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  				// Terrain at this point hasn't been downloaded' move the camera to this spot  				// and try again  				LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  				Client.Self.Movement.Camera.Position = position;  				Client.Self.Movement.SendUpdate (true);  				Thread.Sleep (1000);  				goto CheckHeight;  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: if (map [y' x] == localid) {  	for (int y1 = 0; y1 < 4; y1++) {  		for (int x1 = 0; x1 < 4; x1++) {  			float height;  			int tries = 0;  			CheckHeight:  			tries++;  			if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  				if (height < Client.Network.CurrentSim.WaterHeight) {  					underwater = true;  				}  				else {  					abovewater = true;  				}  			}  			else if (tries > 4) {  				Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  				continue;  			}  			else {  				Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  				// Terrain at this point hasn't been downloaded' move the camera to this spot  				// and try again  				LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  				Client.Self.Movement.Camera.Position = position;  				Client.Self.Movement.SendUpdate (true);  				Thread.Sleep (1000);  				goto CheckHeight;  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: if (map [y' x] == localid) {  	for (int y1 = 0; y1 < 4; y1++) {  		for (int x1 = 0; x1 < 4; x1++) {  			float height;  			int tries = 0;  			CheckHeight:  			tries++;  			if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  				if (height < Client.Network.CurrentSim.WaterHeight) {  					underwater = true;  				}  				else {  					abovewater = true;  				}  			}  			else if (tries > 4) {  				Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  				continue;  			}  			else {  				Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  				// Terrain at this point hasn't been downloaded' move the camera to this spot  				// and try again  				LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  				Client.Self.Movement.Camera.Position = position;  				Client.Self.Movement.SendUpdate (true);  				Thread.Sleep (1000);  				goto CheckHeight;  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: if (map [y' x] == localid) {  	for (int y1 = 0; y1 < 4; y1++) {  		for (int x1 = 0; x1 < 4; x1++) {  			float height;  			int tries = 0;  			CheckHeight:  			tries++;  			if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  				if (height < Client.Network.CurrentSim.WaterHeight) {  					underwater = true;  				}  				else {  					abovewater = true;  				}  			}  			else if (tries > 4) {  				Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  				continue;  			}  			else {  				Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  				// Terrain at this point hasn't been downloaded' move the camera to this spot  				// and try again  				LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  				Client.Self.Movement.Camera.Position = position;  				Client.Self.Movement.SendUpdate (true);  				Thread.Sleep (1000);  				goto CheckHeight;  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: if (map [y' x] == localid) {  	for (int y1 = 0; y1 < 4; y1++) {  		for (int x1 = 0; x1 < 4; x1++) {  			float height;  			int tries = 0;  			CheckHeight:  			tries++;  			if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  				if (height < Client.Network.CurrentSim.WaterHeight) {  					underwater = true;  				}  				else {  					abovewater = true;  				}  			}  			else if (tries > 4) {  				Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  				continue;  			}  			else {  				Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  				// Terrain at this point hasn't been downloaded' move the camera to this spot  				// and try again  				LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  				Client.Self.Movement.Camera.Position = position;  				Client.Self.Movement.SendUpdate (true);  				Thread.Sleep (1000);  				goto CheckHeight;  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: if (map [y' x] == localid) {  	for (int y1 = 0; y1 < 4; y1++) {  		for (int x1 = 0; x1 < 4; x1++) {  			float height;  			int tries = 0;  			CheckHeight:  			tries++;  			if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  				if (height < Client.Network.CurrentSim.WaterHeight) {  					underwater = true;  				}  				else {  					abovewater = true;  				}  			}  			else if (tries > 4) {  				Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  				continue;  			}  			else {  				Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  				// Terrain at this point hasn't been downloaded' move the camera to this spot  				// and try again  				LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  				Client.Self.Movement.Camera.Position = position;  				Client.Self.Movement.SendUpdate (true);  				Thread.Sleep (1000);  				goto CheckHeight;  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: if (map [y' x] == localid) {  	for (int y1 = 0; y1 < 4; y1++) {  		for (int x1 = 0; x1 < 4; x1++) {  			float height;  			int tries = 0;  			CheckHeight:  			tries++;  			if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  				if (height < Client.Network.CurrentSim.WaterHeight) {  					underwater = true;  				}  				else {  					abovewater = true;  				}  			}  			else if (tries > 4) {  				Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  				continue;  			}  			else {  				Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  				// Terrain at this point hasn't been downloaded' move the camera to this spot  				// and try again  				LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  				Client.Self.Movement.Camera.Position = position;  				Client.Self.Movement.SendUpdate (true);  				Thread.Sleep (1000);  				goto CheckHeight;  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: if (map [y' x] == localid) {  	for (int y1 = 0; y1 < 4; y1++) {  		for (int x1 = 0; x1 < 4; x1++) {  			float height;  			int tries = 0;  			CheckHeight:  			tries++;  			if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  				if (height < Client.Network.CurrentSim.WaterHeight) {  					underwater = true;  				}  				else {  					abovewater = true;  				}  			}  			else if (tries > 4) {  				Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  				continue;  			}  			else {  				Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  				// Terrain at this point hasn't been downloaded' move the camera to this spot  				// and try again  				LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  				Client.Self.Movement.Camera.Position = position;  				Client.Self.Movement.SendUpdate (true);  				Thread.Sleep (1000);  				goto CheckHeight;  			}  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int y1 = 0; y1 < 4; y1++) {  	for (int x1 = 0; x1 < 4; x1++) {  		float height;  		int tries = 0;  		CheckHeight:  		tries++;  		if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  			if (height < Client.Network.CurrentSim.WaterHeight) {  				underwater = true;  			}  			else {  				abovewater = true;  			}  		}  		else if (tries > 4) {  			Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  			continue;  		}  		else {  			Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  			// Terrain at this point hasn't been downloaded' move the camera to this spot  			// and try again  			LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  			Client.Self.Movement.Camera.Position = position;  			Client.Self.Movement.SendUpdate (true);  			Thread.Sleep (1000);  			goto CheckHeight;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int y1 = 0; y1 < 4; y1++) {  	for (int x1 = 0; x1 < 4; x1++) {  		float height;  		int tries = 0;  		CheckHeight:  		tries++;  		if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  			if (height < Client.Network.CurrentSim.WaterHeight) {  				underwater = true;  			}  			else {  				abovewater = true;  			}  		}  		else if (tries > 4) {  			Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  			continue;  		}  		else {  			Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  			// Terrain at this point hasn't been downloaded' move the camera to this spot  			// and try again  			LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  			Client.Self.Movement.Camera.Position = position;  			Client.Self.Movement.SendUpdate (true);  			Thread.Sleep (1000);  			goto CheckHeight;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int y1 = 0; y1 < 4; y1++) {  	for (int x1 = 0; x1 < 4; x1++) {  		float height;  		int tries = 0;  		CheckHeight:  		tries++;  		if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  			if (height < Client.Network.CurrentSim.WaterHeight) {  				underwater = true;  			}  			else {  				abovewater = true;  			}  		}  		else if (tries > 4) {  			Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  			continue;  		}  		else {  			Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  			// Terrain at this point hasn't been downloaded' move the camera to this spot  			// and try again  			LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  			Client.Self.Movement.Camera.Position = position;  			Client.Self.Movement.SendUpdate (true);  			Thread.Sleep (1000);  			goto CheckHeight;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int y1 = 0; y1 < 4; y1++) {  	for (int x1 = 0; x1 < 4; x1++) {  		float height;  		int tries = 0;  		CheckHeight:  		tries++;  		if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  			if (height < Client.Network.CurrentSim.WaterHeight) {  				underwater = true;  			}  			else {  				abovewater = true;  			}  		}  		else if (tries > 4) {  			Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  			continue;  		}  		else {  			Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  			// Terrain at this point hasn't been downloaded' move the camera to this spot  			// and try again  			LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  			Client.Self.Movement.Camera.Position = position;  			Client.Self.Movement.SendUpdate (true);  			Thread.Sleep (1000);  			goto CheckHeight;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int y1 = 0; y1 < 4; y1++) {  	for (int x1 = 0; x1 < 4; x1++) {  		float height;  		int tries = 0;  		CheckHeight:  		tries++;  		if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  			if (height < Client.Network.CurrentSim.WaterHeight) {  				underwater = true;  			}  			else {  				abovewater = true;  			}  		}  		else if (tries > 4) {  			Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  			continue;  		}  		else {  			Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  			// Terrain at this point hasn't been downloaded' move the camera to this spot  			// and try again  			LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  			Client.Self.Movement.Camera.Position = position;  			Client.Self.Movement.SendUpdate (true);  			Thread.Sleep (1000);  			goto CheckHeight;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int y1 = 0; y1 < 4; y1++) {  	for (int x1 = 0; x1 < 4; x1++) {  		float height;  		int tries = 0;  		CheckHeight:  		tries++;  		if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  			if (height < Client.Network.CurrentSim.WaterHeight) {  				underwater = true;  			}  			else {  				abovewater = true;  			}  		}  		else if (tries > 4) {  			Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  			continue;  		}  		else {  			Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  			// Terrain at this point hasn't been downloaded' move the camera to this spot  			// and try again  			LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  			Client.Self.Movement.Camera.Position = position;  			Client.Self.Movement.SendUpdate (true);  			Thread.Sleep (1000);  			goto CheckHeight;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int y1 = 0; y1 < 4; y1++) {  	for (int x1 = 0; x1 < 4; x1++) {  		float height;  		int tries = 0;  		CheckHeight:  		tries++;  		if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  			if (height < Client.Network.CurrentSim.WaterHeight) {  				underwater = true;  			}  			else {  				abovewater = true;  			}  		}  		else if (tries > 4) {  			Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  			continue;  		}  		else {  			Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  			// Terrain at this point hasn't been downloaded' move the camera to this spot  			// and try again  			LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  			Client.Self.Movement.Camera.Position = position;  			Client.Self.Movement.SendUpdate (true);  			Thread.Sleep (1000);  			goto CheckHeight;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int y1 = 0; y1 < 4; y1++) {  	for (int x1 = 0; x1 < 4; x1++) {  		float height;  		int tries = 0;  		CheckHeight:  		tries++;  		if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  			if (height < Client.Network.CurrentSim.WaterHeight) {  				underwater = true;  			}  			else {  				abovewater = true;  			}  		}  		else if (tries > 4) {  			Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  			continue;  		}  		else {  			Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  			// Terrain at this point hasn't been downloaded' move the camera to this spot  			// and try again  			LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  			Client.Self.Movement.Camera.Position = position;  			Client.Self.Movement.SendUpdate (true);  			Thread.Sleep (1000);  			goto CheckHeight;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int y1 = 0; y1 < 4; y1++) {  	for (int x1 = 0; x1 < 4; x1++) {  		float height;  		int tries = 0;  		CheckHeight:  		tries++;  		if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  			if (height < Client.Network.CurrentSim.WaterHeight) {  				underwater = true;  			}  			else {  				abovewater = true;  			}  		}  		else if (tries > 4) {  			Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  			continue;  		}  		else {  			Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  			// Terrain at this point hasn't been downloaded' move the camera to this spot  			// and try again  			LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  			Client.Self.Movement.Camera.Position = position;  			Client.Self.Movement.SendUpdate (true);  			Thread.Sleep (1000);  			goto CheckHeight;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int y1 = 0; y1 < 4; y1++) {  	for (int x1 = 0; x1 < 4; x1++) {  		float height;  		int tries = 0;  		CheckHeight:  		tries++;  		if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  			if (height < Client.Network.CurrentSim.WaterHeight) {  				underwater = true;  			}  			else {  				abovewater = true;  			}  		}  		else if (tries > 4) {  			Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  			continue;  		}  		else {  			Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  			// Terrain at this point hasn't been downloaded' move the camera to this spot  			// and try again  			LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  			Client.Self.Movement.Camera.Position = position;  			Client.Self.Movement.SendUpdate (true);  			Thread.Sleep (1000);  			goto CheckHeight;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int x1 = 0; x1 < 4; x1++) {  	float height;  	int tries = 0;  	CheckHeight:  	tries++;  	if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  		if (height < Client.Network.CurrentSim.WaterHeight) {  			underwater = true;  		}  		else {  			abovewater = true;  		}  	}  	else if (tries > 4) {  		Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  		continue;  	}  	else {  		Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  		// Terrain at this point hasn't been downloaded' move the camera to this spot  		// and try again  		LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  		Client.Self.Movement.Camera.Position = position;  		Client.Self.Movement.SendUpdate (true);  		Thread.Sleep (1000);  		goto CheckHeight;  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int x1 = 0; x1 < 4; x1++) {  	float height;  	int tries = 0;  	CheckHeight:  	tries++;  	if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  		if (height < Client.Network.CurrentSim.WaterHeight) {  			underwater = true;  		}  		else {  			abovewater = true;  		}  	}  	else if (tries > 4) {  		Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  		continue;  	}  	else {  		Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  		// Terrain at this point hasn't been downloaded' move the camera to this spot  		// and try again  		LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  		Client.Self.Movement.Camera.Position = position;  		Client.Self.Movement.SendUpdate (true);  		Thread.Sleep (1000);  		goto CheckHeight;  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int x1 = 0; x1 < 4; x1++) {  	float height;  	int tries = 0;  	CheckHeight:  	tries++;  	if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  		if (height < Client.Network.CurrentSim.WaterHeight) {  			underwater = true;  		}  		else {  			abovewater = true;  		}  	}  	else if (tries > 4) {  		Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  		continue;  	}  	else {  		Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  		// Terrain at this point hasn't been downloaded' move the camera to this spot  		// and try again  		LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  		Client.Self.Movement.Camera.Position = position;  		Client.Self.Movement.SendUpdate (true);  		Thread.Sleep (1000);  		goto CheckHeight;  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int x1 = 0; x1 < 4; x1++) {  	float height;  	int tries = 0;  	CheckHeight:  	tries++;  	if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  		if (height < Client.Network.CurrentSim.WaterHeight) {  			underwater = true;  		}  		else {  			abovewater = true;  		}  	}  	else if (tries > 4) {  		Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  		continue;  	}  	else {  		Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  		// Terrain at this point hasn't been downloaded' move the camera to this spot  		// and try again  		LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  		Client.Self.Movement.Camera.Position = position;  		Client.Self.Movement.SendUpdate (true);  		Thread.Sleep (1000);  		goto CheckHeight;  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int x1 = 0; x1 < 4; x1++) {  	float height;  	int tries = 0;  	CheckHeight:  	tries++;  	if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  		if (height < Client.Network.CurrentSim.WaterHeight) {  			underwater = true;  		}  		else {  			abovewater = true;  		}  	}  	else if (tries > 4) {  		Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  		continue;  	}  	else {  		Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  		// Terrain at this point hasn't been downloaded' move the camera to this spot  		// and try again  		LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  		Client.Self.Movement.Camera.Position = position;  		Client.Self.Movement.SendUpdate (true);  		Thread.Sleep (1000);  		goto CheckHeight;  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int x1 = 0; x1 < 4; x1++) {  	float height;  	int tries = 0;  	CheckHeight:  	tries++;  	if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  		if (height < Client.Network.CurrentSim.WaterHeight) {  			underwater = true;  		}  		else {  			abovewater = true;  		}  	}  	else if (tries > 4) {  		Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  		continue;  	}  	else {  		Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  		// Terrain at this point hasn't been downloaded' move the camera to this spot  		// and try again  		LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  		Client.Self.Movement.Camera.Position = position;  		Client.Self.Movement.SendUpdate (true);  		Thread.Sleep (1000);  		goto CheckHeight;  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int x1 = 0; x1 < 4; x1++) {  	float height;  	int tries = 0;  	CheckHeight:  	tries++;  	if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  		if (height < Client.Network.CurrentSim.WaterHeight) {  			underwater = true;  		}  		else {  			abovewater = true;  		}  	}  	else if (tries > 4) {  		Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  		continue;  	}  	else {  		Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  		// Terrain at this point hasn't been downloaded' move the camera to this spot  		// and try again  		LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  		Client.Self.Movement.Camera.Position = position;  		Client.Self.Movement.SendUpdate (true);  		Thread.Sleep (1000);  		goto CheckHeight;  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int x1 = 0; x1 < 4; x1++) {  	float height;  	int tries = 0;  	CheckHeight:  	tries++;  	if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  		if (height < Client.Network.CurrentSim.WaterHeight) {  			underwater = true;  		}  		else {  			abovewater = true;  		}  	}  	else if (tries > 4) {  		Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  		continue;  	}  	else {  		Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  		// Terrain at this point hasn't been downloaded' move the camera to this spot  		// and try again  		LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  		Client.Self.Movement.Camera.Position = position;  		Client.Self.Movement.SendUpdate (true);  		Thread.Sleep (1000);  		goto CheckHeight;  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: for (int x1 = 0; x1 < 4; x1++) {  	float height;  	int tries = 0;  	CheckHeight:  	tries++;  	if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  		if (height < Client.Network.CurrentSim.WaterHeight) {  			underwater = true;  		}  		else {  			abovewater = true;  		}  	}  	else if (tries > 4) {  		Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  		continue;  	}  	else {  		Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  		// Terrain at this point hasn't been downloaded' move the camera to this spot  		// and try again  		LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  		Client.Self.Movement.Camera.Position = position;  		Client.Self.Movement.SendUpdate (true);  		Thread.Sleep (1000);  		goto CheckHeight;  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  	if (height < Client.Network.CurrentSim.WaterHeight) {  		underwater = true;  	}  	else {  		abovewater = true;  	}  }  else if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  	if (height < Client.Network.CurrentSim.WaterHeight) {  		underwater = true;  	}  	else {  		abovewater = true;  	}  }  else if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  	if (height < Client.Network.CurrentSim.WaterHeight) {  		underwater = true;  	}  	else {  		abovewater = true;  	}  }  else if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  	if (height < Client.Network.CurrentSim.WaterHeight) {  		underwater = true;  	}  	else {  		abovewater = true;  	}  }  else if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  	if (height < Client.Network.CurrentSim.WaterHeight) {  		underwater = true;  	}  	else {  		abovewater = true;  	}  }  else if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  	if (height < Client.Network.CurrentSim.WaterHeight) {  		underwater = true;  	}  	else {  		abovewater = true;  	}  }  else if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  	if (height < Client.Network.CurrentSim.WaterHeight) {  		underwater = true;  	}  	else {  		abovewater = true;  	}  }  else if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: if (Client.Terrain.TerrainHeightAtPoint (Client.Network.CurrentSim.Handle' x * 4 + x1' y * 4 + y1' out height)) {  	if (height < Client.Network.CurrentSim.WaterHeight) {  		underwater = true;  	}  	else {  		abovewater = true;  	}  }  else if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: if (tries > 4) {  	Logger.Log ("Too many tries on this terrain block' skipping"' Helpers.LogLevel.Warning' Client);  	continue;  }  else {  	Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  	// Terrain at this point hasn't been downloaded' move the camera to this spot  	// and try again  	LLVector3 position = new LLVector3 ((float)(x * 4 + x1)' (float)(y * 4 + y1)' Client.Self.SimPosition.Z);  	Client.Self.Movement.Camera.Position = position;  	Client.Self.Movement.SendUpdate (true);  	Thread.Sleep (1000);  	goto CheckHeight;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: Logger.Log (String.Format ("Terrain height is null at {0}'{1} retrying"' x * 4 + x1' y * 4 + y1)' Helpers.LogLevel.Info' Client);  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetWaterType,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,GetRectangularDeviation,The following statement contains a magic number: return (aabbarea - area) / 16;  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Parcels_OnParcelProperties,The following statement contains a magic number: for (y = 0; y < 64; y++) {  	for (x = 0; x < 64; x++) {  		if (markers [y' x] == 0) {  			index = (y * 64) + x;  			bit = index % 8;  			index >>= 3;  			if ((parcel.Bitmap [index] & (1 << bit)) != 0)  				markers [y' x] = parcel.LocalID;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Parcels_OnParcelProperties,The following statement contains a magic number: for (y = 0; y < 64; y++) {  	for (x = 0; x < 64; x++) {  		if (markers [y' x] == 0) {  			index = (y * 64) + x;  			bit = index % 8;  			index >>= 3;  			if ((parcel.Bitmap [index] & (1 << bit)) != 0)  				markers [y' x] = parcel.LocalID;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Parcels_OnParcelProperties,The following statement contains a magic number: for (y = 0; y < 64; y++) {  	for (x = 0; x < 64; x++) {  		if (markers [y' x] == 0) {  			index = (y * 64) + x;  			bit = index % 8;  			index >>= 3;  			if ((parcel.Bitmap [index] & (1 << bit)) != 0)  				markers [y' x] = parcel.LocalID;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Parcels_OnParcelProperties,The following statement contains a magic number: for (y = 0; y < 64; y++) {  	for (x = 0; x < 64; x++) {  		if (markers [y' x] == 0) {  			index = (y * 64) + x;  			bit = index % 8;  			index >>= 3;  			if ((parcel.Bitmap [index] & (1 << bit)) != 0)  				markers [y' x] = parcel.LocalID;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Parcels_OnParcelProperties,The following statement contains a magic number: for (y = 0; y < 64; y++) {  	for (x = 0; x < 64; x++) {  		if (markers [y' x] == 0) {  			index = (y * 64) + x;  			bit = index % 8;  			index >>= 3;  			if ((parcel.Bitmap [index] & (1 << bit)) != 0)  				markers [y' x] = parcel.LocalID;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Parcels_OnParcelProperties,The following statement contains a magic number: for (x = 0; x < 64; x++) {  	if (markers [y' x] == 0) {  		index = (y * 64) + x;  		bit = index % 8;  		index >>= 3;  		if ((parcel.Bitmap [index] & (1 << bit)) != 0)  			markers [y' x] = parcel.LocalID;  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Parcels_OnParcelProperties,The following statement contains a magic number: for (x = 0; x < 64; x++) {  	if (markers [y' x] == 0) {  		index = (y * 64) + x;  		bit = index % 8;  		index >>= 3;  		if ((parcel.Bitmap [index] & (1 << bit)) != 0)  			markers [y' x] = parcel.LocalID;  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Parcels_OnParcelProperties,The following statement contains a magic number: for (x = 0; x < 64; x++) {  	if (markers [y' x] == 0) {  		index = (y * 64) + x;  		bit = index % 8;  		index >>= 3;  		if ((parcel.Bitmap [index] & (1 << bit)) != 0)  			markers [y' x] = parcel.LocalID;  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Parcels_OnParcelProperties,The following statement contains a magic number: for (x = 0; x < 64; x++) {  	if (markers [y' x] == 0) {  		index = (y * 64) + x;  		bit = index % 8;  		index >>= 3;  		if ((parcel.Bitmap [index] & (1 << bit)) != 0)  			markers [y' x] = parcel.LocalID;  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Parcels_OnParcelProperties,The following statement contains a magic number: if (markers [y' x] == 0) {  	index = (y * 64) + x;  	bit = index % 8;  	index >>= 3;  	if ((parcel.Bitmap [index] & (1 << bit)) != 0)  		markers [y' x] = parcel.LocalID;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Parcels_OnParcelProperties,The following statement contains a magic number: if (markers [y' x] == 0) {  	index = (y * 64) + x;  	bit = index % 8;  	index >>= 3;  	if ((parcel.Bitmap [index] & (1 << bit)) != 0)  		markers [y' x] = parcel.LocalID;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Parcels_OnParcelProperties,The following statement contains a magic number: if (markers [y' x] == 0) {  	index = (y * 64) + x;  	bit = index % 8;  	index >>= 3;  	if ((parcel.Bitmap [index] & (1 << bit)) != 0)  		markers [y' x] = parcel.LocalID;  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Parcels_OnParcelProperties,The following statement contains a magic number: index = (y * 64) + x;  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Parcels_OnParcelProperties,The following statement contains a magic number: bit = index % 8;  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Parcels_OnParcelProperties,The following statement contains a magic number: index >>= 3;  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Parcels_OnParcelProperties,The following statement contains a magic number: for (y = 0; y < 64; y++) {  	for (x = 0; x < 64; x++) {  		if (markers [y' x] == 0) {  			Client.Parcels.PropertiesRequest (parcel.Simulator' (y + 1) * 4.0f' (x + 1) * 4.0f' y * 4.0f' x * 4.0f' 0' false);  			return;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Parcels_OnParcelProperties,The following statement contains a magic number: for (y = 0; y < 64; y++) {  	for (x = 0; x < 64; x++) {  		if (markers [y' x] == 0) {  			Client.Parcels.PropertiesRequest (parcel.Simulator' (y + 1) * 4.0f' (x + 1) * 4.0f' y * 4.0f' x * 4.0f' 0' false);  			return;  		}  	}  }  
Magic Number,libsecondlife.Utilities,ParcelDownloader,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\Utilities.cs,Parcels_OnParcelProperties,The following statement contains a magic number: for (x = 0; x < 64; x++) {  	if (markers [y' x] == 0) {  		Client.Parcels.PropertiesRequest (parcel.Simulator' (y + 1) * 4.0f' (x + 1) * 4.0f' y * 4.0f' x * 4.0f' 0' false);  		return;  	}  }  
Magic Number,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,UUIDFromVoiceAccount,The following statement contains a magic number: if (accountName.Length == 25 && accountName [0] == 'x' && accountName [23] == '=' && accountName [24] == '=') {  	accountName = accountName.Replace ('/'' '_').Replace ('+'' '-');  	byte[] idBytes = Convert.FromBase64String (accountName);  	if (idBytes.Length == 16)  		return new LLUUID (idBytes' 0);  	else  		return LLUUID.Zero;  }  else {  	return LLUUID.Zero;  }  
Magic Number,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,UUIDFromVoiceAccount,The following statement contains a magic number: if (accountName.Length == 25 && accountName [0] == 'x' && accountName [23] == '=' && accountName [24] == '=') {  	accountName = accountName.Replace ('/'' '_').Replace ('+'' '-');  	byte[] idBytes = Convert.FromBase64String (accountName);  	if (idBytes.Length == 16)  		return new LLUUID (idBytes' 0);  	else  		return LLUUID.Zero;  }  else {  	return LLUUID.Zero;  }  
Magic Number,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,UUIDFromVoiceAccount,The following statement contains a magic number: if (accountName.Length == 25 && accountName [0] == 'x' && accountName [23] == '=' && accountName [24] == '=') {  	accountName = accountName.Replace ('/'' '_').Replace ('+'' '-');  	byte[] idBytes = Convert.FromBase64String (accountName);  	if (idBytes.Length == 16)  		return new LLUUID (idBytes' 0);  	else  		return LLUUID.Zero;  }  else {  	return LLUUID.Zero;  }  
Magic Number,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,UUIDFromVoiceAccount,The following statement contains a magic number: if (accountName.Length == 25 && accountName [0] == 'x' && accountName [23] == '=' && accountName [24] == '=') {  	accountName = accountName.Replace ('/'' '_').Replace ('+'' '-');  	byte[] idBytes = Convert.FromBase64String (accountName);  	if (idBytes.Length == 16)  		return new LLUUID (idBytes' 0);  	else  		return LLUUID.Zero;  }  else {  	return LLUUID.Zero;  }  
Magic Number,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,UUIDFromVoiceAccount,The following statement contains a magic number: if (idBytes.Length == 16)  	return new LLUUID (idBytes' 0);  else  	return LLUUID.Zero;  
Magic Number,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,RequestSetSpeakerVolume,The following statement contains a magic number: if (volume < 0 || volume > 100)  	throw new ArgumentException ("volume must be between 0 and 100"' "volume");  
Magic Number,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,RequestSetCaptureVolume,The following statement contains a magic number: if (volume < 0 || volume > 100)  	throw new ArgumentException ("volume must be between 0 and 100"' "volume");  
Missing Default,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,_DaemonPipe_OnReceiveLine,The following switch statement is missing a default case: switch (reader.NodeType) {  case XmlNodeType.Element: {  	if (reader.Depth == 0) {  		isEvent = (reader.Name == "Event");  		if (isEvent || reader.Name == "Response") {  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name) {  				case "requestId":  					uuidString = reader.Value;  					break;  				case "action":  					actionString = reader.Value;  					break;  				case "type":  					eventTypeString = reader.Value;  					break;  				}  			}  		}  	}  	else {  		switch (reader.Name) {  		case "InputXml":  			cookie = -1;  			// Parse through here to get the cookie value  			reader.Read ();  			if (reader.Name == "Request") {  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					if (reader.Name == "requestId") {  						Int32.TryParse (reader.Value' out cookie);  						break;  					}  				}  			}  			if (cookie == -1) {  				Logger.Log ("VoiceManager._DaemonPipe_OnReceiveLine(): Failed to parse InputXml for the cookie"' Helpers.LogLevel.Warning' Client);  			}  			break;  		case "CaptureDevices":  			_CaptureDevices.Clear ();  			break;  		case "RenderDevices":  			_RenderDevices.Clear ();  			break;  		case "ReturnCode":  			returnCode = reader.ReadElementContentAsInt ();  			break;  		case "StatusCode":  			statusCode = reader.ReadElementContentAsInt ();  			break;  		case "StatusString":  			statusString = reader.ReadElementContentAsString ();  			break;  		case "State":  			state = reader.ReadElementContentAsInt ();  			break;  		case "ConnectorHandle":  			connectorHandle = reader.ReadElementContentAsString ();  			break;  		case "AccountHandle":  			accountHandle = reader.ReadElementContentAsString ();  			break;  		case "SessionHandle":  			sessionHandle = reader.ReadElementContentAsString ();  			break;  		case "URI":  			uriString = reader.ReadElementContentAsString ();  			break;  		case "IsChannel":  			isChannel = reader.ReadElementContentAsBoolean ();  			break;  		case "Name":  			nameString = reader.ReadElementContentAsString ();  			break;  		case "AudioMedia":  			audioMediaString = reader.ReadElementContentAsString ();  			break;  		case "ChannelName":  			nameString = reader.ReadElementContentAsString ();  			break;  		case "ParticipantURI":  			uriString = reader.ReadElementContentAsString ();  			break;  		case "DisplayName":  			displayNameString = reader.ReadElementContentAsString ();  			break;  		case "AccountName":  			nameString = reader.ReadElementContentAsString ();  			break;  		case "ParticipantType":  			participantType = reader.ReadElementContentAsInt ();  			break;  		case "IsLocallyMuted":  			isLocallyMuted = reader.ReadElementContentAsBoolean ();  			break;  		case "IsModeratorMuted":  			isModeratorMuted = reader.ReadElementContentAsBoolean ();  			break;  		case "IsSpeaking":  			isSpeaking = reader.ReadElementContentAsBoolean ();  			break;  		case "Volume":  			volume = reader.ReadElementContentAsInt ();  			break;  		case "Energy":  			energy = reader.ReadElementContentAsFloat ();  			break;  		case "MicEnergy":  			energy = reader.ReadElementContentAsFloat ();  			break;  		case "ChannelURI":  			uriString = reader.ReadElementContentAsString ();  			break;  		case "ChannelListResult":  			_ChannelMap [nameString] = uriString;  			break;  		case "CaptureDevice":  			reader.Read ();  			_CaptureDevices.Add (reader.ReadElementContentAsString ());  			break;  		case "CurrentCaptureDevice":  			reader.Read ();  			nameString = reader.ReadElementContentAsString ();  			break;  		case "RenderDevice":  			reader.Read ();  			_RenderDevices.Add (reader.ReadElementContentAsString ());  			break;  		case "CurrentRenderDevice":  			reader.Read ();  			nameString = reader.ReadElementContentAsString ();  			break;  		}  	}  	break;  }  case XmlNodeType.EndElement:  	if (reader.Depth == 0)  		ProcessEvent ();  	break;  }  
Missing Default,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,_DaemonPipe_OnReceiveLine,The following switch statement is missing a default case: switch (reader.Name) {  case "requestId":  	uuidString = reader.Value;  	break;  case "action":  	actionString = reader.Value;  	break;  case "type":  	eventTypeString = reader.Value;  	break;  }  
Missing Default,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,_DaemonPipe_OnReceiveLine,The following switch statement is missing a default case: switch (reader.Name) {  case "InputXml":  	cookie = -1;  	// Parse through here to get the cookie value  	reader.Read ();  	if (reader.Name == "Request") {  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			if (reader.Name == "requestId") {  				Int32.TryParse (reader.Value' out cookie);  				break;  			}  		}  	}  	if (cookie == -1) {  		Logger.Log ("VoiceManager._DaemonPipe_OnReceiveLine(): Failed to parse InputXml for the cookie"' Helpers.LogLevel.Warning' Client);  	}  	break;  case "CaptureDevices":  	_CaptureDevices.Clear ();  	break;  case "RenderDevices":  	_RenderDevices.Clear ();  	break;  case "ReturnCode":  	returnCode = reader.ReadElementContentAsInt ();  	break;  case "StatusCode":  	statusCode = reader.ReadElementContentAsInt ();  	break;  case "StatusString":  	statusString = reader.ReadElementContentAsString ();  	break;  case "State":  	state = reader.ReadElementContentAsInt ();  	break;  case "ConnectorHandle":  	connectorHandle = reader.ReadElementContentAsString ();  	break;  case "AccountHandle":  	accountHandle = reader.ReadElementContentAsString ();  	break;  case "SessionHandle":  	sessionHandle = reader.ReadElementContentAsString ();  	break;  case "URI":  	uriString = reader.ReadElementContentAsString ();  	break;  case "IsChannel":  	isChannel = reader.ReadElementContentAsBoolean ();  	break;  case "Name":  	nameString = reader.ReadElementContentAsString ();  	break;  case "AudioMedia":  	audioMediaString = reader.ReadElementContentAsString ();  	break;  case "ChannelName":  	nameString = reader.ReadElementContentAsString ();  	break;  case "ParticipantURI":  	uriString = reader.ReadElementContentAsString ();  	break;  case "DisplayName":  	displayNameString = reader.ReadElementContentAsString ();  	break;  case "AccountName":  	nameString = reader.ReadElementContentAsString ();  	break;  case "ParticipantType":  	participantType = reader.ReadElementContentAsInt ();  	break;  case "IsLocallyMuted":  	isLocallyMuted = reader.ReadElementContentAsBoolean ();  	break;  case "IsModeratorMuted":  	isModeratorMuted = reader.ReadElementContentAsBoolean ();  	break;  case "IsSpeaking":  	isSpeaking = reader.ReadElementContentAsBoolean ();  	break;  case "Volume":  	volume = reader.ReadElementContentAsInt ();  	break;  case "Energy":  	energy = reader.ReadElementContentAsFloat ();  	break;  case "MicEnergy":  	energy = reader.ReadElementContentAsFloat ();  	break;  case "ChannelURI":  	uriString = reader.ReadElementContentAsString ();  	break;  case "ChannelListResult":  	_ChannelMap [nameString] = uriString;  	break;  case "CaptureDevice":  	reader.Read ();  	_CaptureDevices.Add (reader.ReadElementContentAsString ());  	break;  case "CurrentCaptureDevice":  	reader.Read ();  	nameString = reader.ReadElementContentAsString ();  	break;  case "RenderDevice":  	reader.Read ();  	_RenderDevices.Add (reader.ReadElementContentAsString ());  	break;  case "CurrentRenderDevice":  	reader.Read ();  	nameString = reader.ReadElementContentAsString ();  	break;  }  
Missing Default,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,ProcessEvent,The following switch statement is missing a default case: switch (eventTypeString) {  case "LoginStateChangeEvent":  	if (OnLoginStateChange != null)  		OnLoginStateChange (cookie' accountHandle' statusCode' statusString' state);  	break;  case "SessionNewEvent":  	if (OnNewSession != null)  		OnNewSession (cookie' accountHandle' eventSessionHandle' state' nameString' uriString);  	break;  case "SessionStateChangeEvent":  	if (OnSessionStateChange != null)  		OnSessionStateChange (cookie' uriString' statusCode' statusString' eventSessionHandle' state' isChannel' nameString);  	break;  case "ParticipantStateChangeEvent":  	if (OnParticipantStateChange != null)  		OnParticipantStateChange (cookie' uriString' statusCode' statusString' state' nameString' displayNameString' participantType);  	break;  case "ParticipantPropertiesEvent":  	if (OnParticipantProperties != null)  		OnParticipantProperties (cookie' uriString' statusCode' statusString' isLocallyMuted' isModeratorMuted' isSpeaking' volume' energy);  	break;  case "AuxAudioPropertiesEvent":  	if (OnAuxAudioProperties != null)  		OnAuxAudioProperties (cookie' energy);  	break;  }  
Missing Default,libsecondlife.Utilities,VoiceManager,C:\repos\chrbayer84_SLAgentCSServer\libsecondlife-0.5.0\libsecondlife\libsecondlife.Utilities\VoiceManager.cs,ProcessEvent,The following switch statement is missing a default case: switch (actionString) {  case "Connector.Create.1":  	if (OnConnectorCreated != null)  		OnConnectorCreated (cookie' statusCode' statusString' connectorHandle);  	break;  case "Account.Login.1":  	if (OnLogin != null)  		OnLogin (cookie' statusCode' statusString' accountHandle);  	break;  case "Session.Create.1":  	if (OnSessionCreated != null)  		OnSessionCreated (cookie' statusCode' statusString' sessionHandle);  	break;  case "Session.Connect.1":  	if (OnSessionConnected != null)  		OnSessionConnected (cookie' statusCode' statusString);  	break;  case "Session.Terminate.1":  	if (OnSessionTerminated != null)  		OnSessionTerminated (cookie' statusCode' statusString);  	break;  case "Account.Logout.1":  	if (OnAccountLogout != null)  		OnAccountLogout (cookie' statusCode' statusString);  	break;  case "Connector.InitiateShutdown.1":  	if (OnConnectorInitiateShutdown != null)  		OnConnectorInitiateShutdown (cookie' statusCode' statusString);  	break;  case "Account.ChannelGetList.1":  	if (OnAccountChannelGetList != null)  		OnAccountChannelGetList (cookie' statusCode' statusString);  	break;  case "Aux.GetCaptureDevices.1":  	if (OnCaptureDevices != null)  		OnCaptureDevices (cookie' statusCode' statusString' nameString);  	break;  case "Aux.GetRenderDevices.1":  	if (OnRenderDevices != null)  		OnRenderDevices (cookie' statusCode' statusString' nameString);  	break;  }  
