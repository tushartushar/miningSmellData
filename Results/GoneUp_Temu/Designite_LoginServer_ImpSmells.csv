Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Database_Manager.Database,DbQuerys,C:\repos\GoneUp_Temu\LoginServer\Database\DbQuerys.cs,VerifyUser,Cyclomatic complexity of the method is 8
Complex Method,Network,TcpServer,C:\repos\GoneUp_Temu\LoginServer\Network\TcpServer.cs,Client_MessageReceived,Cyclomatic complexity of the method is 12
Long Parameter List,Database_Manager.Database,DbQuerys,C:\repos\GoneUp_Temu\LoginServer\Database\DbQuerys.cs,InsertAccountData,The method has 14 parameters.
Long Parameter List,Database_Manager.Database,DbQuerys,C:\repos\GoneUp_Temu\LoginServer\Database\DbQuerys.cs,UpdateAccountData_byUsername,The method has 13 parameters.
Long Parameter List,Database_Manager.Database,DbQuerys,C:\repos\GoneUp_Temu\LoginServer\Database\DbQuerys.cs,UpdateAccountData_byID,The method has 14 parameters.
Long Statement,Configuration,DatabaseSystem,C:\repos\GoneUp_Temu\LoginServer\Configuration\Systems\DatabaseSystem.cs,Init,The length of the statement  "	LoginServer.dbManager = new DatabaseManager (LoginServer.loginserverConfig.DbMaxPoolSize' LoginServer.loginserverConfig.DbMinPoolSize' DataType); " is 145.
Long Statement,Configuration,DatabaseSystem,C:\repos\GoneUp_Temu\LoginServer\Configuration\Systems\DatabaseSystem.cs,Init,The length of the statement  "	LoginServer.dbManager.setServerDetails (LoginServer.loginserverConfig.DbHost' LoginServer.loginserverConfig.DbPort' LoginServer.loginserverConfig.DbUser' LoginServer.loginserverConfig.DbPassword' LoginServer.loginserverConfig.DbName); " is 234.
Long Statement,Configuration,Task,C:\repos\GoneUp_Temu\LoginServer\Configuration\_TaskLoader.cs,LoadTask,The length of the statement  "	Logger.WriteLine (LogState.Info' "Init: {0} {1} values in {2}s"' loader.Method.Name' readed' (stopwatch.ElapsedMilliseconds / 1000.0).ToString ("0.00")); " is 153.
Long Statement,Database_Manager.Database,DbQuerys,C:\repos\GoneUp_Temu\LoginServer\Database\DbQuerys.cs,SetAccessLevel,The length of the statement  "		string SetAccessLevelQuery = "UPDATE accounts SET AccessLevel='" + newAccessLevel + "' WHERE Username='" + Username + "';"; " is 123.
Long Statement,Database_Manager.Database,DbQuerys,C:\repos\GoneUp_Temu\LoginServer\Database\DbQuerys.cs,SetMembership,The length of the statement  "		string SetMembershipQuery = "UPDATE accounts SET Membership='" + newMembership + "' WHERE Username='" + Username + "';"; " is 120.
Long Statement,Database_Manager.Database,DbQuerys,C:\repos\GoneUp_Temu\LoginServer\Database\DbQuerys.cs,SetLastOnlineUtc,The length of the statement  "		string SetLastOnlineUtcQuery = "UPDATE accounts SET LastOnlineUtc='" + timeStampNowValue + "' WHERE Username='" + Username + "';"; " is 130.
Long Statement,Database_Manager.Database,DbQuerys,C:\repos\GoneUp_Temu\LoginServer\Database\DbQuerys.cs,SetBanStatus,The length of the statement  "		string SetBanStatusQuery = "UPDATE accounts SET IsBanned=" + newIsBanned + "' UnBanDate='" + newUnBanDate + "' WHERE Username='" + Username + "';"; " is 147.
Long Statement,Database_Manager.Database,DbQuerys,C:\repos\GoneUp_Temu\LoginServer\Database\DbQuerys.cs,SetBanStatus,The length of the statement  "		Logger.WriteLine (LogState.Info' "Set isBanned: " + newIsBanned + " till: " + newUnBanDate + " for' " + Username + ".)"); " is 121.
Long Statement,Database_Manager.Database,DbQuerys,C:\repos\GoneUp_Temu\LoginServer\Database\DbQuerys.cs,InsertAccountData,The length of the statement  "		Logger.WriteLine (LogState.Exception' "InsertAccount Failure: " + Username + "' already Exists' please choose another!"); " is 121.
Long Statement,Database_Manager.Database,DbQuerys,C:\repos\GoneUp_Temu\LoginServer\Database\DbQuerys.cs,InsertAccountData,The length of the statement  "		string AddAccount = "INSERT INTO accounts VALUES(NULL' @Username'@Password'@Email'@AccessLevel'@Membership'@isGM'@LastOnlineUtc'@Coins'@Ip'@Settings'@IsOnline'@IsBanned'@UnBanDate'@RegisterDate)"; " is 196.
Long Statement,Database_Manager.Database,DbQuerys,C:\repos\GoneUp_Temu\LoginServer\Database\DbQuerys.cs,UpdateAccountData_byUsername,The length of the statement  "		Logger.WriteLine (LogState.Exception' "UpdateAccountData Failure: " + Username + "'not Exists' please choose another!"); " is 120.
Long Statement,Database_Manager.Database,DbQuerys,C:\repos\GoneUp_Temu\LoginServer\Database\DbQuerys.cs,UpdateAccountData_byUsername,The length of the statement  "		string UpdateAccountQuery = "UPDATE accounts SET Username='" + Username + "''Password='" + Password + "''Email='" + Email + "''AccessLevel='" + AccessLevel + "''Membership='" + Membership + "''isGM=" + isGM + "'LastOnlineUtc='" + LastOnlineUtc + "''Coins='" + Coins + "''Ip='" + Ip + "''Settings='" + Settings + "''IsOnline=" + IsOnline + "'IsBanned=" + IsBanned + "'UnBanDate='" + UnBanDate + "' WHERE Username='" + Username + "';"; " is 433.
Long Statement,Database_Manager.Database,DbQuerys,C:\repos\GoneUp_Temu\LoginServer\Database\DbQuerys.cs,UpdateAccountData_byID,The length of the statement  "		Logger.WriteLine (LogState.Exception' "UpdateAccountData Failure: " + Username + "' already Exists' please choose another!"); " is 125.
Long Statement,Database_Manager.Database,DbQuerys,C:\repos\GoneUp_Temu\LoginServer\Database\DbQuerys.cs,UpdateAccountData_byID,The length of the statement  "		string UpdateAccountQuery = "UPDATE accounts SET Username='" + Username + "''Password='" + Password + "''Email='" + Email + "''AccessLevel='" + AccessLevel + "''Membership='" + Membership + "''isGM=" + isGM + "'LastOnlineUtc='" + LastOnlineUtc + "''Coins='" + Coins + "''Ip='" + Ip + "''Settings='" + Settings + "''IsOnline=" + IsOnline + "'IsBanned=" + IsBanned + "'UnBanDate='" + UnBanDate + "' WHERE Id=" + AccountId + ";"; " is 426.
Long Statement,NetworkApi.Communication.ScsServices.Client,ScsServiceClient,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\ScsServices\Client\ScsServiceClient.cs,RequestReplyMessenger_MessageReceived,The length of the statement  "		this.SendInvokeResponse ((IScsMessage)remoteInvokeMessage' (object)null' new ScsRemoteException ("Client does not wait for method invocations by server.")); " is 156.
Long Statement,NetworkApi.Communication.ScsServices.Client,ScsServiceClient,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\ScsServices\Client\ScsServiceClient.cs,RequestReplyMessenger_MessageReceived,The length of the statement  "			returnValue = this._clientObject.GetType ().GetMethod (remoteInvokeMessage.MethodName).Invoke (this._clientObject' remoteInvokeMessage.Parameters); " is 147.
Long Statement,NetworkApi.Communication.ScsServices.Client,ScsServiceClient,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\ScsServices\Client\ScsServiceClient.cs,RequestReplyMessenger_MessageReceived,The length of the statement  "			this.SendInvokeResponse ((IScsMessage)remoteInvokeMessage' (object)null' new ScsRemoteException (innerException.Message' innerException)); " is 138.
Long Statement,NetworkApi.Communication.ScsServices.Communication,RemoteInvokeProxy,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\ScsServices\Communication\RemoteInvokeProxy.cs,Invoke,The length of the statement  "	ScsRemoteInvokeReturnMessage invokeReturnMessage = this._clientMessenger.SendMessageAndWaitForResponse ((IScsMessage)new ScsRemoteInvokeMessage () { " is 148.
Long Statement,NetworkApi.Communication.ScsServices.Communication.Messages,ScsRemoteInvokeReturnMessage,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\ScsServices\Communication\Messages\ScsRemoteInvokeReturnMessage.cs,ToString,The length of the statement  "	return string.Format ("ScsRemoteInvokeReturnMessage: Returns {0}' Exception = {1}"' this.ReturnValue' (object)this.RemoteException); " is 132.
Long Statement,NetworkApi.Communication.ScsServices.Service,ScsServiceApplication,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\ScsServices\Service\ScsServiceApplication.cs,AddService,The length of the statement  "	this._serviceObjects [serviceInterfaceType.Name] = new ScsServiceApplication.ServiceObject (serviceInterfaceType' (ScsService)service); " is 135.
Long Statement,NetworkApi.Communication.ScsServices.Service,ScsServiceApplication,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\ScsServices\Service\ScsServiceApplication.cs,Client_MessageReceived,The length of the statement  "				ScsServiceApplication.SendInvokeResponse ((IMessenger)requestReplyMessenger' (IScsMessage)remoteInvokeMessage' (object)null' new ScsRemoteException ("There is no service with name '" + remoteInvokeMessage.ServiceClassName + "'")); " is 230.
Long Statement,NetworkApi.Communication.ScsServices.Service,ScsServiceApplication,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\ScsServices\Service\ScsServiceApplication.cs,Client_MessageReceived,The length of the statement  "					ScsServiceApplication.SendInvokeResponse ((IMessenger)requestReplyMessenger' (IScsMessage)remoteInvokeMessage' returnValue' (ScsRemoteException)null); " is 150.
Long Statement,NetworkApi.Communication.ScsServices.Service,ScsServiceApplication,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\ScsServices\Service\ScsServiceApplication.cs,Client_MessageReceived,The length of the statement  "					ScsServiceApplication.SendInvokeResponse ((IMessenger)requestReplyMessenger' (IScsMessage)remoteInvokeMessage' (object)null' new ScsRemoteException (innerException.Message + Environment.NewLine + "Service Version: " + serviceObject.ServiceAttribute.Version' innerException)); " is 275.
Long Statement,NetworkApi.Communication.ScsServices.Service,ScsServiceApplication,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\ScsServices\Service\ScsServiceApplication.cs,Client_MessageReceived,The length of the statement  "					ScsServiceApplication.SendInvokeResponse ((IMessenger)requestReplyMessenger' (IScsMessage)remoteInvokeMessage' (object)null' new ScsRemoteException (ex.Message + Environment.NewLine + "Service Version: " + serviceObject.ServiceAttribute.Version' ex)); " is 251.
Long Statement,NetworkApi.Communication.ScsServices.Service,ScsServiceApplication,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\ScsServices\Service\ScsServiceApplication.cs,Client_MessageReceived,The length of the statement  "		ScsServiceApplication.SendInvokeResponse ((IMessenger)requestReplyMessenger' (IScsMessage)remoteInvokeMessage' (object)null' new ScsRemoteException ("An error occured during remote service method call."' ex)); " is 209.
Long Statement,NetworkApi.Communication.Scs.Client,ScsClientBase,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Client\ScsClientBase.cs,Connect,The length of the statement  "	this._communicationChannel.MessageReceived += new EventHandler<MessageEventArgs> (this.CommunicationChannel_MessageReceived); " is 125.
Long Statement,NetworkApi.Communication.Scs.Client,ScsClientBase,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Client\ScsClientBase.cs,PingTimer_Elapsed,The length of the statement  "		if (this._communicationChannel.LastReceivedMessageTime > dateTime || this._communicationChannel.LastSentMessageTime > dateTime) " is 127.
Long Statement,NetworkApi.Communication.Scs.Client.Tcp,ScsTcpClient,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Client\Tcp\ScsTcpClient.cs,CreateCommunicationChannel,The length of the statement  "	return (ICommunicationChannel)new TcpCommunicationChannel (TcpHelper.ConnectToServer ((EndPoint)new IPEndPoint (IPAddress.Parse (this._serverEndPoint.IpAddress)' this._serverEndPoint.TcpPort)' this.ConnectTimeout)); " is 215.
Long Statement,NetworkApi.Communication.Scs.Communication.Channels.Tcp,TcpCommunicationChannel,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Channels\Tcp\TcpCommunicationChannel.cs,StartInternal,The length of the statement  "	this._clientSocket.BeginReceive (this._buffer' 0' this._buffer.Length' SocketFlags.None' new AsyncCallback (this.ReceiveCallback)' (object)null); " is 145.
Long Statement,NetworkApi.Communication.Scs.Communication.Channels.Tcp,TcpCommunicationChannel,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Channels\Tcp\TcpCommunicationChannel.cs,SendMessageInternal,The length of the statement  "				throw new CommunicationException ("Message could not be sent via TCP socket. Only " + (object)offset + " bytes of " + (string)(object)local_1.Length + " bytes are sent."); " is 171.
Long Statement,NetworkApi.Communication.Scs.Communication.Channels.Tcp,TcpCommunicationChannel,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Channels\Tcp\TcpCommunicationChannel.cs,ReceiveCallback,The length of the statement  "		this._clientSocket.BeginReceive (this._buffer' 0' this._buffer.Length' SocketFlags.None' new AsyncCallback (this.ReceiveCallback)' (object)null); " is 145.
Long Statement,NetworkApi.Communication.Scs.Communication.Messages,ScsRawDataMessage,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Messages\ScsRawDataMessage.cs,ToString,The length of the statement  "		return string.Format ("ScsRawDataMessage [{0}] Replied To [{1}]: {2} bytes"' (object)this.MessageId' (object)this.RepliedMessageId' (object)num); " is 145.
Long Statement,NetworkApi.Communication.Scs.Communication.Messages,ScsTextMessage,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Messages\ScsTextMessage.cs,ToString,The length of the statement  "		return string.Format ("ScsTextMessage [{0}] Replied To [{1}]: {2}"' (object)this.MessageId' (object)this.RepliedMessageId' (object)this.Text); " is 142.
Long Statement,NetworkApi.Communication.Scs.Communication.Messengers,RequestReplyMessenger,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Messengers\RequestReplyMessenger.cs,Stop,The length of the statement  "		foreach (RequestReplyMessenger<T>.WaitingMessage item_0 in (IEnumerable<RequestReplyMessenger<T>.WaitingMessage>)this._waitingMessages.Values) { " is 144.
Long Statement,NetworkApi.Communication.Scs.Communication.Messengers,SynchronizedMessenger,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Messengers\SynchronizedMessenger.cs,ReceiveMessage,The length of the statement  "		throw new Exception ("Unexpected message received. Expected type: " + typeof(TMessage).Name + ". Received message type: " + scsMessage.GetType ().Name); " is 152.
Long Statement,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,GetBytes,The length of the statement  "		throw new CommunicationException ("Message is too big (" + (object)length + " bytes). Max allowed length is " + (string)(object)134217728 + " bytes."); " is 151.
Long Statement,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The length of the statement  "		throw new Exception ("Message is too big (" + (object)length + " bytes). Max allowed length is " + (string)(object)134217728 + " bytes."); " is 138.
Long Statement,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The length of the statement  "		byte[] buffer = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' (int)(this._receiveMemoryStream.Length - (long)(4 + length))); " is 156.
Long Statement,NetworkApi.Communication.Scs.Server,ScsServerBase,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Server\ScsServerBase.cs,Start,The length of the statement  "	this._connectionListener.CommunicationChannelConnected += new EventHandler<CommunicationChannelEventArgs> (this.ConnectionListener_CommunicationChannelConnected); " is 162.
Long Statement,Network,TcpServer,C:\repos\GoneUp_Temu\LoginServer\Network\TcpServer.cs,isLoginValid,The length of the statement  "			//DbQuerys.SetIsOnline(user' false); //this for later setting offline kicking other player maybe... for now no 2nd login possible! " is 130.
Long Statement,Network,TcpServer,C:\repos\GoneUp_Temu\LoginServer\Network\TcpServer.cs,isRegisterValid,The length of the statement  "	if (DbQuerys.InsertAccountData (user' pass' "no-e@mail.de"' 1' "20001"' true' 0' 0' "127.0.0.1"' "0"' false' false' 0' Convert.ToInt64 (DateTime.Now.Ticks))) { " is 159.
Long Statement,Network,LoginServerConnection,C:\repos\GoneUp_Temu\LoginServer\Network\LoginServerConnection.cs,ServerStart,The length of the statement  "	Console.WriteLine ("----------------------------------------------------------------------------\n" + "---===== Loading LoginServer Service.\n" + "----------------------------------------------------------------------------"); " is 226.
Long Statement,DevTera,LoginServer,C:\repos\GoneUp_Temu\LoginServer\LoginServer.cs,RunServer,The length of the statement  "	TcpLoginServer = new TcpServer (loginserverConfig.ServerListenIP' Convert.ToInt32 (loginserverConfig.ServerPort)' Convert.ToInt32 (loginserverConfig.ServerMaxConnections)); " is 172.
Long Statement,DevTera,LoginServer,C:\repos\GoneUp_Temu\LoginServer\LoginServer.cs,RunServer,The length of the statement  "	Console.WriteLine ("---===== LoginServer OnLine in {0}"' (serverStartStopwatch.ElapsedMilliseconds / 1000.0).ToString ("0.00s")); " is 129.
Long Statement,DevTera,LoginServer,C:\repos\GoneUp_Temu\LoginServer\LoginServer.cs,RunServer,The length of the statement  "	//DbQuerys.UpdateAccountData_byID(5' "test8987"' "PASSWORD"' "t@t.de"' 0' "1"' true' 0' 0' "1"' "000010000"' true' true' 1); " is 124.
Long Statement,DevTera,LoginServer,C:\repos\GoneUp_Temu\LoginServer\LoginServer.cs,PrintServerLicence,The length of the statement  "	Console.WriteLine ("----------------------------------------------------------------------------\n" + "ProjectS1.LoginServer\n\n" + "This program is free software;\nyou can redistribute it and/or modify it under the terms of the \nGNU General Public License as published by the Free Software Foundation;\neither version 2 of the License' or (at your option) any later version.\n\n" + "This program is distributed in the hope that it will be useful'\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\nSee the GNU General Public License for more details.\n\n" + "Copyright (C) 2013 (ProjectS1.LoginServer)\n" + "Author: P5yl0\n " + "----------------------------------------------------------------------------"); " is 780.
Empty Catch Block,Configuration,Config,C:\repos\GoneUp_Temu\LoginServer\Configuration\_Config.cs,Init_LS_Config,The method has an empty catch block.
Empty Catch Block,Configuration,Config,C:\repos\GoneUp_Temu\LoginServer\Configuration\_Config.cs,Init_LOG_Config,The method has an empty catch block.
Empty Catch Block,Configuration,Config,C:\repos\GoneUp_Temu\LoginServer\Configuration\_Config.cs,Init_DB_Config,The method has an empty catch block.
Empty Catch Block,NetworkApi.Communication.ScsServices.Client,ScsServiceClient,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\ScsServices\Client\ScsServiceClient.cs,SendInvokeResponse,The method has an empty catch block.
Empty Catch Block,NetworkApi.Communication.ScsServices.Service,ScsServiceApplication,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\ScsServices\Service\ScsServiceApplication.cs,SendInvokeResponse,The method has an empty catch block.
Empty Catch Block,NetworkApi.Communication.Scs.Client,ScsClientBase,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Client\ScsClientBase.cs,PingTimer_Elapsed,The method has an empty catch block.
Empty Catch Block,NetworkApi.Communication.Scs.Communication.Channels.Tcp,TcpCommunicationChannel,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Channels\Tcp\TcpCommunicationChannel.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,NetworkApi.Communication.Scs.Communication.Channels.Tcp,TcpConnectionListener,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Channels\Tcp\TcpConnectionListener.cs,StopSocket,The method has an empty catch block.
Empty Catch Block,NetworkApi.Communication.Scs.Communication.Channels.Tcp,TcpConnectionListener,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Channels\Tcp\TcpConnectionListener.cs,DoListenAsThread,The method has an empty catch block.
Empty Catch Block,NetworkApi.Threading,SequentialItemProcessor,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Threading\SequentialItemProcessor.cs,Stop,The method has an empty catch block.
Empty Catch Block,NetworkApi.Threading,Timer,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Threading\Timer.cs,TimerCallBack,The method has an empty catch block.
Magic Number,Configuration,LoginServerConfig,C:\repos\GoneUp_Temu\LoginServer\Configuration\Configs\LoginServer.cs,LoginServerConfig,The following statement contains a magic number: _ServerPort = 2101;  
Magic Number,Configuration,LoginServerConfig,C:\repos\GoneUp_Temu\LoginServer\Configuration\Configs\LoginServer.cs,LoginServerConfig,The following statement contains a magic number: _ServerMaxConnections = 100;  
Magic Number,Configuration,LoginServerConfig,C:\repos\GoneUp_Temu\LoginServer\Configuration\Configs\LoginServer.cs,LoginServerConfig,The following statement contains a magic number: _InterServerPort = 1000;  
Magic Number,Configuration,LoginServerConfig,C:\repos\GoneUp_Temu\LoginServer\Configuration\Configs\LoginServer.cs,LoginServerConfig,The following statement contains a magic number: _DbPort = 3306;  
Magic Number,Configuration,LoginServerConfig,C:\repos\GoneUp_Temu\LoginServer\Configuration\Configs\LoginServer.cs,LoginServerConfig,The following statement contains a magic number: _DbMinPoolSize = 5;  
Magic Number,Configuration,LoginServerConfig,C:\repos\GoneUp_Temu\LoginServer\Configuration\Configs\LoginServer.cs,LoginServerConfig,The following statement contains a magic number: _DbMaxPoolSize = 100;  
Magic Number,Configuration,Task,C:\repos\GoneUp_Temu\LoginServer\Configuration\_TaskLoader.cs,LoadTask,The following statement contains a magic number: Logger.WriteLine (LogState.Info' "Init: {0} {1} values in {2}s"' loader.Method.Name' readed' (stopwatch.ElapsedMilliseconds / 1000.0).ToString ("0.00"));  
Magic Number,NetworkApi.Communication.Scs.Client,ClientReConnecter,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Client\ClientReConnecter.cs,ClientReConnecter,The following statement contains a magic number: this._reconnectTimer = new Timer (20000);  
Magic Number,NetworkApi.Communication.Scs.Client,ScsClientBase,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Client\ScsClientBase.cs,ScsClientBase,The following statement contains a magic number: this._pingTimer = new Timer (30000);  
Magic Number,NetworkApi.Communication.Scs.Client,ScsClientBase,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Client\ScsClientBase.cs,ScsClientBase,The following statement contains a magic number: this.ConnectTimeout = 15000;  
Magic Number,NetworkApi.Communication.Scs.Client.Tcp,TcpHelper,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Client\Tcp\TcpHelper.cs,ConnectToServer,The following statement contains a magic number: try {  	socket.Blocking = false;  	socket.Connect (endPoint);  	socket.Blocking = true;  	return socket;  }  catch (SocketException ex) {  	if (ex.ErrorCode != 10035) {  		socket.Close ();  		throw;  	}  	else if (!socket.Poll (timeoutMs * 1000' SelectMode.SelectWrite)) {  		socket.Close ();  		throw new TimeoutException ("The host failed to connect. Timeout occured.");  	}  	else {  		socket.Blocking = true;  		return socket;  	}  }  
Magic Number,NetworkApi.Communication.Scs.Client.Tcp,TcpHelper,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Client\Tcp\TcpHelper.cs,ConnectToServer,The following statement contains a magic number: try {  	socket.Blocking = false;  	socket.Connect (endPoint);  	socket.Blocking = true;  	return socket;  }  catch (SocketException ex) {  	if (ex.ErrorCode != 10035) {  		socket.Close ();  		throw;  	}  	else if (!socket.Poll (timeoutMs * 1000' SelectMode.SelectWrite)) {  		socket.Close ();  		throw new TimeoutException ("The host failed to connect. Timeout occured.");  	}  	else {  		socket.Blocking = true;  		return socket;  	}  }  
Magic Number,NetworkApi.Communication.Scs.Client.Tcp,TcpHelper,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Client\Tcp\TcpHelper.cs,ConnectToServer,The following statement contains a magic number: if (ex.ErrorCode != 10035) {  	socket.Close ();  	throw;  }  else if (!socket.Poll (timeoutMs * 1000' SelectMode.SelectWrite)) {  	socket.Close ();  	throw new TimeoutException ("The host failed to connect. Timeout occured.");  }  else {  	socket.Blocking = true;  	return socket;  }  
Magic Number,NetworkApi.Communication.Scs.Client.Tcp,TcpHelper,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Client\Tcp\TcpHelper.cs,ConnectToServer,The following statement contains a magic number: if (ex.ErrorCode != 10035) {  	socket.Close ();  	throw;  }  else if (!socket.Poll (timeoutMs * 1000' SelectMode.SelectWrite)) {  	socket.Close ();  	throw new TimeoutException ("The host failed to connect. Timeout occured.");  }  else {  	socket.Blocking = true;  	return socket;  }  
Magic Number,NetworkApi.Communication.Scs.Client.Tcp,TcpHelper,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Client\Tcp\TcpHelper.cs,ConnectToServer,The following statement contains a magic number: if (!socket.Poll (timeoutMs * 1000' SelectMode.SelectWrite)) {  	socket.Close ();  	throw new TimeoutException ("The host failed to connect. Timeout occured.");  }  else {  	socket.Blocking = true;  	return socket;  }  
Magic Number,NetworkApi.Communication.Scs.Communication.Channels.Tcp,TcpCommunicationChannel,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Channels\Tcp\TcpCommunicationChannel.cs,TcpCommunicationChannel,The following statement contains a magic number: this._buffer = new byte[4096];  
Magic Number,NetworkApi.Communication.Scs.Communication.Channels.Tcp,TcpConnectionListener,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Channels\Tcp\TcpConnectionListener.cs,DoListenAsThread,The following statement contains a magic number: while (this._running) {  	try {  		Socket clientSocket = this._listenerSocket.AcceptSocket ();  		if (clientSocket.Connected)  			this.OnCommunicationChannelConnected ((ICommunicationChannel)new TcpCommunicationChannel (clientSocket));  	}  	catch {  		this.StopSocket ();  		Thread.Sleep (1000);  		if (!this._running)  			break;  		try {  			this.StartSocket ();  		}  		catch {  		}  	}  }  
Magic Number,NetworkApi.Communication.Scs.Communication.Channels.Tcp,TcpConnectionListener,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Channels\Tcp\TcpConnectionListener.cs,DoListenAsThread,The following statement contains a magic number: try {  	Socket clientSocket = this._listenerSocket.AcceptSocket ();  	if (clientSocket.Connected)  		this.OnCommunicationChannelConnected ((ICommunicationChannel)new TcpCommunicationChannel (clientSocket));  }  catch {  	this.StopSocket ();  	Thread.Sleep (1000);  	if (!this._running)  		break;  	try {  		this.StartSocket ();  	}  	catch {  	}  }  
Magic Number,NetworkApi.Communication.Scs.Communication.Channels.Tcp,TcpConnectionListener,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Channels\Tcp\TcpConnectionListener.cs,DoListenAsThread,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,NetworkApi.Communication.Scs.Communication.EndPoints,ScsEndPoint,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\EndPoints\ScsEndPoint.cs,CreateEndPoint,The following statement contains a magic number: if (strArray.Length != 2)  	throw new ApplicationException (endPointAddress + " is not a valid endpoint address.");  
Magic Number,NetworkApi.Communication.Scs.Communication.EndPoints.Tcp,ScsTcpEndPoint,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\EndPoints\Tcp\ScsTcpEndPoint.cs,ToString,The following statement contains a magic number: return string.Concat (new object[4] {  	(object)"tcp://"'  	(object)this.IpAddress'  	(object)":"'  	(object)this.TcpPort  });  
Magic Number,NetworkApi.Communication.Scs.Communication.Messengers,RequestReplyMessenger,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Messengers\RequestReplyMessenger.cs,RequestReplyMessenger,The following statement contains a magic number: this.Timeout = 60000;  
Magic Number,NetworkApi.Communication.Scs.Communication.Messengers,RequestReplyMessenger,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Messengers\RequestReplyMessenger.cs,Messenger_MessageReceived,The following statement contains a magic number: if (!string.IsNullOrEmpty (e.Message.RepliedMessageId)) {  	RequestReplyMessenger<T>.WaitingMessage waitingMessage = (RequestReplyMessenger<T>.WaitingMessage)null;  	lock (this._syncObj) {  		if (this._waitingMessages.ContainsKey (e.Message.RepliedMessageId))  			waitingMessage = this._waitingMessages [e.Message.RepliedMessageId];  	}  	if (waitingMessage != null) {  		waitingMessage.ResponseMessage = e.Message;  		waitingMessage.State = (RequestReplyMessenger<T>.WaitingMessageStates)2;  		waitingMessage.WaitEvent.Set ();  		return;  	}  }  
Magic Number,NetworkApi.Communication.Scs.Communication.Messengers,RequestReplyMessenger,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Messengers\RequestReplyMessenger.cs,Messenger_MessageReceived,The following statement contains a magic number: if (waitingMessage != null) {  	waitingMessage.ResponseMessage = e.Message;  	waitingMessage.State = (RequestReplyMessenger<T>.WaitingMessageStates)2;  	waitingMessage.WaitEvent.Set ();  	return;  }  
Magic Number,NetworkApi.Communication.Scs.Communication.Messengers,RequestReplyMessenger,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Messengers\RequestReplyMessenger.cs,Messenger_MessageReceived,The following statement contains a magic number: waitingMessage.State = (RequestReplyMessenger<T>.WaitingMessageStates)2;  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,GetBytes,The following statement contains a magic number: if (length > 134217728) {  	throw new CommunicationException ("Message is too big (" + (object)length + " bytes). Max allowed length is " + (string)(object)134217728 + " bytes.");  }  else {  	byte[] buffer = new byte[length + 4];  	BinarySerializationProtocol.WriteInt32 (buffer' 0' length);  	Array.Copy ((Array)numArray' 0' (Array)buffer' 4' length);  	return buffer;  }  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,GetBytes,The following statement contains a magic number: if (length > 134217728) {  	throw new CommunicationException ("Message is too big (" + (object)length + " bytes). Max allowed length is " + (string)(object)134217728 + " bytes.");  }  else {  	byte[] buffer = new byte[length + 4];  	BinarySerializationProtocol.WriteInt32 (buffer' 0' length);  	Array.Copy ((Array)numArray' 0' (Array)buffer' 4' length);  	return buffer;  }  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,GetBytes,The following statement contains a magic number: if (length > 134217728) {  	throw new CommunicationException ("Message is too big (" + (object)length + " bytes). Max allowed length is " + (string)(object)134217728 + " bytes.");  }  else {  	byte[] buffer = new byte[length + 4];  	BinarySerializationProtocol.WriteInt32 (buffer' 0' length);  	Array.Copy ((Array)numArray' 0' (Array)buffer' 4' length);  	return buffer;  }  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,GetBytes,The following statement contains a magic number: if (length > 134217728) {  	throw new CommunicationException ("Message is too big (" + (object)length + " bytes). Max allowed length is " + (string)(object)134217728 + " bytes.");  }  else {  	byte[] buffer = new byte[length + 4];  	BinarySerializationProtocol.WriteInt32 (buffer' 0' length);  	Array.Copy ((Array)numArray' 0' (Array)buffer' 4' length);  	return buffer;  }  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,GetBytes,The following statement contains a magic number: throw new CommunicationException ("Message is too big (" + (object)length + " bytes). Max allowed length is " + (string)(object)134217728 + " bytes.");  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,GetBytes,The following statement contains a magic number: Array.Copy ((Array)numArray' 0' (Array)buffer' 4' length);  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: if (length > 134217728)  	throw new Exception ("Message is too big (" + (object)length + " bytes). Max allowed length is " + (string)(object)134217728 + " bytes.");  else if (length == 0) {  	if (this._receiveMemoryStream.Length == 4L) {  		this._receiveMemoryStream = new MemoryStream ();  		return false;  	}  	else {  		byte[] buffer = this._receiveMemoryStream.ToArray ();  		this._receiveMemoryStream = new MemoryStream ();  		this._receiveMemoryStream.Write (buffer' 4' buffer.Length - 4);  		return true;  	}  }  else if (this._receiveMemoryStream.Length < (long)(4 + length)) {  	this._receiveMemoryStream.Position = this._receiveMemoryStream.Length;  	return false;  }  else {  	byte[] bytes = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' length);  	messages.Add (this.DeserializeMessage (bytes));  	byte[] buffer = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' (int)(this._receiveMemoryStream.Length - (long)(4 + length)));  	this._receiveMemoryStream = new MemoryStream ();  	this._receiveMemoryStream.Write (buffer' 0' buffer.Length);  	return buffer.Length > 4;  }  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: if (length > 134217728)  	throw new Exception ("Message is too big (" + (object)length + " bytes). Max allowed length is " + (string)(object)134217728 + " bytes.");  else if (length == 0) {  	if (this._receiveMemoryStream.Length == 4L) {  		this._receiveMemoryStream = new MemoryStream ();  		return false;  	}  	else {  		byte[] buffer = this._receiveMemoryStream.ToArray ();  		this._receiveMemoryStream = new MemoryStream ();  		this._receiveMemoryStream.Write (buffer' 4' buffer.Length - 4);  		return true;  	}  }  else if (this._receiveMemoryStream.Length < (long)(4 + length)) {  	this._receiveMemoryStream.Position = this._receiveMemoryStream.Length;  	return false;  }  else {  	byte[] bytes = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' length);  	messages.Add (this.DeserializeMessage (bytes));  	byte[] buffer = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' (int)(this._receiveMemoryStream.Length - (long)(4 + length)));  	this._receiveMemoryStream = new MemoryStream ();  	this._receiveMemoryStream.Write (buffer' 0' buffer.Length);  	return buffer.Length > 4;  }  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: if (length > 134217728)  	throw new Exception ("Message is too big (" + (object)length + " bytes). Max allowed length is " + (string)(object)134217728 + " bytes.");  else if (length == 0) {  	if (this._receiveMemoryStream.Length == 4L) {  		this._receiveMemoryStream = new MemoryStream ();  		return false;  	}  	else {  		byte[] buffer = this._receiveMemoryStream.ToArray ();  		this._receiveMemoryStream = new MemoryStream ();  		this._receiveMemoryStream.Write (buffer' 4' buffer.Length - 4);  		return true;  	}  }  else if (this._receiveMemoryStream.Length < (long)(4 + length)) {  	this._receiveMemoryStream.Position = this._receiveMemoryStream.Length;  	return false;  }  else {  	byte[] bytes = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' length);  	messages.Add (this.DeserializeMessage (bytes));  	byte[] buffer = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' (int)(this._receiveMemoryStream.Length - (long)(4 + length)));  	this._receiveMemoryStream = new MemoryStream ();  	this._receiveMemoryStream.Write (buffer' 0' buffer.Length);  	return buffer.Length > 4;  }  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: if (length > 134217728)  	throw new Exception ("Message is too big (" + (object)length + " bytes). Max allowed length is " + (string)(object)134217728 + " bytes.");  else if (length == 0) {  	if (this._receiveMemoryStream.Length == 4L) {  		this._receiveMemoryStream = new MemoryStream ();  		return false;  	}  	else {  		byte[] buffer = this._receiveMemoryStream.ToArray ();  		this._receiveMemoryStream = new MemoryStream ();  		this._receiveMemoryStream.Write (buffer' 4' buffer.Length - 4);  		return true;  	}  }  else if (this._receiveMemoryStream.Length < (long)(4 + length)) {  	this._receiveMemoryStream.Position = this._receiveMemoryStream.Length;  	return false;  }  else {  	byte[] bytes = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' length);  	messages.Add (this.DeserializeMessage (bytes));  	byte[] buffer = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' (int)(this._receiveMemoryStream.Length - (long)(4 + length)));  	this._receiveMemoryStream = new MemoryStream ();  	this._receiveMemoryStream.Write (buffer' 0' buffer.Length);  	return buffer.Length > 4;  }  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: if (length > 134217728)  	throw new Exception ("Message is too big (" + (object)length + " bytes). Max allowed length is " + (string)(object)134217728 + " bytes.");  else if (length == 0) {  	if (this._receiveMemoryStream.Length == 4L) {  		this._receiveMemoryStream = new MemoryStream ();  		return false;  	}  	else {  		byte[] buffer = this._receiveMemoryStream.ToArray ();  		this._receiveMemoryStream = new MemoryStream ();  		this._receiveMemoryStream.Write (buffer' 4' buffer.Length - 4);  		return true;  	}  }  else if (this._receiveMemoryStream.Length < (long)(4 + length)) {  	this._receiveMemoryStream.Position = this._receiveMemoryStream.Length;  	return false;  }  else {  	byte[] bytes = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' length);  	messages.Add (this.DeserializeMessage (bytes));  	byte[] buffer = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' (int)(this._receiveMemoryStream.Length - (long)(4 + length)));  	this._receiveMemoryStream = new MemoryStream ();  	this._receiveMemoryStream.Write (buffer' 0' buffer.Length);  	return buffer.Length > 4;  }  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: if (length > 134217728)  	throw new Exception ("Message is too big (" + (object)length + " bytes). Max allowed length is " + (string)(object)134217728 + " bytes.");  else if (length == 0) {  	if (this._receiveMemoryStream.Length == 4L) {  		this._receiveMemoryStream = new MemoryStream ();  		return false;  	}  	else {  		byte[] buffer = this._receiveMemoryStream.ToArray ();  		this._receiveMemoryStream = new MemoryStream ();  		this._receiveMemoryStream.Write (buffer' 4' buffer.Length - 4);  		return true;  	}  }  else if (this._receiveMemoryStream.Length < (long)(4 + length)) {  	this._receiveMemoryStream.Position = this._receiveMemoryStream.Length;  	return false;  }  else {  	byte[] bytes = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' length);  	messages.Add (this.DeserializeMessage (bytes));  	byte[] buffer = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' (int)(this._receiveMemoryStream.Length - (long)(4 + length)));  	this._receiveMemoryStream = new MemoryStream ();  	this._receiveMemoryStream.Write (buffer' 0' buffer.Length);  	return buffer.Length > 4;  }  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: if (length > 134217728)  	throw new Exception ("Message is too big (" + (object)length + " bytes). Max allowed length is " + (string)(object)134217728 + " bytes.");  else if (length == 0) {  	if (this._receiveMemoryStream.Length == 4L) {  		this._receiveMemoryStream = new MemoryStream ();  		return false;  	}  	else {  		byte[] buffer = this._receiveMemoryStream.ToArray ();  		this._receiveMemoryStream = new MemoryStream ();  		this._receiveMemoryStream.Write (buffer' 4' buffer.Length - 4);  		return true;  	}  }  else if (this._receiveMemoryStream.Length < (long)(4 + length)) {  	this._receiveMemoryStream.Position = this._receiveMemoryStream.Length;  	return false;  }  else {  	byte[] bytes = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' length);  	messages.Add (this.DeserializeMessage (bytes));  	byte[] buffer = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' (int)(this._receiveMemoryStream.Length - (long)(4 + length)));  	this._receiveMemoryStream = new MemoryStream ();  	this._receiveMemoryStream.Write (buffer' 0' buffer.Length);  	return buffer.Length > 4;  }  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: throw new Exception ("Message is too big (" + (object)length + " bytes). Max allowed length is " + (string)(object)134217728 + " bytes.");  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: if (length == 0) {  	if (this._receiveMemoryStream.Length == 4L) {  		this._receiveMemoryStream = new MemoryStream ();  		return false;  	}  	else {  		byte[] buffer = this._receiveMemoryStream.ToArray ();  		this._receiveMemoryStream = new MemoryStream ();  		this._receiveMemoryStream.Write (buffer' 4' buffer.Length - 4);  		return true;  	}  }  else if (this._receiveMemoryStream.Length < (long)(4 + length)) {  	this._receiveMemoryStream.Position = this._receiveMemoryStream.Length;  	return false;  }  else {  	byte[] bytes = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' length);  	messages.Add (this.DeserializeMessage (bytes));  	byte[] buffer = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' (int)(this._receiveMemoryStream.Length - (long)(4 + length)));  	this._receiveMemoryStream = new MemoryStream ();  	this._receiveMemoryStream.Write (buffer' 0' buffer.Length);  	return buffer.Length > 4;  }  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: if (length == 0) {  	if (this._receiveMemoryStream.Length == 4L) {  		this._receiveMemoryStream = new MemoryStream ();  		return false;  	}  	else {  		byte[] buffer = this._receiveMemoryStream.ToArray ();  		this._receiveMemoryStream = new MemoryStream ();  		this._receiveMemoryStream.Write (buffer' 4' buffer.Length - 4);  		return true;  	}  }  else if (this._receiveMemoryStream.Length < (long)(4 + length)) {  	this._receiveMemoryStream.Position = this._receiveMemoryStream.Length;  	return false;  }  else {  	byte[] bytes = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' length);  	messages.Add (this.DeserializeMessage (bytes));  	byte[] buffer = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' (int)(this._receiveMemoryStream.Length - (long)(4 + length)));  	this._receiveMemoryStream = new MemoryStream ();  	this._receiveMemoryStream.Write (buffer' 0' buffer.Length);  	return buffer.Length > 4;  }  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: if (length == 0) {  	if (this._receiveMemoryStream.Length == 4L) {  		this._receiveMemoryStream = new MemoryStream ();  		return false;  	}  	else {  		byte[] buffer = this._receiveMemoryStream.ToArray ();  		this._receiveMemoryStream = new MemoryStream ();  		this._receiveMemoryStream.Write (buffer' 4' buffer.Length - 4);  		return true;  	}  }  else if (this._receiveMemoryStream.Length < (long)(4 + length)) {  	this._receiveMemoryStream.Position = this._receiveMemoryStream.Length;  	return false;  }  else {  	byte[] bytes = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' length);  	messages.Add (this.DeserializeMessage (bytes));  	byte[] buffer = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' (int)(this._receiveMemoryStream.Length - (long)(4 + length)));  	this._receiveMemoryStream = new MemoryStream ();  	this._receiveMemoryStream.Write (buffer' 0' buffer.Length);  	return buffer.Length > 4;  }  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: if (length == 0) {  	if (this._receiveMemoryStream.Length == 4L) {  		this._receiveMemoryStream = new MemoryStream ();  		return false;  	}  	else {  		byte[] buffer = this._receiveMemoryStream.ToArray ();  		this._receiveMemoryStream = new MemoryStream ();  		this._receiveMemoryStream.Write (buffer' 4' buffer.Length - 4);  		return true;  	}  }  else if (this._receiveMemoryStream.Length < (long)(4 + length)) {  	this._receiveMemoryStream.Position = this._receiveMemoryStream.Length;  	return false;  }  else {  	byte[] bytes = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' length);  	messages.Add (this.DeserializeMessage (bytes));  	byte[] buffer = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' (int)(this._receiveMemoryStream.Length - (long)(4 + length)));  	this._receiveMemoryStream = new MemoryStream ();  	this._receiveMemoryStream.Write (buffer' 0' buffer.Length);  	return buffer.Length > 4;  }  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: if (length == 0) {  	if (this._receiveMemoryStream.Length == 4L) {  		this._receiveMemoryStream = new MemoryStream ();  		return false;  	}  	else {  		byte[] buffer = this._receiveMemoryStream.ToArray ();  		this._receiveMemoryStream = new MemoryStream ();  		this._receiveMemoryStream.Write (buffer' 4' buffer.Length - 4);  		return true;  	}  }  else if (this._receiveMemoryStream.Length < (long)(4 + length)) {  	this._receiveMemoryStream.Position = this._receiveMemoryStream.Length;  	return false;  }  else {  	byte[] bytes = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' length);  	messages.Add (this.DeserializeMessage (bytes));  	byte[] buffer = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' (int)(this._receiveMemoryStream.Length - (long)(4 + length)));  	this._receiveMemoryStream = new MemoryStream ();  	this._receiveMemoryStream.Write (buffer' 0' buffer.Length);  	return buffer.Length > 4;  }  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: if (this._receiveMemoryStream.Length == 4L) {  	this._receiveMemoryStream = new MemoryStream ();  	return false;  }  else {  	byte[] buffer = this._receiveMemoryStream.ToArray ();  	this._receiveMemoryStream = new MemoryStream ();  	this._receiveMemoryStream.Write (buffer' 4' buffer.Length - 4);  	return true;  }  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: if (this._receiveMemoryStream.Length == 4L) {  	this._receiveMemoryStream = new MemoryStream ();  	return false;  }  else {  	byte[] buffer = this._receiveMemoryStream.ToArray ();  	this._receiveMemoryStream = new MemoryStream ();  	this._receiveMemoryStream.Write (buffer' 4' buffer.Length - 4);  	return true;  }  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: this._receiveMemoryStream.Write (buffer' 4' buffer.Length - 4);  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: this._receiveMemoryStream.Write (buffer' 4' buffer.Length - 4);  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: if (this._receiveMemoryStream.Length < (long)(4 + length)) {  	this._receiveMemoryStream.Position = this._receiveMemoryStream.Length;  	return false;  }  else {  	byte[] bytes = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' length);  	messages.Add (this.DeserializeMessage (bytes));  	byte[] buffer = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' (int)(this._receiveMemoryStream.Length - (long)(4 + length)));  	this._receiveMemoryStream = new MemoryStream ();  	this._receiveMemoryStream.Write (buffer' 0' buffer.Length);  	return buffer.Length > 4;  }  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: if (this._receiveMemoryStream.Length < (long)(4 + length)) {  	this._receiveMemoryStream.Position = this._receiveMemoryStream.Length;  	return false;  }  else {  	byte[] bytes = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' length);  	messages.Add (this.DeserializeMessage (bytes));  	byte[] buffer = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' (int)(this._receiveMemoryStream.Length - (long)(4 + length)));  	this._receiveMemoryStream = new MemoryStream ();  	this._receiveMemoryStream.Write (buffer' 0' buffer.Length);  	return buffer.Length > 4;  }  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: if (this._receiveMemoryStream.Length < (long)(4 + length)) {  	this._receiveMemoryStream.Position = this._receiveMemoryStream.Length;  	return false;  }  else {  	byte[] bytes = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' length);  	messages.Add (this.DeserializeMessage (bytes));  	byte[] buffer = BinarySerializationProtocol.ReadByteArray ((Stream)this._receiveMemoryStream' (int)(this._receiveMemoryStream.Length - (long)(4 + length)));  	this._receiveMemoryStream = new MemoryStream ();  	this._receiveMemoryStream.Write (buffer' 0' buffer.Length);  	return buffer.Length > 4;  }  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadSingleMessage,The following statement contains a magic number: return buffer.Length > 4;  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,WriteInt32,The following statement contains a magic number: buffer [startIndex] = (byte)(number >> 24 & (int)byte.MaxValue);  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,WriteInt32,The following statement contains a magic number: buffer [startIndex + 1] = (byte)(number >> 16 & (int)byte.MaxValue);  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,WriteInt32,The following statement contains a magic number: buffer [startIndex + 2] = (byte)(number >> 8 & (int)byte.MaxValue);  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,WriteInt32,The following statement contains a magic number: buffer [startIndex + 2] = (byte)(number >> 8 & (int)byte.MaxValue);  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,WriteInt32,The following statement contains a magic number: buffer [startIndex + 3] = (byte)(number & (int)byte.MaxValue);  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadInt32,The following statement contains a magic number: return (int)numArray [0] << 24 | (int)numArray [1] << 16 | (int)numArray [2] << 8 | (int)numArray [3];  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadInt32,The following statement contains a magic number: return (int)numArray [0] << 24 | (int)numArray [1] << 16 | (int)numArray [2] << 8 | (int)numArray [3];  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadInt32,The following statement contains a magic number: return (int)numArray [0] << 24 | (int)numArray [1] << 16 | (int)numArray [2] << 8 | (int)numArray [3];  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadInt32,The following statement contains a magic number: return (int)numArray [0] << 24 | (int)numArray [1] << 16 | (int)numArray [2] << 8 | (int)numArray [3];  
Magic Number,NetworkApi.Communication.Scs.Communication.Protocols.BinarySerialization,BinarySerializationProtocol,C:\repos\GoneUp_Temu\LoginServer\NetworkApi\Communication\Scs\Communication\Protocols\BinarySerialization\BinarySerializationProtocol.cs,ReadInt32,The following statement contains a magic number: return (int)numArray [0] << 24 | (int)numArray [1] << 16 | (int)numArray [2] << 8 | (int)numArray [3];  
Magic Number,Network,TcpServer,C:\repos\GoneUp_Temu\LoginServer\Network\TcpServer.cs,Client_MessageReceived,The following statement contains a magic number: try {  	//trim the incoming message  	string[] trimMsg = message.ToString ().Split (new Char[] {  		'&'  	});  	//foreach (string s in trimMsg)   	//{  	//if (s.Trim() != "")  	//    Log.WriteLine(LogLevel.Info'"-->" + s);  	//}  	//Log.WriteLine(LogLevel.Info' "rcv. 0: " + trimMsg[0]);  	Logger.WriteLine (LogState.Info' "rcv. 1: " + trimMsg [1]);  	Logger.WriteLine (LogState.Info' "rcv. 2: " + trimMsg [2]);  	Logger.WriteLine (LogState.Info' "rcv. 3: " + trimMsg [3]);  	//setup client for response message  	var client = (IScsServerClient)sender;  	int data = Convert.ToInt32 (trimMsg [1]);  	switch (data) {  	//LoginPacket  	case (int)OpCode.LoginPacket:  		Logger.WriteLine (LogState.Info' "Login Try: " + trimMsg [2]);  		client.SendMessage (new ScsTextMessage (isLoginValid (trimMsg [2]' trimMsg [3])));  		break;  	//RegisterPacket  	case (int)OpCode.RegisterPacket:  		Logger.WriteLine (LogState.Info' "Register Try: " + trimMsg [2]);  		client.SendMessage (new ScsTextMessage (isRegisterValid (trimMsg [2]' trimMsg [3])));  		break;  	default:  		break;  	}  }  catch (Exception exception) {  	Logger.WriteLine (LogState.Exception' exception + "\n" + exception.StackTrace);  }  
Magic Number,Network,TcpServer,C:\repos\GoneUp_Temu\LoginServer\Network\TcpServer.cs,Client_MessageReceived,The following statement contains a magic number: try {  	//trim the incoming message  	string[] trimMsg = message.ToString ().Split (new Char[] {  		'&'  	});  	//foreach (string s in trimMsg)   	//{  	//if (s.Trim() != "")  	//    Log.WriteLine(LogLevel.Info'"-->" + s);  	//}  	//Log.WriteLine(LogLevel.Info' "rcv. 0: " + trimMsg[0]);  	Logger.WriteLine (LogState.Info' "rcv. 1: " + trimMsg [1]);  	Logger.WriteLine (LogState.Info' "rcv. 2: " + trimMsg [2]);  	Logger.WriteLine (LogState.Info' "rcv. 3: " + trimMsg [3]);  	//setup client for response message  	var client = (IScsServerClient)sender;  	int data = Convert.ToInt32 (trimMsg [1]);  	switch (data) {  	//LoginPacket  	case (int)OpCode.LoginPacket:  		Logger.WriteLine (LogState.Info' "Login Try: " + trimMsg [2]);  		client.SendMessage (new ScsTextMessage (isLoginValid (trimMsg [2]' trimMsg [3])));  		break;  	//RegisterPacket  	case (int)OpCode.RegisterPacket:  		Logger.WriteLine (LogState.Info' "Register Try: " + trimMsg [2]);  		client.SendMessage (new ScsTextMessage (isRegisterValid (trimMsg [2]' trimMsg [3])));  		break;  	default:  		break;  	}  }  catch (Exception exception) {  	Logger.WriteLine (LogState.Exception' exception + "\n" + exception.StackTrace);  }  
Magic Number,Network,TcpServer,C:\repos\GoneUp_Temu\LoginServer\Network\TcpServer.cs,Client_MessageReceived,The following statement contains a magic number: try {  	//trim the incoming message  	string[] trimMsg = message.ToString ().Split (new Char[] {  		'&'  	});  	//foreach (string s in trimMsg)   	//{  	//if (s.Trim() != "")  	//    Log.WriteLine(LogLevel.Info'"-->" + s);  	//}  	//Log.WriteLine(LogLevel.Info' "rcv. 0: " + trimMsg[0]);  	Logger.WriteLine (LogState.Info' "rcv. 1: " + trimMsg [1]);  	Logger.WriteLine (LogState.Info' "rcv. 2: " + trimMsg [2]);  	Logger.WriteLine (LogState.Info' "rcv. 3: " + trimMsg [3]);  	//setup client for response message  	var client = (IScsServerClient)sender;  	int data = Convert.ToInt32 (trimMsg [1]);  	switch (data) {  	//LoginPacket  	case (int)OpCode.LoginPacket:  		Logger.WriteLine (LogState.Info' "Login Try: " + trimMsg [2]);  		client.SendMessage (new ScsTextMessage (isLoginValid (trimMsg [2]' trimMsg [3])));  		break;  	//RegisterPacket  	case (int)OpCode.RegisterPacket:  		Logger.WriteLine (LogState.Info' "Register Try: " + trimMsg [2]);  		client.SendMessage (new ScsTextMessage (isRegisterValid (trimMsg [2]' trimMsg [3])));  		break;  	default:  		break;  	}  }  catch (Exception exception) {  	Logger.WriteLine (LogState.Exception' exception + "\n" + exception.StackTrace);  }  
Magic Number,Network,TcpServer,C:\repos\GoneUp_Temu\LoginServer\Network\TcpServer.cs,Client_MessageReceived,The following statement contains a magic number: try {  	//trim the incoming message  	string[] trimMsg = message.ToString ().Split (new Char[] {  		'&'  	});  	//foreach (string s in trimMsg)   	//{  	//if (s.Trim() != "")  	//    Log.WriteLine(LogLevel.Info'"-->" + s);  	//}  	//Log.WriteLine(LogLevel.Info' "rcv. 0: " + trimMsg[0]);  	Logger.WriteLine (LogState.Info' "rcv. 1: " + trimMsg [1]);  	Logger.WriteLine (LogState.Info' "rcv. 2: " + trimMsg [2]);  	Logger.WriteLine (LogState.Info' "rcv. 3: " + trimMsg [3]);  	//setup client for response message  	var client = (IScsServerClient)sender;  	int data = Convert.ToInt32 (trimMsg [1]);  	switch (data) {  	//LoginPacket  	case (int)OpCode.LoginPacket:  		Logger.WriteLine (LogState.Info' "Login Try: " + trimMsg [2]);  		client.SendMessage (new ScsTextMessage (isLoginValid (trimMsg [2]' trimMsg [3])));  		break;  	//RegisterPacket  	case (int)OpCode.RegisterPacket:  		Logger.WriteLine (LogState.Info' "Register Try: " + trimMsg [2]);  		client.SendMessage (new ScsTextMessage (isRegisterValid (trimMsg [2]' trimMsg [3])));  		break;  	default:  		break;  	}  }  catch (Exception exception) {  	Logger.WriteLine (LogState.Exception' exception + "\n" + exception.StackTrace);  }  
Magic Number,Network,TcpServer,C:\repos\GoneUp_Temu\LoginServer\Network\TcpServer.cs,Client_MessageReceived,The following statement contains a magic number: try {  	//trim the incoming message  	string[] trimMsg = message.ToString ().Split (new Char[] {  		'&'  	});  	//foreach (string s in trimMsg)   	//{  	//if (s.Trim() != "")  	//    Log.WriteLine(LogLevel.Info'"-->" + s);  	//}  	//Log.WriteLine(LogLevel.Info' "rcv. 0: " + trimMsg[0]);  	Logger.WriteLine (LogState.Info' "rcv. 1: " + trimMsg [1]);  	Logger.WriteLine (LogState.Info' "rcv. 2: " + trimMsg [2]);  	Logger.WriteLine (LogState.Info' "rcv. 3: " + trimMsg [3]);  	//setup client for response message  	var client = (IScsServerClient)sender;  	int data = Convert.ToInt32 (trimMsg [1]);  	switch (data) {  	//LoginPacket  	case (int)OpCode.LoginPacket:  		Logger.WriteLine (LogState.Info' "Login Try: " + trimMsg [2]);  		client.SendMessage (new ScsTextMessage (isLoginValid (trimMsg [2]' trimMsg [3])));  		break;  	//RegisterPacket  	case (int)OpCode.RegisterPacket:  		Logger.WriteLine (LogState.Info' "Register Try: " + trimMsg [2]);  		client.SendMessage (new ScsTextMessage (isRegisterValid (trimMsg [2]' trimMsg [3])));  		break;  	default:  		break;  	}  }  catch (Exception exception) {  	Logger.WriteLine (LogState.Exception' exception + "\n" + exception.StackTrace);  }  
Magic Number,Network,TcpServer,C:\repos\GoneUp_Temu\LoginServer\Network\TcpServer.cs,Client_MessageReceived,The following statement contains a magic number: try {  	//trim the incoming message  	string[] trimMsg = message.ToString ().Split (new Char[] {  		'&'  	});  	//foreach (string s in trimMsg)   	//{  	//if (s.Trim() != "")  	//    Log.WriteLine(LogLevel.Info'"-->" + s);  	//}  	//Log.WriteLine(LogLevel.Info' "rcv. 0: " + trimMsg[0]);  	Logger.WriteLine (LogState.Info' "rcv. 1: " + trimMsg [1]);  	Logger.WriteLine (LogState.Info' "rcv. 2: " + trimMsg [2]);  	Logger.WriteLine (LogState.Info' "rcv. 3: " + trimMsg [3]);  	//setup client for response message  	var client = (IScsServerClient)sender;  	int data = Convert.ToInt32 (trimMsg [1]);  	switch (data) {  	//LoginPacket  	case (int)OpCode.LoginPacket:  		Logger.WriteLine (LogState.Info' "Login Try: " + trimMsg [2]);  		client.SendMessage (new ScsTextMessage (isLoginValid (trimMsg [2]' trimMsg [3])));  		break;  	//RegisterPacket  	case (int)OpCode.RegisterPacket:  		Logger.WriteLine (LogState.Info' "Register Try: " + trimMsg [2]);  		client.SendMessage (new ScsTextMessage (isRegisterValid (trimMsg [2]' trimMsg [3])));  		break;  	default:  		break;  	}  }  catch (Exception exception) {  	Logger.WriteLine (LogState.Exception' exception + "\n" + exception.StackTrace);  }  
Magic Number,Network,TcpServer,C:\repos\GoneUp_Temu\LoginServer\Network\TcpServer.cs,Client_MessageReceived,The following statement contains a magic number: try {  	//trim the incoming message  	string[] trimMsg = message.ToString ().Split (new Char[] {  		'&'  	});  	//foreach (string s in trimMsg)   	//{  	//if (s.Trim() != "")  	//    Log.WriteLine(LogLevel.Info'"-->" + s);  	//}  	//Log.WriteLine(LogLevel.Info' "rcv. 0: " + trimMsg[0]);  	Logger.WriteLine (LogState.Info' "rcv. 1: " + trimMsg [1]);  	Logger.WriteLine (LogState.Info' "rcv. 2: " + trimMsg [2]);  	Logger.WriteLine (LogState.Info' "rcv. 3: " + trimMsg [3]);  	//setup client for response message  	var client = (IScsServerClient)sender;  	int data = Convert.ToInt32 (trimMsg [1]);  	switch (data) {  	//LoginPacket  	case (int)OpCode.LoginPacket:  		Logger.WriteLine (LogState.Info' "Login Try: " + trimMsg [2]);  		client.SendMessage (new ScsTextMessage (isLoginValid (trimMsg [2]' trimMsg [3])));  		break;  	//RegisterPacket  	case (int)OpCode.RegisterPacket:  		Logger.WriteLine (LogState.Info' "Register Try: " + trimMsg [2]);  		client.SendMessage (new ScsTextMessage (isRegisterValid (trimMsg [2]' trimMsg [3])));  		break;  	default:  		break;  	}  }  catch (Exception exception) {  	Logger.WriteLine (LogState.Exception' exception + "\n" + exception.StackTrace);  }  
Magic Number,Network,TcpServer,C:\repos\GoneUp_Temu\LoginServer\Network\TcpServer.cs,Client_MessageReceived,The following statement contains a magic number: try {  	//trim the incoming message  	string[] trimMsg = message.ToString ().Split (new Char[] {  		'&'  	});  	//foreach (string s in trimMsg)   	//{  	//if (s.Trim() != "")  	//    Log.WriteLine(LogLevel.Info'"-->" + s);  	//}  	//Log.WriteLine(LogLevel.Info' "rcv. 0: " + trimMsg[0]);  	Logger.WriteLine (LogState.Info' "rcv. 1: " + trimMsg [1]);  	Logger.WriteLine (LogState.Info' "rcv. 2: " + trimMsg [2]);  	Logger.WriteLine (LogState.Info' "rcv. 3: " + trimMsg [3]);  	//setup client for response message  	var client = (IScsServerClient)sender;  	int data = Convert.ToInt32 (trimMsg [1]);  	switch (data) {  	//LoginPacket  	case (int)OpCode.LoginPacket:  		Logger.WriteLine (LogState.Info' "Login Try: " + trimMsg [2]);  		client.SendMessage (new ScsTextMessage (isLoginValid (trimMsg [2]' trimMsg [3])));  		break;  	//RegisterPacket  	case (int)OpCode.RegisterPacket:  		Logger.WriteLine (LogState.Info' "Register Try: " + trimMsg [2]);  		client.SendMessage (new ScsTextMessage (isRegisterValid (trimMsg [2]' trimMsg [3])));  		break;  	default:  		break;  	}  }  catch (Exception exception) {  	Logger.WriteLine (LogState.Exception' exception + "\n" + exception.StackTrace);  }  
Magic Number,Network,TcpServer,C:\repos\GoneUp_Temu\LoginServer\Network\TcpServer.cs,Client_MessageReceived,The following statement contains a magic number: Logger.WriteLine (LogState.Info' "rcv. 2: " + trimMsg [2]);  
Magic Number,Network,TcpServer,C:\repos\GoneUp_Temu\LoginServer\Network\TcpServer.cs,Client_MessageReceived,The following statement contains a magic number: Logger.WriteLine (LogState.Info' "rcv. 3: " + trimMsg [3]);  
Magic Number,Network,TcpServer,C:\repos\GoneUp_Temu\LoginServer\Network\TcpServer.cs,Client_MessageReceived,The following statement contains a magic number: switch (data) {  //LoginPacket  case (int)OpCode.LoginPacket:  	Logger.WriteLine (LogState.Info' "Login Try: " + trimMsg [2]);  	client.SendMessage (new ScsTextMessage (isLoginValid (trimMsg [2]' trimMsg [3])));  	break;  //RegisterPacket  case (int)OpCode.RegisterPacket:  	Logger.WriteLine (LogState.Info' "Register Try: " + trimMsg [2]);  	client.SendMessage (new ScsTextMessage (isRegisterValid (trimMsg [2]' trimMsg [3])));  	break;  default:  	break;  }  
Magic Number,Network,TcpServer,C:\repos\GoneUp_Temu\LoginServer\Network\TcpServer.cs,Client_MessageReceived,The following statement contains a magic number: switch (data) {  //LoginPacket  case (int)OpCode.LoginPacket:  	Logger.WriteLine (LogState.Info' "Login Try: " + trimMsg [2]);  	client.SendMessage (new ScsTextMessage (isLoginValid (trimMsg [2]' trimMsg [3])));  	break;  //RegisterPacket  case (int)OpCode.RegisterPacket:  	Logger.WriteLine (LogState.Info' "Register Try: " + trimMsg [2]);  	client.SendMessage (new ScsTextMessage (isRegisterValid (trimMsg [2]' trimMsg [3])));  	break;  default:  	break;  }  
Magic Number,Network,TcpServer,C:\repos\GoneUp_Temu\LoginServer\Network\TcpServer.cs,Client_MessageReceived,The following statement contains a magic number: switch (data) {  //LoginPacket  case (int)OpCode.LoginPacket:  	Logger.WriteLine (LogState.Info' "Login Try: " + trimMsg [2]);  	client.SendMessage (new ScsTextMessage (isLoginValid (trimMsg [2]' trimMsg [3])));  	break;  //RegisterPacket  case (int)OpCode.RegisterPacket:  	Logger.WriteLine (LogState.Info' "Register Try: " + trimMsg [2]);  	client.SendMessage (new ScsTextMessage (isRegisterValid (trimMsg [2]' trimMsg [3])));  	break;  default:  	break;  }  
Magic Number,Network,TcpServer,C:\repos\GoneUp_Temu\LoginServer\Network\TcpServer.cs,Client_MessageReceived,The following statement contains a magic number: switch (data) {  //LoginPacket  case (int)OpCode.LoginPacket:  	Logger.WriteLine (LogState.Info' "Login Try: " + trimMsg [2]);  	client.SendMessage (new ScsTextMessage (isLoginValid (trimMsg [2]' trimMsg [3])));  	break;  //RegisterPacket  case (int)OpCode.RegisterPacket:  	Logger.WriteLine (LogState.Info' "Register Try: " + trimMsg [2]);  	client.SendMessage (new ScsTextMessage (isRegisterValid (trimMsg [2]' trimMsg [3])));  	break;  default:  	break;  }  
Magic Number,Network,TcpServer,C:\repos\GoneUp_Temu\LoginServer\Network\TcpServer.cs,Client_MessageReceived,The following statement contains a magic number: switch (data) {  //LoginPacket  case (int)OpCode.LoginPacket:  	Logger.WriteLine (LogState.Info' "Login Try: " + trimMsg [2]);  	client.SendMessage (new ScsTextMessage (isLoginValid (trimMsg [2]' trimMsg [3])));  	break;  //RegisterPacket  case (int)OpCode.RegisterPacket:  	Logger.WriteLine (LogState.Info' "Register Try: " + trimMsg [2]);  	client.SendMessage (new ScsTextMessage (isRegisterValid (trimMsg [2]' trimMsg [3])));  	break;  default:  	break;  }  
Magic Number,Network,TcpServer,C:\repos\GoneUp_Temu\LoginServer\Network\TcpServer.cs,Client_MessageReceived,The following statement contains a magic number: switch (data) {  //LoginPacket  case (int)OpCode.LoginPacket:  	Logger.WriteLine (LogState.Info' "Login Try: " + trimMsg [2]);  	client.SendMessage (new ScsTextMessage (isLoginValid (trimMsg [2]' trimMsg [3])));  	break;  //RegisterPacket  case (int)OpCode.RegisterPacket:  	Logger.WriteLine (LogState.Info' "Register Try: " + trimMsg [2]);  	client.SendMessage (new ScsTextMessage (isRegisterValid (trimMsg [2]' trimMsg [3])));  	break;  default:  	break;  }  
Magic Number,Network,TcpServer,C:\repos\GoneUp_Temu\LoginServer\Network\TcpServer.cs,Client_MessageReceived,The following statement contains a magic number: Logger.WriteLine (LogState.Info' "Login Try: " + trimMsg [2]);  
Magic Number,Network,TcpServer,C:\repos\GoneUp_Temu\LoginServer\Network\TcpServer.cs,Client_MessageReceived,The following statement contains a magic number: client.SendMessage (new ScsTextMessage (isLoginValid (trimMsg [2]' trimMsg [3])));  
Magic Number,Network,TcpServer,C:\repos\GoneUp_Temu\LoginServer\Network\TcpServer.cs,Client_MessageReceived,The following statement contains a magic number: client.SendMessage (new ScsTextMessage (isLoginValid (trimMsg [2]' trimMsg [3])));  
Magic Number,Network,TcpServer,C:\repos\GoneUp_Temu\LoginServer\Network\TcpServer.cs,Client_MessageReceived,The following statement contains a magic number: Logger.WriteLine (LogState.Info' "Register Try: " + trimMsg [2]);  
Magic Number,Network,TcpServer,C:\repos\GoneUp_Temu\LoginServer\Network\TcpServer.cs,Client_MessageReceived,The following statement contains a magic number: client.SendMessage (new ScsTextMessage (isRegisterValid (trimMsg [2]' trimMsg [3])));  
Magic Number,Network,TcpServer,C:\repos\GoneUp_Temu\LoginServer\Network\TcpServer.cs,Client_MessageReceived,The following statement contains a magic number: client.SendMessage (new ScsTextMessage (isRegisterValid (trimMsg [2]' trimMsg [3])));  
Magic Number,Network,LoginServerConnection,C:\repos\GoneUp_Temu\LoginServer\Network\LoginServerConnection.cs,MainLoop,The following statement contains a magic number: while (ServerIsWork) {  	try {  		//Server Background Worker Do The Action Here!  		//some loop for acc checks or else... but not needed..  		//if (Functions.GetCurrentMilliseconds() - Data.DAO.DAOManager.LastSaveUts > 600000) // Backup Every 10 Min  		//{  		//    Data.DAO.DAOManager.LastSaveUts = Functions.GetCurrentMilliseconds();  		//    Data.DAO.DAOManager.SaveData();  		//}  	}  	catch (Exception ex) {  		Logger.WriteLine (LogState.Error' "MainLoop:\n" + ex);  	}  	Thread.Sleep (10);  	//Main Loop Check Timer  }  
Magic Number,Network,LoginServerConnection,C:\repos\GoneUp_Temu\LoginServer\Network\LoginServerConnection.cs,MainLoop,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,Network,LoginServerConnection,C:\repos\GoneUp_Temu\LoginServer\Network\LoginServerConnection.cs,ShowShutdownMessage,The following statement contains a magic number: Thread.Sleep (3000);  
Magic Number,DevTera,LoginServer,C:\repos\GoneUp_Temu\LoginServer\LoginServer.cs,RunServer,The following statement contains a magic number: Console.WriteLine ("---===== LoginServer OnLine in {0}"' (serverStartStopwatch.ElapsedMilliseconds / 1000.0).ToString ("0.00s"));  
