Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,Cyclomatic complexity of the method is 28
Complex Method,Tera.Data.Structures.Creature,Creature,C:\repos\GoneUp_Temu\Shared\Data\Structures\Creature\Creature.cs,Release,Cyclomatic complexity of the method is 8
Complex Method,Tera.Data.Structures.Objects,Projectile,C:\repos\GoneUp_Temu\Shared\Data\Structures\Objects\Projectile.cs,Projectile,Cyclomatic complexity of the method is 13
Complex Method,Tera.Data.Structures.Player,PlayerCraftStats,C:\repos\GoneUp_Temu\Shared\Data\Structures\Player\PlayerCraftStats.cs,ProgressCraftStat,Cyclomatic complexity of the method is 18
Complex Method,Tera.Data.Structures.World,MapInstance,C:\repos\GoneUp_Temu\Shared\Data\Structures\World\MapInstance.cs,Release,Cyclomatic complexity of the method is 13
Long Parameter List,Database_Manager.Database,DatabaseManager,C:\repos\GoneUp_Temu\Shared\DatabaseManager\Database\DatabaseManager.cs,setServerDetails,The method has 5 parameters.
Long Parameter List,Database_Manager.Managers.Database,DatabaseServer,C:\repos\GoneUp_Temu\Shared\DatabaseManager\Managers\Database\DatabaseServer.cs,DatabaseServer,The method has 5 parameters.
Long Parameter List,Tera.Data.Structures.Player,PlayerCraftStats,C:\repos\GoneUp_Temu\Shared\Data\Structures\Player\PlayerCraftStats.cs,PlayerCraftStats,The method has 14 parameters.
Long Parameter List,Tera.Data.Structures.World,Dialog,C:\repos\GoneUp_Temu\Shared\Data\Structures\World\Dialog.cs,Dialog,The method has 5 parameters.
Long Statement,Database_Manager.Database.Session_Details,TransactionQueryReactor,C:\repos\GoneUp_Temu\Shared\DatabaseManager\Database\Session_Details\TransactionQueryReactor.cs,Dispose,The length of the statement  "		throw new TransactionException ("The transaction needs to be completed by commit() or rollback() before you can dispose this item."); " is 133.
Long Statement,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadTask,The length of the statement  "	Logger.WriteLine (LogState.Info' "Data: {0'-26} {1'7} values in {2}s"' loader.Method.Name' readed' (stopwatch.ElapsedMilliseconds / 1000.0).ToString ("0.00")); " is 159.
Long Statement,Tera.Data.Structures.Creature,CreatureEffectsImpact,C:\repos\GoneUp_Temu\Shared\Data\Structures\Creature\CreatureEffectsImpact.cs,ResetChanges,The length of the statement  "		if (player.Attack != null && !player.Attack.IsFinished && player.Attack.Args.GetSkill (player).BaseId == 20100 && (player.PlayerData.Class == PlayerClass.Berserker || player.PlayerData.Class == PlayerClass.Lancer)) { " is 216.
Long Statement,Tera.Data.Structures.Geometry,Geom,C:\repos\GoneUp_Temu\Shared\Data\Structures\Geometry\Geom.cs,GetHeading,The length of the statement  "	return (short)(Math.Atan2 (toWorldPosition.Y - fromWorldPosition.Y' toWorldPosition.X - fromWorldPosition.X) * 32768 / Math.PI); " is 128.
Long Statement,Tera.Data.Structures.Geometry,Geom,C:\repos\GoneUp_Temu\Shared\Data\Structures\Geometry\Geom.cs,DistanceToLine,The length of the statement  "	return Math.Abs (((p0.Y - p1.Y) * point.X + (p1.X - p0.X) * point.Y + (p0.X * p1.Y - p1.X * p0.Y)) / (Math.Sqrt (dx * dx + dy * dy))); " is 134.
Long Statement,Tera.Data.Structures.Geometry,Polygon,C:\repos\GoneUp_Temu\Shared\Data\Structures\Geometry\Polygon.cs,Contains,The length of the statement  "		if ((((curPoint.Y <= point.Y) && (point.Y < lastPoint.Y)) || ((lastPoint.Y <= point.Y) && (point.Y < curPoint.Y))) && (point.X > (lastPoint.X - curPoint.X) * (point.Y - curPoint.Y) / (lastPoint.Y - curPoint.Y) + curPoint.X)) " is 224.
Long Statement,Tera.Data.Structures.World,WorldPosition,C:\repos\GoneUp_Temu\Shared\Data\Structures\World\WorldPosition.cs,GetHeadingToTarget,The length of the statement  "	return Geom.GetHeading (((float)((worldPosition.X - X) / DistanceTo (worldPosition)) * 45)' ((float)((worldPosition.Y - Y) / DistanceTo (worldPosition)) * 45)); " is 160.
Long Statement,Utils,Converter,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,HexStringToAscii,The length of the statement  "		sb.Append (Convert.ToString (Convert.ToChar (Int32.Parse (input.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber)))); " is 130.
Long Statement,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,HexToBytes,The length of the statement  "	return Enumerable.Range (0' hex.Length).Where (x => x % 2 == 0).Select (x => Convert.ToByte (hex.Substring (x' 2)' 16)).ToArray (); " is 131.
Complex Conditional,Tera.Data.Structures.Creature,CreatureEffectsImpact,C:\repos\GoneUp_Temu\Shared\Data\Structures\Creature\CreatureEffectsImpact.cs,ResetChanges,The conditional expression  "player.Attack != null && !player.Attack.IsFinished && player.Attack.Args.GetSkill (player).BaseId == 20100 && (player.PlayerData.Class == PlayerClass.Berserker || player.PlayerData.Class == PlayerClass.Lancer)"  is complex.
Complex Conditional,Tera.Data.Structures.Geometry,Polygon,C:\repos\GoneUp_Temu\Shared\Data\Structures\Geometry\Polygon.cs,Contains,The conditional expression  "(((curPoint.Y <= point.Y) && (point.Y < lastPoint.Y)) || ((lastPoint.Y <= point.Y) && (point.Y < curPoint.Y))) && (point.X > (lastPoint.X - curPoint.X) * (point.Y - curPoint.Y) / (lastPoint.Y - curPoint.Y) + curPoint.X)"  is complex.
Empty Catch Block,Database_Manager.Database,MsSQLClient,C:\repos\GoneUp_Temu\Shared\DatabaseManager\Database\MsSqlClient.cs,disconnect,The method has an empty catch block.
Empty Catch Block,Database_Manager.Database,MySqlClient,C:\repos\GoneUp_Temu\Shared\DatabaseManager\Database\MySqlClient.cs,disconnect,The method has an empty catch block.
Empty Catch Block,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadPlayerExperience,The method has an empty catch block.
Empty Catch Block,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadMounts,The method has an empty catch block.
Empty Catch Block,Tera.Data.Structures.Player,Player,C:\repos\GoneUp_Temu\Shared\Data\Structures\Player\Player.cs,Release,The method has an empty catch block.
Empty Catch Block,Tera.Data.Structures.Player,Player,C:\repos\GoneUp_Temu\Shared\Data\Structures\Player\Player.cs,Release,The method has an empty catch block.
Empty Catch Block,Tera.Data.Structures.World,ShoppingCart,C:\repos\GoneUp_Temu\Shared\Data\Structures\World\ShoppingCart.cs,GetBuyItemsPrice,The method has an empty catch block.
Empty Catch Block,Tera.Data.Structures.World,ShoppingCart,C:\repos\GoneUp_Temu\Shared\Data\Structures\World\ShoppingCart.cs,GetSellItemsPrice,The method has an empty catch block.
Empty Catch Block,Utils,DelayedAction,C:\repos\GoneUp_Temu\Shared\Utils\DelayedAction.cs,CheckActions,The method has an empty catch block.
Magic Number,Database_Manager.Database,DatabaseManager,C:\repos\GoneUp_Temu\Shared\DatabaseManager\Database\DatabaseManager.cs,createNewConnectionString,The following statement contains a magic number: if (this.type == DatabaseType.MySQL) {  	MySqlConnectionStringBuilder connectionString = new MySqlConnectionStringBuilder {  		Server = this.server.getHost ()'  		Port = this.server.getPort ()'  		UserID = this.server.getUsername ()'  		Password = this.server.getPassword ()'  		Database = this.server.getDatabaseName ()'  		MinimumPoolSize = this.maxPoolSize / 2'  		MaximumPoolSize = this.maxPoolSize'  		AllowZeroDateTime = true'  		ConvertZeroDateTime = true'  		DefaultCommandTimeout = 300'  		ConnectionTimeout = 10  	};  	this.setConnectionString (connectionString.ToString ());  }  else {  	SqlConnectionStringBuilder connectionString = new SqlConnectionStringBuilder {  		DataSource = this.server.getHost ()'  		//Port = this.server.getPort()'  		UserID = this.server.getUsername ()'  		Password = this.server.getPassword ()'  		InitialCatalog = this.server.getDatabaseName ()'  		MinPoolSize = (int)this.maxPoolSize / 2'  		MaxPoolSize = (int)this.maxPoolSize'  		//AllowZeroDateTime = true'  		//ConvertZeroDateTime = true'  		//DefaultCommandTimeout = 300'  		ConnectTimeout = 10'  		Pooling = true  	};  	this.setConnectionString (connectionString.ToString ());  }  
Magic Number,Database_Manager.Database,DatabaseManager,C:\repos\GoneUp_Temu\Shared\DatabaseManager\Database\DatabaseManager.cs,createNewConnectionString,The following statement contains a magic number: if (this.type == DatabaseType.MySQL) {  	MySqlConnectionStringBuilder connectionString = new MySqlConnectionStringBuilder {  		Server = this.server.getHost ()'  		Port = this.server.getPort ()'  		UserID = this.server.getUsername ()'  		Password = this.server.getPassword ()'  		Database = this.server.getDatabaseName ()'  		MinimumPoolSize = this.maxPoolSize / 2'  		MaximumPoolSize = this.maxPoolSize'  		AllowZeroDateTime = true'  		ConvertZeroDateTime = true'  		DefaultCommandTimeout = 300'  		ConnectionTimeout = 10  	};  	this.setConnectionString (connectionString.ToString ());  }  else {  	SqlConnectionStringBuilder connectionString = new SqlConnectionStringBuilder {  		DataSource = this.server.getHost ()'  		//Port = this.server.getPort()'  		UserID = this.server.getUsername ()'  		Password = this.server.getPassword ()'  		InitialCatalog = this.server.getDatabaseName ()'  		MinPoolSize = (int)this.maxPoolSize / 2'  		MaxPoolSize = (int)this.maxPoolSize'  		//AllowZeroDateTime = true'  		//ConvertZeroDateTime = true'  		//DefaultCommandTimeout = 300'  		ConnectTimeout = 10'  		Pooling = true  	};  	this.setConnectionString (connectionString.ToString ());  }  
Magic Number,Database_Manager.Database,DatabaseManager,C:\repos\GoneUp_Temu\Shared\DatabaseManager\Database\DatabaseManager.cs,createNewConnectionString,The following statement contains a magic number: if (this.type == DatabaseType.MySQL) {  	MySqlConnectionStringBuilder connectionString = new MySqlConnectionStringBuilder {  		Server = this.server.getHost ()'  		Port = this.server.getPort ()'  		UserID = this.server.getUsername ()'  		Password = this.server.getPassword ()'  		Database = this.server.getDatabaseName ()'  		MinimumPoolSize = this.maxPoolSize / 2'  		MaximumPoolSize = this.maxPoolSize'  		AllowZeroDateTime = true'  		ConvertZeroDateTime = true'  		DefaultCommandTimeout = 300'  		ConnectionTimeout = 10  	};  	this.setConnectionString (connectionString.ToString ());  }  else {  	SqlConnectionStringBuilder connectionString = new SqlConnectionStringBuilder {  		DataSource = this.server.getHost ()'  		//Port = this.server.getPort()'  		UserID = this.server.getUsername ()'  		Password = this.server.getPassword ()'  		InitialCatalog = this.server.getDatabaseName ()'  		MinPoolSize = (int)this.maxPoolSize / 2'  		MaxPoolSize = (int)this.maxPoolSize'  		//AllowZeroDateTime = true'  		//ConvertZeroDateTime = true'  		//DefaultCommandTimeout = 300'  		ConnectTimeout = 10'  		Pooling = true  	};  	this.setConnectionString (connectionString.ToString ());  }  
Magic Number,Database_Manager.Database,DatabaseManager,C:\repos\GoneUp_Temu\Shared\DatabaseManager\Database\DatabaseManager.cs,createNewConnectionString,The following statement contains a magic number: if (this.type == DatabaseType.MySQL) {  	MySqlConnectionStringBuilder connectionString = new MySqlConnectionStringBuilder {  		Server = this.server.getHost ()'  		Port = this.server.getPort ()'  		UserID = this.server.getUsername ()'  		Password = this.server.getPassword ()'  		Database = this.server.getDatabaseName ()'  		MinimumPoolSize = this.maxPoolSize / 2'  		MaximumPoolSize = this.maxPoolSize'  		AllowZeroDateTime = true'  		ConvertZeroDateTime = true'  		DefaultCommandTimeout = 300'  		ConnectionTimeout = 10  	};  	this.setConnectionString (connectionString.ToString ());  }  else {  	SqlConnectionStringBuilder connectionString = new SqlConnectionStringBuilder {  		DataSource = this.server.getHost ()'  		//Port = this.server.getPort()'  		UserID = this.server.getUsername ()'  		Password = this.server.getPassword ()'  		InitialCatalog = this.server.getDatabaseName ()'  		MinPoolSize = (int)this.maxPoolSize / 2'  		MaxPoolSize = (int)this.maxPoolSize'  		//AllowZeroDateTime = true'  		//ConvertZeroDateTime = true'  		//DefaultCommandTimeout = 300'  		ConnectTimeout = 10'  		Pooling = true  	};  	this.setConnectionString (connectionString.ToString ());  }  
Magic Number,Database_Manager.Database,DatabaseManager,C:\repos\GoneUp_Temu\Shared\DatabaseManager\Database\DatabaseManager.cs,createNewConnectionString,The following statement contains a magic number: if (this.type == DatabaseType.MySQL) {  	MySqlConnectionStringBuilder connectionString = new MySqlConnectionStringBuilder {  		Server = this.server.getHost ()'  		Port = this.server.getPort ()'  		UserID = this.server.getUsername ()'  		Password = this.server.getPassword ()'  		Database = this.server.getDatabaseName ()'  		MinimumPoolSize = this.maxPoolSize / 2'  		MaximumPoolSize = this.maxPoolSize'  		AllowZeroDateTime = true'  		ConvertZeroDateTime = true'  		DefaultCommandTimeout = 300'  		ConnectionTimeout = 10  	};  	this.setConnectionString (connectionString.ToString ());  }  else {  	SqlConnectionStringBuilder connectionString = new SqlConnectionStringBuilder {  		DataSource = this.server.getHost ()'  		//Port = this.server.getPort()'  		UserID = this.server.getUsername ()'  		Password = this.server.getPassword ()'  		InitialCatalog = this.server.getDatabaseName ()'  		MinPoolSize = (int)this.maxPoolSize / 2'  		MaxPoolSize = (int)this.maxPoolSize'  		//AllowZeroDateTime = true'  		//ConvertZeroDateTime = true'  		//DefaultCommandTimeout = 300'  		ConnectTimeout = 10'  		Pooling = true  	};  	this.setConnectionString (connectionString.ToString ());  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadTask,The following statement contains a magic number: Logger.WriteLine (LogState.Info' "Data: {0'-26} {1'7} values in {2}s"' loader.Method.Name' readed' (stopwatch.ElapsedMilliseconds / 1000.0).ToString ("0.00"));  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadMounts,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (mountsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i <= ds.Tables [0].Rows.Count; i++) {  		int _MountId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		string _Name = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		int _SkillId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [2]);  		int _SpeedModificator = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		if (!Mounts.ContainsKey (_SkillId)) {  			Mounts.Add (_SkillId' new Mount () {  				MountId = _MountId'  				Name = _Name'  				SkillId = _SkillId'  				SpeedModificator = _SpeedModificator'  			});  		}  	}  }  catch {  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadMounts,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (mountsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i <= ds.Tables [0].Rows.Count; i++) {  		int _MountId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		string _Name = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		int _SkillId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [2]);  		int _SpeedModificator = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		if (!Mounts.ContainsKey (_SkillId)) {  			Mounts.Add (_SkillId' new Mount () {  				MountId = _MountId'  				Name = _Name'  				SkillId = _SkillId'  				SpeedModificator = _SpeedModificator'  			});  		}  	}  }  catch {  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadMounts,The following statement contains a magic number: for (int i = 0; i <= ds.Tables [0].Rows.Count; i++) {  	int _MountId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	string _Name = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	int _SkillId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [2]);  	int _SpeedModificator = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	if (!Mounts.ContainsKey (_SkillId)) {  		Mounts.Add (_SkillId' new Mount () {  			MountId = _MountId'  			Name = _Name'  			SkillId = _SkillId'  			SpeedModificator = _SpeedModificator'  		});  	}  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadMounts,The following statement contains a magic number: for (int i = 0; i <= ds.Tables [0].Rows.Count; i++) {  	int _MountId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	string _Name = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	int _SkillId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [2]);  	int _SpeedModificator = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	if (!Mounts.ContainsKey (_SkillId)) {  		Mounts.Add (_SkillId' new Mount () {  			MountId = _MountId'  			Name = _Name'  			SkillId = _SkillId'  			SpeedModificator = _SpeedModificator'  		});  	}  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadRecipes,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (recipesFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		string _CraftStat = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [0]);  		byte _CriticalChancePercent = Convert.ToByte (ds.Tables [0].Rows [i].ItemArray [1]);  		var _CriticalResultItem = (ds.Tables [0].Rows [i].ItemArray [2]);  		int _Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		string _Name = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [4]);  		var _NeededItems = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		int _RecipeId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		short _ReqMax = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [7]);  		short _ReqMin = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [8]);  		var _ResultItem = (ds.Tables [0].Rows [i].ItemArray [9]);  		if (!Recipes.ContainsKey (_RecipeId)) {  			Recipes.Add (_RecipeId' new Recipe () {  				CraftStat = (CraftStat)Enum.Parse (typeof(CraftStat)' _CraftStat)'  				CriticalChancePercent = _CriticalChancePercent'  				//CriticalResultItem = KeyValuePair<int' int>'  				Level = _Level'  				Name = _Name'  				NeededItems =  {    				}'  				RecipeId = _RecipeId'  				ReqMax = _ReqMax'  				ReqMin = _ReqMin'  			//ResultItem = _ResultItem  			});  		}  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadRecipes,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (recipesFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		string _CraftStat = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [0]);  		byte _CriticalChancePercent = Convert.ToByte (ds.Tables [0].Rows [i].ItemArray [1]);  		var _CriticalResultItem = (ds.Tables [0].Rows [i].ItemArray [2]);  		int _Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		string _Name = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [4]);  		var _NeededItems = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		int _RecipeId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		short _ReqMax = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [7]);  		short _ReqMin = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [8]);  		var _ResultItem = (ds.Tables [0].Rows [i].ItemArray [9]);  		if (!Recipes.ContainsKey (_RecipeId)) {  			Recipes.Add (_RecipeId' new Recipe () {  				CraftStat = (CraftStat)Enum.Parse (typeof(CraftStat)' _CraftStat)'  				CriticalChancePercent = _CriticalChancePercent'  				//CriticalResultItem = KeyValuePair<int' int>'  				Level = _Level'  				Name = _Name'  				NeededItems =  {    				}'  				RecipeId = _RecipeId'  				ReqMax = _ReqMax'  				ReqMin = _ReqMin'  			//ResultItem = _ResultItem  			});  		}  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadRecipes,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (recipesFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		string _CraftStat = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [0]);  		byte _CriticalChancePercent = Convert.ToByte (ds.Tables [0].Rows [i].ItemArray [1]);  		var _CriticalResultItem = (ds.Tables [0].Rows [i].ItemArray [2]);  		int _Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		string _Name = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [4]);  		var _NeededItems = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		int _RecipeId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		short _ReqMax = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [7]);  		short _ReqMin = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [8]);  		var _ResultItem = (ds.Tables [0].Rows [i].ItemArray [9]);  		if (!Recipes.ContainsKey (_RecipeId)) {  			Recipes.Add (_RecipeId' new Recipe () {  				CraftStat = (CraftStat)Enum.Parse (typeof(CraftStat)' _CraftStat)'  				CriticalChancePercent = _CriticalChancePercent'  				//CriticalResultItem = KeyValuePair<int' int>'  				Level = _Level'  				Name = _Name'  				NeededItems =  {    				}'  				RecipeId = _RecipeId'  				ReqMax = _ReqMax'  				ReqMin = _ReqMin'  			//ResultItem = _ResultItem  			});  		}  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadRecipes,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (recipesFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		string _CraftStat = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [0]);  		byte _CriticalChancePercent = Convert.ToByte (ds.Tables [0].Rows [i].ItemArray [1]);  		var _CriticalResultItem = (ds.Tables [0].Rows [i].ItemArray [2]);  		int _Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		string _Name = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [4]);  		var _NeededItems = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		int _RecipeId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		short _ReqMax = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [7]);  		short _ReqMin = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [8]);  		var _ResultItem = (ds.Tables [0].Rows [i].ItemArray [9]);  		if (!Recipes.ContainsKey (_RecipeId)) {  			Recipes.Add (_RecipeId' new Recipe () {  				CraftStat = (CraftStat)Enum.Parse (typeof(CraftStat)' _CraftStat)'  				CriticalChancePercent = _CriticalChancePercent'  				//CriticalResultItem = KeyValuePair<int' int>'  				Level = _Level'  				Name = _Name'  				NeededItems =  {    				}'  				RecipeId = _RecipeId'  				ReqMax = _ReqMax'  				ReqMin = _ReqMin'  			//ResultItem = _ResultItem  			});  		}  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadRecipes,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (recipesFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		string _CraftStat = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [0]);  		byte _CriticalChancePercent = Convert.ToByte (ds.Tables [0].Rows [i].ItemArray [1]);  		var _CriticalResultItem = (ds.Tables [0].Rows [i].ItemArray [2]);  		int _Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		string _Name = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [4]);  		var _NeededItems = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		int _RecipeId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		short _ReqMax = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [7]);  		short _ReqMin = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [8]);  		var _ResultItem = (ds.Tables [0].Rows [i].ItemArray [9]);  		if (!Recipes.ContainsKey (_RecipeId)) {  			Recipes.Add (_RecipeId' new Recipe () {  				CraftStat = (CraftStat)Enum.Parse (typeof(CraftStat)' _CraftStat)'  				CriticalChancePercent = _CriticalChancePercent'  				//CriticalResultItem = KeyValuePair<int' int>'  				Level = _Level'  				Name = _Name'  				NeededItems =  {    				}'  				RecipeId = _RecipeId'  				ReqMax = _ReqMax'  				ReqMin = _ReqMin'  			//ResultItem = _ResultItem  			});  		}  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadRecipes,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (recipesFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		string _CraftStat = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [0]);  		byte _CriticalChancePercent = Convert.ToByte (ds.Tables [0].Rows [i].ItemArray [1]);  		var _CriticalResultItem = (ds.Tables [0].Rows [i].ItemArray [2]);  		int _Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		string _Name = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [4]);  		var _NeededItems = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		int _RecipeId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		short _ReqMax = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [7]);  		short _ReqMin = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [8]);  		var _ResultItem = (ds.Tables [0].Rows [i].ItemArray [9]);  		if (!Recipes.ContainsKey (_RecipeId)) {  			Recipes.Add (_RecipeId' new Recipe () {  				CraftStat = (CraftStat)Enum.Parse (typeof(CraftStat)' _CraftStat)'  				CriticalChancePercent = _CriticalChancePercent'  				//CriticalResultItem = KeyValuePair<int' int>'  				Level = _Level'  				Name = _Name'  				NeededItems =  {    				}'  				RecipeId = _RecipeId'  				ReqMax = _ReqMax'  				ReqMin = _ReqMin'  			//ResultItem = _ResultItem  			});  		}  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadRecipes,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (recipesFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		string _CraftStat = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [0]);  		byte _CriticalChancePercent = Convert.ToByte (ds.Tables [0].Rows [i].ItemArray [1]);  		var _CriticalResultItem = (ds.Tables [0].Rows [i].ItemArray [2]);  		int _Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		string _Name = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [4]);  		var _NeededItems = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		int _RecipeId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		short _ReqMax = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [7]);  		short _ReqMin = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [8]);  		var _ResultItem = (ds.Tables [0].Rows [i].ItemArray [9]);  		if (!Recipes.ContainsKey (_RecipeId)) {  			Recipes.Add (_RecipeId' new Recipe () {  				CraftStat = (CraftStat)Enum.Parse (typeof(CraftStat)' _CraftStat)'  				CriticalChancePercent = _CriticalChancePercent'  				//CriticalResultItem = KeyValuePair<int' int>'  				Level = _Level'  				Name = _Name'  				NeededItems =  {    				}'  				RecipeId = _RecipeId'  				ReqMax = _ReqMax'  				ReqMin = _ReqMin'  			//ResultItem = _ResultItem  			});  		}  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadRecipes,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (recipesFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		string _CraftStat = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [0]);  		byte _CriticalChancePercent = Convert.ToByte (ds.Tables [0].Rows [i].ItemArray [1]);  		var _CriticalResultItem = (ds.Tables [0].Rows [i].ItemArray [2]);  		int _Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		string _Name = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [4]);  		var _NeededItems = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		int _RecipeId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		short _ReqMax = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [7]);  		short _ReqMin = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [8]);  		var _ResultItem = (ds.Tables [0].Rows [i].ItemArray [9]);  		if (!Recipes.ContainsKey (_RecipeId)) {  			Recipes.Add (_RecipeId' new Recipe () {  				CraftStat = (CraftStat)Enum.Parse (typeof(CraftStat)' _CraftStat)'  				CriticalChancePercent = _CriticalChancePercent'  				//CriticalResultItem = KeyValuePair<int' int>'  				Level = _Level'  				Name = _Name'  				NeededItems =  {    				}'  				RecipeId = _RecipeId'  				ReqMax = _ReqMax'  				ReqMin = _ReqMin'  			//ResultItem = _ResultItem  			});  		}  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadRecipes,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	string _CraftStat = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [0]);  	byte _CriticalChancePercent = Convert.ToByte (ds.Tables [0].Rows [i].ItemArray [1]);  	var _CriticalResultItem = (ds.Tables [0].Rows [i].ItemArray [2]);  	int _Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	string _Name = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [4]);  	var _NeededItems = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	int _RecipeId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	short _ReqMax = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [7]);  	short _ReqMin = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [8]);  	var _ResultItem = (ds.Tables [0].Rows [i].ItemArray [9]);  	if (!Recipes.ContainsKey (_RecipeId)) {  		Recipes.Add (_RecipeId' new Recipe () {  			CraftStat = (CraftStat)Enum.Parse (typeof(CraftStat)' _CraftStat)'  			CriticalChancePercent = _CriticalChancePercent'  			//CriticalResultItem = KeyValuePair<int' int>'  			Level = _Level'  			Name = _Name'  			NeededItems =  {    			}'  			RecipeId = _RecipeId'  			ReqMax = _ReqMax'  			ReqMin = _ReqMin'  		//ResultItem = _ResultItem  		});  	}  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadRecipes,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	string _CraftStat = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [0]);  	byte _CriticalChancePercent = Convert.ToByte (ds.Tables [0].Rows [i].ItemArray [1]);  	var _CriticalResultItem = (ds.Tables [0].Rows [i].ItemArray [2]);  	int _Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	string _Name = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [4]);  	var _NeededItems = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	int _RecipeId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	short _ReqMax = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [7]);  	short _ReqMin = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [8]);  	var _ResultItem = (ds.Tables [0].Rows [i].ItemArray [9]);  	if (!Recipes.ContainsKey (_RecipeId)) {  		Recipes.Add (_RecipeId' new Recipe () {  			CraftStat = (CraftStat)Enum.Parse (typeof(CraftStat)' _CraftStat)'  			CriticalChancePercent = _CriticalChancePercent'  			//CriticalResultItem = KeyValuePair<int' int>'  			Level = _Level'  			Name = _Name'  			NeededItems =  {    			}'  			RecipeId = _RecipeId'  			ReqMax = _ReqMax'  			ReqMin = _ReqMin'  		//ResultItem = _ResultItem  		});  	}  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadRecipes,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	string _CraftStat = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [0]);  	byte _CriticalChancePercent = Convert.ToByte (ds.Tables [0].Rows [i].ItemArray [1]);  	var _CriticalResultItem = (ds.Tables [0].Rows [i].ItemArray [2]);  	int _Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	string _Name = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [4]);  	var _NeededItems = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	int _RecipeId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	short _ReqMax = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [7]);  	short _ReqMin = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [8]);  	var _ResultItem = (ds.Tables [0].Rows [i].ItemArray [9]);  	if (!Recipes.ContainsKey (_RecipeId)) {  		Recipes.Add (_RecipeId' new Recipe () {  			CraftStat = (CraftStat)Enum.Parse (typeof(CraftStat)' _CraftStat)'  			CriticalChancePercent = _CriticalChancePercent'  			//CriticalResultItem = KeyValuePair<int' int>'  			Level = _Level'  			Name = _Name'  			NeededItems =  {    			}'  			RecipeId = _RecipeId'  			ReqMax = _ReqMax'  			ReqMin = _ReqMin'  		//ResultItem = _ResultItem  		});  	}  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadRecipes,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	string _CraftStat = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [0]);  	byte _CriticalChancePercent = Convert.ToByte (ds.Tables [0].Rows [i].ItemArray [1]);  	var _CriticalResultItem = (ds.Tables [0].Rows [i].ItemArray [2]);  	int _Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	string _Name = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [4]);  	var _NeededItems = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	int _RecipeId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	short _ReqMax = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [7]);  	short _ReqMin = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [8]);  	var _ResultItem = (ds.Tables [0].Rows [i].ItemArray [9]);  	if (!Recipes.ContainsKey (_RecipeId)) {  		Recipes.Add (_RecipeId' new Recipe () {  			CraftStat = (CraftStat)Enum.Parse (typeof(CraftStat)' _CraftStat)'  			CriticalChancePercent = _CriticalChancePercent'  			//CriticalResultItem = KeyValuePair<int' int>'  			Level = _Level'  			Name = _Name'  			NeededItems =  {    			}'  			RecipeId = _RecipeId'  			ReqMax = _ReqMax'  			ReqMin = _ReqMin'  		//ResultItem = _ResultItem  		});  	}  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadRecipes,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	string _CraftStat = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [0]);  	byte _CriticalChancePercent = Convert.ToByte (ds.Tables [0].Rows [i].ItemArray [1]);  	var _CriticalResultItem = (ds.Tables [0].Rows [i].ItemArray [2]);  	int _Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	string _Name = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [4]);  	var _NeededItems = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	int _RecipeId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	short _ReqMax = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [7]);  	short _ReqMin = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [8]);  	var _ResultItem = (ds.Tables [0].Rows [i].ItemArray [9]);  	if (!Recipes.ContainsKey (_RecipeId)) {  		Recipes.Add (_RecipeId' new Recipe () {  			CraftStat = (CraftStat)Enum.Parse (typeof(CraftStat)' _CraftStat)'  			CriticalChancePercent = _CriticalChancePercent'  			//CriticalResultItem = KeyValuePair<int' int>'  			Level = _Level'  			Name = _Name'  			NeededItems =  {    			}'  			RecipeId = _RecipeId'  			ReqMax = _ReqMax'  			ReqMin = _ReqMin'  		//ResultItem = _ResultItem  		});  	}  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadRecipes,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	string _CraftStat = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [0]);  	byte _CriticalChancePercent = Convert.ToByte (ds.Tables [0].Rows [i].ItemArray [1]);  	var _CriticalResultItem = (ds.Tables [0].Rows [i].ItemArray [2]);  	int _Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	string _Name = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [4]);  	var _NeededItems = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	int _RecipeId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	short _ReqMax = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [7]);  	short _ReqMin = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [8]);  	var _ResultItem = (ds.Tables [0].Rows [i].ItemArray [9]);  	if (!Recipes.ContainsKey (_RecipeId)) {  		Recipes.Add (_RecipeId' new Recipe () {  			CraftStat = (CraftStat)Enum.Parse (typeof(CraftStat)' _CraftStat)'  			CriticalChancePercent = _CriticalChancePercent'  			//CriticalResultItem = KeyValuePair<int' int>'  			Level = _Level'  			Name = _Name'  			NeededItems =  {    			}'  			RecipeId = _RecipeId'  			ReqMax = _ReqMax'  			ReqMin = _ReqMin'  		//ResultItem = _ResultItem  		});  	}  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadRecipes,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	string _CraftStat = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [0]);  	byte _CriticalChancePercent = Convert.ToByte (ds.Tables [0].Rows [i].ItemArray [1]);  	var _CriticalResultItem = (ds.Tables [0].Rows [i].ItemArray [2]);  	int _Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	string _Name = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [4]);  	var _NeededItems = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	int _RecipeId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	short _ReqMax = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [7]);  	short _ReqMin = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [8]);  	var _ResultItem = (ds.Tables [0].Rows [i].ItemArray [9]);  	if (!Recipes.ContainsKey (_RecipeId)) {  		Recipes.Add (_RecipeId' new Recipe () {  			CraftStat = (CraftStat)Enum.Parse (typeof(CraftStat)' _CraftStat)'  			CriticalChancePercent = _CriticalChancePercent'  			//CriticalResultItem = KeyValuePair<int' int>'  			Level = _Level'  			Name = _Name'  			NeededItems =  {    			}'  			RecipeId = _RecipeId'  			ReqMax = _ReqMax'  			ReqMin = _ReqMin'  		//ResultItem = _ResultItem  		});  	}  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadRecipes,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	string _CraftStat = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [0]);  	byte _CriticalChancePercent = Convert.ToByte (ds.Tables [0].Rows [i].ItemArray [1]);  	var _CriticalResultItem = (ds.Tables [0].Rows [i].ItemArray [2]);  	int _Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	string _Name = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [4]);  	var _NeededItems = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	int _RecipeId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	short _ReqMax = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [7]);  	short _ReqMin = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [8]);  	var _ResultItem = (ds.Tables [0].Rows [i].ItemArray [9]);  	if (!Recipes.ContainsKey (_RecipeId)) {  		Recipes.Add (_RecipeId' new Recipe () {  			CraftStat = (CraftStat)Enum.Parse (typeof(CraftStat)' _CraftStat)'  			CriticalChancePercent = _CriticalChancePercent'  			//CriticalResultItem = KeyValuePair<int' int>'  			Level = _Level'  			Name = _Name'  			NeededItems =  {    			}'  			RecipeId = _RecipeId'  			ReqMax = _ReqMax'  			ReqMin = _ReqMin'  		//ResultItem = _ResultItem  		});  	}  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (statsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		CreatureBaseStats tmpStats = new CreatureBaseStats ();  		tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  		tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  		tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  		tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  		tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  		tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  		tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  		tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  		tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  		tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  		tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  		tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  		tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  		tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  		tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  		tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  		tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  		tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  		tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  		tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  		tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  		tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  		switch (tmpClass) {  		case "Warrior":  			tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  			break;  		case "Lancer":  			tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  			break;  		case "Slayer":  			tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  			break;  		case "Berserker":  			tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  			break;  		case "Sorcerer":  			tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  			break;  		case "Archer":  			tmpStats.PlayerClass = Enums.PlayerClass.Archer;  			break;  		case "Priest":  			tmpStats.PlayerClass = Enums.PlayerClass.Priest;  			break;  		case "Mystic":  			tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  			break;  		default:  			throw new Exception ("Unk Class");  		}  		Stats.Add (tmpStats);  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (statsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		CreatureBaseStats tmpStats = new CreatureBaseStats ();  		tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  		tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  		tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  		tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  		tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  		tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  		tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  		tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  		tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  		tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  		tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  		tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  		tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  		tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  		tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  		tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  		tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  		tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  		tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  		tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  		tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  		tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  		switch (tmpClass) {  		case "Warrior":  			tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  			break;  		case "Lancer":  			tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  			break;  		case "Slayer":  			tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  			break;  		case "Berserker":  			tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  			break;  		case "Sorcerer":  			tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  			break;  		case "Archer":  			tmpStats.PlayerClass = Enums.PlayerClass.Archer;  			break;  		case "Priest":  			tmpStats.PlayerClass = Enums.PlayerClass.Priest;  			break;  		case "Mystic":  			tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  			break;  		default:  			throw new Exception ("Unk Class");  		}  		Stats.Add (tmpStats);  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (statsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		CreatureBaseStats tmpStats = new CreatureBaseStats ();  		tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  		tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  		tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  		tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  		tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  		tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  		tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  		tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  		tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  		tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  		tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  		tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  		tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  		tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  		tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  		tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  		tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  		tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  		tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  		tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  		tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  		tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  		switch (tmpClass) {  		case "Warrior":  			tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  			break;  		case "Lancer":  			tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  			break;  		case "Slayer":  			tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  			break;  		case "Berserker":  			tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  			break;  		case "Sorcerer":  			tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  			break;  		case "Archer":  			tmpStats.PlayerClass = Enums.PlayerClass.Archer;  			break;  		case "Priest":  			tmpStats.PlayerClass = Enums.PlayerClass.Priest;  			break;  		case "Mystic":  			tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  			break;  		default:  			throw new Exception ("Unk Class");  		}  		Stats.Add (tmpStats);  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (statsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		CreatureBaseStats tmpStats = new CreatureBaseStats ();  		tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  		tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  		tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  		tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  		tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  		tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  		tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  		tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  		tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  		tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  		tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  		tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  		tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  		tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  		tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  		tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  		tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  		tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  		tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  		tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  		tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  		tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  		switch (tmpClass) {  		case "Warrior":  			tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  			break;  		case "Lancer":  			tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  			break;  		case "Slayer":  			tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  			break;  		case "Berserker":  			tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  			break;  		case "Sorcerer":  			tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  			break;  		case "Archer":  			tmpStats.PlayerClass = Enums.PlayerClass.Archer;  			break;  		case "Priest":  			tmpStats.PlayerClass = Enums.PlayerClass.Priest;  			break;  		case "Mystic":  			tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  			break;  		default:  			throw new Exception ("Unk Class");  		}  		Stats.Add (tmpStats);  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (statsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		CreatureBaseStats tmpStats = new CreatureBaseStats ();  		tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  		tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  		tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  		tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  		tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  		tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  		tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  		tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  		tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  		tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  		tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  		tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  		tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  		tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  		tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  		tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  		tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  		tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  		tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  		tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  		tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  		tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  		switch (tmpClass) {  		case "Warrior":  			tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  			break;  		case "Lancer":  			tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  			break;  		case "Slayer":  			tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  			break;  		case "Berserker":  			tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  			break;  		case "Sorcerer":  			tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  			break;  		case "Archer":  			tmpStats.PlayerClass = Enums.PlayerClass.Archer;  			break;  		case "Priest":  			tmpStats.PlayerClass = Enums.PlayerClass.Priest;  			break;  		case "Mystic":  			tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  			break;  		default:  			throw new Exception ("Unk Class");  		}  		Stats.Add (tmpStats);  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (statsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		CreatureBaseStats tmpStats = new CreatureBaseStats ();  		tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  		tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  		tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  		tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  		tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  		tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  		tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  		tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  		tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  		tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  		tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  		tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  		tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  		tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  		tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  		tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  		tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  		tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  		tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  		tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  		tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  		tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  		switch (tmpClass) {  		case "Warrior":  			tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  			break;  		case "Lancer":  			tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  			break;  		case "Slayer":  			tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  			break;  		case "Berserker":  			tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  			break;  		case "Sorcerer":  			tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  			break;  		case "Archer":  			tmpStats.PlayerClass = Enums.PlayerClass.Archer;  			break;  		case "Priest":  			tmpStats.PlayerClass = Enums.PlayerClass.Priest;  			break;  		case "Mystic":  			tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  			break;  		default:  			throw new Exception ("Unk Class");  		}  		Stats.Add (tmpStats);  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (statsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		CreatureBaseStats tmpStats = new CreatureBaseStats ();  		tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  		tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  		tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  		tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  		tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  		tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  		tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  		tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  		tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  		tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  		tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  		tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  		tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  		tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  		tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  		tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  		tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  		tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  		tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  		tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  		tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  		tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  		switch (tmpClass) {  		case "Warrior":  			tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  			break;  		case "Lancer":  			tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  			break;  		case "Slayer":  			tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  			break;  		case "Berserker":  			tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  			break;  		case "Sorcerer":  			tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  			break;  		case "Archer":  			tmpStats.PlayerClass = Enums.PlayerClass.Archer;  			break;  		case "Priest":  			tmpStats.PlayerClass = Enums.PlayerClass.Priest;  			break;  		case "Mystic":  			tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  			break;  		default:  			throw new Exception ("Unk Class");  		}  		Stats.Add (tmpStats);  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (statsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		CreatureBaseStats tmpStats = new CreatureBaseStats ();  		tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  		tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  		tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  		tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  		tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  		tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  		tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  		tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  		tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  		tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  		tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  		tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  		tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  		tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  		tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  		tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  		tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  		tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  		tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  		tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  		tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  		tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  		switch (tmpClass) {  		case "Warrior":  			tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  			break;  		case "Lancer":  			tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  			break;  		case "Slayer":  			tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  			break;  		case "Berserker":  			tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  			break;  		case "Sorcerer":  			tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  			break;  		case "Archer":  			tmpStats.PlayerClass = Enums.PlayerClass.Archer;  			break;  		case "Priest":  			tmpStats.PlayerClass = Enums.PlayerClass.Priest;  			break;  		case "Mystic":  			tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  			break;  		default:  			throw new Exception ("Unk Class");  		}  		Stats.Add (tmpStats);  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (statsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		CreatureBaseStats tmpStats = new CreatureBaseStats ();  		tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  		tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  		tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  		tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  		tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  		tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  		tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  		tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  		tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  		tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  		tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  		tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  		tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  		tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  		tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  		tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  		tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  		tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  		tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  		tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  		tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  		tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  		switch (tmpClass) {  		case "Warrior":  			tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  			break;  		case "Lancer":  			tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  			break;  		case "Slayer":  			tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  			break;  		case "Berserker":  			tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  			break;  		case "Sorcerer":  			tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  			break;  		case "Archer":  			tmpStats.PlayerClass = Enums.PlayerClass.Archer;  			break;  		case "Priest":  			tmpStats.PlayerClass = Enums.PlayerClass.Priest;  			break;  		case "Mystic":  			tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  			break;  		default:  			throw new Exception ("Unk Class");  		}  		Stats.Add (tmpStats);  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (statsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		CreatureBaseStats tmpStats = new CreatureBaseStats ();  		tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  		tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  		tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  		tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  		tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  		tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  		tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  		tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  		tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  		tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  		tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  		tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  		tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  		tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  		tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  		tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  		tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  		tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  		tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  		tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  		tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  		tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  		switch (tmpClass) {  		case "Warrior":  			tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  			break;  		case "Lancer":  			tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  			break;  		case "Slayer":  			tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  			break;  		case "Berserker":  			tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  			break;  		case "Sorcerer":  			tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  			break;  		case "Archer":  			tmpStats.PlayerClass = Enums.PlayerClass.Archer;  			break;  		case "Priest":  			tmpStats.PlayerClass = Enums.PlayerClass.Priest;  			break;  		case "Mystic":  			tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  			break;  		default:  			throw new Exception ("Unk Class");  		}  		Stats.Add (tmpStats);  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (statsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		CreatureBaseStats tmpStats = new CreatureBaseStats ();  		tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  		tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  		tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  		tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  		tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  		tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  		tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  		tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  		tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  		tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  		tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  		tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  		tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  		tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  		tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  		tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  		tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  		tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  		tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  		tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  		tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  		tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  		switch (tmpClass) {  		case "Warrior":  			tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  			break;  		case "Lancer":  			tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  			break;  		case "Slayer":  			tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  			break;  		case "Berserker":  			tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  			break;  		case "Sorcerer":  			tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  			break;  		case "Archer":  			tmpStats.PlayerClass = Enums.PlayerClass.Archer;  			break;  		case "Priest":  			tmpStats.PlayerClass = Enums.PlayerClass.Priest;  			break;  		case "Mystic":  			tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  			break;  		default:  			throw new Exception ("Unk Class");  		}  		Stats.Add (tmpStats);  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (statsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		CreatureBaseStats tmpStats = new CreatureBaseStats ();  		tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  		tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  		tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  		tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  		tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  		tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  		tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  		tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  		tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  		tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  		tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  		tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  		tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  		tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  		tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  		tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  		tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  		tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  		tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  		tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  		tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  		tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  		switch (tmpClass) {  		case "Warrior":  			tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  			break;  		case "Lancer":  			tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  			break;  		case "Slayer":  			tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  			break;  		case "Berserker":  			tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  			break;  		case "Sorcerer":  			tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  			break;  		case "Archer":  			tmpStats.PlayerClass = Enums.PlayerClass.Archer;  			break;  		case "Priest":  			tmpStats.PlayerClass = Enums.PlayerClass.Priest;  			break;  		case "Mystic":  			tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  			break;  		default:  			throw new Exception ("Unk Class");  		}  		Stats.Add (tmpStats);  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (statsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		CreatureBaseStats tmpStats = new CreatureBaseStats ();  		tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  		tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  		tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  		tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  		tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  		tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  		tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  		tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  		tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  		tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  		tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  		tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  		tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  		tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  		tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  		tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  		tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  		tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  		tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  		tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  		tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  		tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  		switch (tmpClass) {  		case "Warrior":  			tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  			break;  		case "Lancer":  			tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  			break;  		case "Slayer":  			tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  			break;  		case "Berserker":  			tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  			break;  		case "Sorcerer":  			tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  			break;  		case "Archer":  			tmpStats.PlayerClass = Enums.PlayerClass.Archer;  			break;  		case "Priest":  			tmpStats.PlayerClass = Enums.PlayerClass.Priest;  			break;  		case "Mystic":  			tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  			break;  		default:  			throw new Exception ("Unk Class");  		}  		Stats.Add (tmpStats);  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (statsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		CreatureBaseStats tmpStats = new CreatureBaseStats ();  		tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  		tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  		tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  		tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  		tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  		tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  		tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  		tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  		tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  		tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  		tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  		tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  		tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  		tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  		tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  		tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  		tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  		tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  		tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  		tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  		tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  		tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  		switch (tmpClass) {  		case "Warrior":  			tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  			break;  		case "Lancer":  			tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  			break;  		case "Slayer":  			tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  			break;  		case "Berserker":  			tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  			break;  		case "Sorcerer":  			tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  			break;  		case "Archer":  			tmpStats.PlayerClass = Enums.PlayerClass.Archer;  			break;  		case "Priest":  			tmpStats.PlayerClass = Enums.PlayerClass.Priest;  			break;  		case "Mystic":  			tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  			break;  		default:  			throw new Exception ("Unk Class");  		}  		Stats.Add (tmpStats);  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (statsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		CreatureBaseStats tmpStats = new CreatureBaseStats ();  		tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  		tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  		tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  		tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  		tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  		tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  		tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  		tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  		tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  		tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  		tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  		tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  		tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  		tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  		tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  		tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  		tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  		tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  		tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  		tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  		tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  		tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  		switch (tmpClass) {  		case "Warrior":  			tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  			break;  		case "Lancer":  			tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  			break;  		case "Slayer":  			tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  			break;  		case "Berserker":  			tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  			break;  		case "Sorcerer":  			tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  			break;  		case "Archer":  			tmpStats.PlayerClass = Enums.PlayerClass.Archer;  			break;  		case "Priest":  			tmpStats.PlayerClass = Enums.PlayerClass.Priest;  			break;  		case "Mystic":  			tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  			break;  		default:  			throw new Exception ("Unk Class");  		}  		Stats.Add (tmpStats);  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (statsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		CreatureBaseStats tmpStats = new CreatureBaseStats ();  		tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  		tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  		tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  		tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  		tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  		tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  		tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  		tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  		tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  		tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  		tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  		tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  		tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  		tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  		tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  		tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  		tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  		tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  		tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  		tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  		tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  		tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  		switch (tmpClass) {  		case "Warrior":  			tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  			break;  		case "Lancer":  			tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  			break;  		case "Slayer":  			tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  			break;  		case "Berserker":  			tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  			break;  		case "Sorcerer":  			tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  			break;  		case "Archer":  			tmpStats.PlayerClass = Enums.PlayerClass.Archer;  			break;  		case "Priest":  			tmpStats.PlayerClass = Enums.PlayerClass.Priest;  			break;  		case "Mystic":  			tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  			break;  		default:  			throw new Exception ("Unk Class");  		}  		Stats.Add (tmpStats);  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (statsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		CreatureBaseStats tmpStats = new CreatureBaseStats ();  		tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  		tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  		tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  		tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  		tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  		tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  		tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  		tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  		tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  		tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  		tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  		tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  		tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  		tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  		tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  		tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  		tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  		tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  		tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  		tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  		tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  		tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  		switch (tmpClass) {  		case "Warrior":  			tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  			break;  		case "Lancer":  			tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  			break;  		case "Slayer":  			tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  			break;  		case "Berserker":  			tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  			break;  		case "Sorcerer":  			tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  			break;  		case "Archer":  			tmpStats.PlayerClass = Enums.PlayerClass.Archer;  			break;  		case "Priest":  			tmpStats.PlayerClass = Enums.PlayerClass.Priest;  			break;  		case "Mystic":  			tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  			break;  		default:  			throw new Exception ("Unk Class");  		}  		Stats.Add (tmpStats);  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (statsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		CreatureBaseStats tmpStats = new CreatureBaseStats ();  		tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  		tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  		tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  		tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  		tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  		tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  		tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  		tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  		tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  		tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  		tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  		tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  		tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  		tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  		tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  		tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  		tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  		tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  		tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  		tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  		tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  		tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  		switch (tmpClass) {  		case "Warrior":  			tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  			break;  		case "Lancer":  			tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  			break;  		case "Slayer":  			tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  			break;  		case "Berserker":  			tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  			break;  		case "Sorcerer":  			tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  			break;  		case "Archer":  			tmpStats.PlayerClass = Enums.PlayerClass.Archer;  			break;  		case "Priest":  			tmpStats.PlayerClass = Enums.PlayerClass.Priest;  			break;  		case "Mystic":  			tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  			break;  		default:  			throw new Exception ("Unk Class");  		}  		Stats.Add (tmpStats);  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (statsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		CreatureBaseStats tmpStats = new CreatureBaseStats ();  		tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  		tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  		tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  		tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  		tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  		tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  		tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  		tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  		tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  		tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  		tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  		tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  		tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  		tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  		tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  		tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  		tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  		tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  		tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  		tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  		tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  		tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  		switch (tmpClass) {  		case "Warrior":  			tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  			break;  		case "Lancer":  			tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  			break;  		case "Slayer":  			tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  			break;  		case "Berserker":  			tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  			break;  		case "Sorcerer":  			tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  			break;  		case "Archer":  			tmpStats.PlayerClass = Enums.PlayerClass.Archer;  			break;  		case "Priest":  			tmpStats.PlayerClass = Enums.PlayerClass.Priest;  			break;  		case "Mystic":  			tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  			break;  		default:  			throw new Exception ("Unk Class");  		}  		Stats.Add (tmpStats);  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (statsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		CreatureBaseStats tmpStats = new CreatureBaseStats ();  		tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  		tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  		tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  		tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  		tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  		tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  		tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  		tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  		tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  		tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  		tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  		tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  		tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  		tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  		tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  		tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  		tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  		tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  		tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  		tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  		tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  		tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  		switch (tmpClass) {  		case "Warrior":  			tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  			break;  		case "Lancer":  			tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  			break;  		case "Slayer":  			tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  			break;  		case "Berserker":  			tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  			break;  		case "Sorcerer":  			tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  			break;  		case "Archer":  			tmpStats.PlayerClass = Enums.PlayerClass.Archer;  			break;  		case "Priest":  			tmpStats.PlayerClass = Enums.PlayerClass.Priest;  			break;  		case "Mystic":  			tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  			break;  		default:  			throw new Exception ("Unk Class");  		}  		Stats.Add (tmpStats);  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (statsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		CreatureBaseStats tmpStats = new CreatureBaseStats ();  		tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  		tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  		tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  		tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  		tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  		tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  		tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  		tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  		tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  		tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  		tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  		tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  		tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  		tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  		tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  		tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  		tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  		tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  		tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  		tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  		tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  		tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  		switch (tmpClass) {  		case "Warrior":  			tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  			break;  		case "Lancer":  			tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  			break;  		case "Slayer":  			tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  			break;  		case "Berserker":  			tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  			break;  		case "Sorcerer":  			tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  			break;  		case "Archer":  			tmpStats.PlayerClass = Enums.PlayerClass.Archer;  			break;  		case "Priest":  			tmpStats.PlayerClass = Enums.PlayerClass.Priest;  			break;  		case "Mystic":  			tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  			break;  		default:  			throw new Exception ("Unk Class");  		}  		Stats.Add (tmpStats);  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (statsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		CreatureBaseStats tmpStats = new CreatureBaseStats ();  		tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  		tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  		tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  		tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  		tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  		tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  		tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  		tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  		tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  		tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  		tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  		tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  		tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  		tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  		tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  		tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  		tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  		tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  		tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  		tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  		tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  		tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  		switch (tmpClass) {  		case "Warrior":  			tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  			break;  		case "Lancer":  			tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  			break;  		case "Slayer":  			tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  			break;  		case "Berserker":  			tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  			break;  		case "Sorcerer":  			tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  			break;  		case "Archer":  			tmpStats.PlayerClass = Enums.PlayerClass.Archer;  			break;  		case "Priest":  			tmpStats.PlayerClass = Enums.PlayerClass.Priest;  			break;  		case "Mystic":  			tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  			break;  		default:  			throw new Exception ("Unk Class");  		}  		Stats.Add (tmpStats);  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (statsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		CreatureBaseStats tmpStats = new CreatureBaseStats ();  		tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  		tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  		tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  		tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  		tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  		tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  		tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  		tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  		tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  		tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  		tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  		tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  		tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  		tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  		tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  		tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  		tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  		tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  		tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  		tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  		tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  		tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  		switch (tmpClass) {  		case "Warrior":  			tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  			break;  		case "Lancer":  			tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  			break;  		case "Slayer":  			tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  			break;  		case "Berserker":  			tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  			break;  		case "Sorcerer":  			tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  			break;  		case "Archer":  			tmpStats.PlayerClass = Enums.PlayerClass.Archer;  			break;  		case "Priest":  			tmpStats.PlayerClass = Enums.PlayerClass.Priest;  			break;  		case "Mystic":  			tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  			break;  		default:  			throw new Exception ("Unk Class");  		}  		Stats.Add (tmpStats);  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (statsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		CreatureBaseStats tmpStats = new CreatureBaseStats ();  		tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  		tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  		tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  		tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  		tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  		tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  		tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  		tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  		tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  		tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  		tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  		tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  		tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  		tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  		tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  		tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  		tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  		tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  		tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  		tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  		tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  		tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  		switch (tmpClass) {  		case "Warrior":  			tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  			break;  		case "Lancer":  			tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  			break;  		case "Slayer":  			tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  			break;  		case "Berserker":  			tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  			break;  		case "Sorcerer":  			tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  			break;  		case "Archer":  			tmpStats.PlayerClass = Enums.PlayerClass.Archer;  			break;  		case "Priest":  			tmpStats.PlayerClass = Enums.PlayerClass.Priest;  			break;  		case "Mystic":  			tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  			break;  		default:  			throw new Exception ("Unk Class");  		}  		Stats.Add (tmpStats);  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: try {  	XmlReader xmlFile;  	xmlFile = XmlReader.Create (statsFile' new XmlReaderSettings ());  	DataSet ds = new DataSet ();  	ds.ReadXml (xmlFile);  	for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  		CreatureBaseStats tmpStats = new CreatureBaseStats ();  		tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  		tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  		var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  		tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  		tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  		tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  		tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  		tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  		tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  		tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  		tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  		tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  		tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  		tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  		tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  		tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  		tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  		tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  		tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  		tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  		tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  		tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  		tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  		tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  		tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  		tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  		tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  		switch (tmpClass) {  		case "Warrior":  			tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  			break;  		case "Lancer":  			tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  			break;  		case "Slayer":  			tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  			break;  		case "Berserker":  			tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  			break;  		case "Sorcerer":  			tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  			break;  		case "Archer":  			tmpStats.PlayerClass = Enums.PlayerClass.Archer;  			break;  		case "Priest":  			tmpStats.PlayerClass = Enums.PlayerClass.Priest;  			break;  		case "Mystic":  			tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  			break;  		default:  			throw new Exception ("Unk Class");  		}  		Stats.Add (tmpStats);  	}  }  catch {  	Console.Beep ();  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	CreatureBaseStats tmpStats = new CreatureBaseStats ();  	tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  	tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  	tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  	tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  	tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  	tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  	tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  	tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  	tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  	tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  	tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  	tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  	tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  	tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  	tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  	tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  	tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  	tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  	tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  	tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  	tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  	tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  	switch (tmpClass) {  	case "Warrior":  		tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  		break;  	case "Lancer":  		tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  		break;  	case "Slayer":  		tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  		break;  	case "Berserker":  		tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  		break;  	case "Sorcerer":  		tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  		break;  	case "Archer":  		tmpStats.PlayerClass = Enums.PlayerClass.Archer;  		break;  	case "Priest":  		tmpStats.PlayerClass = Enums.PlayerClass.Priest;  		break;  	case "Mystic":  		tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  		break;  	default:  		throw new Exception ("Unk Class");  	}  	Stats.Add (tmpStats);  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	CreatureBaseStats tmpStats = new CreatureBaseStats ();  	tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  	tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  	tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  	tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  	tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  	tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  	tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  	tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  	tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  	tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  	tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  	tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  	tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  	tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  	tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  	tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  	tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  	tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  	tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  	tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  	tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  	tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  	switch (tmpClass) {  	case "Warrior":  		tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  		break;  	case "Lancer":  		tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  		break;  	case "Slayer":  		tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  		break;  	case "Berserker":  		tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  		break;  	case "Sorcerer":  		tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  		break;  	case "Archer":  		tmpStats.PlayerClass = Enums.PlayerClass.Archer;  		break;  	case "Priest":  		tmpStats.PlayerClass = Enums.PlayerClass.Priest;  		break;  	case "Mystic":  		tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  		break;  	default:  		throw new Exception ("Unk Class");  	}  	Stats.Add (tmpStats);  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	CreatureBaseStats tmpStats = new CreatureBaseStats ();  	tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  	tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  	tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  	tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  	tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  	tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  	tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  	tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  	tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  	tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  	tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  	tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  	tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  	tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  	tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  	tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  	tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  	tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  	tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  	tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  	tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  	tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  	switch (tmpClass) {  	case "Warrior":  		tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  		break;  	case "Lancer":  		tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  		break;  	case "Slayer":  		tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  		break;  	case "Berserker":  		tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  		break;  	case "Sorcerer":  		tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  		break;  	case "Archer":  		tmpStats.PlayerClass = Enums.PlayerClass.Archer;  		break;  	case "Priest":  		tmpStats.PlayerClass = Enums.PlayerClass.Priest;  		break;  	case "Mystic":  		tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  		break;  	default:  		throw new Exception ("Unk Class");  	}  	Stats.Add (tmpStats);  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	CreatureBaseStats tmpStats = new CreatureBaseStats ();  	tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  	tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  	tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  	tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  	tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  	tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  	tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  	tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  	tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  	tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  	tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  	tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  	tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  	tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  	tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  	tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  	tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  	tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  	tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  	tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  	tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  	tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  	switch (tmpClass) {  	case "Warrior":  		tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  		break;  	case "Lancer":  		tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  		break;  	case "Slayer":  		tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  		break;  	case "Berserker":  		tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  		break;  	case "Sorcerer":  		tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  		break;  	case "Archer":  		tmpStats.PlayerClass = Enums.PlayerClass.Archer;  		break;  	case "Priest":  		tmpStats.PlayerClass = Enums.PlayerClass.Priest;  		break;  	case "Mystic":  		tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  		break;  	default:  		throw new Exception ("Unk Class");  	}  	Stats.Add (tmpStats);  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	CreatureBaseStats tmpStats = new CreatureBaseStats ();  	tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  	tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  	tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  	tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  	tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  	tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  	tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  	tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  	tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  	tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  	tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  	tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  	tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  	tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  	tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  	tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  	tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  	tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  	tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  	tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  	tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  	tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  	switch (tmpClass) {  	case "Warrior":  		tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  		break;  	case "Lancer":  		tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  		break;  	case "Slayer":  		tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  		break;  	case "Berserker":  		tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  		break;  	case "Sorcerer":  		tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  		break;  	case "Archer":  		tmpStats.PlayerClass = Enums.PlayerClass.Archer;  		break;  	case "Priest":  		tmpStats.PlayerClass = Enums.PlayerClass.Priest;  		break;  	case "Mystic":  		tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  		break;  	default:  		throw new Exception ("Unk Class");  	}  	Stats.Add (tmpStats);  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	CreatureBaseStats tmpStats = new CreatureBaseStats ();  	tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  	tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  	tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  	tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  	tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  	tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  	tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  	tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  	tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  	tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  	tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  	tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  	tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  	tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  	tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  	tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  	tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  	tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  	tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  	tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  	tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  	tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  	switch (tmpClass) {  	case "Warrior":  		tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  		break;  	case "Lancer":  		tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  		break;  	case "Slayer":  		tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  		break;  	case "Berserker":  		tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  		break;  	case "Sorcerer":  		tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  		break;  	case "Archer":  		tmpStats.PlayerClass = Enums.PlayerClass.Archer;  		break;  	case "Priest":  		tmpStats.PlayerClass = Enums.PlayerClass.Priest;  		break;  	case "Mystic":  		tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  		break;  	default:  		throw new Exception ("Unk Class");  	}  	Stats.Add (tmpStats);  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	CreatureBaseStats tmpStats = new CreatureBaseStats ();  	tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  	tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  	tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  	tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  	tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  	tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  	tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  	tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  	tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  	tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  	tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  	tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  	tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  	tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  	tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  	tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  	tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  	tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  	tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  	tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  	tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  	tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  	switch (tmpClass) {  	case "Warrior":  		tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  		break;  	case "Lancer":  		tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  		break;  	case "Slayer":  		tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  		break;  	case "Berserker":  		tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  		break;  	case "Sorcerer":  		tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  		break;  	case "Archer":  		tmpStats.PlayerClass = Enums.PlayerClass.Archer;  		break;  	case "Priest":  		tmpStats.PlayerClass = Enums.PlayerClass.Priest;  		break;  	case "Mystic":  		tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  		break;  	default:  		throw new Exception ("Unk Class");  	}  	Stats.Add (tmpStats);  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	CreatureBaseStats tmpStats = new CreatureBaseStats ();  	tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  	tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  	tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  	tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  	tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  	tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  	tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  	tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  	tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  	tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  	tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  	tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  	tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  	tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  	tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  	tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  	tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  	tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  	tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  	tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  	tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  	tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  	switch (tmpClass) {  	case "Warrior":  		tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  		break;  	case "Lancer":  		tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  		break;  	case "Slayer":  		tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  		break;  	case "Berserker":  		tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  		break;  	case "Sorcerer":  		tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  		break;  	case "Archer":  		tmpStats.PlayerClass = Enums.PlayerClass.Archer;  		break;  	case "Priest":  		tmpStats.PlayerClass = Enums.PlayerClass.Priest;  		break;  	case "Mystic":  		tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  		break;  	default:  		throw new Exception ("Unk Class");  	}  	Stats.Add (tmpStats);  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	CreatureBaseStats tmpStats = new CreatureBaseStats ();  	tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  	tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  	tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  	tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  	tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  	tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  	tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  	tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  	tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  	tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  	tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  	tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  	tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  	tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  	tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  	tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  	tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  	tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  	tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  	tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  	tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  	tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  	switch (tmpClass) {  	case "Warrior":  		tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  		break;  	case "Lancer":  		tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  		break;  	case "Slayer":  		tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  		break;  	case "Berserker":  		tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  		break;  	case "Sorcerer":  		tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  		break;  	case "Archer":  		tmpStats.PlayerClass = Enums.PlayerClass.Archer;  		break;  	case "Priest":  		tmpStats.PlayerClass = Enums.PlayerClass.Priest;  		break;  	case "Mystic":  		tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  		break;  	default:  		throw new Exception ("Unk Class");  	}  	Stats.Add (tmpStats);  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	CreatureBaseStats tmpStats = new CreatureBaseStats ();  	tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  	tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  	tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  	tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  	tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  	tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  	tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  	tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  	tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  	tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  	tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  	tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  	tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  	tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  	tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  	tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  	tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  	tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  	tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  	tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  	tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  	tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  	switch (tmpClass) {  	case "Warrior":  		tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  		break;  	case "Lancer":  		tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  		break;  	case "Slayer":  		tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  		break;  	case "Berserker":  		tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  		break;  	case "Sorcerer":  		tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  		break;  	case "Archer":  		tmpStats.PlayerClass = Enums.PlayerClass.Archer;  		break;  	case "Priest":  		tmpStats.PlayerClass = Enums.PlayerClass.Priest;  		break;  	case "Mystic":  		tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  		break;  	default:  		throw new Exception ("Unk Class");  	}  	Stats.Add (tmpStats);  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	CreatureBaseStats tmpStats = new CreatureBaseStats ();  	tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  	tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  	tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  	tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  	tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  	tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  	tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  	tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  	tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  	tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  	tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  	tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  	tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  	tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  	tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  	tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  	tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  	tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  	tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  	tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  	tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  	tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  	switch (tmpClass) {  	case "Warrior":  		tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  		break;  	case "Lancer":  		tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  		break;  	case "Slayer":  		tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  		break;  	case "Berserker":  		tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  		break;  	case "Sorcerer":  		tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  		break;  	case "Archer":  		tmpStats.PlayerClass = Enums.PlayerClass.Archer;  		break;  	case "Priest":  		tmpStats.PlayerClass = Enums.PlayerClass.Priest;  		break;  	case "Mystic":  		tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  		break;  	default:  		throw new Exception ("Unk Class");  	}  	Stats.Add (tmpStats);  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	CreatureBaseStats tmpStats = new CreatureBaseStats ();  	tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  	tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  	tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  	tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  	tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  	tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  	tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  	tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  	tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  	tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  	tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  	tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  	tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  	tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  	tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  	tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  	tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  	tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  	tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  	tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  	tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  	tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  	switch (tmpClass) {  	case "Warrior":  		tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  		break;  	case "Lancer":  		tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  		break;  	case "Slayer":  		tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  		break;  	case "Berserker":  		tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  		break;  	case "Sorcerer":  		tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  		break;  	case "Archer":  		tmpStats.PlayerClass = Enums.PlayerClass.Archer;  		break;  	case "Priest":  		tmpStats.PlayerClass = Enums.PlayerClass.Priest;  		break;  	case "Mystic":  		tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  		break;  	default:  		throw new Exception ("Unk Class");  	}  	Stats.Add (tmpStats);  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	CreatureBaseStats tmpStats = new CreatureBaseStats ();  	tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  	tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  	tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  	tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  	tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  	tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  	tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  	tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  	tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  	tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  	tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  	tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  	tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  	tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  	tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  	tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  	tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  	tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  	tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  	tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  	tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  	tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  	switch (tmpClass) {  	case "Warrior":  		tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  		break;  	case "Lancer":  		tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  		break;  	case "Slayer":  		tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  		break;  	case "Berserker":  		tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  		break;  	case "Sorcerer":  		tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  		break;  	case "Archer":  		tmpStats.PlayerClass = Enums.PlayerClass.Archer;  		break;  	case "Priest":  		tmpStats.PlayerClass = Enums.PlayerClass.Priest;  		break;  	case "Mystic":  		tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  		break;  	default:  		throw new Exception ("Unk Class");  	}  	Stats.Add (tmpStats);  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	CreatureBaseStats tmpStats = new CreatureBaseStats ();  	tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  	tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  	tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  	tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  	tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  	tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  	tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  	tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  	tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  	tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  	tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  	tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  	tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  	tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  	tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  	tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  	tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  	tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  	tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  	tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  	tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  	tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  	switch (tmpClass) {  	case "Warrior":  		tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  		break;  	case "Lancer":  		tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  		break;  	case "Slayer":  		tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  		break;  	case "Berserker":  		tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  		break;  	case "Sorcerer":  		tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  		break;  	case "Archer":  		tmpStats.PlayerClass = Enums.PlayerClass.Archer;  		break;  	case "Priest":  		tmpStats.PlayerClass = Enums.PlayerClass.Priest;  		break;  	case "Mystic":  		tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  		break;  	default:  		throw new Exception ("Unk Class");  	}  	Stats.Add (tmpStats);  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	CreatureBaseStats tmpStats = new CreatureBaseStats ();  	tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  	tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  	tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  	tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  	tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  	tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  	tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  	tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  	tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  	tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  	tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  	tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  	tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  	tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  	tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  	tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  	tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  	tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  	tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  	tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  	tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  	tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  	switch (tmpClass) {  	case "Warrior":  		tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  		break;  	case "Lancer":  		tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  		break;  	case "Slayer":  		tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  		break;  	case "Berserker":  		tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  		break;  	case "Sorcerer":  		tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  		break;  	case "Archer":  		tmpStats.PlayerClass = Enums.PlayerClass.Archer;  		break;  	case "Priest":  		tmpStats.PlayerClass = Enums.PlayerClass.Priest;  		break;  	case "Mystic":  		tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  		break;  	default:  		throw new Exception ("Unk Class");  	}  	Stats.Add (tmpStats);  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	CreatureBaseStats tmpStats = new CreatureBaseStats ();  	tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  	tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  	tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  	tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  	tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  	tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  	tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  	tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  	tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  	tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  	tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  	tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  	tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  	tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  	tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  	tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  	tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  	tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  	tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  	tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  	tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  	tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  	switch (tmpClass) {  	case "Warrior":  		tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  		break;  	case "Lancer":  		tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  		break;  	case "Slayer":  		tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  		break;  	case "Berserker":  		tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  		break;  	case "Sorcerer":  		tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  		break;  	case "Archer":  		tmpStats.PlayerClass = Enums.PlayerClass.Archer;  		break;  	case "Priest":  		tmpStats.PlayerClass = Enums.PlayerClass.Priest;  		break;  	case "Mystic":  		tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  		break;  	default:  		throw new Exception ("Unk Class");  	}  	Stats.Add (tmpStats);  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	CreatureBaseStats tmpStats = new CreatureBaseStats ();  	tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  	tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  	tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  	tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  	tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  	tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  	tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  	tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  	tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  	tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  	tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  	tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  	tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  	tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  	tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  	tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  	tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  	tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  	tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  	tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  	tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  	tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  	switch (tmpClass) {  	case "Warrior":  		tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  		break;  	case "Lancer":  		tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  		break;  	case "Slayer":  		tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  		break;  	case "Berserker":  		tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  		break;  	case "Sorcerer":  		tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  		break;  	case "Archer":  		tmpStats.PlayerClass = Enums.PlayerClass.Archer;  		break;  	case "Priest":  		tmpStats.PlayerClass = Enums.PlayerClass.Priest;  		break;  	case "Mystic":  		tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  		break;  	default:  		throw new Exception ("Unk Class");  	}  	Stats.Add (tmpStats);  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	CreatureBaseStats tmpStats = new CreatureBaseStats ();  	tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  	tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  	tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  	tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  	tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  	tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  	tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  	tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  	tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  	tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  	tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  	tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  	tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  	tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  	tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  	tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  	tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  	tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  	tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  	tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  	tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  	tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  	switch (tmpClass) {  	case "Warrior":  		tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  		break;  	case "Lancer":  		tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  		break;  	case "Slayer":  		tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  		break;  	case "Berserker":  		tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  		break;  	case "Sorcerer":  		tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  		break;  	case "Archer":  		tmpStats.PlayerClass = Enums.PlayerClass.Archer;  		break;  	case "Priest":  		tmpStats.PlayerClass = Enums.PlayerClass.Priest;  		break;  	case "Mystic":  		tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  		break;  	default:  		throw new Exception ("Unk Class");  	}  	Stats.Add (tmpStats);  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	CreatureBaseStats tmpStats = new CreatureBaseStats ();  	tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  	tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  	tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  	tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  	tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  	tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  	tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  	tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  	tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  	tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  	tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  	tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  	tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  	tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  	tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  	tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  	tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  	tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  	tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  	tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  	tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  	tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  	switch (tmpClass) {  	case "Warrior":  		tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  		break;  	case "Lancer":  		tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  		break;  	case "Slayer":  		tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  		break;  	case "Berserker":  		tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  		break;  	case "Sorcerer":  		tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  		break;  	case "Archer":  		tmpStats.PlayerClass = Enums.PlayerClass.Archer;  		break;  	case "Priest":  		tmpStats.PlayerClass = Enums.PlayerClass.Priest;  		break;  	case "Mystic":  		tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  		break;  	default:  		throw new Exception ("Unk Class");  	}  	Stats.Add (tmpStats);  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	CreatureBaseStats tmpStats = new CreatureBaseStats ();  	tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  	tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  	tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  	tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  	tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  	tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  	tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  	tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  	tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  	tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  	tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  	tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  	tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  	tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  	tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  	tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  	tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  	tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  	tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  	tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  	tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  	tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  	switch (tmpClass) {  	case "Warrior":  		tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  		break;  	case "Lancer":  		tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  		break;  	case "Slayer":  		tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  		break;  	case "Berserker":  		tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  		break;  	case "Sorcerer":  		tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  		break;  	case "Archer":  		tmpStats.PlayerClass = Enums.PlayerClass.Archer;  		break;  	case "Priest":  		tmpStats.PlayerClass = Enums.PlayerClass.Priest;  		break;  	case "Mystic":  		tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  		break;  	default:  		throw new Exception ("Unk Class");  	}  	Stats.Add (tmpStats);  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	CreatureBaseStats tmpStats = new CreatureBaseStats ();  	tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  	tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  	tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  	tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  	tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  	tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  	tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  	tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  	tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  	tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  	tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  	tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  	tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  	tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  	tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  	tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  	tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  	tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  	tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  	tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  	tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  	tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  	switch (tmpClass) {  	case "Warrior":  		tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  		break;  	case "Lancer":  		tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  		break;  	case "Slayer":  		tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  		break;  	case "Berserker":  		tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  		break;  	case "Sorcerer":  		tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  		break;  	case "Archer":  		tmpStats.PlayerClass = Enums.PlayerClass.Archer;  		break;  	case "Priest":  		tmpStats.PlayerClass = Enums.PlayerClass.Priest;  		break;  	case "Mystic":  		tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  		break;  	default:  		throw new Exception ("Unk Class");  	}  	Stats.Add (tmpStats);  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	CreatureBaseStats tmpStats = new CreatureBaseStats ();  	tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  	tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  	tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  	tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  	tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  	tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  	tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  	tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  	tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  	tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  	tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  	tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  	tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  	tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  	tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  	tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  	tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  	tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  	tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  	tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  	tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  	tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  	switch (tmpClass) {  	case "Warrior":  		tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  		break;  	case "Lancer":  		tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  		break;  	case "Slayer":  		tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  		break;  	case "Berserker":  		tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  		break;  	case "Sorcerer":  		tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  		break;  	case "Archer":  		tmpStats.PlayerClass = Enums.PlayerClass.Archer;  		break;  	case "Priest":  		tmpStats.PlayerClass = Enums.PlayerClass.Priest;  		break;  	case "Mystic":  		tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  		break;  	default:  		throw new Exception ("Unk Class");  	}  	Stats.Add (tmpStats);  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	CreatureBaseStats tmpStats = new CreatureBaseStats ();  	tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  	tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  	tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  	tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  	tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  	tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  	tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  	tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  	tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  	tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  	tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  	tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  	tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  	tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  	tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  	tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  	tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  	tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  	tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  	tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  	tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  	tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  	switch (tmpClass) {  	case "Warrior":  		tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  		break;  	case "Lancer":  		tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  		break;  	case "Slayer":  		tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  		break;  	case "Berserker":  		tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  		break;  	case "Sorcerer":  		tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  		break;  	case "Archer":  		tmpStats.PlayerClass = Enums.PlayerClass.Archer;  		break;  	case "Priest":  		tmpStats.PlayerClass = Enums.PlayerClass.Priest;  		break;  	case "Mystic":  		tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  		break;  	default:  		throw new Exception ("Unk Class");  	}  	Stats.Add (tmpStats);  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	CreatureBaseStats tmpStats = new CreatureBaseStats ();  	tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  	tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  	tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  	tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  	tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  	tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  	tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  	tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  	tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  	tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  	tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  	tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  	tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  	tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  	tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  	tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  	tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  	tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  	tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  	tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  	tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  	tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  	switch (tmpClass) {  	case "Warrior":  		tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  		break;  	case "Lancer":  		tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  		break;  	case "Slayer":  		tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  		break;  	case "Berserker":  		tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  		break;  	case "Sorcerer":  		tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  		break;  	case "Archer":  		tmpStats.PlayerClass = Enums.PlayerClass.Archer;  		break;  	case "Priest":  		tmpStats.PlayerClass = Enums.PlayerClass.Priest;  		break;  	case "Mystic":  		tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  		break;  	default:  		throw new Exception ("Unk Class");  	}  	Stats.Add (tmpStats);  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: for (int i = 0; i < ds.Tables [0].Rows.Count; i++) {  	CreatureBaseStats tmpStats = new CreatureBaseStats ();  	tmpStats.NpcId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [0]);  	tmpStats.NpcName = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [1]);  	var tmpClass = Convert.ToString (ds.Tables [0].Rows [i].ItemArray [2]);  	tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  	tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  	tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  	tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  	tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  	tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  	tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  	tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  	tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  	tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  	tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  	tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  	tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  	tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  	tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  	tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  	tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  	tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  	tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  	tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  	tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  	tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  	tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  	tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  	switch (tmpClass) {  	case "Warrior":  		tmpStats.PlayerClass = Enums.PlayerClass.Warrior;  		break;  	case "Lancer":  		tmpStats.PlayerClass = Enums.PlayerClass.Lancer;  		break;  	case "Slayer":  		tmpStats.PlayerClass = Enums.PlayerClass.Slayer;  		break;  	case "Berserker":  		tmpStats.PlayerClass = Enums.PlayerClass.Berserker;  		break;  	case "Sorcerer":  		tmpStats.PlayerClass = Enums.PlayerClass.Sorcerer;  		break;  	case "Archer":  		tmpStats.PlayerClass = Enums.PlayerClass.Archer;  		break;  	case "Priest":  		tmpStats.PlayerClass = Enums.PlayerClass.Priest;  		break;  	case "Mystic":  		tmpStats.PlayerClass = Enums.PlayerClass.Mystic;  		break;  	default:  		throw new Exception ("Unk Class");  	}  	Stats.Add (tmpStats);  }  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: tmpStats.Level = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [3]);  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: tmpStats.NpcHuntingZoneId = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [4]);  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: tmpStats.Attack = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [5]);  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: tmpStats.AttackSpeed = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [6]);  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: tmpStats.Balance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [7]);  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: tmpStats.BalanceFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [8]);  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: tmpStats.Impact = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [9]);  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: tmpStats.ImpactFactor = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [10]);  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: tmpStats.CritChanse = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [11]);  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: tmpStats.CritPower = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [12]);  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: tmpStats.Movement = Convert.ToInt16 (ds.Tables [0].Rows [i].ItemArray [13]);  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: tmpStats.Power = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [14]);  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: tmpStats.HpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [15]);  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: tmpStats.HpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [16]);  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: tmpStats.MpBase = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [17]);  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: tmpStats.MpStamina = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [18]);  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: tmpStats.NaturalMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [19]);  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: tmpStats.CombatMpRegen = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [20]);  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: tmpStats.Endurance = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [21]);  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: tmpStats.Defense = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [22]);  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: tmpStats.CritResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [23]);  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: tmpStats.StunResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [24]);  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: tmpStats.PeriodicResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [25]);  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadStats,The following statement contains a magic number: tmpStats.WeakeningResist = Convert.ToInt32 (ds.Tables [0].Rows [i].ItemArray [26]);  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadTeleports,The following statement contains a magic number: StaticTeleports.Add (21301015' new WorldPosition {  	Heading = -32651'  	MapId = 9036'  	X = BitConverter.ToSingle ("00438B47".HexSringToBytes ()' 0)'  	Y = BitConverter.ToSingle ("004027C6".HexSringToBytes ()' 0)'  	Z = BitConverter.ToSingle ("00002DC3".HexSringToBytes ()' 0)  });  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadTeleports,The following statement contains a magic number: StaticTeleports.Add (21301015' new WorldPosition {  	Heading = -32651'  	MapId = 9036'  	X = BitConverter.ToSingle ("00438B47".HexSringToBytes ()' 0)'  	Y = BitConverter.ToSingle ("004027C6".HexSringToBytes ()' 0)'  	Z = BitConverter.ToSingle ("00002DC3".HexSringToBytes ()' 0)  });  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadTeleports,The following statement contains a magic number: StaticTeleports.Add (21301015' new WorldPosition {  	Heading = -32651'  	MapId = 9036'  	X = BitConverter.ToSingle ("00438B47".HexSringToBytes ()' 0)'  	Y = BitConverter.ToSingle ("004027C6".HexSringToBytes ()' 0)'  	Z = BitConverter.ToSingle ("00002DC3".HexSringToBytes ()' 0)  });  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadTeleports,The following statement contains a magic number: StaticTeleports.Add (43601501' new WorldPosition {  	Heading = -32651'  	MapId = 13'  	X = 58839'  	Y = -75263'  	Z = -5727'  });  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadTeleports,The following statement contains a magic number: StaticTeleports.Add (43601501' new WorldPosition {  	Heading = -32651'  	MapId = 13'  	X = 58839'  	Y = -75263'  	Z = -5727'  });  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadTeleports,The following statement contains a magic number: StaticTeleports.Add (43601501' new WorldPosition {  	Heading = -32651'  	MapId = 13'  	X = 58839'  	Y = -75263'  	Z = -5727'  });  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadTeleports,The following statement contains a magic number: StaticTeleports.Add (43601501' new WorldPosition {  	Heading = -32651'  	MapId = 13'  	X = 58839'  	Y = -75263'  	Z = -5727'  });  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadTeleports,The following statement contains a magic number: StaticTeleports.Add (43601501' new WorldPosition {  	Heading = -32651'  	MapId = 13'  	X = 58839'  	Y = -75263'  	Z = -5727'  });  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,LoadTeleports,The following statement contains a magic number: StaticTeleports.Add (43601501' new WorldPosition {  	Heading = -32651'  	MapId = 13'  	X = 58839'  	Y = -75263'  	Z = -5727'  });  
Magic Number,Tera.Data,Data,C:\repos\GoneUp_Temu\Shared\Data\Data.cs,CalculateNpcExperience,The following statement contains a magic number: for (int i = 0; i < 100; i++)  	NpcExperience.Add ((long)(a * i * i + b * i + c));  
Magic Number,Tera.Data.Structures.Creature,CreatureEffectsImpact,C:\repos\GoneUp_Temu\Shared\Data\Structures\Creature\CreatureEffectsImpact.cs,ResetChanges,The following statement contains a magic number: if (player != null) {  	MovementModificator += player.MovementByAdminCommand;  	if (player.PlayerMode != PlayerMode.Armored && player.PlayerMount == 0)  		MovementModificator += (short)(170 - player.GameStats.Movement);  	if (player.Attack != null && !player.Attack.IsFinished && player.Attack.Args.GetSkill (player).BaseId == 20100 && (player.PlayerData.Class == PlayerClass.Berserker || player.PlayerData.Class == PlayerClass.Lancer)) {  		IsBlockFrontAttacks = true;  	}  }  
Magic Number,Tera.Data.Structures.Creature,CreatureEffectsImpact,C:\repos\GoneUp_Temu\Shared\Data\Structures\Creature\CreatureEffectsImpact.cs,ResetChanges,The following statement contains a magic number: if (player != null) {  	MovementModificator += player.MovementByAdminCommand;  	if (player.PlayerMode != PlayerMode.Armored && player.PlayerMount == 0)  		MovementModificator += (short)(170 - player.GameStats.Movement);  	if (player.Attack != null && !player.Attack.IsFinished && player.Attack.Args.GetSkill (player).BaseId == 20100 && (player.PlayerData.Class == PlayerClass.Berserker || player.PlayerData.Class == PlayerClass.Lancer)) {  		IsBlockFrontAttacks = true;  	}  }  
Magic Number,Tera.Data.Structures.Creature,CreatureEffectsImpact,C:\repos\GoneUp_Temu\Shared\Data\Structures\Creature\CreatureEffectsImpact.cs,ResetChanges,The following statement contains a magic number: if (player.PlayerMode != PlayerMode.Armored && player.PlayerMount == 0)  	MovementModificator += (short)(170 - player.GameStats.Movement);  
Magic Number,Tera.Data.Structures.Creature,CreatureEffectsImpact,C:\repos\GoneUp_Temu\Shared\Data\Structures\Creature\CreatureEffectsImpact.cs,ResetChanges,The following statement contains a magic number: MovementModificator += (short)(170 - player.GameStats.Movement);  
Magic Number,Tera.Data.Structures.Creature,CreatureEffectsImpact,C:\repos\GoneUp_Temu\Shared\Data\Structures\Creature\CreatureEffectsImpact.cs,ResetChanges,The following statement contains a magic number: if (player.Attack != null && !player.Attack.IsFinished && player.Attack.Args.GetSkill (player).BaseId == 20100 && (player.PlayerData.Class == PlayerClass.Berserker || player.PlayerData.Class == PlayerClass.Lancer)) {  	IsBlockFrontAttacks = true;  }  
Magic Number,Tera.Data.Structures.Creature,CreatureLifeStats,C:\repos\GoneUp_Temu\Shared\Data\Structures\Creature\CreatureLifeStats.cs,PlusStamina,The following statement contains a magic number: if (Stamina > 120) {  	value -= Stamina - 120;  	Stamina = 120;  }  
Magic Number,Tera.Data.Structures.Creature,CreatureLifeStats,C:\repos\GoneUp_Temu\Shared\Data\Structures\Creature\CreatureLifeStats.cs,PlusStamina,The following statement contains a magic number: if (Stamina > 120) {  	value -= Stamina - 120;  	Stamina = 120;  }  
Magic Number,Tera.Data.Structures.Creature,CreatureLifeStats,C:\repos\GoneUp_Temu\Shared\Data\Structures\Creature\CreatureLifeStats.cs,PlusStamina,The following statement contains a magic number: if (Stamina > 120) {  	value -= Stamina - 120;  	Stamina = 120;  }  
Magic Number,Tera.Data.Structures.Creature,CreatureLifeStats,C:\repos\GoneUp_Temu\Shared\Data\Structures\Creature\CreatureLifeStats.cs,PlusStamina,The following statement contains a magic number: value -= Stamina - 120;  
Magic Number,Tera.Data.Structures.Creature,CreatureLifeStats,C:\repos\GoneUp_Temu\Shared\Data\Structures\Creature\CreatureLifeStats.cs,PlusStamina,The following statement contains a magic number: Stamina = 120;  
Magic Number,Tera.Data.Structures.Creature,CreatureLifeStats,C:\repos\GoneUp_Temu\Shared\Data\Structures\Creature\CreatureLifeStats.cs,Kill,The following statement contains a magic number: if (Stamina >= 10)  	Stamina -= 10;  else  	Stamina = 0;  
Magic Number,Tera.Data.Structures.Creature,CreatureLifeStats,C:\repos\GoneUp_Temu\Shared\Data\Structures\Creature\CreatureLifeStats.cs,Kill,The following statement contains a magic number: if (Stamina >= 10)  	Stamina -= 10;  else  	Stamina = 0;  
Magic Number,Tera.Data.Structures.Creature,CreatureLifeStats,C:\repos\GoneUp_Temu\Shared\Data\Structures\Creature\CreatureLifeStats.cs,Kill,The following statement contains a magic number: Stamina -= 10;  
Magic Number,Tera.Data.Structures.Creature,CreatureLifeStats,C:\repos\GoneUp_Temu\Shared\Data\Structures\Creature\CreatureLifeStats.cs,Rebirth,The following statement contains a magic number: _hp /= 10;  
Magic Number,Tera.Data.Structures.Creature,CreatureLifeStats,C:\repos\GoneUp_Temu\Shared\Data\Structures\Creature\CreatureLifeStats.cs,Rebirth,The following statement contains a magic number: _mp /= 10;  
Magic Number,Tera.Data.Structures.Geometry,Geom,C:\repos\GoneUp_Temu\Shared\Data\Structures\Geometry\Geom.cs,GetHeading,The following statement contains a magic number: return (short)(Math.Atan2 (y' x) * 32768 / Math.PI);  
Magic Number,Tera.Data.Structures.Geometry,Geom,C:\repos\GoneUp_Temu\Shared\Data\Structures\Geometry\Geom.cs,GetHeading,The following statement contains a magic number: return (short)(Math.Atan2 (worldPosition.Y' worldPosition.X) * 32768 / Math.PI);  
Magic Number,Tera.Data.Structures.Geometry,Geom,C:\repos\GoneUp_Temu\Shared\Data\Structures\Geometry\Geom.cs,GetHeading,The following statement contains a magic number: return (short)(Math.Atan2 (point3D.Y' point3D.X) * 32768 / Math.PI);  
Magic Number,Tera.Data.Structures.Geometry,Geom,C:\repos\GoneUp_Temu\Shared\Data\Structures\Geometry\Geom.cs,GetHeading,The following statement contains a magic number: return (short)(Math.Atan2 (toWorldPosition.Y - fromWorldPosition.Y' toWorldPosition.X - fromWorldPosition.X) * 32768 / Math.PI);  
Magic Number,Tera.Data.Structures.Geometry,Geom,C:\repos\GoneUp_Temu\Shared\Data\Structures\Geometry\Geom.cs,GetHeading,The following statement contains a magic number: return (short)(Math.Atan2 (toPoint3D.Y - fromWorldPosition.Y' toPoint3D.X - fromWorldPosition.X) * 32768 / Math.PI);  
Magic Number,Tera.Data.Structures.Geometry,Geom,C:\repos\GoneUp_Temu\Shared\Data\Structures\Geometry\Geom.cs,GetHeading,The following statement contains a magic number: return (short)(Math.Atan2 (toPoint3D.Y - fromPoint3D.Y' toPoint3D.X - fromPoint3D.X) * 32768 / Math.PI);  
Magic Number,Tera.Data.Structures.Geometry,Geom,C:\repos\GoneUp_Temu\Shared\Data\Structures\Geometry\Geom.cs,GetHeading,The following statement contains a magic number: return (short)(Math.Atan2 (toWorldPosition.Y - fromPoint3D.Y' toWorldPosition.X - fromPoint3D.X) * 32768 / Math.PI);  
Magic Number,Tera.Data.Structures.Geometry,Geom,C:\repos\GoneUp_Temu\Shared\Data\Structures\Geometry\Geom.cs,GetAngleDiff,The following statement contains a magic number: return (short)((180 * Math.Abs (heading1 - heading2) / short.MaxValue) % 360);  
Magic Number,Tera.Data.Structures.Geometry,Geom,C:\repos\GoneUp_Temu\Shared\Data\Structures\Geometry\Geom.cs,GetAngleDiff,The following statement contains a magic number: return (short)((180 * Math.Abs (heading1 - heading2) / short.MaxValue) % 360);  
Magic Number,Tera.Data.Structures.Geometry,Polygon,C:\repos\GoneUp_Temu\Shared\Data\Structures\Geometry\Polygon.cs,Contains,The following statement contains a magic number: if (PointList.Count <= 2)  	return false;  
Magic Number,Tera.Data.Structures.Objects,Projectile,C:\repos\GoneUp_Temu\Shared\Data\Structures\Objects\Projectile.cs,Projectile,The following statement contains a magic number: if (player != null) {  	Skill = Data.Skills [0] [player.TemplateId] [ProjectileSkill.Id];  	SkillId = Skill.Id;  }  else if (npc != null) {  	Skill = Data.Skills [npc.NpcTemplate.HuntingZoneId] [npc.NpcTemplate.Id] [ProjectileSkill.Id];  	SkillId = Skill.Id + 0x40000000 + (npc.NpcTemplate.HuntingZoneId << 16);  }  
Magic Number,Tera.Data.Structures.Objects,Projectile,C:\repos\GoneUp_Temu\Shared\Data\Structures\Objects\Projectile.cs,Projectile,The following statement contains a magic number: if (npc != null) {  	Skill = Data.Skills [npc.NpcTemplate.HuntingZoneId] [npc.NpcTemplate.Id] [ProjectileSkill.Id];  	SkillId = Skill.Id + 0x40000000 + (npc.NpcTemplate.HuntingZoneId << 16);  }  
Magic Number,Tera.Data.Structures.Objects,Projectile,C:\repos\GoneUp_Temu\Shared\Data\Structures\Objects\Projectile.cs,Projectile,The following statement contains a magic number: SkillId = Skill.Id + 0x40000000 + (npc.NpcTemplate.HuntingZoneId << 16);  
Magic Number,Tera.Data.Structures.Objects,Projectile,C:\repos\GoneUp_Temu\Shared\Data\Structures\Objects\Projectile.cs,Projectile,The following statement contains a magic number: Lifetime = Skill.ProjectileData.LifeTime != 0 ? Skill.ProjectileData.LifeTime : 1000;  
Magic Number,Tera.Data.Structures.Objects,Projectile,C:\repos\GoneUp_Temu\Shared\Data\Structures\Objects\Projectile.cs,Projectile,The following statement contains a magic number: if (projectileSkill.FlyingDistance <= 0f)  	TargetPosition = null;  else if (Skill != null) {  	if (TargetPosition.IsNull ()) {  		TargetPosition = Position.Clone ();  		TargetPosition.X += projectileSkill.FlyingDistance * (float)Math.Cos (angle);  		TargetPosition.Y += projectileSkill.FlyingDistance * (float)Math.Sin (angle);  	}  	Speed = (int)(projectileSkill.FlyingDistance * 1000 / Lifetime);  }  
Magic Number,Tera.Data.Structures.Objects,Projectile,C:\repos\GoneUp_Temu\Shared\Data\Structures\Objects\Projectile.cs,Projectile,The following statement contains a magic number: if (Skill != null) {  	if (TargetPosition.IsNull ()) {  		TargetPosition = Position.Clone ();  		TargetPosition.X += projectileSkill.FlyingDistance * (float)Math.Cos (angle);  		TargetPosition.Y += projectileSkill.FlyingDistance * (float)Math.Sin (angle);  	}  	Speed = (int)(projectileSkill.FlyingDistance * 1000 / Lifetime);  }  
Magic Number,Tera.Data.Structures.Objects,Projectile,C:\repos\GoneUp_Temu\Shared\Data\Structures\Objects\Projectile.cs,Projectile,The following statement contains a magic number: Speed = (int)(projectileSkill.FlyingDistance * 1000 / Lifetime);  
Magic Number,Tera.Data.Structures.Player,PlayerCraftStats,C:\repos\GoneUp_Temu\Shared\Data\Structures\Player\PlayerCraftStats.cs,ProgressCraftStat,The following statement contains a magic number: switch (stat) {  case CraftStat.Weaponsmithing:  case CraftStat.Focuscrafting:  case CraftStat.Armorsmithing:  case CraftStat.Leatherworking:  case CraftStat.Tailoring:  case CraftStat.Alchemy:  	if (CraftSkillCollection [stat] < 410)  		CraftSkillCollection [stat]++;  	break;  case CraftStat.ClothExtraction:  case CraftStat.MetalExtraction:  case CraftStat.AlchemyExtraction:  case CraftStat.LeatherExtraction:  	if (!ExtractSkillCollection.ContainsKey (stat))  		ExtractSkillCollection.Add (stat' 0);  	if (ExtractSkillCollection [stat] < 13)  		ExtractSkillCollection [stat]++;  	break;  }  
Magic Number,Tera.Data.Structures.Player,PlayerCraftStats,C:\repos\GoneUp_Temu\Shared\Data\Structures\Player\PlayerCraftStats.cs,ProgressCraftStat,The following statement contains a magic number: switch (stat) {  case CraftStat.Weaponsmithing:  case CraftStat.Focuscrafting:  case CraftStat.Armorsmithing:  case CraftStat.Leatherworking:  case CraftStat.Tailoring:  case CraftStat.Alchemy:  	if (CraftSkillCollection [stat] < 410)  		CraftSkillCollection [stat]++;  	break;  case CraftStat.ClothExtraction:  case CraftStat.MetalExtraction:  case CraftStat.AlchemyExtraction:  case CraftStat.LeatherExtraction:  	if (!ExtractSkillCollection.ContainsKey (stat))  		ExtractSkillCollection.Add (stat' 0);  	if (ExtractSkillCollection [stat] < 13)  		ExtractSkillCollection [stat]++;  	break;  }  
Magic Number,Tera.Data.Structures.Player,PlayerCraftStats,C:\repos\GoneUp_Temu\Shared\Data\Structures\Player\PlayerCraftStats.cs,ProgressCraftStat,The following statement contains a magic number: if (CraftSkillCollection [stat] < 410)  	CraftSkillCollection [stat]++;  
Magic Number,Tera.Data.Structures.Player,PlayerCraftStats,C:\repos\GoneUp_Temu\Shared\Data\Structures\Player\PlayerCraftStats.cs,ProgressCraftStat,The following statement contains a magic number: if (ExtractSkillCollection [stat] < 13)  	ExtractSkillCollection [stat]++;  
Magic Number,Tera.Data.Structures.Player,PlayerCraftStats,C:\repos\GoneUp_Temu\Shared\Data\Structures\Player\PlayerCraftStats.cs,ProgressGatherStat,The following statement contains a magic number: if (_gatherSkillCollection [typeName] > 300)  	return;  
Magic Number,Tera.Data.Structures.Player,Storage,C:\repos\GoneUp_Temu\Shared\Data\Structures\Player\Storage.cs,IsFull,The following statement contains a magic number: if (StorageType == StorageType.Inventory)  	for (int i = 20; i < Size + 20; i++) {  		if (Items.ContainsKey (i))  			count++;  	}  else  	count = Items.Count;  
Magic Number,Tera.Data.Structures.Player,Storage,C:\repos\GoneUp_Temu\Shared\Data\Structures\Player\Storage.cs,IsFull,The following statement contains a magic number: if (StorageType == StorageType.Inventory)  	for (int i = 20; i < Size + 20; i++) {  		if (Items.ContainsKey (i))  			count++;  	}  else  	count = Items.Count;  
Magic Number,Tera.Data.Structures.Player,Storage,C:\repos\GoneUp_Temu\Shared\Data\Structures\Player\Storage.cs,IsFull,The following statement contains a magic number: for (int i = 20; i < Size + 20; i++) {  	if (Items.ContainsKey (i))  		count++;  }  
Magic Number,Tera.Data.Structures.Player,Storage,C:\repos\GoneUp_Temu\Shared\Data\Structures\Player\Storage.cs,IsFull,The following statement contains a magic number: for (int i = 20; i < Size + 20; i++) {  	if (Items.ContainsKey (i))  		count++;  }  
Magic Number,Tera.Data.Structures.Player,Storage,C:\repos\GoneUp_Temu\Shared\Data\Structures\Player\Storage.cs,GetFreeSlot,The following statement contains a magic number: lock (ItemsLock) {  	for (int i = offset; i < Size; i++)  		if (StorageType == StorageType.Inventory) {  			if (!Items.ContainsKey (i + 20))  				return i + 20;  		}  		else {  			if (!Items.ContainsKey (i))  				return i;  		}  }  
Magic Number,Tera.Data.Structures.Player,Storage,C:\repos\GoneUp_Temu\Shared\Data\Structures\Player\Storage.cs,GetFreeSlot,The following statement contains a magic number: lock (ItemsLock) {  	for (int i = offset; i < Size; i++)  		if (StorageType == StorageType.Inventory) {  			if (!Items.ContainsKey (i + 20))  				return i + 20;  		}  		else {  			if (!Items.ContainsKey (i))  				return i;  		}  }  
Magic Number,Tera.Data.Structures.Player,Storage,C:\repos\GoneUp_Temu\Shared\Data\Structures\Player\Storage.cs,GetFreeSlot,The following statement contains a magic number: for (int i = offset; i < Size; i++)  	if (StorageType == StorageType.Inventory) {  		if (!Items.ContainsKey (i + 20))  			return i + 20;  	}  	else {  		if (!Items.ContainsKey (i))  			return i;  	}  
Magic Number,Tera.Data.Structures.Player,Storage,C:\repos\GoneUp_Temu\Shared\Data\Structures\Player\Storage.cs,GetFreeSlot,The following statement contains a magic number: for (int i = offset; i < Size; i++)  	if (StorageType == StorageType.Inventory) {  		if (!Items.ContainsKey (i + 20))  			return i + 20;  	}  	else {  		if (!Items.ContainsKey (i))  			return i;  	}  
Magic Number,Tera.Data.Structures.Player,Storage,C:\repos\GoneUp_Temu\Shared\Data\Structures\Player\Storage.cs,GetFreeSlot,The following statement contains a magic number: if (StorageType == StorageType.Inventory) {  	if (!Items.ContainsKey (i + 20))  		return i + 20;  }  else {  	if (!Items.ContainsKey (i))  		return i;  }  
Magic Number,Tera.Data.Structures.Player,Storage,C:\repos\GoneUp_Temu\Shared\Data\Structures\Player\Storage.cs,GetFreeSlot,The following statement contains a magic number: if (StorageType == StorageType.Inventory) {  	if (!Items.ContainsKey (i + 20))  		return i + 20;  }  else {  	if (!Items.ContainsKey (i))  		return i;  }  
Magic Number,Tera.Data.Structures.Player,Storage,C:\repos\GoneUp_Temu\Shared\Data\Structures\Player\Storage.cs,GetFreeSlot,The following statement contains a magic number: if (!Items.ContainsKey (i + 20))  	return i + 20;  
Magic Number,Tera.Data.Structures.Player,Storage,C:\repos\GoneUp_Temu\Shared\Data\Structures\Player\Storage.cs,GetFreeSlot,The following statement contains a magic number: if (!Items.ContainsKey (i + 20))  	return i + 20;  
Magic Number,Tera.Data.Structures.Player,Storage,C:\repos\GoneUp_Temu\Shared\Data\Structures\Player\Storage.cs,GetFreeSlot,The following statement contains a magic number: return i + 20;  
Magic Number,Tera.Data.Structures.Player,UseSkillArgs,C:\repos\GoneUp_Temu\Shared\Data\Structures\Player\UseSkillArgs.cs,GetSkill,The following statement contains a magic number: if (IsItemSkill && Data.Skills [0] [9999].ContainsKey (SkillId))  	return Data.Skills [0] [9999] [SkillId];  
Magic Number,Tera.Data.Structures.Player,UseSkillArgs,C:\repos\GoneUp_Temu\Shared\Data\Structures\Player\UseSkillArgs.cs,GetSkill,The following statement contains a magic number: if (IsItemSkill && Data.Skills [0] [9999].ContainsKey (SkillId))  	return Data.Skills [0] [9999] [SkillId];  
Magic Number,Tera.Data.Structures.Player,UseSkillArgs,C:\repos\GoneUp_Temu\Shared\Data\Structures\Player\UseSkillArgs.cs,GetSkill,The following statement contains a magic number: return Data.Skills [0] [9999] [SkillId];  
Magic Number,Tera.Data.Structures.SkillEngine,Animation,C:\repos\GoneUp_Temu\Shared\Data\Structures\SkillEngine\Animation.cs,Animation,The following statement contains a magic number: Distance = new List<float> (7);  
Magic Number,Tera.Data.Structures.SkillEngine,UserSkill,C:\repos\GoneUp_Temu\Shared\Data\Structures\SkillEngine\UserSkill.cs,UserSkill,The following statement contains a magic number: Cost = (int)(Level * 17.5);  
Magic Number,Tera.Data.Structures.Template,GatherSpawnTemplate,C:\repos\GoneUp_Temu\Shared\Data\Structures\Template\GatherSpawnTemplate.cs,GetGatherType,The following statement contains a magic number: return BitConverter.ToInt32 (Datas' 4);  
Magic Number,Tera.Data.Structures.Template,GatherSpawnTemplate,C:\repos\GoneUp_Temu\Shared\Data\Structures\Template\GatherSpawnTemplate.cs,GetX,The following statement contains a magic number: return BitConverter.ToSingle (Datas' 8);  
Magic Number,Tera.Data.Structures.Template,GatherSpawnTemplate,C:\repos\GoneUp_Temu\Shared\Data\Structures\Template\GatherSpawnTemplate.cs,GetY,The following statement contains a magic number: return BitConverter.ToSingle (Datas' 12);  
Magic Number,Tera.Data.Structures.Template,GatherSpawnTemplate,C:\repos\GoneUp_Temu\Shared\Data\Structures\Template\GatherSpawnTemplate.cs,GetZ,The following statement contains a magic number: return BitConverter.ToSingle (Datas' 16);  
Magic Number,Tera.Data.Structures.Template,NpcTemplate,C:\repos\GoneUp_Temu\Shared\Data\Structures\Template\NpcTemplate.cs,CalculateGameStats,The following statement contains a magic number: return new CreatureBaseStats {  	HpBase = (int)(700 * hpRate * template.Size.GetHashCode ())'  	MpBase = (int)(1000 * fullRate)'  	Attack = (int)(140 * fullRate)'  	Defense = (int)(40 * fullRate)'  	Impact = (int)(30 * smallRate)'  	Balance = (int)(30 * smallRate)'  	CritChanse = (int)(40 * smallRate)'  	CritResist = (int)(20 * smallRate)'  	CritPower = 2'  	Power = (int)(65 * smallRate)'  	Endurance = (int)(50 * smallRate)'  	ImpactFactor = (int)(50 * smallRate)'  	BalanceFactor = (int)(50 * smallRate)'  	AttackSpeed = 100'  	Movement = 100'  	WeakeningResist = 40'  	PeriodicResist = 40'  	StunResist = 40  };  
Magic Number,Tera.Data.Structures.Template,NpcTemplate,C:\repos\GoneUp_Temu\Shared\Data\Structures\Template\NpcTemplate.cs,CalculateGameStats,The following statement contains a magic number: return new CreatureBaseStats {  	HpBase = (int)(700 * hpRate * template.Size.GetHashCode ())'  	MpBase = (int)(1000 * fullRate)'  	Attack = (int)(140 * fullRate)'  	Defense = (int)(40 * fullRate)'  	Impact = (int)(30 * smallRate)'  	Balance = (int)(30 * smallRate)'  	CritChanse = (int)(40 * smallRate)'  	CritResist = (int)(20 * smallRate)'  	CritPower = 2'  	Power = (int)(65 * smallRate)'  	Endurance = (int)(50 * smallRate)'  	ImpactFactor = (int)(50 * smallRate)'  	BalanceFactor = (int)(50 * smallRate)'  	AttackSpeed = 100'  	Movement = 100'  	WeakeningResist = 40'  	PeriodicResist = 40'  	StunResist = 40  };  
Magic Number,Tera.Data.Structures.Template,NpcTemplate,C:\repos\GoneUp_Temu\Shared\Data\Structures\Template\NpcTemplate.cs,CalculateGameStats,The following statement contains a magic number: return new CreatureBaseStats {  	HpBase = (int)(700 * hpRate * template.Size.GetHashCode ())'  	MpBase = (int)(1000 * fullRate)'  	Attack = (int)(140 * fullRate)'  	Defense = (int)(40 * fullRate)'  	Impact = (int)(30 * smallRate)'  	Balance = (int)(30 * smallRate)'  	CritChanse = (int)(40 * smallRate)'  	CritResist = (int)(20 * smallRate)'  	CritPower = 2'  	Power = (int)(65 * smallRate)'  	Endurance = (int)(50 * smallRate)'  	ImpactFactor = (int)(50 * smallRate)'  	BalanceFactor = (int)(50 * smallRate)'  	AttackSpeed = 100'  	Movement = 100'  	WeakeningResist = 40'  	PeriodicResist = 40'  	StunResist = 40  };  
Magic Number,Tera.Data.Structures.Template,NpcTemplate,C:\repos\GoneUp_Temu\Shared\Data\Structures\Template\NpcTemplate.cs,CalculateGameStats,The following statement contains a magic number: return new CreatureBaseStats {  	HpBase = (int)(700 * hpRate * template.Size.GetHashCode ())'  	MpBase = (int)(1000 * fullRate)'  	Attack = (int)(140 * fullRate)'  	Defense = (int)(40 * fullRate)'  	Impact = (int)(30 * smallRate)'  	Balance = (int)(30 * smallRate)'  	CritChanse = (int)(40 * smallRate)'  	CritResist = (int)(20 * smallRate)'  	CritPower = 2'  	Power = (int)(65 * smallRate)'  	Endurance = (int)(50 * smallRate)'  	ImpactFactor = (int)(50 * smallRate)'  	BalanceFactor = (int)(50 * smallRate)'  	AttackSpeed = 100'  	Movement = 100'  	WeakeningResist = 40'  	PeriodicResist = 40'  	StunResist = 40  };  
Magic Number,Tera.Data.Structures.Template,NpcTemplate,C:\repos\GoneUp_Temu\Shared\Data\Structures\Template\NpcTemplate.cs,CalculateGameStats,The following statement contains a magic number: return new CreatureBaseStats {  	HpBase = (int)(700 * hpRate * template.Size.GetHashCode ())'  	MpBase = (int)(1000 * fullRate)'  	Attack = (int)(140 * fullRate)'  	Defense = (int)(40 * fullRate)'  	Impact = (int)(30 * smallRate)'  	Balance = (int)(30 * smallRate)'  	CritChanse = (int)(40 * smallRate)'  	CritResist = (int)(20 * smallRate)'  	CritPower = 2'  	Power = (int)(65 * smallRate)'  	Endurance = (int)(50 * smallRate)'  	ImpactFactor = (int)(50 * smallRate)'  	BalanceFactor = (int)(50 * smallRate)'  	AttackSpeed = 100'  	Movement = 100'  	WeakeningResist = 40'  	PeriodicResist = 40'  	StunResist = 40  };  
Magic Number,Tera.Data.Structures.Template,NpcTemplate,C:\repos\GoneUp_Temu\Shared\Data\Structures\Template\NpcTemplate.cs,CalculateGameStats,The following statement contains a magic number: return new CreatureBaseStats {  	HpBase = (int)(700 * hpRate * template.Size.GetHashCode ())'  	MpBase = (int)(1000 * fullRate)'  	Attack = (int)(140 * fullRate)'  	Defense = (int)(40 * fullRate)'  	Impact = (int)(30 * smallRate)'  	Balance = (int)(30 * smallRate)'  	CritChanse = (int)(40 * smallRate)'  	CritResist = (int)(20 * smallRate)'  	CritPower = 2'  	Power = (int)(65 * smallRate)'  	Endurance = (int)(50 * smallRate)'  	ImpactFactor = (int)(50 * smallRate)'  	BalanceFactor = (int)(50 * smallRate)'  	AttackSpeed = 100'  	Movement = 100'  	WeakeningResist = 40'  	PeriodicResist = 40'  	StunResist = 40  };  
Magic Number,Tera.Data.Structures.Template,NpcTemplate,C:\repos\GoneUp_Temu\Shared\Data\Structures\Template\NpcTemplate.cs,CalculateGameStats,The following statement contains a magic number: return new CreatureBaseStats {  	HpBase = (int)(700 * hpRate * template.Size.GetHashCode ())'  	MpBase = (int)(1000 * fullRate)'  	Attack = (int)(140 * fullRate)'  	Defense = (int)(40 * fullRate)'  	Impact = (int)(30 * smallRate)'  	Balance = (int)(30 * smallRate)'  	CritChanse = (int)(40 * smallRate)'  	CritResist = (int)(20 * smallRate)'  	CritPower = 2'  	Power = (int)(65 * smallRate)'  	Endurance = (int)(50 * smallRate)'  	ImpactFactor = (int)(50 * smallRate)'  	BalanceFactor = (int)(50 * smallRate)'  	AttackSpeed = 100'  	Movement = 100'  	WeakeningResist = 40'  	PeriodicResist = 40'  	StunResist = 40  };  
Magic Number,Tera.Data.Structures.Template,NpcTemplate,C:\repos\GoneUp_Temu\Shared\Data\Structures\Template\NpcTemplate.cs,CalculateGameStats,The following statement contains a magic number: return new CreatureBaseStats {  	HpBase = (int)(700 * hpRate * template.Size.GetHashCode ())'  	MpBase = (int)(1000 * fullRate)'  	Attack = (int)(140 * fullRate)'  	Defense = (int)(40 * fullRate)'  	Impact = (int)(30 * smallRate)'  	Balance = (int)(30 * smallRate)'  	CritChanse = (int)(40 * smallRate)'  	CritResist = (int)(20 * smallRate)'  	CritPower = 2'  	Power = (int)(65 * smallRate)'  	Endurance = (int)(50 * smallRate)'  	ImpactFactor = (int)(50 * smallRate)'  	BalanceFactor = (int)(50 * smallRate)'  	AttackSpeed = 100'  	Movement = 100'  	WeakeningResist = 40'  	PeriodicResist = 40'  	StunResist = 40  };  
Magic Number,Tera.Data.Structures.Template,NpcTemplate,C:\repos\GoneUp_Temu\Shared\Data\Structures\Template\NpcTemplate.cs,CalculateGameStats,The following statement contains a magic number: return new CreatureBaseStats {  	HpBase = (int)(700 * hpRate * template.Size.GetHashCode ())'  	MpBase = (int)(1000 * fullRate)'  	Attack = (int)(140 * fullRate)'  	Defense = (int)(40 * fullRate)'  	Impact = (int)(30 * smallRate)'  	Balance = (int)(30 * smallRate)'  	CritChanse = (int)(40 * smallRate)'  	CritResist = (int)(20 * smallRate)'  	CritPower = 2'  	Power = (int)(65 * smallRate)'  	Endurance = (int)(50 * smallRate)'  	ImpactFactor = (int)(50 * smallRate)'  	BalanceFactor = (int)(50 * smallRate)'  	AttackSpeed = 100'  	Movement = 100'  	WeakeningResist = 40'  	PeriodicResist = 40'  	StunResist = 40  };  
Magic Number,Tera.Data.Structures.Template,NpcTemplate,C:\repos\GoneUp_Temu\Shared\Data\Structures\Template\NpcTemplate.cs,CalculateGameStats,The following statement contains a magic number: return new CreatureBaseStats {  	HpBase = (int)(700 * hpRate * template.Size.GetHashCode ())'  	MpBase = (int)(1000 * fullRate)'  	Attack = (int)(140 * fullRate)'  	Defense = (int)(40 * fullRate)'  	Impact = (int)(30 * smallRate)'  	Balance = (int)(30 * smallRate)'  	CritChanse = (int)(40 * smallRate)'  	CritResist = (int)(20 * smallRate)'  	CritPower = 2'  	Power = (int)(65 * smallRate)'  	Endurance = (int)(50 * smallRate)'  	ImpactFactor = (int)(50 * smallRate)'  	BalanceFactor = (int)(50 * smallRate)'  	AttackSpeed = 100'  	Movement = 100'  	WeakeningResist = 40'  	PeriodicResist = 40'  	StunResist = 40  };  
Magic Number,Tera.Data.Structures.Template,NpcTemplate,C:\repos\GoneUp_Temu\Shared\Data\Structures\Template\NpcTemplate.cs,CalculateGameStats,The following statement contains a magic number: return new CreatureBaseStats {  	HpBase = (int)(700 * hpRate * template.Size.GetHashCode ())'  	MpBase = (int)(1000 * fullRate)'  	Attack = (int)(140 * fullRate)'  	Defense = (int)(40 * fullRate)'  	Impact = (int)(30 * smallRate)'  	Balance = (int)(30 * smallRate)'  	CritChanse = (int)(40 * smallRate)'  	CritResist = (int)(20 * smallRate)'  	CritPower = 2'  	Power = (int)(65 * smallRate)'  	Endurance = (int)(50 * smallRate)'  	ImpactFactor = (int)(50 * smallRate)'  	BalanceFactor = (int)(50 * smallRate)'  	AttackSpeed = 100'  	Movement = 100'  	WeakeningResist = 40'  	PeriodicResist = 40'  	StunResist = 40  };  
Magic Number,Tera.Data.Structures.Template,NpcTemplate,C:\repos\GoneUp_Temu\Shared\Data\Structures\Template\NpcTemplate.cs,CalculateGameStats,The following statement contains a magic number: return new CreatureBaseStats {  	HpBase = (int)(700 * hpRate * template.Size.GetHashCode ())'  	MpBase = (int)(1000 * fullRate)'  	Attack = (int)(140 * fullRate)'  	Defense = (int)(40 * fullRate)'  	Impact = (int)(30 * smallRate)'  	Balance = (int)(30 * smallRate)'  	CritChanse = (int)(40 * smallRate)'  	CritResist = (int)(20 * smallRate)'  	CritPower = 2'  	Power = (int)(65 * smallRate)'  	Endurance = (int)(50 * smallRate)'  	ImpactFactor = (int)(50 * smallRate)'  	BalanceFactor = (int)(50 * smallRate)'  	AttackSpeed = 100'  	Movement = 100'  	WeakeningResist = 40'  	PeriodicResist = 40'  	StunResist = 40  };  
Magic Number,Tera.Data.Structures.Template,NpcTemplate,C:\repos\GoneUp_Temu\Shared\Data\Structures\Template\NpcTemplate.cs,CalculateGameStats,The following statement contains a magic number: return new CreatureBaseStats {  	HpBase = (int)(700 * hpRate * template.Size.GetHashCode ())'  	MpBase = (int)(1000 * fullRate)'  	Attack = (int)(140 * fullRate)'  	Defense = (int)(40 * fullRate)'  	Impact = (int)(30 * smallRate)'  	Balance = (int)(30 * smallRate)'  	CritChanse = (int)(40 * smallRate)'  	CritResist = (int)(20 * smallRate)'  	CritPower = 2'  	Power = (int)(65 * smallRate)'  	Endurance = (int)(50 * smallRate)'  	ImpactFactor = (int)(50 * smallRate)'  	BalanceFactor = (int)(50 * smallRate)'  	AttackSpeed = 100'  	Movement = 100'  	WeakeningResist = 40'  	PeriodicResist = 40'  	StunResist = 40  };  
Magic Number,Tera.Data.Structures.Template,NpcTemplate,C:\repos\GoneUp_Temu\Shared\Data\Structures\Template\NpcTemplate.cs,CalculateGameStats,The following statement contains a magic number: return new CreatureBaseStats {  	HpBase = (int)(700 * hpRate * template.Size.GetHashCode ())'  	MpBase = (int)(1000 * fullRate)'  	Attack = (int)(140 * fullRate)'  	Defense = (int)(40 * fullRate)'  	Impact = (int)(30 * smallRate)'  	Balance = (int)(30 * smallRate)'  	CritChanse = (int)(40 * smallRate)'  	CritResist = (int)(20 * smallRate)'  	CritPower = 2'  	Power = (int)(65 * smallRate)'  	Endurance = (int)(50 * smallRate)'  	ImpactFactor = (int)(50 * smallRate)'  	BalanceFactor = (int)(50 * smallRate)'  	AttackSpeed = 100'  	Movement = 100'  	WeakeningResist = 40'  	PeriodicResist = 40'  	StunResist = 40  };  
Magic Number,Tera.Data.Structures.Template,NpcTemplate,C:\repos\GoneUp_Temu\Shared\Data\Structures\Template\NpcTemplate.cs,CalculateGameStats,The following statement contains a magic number: return new CreatureBaseStats {  	HpBase = (int)(700 * hpRate * template.Size.GetHashCode ())'  	MpBase = (int)(1000 * fullRate)'  	Attack = (int)(140 * fullRate)'  	Defense = (int)(40 * fullRate)'  	Impact = (int)(30 * smallRate)'  	Balance = (int)(30 * smallRate)'  	CritChanse = (int)(40 * smallRate)'  	CritResist = (int)(20 * smallRate)'  	CritPower = 2'  	Power = (int)(65 * smallRate)'  	Endurance = (int)(50 * smallRate)'  	ImpactFactor = (int)(50 * smallRate)'  	BalanceFactor = (int)(50 * smallRate)'  	AttackSpeed = 100'  	Movement = 100'  	WeakeningResist = 40'  	PeriodicResist = 40'  	StunResist = 40  };  
Magic Number,Tera.Data.Structures.Template,NpcTemplate,C:\repos\GoneUp_Temu\Shared\Data\Structures\Template\NpcTemplate.cs,CalculateGameStats,The following statement contains a magic number: return new CreatureBaseStats {  	HpBase = (int)(700 * hpRate * template.Size.GetHashCode ())'  	MpBase = (int)(1000 * fullRate)'  	Attack = (int)(140 * fullRate)'  	Defense = (int)(40 * fullRate)'  	Impact = (int)(30 * smallRate)'  	Balance = (int)(30 * smallRate)'  	CritChanse = (int)(40 * smallRate)'  	CritResist = (int)(20 * smallRate)'  	CritPower = 2'  	Power = (int)(65 * smallRate)'  	Endurance = (int)(50 * smallRate)'  	ImpactFactor = (int)(50 * smallRate)'  	BalanceFactor = (int)(50 * smallRate)'  	AttackSpeed = 100'  	Movement = 100'  	WeakeningResist = 40'  	PeriodicResist = 40'  	StunResist = 40  };  
Magic Number,Tera.Data.Structures.Template,NpcTemplate,C:\repos\GoneUp_Temu\Shared\Data\Structures\Template\NpcTemplate.cs,CalculateGameStats,The following statement contains a magic number: return new CreatureBaseStats {  	HpBase = (int)(700 * hpRate * template.Size.GetHashCode ())'  	MpBase = (int)(1000 * fullRate)'  	Attack = (int)(140 * fullRate)'  	Defense = (int)(40 * fullRate)'  	Impact = (int)(30 * smallRate)'  	Balance = (int)(30 * smallRate)'  	CritChanse = (int)(40 * smallRate)'  	CritResist = (int)(20 * smallRate)'  	CritPower = 2'  	Power = (int)(65 * smallRate)'  	Endurance = (int)(50 * smallRate)'  	ImpactFactor = (int)(50 * smallRate)'  	BalanceFactor = (int)(50 * smallRate)'  	AttackSpeed = 100'  	Movement = 100'  	WeakeningResist = 40'  	PeriodicResist = 40'  	StunResist = 40  };  
Magic Number,Tera.Data.Structures.Template,NpcTemplate,C:\repos\GoneUp_Temu\Shared\Data\Structures\Template\NpcTemplate.cs,CalculateGameStats,The following statement contains a magic number: return new CreatureBaseStats {  	HpBase = (int)(700 * hpRate * template.Size.GetHashCode ())'  	MpBase = (int)(1000 * fullRate)'  	Attack = (int)(140 * fullRate)'  	Defense = (int)(40 * fullRate)'  	Impact = (int)(30 * smallRate)'  	Balance = (int)(30 * smallRate)'  	CritChanse = (int)(40 * smallRate)'  	CritResist = (int)(20 * smallRate)'  	CritPower = 2'  	Power = (int)(65 * smallRate)'  	Endurance = (int)(50 * smallRate)'  	ImpactFactor = (int)(50 * smallRate)'  	BalanceFactor = (int)(50 * smallRate)'  	AttackSpeed = 100'  	Movement = 100'  	WeakeningResist = 40'  	PeriodicResist = 40'  	StunResist = 40  };  
Magic Number,Tera.Data.Structures.World,GeoLocation,C:\repos\GoneUp_Temu\Shared\Data\Structures\World\GeoLocation.cs,GetZ,The following statement contains a magic number: if (Points.Count == 3721) {  	int xo = ((int)x - StartX) / 256;  	int yo = ((int)y - StartY) / 256;  	if (xo == 61)  		xo = 60;  	if (yo == 61)  		yo = 60;  	int index = xo * 61 + yo;  	if (!OffsetZ.Equals (float.MinValue))  		return Points [index].Z + OffsetZ;  	return Points [index].Z;  }  
Magic Number,Tera.Data.Structures.World,GeoLocation,C:\repos\GoneUp_Temu\Shared\Data\Structures\World\GeoLocation.cs,GetZ,The following statement contains a magic number: if (Points.Count == 3721) {  	int xo = ((int)x - StartX) / 256;  	int yo = ((int)y - StartY) / 256;  	if (xo == 61)  		xo = 60;  	if (yo == 61)  		yo = 60;  	int index = xo * 61 + yo;  	if (!OffsetZ.Equals (float.MinValue))  		return Points [index].Z + OffsetZ;  	return Points [index].Z;  }  
Magic Number,Tera.Data.Structures.World,GeoLocation,C:\repos\GoneUp_Temu\Shared\Data\Structures\World\GeoLocation.cs,GetZ,The following statement contains a magic number: if (Points.Count == 3721) {  	int xo = ((int)x - StartX) / 256;  	int yo = ((int)y - StartY) / 256;  	if (xo == 61)  		xo = 60;  	if (yo == 61)  		yo = 60;  	int index = xo * 61 + yo;  	if (!OffsetZ.Equals (float.MinValue))  		return Points [index].Z + OffsetZ;  	return Points [index].Z;  }  
Magic Number,Tera.Data.Structures.World,GeoLocation,C:\repos\GoneUp_Temu\Shared\Data\Structures\World\GeoLocation.cs,GetZ,The following statement contains a magic number: if (Points.Count == 3721) {  	int xo = ((int)x - StartX) / 256;  	int yo = ((int)y - StartY) / 256;  	if (xo == 61)  		xo = 60;  	if (yo == 61)  		yo = 60;  	int index = xo * 61 + yo;  	if (!OffsetZ.Equals (float.MinValue))  		return Points [index].Z + OffsetZ;  	return Points [index].Z;  }  
Magic Number,Tera.Data.Structures.World,GeoLocation,C:\repos\GoneUp_Temu\Shared\Data\Structures\World\GeoLocation.cs,GetZ,The following statement contains a magic number: if (Points.Count == 3721) {  	int xo = ((int)x - StartX) / 256;  	int yo = ((int)y - StartY) / 256;  	if (xo == 61)  		xo = 60;  	if (yo == 61)  		yo = 60;  	int index = xo * 61 + yo;  	if (!OffsetZ.Equals (float.MinValue))  		return Points [index].Z + OffsetZ;  	return Points [index].Z;  }  
Magic Number,Tera.Data.Structures.World,GeoLocation,C:\repos\GoneUp_Temu\Shared\Data\Structures\World\GeoLocation.cs,GetZ,The following statement contains a magic number: if (Points.Count == 3721) {  	int xo = ((int)x - StartX) / 256;  	int yo = ((int)y - StartY) / 256;  	if (xo == 61)  		xo = 60;  	if (yo == 61)  		yo = 60;  	int index = xo * 61 + yo;  	if (!OffsetZ.Equals (float.MinValue))  		return Points [index].Z + OffsetZ;  	return Points [index].Z;  }  
Magic Number,Tera.Data.Structures.World,GeoLocation,C:\repos\GoneUp_Temu\Shared\Data\Structures\World\GeoLocation.cs,GetZ,The following statement contains a magic number: if (Points.Count == 3721) {  	int xo = ((int)x - StartX) / 256;  	int yo = ((int)y - StartY) / 256;  	if (xo == 61)  		xo = 60;  	if (yo == 61)  		yo = 60;  	int index = xo * 61 + yo;  	if (!OffsetZ.Equals (float.MinValue))  		return Points [index].Z + OffsetZ;  	return Points [index].Z;  }  
Magic Number,Tera.Data.Structures.World,GeoLocation,C:\repos\GoneUp_Temu\Shared\Data\Structures\World\GeoLocation.cs,GetZ,The following statement contains a magic number: if (Points.Count == 3721) {  	int xo = ((int)x - StartX) / 256;  	int yo = ((int)y - StartY) / 256;  	if (xo == 61)  		xo = 60;  	if (yo == 61)  		yo = 60;  	int index = xo * 61 + yo;  	if (!OffsetZ.Equals (float.MinValue))  		return Points [index].Z + OffsetZ;  	return Points [index].Z;  }  
Magic Number,Tera.Data.Structures.World,GeoLocation,C:\repos\GoneUp_Temu\Shared\Data\Structures\World\GeoLocation.cs,GetZ,The following statement contains a magic number: if (xo == 61)  	xo = 60;  
Magic Number,Tera.Data.Structures.World,GeoLocation,C:\repos\GoneUp_Temu\Shared\Data\Structures\World\GeoLocation.cs,GetZ,The following statement contains a magic number: if (xo == 61)  	xo = 60;  
Magic Number,Tera.Data.Structures.World,GeoLocation,C:\repos\GoneUp_Temu\Shared\Data\Structures\World\GeoLocation.cs,GetZ,The following statement contains a magic number: xo = 60;  
Magic Number,Tera.Data.Structures.World,GeoLocation,C:\repos\GoneUp_Temu\Shared\Data\Structures\World\GeoLocation.cs,GetZ,The following statement contains a magic number: if (yo == 61)  	yo = 60;  
Magic Number,Tera.Data.Structures.World,GeoLocation,C:\repos\GoneUp_Temu\Shared\Data\Structures\World\GeoLocation.cs,GetZ,The following statement contains a magic number: if (yo == 61)  	yo = 60;  
Magic Number,Tera.Data.Structures.World,GeoLocation,C:\repos\GoneUp_Temu\Shared\Data\Structures\World\GeoLocation.cs,GetZ,The following statement contains a magic number: yo = 60;  
Magic Number,Tera.Data.Structures.World,WorldPosition,C:\repos\GoneUp_Temu\Shared\Data\Structures\World\WorldPosition.cs,GetHeadingToTarget,The following statement contains a magic number: return Geom.GetHeading (((float)((worldPosition.X - X) / DistanceTo (worldPosition)) * 45)' ((float)((worldPosition.Y - Y) / DistanceTo (worldPosition)) * 45));  
Magic Number,Tera.Data.Structures.World,WorldPosition,C:\repos\GoneUp_Temu\Shared\Data\Structures\World\WorldPosition.cs,GetHeadingToTarget,The following statement contains a magic number: return Geom.GetHeading (((float)((worldPosition.X - X) / DistanceTo (worldPosition)) * 45)' ((float)((worldPosition.Y - Y) / DistanceTo (worldPosition)) * 45));  
Magic Number,Tera.Data.Structures.World.Requests,GuildCreate,C:\repos\GoneUp_Temu\Shared\Data\Structures\World\Requests\GuildCreate.cs,IsValid,The following statement contains a magic number: if (Owner.Inventory.Money < 3000)  	return false;  
Magic Number,Tera.Network.Protocol,KeyProtocol,C:\repos\GoneUp_Temu\Shared\Network\Protocol\KeyProtocol.cs,ReadKeyMessage,The following statement contains a magic number: if (Stream.Length < 128)  	return false;  
Magic Number,Tera.Network.Protocol,KeyProtocol,C:\repos\GoneUp_Temu\Shared\Network\Protocol\KeyProtocol.cs,ReadKeyMessage,The following statement contains a magic number: Stream.Read (message.Key' 0' 128);  
Magic Number,Utils,DelayedAction,C:\repos\GoneUp_Temu\Shared\Utils\DelayedAction.cs,CheckActions,The following statement contains a magic number: for (int i = 0; i < ActionList.Count; i++) {  	try {  		ActionList [i].Check ();  	}  	// ReSharper disable EmptyGeneralCatchClause  	catch// ReSharper restore EmptyGeneralCatchClause  	 {  		//Collection modified  	}  	if ((i & 511) == 0)  		// 2^N - 1  		Thread.Sleep (1);  }  
Magic Number,Utils,DelayedAction,C:\repos\GoneUp_Temu\Shared\Utils\DelayedAction.cs,CheckActions,The following statement contains a magic number: if ((i & 511) == 0)  	// 2^N - 1  	Thread.Sleep (1);  
Magic Number,Utils,Converter,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,HexStringToAscii,The following statement contains a magic number: for (int i = 0; i <= input.Length - 2; i += 2) {  	sb.Append (Convert.ToString (Convert.ToChar (Int32.Parse (input.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber))));  }  
Magic Number,Utils,Converter,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,HexStringToAscii,The following statement contains a magic number: for (int i = 0; i <= input.Length - 2; i += 2) {  	sb.Append (Convert.ToString (Convert.ToChar (Int32.Parse (input.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber))));  }  
Magic Number,Utils,Converter,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,HexStringToAscii,The following statement contains a magic number: for (int i = 0; i <= input.Length - 2; i += 2) {  	sb.Append (Convert.ToString (Convert.ToChar (Int32.Parse (input.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber))));  }  
Magic Number,Utils,Converter,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,HexStringToAscii,The following statement contains a magic number: i += 2
Magic Number,Utils,Converter,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,HexStringToAscii,The following statement contains a magic number: sb.Append (Convert.ToString (Convert.ToChar (Int32.Parse (input.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber))));  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,AppendBytesValue,The following statement contains a magic number: Array.Resize (ref _data' i + bytes.Length + 4);  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,AppendBytesValue,The following statement contains a magic number: bytes.CopyTo (_data' i + 4);  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,Build,The following statement contains a magic number: _data.CopyTo (result' 4);  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,ByteUtilities,The following statement contains a magic number: Baths = new string[256];  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,ByteUtilities,The following statement contains a magic number: for (int i = 0; i < 256; i++)  	Baths [i] = String.Format ("{0:X2}"' i);  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,FormatHex,The following statement contains a magic number: foreach (byte b in data) {  	if (count == 0)  		builder.AppendFormat ("{0'-6}\t"' "[" + (pass - 1) * 16 + "]");  	count++;  	builder.Append (b.ToString ("X2"));  	if (count == 4 || count == 8 || count == 12)  		builder.Append (" ");  	if (count == 16) {  		builder.Append ("\t");  		for (int i = (pass * count) - 16; i < (pass * count); i++) {  			char c = (char)data [i];  			if (c > 0x1f && c < 0x80)  				builder.Append (c);  			else  				builder.Append (".");  		}  		builder.Append ("\r\n");  		count = 0;  		pass++;  	}  }  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,FormatHex,The following statement contains a magic number: foreach (byte b in data) {  	if (count == 0)  		builder.AppendFormat ("{0'-6}\t"' "[" + (pass - 1) * 16 + "]");  	count++;  	builder.Append (b.ToString ("X2"));  	if (count == 4 || count == 8 || count == 12)  		builder.Append (" ");  	if (count == 16) {  		builder.Append ("\t");  		for (int i = (pass * count) - 16; i < (pass * count); i++) {  			char c = (char)data [i];  			if (c > 0x1f && c < 0x80)  				builder.Append (c);  			else  				builder.Append (".");  		}  		builder.Append ("\r\n");  		count = 0;  		pass++;  	}  }  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,FormatHex,The following statement contains a magic number: foreach (byte b in data) {  	if (count == 0)  		builder.AppendFormat ("{0'-6}\t"' "[" + (pass - 1) * 16 + "]");  	count++;  	builder.Append (b.ToString ("X2"));  	if (count == 4 || count == 8 || count == 12)  		builder.Append (" ");  	if (count == 16) {  		builder.Append ("\t");  		for (int i = (pass * count) - 16; i < (pass * count); i++) {  			char c = (char)data [i];  			if (c > 0x1f && c < 0x80)  				builder.Append (c);  			else  				builder.Append (".");  		}  		builder.Append ("\r\n");  		count = 0;  		pass++;  	}  }  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,FormatHex,The following statement contains a magic number: foreach (byte b in data) {  	if (count == 0)  		builder.AppendFormat ("{0'-6}\t"' "[" + (pass - 1) * 16 + "]");  	count++;  	builder.Append (b.ToString ("X2"));  	if (count == 4 || count == 8 || count == 12)  		builder.Append (" ");  	if (count == 16) {  		builder.Append ("\t");  		for (int i = (pass * count) - 16; i < (pass * count); i++) {  			char c = (char)data [i];  			if (c > 0x1f && c < 0x80)  				builder.Append (c);  			else  				builder.Append (".");  		}  		builder.Append ("\r\n");  		count = 0;  		pass++;  	}  }  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,FormatHex,The following statement contains a magic number: foreach (byte b in data) {  	if (count == 0)  		builder.AppendFormat ("{0'-6}\t"' "[" + (pass - 1) * 16 + "]");  	count++;  	builder.Append (b.ToString ("X2"));  	if (count == 4 || count == 8 || count == 12)  		builder.Append (" ");  	if (count == 16) {  		builder.Append ("\t");  		for (int i = (pass * count) - 16; i < (pass * count); i++) {  			char c = (char)data [i];  			if (c > 0x1f && c < 0x80)  				builder.Append (c);  			else  				builder.Append (".");  		}  		builder.Append ("\r\n");  		count = 0;  		pass++;  	}  }  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,FormatHex,The following statement contains a magic number: foreach (byte b in data) {  	if (count == 0)  		builder.AppendFormat ("{0'-6}\t"' "[" + (pass - 1) * 16 + "]");  	count++;  	builder.Append (b.ToString ("X2"));  	if (count == 4 || count == 8 || count == 12)  		builder.Append (" ");  	if (count == 16) {  		builder.Append ("\t");  		for (int i = (pass * count) - 16; i < (pass * count); i++) {  			char c = (char)data [i];  			if (c > 0x1f && c < 0x80)  				builder.Append (c);  			else  				builder.Append (".");  		}  		builder.Append ("\r\n");  		count = 0;  		pass++;  	}  }  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,FormatHex,The following statement contains a magic number: if (count == 0)  	builder.AppendFormat ("{0'-6}\t"' "[" + (pass - 1) * 16 + "]");  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,FormatHex,The following statement contains a magic number: builder.AppendFormat ("{0'-6}\t"' "[" + (pass - 1) * 16 + "]");  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,FormatHex,The following statement contains a magic number: if (count == 4 || count == 8 || count == 12)  	builder.Append (" ");  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,FormatHex,The following statement contains a magic number: if (count == 4 || count == 8 || count == 12)  	builder.Append (" ");  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,FormatHex,The following statement contains a magic number: if (count == 4 || count == 8 || count == 12)  	builder.Append (" ");  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,FormatHex,The following statement contains a magic number: if (count == 16) {  	builder.Append ("\t");  	for (int i = (pass * count) - 16; i < (pass * count); i++) {  		char c = (char)data [i];  		if (c > 0x1f && c < 0x80)  			builder.Append (c);  		else  			builder.Append (".");  	}  	builder.Append ("\r\n");  	count = 0;  	pass++;  }  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,FormatHex,The following statement contains a magic number: if (count == 16) {  	builder.Append ("\t");  	for (int i = (pass * count) - 16; i < (pass * count); i++) {  		char c = (char)data [i];  		if (c > 0x1f && c < 0x80)  			builder.Append (c);  		else  			builder.Append (".");  	}  	builder.Append ("\r\n");  	count = 0;  	pass++;  }  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,FormatHex,The following statement contains a magic number: for (int i = (pass * count) - 16; i < (pass * count); i++) {  	char c = (char)data [i];  	if (c > 0x1f && c < 0x80)  		builder.Append (c);  	else  		builder.Append (".");  }  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,HexToBytes,The following statement contains a magic number: return Enumerable.Range (0' hex.Length).Where (x => x % 2 == 0).Select (x => Convert.ToByte (hex.Substring (x' 2)' 16)).ToArray ();  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,HexToBytes,The following statement contains a magic number: return Enumerable.Range (0' hex.Length).Where (x => x % 2 == 0).Select (x => Convert.ToByte (hex.Substring (x' 2)' 16)).ToArray ();  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,HexToBytes,The following statement contains a magic number: return Enumerable.Range (0' hex.Length).Where (x => x % 2 == 0).Select (x => Convert.ToByte (hex.Substring (x' 2)' 16)).ToArray ();  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,HexSringToBytes,The following statement contains a magic number: try {  	byte[] result = new byte[hexString.Length / 2];  	for (int index = 0; index < result.Length; index++) {  		string byteValue = hexString.Substring (index * 2' 2);  		result [index] = byte.Parse (byteValue' NumberStyles.HexNumber' CultureInfo.InvariantCulture);  	}  	return result;  }  catch (Exception) {  	Console.WriteLine ("Invalid hex string: {0}"' hexString);  	throw;  }  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,HexSringToBytes,The following statement contains a magic number: try {  	byte[] result = new byte[hexString.Length / 2];  	for (int index = 0; index < result.Length; index++) {  		string byteValue = hexString.Substring (index * 2' 2);  		result [index] = byte.Parse (byteValue' NumberStyles.HexNumber' CultureInfo.InvariantCulture);  	}  	return result;  }  catch (Exception) {  	Console.WriteLine ("Invalid hex string: {0}"' hexString);  	throw;  }  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,HexSringToBytes,The following statement contains a magic number: try {  	byte[] result = new byte[hexString.Length / 2];  	for (int index = 0; index < result.Length; index++) {  		string byteValue = hexString.Substring (index * 2' 2);  		result [index] = byte.Parse (byteValue' NumberStyles.HexNumber' CultureInfo.InvariantCulture);  	}  	return result;  }  catch (Exception) {  	Console.WriteLine ("Invalid hex string: {0}"' hexString);  	throw;  }  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,HexSringToBytes,The following statement contains a magic number: for (int index = 0; index < result.Length; index++) {  	string byteValue = hexString.Substring (index * 2' 2);  	result [index] = byte.Parse (byteValue' NumberStyles.HexNumber' CultureInfo.InvariantCulture);  }  
Magic Number,Utils,ByteUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,HexSringToBytes,The following statement contains a magic number: for (int index = 0; index < result.Length; index++) {  	string byteValue = hexString.Substring (index * 2' 2);  	result [index] = byte.Parse (byteValue' NumberStyles.HexNumber' CultureInfo.InvariantCulture);  }  
Magic Number,Utils,RandomUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,DateTimeToInt,The following statement contains a magic number: return (int)(theDate.Date - new DateTime (1900' 1' 1)).TotalDays + 2;  
Magic Number,Utils,RandomUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,DateTimeToInt,The following statement contains a magic number: return (int)(theDate.Date - new DateTime (1900' 1' 1)).TotalDays + 2;  
Magic Number,Utils,RandomUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,IntToDateTime,The following statement contains a magic number: return new DateTime (1900' 1' 1).AddDays (intDate - 2);  
Magic Number,Utils,RandomUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,IntToDateTime,The following statement contains a magic number: return new DateTime (1900' 1' 1).AddDays (intDate - 2);  
Magic Number,Utils,RandomUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,IsLuck,The following statement contains a magic number: if (chance >= 100)  	return true;  
Magic Number,Utils,RandomUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,IsLuck,The following statement contains a magic number: return new Random ().Next (0' 100) <= chance;  
Magic Number,Utils,RandomUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,GetRoundedUtc,The following statement contains a magic number: return (int)Math.Round ((double)(GetCurrentMilliseconds () / 1000));  
Magic Number,Utils,StringUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,LongToString,The following statement contains a magic number: while (value != 0L) {  	long l1 = value;  	value /= 37L;  	ac [11 - i++] = validChars [(int)(l1 - value * 37L)];  }  
Magic Number,Utils,StringUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,LongToString,The following statement contains a magic number: ac [11 - i++] = validChars [(int)(l1 - value * 37L)];  
Magic Number,Utils,StringUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,LongToString,The following statement contains a magic number: return new string (ac' 12 - i' i);  
Magic Number,Utils,StringUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,StringToLong,The following statement contains a magic number: for (int i = 0; i < s.Length && i < 12; i++) {  	char c = s [i];  	l *= 37L;  	if (c >= 'A' && c <= 'Z')  		l += (1 + c) - 65;  	else if (c >= 'a' && c <= 'z')  		l += (1 + c) - 97;  	else if (c >= '0' && c <= '9')  		l += (27 + c) - 48;  }  
Magic Number,Utils,StringUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,StringToLong,The following statement contains a magic number: for (int i = 0; i < s.Length && i < 12; i++) {  	char c = s [i];  	l *= 37L;  	if (c >= 'A' && c <= 'Z')  		l += (1 + c) - 65;  	else if (c >= 'a' && c <= 'z')  		l += (1 + c) - 97;  	else if (c >= '0' && c <= '9')  		l += (27 + c) - 48;  }  
Magic Number,Utils,StringUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,StringToLong,The following statement contains a magic number: for (int i = 0; i < s.Length && i < 12; i++) {  	char c = s [i];  	l *= 37L;  	if (c >= 'A' && c <= 'Z')  		l += (1 + c) - 65;  	else if (c >= 'a' && c <= 'z')  		l += (1 + c) - 97;  	else if (c >= '0' && c <= '9')  		l += (27 + c) - 48;  }  
Magic Number,Utils,StringUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,StringToLong,The following statement contains a magic number: for (int i = 0; i < s.Length && i < 12; i++) {  	char c = s [i];  	l *= 37L;  	if (c >= 'A' && c <= 'Z')  		l += (1 + c) - 65;  	else if (c >= 'a' && c <= 'z')  		l += (1 + c) - 97;  	else if (c >= '0' && c <= '9')  		l += (27 + c) - 48;  }  
Magic Number,Utils,StringUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,StringToLong,The following statement contains a magic number: for (int i = 0; i < s.Length && i < 12; i++) {  	char c = s [i];  	l *= 37L;  	if (c >= 'A' && c <= 'Z')  		l += (1 + c) - 65;  	else if (c >= 'a' && c <= 'z')  		l += (1 + c) - 97;  	else if (c >= '0' && c <= '9')  		l += (27 + c) - 48;  }  
Magic Number,Utils,StringUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,StringToLong,The following statement contains a magic number: if (c >= 'A' && c <= 'Z')  	l += (1 + c) - 65;  else if (c >= 'a' && c <= 'z')  	l += (1 + c) - 97;  else if (c >= '0' && c <= '9')  	l += (27 + c) - 48;  
Magic Number,Utils,StringUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,StringToLong,The following statement contains a magic number: if (c >= 'A' && c <= 'Z')  	l += (1 + c) - 65;  else if (c >= 'a' && c <= 'z')  	l += (1 + c) - 97;  else if (c >= '0' && c <= '9')  	l += (27 + c) - 48;  
Magic Number,Utils,StringUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,StringToLong,The following statement contains a magic number: if (c >= 'A' && c <= 'Z')  	l += (1 + c) - 65;  else if (c >= 'a' && c <= 'z')  	l += (1 + c) - 97;  else if (c >= '0' && c <= '9')  	l += (27 + c) - 48;  
Magic Number,Utils,StringUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,StringToLong,The following statement contains a magic number: if (c >= 'A' && c <= 'Z')  	l += (1 + c) - 65;  else if (c >= 'a' && c <= 'z')  	l += (1 + c) - 97;  else if (c >= '0' && c <= '9')  	l += (27 + c) - 48;  
Magic Number,Utils,StringUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,StringToLong,The following statement contains a magic number: l += (1 + c) - 65;  
Magic Number,Utils,StringUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,StringToLong,The following statement contains a magic number: if (c >= 'a' && c <= 'z')  	l += (1 + c) - 97;  else if (c >= '0' && c <= '9')  	l += (27 + c) - 48;  
Magic Number,Utils,StringUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,StringToLong,The following statement contains a magic number: if (c >= 'a' && c <= 'z')  	l += (1 + c) - 97;  else if (c >= '0' && c <= '9')  	l += (27 + c) - 48;  
Magic Number,Utils,StringUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,StringToLong,The following statement contains a magic number: if (c >= 'a' && c <= 'z')  	l += (1 + c) - 97;  else if (c >= '0' && c <= '9')  	l += (27 + c) - 48;  
Magic Number,Utils,StringUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,StringToLong,The following statement contains a magic number: l += (1 + c) - 97;  
Magic Number,Utils,StringUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,StringToLong,The following statement contains a magic number: if (c >= '0' && c <= '9')  	l += (27 + c) - 48;  
Magic Number,Utils,StringUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,StringToLong,The following statement contains a magic number: if (c >= '0' && c <= '9')  	l += (27 + c) - 48;  
Magic Number,Utils,StringUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,StringToLong,The following statement contains a magic number: l += (27 + c) - 48;  
Magic Number,Utils,StringUtilities,C:\repos\GoneUp_Temu\Shared\Utils\Utils.cs,StringToLong,The following statement contains a magic number: l += (27 + c) - 48;  
Missing Default,Tera.Data.Structures.Player,PlayerCraftStats,C:\repos\GoneUp_Temu\Shared\Data\Structures\Player\PlayerCraftStats.cs,ProgressCraftStat,The following switch statement is missing a default case: switch (stat) {  case CraftStat.Weaponsmithing:  case CraftStat.Focuscrafting:  case CraftStat.Armorsmithing:  case CraftStat.Leatherworking:  case CraftStat.Tailoring:  case CraftStat.Alchemy:  	if (CraftSkillCollection [stat] < 410)  		CraftSkillCollection [stat]++;  	break;  case CraftStat.ClothExtraction:  case CraftStat.MetalExtraction:  case CraftStat.AlchemyExtraction:  case CraftStat.LeatherExtraction:  	if (!ExtractSkillCollection.ContainsKey (stat))  		ExtractSkillCollection.Add (stat' 0);  	if (ExtractSkillCollection [stat] < 13)  		ExtractSkillCollection [stat]++;  	break;  }  
