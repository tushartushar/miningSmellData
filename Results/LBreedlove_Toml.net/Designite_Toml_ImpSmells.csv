Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Toml,Array,F:\newReposMay17\LBreedlove_Toml.net\Toml\Array.cs,GetArrayType,Cyclomatic complexity of the method is 8
Complex Method,Toml,Array,F:\newReposMay17\LBreedlove_Toml.net\Toml\Array.cs,GetBestType,Cyclomatic complexity of the method is 15
Complex Method,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,GetNextEntry,Cyclomatic complexity of the method is 18
Complex Method,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeValueName,Cyclomatic complexity of the method is 8
Complex Method,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeValue,Cyclomatic complexity of the method is 12
Complex Method,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,Cyclomatic complexity of the method is 19
Long Parameter List,Toml,Entry,F:\newReposMay17\LBreedlove_Toml.net\Toml\Entry.cs,Entry,The method has 6 parameters.
Long Parameter List,Toml,Entry,F:\newReposMay17\LBreedlove_Toml.net\Toml\Entry.cs,Entry,The method has 6 parameters.
Long Statement,Toml,Array,F:\newReposMay17\LBreedlove_Toml.net\Toml\Array.cs,UpdateSourceText,The length of the statement  "	this.SourceText = string.Format ("{0}{1}{2}"' Parser.Tokens.ArrayStart' String.Join (Parser.Tokens.ArraySeparator.ToString ()' this.Children.Select (c => c.SourceText))' Parser.Tokens.ArrayEnd); " is 194.
Long Statement,Toml,Array,F:\newReposMay17\LBreedlove_Toml.net\Toml\Array.cs,GetArrayType,The length of the statement  "		var childTypes = this.Children.Where (c => c.ParsedType == TomlType.Array).Cast<Toml.Array> ().Select (ta => ta.GetArrayType ()); " is 129.
Long Statement,Toml,Array,F:\newReposMay17\LBreedlove_Toml.net\Toml\Array.cs,GetMaxDepth,The length of the statement  "	return 1 + this.Children.Where (c => c.ParsedType == TomlType.Array).Cast<Toml.Array> ().Select (c => c.GetMaxDepth ()).Concat (Array.EnumerableOfZero).Max (); " is 159.
Long Statement,Toml,Array,F:\newReposMay17\LBreedlove_Toml.net\Toml\Array.cs,GetMaxLength,The length of the statement  "	int maxChildLength = this.Children.Where (c => c.ParsedType == TomlType.Array).Cast<Toml.Array> ().Select (c => c.GetMaxDepth ()).Concat (Array.EnumerableOfZero).Max (); " is 169.
Long Statement,Toml,Entry,F:\newReposMay17\LBreedlove_Toml.net\Toml\Entry.cs,ToString,The length of the statement  "		return string.Format ("{0} {1} = {3}{2}{3}"' this.ParsedType.ToString ()' this.FullName' this.SourceText' this.ParsedType == TomlType.String ? "\"" : string.Empty); " is 164.
Long Statement,Toml,Serializer,F:\newReposMay17\LBreedlove_Toml.net\Toml\Serializer.cs,Serialize,The length of the statement  "		keyGroup = keyGroup.TrimStart (Toml.Parser.Tokens.KeyStart).TrimEnd (Toml.Parser.Tokens.KeyEnd).Trim (Toml.Parser.Tokens.KeySeparator); " is 135.
Long Statement,Toml,Serializer,F:\newReposMay17\LBreedlove_Toml.net\Toml\Serializer.cs,Serialize,The length of the statement  "	var properties = type.GetProperties ().Where (p => p.CanRead).Where (p => !p.GetCustomAttributes (typeof(NonSerializedAttribute)).Any ()); " is 138.
Long Statement,Toml,Serializer,F:\newReposMay17\LBreedlove_Toml.net\Toml\Serializer.cs,WriteNativeProperties,The length of the statement  "	return nativeProperties.Select (p => string.Format ("{0} {1} {2}"' p.Name' Toml.Parser.Tokens.ValueSeparator' GetNativeValueString (p.PropertyType' p.GetValue (owner)))).Select (ps => { " is 185.
Long Statement,Toml,Serializer,F:\newReposMay17\LBreedlove_Toml.net\Toml\Serializer.cs,WriteComplexProperties,The length of the statement  "	var complexProperties = properties.Where (p => !Serializer.IsNativeType (p.PropertyType) && !IsArrayType (p.PropertyType' p.GetValue (owner))); " is 143.
Long Statement,Toml,Serializer,F:\newReposMay17\LBreedlove_Toml.net\Toml\Serializer.cs,EscapeAndQuoteString,The length of the statement  "	return "\"" + value.Replace ("\\"' "\\\\").Replace ("\""' "\\\"").Replace ("\r"' "\\\r").Replace ("\n"' "\\\n").Replace ("\f"' "\\\f").Replace ("\t"' "\\\t") + "\""; " is 165.
Complex Conditional,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeValue,The conditional expression  "(curChar == 't') || (curChar == 'T') || (curChar == 'f') || (curChar == 'F')"  is complex.
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeMultilineString,The following statement contains a magic number: for (int idx = state.Position; idx < state.CurrentLine.Length; ++idx) {  	char curChar = state.CurrentLine [idx];  	if (isEscaping) {  		isEscaping = false;  		if ((curChar == Parser.Tokens.MultiLineQuoteStart) && (idx + 2 < state.CurrentLine.Length)) {  			state.CurrentValue += state.CurrentLine.Substring (lastConsumedPos' idx - lastConsumedPos);  			state.CurrentValue += Parser.Tokens.MultiLineQuoteStart;  			idx += 2;  			continue;  		} else {  			state.CurrentValue += GetEscapedCharacter (idx' curChar' state);  		}  		lastConsumedPos = idx + 1;  		continue;  	}  	if (curChar == Parser.Tokens.EscapeChar) {  		tokenBuilder = string.Empty;  		isEscaping = true;  		state.CurrentValue += state.CurrentLine.Substring (lastConsumedPos' idx - lastConsumedPos);  		continue;  	}  	if (curChar == Parser.Tokens.MultiLineQuoteEnd) {  		tokenBuilder += curChar;  		if (tokenBuilder == Parser.Tokens.MultiLineQuoteEndToken) {  			// we're done  			state.CurrentValue += state.CurrentLine.Substring (lastConsumedPos' idx - lastConsumedPos - 2);  			lastConsumedPos = idx + 1;  			state.Position = lastConsumedPos;  			state.Mode = (state.InArray ? Mode.SearchingForArraySeparator : Mode.Scanning);  			return state.CreateEntry (Entry.TomlType.String);  		}  	} else {  		tokenBuilder = string.Empty;  	}  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeMultilineString,The following statement contains a magic number: for (int idx = state.Position; idx < state.CurrentLine.Length; ++idx) {  	char curChar = state.CurrentLine [idx];  	if (isEscaping) {  		isEscaping = false;  		if ((curChar == Parser.Tokens.MultiLineQuoteStart) && (idx + 2 < state.CurrentLine.Length)) {  			state.CurrentValue += state.CurrentLine.Substring (lastConsumedPos' idx - lastConsumedPos);  			state.CurrentValue += Parser.Tokens.MultiLineQuoteStart;  			idx += 2;  			continue;  		} else {  			state.CurrentValue += GetEscapedCharacter (idx' curChar' state);  		}  		lastConsumedPos = idx + 1;  		continue;  	}  	if (curChar == Parser.Tokens.EscapeChar) {  		tokenBuilder = string.Empty;  		isEscaping = true;  		state.CurrentValue += state.CurrentLine.Substring (lastConsumedPos' idx - lastConsumedPos);  		continue;  	}  	if (curChar == Parser.Tokens.MultiLineQuoteEnd) {  		tokenBuilder += curChar;  		if (tokenBuilder == Parser.Tokens.MultiLineQuoteEndToken) {  			// we're done  			state.CurrentValue += state.CurrentLine.Substring (lastConsumedPos' idx - lastConsumedPos - 2);  			lastConsumedPos = idx + 1;  			state.Position = lastConsumedPos;  			state.Mode = (state.InArray ? Mode.SearchingForArraySeparator : Mode.Scanning);  			return state.CreateEntry (Entry.TomlType.String);  		}  	} else {  		tokenBuilder = string.Empty;  	}  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeMultilineString,The following statement contains a magic number: for (int idx = state.Position; idx < state.CurrentLine.Length; ++idx) {  	char curChar = state.CurrentLine [idx];  	if (isEscaping) {  		isEscaping = false;  		if ((curChar == Parser.Tokens.MultiLineQuoteStart) && (idx + 2 < state.CurrentLine.Length)) {  			state.CurrentValue += state.CurrentLine.Substring (lastConsumedPos' idx - lastConsumedPos);  			state.CurrentValue += Parser.Tokens.MultiLineQuoteStart;  			idx += 2;  			continue;  		} else {  			state.CurrentValue += GetEscapedCharacter (idx' curChar' state);  		}  		lastConsumedPos = idx + 1;  		continue;  	}  	if (curChar == Parser.Tokens.EscapeChar) {  		tokenBuilder = string.Empty;  		isEscaping = true;  		state.CurrentValue += state.CurrentLine.Substring (lastConsumedPos' idx - lastConsumedPos);  		continue;  	}  	if (curChar == Parser.Tokens.MultiLineQuoteEnd) {  		tokenBuilder += curChar;  		if (tokenBuilder == Parser.Tokens.MultiLineQuoteEndToken) {  			// we're done  			state.CurrentValue += state.CurrentLine.Substring (lastConsumedPos' idx - lastConsumedPos - 2);  			lastConsumedPos = idx + 1;  			state.Position = lastConsumedPos;  			state.Mode = (state.InArray ? Mode.SearchingForArraySeparator : Mode.Scanning);  			return state.CreateEntry (Entry.TomlType.String);  		}  	} else {  		tokenBuilder = string.Empty;  	}  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeMultilineString,The following statement contains a magic number: if (isEscaping) {  	isEscaping = false;  	if ((curChar == Parser.Tokens.MultiLineQuoteStart) && (idx + 2 < state.CurrentLine.Length)) {  		state.CurrentValue += state.CurrentLine.Substring (lastConsumedPos' idx - lastConsumedPos);  		state.CurrentValue += Parser.Tokens.MultiLineQuoteStart;  		idx += 2;  		continue;  	} else {  		state.CurrentValue += GetEscapedCharacter (idx' curChar' state);  	}  	lastConsumedPos = idx + 1;  	continue;  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeMultilineString,The following statement contains a magic number: if (isEscaping) {  	isEscaping = false;  	if ((curChar == Parser.Tokens.MultiLineQuoteStart) && (idx + 2 < state.CurrentLine.Length)) {  		state.CurrentValue += state.CurrentLine.Substring (lastConsumedPos' idx - lastConsumedPos);  		state.CurrentValue += Parser.Tokens.MultiLineQuoteStart;  		idx += 2;  		continue;  	} else {  		state.CurrentValue += GetEscapedCharacter (idx' curChar' state);  	}  	lastConsumedPos = idx + 1;  	continue;  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeMultilineString,The following statement contains a magic number: if ((curChar == Parser.Tokens.MultiLineQuoteStart) && (idx + 2 < state.CurrentLine.Length)) {  	state.CurrentValue += state.CurrentLine.Substring (lastConsumedPos' idx - lastConsumedPos);  	state.CurrentValue += Parser.Tokens.MultiLineQuoteStart;  	idx += 2;  	continue;  } else {  	state.CurrentValue += GetEscapedCharacter (idx' curChar' state);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeMultilineString,The following statement contains a magic number: if ((curChar == Parser.Tokens.MultiLineQuoteStart) && (idx + 2 < state.CurrentLine.Length)) {  	state.CurrentValue += state.CurrentLine.Substring (lastConsumedPos' idx - lastConsumedPos);  	state.CurrentValue += Parser.Tokens.MultiLineQuoteStart;  	idx += 2;  	continue;  } else {  	state.CurrentValue += GetEscapedCharacter (idx' curChar' state);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeMultilineString,The following statement contains a magic number: idx += 2;  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeMultilineString,The following statement contains a magic number: if (curChar == Parser.Tokens.MultiLineQuoteEnd) {  	tokenBuilder += curChar;  	if (tokenBuilder == Parser.Tokens.MultiLineQuoteEndToken) {  		// we're done  		state.CurrentValue += state.CurrentLine.Substring (lastConsumedPos' idx - lastConsumedPos - 2);  		lastConsumedPos = idx + 1;  		state.Position = lastConsumedPos;  		state.Mode = (state.InArray ? Mode.SearchingForArraySeparator : Mode.Scanning);  		return state.CreateEntry (Entry.TomlType.String);  	}  } else {  	tokenBuilder = string.Empty;  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeMultilineString,The following statement contains a magic number: if (tokenBuilder == Parser.Tokens.MultiLineQuoteEndToken) {  	// we're done  	state.CurrentValue += state.CurrentLine.Substring (lastConsumedPos' idx - lastConsumedPos - 2);  	lastConsumedPos = idx + 1;  	state.Position = lastConsumedPos;  	state.Mode = (state.InArray ? Mode.SearchingForArraySeparator : Mode.Scanning);  	return state.CreateEntry (Entry.TomlType.String);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeMultilineString,The following statement contains a magic number: state.CurrentValue += state.CurrentLine.Substring (lastConsumedPos' idx - lastConsumedPos - 2);  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeBoolean,The following statement contains a magic number: if (expectedValue) {  	if (state.CurrentLine.Length - state.Position < 4) {  		throw state.CreateError (Parser.Errors.InvalidValue);  	}  	if (!state.CurrentLine.Substring (state.Position' 4).Equals ("true"' StringComparison.OrdinalIgnoreCase)) {  		throw state.CreateError (Parser.Errors.InvalidValue);  	}  	state.Mode = state.InArray ? Mode.SearchingForArraySeparator : Mode.Scanning;  	state.CurrentValue = true.ToString ();  	return state.CreateEntry (Entry.TomlType.Boolean);  } else if (state.CurrentLine.Length - state.Position < 5) {  	throw state.CreateError (Parser.Errors.InvalidValue);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeBoolean,The following statement contains a magic number: if (expectedValue) {  	if (state.CurrentLine.Length - state.Position < 4) {  		throw state.CreateError (Parser.Errors.InvalidValue);  	}  	if (!state.CurrentLine.Substring (state.Position' 4).Equals ("true"' StringComparison.OrdinalIgnoreCase)) {  		throw state.CreateError (Parser.Errors.InvalidValue);  	}  	state.Mode = state.InArray ? Mode.SearchingForArraySeparator : Mode.Scanning;  	state.CurrentValue = true.ToString ();  	return state.CreateEntry (Entry.TomlType.Boolean);  } else if (state.CurrentLine.Length - state.Position < 5) {  	throw state.CreateError (Parser.Errors.InvalidValue);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeBoolean,The following statement contains a magic number: if (expectedValue) {  	if (state.CurrentLine.Length - state.Position < 4) {  		throw state.CreateError (Parser.Errors.InvalidValue);  	}  	if (!state.CurrentLine.Substring (state.Position' 4).Equals ("true"' StringComparison.OrdinalIgnoreCase)) {  		throw state.CreateError (Parser.Errors.InvalidValue);  	}  	state.Mode = state.InArray ? Mode.SearchingForArraySeparator : Mode.Scanning;  	state.CurrentValue = true.ToString ();  	return state.CreateEntry (Entry.TomlType.Boolean);  } else if (state.CurrentLine.Length - state.Position < 5) {  	throw state.CreateError (Parser.Errors.InvalidValue);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeBoolean,The following statement contains a magic number: if (state.CurrentLine.Length - state.Position < 4) {  	throw state.CreateError (Parser.Errors.InvalidValue);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeBoolean,The following statement contains a magic number: if (!state.CurrentLine.Substring (state.Position' 4).Equals ("true"' StringComparison.OrdinalIgnoreCase)) {  	throw state.CreateError (Parser.Errors.InvalidValue);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeBoolean,The following statement contains a magic number: if (state.CurrentLine.Length - state.Position < 5) {  	throw state.CreateError (Parser.Errors.InvalidValue);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeBoolean,The following statement contains a magic number: if (!state.CurrentLine.Substring (state.Position' 5).Equals ("false"' StringComparison.OrdinalIgnoreCase)) {  	throw state.CreateError (Parser.Errors.InvalidValue);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: for (idx = state.Position; idx < state.CurrentLine.Length; ++idx) {  	char curChar = state.CurrentLine [idx];  	if (IsWhitespace (curChar)) {  		break;  	}  	if (curChar == Parser.Tokens.Comment) {  		throw state.CreateError (idx' Parser.Errors.UnexpectedCommentInValue);  	}  	if (curChar == Parser.Tokens.Negative) {  		if (dashCount == 0) {  			++dashCount;  			if ((digitCount == 4) || (digitCount == 0)) {  				continue;  			}  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		} else if (dashCount == 1) {  			++dashCount;  			if ((digitCount == 5) || (digitCount == 6)) {  				continue;  			}  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		} else if (dashCount == 2) {  			++dashCount;  			if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  				return ConsumeDateTime (state);  			}  		} else {  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		}  	}  	if (curChar == Parser.Tokens.Decimal) {  		if (receivedDecimal) {  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		}  		receivedDecimal = true;  	}  	if (!char.IsDigit (curChar)) {  		if ((dashCount == 2) && ((curChar == 'T') || (IsWhitespace (curChar)))) {  			return ConsumeDateTime (state);  		}  		if ((curChar != Parser.Tokens.KeyStart) && (!IsWhitespace (curChar))) {  			if (state.InArray && curChar != Parser.Tokens.ArraySeparator && curChar != Parser.Tokens.ArrayEnd) {  				throw state.CreateError (idx' Parser.Errors.InvalidValue);  			}  			break;  		} else {  			break;  		}  	} else {  		++digitCount;  	}  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: for (idx = state.Position; idx < state.CurrentLine.Length; ++idx) {  	char curChar = state.CurrentLine [idx];  	if (IsWhitespace (curChar)) {  		break;  	}  	if (curChar == Parser.Tokens.Comment) {  		throw state.CreateError (idx' Parser.Errors.UnexpectedCommentInValue);  	}  	if (curChar == Parser.Tokens.Negative) {  		if (dashCount == 0) {  			++dashCount;  			if ((digitCount == 4) || (digitCount == 0)) {  				continue;  			}  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		} else if (dashCount == 1) {  			++dashCount;  			if ((digitCount == 5) || (digitCount == 6)) {  				continue;  			}  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		} else if (dashCount == 2) {  			++dashCount;  			if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  				return ConsumeDateTime (state);  			}  		} else {  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		}  	}  	if (curChar == Parser.Tokens.Decimal) {  		if (receivedDecimal) {  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		}  		receivedDecimal = true;  	}  	if (!char.IsDigit (curChar)) {  		if ((dashCount == 2) && ((curChar == 'T') || (IsWhitespace (curChar)))) {  			return ConsumeDateTime (state);  		}  		if ((curChar != Parser.Tokens.KeyStart) && (!IsWhitespace (curChar))) {  			if (state.InArray && curChar != Parser.Tokens.ArraySeparator && curChar != Parser.Tokens.ArrayEnd) {  				throw state.CreateError (idx' Parser.Errors.InvalidValue);  			}  			break;  		} else {  			break;  		}  	} else {  		++digitCount;  	}  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: for (idx = state.Position; idx < state.CurrentLine.Length; ++idx) {  	char curChar = state.CurrentLine [idx];  	if (IsWhitespace (curChar)) {  		break;  	}  	if (curChar == Parser.Tokens.Comment) {  		throw state.CreateError (idx' Parser.Errors.UnexpectedCommentInValue);  	}  	if (curChar == Parser.Tokens.Negative) {  		if (dashCount == 0) {  			++dashCount;  			if ((digitCount == 4) || (digitCount == 0)) {  				continue;  			}  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		} else if (dashCount == 1) {  			++dashCount;  			if ((digitCount == 5) || (digitCount == 6)) {  				continue;  			}  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		} else if (dashCount == 2) {  			++dashCount;  			if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  				return ConsumeDateTime (state);  			}  		} else {  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		}  	}  	if (curChar == Parser.Tokens.Decimal) {  		if (receivedDecimal) {  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		}  		receivedDecimal = true;  	}  	if (!char.IsDigit (curChar)) {  		if ((dashCount == 2) && ((curChar == 'T') || (IsWhitespace (curChar)))) {  			return ConsumeDateTime (state);  		}  		if ((curChar != Parser.Tokens.KeyStart) && (!IsWhitespace (curChar))) {  			if (state.InArray && curChar != Parser.Tokens.ArraySeparator && curChar != Parser.Tokens.ArrayEnd) {  				throw state.CreateError (idx' Parser.Errors.InvalidValue);  			}  			break;  		} else {  			break;  		}  	} else {  		++digitCount;  	}  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: for (idx = state.Position; idx < state.CurrentLine.Length; ++idx) {  	char curChar = state.CurrentLine [idx];  	if (IsWhitespace (curChar)) {  		break;  	}  	if (curChar == Parser.Tokens.Comment) {  		throw state.CreateError (idx' Parser.Errors.UnexpectedCommentInValue);  	}  	if (curChar == Parser.Tokens.Negative) {  		if (dashCount == 0) {  			++dashCount;  			if ((digitCount == 4) || (digitCount == 0)) {  				continue;  			}  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		} else if (dashCount == 1) {  			++dashCount;  			if ((digitCount == 5) || (digitCount == 6)) {  				continue;  			}  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		} else if (dashCount == 2) {  			++dashCount;  			if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  				return ConsumeDateTime (state);  			}  		} else {  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		}  	}  	if (curChar == Parser.Tokens.Decimal) {  		if (receivedDecimal) {  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		}  		receivedDecimal = true;  	}  	if (!char.IsDigit (curChar)) {  		if ((dashCount == 2) && ((curChar == 'T') || (IsWhitespace (curChar)))) {  			return ConsumeDateTime (state);  		}  		if ((curChar != Parser.Tokens.KeyStart) && (!IsWhitespace (curChar))) {  			if (state.InArray && curChar != Parser.Tokens.ArraySeparator && curChar != Parser.Tokens.ArrayEnd) {  				throw state.CreateError (idx' Parser.Errors.InvalidValue);  			}  			break;  		} else {  			break;  		}  	} else {  		++digitCount;  	}  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: for (idx = state.Position; idx < state.CurrentLine.Length; ++idx) {  	char curChar = state.CurrentLine [idx];  	if (IsWhitespace (curChar)) {  		break;  	}  	if (curChar == Parser.Tokens.Comment) {  		throw state.CreateError (idx' Parser.Errors.UnexpectedCommentInValue);  	}  	if (curChar == Parser.Tokens.Negative) {  		if (dashCount == 0) {  			++dashCount;  			if ((digitCount == 4) || (digitCount == 0)) {  				continue;  			}  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		} else if (dashCount == 1) {  			++dashCount;  			if ((digitCount == 5) || (digitCount == 6)) {  				continue;  			}  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		} else if (dashCount == 2) {  			++dashCount;  			if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  				return ConsumeDateTime (state);  			}  		} else {  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		}  	}  	if (curChar == Parser.Tokens.Decimal) {  		if (receivedDecimal) {  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		}  		receivedDecimal = true;  	}  	if (!char.IsDigit (curChar)) {  		if ((dashCount == 2) && ((curChar == 'T') || (IsWhitespace (curChar)))) {  			return ConsumeDateTime (state);  		}  		if ((curChar != Parser.Tokens.KeyStart) && (!IsWhitespace (curChar))) {  			if (state.InArray && curChar != Parser.Tokens.ArraySeparator && curChar != Parser.Tokens.ArrayEnd) {  				throw state.CreateError (idx' Parser.Errors.InvalidValue);  			}  			break;  		} else {  			break;  		}  	} else {  		++digitCount;  	}  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: for (idx = state.Position; idx < state.CurrentLine.Length; ++idx) {  	char curChar = state.CurrentLine [idx];  	if (IsWhitespace (curChar)) {  		break;  	}  	if (curChar == Parser.Tokens.Comment) {  		throw state.CreateError (idx' Parser.Errors.UnexpectedCommentInValue);  	}  	if (curChar == Parser.Tokens.Negative) {  		if (dashCount == 0) {  			++dashCount;  			if ((digitCount == 4) || (digitCount == 0)) {  				continue;  			}  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		} else if (dashCount == 1) {  			++dashCount;  			if ((digitCount == 5) || (digitCount == 6)) {  				continue;  			}  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		} else if (dashCount == 2) {  			++dashCount;  			if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  				return ConsumeDateTime (state);  			}  		} else {  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		}  	}  	if (curChar == Parser.Tokens.Decimal) {  		if (receivedDecimal) {  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		}  		receivedDecimal = true;  	}  	if (!char.IsDigit (curChar)) {  		if ((dashCount == 2) && ((curChar == 'T') || (IsWhitespace (curChar)))) {  			return ConsumeDateTime (state);  		}  		if ((curChar != Parser.Tokens.KeyStart) && (!IsWhitespace (curChar))) {  			if (state.InArray && curChar != Parser.Tokens.ArraySeparator && curChar != Parser.Tokens.ArrayEnd) {  				throw state.CreateError (idx' Parser.Errors.InvalidValue);  			}  			break;  		} else {  			break;  		}  	} else {  		++digitCount;  	}  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: for (idx = state.Position; idx < state.CurrentLine.Length; ++idx) {  	char curChar = state.CurrentLine [idx];  	if (IsWhitespace (curChar)) {  		break;  	}  	if (curChar == Parser.Tokens.Comment) {  		throw state.CreateError (idx' Parser.Errors.UnexpectedCommentInValue);  	}  	if (curChar == Parser.Tokens.Negative) {  		if (dashCount == 0) {  			++dashCount;  			if ((digitCount == 4) || (digitCount == 0)) {  				continue;  			}  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		} else if (dashCount == 1) {  			++dashCount;  			if ((digitCount == 5) || (digitCount == 6)) {  				continue;  			}  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		} else if (dashCount == 2) {  			++dashCount;  			if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  				return ConsumeDateTime (state);  			}  		} else {  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		}  	}  	if (curChar == Parser.Tokens.Decimal) {  		if (receivedDecimal) {  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		}  		receivedDecimal = true;  	}  	if (!char.IsDigit (curChar)) {  		if ((dashCount == 2) && ((curChar == 'T') || (IsWhitespace (curChar)))) {  			return ConsumeDateTime (state);  		}  		if ((curChar != Parser.Tokens.KeyStart) && (!IsWhitespace (curChar))) {  			if (state.InArray && curChar != Parser.Tokens.ArraySeparator && curChar != Parser.Tokens.ArrayEnd) {  				throw state.CreateError (idx' Parser.Errors.InvalidValue);  			}  			break;  		} else {  			break;  		}  	} else {  		++digitCount;  	}  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: for (idx = state.Position; idx < state.CurrentLine.Length; ++idx) {  	char curChar = state.CurrentLine [idx];  	if (IsWhitespace (curChar)) {  		break;  	}  	if (curChar == Parser.Tokens.Comment) {  		throw state.CreateError (idx' Parser.Errors.UnexpectedCommentInValue);  	}  	if (curChar == Parser.Tokens.Negative) {  		if (dashCount == 0) {  			++dashCount;  			if ((digitCount == 4) || (digitCount == 0)) {  				continue;  			}  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		} else if (dashCount == 1) {  			++dashCount;  			if ((digitCount == 5) || (digitCount == 6)) {  				continue;  			}  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		} else if (dashCount == 2) {  			++dashCount;  			if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  				return ConsumeDateTime (state);  			}  		} else {  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		}  	}  	if (curChar == Parser.Tokens.Decimal) {  		if (receivedDecimal) {  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		}  		receivedDecimal = true;  	}  	if (!char.IsDigit (curChar)) {  		if ((dashCount == 2) && ((curChar == 'T') || (IsWhitespace (curChar)))) {  			return ConsumeDateTime (state);  		}  		if ((curChar != Parser.Tokens.KeyStart) && (!IsWhitespace (curChar))) {  			if (state.InArray && curChar != Parser.Tokens.ArraySeparator && curChar != Parser.Tokens.ArrayEnd) {  				throw state.CreateError (idx' Parser.Errors.InvalidValue);  			}  			break;  		} else {  			break;  		}  	} else {  		++digitCount;  	}  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if (curChar == Parser.Tokens.Negative) {  	if (dashCount == 0) {  		++dashCount;  		if ((digitCount == 4) || (digitCount == 0)) {  			continue;  		}  		throw state.CreateError (idx' Parser.Errors.InvalidValue);  	} else if (dashCount == 1) {  		++dashCount;  		if ((digitCount == 5) || (digitCount == 6)) {  			continue;  		}  		throw state.CreateError (idx' Parser.Errors.InvalidValue);  	} else if (dashCount == 2) {  		++dashCount;  		if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  			return ConsumeDateTime (state);  		}  	} else {  		throw state.CreateError (idx' Parser.Errors.InvalidValue);  	}  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if (curChar == Parser.Tokens.Negative) {  	if (dashCount == 0) {  		++dashCount;  		if ((digitCount == 4) || (digitCount == 0)) {  			continue;  		}  		throw state.CreateError (idx' Parser.Errors.InvalidValue);  	} else if (dashCount == 1) {  		++dashCount;  		if ((digitCount == 5) || (digitCount == 6)) {  			continue;  		}  		throw state.CreateError (idx' Parser.Errors.InvalidValue);  	} else if (dashCount == 2) {  		++dashCount;  		if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  			return ConsumeDateTime (state);  		}  	} else {  		throw state.CreateError (idx' Parser.Errors.InvalidValue);  	}  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if (curChar == Parser.Tokens.Negative) {  	if (dashCount == 0) {  		++dashCount;  		if ((digitCount == 4) || (digitCount == 0)) {  			continue;  		}  		throw state.CreateError (idx' Parser.Errors.InvalidValue);  	} else if (dashCount == 1) {  		++dashCount;  		if ((digitCount == 5) || (digitCount == 6)) {  			continue;  		}  		throw state.CreateError (idx' Parser.Errors.InvalidValue);  	} else if (dashCount == 2) {  		++dashCount;  		if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  			return ConsumeDateTime (state);  		}  	} else {  		throw state.CreateError (idx' Parser.Errors.InvalidValue);  	}  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if (curChar == Parser.Tokens.Negative) {  	if (dashCount == 0) {  		++dashCount;  		if ((digitCount == 4) || (digitCount == 0)) {  			continue;  		}  		throw state.CreateError (idx' Parser.Errors.InvalidValue);  	} else if (dashCount == 1) {  		++dashCount;  		if ((digitCount == 5) || (digitCount == 6)) {  			continue;  		}  		throw state.CreateError (idx' Parser.Errors.InvalidValue);  	} else if (dashCount == 2) {  		++dashCount;  		if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  			return ConsumeDateTime (state);  		}  	} else {  		throw state.CreateError (idx' Parser.Errors.InvalidValue);  	}  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if (curChar == Parser.Tokens.Negative) {  	if (dashCount == 0) {  		++dashCount;  		if ((digitCount == 4) || (digitCount == 0)) {  			continue;  		}  		throw state.CreateError (idx' Parser.Errors.InvalidValue);  	} else if (dashCount == 1) {  		++dashCount;  		if ((digitCount == 5) || (digitCount == 6)) {  			continue;  		}  		throw state.CreateError (idx' Parser.Errors.InvalidValue);  	} else if (dashCount == 2) {  		++dashCount;  		if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  			return ConsumeDateTime (state);  		}  	} else {  		throw state.CreateError (idx' Parser.Errors.InvalidValue);  	}  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if (curChar == Parser.Tokens.Negative) {  	if (dashCount == 0) {  		++dashCount;  		if ((digitCount == 4) || (digitCount == 0)) {  			continue;  		}  		throw state.CreateError (idx' Parser.Errors.InvalidValue);  	} else if (dashCount == 1) {  		++dashCount;  		if ((digitCount == 5) || (digitCount == 6)) {  			continue;  		}  		throw state.CreateError (idx' Parser.Errors.InvalidValue);  	} else if (dashCount == 2) {  		++dashCount;  		if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  			return ConsumeDateTime (state);  		}  	} else {  		throw state.CreateError (idx' Parser.Errors.InvalidValue);  	}  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if (curChar == Parser.Tokens.Negative) {  	if (dashCount == 0) {  		++dashCount;  		if ((digitCount == 4) || (digitCount == 0)) {  			continue;  		}  		throw state.CreateError (idx' Parser.Errors.InvalidValue);  	} else if (dashCount == 1) {  		++dashCount;  		if ((digitCount == 5) || (digitCount == 6)) {  			continue;  		}  		throw state.CreateError (idx' Parser.Errors.InvalidValue);  	} else if (dashCount == 2) {  		++dashCount;  		if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  			return ConsumeDateTime (state);  		}  	} else {  		throw state.CreateError (idx' Parser.Errors.InvalidValue);  	}  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if (dashCount == 0) {  	++dashCount;  	if ((digitCount == 4) || (digitCount == 0)) {  		continue;  	}  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  } else if (dashCount == 1) {  	++dashCount;  	if ((digitCount == 5) || (digitCount == 6)) {  		continue;  	}  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  } else if (dashCount == 2) {  	++dashCount;  	if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  		return ConsumeDateTime (state);  	}  } else {  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if (dashCount == 0) {  	++dashCount;  	if ((digitCount == 4) || (digitCount == 0)) {  		continue;  	}  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  } else if (dashCount == 1) {  	++dashCount;  	if ((digitCount == 5) || (digitCount == 6)) {  		continue;  	}  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  } else if (dashCount == 2) {  	++dashCount;  	if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  		return ConsumeDateTime (state);  	}  } else {  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if (dashCount == 0) {  	++dashCount;  	if ((digitCount == 4) || (digitCount == 0)) {  		continue;  	}  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  } else if (dashCount == 1) {  	++dashCount;  	if ((digitCount == 5) || (digitCount == 6)) {  		continue;  	}  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  } else if (dashCount == 2) {  	++dashCount;  	if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  		return ConsumeDateTime (state);  	}  } else {  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if (dashCount == 0) {  	++dashCount;  	if ((digitCount == 4) || (digitCount == 0)) {  		continue;  	}  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  } else if (dashCount == 1) {  	++dashCount;  	if ((digitCount == 5) || (digitCount == 6)) {  		continue;  	}  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  } else if (dashCount == 2) {  	++dashCount;  	if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  		return ConsumeDateTime (state);  	}  } else {  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if (dashCount == 0) {  	++dashCount;  	if ((digitCount == 4) || (digitCount == 0)) {  		continue;  	}  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  } else if (dashCount == 1) {  	++dashCount;  	if ((digitCount == 5) || (digitCount == 6)) {  		continue;  	}  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  } else if (dashCount == 2) {  	++dashCount;  	if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  		return ConsumeDateTime (state);  	}  } else {  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if (dashCount == 0) {  	++dashCount;  	if ((digitCount == 4) || (digitCount == 0)) {  		continue;  	}  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  } else if (dashCount == 1) {  	++dashCount;  	if ((digitCount == 5) || (digitCount == 6)) {  		continue;  	}  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  } else if (dashCount == 2) {  	++dashCount;  	if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  		return ConsumeDateTime (state);  	}  } else {  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if (dashCount == 0) {  	++dashCount;  	if ((digitCount == 4) || (digitCount == 0)) {  		continue;  	}  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  } else if (dashCount == 1) {  	++dashCount;  	if ((digitCount == 5) || (digitCount == 6)) {  		continue;  	}  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  } else if (dashCount == 2) {  	++dashCount;  	if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  		return ConsumeDateTime (state);  	}  } else {  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if ((digitCount == 4) || (digitCount == 0)) {  	continue;  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if (dashCount == 1) {  	++dashCount;  	if ((digitCount == 5) || (digitCount == 6)) {  		continue;  	}  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  } else if (dashCount == 2) {  	++dashCount;  	if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  		return ConsumeDateTime (state);  	}  } else {  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if (dashCount == 1) {  	++dashCount;  	if ((digitCount == 5) || (digitCount == 6)) {  		continue;  	}  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  } else if (dashCount == 2) {  	++dashCount;  	if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  		return ConsumeDateTime (state);  	}  } else {  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if (dashCount == 1) {  	++dashCount;  	if ((digitCount == 5) || (digitCount == 6)) {  		continue;  	}  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  } else if (dashCount == 2) {  	++dashCount;  	if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  		return ConsumeDateTime (state);  	}  } else {  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if (dashCount == 1) {  	++dashCount;  	if ((digitCount == 5) || (digitCount == 6)) {  		continue;  	}  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  } else if (dashCount == 2) {  	++dashCount;  	if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  		return ConsumeDateTime (state);  	}  } else {  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if (dashCount == 1) {  	++dashCount;  	if ((digitCount == 5) || (digitCount == 6)) {  		continue;  	}  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  } else if (dashCount == 2) {  	++dashCount;  	if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  		return ConsumeDateTime (state);  	}  } else {  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if (dashCount == 1) {  	++dashCount;  	if ((digitCount == 5) || (digitCount == 6)) {  		continue;  	}  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  } else if (dashCount == 2) {  	++dashCount;  	if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  		return ConsumeDateTime (state);  	}  } else {  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if ((digitCount == 5) || (digitCount == 6)) {  	continue;  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if ((digitCount == 5) || (digitCount == 6)) {  	continue;  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if (dashCount == 2) {  	++dashCount;  	if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  		return ConsumeDateTime (state);  	}  } else {  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if (dashCount == 2) {  	++dashCount;  	if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  		return ConsumeDateTime (state);  	}  } else {  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if (dashCount == 2) {  	++dashCount;  	if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  		return ConsumeDateTime (state);  	}  } else {  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if (dashCount == 2) {  	++dashCount;  	if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  		return ConsumeDateTime (state);  	}  } else {  	throw state.CreateError (idx' Parser.Errors.InvalidValue);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  	return ConsumeDateTime (state);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  	return ConsumeDateTime (state);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8)) {  	return ConsumeDateTime (state);  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if (!char.IsDigit (curChar)) {  	if ((dashCount == 2) && ((curChar == 'T') || (IsWhitespace (curChar)))) {  		return ConsumeDateTime (state);  	}  	if ((curChar != Parser.Tokens.KeyStart) && (!IsWhitespace (curChar))) {  		if (state.InArray && curChar != Parser.Tokens.ArraySeparator && curChar != Parser.Tokens.ArrayEnd) {  			throw state.CreateError (idx' Parser.Errors.InvalidValue);  		}  		break;  	} else {  		break;  	}  } else {  	++digitCount;  }  
Magic Number,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: if ((dashCount == 2) && ((curChar == 'T') || (IsWhitespace (curChar)))) {  	return ConsumeDateTime (state);  }  
Missing Default,Toml,Parser,F:\newReposMay17\LBreedlove_Toml.net\Toml\Parser.cs,GetEscapedCharacter,The following switch statement is missing a default case: switch (value) {  case ('0'):  	return '\0';  case ('n'):  	return '\n';  case ('r'):  	return '\r';  case ('t'):  	return '\t';  case ('\\'):  	return '\\';  case ('\"'):  	return '\"';  }  
