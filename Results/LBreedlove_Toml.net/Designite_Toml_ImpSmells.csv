Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Toml,Array,C:\repos\LBreedlove_Toml.net\Toml\Array.cs,GetArrayType,Cyclomatic complexity of the method is 8
Complex Method,Toml,Array,C:\repos\LBreedlove_Toml.net\Toml\Array.cs,GetBestType,Cyclomatic complexity of the method is 15
Complex Method,Toml,Parser,C:\repos\LBreedlove_Toml.net\Toml\Parser.cs,GetNextEntry,Cyclomatic complexity of the method is 8
Complex Method,Toml,Parser,C:\repos\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeValueName,Cyclomatic complexity of the method is 8
Complex Method,Toml,Parser,C:\repos\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeValue,Cyclomatic complexity of the method is 11
Complex Method,Toml,Parser,C:\repos\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,Cyclomatic complexity of the method is 15
Long Parameter List,Toml,Entry,C:\repos\LBreedlove_Toml.net\Toml\Entry.cs,Entry,The method has 6 parameters. Parameters: group' name' source' startLineNumber' startPos' parsedType
Long Parameter List,Toml,Entry,C:\repos\LBreedlove_Toml.net\Toml\Entry.cs,Entry,The method has 6 parameters. Parameters: parent' group' source' startLineNumber' startPos' parsedType
Long Statement,Toml,State,C:\repos\LBreedlove_Toml.net\Toml\Parser.cs,CreateEntry,The length of the statement  "                    var entry = new Entry(this.CurrentArray' this.CurrentGroupName' this.CurrentValue' this.LineNumber' this.Position' type); " is 121.
Long Statement,Toml,State,C:\repos\LBreedlove_Toml.net\Toml\Parser.cs,CreateEntry,The length of the statement  "                    var entry = new Entry(this.CurrentGroupName' this.CurrentValueName' this.CurrentValue' this.LineNumber' this.Position' type); " is 125.
Complex Conditional,Toml,Parser,C:\repos\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeValue,The conditional expression  "(curChar == 't') || (curChar == 'T') ||                      (curChar == 'f') || (curChar == 'F')"  is complex.
Magic Number,Toml,Parser,C:\repos\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeMultilineString,The following statement contains a magic number: for (int idx = state.Position; idx < state.CurrentLine.Length; ++idx)              {                  char curChar = state.CurrentLine[idx];                  if (isEscaping)                  {                      isEscaping = false;                      if ((curChar == Parser.Tokens.MultiLineQuoteStart) && (idx + 2 < state.CurrentLine.Length))                      {                          state.CurrentValue += state.CurrentLine.Substring(lastConsumedPos' idx - lastConsumedPos);                          state.CurrentValue += Parser.Tokens.MultiLineQuoteStart;                          idx += 2;                          continue;                      }                      else                      {                          state.CurrentValue += GetEscapedCharacter(idx' curChar' state);                      }                        lastConsumedPos = idx + 1;                      continue;                  }                    if (curChar == Parser.Tokens.EscapeChar)                  {                      tokenBuilder = string.Empty;                      isEscaping = true;                      state.CurrentValue += state.CurrentLine.Substring(lastConsumedPos' idx - lastConsumedPos);                      continue;                  }                    if (curChar == Parser.Tokens.MultiLineQuoteEnd)                  {                      tokenBuilder += curChar;                      if (tokenBuilder == Parser.Tokens.MultiLineQuoteEndToken)                      {                          // we're done                          state.CurrentValue += state.CurrentLine.Substring(lastConsumedPos' idx - lastConsumedPos - 2);                          lastConsumedPos = idx + 1;                          state.Position = lastConsumedPos;                          state.Mode = (state.InArray ? Mode.SearchingForArraySeparator : Mode.Scanning);                          return state.CreateEntry(Entry.TomlType.String);                      }                  }                  else                  {                      tokenBuilder = string.Empty;                  }              }
Magic Number,Toml,Parser,C:\repos\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeMultilineString,The following statement contains a magic number: for (int idx = state.Position; idx < state.CurrentLine.Length; ++idx)              {                  char curChar = state.CurrentLine[idx];                  if (isEscaping)                  {                      isEscaping = false;                      if ((curChar == Parser.Tokens.MultiLineQuoteStart) && (idx + 2 < state.CurrentLine.Length))                      {                          state.CurrentValue += state.CurrentLine.Substring(lastConsumedPos' idx - lastConsumedPos);                          state.CurrentValue += Parser.Tokens.MultiLineQuoteStart;                          idx += 2;                          continue;                      }                      else                      {                          state.CurrentValue += GetEscapedCharacter(idx' curChar' state);                      }                        lastConsumedPos = idx + 1;                      continue;                  }                    if (curChar == Parser.Tokens.EscapeChar)                  {                      tokenBuilder = string.Empty;                      isEscaping = true;                      state.CurrentValue += state.CurrentLine.Substring(lastConsumedPos' idx - lastConsumedPos);                      continue;                  }                    if (curChar == Parser.Tokens.MultiLineQuoteEnd)                  {                      tokenBuilder += curChar;                      if (tokenBuilder == Parser.Tokens.MultiLineQuoteEndToken)                      {                          // we're done                          state.CurrentValue += state.CurrentLine.Substring(lastConsumedPos' idx - lastConsumedPos - 2);                          lastConsumedPos = idx + 1;                          state.Position = lastConsumedPos;                          state.Mode = (state.InArray ? Mode.SearchingForArraySeparator : Mode.Scanning);                          return state.CreateEntry(Entry.TomlType.String);                      }                  }                  else                  {                      tokenBuilder = string.Empty;                  }              }
Magic Number,Toml,Parser,C:\repos\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeMultilineString,The following statement contains a magic number: for (int idx = state.Position; idx < state.CurrentLine.Length; ++idx)              {                  char curChar = state.CurrentLine[idx];                  if (isEscaping)                  {                      isEscaping = false;                      if ((curChar == Parser.Tokens.MultiLineQuoteStart) && (idx + 2 < state.CurrentLine.Length))                      {                          state.CurrentValue += state.CurrentLine.Substring(lastConsumedPos' idx - lastConsumedPos);                          state.CurrentValue += Parser.Tokens.MultiLineQuoteStart;                          idx += 2;                          continue;                      }                      else                      {                          state.CurrentValue += GetEscapedCharacter(idx' curChar' state);                      }                        lastConsumedPos = idx + 1;                      continue;                  }                    if (curChar == Parser.Tokens.EscapeChar)                  {                      tokenBuilder = string.Empty;                      isEscaping = true;                      state.CurrentValue += state.CurrentLine.Substring(lastConsumedPos' idx - lastConsumedPos);                      continue;                  }                    if (curChar == Parser.Tokens.MultiLineQuoteEnd)                  {                      tokenBuilder += curChar;                      if (tokenBuilder == Parser.Tokens.MultiLineQuoteEndToken)                      {                          // we're done                          state.CurrentValue += state.CurrentLine.Substring(lastConsumedPos' idx - lastConsumedPos - 2);                          lastConsumedPos = idx + 1;                          state.Position = lastConsumedPos;                          state.Mode = (state.InArray ? Mode.SearchingForArraySeparator : Mode.Scanning);                          return state.CreateEntry(Entry.TomlType.String);                      }                  }                  else                  {                      tokenBuilder = string.Empty;                  }              }
Magic Number,Toml,Parser,C:\repos\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeBoolean,The following statement contains a magic number: if (expectedValue)              {                  if (state.CurrentLine.Length - state.Position < 4)                  {                      throw state.CreateError(Parser.Errors.InvalidValue);                  }                    if (!state.CurrentLine.Substring(state.Position' 4).Equals("true"' StringComparison.OrdinalIgnoreCase))                  {                      throw state.CreateError(Parser.Errors.InvalidValue);                  }                    state.Mode = state.InArray ? Mode.SearchingForArraySeparator : Mode.Scanning;                  state.CurrentValue = true.ToString();                  return state.CreateEntry(Entry.TomlType.Boolean);              }              else if (state.CurrentLine.Length - state.Position < 5)              {                  throw state.CreateError(Parser.Errors.InvalidValue);              }
Magic Number,Toml,Parser,C:\repos\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeBoolean,The following statement contains a magic number: if (expectedValue)              {                  if (state.CurrentLine.Length - state.Position < 4)                  {                      throw state.CreateError(Parser.Errors.InvalidValue);                  }                    if (!state.CurrentLine.Substring(state.Position' 4).Equals("true"' StringComparison.OrdinalIgnoreCase))                  {                      throw state.CreateError(Parser.Errors.InvalidValue);                  }                    state.Mode = state.InArray ? Mode.SearchingForArraySeparator : Mode.Scanning;                  state.CurrentValue = true.ToString();                  return state.CreateEntry(Entry.TomlType.Boolean);              }              else if (state.CurrentLine.Length - state.Position < 5)              {                  throw state.CreateError(Parser.Errors.InvalidValue);              }
Magic Number,Toml,Parser,C:\repos\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeBoolean,The following statement contains a magic number: if (expectedValue)              {                  if (state.CurrentLine.Length - state.Position < 4)                  {                      throw state.CreateError(Parser.Errors.InvalidValue);                  }                    if (!state.CurrentLine.Substring(state.Position' 4).Equals("true"' StringComparison.OrdinalIgnoreCase))                  {                      throw state.CreateError(Parser.Errors.InvalidValue);                  }                    state.Mode = state.InArray ? Mode.SearchingForArraySeparator : Mode.Scanning;                  state.CurrentValue = true.ToString();                  return state.CreateEntry(Entry.TomlType.Boolean);              }              else if (state.CurrentLine.Length - state.Position < 5)              {                  throw state.CreateError(Parser.Errors.InvalidValue);              }
Magic Number,Toml,Parser,C:\repos\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeBoolean,The following statement contains a magic number: if (!state.CurrentLine.Substring(state.Position' 5).Equals("false"' StringComparison.OrdinalIgnoreCase))              {                  throw state.CreateError(Parser.Errors.InvalidValue);              }
Magic Number,Toml,Parser,C:\repos\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: for (idx = state.Position; idx < state.CurrentLine.Length; ++idx)              {                  char curChar = state.CurrentLine[idx];                  if (IsWhitespace(curChar))                  {                      break;                  }                    if (curChar == Parser.Tokens.Comment)                  {                      throw state.CreateError(idx' Parser.Errors.UnexpectedCommentInValue);                  }                    if (curChar == Parser.Tokens.Negative)                  {                      if (dashCount == 0)                      {                          ++dashCount;                          if ((digitCount == 4) || (digitCount == 0))                          {                              continue;                          }                            throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                      else if (dashCount == 1)                      {                          ++dashCount;                          if ((digitCount == 5) || (digitCount == 6))                          {                              continue;                          }                            throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                      else if (dashCount == 2)                      {                          ++dashCount;                          if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8))                          {                              return ConsumeDateTime(state);                          }                      }                      else                      {                          throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                  }                    if (curChar == Parser.Tokens.Decimal)                  {                      if (receivedDecimal)                      {                          throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                        receivedDecimal = true;                  }                    if (!char.IsDigit(curChar))                  {                      if ((dashCount == 2) && ((curChar == 'T') || (IsWhitespace(curChar))))                      {                          return ConsumeDateTime(state);                      }                      if ((curChar != Parser.Tokens.KeyStart) && (!IsWhitespace(curChar)))                      {                          if (state.InArray && curChar != Parser.Tokens.ArraySeparator && curChar != Parser.Tokens.ArrayEnd)                          {                              throw state.CreateError(idx' Parser.Errors.InvalidValue);                          }                            break;                      }                      else                      {                          break;                      }                  }                  else                  {                      ++digitCount;                  }              }
Magic Number,Toml,Parser,C:\repos\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: for (idx = state.Position; idx < state.CurrentLine.Length; ++idx)              {                  char curChar = state.CurrentLine[idx];                  if (IsWhitespace(curChar))                  {                      break;                  }                    if (curChar == Parser.Tokens.Comment)                  {                      throw state.CreateError(idx' Parser.Errors.UnexpectedCommentInValue);                  }                    if (curChar == Parser.Tokens.Negative)                  {                      if (dashCount == 0)                      {                          ++dashCount;                          if ((digitCount == 4) || (digitCount == 0))                          {                              continue;                          }                            throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                      else if (dashCount == 1)                      {                          ++dashCount;                          if ((digitCount == 5) || (digitCount == 6))                          {                              continue;                          }                            throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                      else if (dashCount == 2)                      {                          ++dashCount;                          if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8))                          {                              return ConsumeDateTime(state);                          }                      }                      else                      {                          throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                  }                    if (curChar == Parser.Tokens.Decimal)                  {                      if (receivedDecimal)                      {                          throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                        receivedDecimal = true;                  }                    if (!char.IsDigit(curChar))                  {                      if ((dashCount == 2) && ((curChar == 'T') || (IsWhitespace(curChar))))                      {                          return ConsumeDateTime(state);                      }                      if ((curChar != Parser.Tokens.KeyStart) && (!IsWhitespace(curChar)))                      {                          if (state.InArray && curChar != Parser.Tokens.ArraySeparator && curChar != Parser.Tokens.ArrayEnd)                          {                              throw state.CreateError(idx' Parser.Errors.InvalidValue);                          }                            break;                      }                      else                      {                          break;                      }                  }                  else                  {                      ++digitCount;                  }              }
Magic Number,Toml,Parser,C:\repos\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: for (idx = state.Position; idx < state.CurrentLine.Length; ++idx)              {                  char curChar = state.CurrentLine[idx];                  if (IsWhitespace(curChar))                  {                      break;                  }                    if (curChar == Parser.Tokens.Comment)                  {                      throw state.CreateError(idx' Parser.Errors.UnexpectedCommentInValue);                  }                    if (curChar == Parser.Tokens.Negative)                  {                      if (dashCount == 0)                      {                          ++dashCount;                          if ((digitCount == 4) || (digitCount == 0))                          {                              continue;                          }                            throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                      else if (dashCount == 1)                      {                          ++dashCount;                          if ((digitCount == 5) || (digitCount == 6))                          {                              continue;                          }                            throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                      else if (dashCount == 2)                      {                          ++dashCount;                          if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8))                          {                              return ConsumeDateTime(state);                          }                      }                      else                      {                          throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                  }                    if (curChar == Parser.Tokens.Decimal)                  {                      if (receivedDecimal)                      {                          throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                        receivedDecimal = true;                  }                    if (!char.IsDigit(curChar))                  {                      if ((dashCount == 2) && ((curChar == 'T') || (IsWhitespace(curChar))))                      {                          return ConsumeDateTime(state);                      }                      if ((curChar != Parser.Tokens.KeyStart) && (!IsWhitespace(curChar)))                      {                          if (state.InArray && curChar != Parser.Tokens.ArraySeparator && curChar != Parser.Tokens.ArrayEnd)                          {                              throw state.CreateError(idx' Parser.Errors.InvalidValue);                          }                            break;                      }                      else                      {                          break;                      }                  }                  else                  {                      ++digitCount;                  }              }
Magic Number,Toml,Parser,C:\repos\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: for (idx = state.Position; idx < state.CurrentLine.Length; ++idx)              {                  char curChar = state.CurrentLine[idx];                  if (IsWhitespace(curChar))                  {                      break;                  }                    if (curChar == Parser.Tokens.Comment)                  {                      throw state.CreateError(idx' Parser.Errors.UnexpectedCommentInValue);                  }                    if (curChar == Parser.Tokens.Negative)                  {                      if (dashCount == 0)                      {                          ++dashCount;                          if ((digitCount == 4) || (digitCount == 0))                          {                              continue;                          }                            throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                      else if (dashCount == 1)                      {                          ++dashCount;                          if ((digitCount == 5) || (digitCount == 6))                          {                              continue;                          }                            throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                      else if (dashCount == 2)                      {                          ++dashCount;                          if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8))                          {                              return ConsumeDateTime(state);                          }                      }                      else                      {                          throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                  }                    if (curChar == Parser.Tokens.Decimal)                  {                      if (receivedDecimal)                      {                          throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                        receivedDecimal = true;                  }                    if (!char.IsDigit(curChar))                  {                      if ((dashCount == 2) && ((curChar == 'T') || (IsWhitespace(curChar))))                      {                          return ConsumeDateTime(state);                      }                      if ((curChar != Parser.Tokens.KeyStart) && (!IsWhitespace(curChar)))                      {                          if (state.InArray && curChar != Parser.Tokens.ArraySeparator && curChar != Parser.Tokens.ArrayEnd)                          {                              throw state.CreateError(idx' Parser.Errors.InvalidValue);                          }                            break;                      }                      else                      {                          break;                      }                  }                  else                  {                      ++digitCount;                  }              }
Magic Number,Toml,Parser,C:\repos\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: for (idx = state.Position; idx < state.CurrentLine.Length; ++idx)              {                  char curChar = state.CurrentLine[idx];                  if (IsWhitespace(curChar))                  {                      break;                  }                    if (curChar == Parser.Tokens.Comment)                  {                      throw state.CreateError(idx' Parser.Errors.UnexpectedCommentInValue);                  }                    if (curChar == Parser.Tokens.Negative)                  {                      if (dashCount == 0)                      {                          ++dashCount;                          if ((digitCount == 4) || (digitCount == 0))                          {                              continue;                          }                            throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                      else if (dashCount == 1)                      {                          ++dashCount;                          if ((digitCount == 5) || (digitCount == 6))                          {                              continue;                          }                            throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                      else if (dashCount == 2)                      {                          ++dashCount;                          if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8))                          {                              return ConsumeDateTime(state);                          }                      }                      else                      {                          throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                  }                    if (curChar == Parser.Tokens.Decimal)                  {                      if (receivedDecimal)                      {                          throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                        receivedDecimal = true;                  }                    if (!char.IsDigit(curChar))                  {                      if ((dashCount == 2) && ((curChar == 'T') || (IsWhitespace(curChar))))                      {                          return ConsumeDateTime(state);                      }                      if ((curChar != Parser.Tokens.KeyStart) && (!IsWhitespace(curChar)))                      {                          if (state.InArray && curChar != Parser.Tokens.ArraySeparator && curChar != Parser.Tokens.ArrayEnd)                          {                              throw state.CreateError(idx' Parser.Errors.InvalidValue);                          }                            break;                      }                      else                      {                          break;                      }                  }                  else                  {                      ++digitCount;                  }              }
Magic Number,Toml,Parser,C:\repos\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: for (idx = state.Position; idx < state.CurrentLine.Length; ++idx)              {                  char curChar = state.CurrentLine[idx];                  if (IsWhitespace(curChar))                  {                      break;                  }                    if (curChar == Parser.Tokens.Comment)                  {                      throw state.CreateError(idx' Parser.Errors.UnexpectedCommentInValue);                  }                    if (curChar == Parser.Tokens.Negative)                  {                      if (dashCount == 0)                      {                          ++dashCount;                          if ((digitCount == 4) || (digitCount == 0))                          {                              continue;                          }                            throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                      else if (dashCount == 1)                      {                          ++dashCount;                          if ((digitCount == 5) || (digitCount == 6))                          {                              continue;                          }                            throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                      else if (dashCount == 2)                      {                          ++dashCount;                          if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8))                          {                              return ConsumeDateTime(state);                          }                      }                      else                      {                          throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                  }                    if (curChar == Parser.Tokens.Decimal)                  {                      if (receivedDecimal)                      {                          throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                        receivedDecimal = true;                  }                    if (!char.IsDigit(curChar))                  {                      if ((dashCount == 2) && ((curChar == 'T') || (IsWhitespace(curChar))))                      {                          return ConsumeDateTime(state);                      }                      if ((curChar != Parser.Tokens.KeyStart) && (!IsWhitespace(curChar)))                      {                          if (state.InArray && curChar != Parser.Tokens.ArraySeparator && curChar != Parser.Tokens.ArrayEnd)                          {                              throw state.CreateError(idx' Parser.Errors.InvalidValue);                          }                            break;                      }                      else                      {                          break;                      }                  }                  else                  {                      ++digitCount;                  }              }
Magic Number,Toml,Parser,C:\repos\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: for (idx = state.Position; idx < state.CurrentLine.Length; ++idx)              {                  char curChar = state.CurrentLine[idx];                  if (IsWhitespace(curChar))                  {                      break;                  }                    if (curChar == Parser.Tokens.Comment)                  {                      throw state.CreateError(idx' Parser.Errors.UnexpectedCommentInValue);                  }                    if (curChar == Parser.Tokens.Negative)                  {                      if (dashCount == 0)                      {                          ++dashCount;                          if ((digitCount == 4) || (digitCount == 0))                          {                              continue;                          }                            throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                      else if (dashCount == 1)                      {                          ++dashCount;                          if ((digitCount == 5) || (digitCount == 6))                          {                              continue;                          }                            throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                      else if (dashCount == 2)                      {                          ++dashCount;                          if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8))                          {                              return ConsumeDateTime(state);                          }                      }                      else                      {                          throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                  }                    if (curChar == Parser.Tokens.Decimal)                  {                      if (receivedDecimal)                      {                          throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                        receivedDecimal = true;                  }                    if (!char.IsDigit(curChar))                  {                      if ((dashCount == 2) && ((curChar == 'T') || (IsWhitespace(curChar))))                      {                          return ConsumeDateTime(state);                      }                      if ((curChar != Parser.Tokens.KeyStart) && (!IsWhitespace(curChar)))                      {                          if (state.InArray && curChar != Parser.Tokens.ArraySeparator && curChar != Parser.Tokens.ArrayEnd)                          {                              throw state.CreateError(idx' Parser.Errors.InvalidValue);                          }                            break;                      }                      else                      {                          break;                      }                  }                  else                  {                      ++digitCount;                  }              }
Magic Number,Toml,Parser,C:\repos\LBreedlove_Toml.net\Toml\Parser.cs,ConsumeNumber,The following statement contains a magic number: for (idx = state.Position; idx < state.CurrentLine.Length; ++idx)              {                  char curChar = state.CurrentLine[idx];                  if (IsWhitespace(curChar))                  {                      break;                  }                    if (curChar == Parser.Tokens.Comment)                  {                      throw state.CreateError(idx' Parser.Errors.UnexpectedCommentInValue);                  }                    if (curChar == Parser.Tokens.Negative)                  {                      if (dashCount == 0)                      {                          ++dashCount;                          if ((digitCount == 4) || (digitCount == 0))                          {                              continue;                          }                            throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                      else if (dashCount == 1)                      {                          ++dashCount;                          if ((digitCount == 5) || (digitCount == 6))                          {                              continue;                          }                            throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                      else if (dashCount == 2)                      {                          ++dashCount;                          if ((digitCount == 6) || (digitCount == 7) || (digitCount == 8))                          {                              return ConsumeDateTime(state);                          }                      }                      else                      {                          throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                  }                    if (curChar == Parser.Tokens.Decimal)                  {                      if (receivedDecimal)                      {                          throw state.CreateError(idx' Parser.Errors.InvalidValue);                      }                        receivedDecimal = true;                  }                    if (!char.IsDigit(curChar))                  {                      if ((dashCount == 2) && ((curChar == 'T') || (IsWhitespace(curChar))))                      {                          return ConsumeDateTime(state);                      }                      if ((curChar != Parser.Tokens.KeyStart) && (!IsWhitespace(curChar)))                      {                          if (state.InArray && curChar != Parser.Tokens.ArraySeparator && curChar != Parser.Tokens.ArrayEnd)                          {                              throw state.CreateError(idx' Parser.Errors.InvalidValue);                          }                            break;                      }                      else                      {                          break;                      }                  }                  else                  {                      ++digitCount;                  }              }
Missing Default,Toml,Parser,C:\repos\LBreedlove_Toml.net\Toml\Parser.cs,GetEscapedCharacter,The following switch statement is missing a default case: switch (value)              {                  case ('0'):                      return '\0';                  case ('n'):                      return '\n';                  case ('r'):                      return '\r';                  case ('t'):                      return '\t';                  case ('\\'):                      return '\\';                  case ('\"'):                      return '\"';              }
