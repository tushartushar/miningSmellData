Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,missileKeyUpHandler,Cyclomatic complexity of the method is 13
Long Parameter List,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,straightMissileSpawnTxfm,The method has 5 parameters. Parameters: target' launcherPos' launcherVel' id' clusterSize
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,Main,The following statement contains a magic number: game.Run(30.0);
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,setupScene,The following statement contains a magic number: attackerDrone.Pos = new OpenTK.Vector3(-20f' 0f' 0f);
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,setupScene,The following statement contains a magic number: targetDrone.Pos = new OpenTK.Vector3(200f' 0f' 0f);
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,setupScene,The following statement contains a magic number: targetDrone.MainColor = new Color4(1f' 0f' 0.7f' 1f);
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,setupScene,The following statement contains a magic number: vandalShip.Pos = new OpenTK.Vector3(100f' 0f' 0f);
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,setupScene,The following statement contains a magic number: vandalShip.Scale = new Vector3 (0.05f);
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,setupScene,The following statement contains a magic number: vandalShip.MainColor = new Color4 (0.6f' 0.6f' 0.6f' 1f);
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,setupScene,The following statement contains a magic number: vandalShip.MainColor = new Color4 (0.6f' 0.6f' 0.6f' 1f);
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,setupScene,The following statement contains a magic number: vandalShip.MainColor = new Color4 (0.6f' 0.6f' 0.6f' 1f);
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,setupScene,The following statement contains a magic number: explosionManager.parameters.timeScale = 3f;
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,setupScene,The following statement contains a magic number: vandalShipFieldGen = new BodiesRingGenerator (                  new ParticlesOvalGenerator (1f' 1f)'                  ringCenter: new Vector3 (0f' 0f' 0f)'                  up: Vector3.UnitZ'                  ringRadius: 80f'                  oriPolicy: BodiesFieldGenerator.OrientPolicy.None              );
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,setupScene,The following statement contains a magic number: vandalShipMissileParams.ejectionMaxRotationVel = 0.05f;
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,setupScene,The following statement contains a magic number: vandalShipMissileParams.ejectionVelocity = 30f;
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,setupScene,The following statement contains a magic number: vandalShipMissileParams.pursuitActivationTime = 0.1f;
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,setupScene,The following statement contains a magic number: vandalShipMissileParams.ejectionSmokeDuration = 0.5f;
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,setupScene,The following statement contains a magic number: vandalShipMissileParams.ejectionSmokeSizeMax = 5f;
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,setupScene,The following statement contains a magic number: cameraMissileParams.ejectionMaxRotationVel = 0.05f;
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,setupScene,The following statement contains a magic number: cameraMissileParams.ejectionVelocity = 10f;
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,setupScene,The following statement contains a magic number: missileStatsText.Pos = new Vector3 (100f' 100f' 0f);
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,setupScene,The following statement contains a magic number: missileStatsText.Pos = new Vector3 (100f' 100f' 0f);
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,setupCamera,The following statement contains a magic number: camera.basePos = new Vector3 (100f' 0f' 30f);
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,setupCamera,The following statement contains a magic number: camera.basePos = new Vector3 (100f' 0f' 30f);
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,setupCamera,The following statement contains a magic number: camera.Pos = new Vector3 (170f' 20f' 245f);
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,setupCamera,The following statement contains a magic number: camera.Pos = new Vector3 (170f' 20f' 245f);
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,setupCamera,The following statement contains a magic number: camera.Pos = new Vector3 (170f' 20f' 245f);
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,setupCamera,The following statement contains a magic number: camera.followDistance = 225f;
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,setupCamera,The following statement contains a magic number: camera.localBoundingSphereRadius = 0.1f;
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,OnResize,The following statement contains a magic number: missileStatsText.Pos = new Vector3 (                  10f' sz.Height - 10f - missileStatsText.getGdiSize.Height' 0f              );
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,OnResize,The following statement contains a magic number: missileStatsText.Pos = new Vector3 (                  10f' sz.Height - 10f - missileStatsText.getGdiSize.Height' 0f              );
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,moveShips,The following statement contains a magic number: pos.Z = 30f * (float)Math.Sin(localTime);
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,moveShips,The following statement contains a magic number: float angle = localTime * 0.5f;
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,moveShips,The following statement contains a magic number: float desiredXOffset = 100f * (float)Math.Cos(angle);
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,moveShips,The following statement contains a magic number: float desiredYOffset = 20f * (float)Math.Sin(angle * 0.77f);
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,moveShips,The following statement contains a magic number: float desiredYOffset = 20f * (float)Math.Sin(angle * 0.77f);
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,moveShips,The following statement contains a magic number: float desiredZOffset = 80f * (float)Math.Sin(angle * 0.88f);
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,moveShips,The following statement contains a magic number: float desiredZOffset = 80f * (float)Math.Sin(angle * 0.88f);
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,moveShips,The following statement contains a magic number: desiredPos = new Vector3 (100f' 0f' 0f);
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,moveShips,The following statement contains a magic number: const float vel = 100f;
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,targetHitHandler,The following statement contains a magic number: explosionManager.showExplosion(missileData.position' 2.5f);
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,straightMissileSpawnTxfm,The following statement contains a magic number: const float sideDispersal = 2f;
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,straightMissileSpawnTxfm,The following statement contains a magic number: float angle = (float)Math.PI * 2f / (float)clusterSize * id;
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,straightMissileSpawnTxfm,The following statement contains a magic number: length < 0.0001f
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,straightMissileSpawnTxfm,The following statement contains a magic number: return disperalMat * orientMat * Matrix4.CreateTranslation(launcherPos) * Matrix4.CreateTranslation(toTarget * 7f);
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,getLauncherLocalPosOffsets,The following statement contains a magic number: switch (missileLauncher) {              case MissileLaunchers.VandalShip:              case MissileLaunchers.Camera:                  Vector3[] ret = new Vector3[clusterSize];                  for (int i = 0; i < clusterSize; ++i) {                      const float sideDispersal = 2f;                      const float zOffset = 7f;                      float angle = 2f * (float)Math.PI / (float)clusterSize * (float)i;                      ret [i] = new Vector3 (sideDispersal * (float)Math.Cos(angle)'                                             sideDispersal * (float)Math.Sin(angle)'                                             zOffset);                  }                  return ret;              default:                  return null;              }
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,getLauncherLocalPosOffsets,The following statement contains a magic number: switch (missileLauncher) {              case MissileLaunchers.VandalShip:              case MissileLaunchers.Camera:                  Vector3[] ret = new Vector3[clusterSize];                  for (int i = 0; i < clusterSize; ++i) {                      const float sideDispersal = 2f;                      const float zOffset = 7f;                      float angle = 2f * (float)Math.PI / (float)clusterSize * (float)i;                      ret [i] = new Vector3 (sideDispersal * (float)Math.Cos(angle)'                                             sideDispersal * (float)Math.Sin(angle)'                                             zOffset);                  }                  return ret;              default:                  return null;              }
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,getLauncherLocalPosOffsets,The following statement contains a magic number: switch (missileLauncher) {              case MissileLaunchers.VandalShip:              case MissileLaunchers.Camera:                  Vector3[] ret = new Vector3[clusterSize];                  for (int i = 0; i < clusterSize; ++i) {                      const float sideDispersal = 2f;                      const float zOffset = 7f;                      float angle = 2f * (float)Math.PI / (float)clusterSize * (float)i;                      ret [i] = new Vector3 (sideDispersal * (float)Math.Cos(angle)'                                             sideDispersal * (float)Math.Sin(angle)'                                             zOffset);                  }                  return ret;              default:                  return null;              }
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,getHitTime,The following statement contains a magic number: switch (hitTimeMode) {              case HitTimeMode.Disabled: return 0f;              case HitTimeMode.Fixed5s: return 5f;              case HitTimeMode.Fixed10s: return 10f;              case HitTimeMode.Fixed15s: return 15f;              case HitTimeMode.Fixed20s: return 20f;              case HitTimeMode.Auto:                  // guess based on distance                  var launcher = getLauncherObject();                  var target = getTargetObject();                  float dist = (target.Pos - launcher.Pos).LengthFast;                  return dist / 45f;              }
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,getHitTime,The following statement contains a magic number: switch (hitTimeMode) {              case HitTimeMode.Disabled: return 0f;              case HitTimeMode.Fixed5s: return 5f;              case HitTimeMode.Fixed10s: return 10f;              case HitTimeMode.Fixed15s: return 15f;              case HitTimeMode.Fixed20s: return 20f;              case HitTimeMode.Auto:                  // guess based on distance                  var launcher = getLauncherObject();                  var target = getTargetObject();                  float dist = (target.Pos - launcher.Pos).LengthFast;                  return dist / 45f;              }
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,getHitTime,The following statement contains a magic number: switch (hitTimeMode) {              case HitTimeMode.Disabled: return 0f;              case HitTimeMode.Fixed5s: return 5f;              case HitTimeMode.Fixed10s: return 10f;              case HitTimeMode.Fixed15s: return 15f;              case HitTimeMode.Fixed20s: return 20f;              case HitTimeMode.Auto:                  // guess based on distance                  var launcher = getLauncherObject();                  var target = getTargetObject();                  float dist = (target.Pos - launcher.Pos).LengthFast;                  return dist / 45f;              }
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,getHitTime,The following statement contains a magic number: switch (hitTimeMode) {              case HitTimeMode.Disabled: return 0f;              case HitTimeMode.Fixed5s: return 5f;              case HitTimeMode.Fixed10s: return 10f;              case HitTimeMode.Fixed15s: return 15f;              case HitTimeMode.Fixed20s: return 20f;              case HitTimeMode.Auto:                  // guess based on distance                  var launcher = getLauncherObject();                  var target = getTargetObject();                  float dist = (target.Pos - launcher.Pos).LengthFast;                  return dist / 45f;              }
Magic Number,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,getHitTime,The following statement contains a magic number: switch (hitTimeMode) {              case HitTimeMode.Disabled: return 0f;              case HitTimeMode.Fixed5s: return 5f;              case HitTimeMode.Fixed10s: return 10f;              case HitTimeMode.Fixed15s: return 15f;              case HitTimeMode.Fixed20s: return 20f;              case HitTimeMode.Auto:                  // guess based on distance                  var launcher = getLauncherObject();                  var target = getTargetObject();                  float dist = (target.Pos - launcher.Pos).LengthFast;                  return dist / 45f;              }
Missing Default,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,missileKeyUpHandler,The following switch statement is missing a default case: switch(e.Key) {              case Key.Q:                  _launchMissiles();                  break;              case Key.M:                  var camera = (main3dScene.ActiveCamera as SSCameraThirdPerson);                  if (camera != null) {                      var target = camera.FollowTarget;                      if (target == null) {                          camera.FollowTarget = attackerDrone;                      } else if (target == attackerDrone) {                          camera.FollowTarget = vandalShip;                      } else if (target == vandalShip) {                          camera.FollowTarget = targetDrone;                      } else {                          camera.FollowTarget = null;                      }                      updateTextDisplay();                  }                  break;              case Key.T:                  do {                      switchTarget();                  } while (getTargetObject() == getLauncherObject());                  updateTextDisplay();                  var targetObj = getTargetObject();                  targetHud.targetObj =                      (targetObj == main3dScene.ActiveCamera) ? null : targetObj;                  break;              case Key.L:                   switchLauncher();                  while (missileTarget != MissileTargets.Selected                    && getTargetObject() == getLauncherObject()) {                       switchTarget();                  }                  updateTextDisplay();                  break;              case Key.H:                  switchHitTime();                  updateTextDisplay();                  break;              case Key.Minus:                  clusterSize = Math.Max(1' clusterSize - 1);                  updateTextDisplay();                  break;              case Key.Plus:                  clusterSize++;                  updateTextDisplay();                  break;              case Key.V:                  attackerDroneMissileParams.debuggingAid = !attackerDroneMissileParams.debuggingAid;                  vandalShipMissileParams.debuggingAid = !vandalShipMissileParams.debuggingAid;                  cameraMissileParams.debuggingAid = !cameraMissileParams.debuggingAid;                  updateTextDisplay();                  break;              }
Missing Default,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,getLauncherObject,The following switch statement is missing a default case: switch (missileLauncher) {              case MissileLaunchers.AttackerDrone: return attackerDrone;              case MissileLaunchers.VandalShip: return vandalShip;              case MissileLaunchers.Camera: return main3dScene.ActiveCamera;              }
Missing Default,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,getLauncherParams,The following switch statement is missing a default case: switch (missileLauncher) {              case MissileLaunchers.AttackerDrone: return attackerDroneMissileParams;              case MissileLaunchers.VandalShip: return vandalShipMissileParams;              case MissileLaunchers.Camera: return cameraMissileParams;              }
Missing Default,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,getTargetObject,The following switch statement is missing a default case: switch (missileTarget) {              case MissileTargets.TargetDrone: return targetDrone;              case MissileTargets.AttackerDrone: return attackerDrone;              case MissileTargets.VandalShip: return vandalShip;              case MissileTargets.Camera: return main3dScene.ActiveCamera;              case MissileTargets.Selected: return selectedObject ?? main3dScene.ActiveCamera;              }
Missing Default,TestBench3,TestBench3,D:\research\architectureSmells\repos\jeske_SimpleScene\Demos\TestBench3\TestBench3.cs,getHitTime,The following switch statement is missing a default case: switch (hitTimeMode) {              case HitTimeMode.Disabled: return 0f;              case HitTimeMode.Fixed5s: return 5f;              case HitTimeMode.Fixed10s: return 10f;              case HitTimeMode.Fixed15s: return 15f;              case HitTimeMode.Fixed20s: return 20f;              case HitTimeMode.Auto:                  // guess based on distance                  var launcher = getLauncherObject();                  var target = getTargetObject();                  float dist = (target.Pos - launcher.Pos).LengthFast;                  return dist / 45f;              }
