Implementation smell,Namespace,Class,File,Method,Description
Long Statement,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The length of the statement  "            Assert.AreEqual("True and False"' new BinaryExpression(BinaryExpressionType.And' new ValueExpression(true)' new ValueExpression(false)).ToString()); " is 148.
Long Statement,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The length of the statement  "            Assert.AreEqual("1 / 2"' new BinaryExpression(BinaryExpressionType.Div' new ValueExpression(1)' new ValueExpression(2)).ToString()); " is 132.
Long Statement,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The length of the statement  "            Assert.AreEqual("1 = 2"' new BinaryExpression(BinaryExpressionType.Equal' new ValueExpression(1)' new ValueExpression(2)).ToString()); " is 134.
Long Statement,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The length of the statement  "            Assert.AreEqual("1 > 2"' new BinaryExpression(BinaryExpressionType.Greater' new ValueExpression(1)' new ValueExpression(2)).ToString()); " is 136.
Long Statement,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The length of the statement  "            Assert.AreEqual("1 >= 2"' new BinaryExpression(BinaryExpressionType.GreaterOrEqual' new ValueExpression(1)' new ValueExpression(2)).ToString()); " is 144.
Long Statement,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The length of the statement  "            Assert.AreEqual("1 < 2"' new BinaryExpression(BinaryExpressionType.Lesser' new ValueExpression(1)' new ValueExpression(2)).ToString()); " is 135.
Long Statement,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The length of the statement  "            Assert.AreEqual("1 <= 2"' new BinaryExpression(BinaryExpressionType.LesserOrEqual' new ValueExpression(1)' new ValueExpression(2)).ToString()); " is 143.
Long Statement,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The length of the statement  "            Assert.AreEqual("1 - 2"' new BinaryExpression(BinaryExpressionType.Minus' new ValueExpression(1)' new ValueExpression(2)).ToString()); " is 134.
Long Statement,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The length of the statement  "            Assert.AreEqual("1 % 2"' new BinaryExpression(BinaryExpressionType.Modulo' new ValueExpression(1)' new ValueExpression(2)).ToString()); " is 135.
Long Statement,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The length of the statement  "            Assert.AreEqual("1 != 2"' new BinaryExpression(BinaryExpressionType.NotEqual' new ValueExpression(1)' new ValueExpression(2)).ToString()); " is 138.
Long Statement,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The length of the statement  "            Assert.AreEqual("True or False"' new BinaryExpression(BinaryExpressionType.Or' new ValueExpression(true)' new ValueExpression(false)).ToString()); " is 146.
Long Statement,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The length of the statement  "            Assert.AreEqual("1 + 2"' new BinaryExpression(BinaryExpressionType.Plus' new ValueExpression(1)' new ValueExpression(2)).ToString()); " is 133.
Long Statement,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The length of the statement  "            Assert.AreEqual("1 * 2"' new BinaryExpression(BinaryExpressionType.Times' new ValueExpression(1)' new ValueExpression(2)).ToString()); " is 134.
Long Statement,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The length of the statement  "            Assert.AreEqual("-(True and False)"'new UnaryExpression(UnaryExpressionType.Negate' new BinaryExpression(BinaryExpressionType.And' new ValueExpression(true)' new ValueExpression(false))).ToString()); " is 199.
Long Statement,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The length of the statement  "            Assert.AreEqual("!(True and False)"'new UnaryExpression(UnaryExpressionType.Not' new BinaryExpression(BinaryExpressionType.And' new ValueExpression(true)' new ValueExpression(false))).ToString()); " is 196.
Long Statement,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The length of the statement  "            Assert.AreEqual("test(True and False' -(True and False))"'new Function(new Identifier("test")' new LogicalExpression[] { new BinaryExpression(BinaryExpressionType.And' new ValueExpression(true)' new ValueExpression(false))' new UnaryExpression(UnaryExpressionType.Negate' new BinaryExpression(BinaryExpressionType.And' new ValueExpression(true)' new ValueExpression(false))) }).ToString()); " is 390.
Long Statement,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The length of the statement  "            Assert.AreEqual("Sum(1 + 2)"' new Function(new Identifier("Sum")' new [] { new BinaryExpression(BinaryExpressionType.Plus' new ValueExpression(1)' new ValueExpression(2))}).ToString()); " is 185.
Long Statement,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,WorkerThread,The length of the statement  "                // Constructs a simple addition randomly. Odds are that the same expression gets constructed multiple times by different threads " is 128.
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldParseValues,The following statement contains a magic number: Assert.AreEqual(123456' new Expression("123456").Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldParseValues,The following statement contains a magic number: Assert.AreEqual(new DateTime(2001' 01' 01)' new Expression("#01/01/2001#").Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldParseValues,The following statement contains a magic number: Assert.AreEqual(123.456d' new Expression("123.456").Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,Maths,The following statement contains a magic number: Assert.AreEqual(2d' new Expression("Ceiling(1.5)").Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,Maths,The following statement contains a magic number: Assert.AreEqual(9d' new Expression("Pow(3'2)").Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,Maths,The following statement contains a magic number: Assert.AreEqual(3.22d' new Expression("Round(3.222'2)").Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,Maths,The following statement contains a magic number: Assert.AreEqual(2d' new Expression("Sqrt(4)").Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ExpressionShouldEvaluateCustomFunctions,The following statement contains a magic number: Assert.AreEqual(9' e.Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ExpressionShouldEvaluateCustomFunctionsWithParameters,The following statement contains a magic number: e.Parameters["e"] = 3;
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ExpressionShouldEvaluateCustomFunctionsWithParameters,The following statement contains a magic number: Assert.AreEqual(10' e.Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ExpressionShouldEvaluateParameters,The following statement contains a magic number: e.Parameters["X"] = 10;
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ExpressionShouldEvaluateParameters,The following statement contains a magic number: e.EvaluateParameter += delegate(string name' ParameterArgs args)  				{  					if (name == "Pi")  						args.Result = 3.14;  				};
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ExpressionShouldEvaluateParameters,The following statement contains a magic number: Assert.AreEqual(117.07' e.Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldEvaluateConditionnal,The following statement contains a magic number: eif.Parameters["divider"] = 5;
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldEvaluateConditionnal,The following statement contains a magic number: eif.Parameters["divided"] = 5;
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldEvaluateConditionnal,The following statement contains a magic number: eif.Parameters["divided"] = 5;
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldOverrideExistingFunctions,The following statement contains a magic number: Assert.AreEqual(1.99d' e.Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldOverrideExistingFunctions,The following statement contains a magic number: e.EvaluateFunction += delegate(string name' FunctionArgs args)              {                  if (name == "Round")                      args.Result = 3;              };
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldOverrideExistingFunctions,The following statement contains a magic number: Assert.AreEqual(3' e.Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldEvaluateInOperator,The following statement contains a magic number: ein.Parameters["1"] = 2;
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldEvaluateInOperator,The following statement contains a magic number: ein.Parameters["2"] = 5;
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldEvaluateInOperator,The following statement contains a magic number: eout.Parameters["1"] = 2;
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldEvaluateInOperator,The following statement contains a magic number: eout.Parameters["2"] = 5;
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldEvaluateOperators,The following statement contains a magic number: var expressions = new Dictionary<string' object>                                    {                                        {"!true"' false}'                                        {"not false"' true}'                                        {"2 * 3"' 6}'                                        {"6 / 2"' 3d}'                                        {"7 % 2"' 1}'                                        {"2 + 3"' 5}'                                        {"2 - 1"' 1}'                                        {"1 < 2"' true}'                                        {"1 > 2"' false}'                                        {"1 <= 2"' true}'                                        {"1 <= 1"' true}'                                        {"1 >= 2"' false}'                                        {"1 >= 1"' true}'                                        {"1 = 1"' true}'                                        {"1 == 1"' true}'                                        {"1 != 1"' false}'                                        {"1 <> 1"' false}'                                        {"1 & 1"' 1}'                                        {"1 | 1"' 1}'                                        {"1 ^ 1"' 0}'                                        {"~1"' ~1}'                                        {"2 >> 1"' 1}'                                        {"2 << 1"' 4}'                                        {"true && false"' false}'                                        {"true and false"' false}'                                        {"true || false"' true}'                                        {"true or false"' true}'                                        {"if(true' 0' 1)"' 0}'                                        {"if(false' 0' 1)"' 1}                                    };
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldEvaluateOperators,The following statement contains a magic number: var expressions = new Dictionary<string' object>                                    {                                        {"!true"' false}'                                        {"not false"' true}'                                        {"2 * 3"' 6}'                                        {"6 / 2"' 3d}'                                        {"7 % 2"' 1}'                                        {"2 + 3"' 5}'                                        {"2 - 1"' 1}'                                        {"1 < 2"' true}'                                        {"1 > 2"' false}'                                        {"1 <= 2"' true}'                                        {"1 <= 1"' true}'                                        {"1 >= 2"' false}'                                        {"1 >= 1"' true}'                                        {"1 = 1"' true}'                                        {"1 == 1"' true}'                                        {"1 != 1"' false}'                                        {"1 <> 1"' false}'                                        {"1 & 1"' 1}'                                        {"1 | 1"' 1}'                                        {"1 ^ 1"' 0}'                                        {"~1"' ~1}'                                        {"2 >> 1"' 1}'                                        {"2 << 1"' 4}'                                        {"true && false"' false}'                                        {"true and false"' false}'                                        {"true || false"' true}'                                        {"true or false"' true}'                                        {"if(true' 0' 1)"' 0}'                                        {"if(false' 0' 1)"' 1}                                    };
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldEvaluateOperators,The following statement contains a magic number: var expressions = new Dictionary<string' object>                                    {                                        {"!true"' false}'                                        {"not false"' true}'                                        {"2 * 3"' 6}'                                        {"6 / 2"' 3d}'                                        {"7 % 2"' 1}'                                        {"2 + 3"' 5}'                                        {"2 - 1"' 1}'                                        {"1 < 2"' true}'                                        {"1 > 2"' false}'                                        {"1 <= 2"' true}'                                        {"1 <= 1"' true}'                                        {"1 >= 2"' false}'                                        {"1 >= 1"' true}'                                        {"1 = 1"' true}'                                        {"1 == 1"' true}'                                        {"1 != 1"' false}'                                        {"1 <> 1"' false}'                                        {"1 & 1"' 1}'                                        {"1 | 1"' 1}'                                        {"1 ^ 1"' 0}'                                        {"~1"' ~1}'                                        {"2 >> 1"' 1}'                                        {"2 << 1"' 4}'                                        {"true && false"' false}'                                        {"true and false"' false}'                                        {"true || false"' true}'                                        {"true or false"' true}'                                        {"if(true' 0' 1)"' 0}'                                        {"if(false' 0' 1)"' 1}                                    };
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldEvaluateOperators,The following statement contains a magic number: var expressions = new Dictionary<string' object>                                    {                                        {"!true"' false}'                                        {"not false"' true}'                                        {"2 * 3"' 6}'                                        {"6 / 2"' 3d}'                                        {"7 % 2"' 1}'                                        {"2 + 3"' 5}'                                        {"2 - 1"' 1}'                                        {"1 < 2"' true}'                                        {"1 > 2"' false}'                                        {"1 <= 2"' true}'                                        {"1 <= 1"' true}'                                        {"1 >= 2"' false}'                                        {"1 >= 1"' true}'                                        {"1 = 1"' true}'                                        {"1 == 1"' true}'                                        {"1 != 1"' false}'                                        {"1 <> 1"' false}'                                        {"1 & 1"' 1}'                                        {"1 | 1"' 1}'                                        {"1 ^ 1"' 0}'                                        {"~1"' ~1}'                                        {"2 >> 1"' 1}'                                        {"2 << 1"' 4}'                                        {"true && false"' false}'                                        {"true and false"' false}'                                        {"true || false"' true}'                                        {"true or false"' true}'                                        {"if(true' 0' 1)"' 0}'                                        {"if(false' 0' 1)"' 1}                                    };
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldHandleOperatorsPriority,The following statement contains a magic number: Assert.AreEqual(8' new Expression("2+2+2+2").Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldHandleOperatorsPriority,The following statement contains a magic number: Assert.AreEqual(16' new Expression("2*2*2*2").Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldHandleOperatorsPriority,The following statement contains a magic number: Assert.AreEqual(6' new Expression("2*2+2").Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldHandleOperatorsPriority,The following statement contains a magic number: Assert.AreEqual(6' new Expression("2+2*2").Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldHandleOperatorsPriority,The following statement contains a magic number: Assert.AreEqual(9d' new Expression("1 + 2 + 3 * 4 / 2").Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldHandleOperatorsPriority,The following statement contains a magic number: Assert.AreEqual(13.5' new Expression("18/2/2*3").Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldNotLoosePrecision,The following statement contains a magic number: Assert.AreEqual(0.5' new Expression("3/6").Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The following statement contains a magic number: Assert.AreEqual("1 / 2"' new BinaryExpression(BinaryExpressionType.Div' new ValueExpression(1)' new ValueExpression(2)).ToString());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The following statement contains a magic number: Assert.AreEqual("1 = 2"' new BinaryExpression(BinaryExpressionType.Equal' new ValueExpression(1)' new ValueExpression(2)).ToString());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The following statement contains a magic number: Assert.AreEqual("1 > 2"' new BinaryExpression(BinaryExpressionType.Greater' new ValueExpression(1)' new ValueExpression(2)).ToString());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The following statement contains a magic number: Assert.AreEqual("1 >= 2"' new BinaryExpression(BinaryExpressionType.GreaterOrEqual' new ValueExpression(1)' new ValueExpression(2)).ToString());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The following statement contains a magic number: Assert.AreEqual("1 < 2"' new BinaryExpression(BinaryExpressionType.Lesser' new ValueExpression(1)' new ValueExpression(2)).ToString());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The following statement contains a magic number: Assert.AreEqual("1 <= 2"' new BinaryExpression(BinaryExpressionType.LesserOrEqual' new ValueExpression(1)' new ValueExpression(2)).ToString());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The following statement contains a magic number: Assert.AreEqual("1 - 2"' new BinaryExpression(BinaryExpressionType.Minus' new ValueExpression(1)' new ValueExpression(2)).ToString());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The following statement contains a magic number: Assert.AreEqual("1 % 2"' new BinaryExpression(BinaryExpressionType.Modulo' new ValueExpression(1)' new ValueExpression(2)).ToString());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The following statement contains a magic number: Assert.AreEqual("1 != 2"' new BinaryExpression(BinaryExpressionType.NotEqual' new ValueExpression(1)' new ValueExpression(2)).ToString());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The following statement contains a magic number: Assert.AreEqual("1 + 2"' new BinaryExpression(BinaryExpressionType.Plus' new ValueExpression(1)' new ValueExpression(2)).ToString());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The following statement contains a magic number: Assert.AreEqual("1 * 2"' new BinaryExpression(BinaryExpressionType.Times' new ValueExpression(1)' new ValueExpression(2)).ToString());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The following statement contains a magic number: Assert.AreEqual("1.234"' new ValueExpression(1.234).ToString());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The following statement contains a magic number: Assert.AreEqual("#" + new DateTime(2009' 1' 1) + "#"' new ValueExpression(new DateTime(2009' 1' 1)).ToString());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The following statement contains a magic number: Assert.AreEqual("#" + new DateTime(2009' 1' 1) + "#"' new ValueExpression(new DateTime(2009' 1' 1)).ToString());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldSerializeExpression,The following statement contains a magic number: Assert.AreEqual("Sum(1 + 2)"' new Function(new Identifier("Sum")' new [] { new BinaryExpression(BinaryExpressionType.Plus' new ValueExpression(1)' new ValueExpression(2))}).ToString());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldHandleStringConcatenation,The following statement contains a magic number: Assert.AreEqual(3M' new Expression("1 + '2'").Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldReuseCompiledExpressionsInMultiThreadedMode,The following statement contains a magic number: const int nbthreads = 30;
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldReuseCompiledExpressionsInMultiThreadedMode,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldReuseCompiledExpressionsInMultiThreadedMode,The following statement contains a magic number: cpt < 20
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,WorkerThread,The following statement contains a magic number: int n1 = r1.Next(10);
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,WorkerThread,The following statement contains a magic number: int n2 = r2.Next(10);
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldHandleCustomParametersWhenNoSpecificParameterIsDefined,The following statement contains a magic number: e.EvaluateParameter += delegate(string name' ParameterArgs arg)              {                  if (name == "Pi")                      arg.Result = 3.14;              };
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldHandleCustomFunctionsInFunctions,The following statement contains a magic number: e.EvaluateFunction += delegate(string name' FunctionArgs arg)              {                  switch (name)                  {                      case "func1": arg.Result = 1;                          break;                      case "func2": arg.Result = 2 * Convert.ToDouble(arg.Parameters[0].Evaluate());                          break;                      case "func3": arg.Result = 3 * Convert.ToDouble(arg.Parameters[0].Evaluate());                          break;                  }              };
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldHandleCustomFunctionsInFunctions,The following statement contains a magic number: e.EvaluateFunction += delegate(string name' FunctionArgs arg)              {                  switch (name)                  {                      case "func1": arg.Result = 1;                          break;                      case "func2": arg.Result = 2 * Convert.ToDouble(arg.Parameters[0].Evaluate());                          break;                      case "func3": arg.Result = 3 * Convert.ToDouble(arg.Parameters[0].Evaluate());                          break;                  }              };
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldHandleCustomFunctionsInFunctions,The following statement contains a magic number: e.EvaluateParameter += delegate(string name' ParameterArgs arg)              {                  switch (name)                  {                      case "x": arg.Result = 1;                          break;                      case "y": arg.Result = 2;                          break;                      case "z": arg.Result = 3;                          break;                  }              };
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldHandleCustomFunctionsInFunctions,The following statement contains a magic number: e.EvaluateParameter += delegate(string name' ParameterArgs arg)              {                  switch (name)                  {                      case "x": arg.Result = 1;                          break;                      case "y": arg.Result = 2;                          break;                      case "z": arg.Result = 3;                          break;                  }              };
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldHandleCustomFunctionsInFunctions,The following statement contains a magic number: Assert.AreEqual(13d' e.Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldParseScientificNotation,The following statement contains a magic number: Assert.AreEqual(12.2d' new Expression("1.22e1").Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldParseScientificNotation,The following statement contains a magic number: Assert.AreEqual(100d' new Expression("1e2").Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldParseScientificNotation,The following statement contains a magic number: Assert.AreEqual(100d' new Expression("1e+2").Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldParseScientificNotation,The following statement contains a magic number: Assert.AreEqual(0.01d' new Expression("1e-2").Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldParseScientificNotation,The following statement contains a magic number: Assert.AreEqual(0.001d' new Expression(".1e-2").Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldParseScientificNotation,The following statement contains a magic number: Assert.AreEqual(10000000000d' new Expression("1e10").Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldEvaluateArrayParameters,The following statement contains a magic number: e.Parameters["x"] = new [] { 0' 1' 2' 3' 4 };
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldEvaluateArrayParameters,The following statement contains a magic number: e.Parameters["x"] = new [] { 0' 1' 2' 3' 4 };
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldEvaluateArrayParameters,The following statement contains a magic number: e.Parameters["x"] = new [] { 0' 1' 2' 3' 4 };
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldEvaluateArrayParameters,The following statement contains a magic number: Assert.AreEqual(4' result[2]);
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldEvaluateArrayParameters,The following statement contains a magic number: Assert.AreEqual(4' result[2]);
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldEvaluateArrayParameters,The following statement contains a magic number: Assert.AreEqual(9' result[3]);
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldEvaluateArrayParameters,The following statement contains a magic number: Assert.AreEqual(9' result[3]);
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldEvaluateArrayParameters,The following statement contains a magic number: Assert.AreEqual(16' result[4]);
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldEvaluateArrayParameters,The following statement contains a magic number: Assert.AreEqual(16' result[4]);
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldRoundAwayFromZero,The following statement contains a magic number: Assert.AreEqual(22d' new Expression("Round(22.5' 0)").Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldRoundAwayFromZero,The following statement contains a magic number: Assert.AreEqual(23d' new Expression("Round(22.5' 0)"' EvaluateOptions.RoundAwayFromZero).Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldEvaluateSubExpressions,The following statement contains a magic number: volume.Parameters["h"] = 3;
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldEvaluateSubExpressions,The following statement contains a magic number: surface.Parameters["L"] = 2;
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldEvaluateSubExpressions,The following statement contains a magic number: Assert.AreEqual(6' volume.Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldHandleLongValues,The following statement contains a magic number: Assert.AreEqual(40000000000 + 1f' new Expression("40000000000+1").Evaluate());
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldDisplayErrorIfUncompatibleTypes,The following statement contains a magic number: e.Parameters["b"] = 2;
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldNotConvertRealTypes,The following statement contains a magic number: e.Parameters["x"] = 2F;
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldNotConvertRealTypes,The following statement contains a magic number: e.Parameters["x"] = 2D;
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldNotConvertRealTypes,The following statement contains a magic number: e.Parameters["x"] = 2m;
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldNotConvertRealTypes,The following statement contains a magic number: e.Parameters["a"] = 20M;
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldNotConvertRealTypes,The following statement contains a magic number: e.Parameters["b"] = 20M;
Magic Number,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldNotConvertRealTypes,The following statement contains a magic number: Assert.AreEqual(100M' e.Evaluate());
Missing Default,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldHandleCustomFunctionsInFunctions,The following switch statement is missing a default case: switch (name)                  {                      case "func1": arg.Result = 1;                          break;                      case "func2": arg.Result = 2 * Convert.ToDouble(arg.Parameters[0].Evaluate());                          break;                      case "func3": arg.Result = 3 * Convert.ToDouble(arg.Parameters[0].Evaluate());                          break;                  }
Missing Default,NCalc.Tests,Fixtures,D:\research\architectureSmells\repos\jeske_SimpleScene\NCalc\Evaluant.Calculator.Tests\Fixtures.cs,ShouldHandleCustomFunctionsInFunctions,The following switch statement is missing a default case: switch (name)                  {                      case "x": arg.Result = 1;                          break;                      case "y": arg.Result = 2;                          break;                      case "z": arg.Result = 3;                          break;                  }
