Implementation smell,Namespace,Class,File,Method,Description
Long Method,Dynamitey,CacheableInvocation,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\CacheableInvocation.cs,Invoke,The method has 102 lines of code.
Long Method,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The method has 163 lines of code.
Long Method,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The method has 148 lines of code.
Complex Method,Dynamitey,CacheableInvocation,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\CacheableInvocation.cs,CacheableInvocation,Cyclomatic complexity of the method is 14
Complex Method,Dynamitey,CacheableInvocation,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\CacheableInvocation.cs,Invoke,Cyclomatic complexity of the method is 25
Complex Method,Dynamitey,Dynamic,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Dynamic.cs,InvokeBinaryOperator,Cyclomatic complexity of the method is 29
Complex Method,Dynamitey,Dynamic,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Dynamic.cs,InvokeSetChain,Cyclomatic complexity of the method is 8
Complex Method,Dynamitey,Dynamic,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Dynamic.cs,CoerceConvert,Cyclomatic complexity of the method is 8
Complex Method,Dynamitey,Invocation,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Invocation.cs,Invoke,Cyclomatic complexity of the method is 17
Complex Method,Dynamitey.DynamicObjects,ExtensionToInstanceProxy,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\DynamicObjects\ExtensionToInstanceProxy.cs,InvokeStaticMethod,Cyclomatic complexity of the method is 11
Complex Method,Dynamitey.DynamicObjects,Invoker,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\DynamicObjects\ExtensionToInstanceProxy.cs,Invoker,Cyclomatic complexity of the method is 8
Complex Method,Dynamitey.DynamicObjects,List,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\DynamicObjects\List.cs,OnCollectionChanged,Cyclomatic complexity of the method is 8
Complex Method,Dynamitey.Internal,InvokeSetters,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\InvokeSetters.cs,TryInvoke,Cyclomatic complexity of the method is 12
Complex Method,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,TupleItem,Cyclomatic complexity of the method is 8
Complex Method,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,Cyclomatic complexity of the method is 31
Complex Method,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,Cyclomatic complexity of the method is 31
Complex Method,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,Cyclomatic complexity of the method is 18
Complex Method,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapAction,Cyclomatic complexity of the method is 18
Complex Method,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,Cyclomatic complexity of the method is 17
Complex Method,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,Cyclomatic complexity of the method is 17
Complex Method,Dynamitey.Internal.Optimization,Util,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\Util.cs,MassageResultBasedOnInterface,Cyclomatic complexity of the method is 9
Long Parameter List,Dynamitey,CacheableInvocation,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\CacheableInvocation.cs,CacheableInvocation,The method has 8 parameters. Parameters: kind' name' argCount' argNames' context' convertType' convertExplicit' storedArgs
Long Parameter List,Dynamitey,Dynamic,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Dynamic.cs,CreateCallSite,The method has 7 parameters. Parameters: delegateType' binder' name' context' argNames' staticContext' isEvent
Long Parameter List,Dynamitey,Dynamic,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Dynamic.cs,CreateCallSite,The method has 6 parameters. Parameters: binder' name' context' argNames' staticContext' isEvent
Long Parameter List,Dynamitey,PartialApply,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\PartialApply.cs,PartialApply,The method has 5 parameters. Parameters: target' args' memberName' totalCount' invocationKind
Long Parameter List,Dynamitey,Tupler,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Tupler.cs,HelperIsTuple,The method has 5 parameters. Parameters: target' type' genericeType' size' safe
Long Parameter List,Dynamitey,TuplerFix,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Tupler.cs,Create,The method has 8 parameters. Parameters: item1' item2' item3' item4' item5' item6' item7' item8
Long Parameter List,Dynamitey.DynamicObjects,Invoker,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\DynamicObjects\ExtensionToInstanceProxy.cs,Invoker,The method has 5 parameters. Parameters: name' genericParameters' genericMethodParameters' parent' overloadTypes
Long Parameter List,Dynamitey.DynamicObjects,ILinq,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\DynamicObjects\LinqInstanceProxy.cs,GroupJoin,The method has 5 parameters. Parameters: inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,Dynamitey.DynamicObjects,ILinq,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\DynamicObjects\LinqInstanceProxy.cs,Join,The method has 5 parameters. Parameters: inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,Dynamitey.DynamicObjects,List,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\DynamicObjects\List.cs,OnCollectionChanged,The method has 5 parameters. Parameters: action' oldItem' newItem' oldIndex' newIndex
Long Parameter List,Dynamitey.Internal.Optimization,BinderHash,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\BinderHash.cs,BinderHash,The method has 8 parameters. Parameters: delegateType' name' context' argNames' binderType' staticContext' isEvent' knownBinder
Long Parameter List,Dynamitey.Internal.Optimization,BinderHash,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\BinderHash.cs,BinderHash,The method has 8 parameters. Parameters: delegateType' name' context' argNames' binderType' staticContext' isEvent' knownBinder
Long Parameter List,Dynamitey.Internal.Optimization,BinderHash<T>,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\BinderHash.cs,Create,The method has 7 parameters. Parameters: name' context' argNames' binderType' staticContext' isEvent' knownBinder
Long Parameter List,Dynamitey.Internal.Optimization,BinderHash<T>,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\BinderHash.cs,Create,The method has 7 parameters. Parameters: name' context' argNames' binderType' staticContext' isEvent' knownBinder
Long Parameter List,Dynamitey.Internal.Optimization,BinderHash<T>,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\BinderHash.cs,BinderHash,The method has 7 parameters. Parameters: name' context' argNames' binderType' staticContext' isEvent' knownBinder
Long Parameter List,Dynamitey.Internal.Optimization,BinderHash<T>,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\BinderHash.cs,BinderHash,The method has 7 parameters. Parameters: name' context' argNames' binderType' staticContext' isEvent' knownBinder
Long Parameter List,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,CreateCallSite,The method has 9 parameters. Parameters: delegateType' specificBinderType' knownType' binder' name' context' argNames' staticContext' isEvent
Long Parameter List,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,CreateCallSite,The method has 8 parameters. Parameters: specificBinderType' knownType' binder' name' context' argNames' staticContext' isEvent
Long Parameter List,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,CreateCallSite,The method has 8 parameters. Parameters: specificBinderType' knownType' binder' name' context' argNames' staticContext' isEvent
Long Parameter List,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,DynamicInvokeStaticMember,The method has 11 parameters. Parameters: tReturn' callsite' binderType' knownType' binder' name' staticContext' context' argNames' target' args
Long Parameter List,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMember,The method has 10 parameters. Parameters: callsite' binderType' knownType' binder' name' staticContext' context' argNames' target' args
Long Parameter List,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeGetCallSite,The method has 5 parameters. Parameters: target' name' context' staticContext' callsite
Long Parameter List,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeSetCallSite,The method has 6 parameters. Parameters: target' name' value' context' staticContext' callSite
Long Parameter List,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberCallSite,The method has 7 parameters. Parameters: target' name' args' tArgNames' tContext' tStaticContext' callSite
Long Parameter List,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeDirectCallSite,The method has 6 parameters. Parameters: target' args' tArgNames' tContext' tStaticContext' callSite
Long Parameter List,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeGetIndexCallSite,The method has 6 parameters. Parameters: target' indexes' argNames' context' tStaticContext' callSite
Long Parameter List,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeSetIndexCallSite,The method has 6 parameters. Parameters: target' indexesThenValue' tArgNames' tContext' tStaticContext' tCallSite
Long Parameter List,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberActionCallSite,The method has 7 parameters. Parameters: target' name' args' tArgNames' tContext' tStaticContext' callSite
Long Parameter List,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeDirectActionCallSite,The method has 6 parameters. Parameters: target' args' tArgNames' tContext' tStaticContext' callSite
Long Parameter List,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeAddAssignCallSite,The method has 10 parameters. Parameters: target' name' args' argNames' context' staticContext' callSiteIsEvent' callSiteAdd' callSiteGet' callSiteSet
Long Parameter List,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeSubtractAssignCallSite,The method has 10 parameters. Parameters: target' name' args' argNames' context' staticContext' callSiteIsEvent' callSiteRemove' callSiteGet' callSiteSet
Long Parameter List,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeConvertCallSite,The method has 5 parameters. Parameters: target' explict' type' context' callSite
Long Parameter List,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeConstructorCallSite,The method has 5 parameters. Parameters: type' isValueType' args' argNames' callSite
Long Parameter List,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The method has 10 parameters. Parameters: callsite' binderType' knownType' binder' name' staticContext' context' argNames' target' args
Long Parameter List,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The method has 10 parameters. Parameters: callsite' binderType' knownType' binder' name' staticContext' context' argNames' target' args
Long Statement,Dynamitey,Activate<TObjectPrototype>,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Builder.cs,Create,The length of the statement  "                tObjectPrototype = Activator.CreateInstance<TObjectPrototype>();//Try first because it's really fast' but won't work with optional parameters " is 141.
Long Statement,Dynamitey,CacheableInvocation,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\CacheableInvocation.cs,Invoke,The length of the statement  "                    return InvokeHelper.InvokeMemberCallSite(target' (InvokeMemberName) Name' args' _argNames' _context' _staticContext' ref _callSite); " is 132.
Long Statement,Dynamitey,CacheableInvocation,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\CacheableInvocation.cs,Invoke,The length of the statement  "                    InvokeHelper.InvokeMemberActionCallSite(target' (InvokeMemberName)Name' args' _argNames' _context' _staticContext' ref _callSite); " is 130.
Long Statement,Dynamitey,CacheableInvocation,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\CacheableInvocation.cs,Invoke,The length of the statement  "                                var tObj = InvokeHelper.InvokeMemberCallSite(target' (InvokeMemberName)Name' args' _argNames' _context' _staticContext' ref _callSite); " is 135.
Long Statement,Dynamitey,CacheableInvocation,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\CacheableInvocation.cs,Invoke,The length of the statement  "                                InvokeHelper.InvokeMemberActionCallSite(target' (InvokeMemberName)Name' args' _argNames' _context' _staticContext' ref _callSite2); " is 131.
Long Statement,Dynamitey,CacheableInvocation,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\CacheableInvocation.cs,Invoke,The length of the statement  "                    InvokeHelper.InvokeAddAssignCallSite(target' Name.Name' args' _argNames' _context' _staticContext'ref _callSite'ref  _callSite2'ref _callSite3' ref _callSite4); " is 160.
Long Statement,Dynamitey,CacheableInvocation,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\CacheableInvocation.cs,Invoke,The length of the statement  "                    InvokeHelper.InvokeSubtractAssignCallSite(target' Name.Name' args' _argNames' _context' _staticContext' ref _callSite' ref _callSite2' ref _callSite3' ref _callSite4); " is 167.
Long Statement,Dynamitey,Dynamic,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Dynamic.cs,InvokeAddAssignMember,The length of the statement  "            InvokeHelper.InvokeAddAssignCallSite(target' name' args' argNames' context' staticContext' ref callSiteIsEvent' ref callSiteAdd' ref callSiteGet' ref callSiteSet); " is 163.
Long Statement,Dynamitey,Dynamic,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Dynamic.cs,InvokeSubtractAssignMember,The length of the statement  "            InvokeHelper.InvokeSubtractAssignCallSite(target' name' args' argNames' context' staticContext' ref callSiteIsEvent' ref callSiteRemove' ref callSiteGet'ref  callSiteSet); " is 171.
Long Statement,Dynamitey,FluentRegex,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\FluentRegex.cs,FluentFilter,The length of the statement  "            return list.Select(it => regex.Match(it)).Where(it => it.Success).Select(it => new DynamicObjects.RegexMatch(it' regex)).Cast<dynamic>(); " is 137.
Long Statement,Dynamitey,FluentRegex,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\FluentRegex.cs,Matches,The length of the statement  "            return tMatches.Cast<Match>().Where(it => it.Success).Select(it => new DynamicObjects.RegexMatch(it' regex)).Cast<dynamic>(); " is 125.
Long Statement,Dynamitey,Invocation,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Invocation.cs,Equals,The length of the statement  "            return Equals(other.Kind' Kind) && Equals(other.Name' Name) && (Equals(other.Args' Args) || Enumerable.SequenceEqual(other.Args' Args)); " is 136.
Long Statement,Dynamitey,PartialApply,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\PartialApply.cs,TryInvoke,The length of the statement  "                    tCacheableInvocation = new CacheableInvocation(InvocationKind' _memberName' argCount: tNewArgs.Length' context: _target); " is 121.
Long Statement,Dynamitey.DynamicObjects,BaseDictionary,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\DynamicObjects\BaseDictionary.cs,OnPropertyChanged,The length of the statement  "                  PropertyChanged(this' new PropertyChangedEventArgs("Item[]"));  //Indexers are Updated on Dictionarys as well WPF does not support Item[key] syntax " is 147.
Long Statement,Dynamitey.DynamicObjects,Builder<TObjectProtoType>,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\DynamicObjects\Builder.cs,TryInvokeMember,The length of the statement  "                if (Dynamic.Impromptu.IsAvailable && typeInfo.IsInterface && result != null && !typeInfo.IsAssignableFrom(result.GetType())) " is 124.
Long Statement,Dynamitey.DynamicObjects,Builder<TObjectProtoType>,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\DynamicObjects\Builder.cs,InvokeHelper,The length of the statement  "                    result = Activator.CreateInstance<TObjectProtoType>();//Try first because faster but doens't work with optional parameters " is 122.
Long Statement,Dynamitey.DynamicObjects,ExtensionToInstanceProxy,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\DynamicObjects\ExtensionToInstanceProxy.cs,IsExtendedType,The length of the statement  "                it => ((genericDef && it.GetTypeInfo().IsGenericType) ? it.GetGenericTypeDefinition() : it).Name == _extendedType.Name); " is 120.
Long Statement,Dynamitey.DynamicObjects,Invoker,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\DynamicObjects\ExtensionToInstanceProxy.cs,TryGetIndex,The length of the statement  "                result = new Invoker(Name' GenericParams' indexes.Select(it => Dynamic.InvokeConvert(it' typeof(Type)' @explicit: true)).Cast<Type>().ToArray()' Parent); " is 153.
Long Statement,Dynamitey.DynamicObjects,OverloadInvoker,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\DynamicObjects\ExtensionToInstanceProxy.cs,TryGetIndex,The length of the statement  "                result = new Invoker(Name' GenericParams' GenericMethodParameters' Parent' indexes.Select(it => Dynamic.InvokeConvert(it' typeof(Type)' @explicit: true)).Cast<Type>().ToArray()); " is 178.
Long Statement,Dynamitey.DynamicObjects,Recorder,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\DynamicObjects\Recorder.cs,TryInvokeMember,The length of the statement  "                Recording.Add(new Invocation(InvocationKind.InvokeMemberUnknown' binder.Name' Util.NameArgsIfNecessary(binder.CallInfo' args))); " is 128.
Long Statement,Dynamitey.DynamicObjects,Recorder,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\DynamicObjects\Recorder.cs,TryGetIndex,The length of the statement  "                Recording.Add(new Invocation(InvocationKind.GetIndex' Invocation.IndexBinderName' Util.NameArgsIfNecessary(binder.CallInfo' indexes))); " is 135.
Long Statement,Dynamitey.DynamicObjects,Recorder,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\DynamicObjects\Recorder.cs,TrySetIndex,The length of the statement  "                Recording.Add(new Invocation(InvocationKind.GetIndex' Invocation.IndexBinderName' Util.NameArgsIfNecessary(binder.CallInfo' tCombinedArgs))); " is 141.
Long Statement,Dynamitey.Internal,InvokeSetters,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\InvokeSetters.cs,TryInvoke,The length of the statement  "                    throw new RuntimeBinderException("InvokeSetAll requires first parameter to be target unamed' and all other parameters to be named."); " is 133.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,CreateCallSite,The length of the statement  "            return (CallSite)tSite.Target(tSite' typeof(InvokeHelper)' specificBinderType' knownType' binder' name' context' argNames' staticContext' isEvent); " is 147.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,CreateCallSite,The length of the statement  "            var tHash = BinderHash<T>.Create(name' context' argNames' specificBinderType' staticContext' isEvent' knownType != Unknown); " is 124.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,CreateCallSite,The length of the statement  "            var tHash = BinderHash<T>.Create(name' context' argNames' specificBinderType' staticContext' isEvent' knownType != Unknown); " is 124.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,DynamicInvokeStaticMember,The length of the statement  "            return tSite.Target(tSite' typeof(InvokeHelper)' ref callsite' binderType' knownType' binder' name' staticContext' context' argNames' target' args); " is 148.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMember,The length of the statement  "            return InvokeMemberTargetType<object' TReturn>(ref callsite' binderType' knownType' binder' name' staticContext' context' argNames' target' args); " is 146.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeSetCallSite,The length of the statement  "                    callSite = CreateCallSite<Action<CallSite' object' object>>(tBinderType'KnownMember' tBinder' name' context' staticContext:true); " is 129.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeSetCallSite,The length of the statement  "                    callSite = CreateCallSite<Func<CallSite' object' object' object>>(tBinderType'KnownSet' tBinder' name' context' staticContext: false); " is 134.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberCallSite,The length of the statement  "            return InvokeMember<object>(ref callSite' tBinderType' KnownMember' tBinder' name' tStaticContext' tContext' tArgNames' target' args); " is 134.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeDirectCallSite,The length of the statement  "            return InvokeMember<object>(ref callSite' tBinderType' KnownDirect'tBinder' String.Empty' tStaticContext' tContext' tArgNames' target' args); " is 141.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeGetIndexCallSite,The length of the statement  "            return InvokeMember<object>(ref callSite'tBinderType' Unknown' tBinder' Invocation.IndexBinderName' tStaticContext' context' argNames' target' indexes); " is 152.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeSetIndexCallSite,The length of the statement  "            return InvokeMember<object>(ref tCallSite' tBinderType' Unknown' tBinder' Invocation.IndexBinderName' tStaticContext' tContext' tArgNames' target' indexesThenValue); " is 165.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberActionCallSite,The length of the statement  "            InvokeMemberAction(ref callSite'tBinderType' KnownMember' tBinder' name' tStaticContext' tContext' tArgNames' target' args); " is 124.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeDirectActionCallSite,The length of the statement  "            InvokeMemberAction(ref callSite' tBinderType' KnownDirect' tBinder' String.Empty' tStaticContext' tContext' tArgNames' target' args); " is 133.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeAddAssignCallSite,The length of the statement  "                InvokeMemberActionCallSite(target' InvokeMemberName.CreateSpecialName("add_" + name)' args' argNames' context' staticContext' ref callSiteAdd); " is 143.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeSubtractAssignCallSite,The length of the statement  "                InvokeMemberActionCallSite(target' InvokeMemberName.CreateSpecialName("remove_" + name)' args' argNames' context' staticContext' ref callSiteRemove); " is 149.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeConstructorCallSite,The length of the statement  "            return InvokeMemberTargetType<Type' object>(ref callSite' tBinderType' KnownConstructor' tBinder' ConstructorName' true' type' argNames' " is 136.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext); " is 124.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext); " is 132.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext); " is 140.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext); " is 148.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext); " is 156.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext); " is 164.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext); " is 172.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext); " is 180.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite; " is 126.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext); " is 188.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite; " is 134.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext); " is 196.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite; " is 142.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext); " is 204.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "                        tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]); " is 126.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite; " is 150.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext); " is 212.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "                        tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]); " is 136.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite; " is 158.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext); " is 220.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "                        tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]); " is 146.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite; " is 166.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext); " is 228.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "                        tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]); " is 156.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite; " is 174.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext); " is 236.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "                        tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]); " is 166.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The length of the statement  "                    Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args); " is 123.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext); " is 130.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext); " is 138.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext); " is 146.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext); " is 154.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext); " is 162.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext); " is 170.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext); " is 178.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite; " is 125.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext); " is 186.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite; " is 133.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext); " is 194.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite; " is 141.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext); " is 202.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "                        return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]); " is 124.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite; " is 149.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext); " is 210.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "                        return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]); " is 133.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite; " is 157.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext); " is 218.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "                        return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]); " is 143.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite; " is 165.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext); " is 226.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "                        return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]); " is 153.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite; " is 173.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext); " is 234.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "                        return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]); " is 163.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite; " is 181.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext); " is 242.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "                        return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]); " is 173.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The length of the statement  "                    return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args); " is 130.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,The length of the statement  "						return new Func< object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6)); " is 126.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,The length of the statement  "						return new Func< object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7)); " is 140.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,The length of the statement  "						return new Func< object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8)); " is 154.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,The length of the statement  "						return new Func< object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9)); " is 168.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,The length of the statement  "						return new Func< object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)); " is 184.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,The length of the statement  "						return new Func< object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)); " is 200.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,The length of the statement  "						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)); " is 216.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,The length of the statement  "						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)); " is 232.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,The length of the statement  "						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)); " is 248.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,The length of the statement  "						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)); " is 264.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,The length of the statement  "						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)); " is 280.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapAction,The length of the statement  "						return new Action< object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7)); " is 133.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapAction,The length of the statement  "						return new Action< object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8)); " is 147.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapAction,The length of the statement  "						return new Action< object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9)); " is 161.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapAction,The length of the statement  "						return new Action< object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)); " is 177.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapAction,The length of the statement  "						return new Action< object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)); " is 193.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapAction,The length of the statement  "						return new Action< object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)); " is 209.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapAction,The length of the statement  "						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)); " is 225.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapAction,The length of the statement  "						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)); " is 241.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapAction,The length of the statement  "						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)); " is 257.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapAction,The length of the statement  "						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)); " is 273.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The length of the statement  "                    return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]); " is 120.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The length of the statement  "                    return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]); " is 129.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The length of the statement  "                    return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]); " is 138.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The length of the statement  "                    return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]); " is 147.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The length of the statement  "                    tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]); " is 122.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The length of the statement  "                    tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]); " is 131.
Long Statement,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The length of the statement  "                    tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]); " is 140.
Long Statement,Dynamitey.Internal.Optimization,Util,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\Util.cs,NameArgsIfNecessary,The length of the statement  "                tArgs = Enumerable.Repeat(default(string)' tStop).Concat(callInfo.ArgumentNames).Zip(args' (n' v) => n == null ? v : new InvokeArg(n' v)).ToArray(); " is 148.
Complex Conditional,Dynamitey.DynamicObjects,Builder<TObjectProtoType>,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\DynamicObjects\Builder.cs,TryInvokeMember,The conditional expression  "Dynamic.Impromptu.IsAvailable && typeInfo.IsInterface && result != null && !typeInfo.IsAssignableFrom(result.GetType())"  is complex.
Complex Conditional,Dynamitey.Internal.Optimization,Util,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\Util.cs,MassageResultBasedOnInterface,The conditional expression  "result is IDictionary<string' object> && !(result is BaseDictionary)                      && (!tTryType || tType == typeof(object))"  is complex.
Empty Catch Block,Dynamitey,Dynamic,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Dynamic.cs,CoerceConvert,The method has an empty catch block.
Magic Number,Dynamitey,CacheableInvocation,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\CacheableInvocation.cs,CacheableInvocation,The following statement contains a magic number: switch (kind) //Set required argcount values              {                  case InvocationKind.GetIndex:                      if (argCount < 1)                      {                          throw new ArgumentException("Arg Count must be at least 1 for a GetIndex"' nameof(argCount));                      }                      _argCount = argCount;                      break;                  case InvocationKind.SetIndex:                      if (argCount < 2)                      {                          throw new ArgumentException("Arg Count Must be at least 2 for a SetIndex"' nameof(argCount));                      }                      _argCount = argCount;                      break;                  case InvocationKind.Convert:                      _argCount = 0;                      if(convertType==null)                          throw new ArgumentNullException(nameof(convertType)'" Convert Requires Convert Type ");                      break;                  case InvocationKind.SubtractAssign:                  case InvocationKind.AddAssign:                  case InvocationKind.Set:                      _argCount = 1;                      break;                  case InvocationKind.Get:                  case InvocationKind.IsEvent:                      _argCount = 0;                      break;                  default:                      _argCount = Math.Max(argCount' _argNames.Length);                      break;              }
Magic Number,Dynamitey,CacheableInvocation,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\CacheableInvocation.cs,GetHashCode,The following statement contains a magic number: result = (result*397) ^ _argCount;
Magic Number,Dynamitey,CacheableInvocation,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\CacheableInvocation.cs,GetHashCode,The following statement contains a magic number: result = (result*397) ^ (_argNames != null ? _argNames.GetHashCode() : 0);
Magic Number,Dynamitey,CacheableInvocation,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\CacheableInvocation.cs,GetHashCode,The following statement contains a magic number: result = (result*397) ^ _staticContext.GetHashCode();
Magic Number,Dynamitey,CacheableInvocation,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\CacheableInvocation.cs,GetHashCode,The following statement contains a magic number: result = (result*397) ^ (_context != null ? _context.GetHashCode() : 0);
Magic Number,Dynamitey,CacheableInvocation,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\CacheableInvocation.cs,GetHashCode,The following statement contains a magic number: result = (result*397) ^ _convertExplicit.GetHashCode();
Magic Number,Dynamitey,CacheableInvocation,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\CacheableInvocation.cs,GetHashCode,The following statement contains a magic number: result = (result*397) ^ (_convertType != null ? _convertType.GetHashCode() : 0);
Magic Number,Dynamitey,CacheableInvocation,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\CacheableInvocation.cs,Invoke,The following statement contains a magic number: switch (Kind)                  {                      case InvocationKind.Convert:                          if (args.Length > 0)                          {                              if (!Equals(args[0]' _convertType))                                  throw new ArgumentException("CacheableInvocation can't change conversion type on invoke."' nameof(args));                          }                          if (args.Length > 1)                          {                              if(!Equals(args[1]' _convertExplicit))                                  throw new ArgumentException("CacheableInvocation can't change explicit/implicit conversion on invoke."' nameof(args));                          }                            if(args.Length > 2)                              goto default;                          break;                      default:                          throw new ArgumentException("args"'                              $"Incorrect number of Arguments for CachedInvocation' Expected:{_argCount}");                  }
Magic Number,Dynamitey,Dynamic,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Dynamic.cs,InvokeSetIndex,The following statement contains a magic number: indexesThenValue.Length < 2
Magic Number,Dynamitey,Dynamic,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Dynamic.cs,GenericDelegateType,The following statement contains a magic number: throw new ArgumentException(                      $"{(returnVoid ? "Action" : "Func")} only handle at  most {(returnVoid ? 16 : 17)} parameters"' nameof(paramCount));
Magic Number,Dynamitey,Dynamic,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Dynamic.cs,GenericDelegateType,The following statement contains a magic number: throw new ArgumentException(                      $"{(returnVoid ? "Action" : "Func")} only handle at  most {(returnVoid ? 16 : 17)} parameters"' nameof(paramCount));
Magic Number,Dynamitey,Dynamic,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Dynamic.cs,GenericDelegateType,The following statement contains a magic number: tParamCount > 16
Magic Number,Dynamitey,Invocation,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Invocation.cs,GetHashCode,The following statement contains a magic number: result = (result*397) ^ (Name != null ? Name.GetHashCode() : 0);
Magic Number,Dynamitey,Invocation,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Invocation.cs,GetHashCode,The following statement contains a magic number: result = (result*397) ^ (Args != null ? Args.GetHashCode() : 0);
Magic Number,Dynamitey,Invocation,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Invocation.cs,Invoke,The following statement contains a magic number: switch (Kind)              {                  case InvocationKind.Constructor:                      return Dynamic.InvokeConstructor((Type)target' args);                  case InvocationKind.Convert:                      bool tExplicit = false;                      if (Args.Length == 2)                          tExplicit = (bool)args[1];                      return Dynamic.InvokeConvert(target' (Type)args[0]' tExplicit);                  case InvocationKind.Get:                      return Dynamic.InvokeGet(target' Name.Name);                  case InvocationKind.Set:                      Dynamic.InvokeSet(target' Name.Name' args.FirstOrDefault());                      return null;                  case InvocationKind.GetIndex:                      return Dynamic.InvokeGetIndex(target' args);                  case InvocationKind.SetIndex:                      Dynamic.InvokeSetIndex(target' args);                      return null;                  case InvocationKind.InvokeMember:                      return Dynamic.InvokeMember(target' Name' args);                  case InvocationKind.InvokeMemberAction:                      Dynamic.InvokeMemberAction(target' Name' args);                      return null;                  case InvocationKind.InvokeMemberUnknown:                      {                          try                          {                              return Dynamic.InvokeMember(target' Name' args);                          }                          catch (RuntimeBinderException)                          {                                Dynamic.InvokeMemberAction(target' Name' args);                              return null;                          }                      }                  case InvocationKind.Invoke:                      return Dynamic.Invoke(target' args);                  case InvocationKind.InvokeAction:                      Dynamic.InvokeAction(target' args);                      return null;                  case InvocationKind.InvokeUnknown:                      {                          try                          {                              return Dynamic.Invoke(target' args);                          }                          catch (RuntimeBinderException)                          {                                Dynamic.InvokeAction(target' args);                              return null;                          }                      }                  case InvocationKind.AddAssign:                      Dynamic.InvokeAddAssignMember(target' Name.Name' args.FirstOrDefault());                      return null;                  case InvocationKind.SubtractAssign:                      Dynamic.InvokeSubtractAssignMember(target' Name.Name' args.FirstOrDefault());                      return null;                  case InvocationKind.IsEvent:                      return Dynamic.InvokeIsEvent(target' Name.Name);                  default:                      throw new InvalidOperationException("Unknown Invocation Kind: " + Kind);              }
Magic Number,Dynamitey,InvokeMemberName,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\InvokeMemberName.cs,GetHashCode,The following statement contains a magic number: return (GenericArgs != null ? GenericArgs.Length.GetHashCode() * 397 : 0) ^ (Name.GetHashCode());
Magic Number,Dynamitey,Tupler,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Tupler.cs,ToTuple,The following statement contains a magic number: items.Count() < 8
Magic Number,Dynamitey,Tupler,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Tupler.cs,ToTuple,The following statement contains a magic number: return Dynamic.InvokeMember(TuplerHelper' "Create"'                                          items.Take(7).Concat(new object[] { items.Skip(7).ToTuple() }).ToArray());
Magic Number,Dynamitey,Tupler,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Tupler.cs,ToTuple,The following statement contains a magic number: return Dynamic.InvokeMember(TuplerHelper' "Create"'                                          items.Take(7).Concat(new object[] { items.Skip(7).ToTuple() }).ToArray());
Magic Number,Dynamitey,Tupler,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Tupler.cs,HelperToList,The following statement contains a magic number: i < 7 && i < size
Magic Number,Dynamitey,Tupler,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Tupler.cs,HelperToList,The following statement contains a magic number: size == 8
Magic Number,Dynamitey,Tupler,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Tupler.cs,HelperIndex,The following statement contains a magic number: item < 8
Magic Number,Dynamitey,Tupler,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Tupler.cs,HelperIndex,The following statement contains a magic number: return HelperIndex(newtarget' item - 8' true);
Magic Number,Dynamitey,Tupler,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Tupler.cs,HelperSize,The following statement contains a magic number: var lasttype = type.GetTypeInfo().GetGenericArguments()[7];
Magic Number,Dynamitey,Tupler,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Tupler.cs,HelperSize,The following statement contains a magic number: size == 8
Magic Number,Dynamitey.DynamicObjects,List,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\DynamicObjects\List.cs,GetHashCode,The following statement contains a magic number: return (base.GetHashCode()*397) ^ _list.GetHashCode();
Magic Number,Dynamitey.Internal.Optimization,BinderHash,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\BinderHash.cs,GetHashCode,The following statement contains a magic number: int result = (tArgNames == null ? 0 : tArgNames.Length * 397);
Magic Number,Dynamitey.Internal.Optimization,BinderHash,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\BinderHash.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ Name.GetHashCode();
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,TupleItem,The following statement contains a magic number: switch(index){  				case 1:  					return tuple.Item1;  				case 2:  					return tuple.Item2;  				case 3:  					return tuple.Item3;  				case 4:  					return tuple.Item4;  				case 5:  					return tuple.Item5;  				case 6:  					return tuple.Item6;  				case 7:  					return tuple.Item7;  				default:  					return tuple.Rest;  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,TupleItem,The following statement contains a magic number: switch(index){  				case 1:  					return tuple.Item1;  				case 2:  					return tuple.Item2;  				case 3:  					return tuple.Item3;  				case 4:  					return tuple.Item4;  				case 5:  					return tuple.Item5;  				case 6:  					return tuple.Item6;  				case 7:  					return tuple.Item7;  				default:  					return tuple.Rest;  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,TupleItem,The following statement contains a magic number: switch(index){  				case 1:  					return tuple.Item1;  				case 2:  					return tuple.Item2;  				case 3:  					return tuple.Item3;  				case 4:  					return tuple.Item4;  				case 5:  					return tuple.Item5;  				case 6:  					return tuple.Item6;  				case 7:  					return tuple.Item7;  				default:  					return tuple.Rest;  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,TupleItem,The following statement contains a magic number: switch(index){  				case 1:  					return tuple.Item1;  				case 2:  					return tuple.Item2;  				case 3:  					return tuple.Item3;  				case 4:  					return tuple.Item4;  				case 5:  					return tuple.Item5;  				case 6:  					return tuple.Item6;  				case 7:  					return tuple.Item7;  				default:  					return tuple.Rest;  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,TupleItem,The following statement contains a magic number: switch(index){  				case 1:  					return tuple.Item1;  				case 2:  					return tuple.Item2;  				case 3:  					return tuple.Item3;  				case 4:  					return tuple.Item4;  				case 5:  					return tuple.Item5;  				case 6:  					return tuple.Item6;  				case 7:  					return tuple.Item7;  				default:  					return tuple.Rest;  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,TupleItem,The following statement contains a magic number: switch(index){  				case 1:  					return tuple.Item1;  				case 2:  					return tuple.Item2;  				case 3:  					return tuple.Item3;  				case 4:  					return tuple.Item4;  				case 5:  					return tuple.Item5;  				case 6:  					return tuple.Item6;  				case 7:  					return tuple.Item7;  				default:  					return tuple.Rest;  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberAction,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  						var tCallSite = (CallSite<Action<CallSite'  object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target);                          break;                      }                  case 1:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]);                          break;                      }                  case 2:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]);                          break;                      }                  case 3:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                          break;                      }                  case 4:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                          break;                      }                  case 5:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                          break;                      }                  case 6:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                          break;                      }                  case 7:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                          break;                      }                  case 8:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                          break;                      }                  case 9:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                          break;                      }                  case 10:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                          break;                      }                  case 11:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                          break;                      }                  case 12:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                          break;                      }                  case 13:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                          break;                      }                  case 14:                      {  						var tCallSite = (CallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>)callsite;  						if(tCallSite == null){  							tCallSite = CreateCallSite<Action<CallSite'  object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>>(binderType'knownType' binder' name' context' argNames' staticContext);  						    callsite=tCallSite;  						}                          tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                          break;                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(void));                      Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                      break;                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,InvokeMemberTargetType,The following statement contains a magic number: switch (tSwitch)              {  #region Optimizations                  case 0:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget' TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget' TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target);                      }                  case 1:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]);                      }                  case 2:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]);                      }                  case 3:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]);                      }                  case 4:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]);                      }                  case 5:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]);                      }                  case 6:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);                      }                  case 7:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]);                      }                  case 8:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]);                      }                  case 9:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]);                      }                  case 10:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]);                      }                  case 11:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]);                      }                  case 12:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]);                      }                  case 13:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]);                      }                  case 14:                      {  					    var tCallSite = (CallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>)callsite;  					    if(tCallSite==null){  							 tCallSite = CreateCallSite<Func<CallSite' TTarget'  object' object' object' object' object' object' object' object' object' object' object' object' object' object'TReturn>>(binderType'knownType'binder' name' context' argNames' staticContext);  							 callsite =tCallSite;  						}                          return tCallSite.Target(tCallSite' target' args[0]' args[1]' args[2]' args[3]' args[4]' args[5]' args[6]' args[7]' args[8]' args[9]' args[10]' args[11]' args[12]' args[13]);                      }  #endregion                  default:                      var tArgTypes = Enumerable.Repeat(typeof(object)' tSwitch);                      var tDelagateType = EmitCallSiteFuncType(tArgTypes' typeof(TTarget));                      return Dynamic.InvokeCallSite(CreateCallSite(tDelagateType' binderType'knownType' binder' name' context' argNames)' target' args);                }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,The following statement contains a magic number: switch(length){  #region Optimizations  			   					case 0:  						return new Func< TReturn>(()=> invokable());    					case 1:  						return new Func< object' TReturn>((a1)=> invokable(a1));    					case 2:  						return new Func< object' object' TReturn>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Func< object' object' object' TReturn>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Func< object' object' object' object' TReturn>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Func< object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Func< object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Func< object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Func< object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Func< object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Func< object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion	  				default:  					return new DynamicFunc<TReturn>(args=>(TReturn)Dynamic.Invoke((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,The following statement contains a magic number: switch(length){  #region Optimizations  			   					case 0:  						return new Func< TReturn>(()=> invokable());    					case 1:  						return new Func< object' TReturn>((a1)=> invokable(a1));    					case 2:  						return new Func< object' object' TReturn>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Func< object' object' object' TReturn>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Func< object' object' object' object' TReturn>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Func< object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Func< object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Func< object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Func< object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Func< object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Func< object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion	  				default:  					return new DynamicFunc<TReturn>(args=>(TReturn)Dynamic.Invoke((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,The following statement contains a magic number: switch(length){  #region Optimizations  			   					case 0:  						return new Func< TReturn>(()=> invokable());    					case 1:  						return new Func< object' TReturn>((a1)=> invokable(a1));    					case 2:  						return new Func< object' object' TReturn>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Func< object' object' object' TReturn>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Func< object' object' object' object' TReturn>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Func< object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Func< object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Func< object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Func< object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Func< object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Func< object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion	  				default:  					return new DynamicFunc<TReturn>(args=>(TReturn)Dynamic.Invoke((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,The following statement contains a magic number: switch(length){  #region Optimizations  			   					case 0:  						return new Func< TReturn>(()=> invokable());    					case 1:  						return new Func< object' TReturn>((a1)=> invokable(a1));    					case 2:  						return new Func< object' object' TReturn>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Func< object' object' object' TReturn>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Func< object' object' object' object' TReturn>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Func< object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Func< object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Func< object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Func< object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Func< object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Func< object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion	  				default:  					return new DynamicFunc<TReturn>(args=>(TReturn)Dynamic.Invoke((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,The following statement contains a magic number: switch(length){  #region Optimizations  			   					case 0:  						return new Func< TReturn>(()=> invokable());    					case 1:  						return new Func< object' TReturn>((a1)=> invokable(a1));    					case 2:  						return new Func< object' object' TReturn>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Func< object' object' object' TReturn>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Func< object' object' object' object' TReturn>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Func< object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Func< object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Func< object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Func< object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Func< object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Func< object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion	  				default:  					return new DynamicFunc<TReturn>(args=>(TReturn)Dynamic.Invoke((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,The following statement contains a magic number: switch(length){  #region Optimizations  			   					case 0:  						return new Func< TReturn>(()=> invokable());    					case 1:  						return new Func< object' TReturn>((a1)=> invokable(a1));    					case 2:  						return new Func< object' object' TReturn>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Func< object' object' object' TReturn>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Func< object' object' object' object' TReturn>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Func< object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Func< object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Func< object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Func< object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Func< object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Func< object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion	  				default:  					return new DynamicFunc<TReturn>(args=>(TReturn)Dynamic.Invoke((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,The following statement contains a magic number: switch(length){  #region Optimizations  			   					case 0:  						return new Func< TReturn>(()=> invokable());    					case 1:  						return new Func< object' TReturn>((a1)=> invokable(a1));    					case 2:  						return new Func< object' object' TReturn>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Func< object' object' object' TReturn>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Func< object' object' object' object' TReturn>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Func< object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Func< object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Func< object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Func< object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Func< object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Func< object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion	  				default:  					return new DynamicFunc<TReturn>(args=>(TReturn)Dynamic.Invoke((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,The following statement contains a magic number: switch(length){  #region Optimizations  			   					case 0:  						return new Func< TReturn>(()=> invokable());    					case 1:  						return new Func< object' TReturn>((a1)=> invokable(a1));    					case 2:  						return new Func< object' object' TReturn>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Func< object' object' object' TReturn>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Func< object' object' object' object' TReturn>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Func< object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Func< object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Func< object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Func< object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Func< object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Func< object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion	  				default:  					return new DynamicFunc<TReturn>(args=>(TReturn)Dynamic.Invoke((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,The following statement contains a magic number: switch(length){  #region Optimizations  			   					case 0:  						return new Func< TReturn>(()=> invokable());    					case 1:  						return new Func< object' TReturn>((a1)=> invokable(a1));    					case 2:  						return new Func< object' object' TReturn>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Func< object' object' object' TReturn>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Func< object' object' object' object' TReturn>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Func< object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Func< object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Func< object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Func< object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Func< object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Func< object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion	  				default:  					return new DynamicFunc<TReturn>(args=>(TReturn)Dynamic.Invoke((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,The following statement contains a magic number: switch(length){  #region Optimizations  			   					case 0:  						return new Func< TReturn>(()=> invokable());    					case 1:  						return new Func< object' TReturn>((a1)=> invokable(a1));    					case 2:  						return new Func< object' object' TReturn>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Func< object' object' object' TReturn>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Func< object' object' object' object' TReturn>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Func< object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Func< object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Func< object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Func< object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Func< object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Func< object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion	  				default:  					return new DynamicFunc<TReturn>(args=>(TReturn)Dynamic.Invoke((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,The following statement contains a magic number: switch(length){  #region Optimizations  			   					case 0:  						return new Func< TReturn>(()=> invokable());    					case 1:  						return new Func< object' TReturn>((a1)=> invokable(a1));    					case 2:  						return new Func< object' object' TReturn>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Func< object' object' object' TReturn>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Func< object' object' object' object' TReturn>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Func< object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Func< object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Func< object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Func< object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Func< object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Func< object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion	  				default:  					return new DynamicFunc<TReturn>(args=>(TReturn)Dynamic.Invoke((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,The following statement contains a magic number: switch(length){  #region Optimizations  			   					case 0:  						return new Func< TReturn>(()=> invokable());    					case 1:  						return new Func< object' TReturn>((a1)=> invokable(a1));    					case 2:  						return new Func< object' object' TReturn>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Func< object' object' object' TReturn>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Func< object' object' object' object' TReturn>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Func< object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Func< object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Func< object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Func< object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Func< object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Func< object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion	  				default:  					return new DynamicFunc<TReturn>(args=>(TReturn)Dynamic.Invoke((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,The following statement contains a magic number: switch(length){  #region Optimizations  			   					case 0:  						return new Func< TReturn>(()=> invokable());    					case 1:  						return new Func< object' TReturn>((a1)=> invokable(a1));    					case 2:  						return new Func< object' object' TReturn>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Func< object' object' object' TReturn>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Func< object' object' object' object' TReturn>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Func< object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Func< object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Func< object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Func< object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Func< object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Func< object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion	  				default:  					return new DynamicFunc<TReturn>(args=>(TReturn)Dynamic.Invoke((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,The following statement contains a magic number: switch(length){  #region Optimizations  			   					case 0:  						return new Func< TReturn>(()=> invokable());    					case 1:  						return new Func< object' TReturn>((a1)=> invokable(a1));    					case 2:  						return new Func< object' object' TReturn>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Func< object' object' object' TReturn>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Func< object' object' object' object' TReturn>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Func< object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Func< object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Func< object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Func< object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Func< object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Func< object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion	  				default:  					return new DynamicFunc<TReturn>(args=>(TReturn)Dynamic.Invoke((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapFuncHelper,The following statement contains a magic number: switch(length){  #region Optimizations  			   					case 0:  						return new Func< TReturn>(()=> invokable());    					case 1:  						return new Func< object' TReturn>((a1)=> invokable(a1));    					case 2:  						return new Func< object' object' TReturn>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Func< object' object' object' TReturn>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Func< object' object' object' object' TReturn>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Func< object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Func< object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Func< object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Func< object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Func< object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Func< object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Func< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' TReturn>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion	  				default:  					return new DynamicFunc<TReturn>(args=>(TReturn)Dynamic.Invoke((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapAction,The following statement contains a magic number: switch(length){  #region Optimizations  				    case 0:  					    return new Action(()=>invokable());    					case 1:  						return new Action< object>((a1)=> invokable(a1));    					case 2:  						return new Action< object' object>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Action< object' object' object>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Action< object' object' object' object>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Action< object' object' object' object' object>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Action< object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Action< object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Action< object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Action< object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Action< object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Action< object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion		  				default:  					return new DynamicAction(args=>Dynamic.InvokeAction((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapAction,The following statement contains a magic number: switch(length){  #region Optimizations  				    case 0:  					    return new Action(()=>invokable());    					case 1:  						return new Action< object>((a1)=> invokable(a1));    					case 2:  						return new Action< object' object>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Action< object' object' object>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Action< object' object' object' object>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Action< object' object' object' object' object>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Action< object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Action< object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Action< object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Action< object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Action< object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Action< object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion		  				default:  					return new DynamicAction(args=>Dynamic.InvokeAction((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapAction,The following statement contains a magic number: switch(length){  #region Optimizations  				    case 0:  					    return new Action(()=>invokable());    					case 1:  						return new Action< object>((a1)=> invokable(a1));    					case 2:  						return new Action< object' object>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Action< object' object' object>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Action< object' object' object' object>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Action< object' object' object' object' object>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Action< object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Action< object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Action< object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Action< object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Action< object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Action< object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion		  				default:  					return new DynamicAction(args=>Dynamic.InvokeAction((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapAction,The following statement contains a magic number: switch(length){  #region Optimizations  				    case 0:  					    return new Action(()=>invokable());    					case 1:  						return new Action< object>((a1)=> invokable(a1));    					case 2:  						return new Action< object' object>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Action< object' object' object>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Action< object' object' object' object>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Action< object' object' object' object' object>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Action< object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Action< object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Action< object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Action< object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Action< object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Action< object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion		  				default:  					return new DynamicAction(args=>Dynamic.InvokeAction((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapAction,The following statement contains a magic number: switch(length){  #region Optimizations  				    case 0:  					    return new Action(()=>invokable());    					case 1:  						return new Action< object>((a1)=> invokable(a1));    					case 2:  						return new Action< object' object>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Action< object' object' object>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Action< object' object' object' object>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Action< object' object' object' object' object>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Action< object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Action< object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Action< object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Action< object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Action< object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Action< object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion		  				default:  					return new DynamicAction(args=>Dynamic.InvokeAction((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapAction,The following statement contains a magic number: switch(length){  #region Optimizations  				    case 0:  					    return new Action(()=>invokable());    					case 1:  						return new Action< object>((a1)=> invokable(a1));    					case 2:  						return new Action< object' object>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Action< object' object' object>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Action< object' object' object' object>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Action< object' object' object' object' object>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Action< object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Action< object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Action< object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Action< object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Action< object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Action< object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion		  				default:  					return new DynamicAction(args=>Dynamic.InvokeAction((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapAction,The following statement contains a magic number: switch(length){  #region Optimizations  				    case 0:  					    return new Action(()=>invokable());    					case 1:  						return new Action< object>((a1)=> invokable(a1));    					case 2:  						return new Action< object' object>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Action< object' object' object>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Action< object' object' object' object>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Action< object' object' object' object' object>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Action< object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Action< object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Action< object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Action< object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Action< object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Action< object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion		  				default:  					return new DynamicAction(args=>Dynamic.InvokeAction((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapAction,The following statement contains a magic number: switch(length){  #region Optimizations  				    case 0:  					    return new Action(()=>invokable());    					case 1:  						return new Action< object>((a1)=> invokable(a1));    					case 2:  						return new Action< object' object>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Action< object' object' object>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Action< object' object' object' object>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Action< object' object' object' object' object>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Action< object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Action< object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Action< object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Action< object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Action< object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Action< object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion		  				default:  					return new DynamicAction(args=>Dynamic.InvokeAction((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapAction,The following statement contains a magic number: switch(length){  #region Optimizations  				    case 0:  					    return new Action(()=>invokable());    					case 1:  						return new Action< object>((a1)=> invokable(a1));    					case 2:  						return new Action< object' object>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Action< object' object' object>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Action< object' object' object' object>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Action< object' object' object' object' object>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Action< object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Action< object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Action< object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Action< object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Action< object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Action< object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion		  				default:  					return new DynamicAction(args=>Dynamic.InvokeAction((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapAction,The following statement contains a magic number: switch(length){  #region Optimizations  				    case 0:  					    return new Action(()=>invokable());    					case 1:  						return new Action< object>((a1)=> invokable(a1));    					case 2:  						return new Action< object' object>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Action< object' object' object>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Action< object' object' object' object>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Action< object' object' object' object' object>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Action< object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Action< object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Action< object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Action< object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Action< object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Action< object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion		  				default:  					return new DynamicAction(args=>Dynamic.InvokeAction((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapAction,The following statement contains a magic number: switch(length){  #region Optimizations  				    case 0:  					    return new Action(()=>invokable());    					case 1:  						return new Action< object>((a1)=> invokable(a1));    					case 2:  						return new Action< object' object>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Action< object' object' object>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Action< object' object' object' object>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Action< object' object' object' object' object>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Action< object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Action< object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Action< object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Action< object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Action< object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Action< object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion		  				default:  					return new DynamicAction(args=>Dynamic.InvokeAction((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapAction,The following statement contains a magic number: switch(length){  #region Optimizations  				    case 0:  					    return new Action(()=>invokable());    					case 1:  						return new Action< object>((a1)=> invokable(a1));    					case 2:  						return new Action< object' object>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Action< object' object' object>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Action< object' object' object' object>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Action< object' object' object' object' object>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Action< object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Action< object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Action< object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Action< object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Action< object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Action< object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion		  				default:  					return new DynamicAction(args=>Dynamic.InvokeAction((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapAction,The following statement contains a magic number: switch(length){  #region Optimizations  				    case 0:  					    return new Action(()=>invokable());    					case 1:  						return new Action< object>((a1)=> invokable(a1));    					case 2:  						return new Action< object' object>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Action< object' object' object>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Action< object' object' object' object>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Action< object' object' object' object' object>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Action< object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Action< object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Action< object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Action< object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Action< object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Action< object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion		  				default:  					return new DynamicAction(args=>Dynamic.InvokeAction((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapAction,The following statement contains a magic number: switch(length){  #region Optimizations  				    case 0:  					    return new Action(()=>invokable());    					case 1:  						return new Action< object>((a1)=> invokable(a1));    					case 2:  						return new Action< object' object>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Action< object' object' object>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Action< object' object' object' object>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Action< object' object' object' object' object>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Action< object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Action< object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Action< object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Action< object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Action< object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Action< object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion		  				default:  					return new DynamicAction(args=>Dynamic.InvokeAction((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,WrapAction,The following statement contains a magic number: switch(length){  #region Optimizations  				    case 0:  					    return new Action(()=>invokable());    					case 1:  						return new Action< object>((a1)=> invokable(a1));    					case 2:  						return new Action< object' object>((a1'a2)=> invokable(a1'a2));    					case 3:  						return new Action< object' object' object>((a1'a2'a3)=> invokable(a1'a2'a3));    					case 4:  						return new Action< object' object' object' object>((a1'a2'a3'a4)=> invokable(a1'a2'a3'a4));    					case 5:  						return new Action< object' object' object' object' object>((a1'a2'a3'a4'a5)=> invokable(a1'a2'a3'a4'a5));    					case 6:  						return new Action< object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6)=> invokable(a1'a2'a3'a4'a5'a6));    					case 7:  						return new Action< object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7)=> invokable(a1'a2'a3'a4'a5'a6'a7));    					case 8:  						return new Action< object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8));    					case 9:  						return new Action< object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9));    					case 10:  						return new Action< object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10));    					case 11:  						return new Action< object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11));    					case 12:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12));    					case 13:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13));    					case 14:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14));    					case 15:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15));    					case 16:  						return new Action< object' object' object' object' object' object' object' object' object' object' object' object' object' object' object' object>((a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16)=> invokable(a1'a2'a3'a4'a5'a6'a7'a8'a9'a10'a11'a12'a13'a14'a15'a16));  #endregion		  				default:  					return new DynamicAction(args=>Dynamic.InvokeAction((object)invokable'args));  			}
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeReturn,The following statement contains a magic number: switch(args.Length){                  default:                      try                      {                          return del.DynamicInvoke(args);                      }                      catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }  #region Optimization  				case 1:                      return tDel(args[0]);  				case 2:                      return tDel(args[0]'args[1]);  				case 3:                      return tDel(args[0]'args[1]'args[2]);  				case 4:                      return tDel(args[0]'args[1]'args[2]'args[3]);  				case 5:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]);  				case 6:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);  				case 7:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);  				case 8:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);  				case 9:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);  				case 10:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);  				case 11:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);  				case 12:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);  				case 13:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);  				case 14:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);  				case 15:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);  				case 16:                      return tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Magic Number,Dynamitey.Internal.Optimization,InvokeHelper,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\Internal\Optimization\InvokeHelper-Regular.cs,FastDynamicInvokeAction,The following statement contains a magic number: switch(args.Length){                  default:   					try                      {  						del.DynamicInvoke(args);  					}  					catch (TargetInvocationException ex)                      {                          throw ex.InnerException;                      }                      return;  #region Optimization  				case 1:                      tDel(args[0]);                      return;  				case 2:                      tDel(args[0]'args[1]);                      return;  				case 3:                      tDel(args[0]'args[1]'args[2]);                      return;  				case 4:                      tDel(args[0]'args[1]'args[2]'args[3]);                      return;  				case 5:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]);                      return;  				case 6:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]);                      return;  				case 7:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]);                      return;  				case 8:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]);                      return;  				case 9:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]);                      return;  				case 10:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]);                      return;  				case 11:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]);                      return;  				case 12:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]);                      return;  				case 13:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]);                      return;  				case 14:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]);                      return;  				case 15:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]);                      return;  				case 16:                      tDel(args[0]'args[1]'args[2]'args[3]'args[4]'args[5]'args[6]'args[7]'args[8]'args[9]'args[10]'args[11]'args[12]'args[13]'args[14]'args[15]);                      return;  #endregion              }
Missing Default,Dynamitey.DynamicObjects,List,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\DynamicObjects\List.cs,OnCollectionChanged,The following switch statement is missing a default case: switch (action)                  {                      case NotifyCollectionChangedAction.Add:                          CollectionChanged(this' new NotifyCollectionChangedEventArgs(action' newItem' newIndex.GetValueOrDefault()));                          break;                      case NotifyCollectionChangedAction.Remove:                          CollectionChanged(this' new NotifyCollectionChangedEventArgs(action' oldItem' oldIndex.GetValueOrDefault()));                          break;                      case NotifyCollectionChangedAction.Replace:                          CollectionChanged(this' new NotifyCollectionChangedEventArgs(action' oldItem' newItem' oldIndex.GetValueOrDefault()));                          break;                      case NotifyCollectionChangedAction.Reset:                          CollectionChanged(this'new NotifyCollectionChangedEventArgs(action));                          break;                  }
Missing Default,Dynamitey.DynamicObjects,List,D:\research\architectureSmells\repos\ekonbenefits_dynamitey\Dynamitey\DynamicObjects\List.cs,OnCollectionChanged,The following switch statement is missing a default case: switch (action)              {                  case NotifyCollectionChangedAction.Add:                      OnPropertyChanged("Count");                      break;                  case NotifyCollectionChangedAction.Remove:                      OnPropertyChanged("Count");                      break;                  case NotifyCollectionChangedAction.Replace:                      break;                  case NotifyCollectionChangedAction.Reset:                      OnPropertyChanged("Count");                      break;              }
