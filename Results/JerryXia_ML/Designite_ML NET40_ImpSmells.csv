Implementation smell,Namespace,Class,File,Method,Description
Long Method,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,CreateParamInfoGenerator,The method has 251 lines of code.
Long Method,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetTypeDeserializer,The method has 317 lines of code.
Complex Method,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,jsmin,Cyclomatic complexity of the method is 34
Complex Method,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,action,Cyclomatic complexity of the method is 14
Complex Method,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,next,Cyclomatic complexity of the method is 14
Complex Method,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,FillDataset,Cyclomatic complexity of the method is 9
Complex Method,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,Cyclomatic complexity of the method is 8
Complex Method,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,PackListParameters,Cyclomatic complexity of the method is 8
Complex Method,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,CreateParamInfoGenerator,Cyclomatic complexity of the method is 32
Complex Method,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetTypeDeserializer,Cyclomatic complexity of the method is 66
Complex Method,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,LoadLocal,Cyclomatic complexity of the method is 17
Complex Method,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,StoreLocal,Cyclomatic complexity of the method is 17
Complex Method,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,EmitInt32,Cyclomatic complexity of the method is 34
Complex Method,ML.Data,DynamicParameters,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,AddDynamicParams,Cyclomatic complexity of the method is 9
Complex Method,ML.Data,DynamicParameters,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,AddParameters,Cyclomatic complexity of the method is 12
Complex Method,Mono.Data.SqliteClient,SqliteCommand,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteCommand.cs,BindParameters3,Cyclomatic complexity of the method is 22
Complex Method,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,SetConnectionString,Cyclomatic complexity of the method is 24
Complex Method,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,Open,Cyclomatic complexity of the method is 11
Complex Method,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,Cyclomatic complexity of the method is 38
Complex Method,ML.Net,HttpHelper,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpHelper.cs,GetHtml,Cyclomatic complexity of the method is 14
Complex Method,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetCountry,Cyclomatic complexity of the method is 10
Complex Method,ML.Utility,TrieFilter,C:\repos\JerryXia_ML\src\ML NET40\Utility\TrieFilter.cs,Replace,Cyclomatic complexity of the method is 8
Complex Method,ML.Utility,UpYun,C:\repos\JerryXia_ML\src\ML NET40\Utility\UpYunLibrary.cs,newWorker,Cyclomatic complexity of the method is 11
Long Parameter List,ML.Control,BlockHelper,C:\repos\JerryXia_ML\src\ML NET40\Control\Include.cs,BlockHelper,The method has 5 parameters.
Long Parameter List,ML.Data,AccessHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\AccessHelper.cs,PrepareCommand,The method has 6 parameters.
Long Parameter List,ML.Data,AccessHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\AccessHelper.cs,ExecuteReader,The method has 5 parameters.
Long Parameter List,ML.Data,SqlBuilder,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlBuilder.cs,AddClause,The method has 6 parameters.
Long Parameter List,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,PrepareCommand,The method has 7 parameters.
Long Parameter List,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,ExecuteReader,The method has 6 parameters.
Long Parameter List,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,FillDataset,The method has 5 parameters.
Long Parameter List,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,FillDataset,The method has 6 parameters.
Long Parameter List,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,FillDataset,The method has 5 parameters.
Long Parameter List,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,FillDataset,The method has 5 parameters.
Long Parameter List,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,FillDataset,The method has 6 parameters.
Long Parameter List,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,FillDataset,The method has 5 parameters.
Long Parameter List,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,FillDataset,The method has 5 parameters.
Long Parameter List,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,FillDataset,The method has 6 parameters.
Long Parameter List,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,FillDataset,The method has 5 parameters.
Long Parameter List,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,FillDataset,The method has 7 parameters.
Long Parameter List,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,UpdateDataset,The method has 5 parameters.
Long Parameter List,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,Execute,The method has 6 parameters.
Long Parameter List,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,Query,The method has 7 parameters.
Long Parameter List,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,Query,The method has 7 parameters.
Long Parameter List,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,QueryMultiple,The method has 6 parameters.
Long Parameter List,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,QueryInternal,The method has 6 parameters.
Long Parameter List,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,MultiMap,The method has 9 parameters.
Long Parameter List,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,MultiMapImpl,The method has 10 parameters.
Long Parameter List,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The method has 9 parameters.
Long Parameter List,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateDeserializers,The method has 6 parameters.
Long Parameter List,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetCacheInfo,The method has 5 parameters.
Long Parameter List,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetDeserializer,The method has 5 parameters.
Long Parameter List,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetDapperRowDeserializer,The method has 5 parameters.
Long Parameter List,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,CreateParamInfoGenerator,The method has 5 parameters.
Long Parameter List,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,SetupCommand,The method has 7 parameters.
Long Parameter List,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,ExecuteCommand,The method has 7 parameters.
Long Parameter List,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetStructDeserializer,The method has 8 parameters.
Long Parameter List,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetTypeDeserializer,The method has 10 parameters.
Long Parameter List,ML.Data,DynamicParameters,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,Add,The method has 5 parameters.
Long Parameter List,ML.Data,DefaultTypeMap,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetMember,The method has 5 parameters.
Long Parameter List,ML.Data,SqlMapperExtensions,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapperExtensions.cs,Update,The method has 5 parameters.
Long Parameter List,ML.Data,ISqlAdapter,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapperExtensions.cs,Insert,The method has 8 parameters.
Long Parameter List,ML.Data,SqlServerAdapter,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapperExtensions.cs,Insert,The method has 8 parameters.
Long Parameter List,ML.Data,PostgresAdapter,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapperExtensions.cs,Insert,The method has 8 parameters.
Long Parameter List,Mono.Data.SqliteClient,Sqlite,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\Sqlite.cs,sqlite_compile,The method has 5 parameters.
Long Parameter List,Mono.Data.SqliteClient,Sqlite,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\Sqlite.cs,sqlite_exec,The method has 5 parameters.
Long Parameter List,Mono.Data.SqliteClient,Sqlite,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\Sqlite.cs,sqlite3_prepare16,The method has 5 parameters.
Long Parameter List,Mono.Data.SqliteClient,Sqlite,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\Sqlite.cs,sqlite3_exec,The method has 5 parameters.
Long Parameter List,Mono.Data.SqliteClient,Sqlite,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\Sqlite.cs,sqlite3_bind_blob,The method has 5 parameters.
Long Parameter List,Mono.Data.SqliteClient,Sqlite,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\Sqlite.cs,sqlite3_bind_text16,The method has 5 parameters.
Long Parameter List,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,GetBytes,The method has 5 parameters.
Long Parameter List,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,GetChars,The method has 5 parameters.
Long Parameter List,ML.Net,EmailHelper,C:\repos\JerryXia_ML\src\ML NET40\Net\EmailHelper.cs,Send,The method has 8 parameters.
Long Parameter List,ML.Net,EmailHelper,C:\repos\JerryXia_ML\src\ML NET40\Net\EmailHelper.cs,Send,The method has 10 parameters.
Long Parameter List,ML.Net.HttpLib,Request,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpLib\Request.cs,Upload,The method has 5 parameters.
Long Parameter List,ML.Net.HttpLib,Request,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpLib\Request.cs,Upload,The method has 5 parameters.
Long Parameter List,ML.Net.HttpLib,Request,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpLib\Request.cs,Upload,The method has 5 parameters.
Long Parameter List,ML.Net.HttpLib,Request,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpLib\Request.cs,Upload,The method has 5 parameters.
Long Parameter List,ML.Net.HttpLib,Request,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpLib\Request.cs,Upload,The method has 6 parameters.
Long Parameter List,ML.Net.HttpLib,Request,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpLib\Request.cs,Upload,The method has 7 parameters.
Long Parameter List,ML.Net.HttpLib,Request,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpLib\Request.cs,MakeRequest,The method has 7 parameters.
Long Statement,ML.Control,CssMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\CssMinifier.cs,ExcutePath,The length of the statement  "	if (path.StartsWith ("/") || path.StartsWith ("http://"' StringComparison.OrdinalIgnoreCase) || path.StartsWith ("https://"' StringComparison.OrdinalIgnoreCase) || path.StartsWith ("data:"' StringComparison.OrdinalIgnoreCase)) { " is 228.
Long Statement,ML.Control,Include,C:\repos\JerryXia_ML\src\ML NET40\Control\Include.cs,GetContent,The length of the statement  "	string cssBlock = BlockHelper.GetCssBlock (content' Context.Response.ApplyAppPathModifier (CssOutputDir)' this.compress); " is 121.
Long Statement,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,action,The length of the statement  "		if (theB == '/' && (theA == '(' || theA == ''' || theA == '=' || theA == '[' || theA == '!' || theA == ':' || theA == '&' || theA == '|' || theA == '?' || theA == '{' || theA == '}' || theA == ';' || theA == '\n')) { " is 216.
Long Statement,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,isAlphanum,The length of the statement  "	return ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') || c == '_' || c == '$' || c == '\\' || c > 126); " is 132.
Long Statement,ML.Data,AccessHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\AccessHelper.cs,ExecuteReader,The length of the statement  "	return ExecuteReader (connection' (OleDbTransaction)null' commandText' commandParameters' OleDbConnectionOwnership.External); " is 125.
Long Statement,ML.Data,AccessHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\AccessHelper.cs,ExecuteReader,The length of the statement  "	return ExecuteReader (transaction.Connection' transaction' commandText' commandParameters' OleDbConnectionOwnership.External); " is 126.
Long Statement,ML.Data,AccessHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\AccessHelper.cs,ExecuteReader,The length of the statement  "		return ExecuteReader (connection' (OleDbTransaction)null' commandText' commandParameters' OleDbConnectionOwnership.Internal); " is 125.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,AssignParameterValues,The length of the statement  "			throw new Exception (string.Format ("Please provide a valid parameter name on the parameter #{0}' the ParameterName property has the following value: '{1}'."' i' commandParameter.ParameterName)); " is 195.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,PrepareCommand,The length of the statement  "			throw new ArgumentException ("The transaction was rollbacked or commited' please provide an open transaction."' "transaction"); " is 127.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,ExecuteNonQuery,The length of the statement  "	PrepareCommand (cmd' connection' (SqlTransaction)null' commandType' commandText' commandParameters' out mustCloseConnection); " is 125.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,ExecuteNonQuery,The length of the statement  "		throw new ArgumentException ("The transaction was rollbacked or commited' please provide an open transaction."' "transaction"); " is 127.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,ExecuteNonQuery,The length of the statement  "	PrepareCommand (cmd' transaction.Connection' transaction' commandType' commandText' commandParameters' out mustCloseConnection); " is 128.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,ExecuteNonQuery,The length of the statement  "		throw new ArgumentException ("The transaction was rollbacked or commited' please provide an open transaction."' "transaction"); " is 127.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,ExecuteDataset,The length of the statement  "	PrepareCommand (cmd' connection' (SqlTransaction)null' commandType' commandText' commandParameters' out mustCloseConnection); " is 125.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,ExecuteDataset,The length of the statement  "		throw new ArgumentException ("The transaction was rollbacked or commited' please provide an open transaction."' "transaction"); " is 127.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,ExecuteDataset,The length of the statement  "	PrepareCommand (cmd' transaction.Connection' transaction' commandType' commandText' commandParameters' out mustCloseConnection); " is 128.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,ExecuteDataset,The length of the statement  "		throw new ArgumentException ("The transaction was rollbacked or commited' please provide an open transaction."' "transaction"); " is 127.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,ExecuteReader,The length of the statement  "	return ExecuteReader (connection' (SqlTransaction)null' commandType' commandText' commandParameters' SqlConnectionOwnership.External); " is 134.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,ExecuteReader,The length of the statement  "		throw new ArgumentException ("The transaction was rollbacked or commited' please provide an open transaction."' "transaction"); " is 127.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,ExecuteReader,The length of the statement  "	return ExecuteReader (transaction.Connection' transaction' commandType' commandText' commandParameters' SqlConnectionOwnership.External); " is 137.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,ExecuteReader,The length of the statement  "		throw new ArgumentException ("The transaction was rollbacked or commited' please provide an open transaction."' "transaction"); " is 127.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,ExecuteScalar,The length of the statement  "	PrepareCommand (cmd' connection' (SqlTransaction)null' commandType' commandText' commandParameters' out mustCloseConnection); " is 125.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,ExecuteScalar,The length of the statement  "		throw new ArgumentException ("The transaction was rollbacked or commited' please provide an open transaction."' "transaction"); " is 127.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,ExecuteScalar,The length of the statement  "	PrepareCommand (cmd' transaction.Connection' transaction' commandType' commandText' commandParameters' out mustCloseConnection); " is 128.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,ExecuteScalar,The length of the statement  "		throw new ArgumentException ("The transaction was rollbacked or commited' please provide an open transaction."' "transaction"); " is 127.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,ExecuteXmlReader,The length of the statement  "		PrepareCommand (cmd' connection' (SqlTransaction)null' commandType' commandText' commandParameters' out mustCloseConnection); " is 125.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,ExecuteXmlReader,The length of the statement  "		throw new ArgumentException ("The transaction was rollbacked or commited' please provide an open transaction."' "transaction"); " is 127.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,ExecuteXmlReader,The length of the statement  "	PrepareCommand (cmd' transaction.Connection' transaction' commandType' commandText' commandParameters' out mustCloseConnection); " is 128.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,ExecuteXmlReader,The length of the statement  "		throw new ArgumentException ("The transaction was rollbacked or commited' please provide an open transaction."' "transaction"); " is 127.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,FillDataset,The length of the statement  "		throw new ArgumentException ("The transaction was rollbacked or commited' please provide an open transaction."' "transaction"); " is 127.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,FillDataset,The length of the statement  "	PrepareCommand (command' connection' transaction' commandType' commandText' commandParameters' out mustCloseConnection); " is 120.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,FillDataset,The length of the statement  "					throw new ArgumentException ("The tableNames parameter must contain a list of tables' a value was provided as null or empty string."' "tableNames"); " is 148.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,ExecuteNonQueryTypedParams,The length of the statement  "		throw new ArgumentException ("The transaction was rollbacked or commited' please provide an open transaction."' "transaction"); " is 127.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,ExecuteDatasetTypedParams,The length of the statement  "		throw new ArgumentException ("The transaction was rollbacked or commited' please provide an open transaction."' "transaction"); " is 127.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,ExecuteReaderTypedParams,The length of the statement  "		throw new ArgumentException ("The transaction was rollbacked or commited' please provide an open transaction."' "transaction"); " is 127.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,ExecuteScalarTypedParams,The length of the statement  "		throw new ArgumentException ("The transaction was rollbacked or commited' please provide an open transaction."' "transaction"); " is 127.
Long Statement,ML.Data,SqlHelper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,ExecuteXmlReaderTypedParams,The length of the statement  "		throw new ArgumentException ("The transaction was rollbacked or commited' please provide an open transaction."' "transaction"); " is 127.
Long Statement,ML.Data,SqlHelperParameterCache,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlHelper.cs,GetSpParameterSetInternal,The length of the statement  "	string hashKey = connection.ConnectionString + ":" + spName + (includeReturnValueParameter ? ":include ReturnValue Parameter" : ""); " is 132.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetBindByName,The length of the statement  "	if (prop != null && prop.CanWrite && prop.PropertyType == typeof(bool) && ((indexers = prop.GetIndexParameters ()) == null || indexers.Length == 0) && (setter = prop.GetSetMethod ()) != null) { " is 193.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetCachedSQL,The length of the statement  "	var data = _queryCache.Select (pair => Tuple.Create (pair.Key.connectionString' pair.Key.sql' pair.Value.GetHitCount ())); " is 122.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,LookupDbType,The length of the statement  "	throw new NotSupportedException (string.Format ("The member {0} of type {1} cannot be used as a parameter value"' name' type)); " is 127.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,Execute,The length of the statement  "	return ExecuteCommand (cnn' transaction' sql' (object)param == null ? null : info.ParamReader' (object)param' commandTimeout' commandType); " is 139.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,QueryMultiple,The length of the statement  "	Identity identity = new Identity (sql' commandType' cnn' typeof(GridReader)' (object)param == null ? null : ((object)param).GetType ()' null); " is 142.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' DontMap' DontMap' DontMap' DontMap' DontMap' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 181.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' TThird' DontMap' DontMap' DontMap' DontMap' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 180.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' TThird' TFourth' DontMap' DontMap' DontMap' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 180.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' TThird' TFourth' TFifth' DontMap' DontMap' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 179.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' DontMap' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 178.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 179.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,MultiMap,The length of the statement  "	var results = MultiMapImpl<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn> (cnn' sql' map' param' transaction' splitOn' commandTimeout' commandType' null' null); " is 182.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,MultiMapImpl,The length of the statement  "	identity = identity ?? new Identity (sql' commandType' cnn' typeof(TFirst)' (object)param == null ? null : ((object)param).GetType ()' new[] { " is 142.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,MultiMapImpl,The length of the statement  "		if ((deserializer = cinfo.Deserializer).Func == null || (otherDeserializers = cinfo.OtherDeserializers) == null || hash != deserializer.Hash) { " is 143.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,MultiMapImpl,The length of the statement  "		Func<IDataReader' TReturn> mapIt = GenerateMapper<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn> (deserializer.Func' otherDeserializers' map); " is 164.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The length of the statement  "		return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)); " is 158.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The length of the statement  "		return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)); " is 204.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The length of the statement  "		return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)); " is 248.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The length of the statement  "		return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)); " is 292.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The length of the statement  "		return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r)); " is 340.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetCacheInfo,The length of the statement  "			else if (typeof(IEnumerable<KeyValuePair<string' object>>).IsAssignableFrom (identity.parametersType) && typeof(System.Dynamic.IDynamicMetaObjectProvider).IsAssignableFrom (identity.parametersType)) { " is 200.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetDeserializer,The length of the statement  "	if (!(typeMap.ContainsKey (type) || type.IsEnum || type.FullName == LinqBinary || (type.IsValueType && (underlyingType = Nullable.GetUnderlyingType (type)) != null && underlyingType.IsEnum))) { " is 193.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,PackListParameters,The length of the statement  "				command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)"); " is 125.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,FilterParameters,The length of the statement  "	return parameters.Where (p => Regex.IsMatch (sql' @"[?@:]" + p.Name + "([^a-zA-Z0-9_]+|$)"' RegexOptions.IgnoreCase | RegexOptions.Multiline)); " is 143.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "			if (identity.sql.IndexOf ("@" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0 && identity.sql.IndexOf (":" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0 && identity.sql.IndexOf ("?" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0) { " is 276.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "		if (dbType != DbType.Time)// https://connect.microsoft.com/VisualStudio/feedback/details/381934/sqlparameter-dbtype-dbtype-time-sets-the-parameter-to-sqldbtype-datetime-instead-of-sqldbtype-time " is 194.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "				il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null); " is 123.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetStructDeserializer,The length of the statement  "	// no point using special per-type handling here; it boils down to the same' plus not all are supported anyway (see: SqlDataReader.GetChar - not supported!) " is 156.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "				string proposedTypes = "(" + String.Join ("' "' types.Select ((t' i) => t.FullName + " " + names [i]).ToArray ()) + ")"; " is 120.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "				throw new InvalidOperationException (String.Format ("A parameterless default constructor or one matching signature {0} is required for {1} materialization"' proposedTypes' type.FullName)); " is 188.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "	var members = (specializedConstructor != null ? names.Select (n => typeMap.GetConstructorParameter (specializedConstructor' n)) : names.Select (n => typeMap.GetMember (n))).ToList (); " is 183.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "				il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod (memberType == typeof(char) ? "ReadChar" : "ReadNullableChar"' BindingFlags.Static | BindingFlags.Public)' null); " is 168.
Long Statement,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetOperator,The length of the statement  "	return ResolveOperator (fromMethods = from.GetMethods (BindingFlags.Static | BindingFlags.Public)' from' to' "op_Implicit") ?? ResolveOperator (toMethods = to.GetMethods (BindingFlags.Static | BindingFlags.Public)' from' to' "op_Implicit") ?? ResolveOperator (fromMethods' from' to' "op_Explicit") ?? ResolveOperator (toMethods' from' to' "op_Explicit"); " is 354.
Long Statement,ML.Data,DbString,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,AddParameter,The length of the statement  "	param.DbType = IsAnsi ? (IsFixedLength ? DbType.AnsiStringFixedLength : DbType.AnsiString) : (IsFixedLength ? DbType.StringFixedLength : DbType.String); " is 152.
Long Statement,ML.Data,DefaultTypeMap,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetPropertySetter,The length of the statement  "	return propertyInfo.DeclaringType == type ? propertyInfo.GetSetMethod (true) : propertyInfo.DeclaringType.GetProperty (propertyInfo.Name' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).GetSetMethod (true); " is 228.
Long Statement,ML.Data,DefaultTypeMap,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetSettableProps,The length of the statement  "	return t.GetProperties (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).Where (p => GetPropertySetter (p' t) != null).ToList (); " is 150.
Long Statement,ML.Data,DefaultTypeMap,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,FindConstructor,The length of the statement  "	foreach (ConstructorInfo ctor in constructors.OrderBy (c => c.IsPublic ? 0 : (c.IsPrivate ? 2 : 1)).ThenBy (c => c.GetParameters ().Length)) { " is 142.
Long Statement,ML.Data,DefaultTypeMap,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,FindConstructor,The length of the statement  "			if (unboxedType != types [i] && !(unboxedType.IsEnum && Enum.GetUnderlyingType (unboxedType) == types [i]) && !(unboxedType == typeof(char) && types [i] == typeof(string))) " is 172.
Long Statement,ML.Data,DefaultTypeMap,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetConstructorParameter,The length of the statement  "	return new SimpleMemberMap (columnName' parameters.FirstOrDefault (p => string.Equals (p.Name' columnName' StringComparison.OrdinalIgnoreCase))); " is 145.
Long Statement,ML.Data,DefaultTypeMap,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetMember,The length of the statement  "	var property = _properties.FirstOrDefault (p => string.Equals (p.Name' columnName' StringComparison.Ordinal)) ?? _properties.FirstOrDefault (p => string.Equals (p.Name' columnName' StringComparison.OrdinalIgnoreCase)); " is 218.
Long Statement,ML.Data,DefaultTypeMap,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetMember,The length of the statement  "	var field = _fields.FirstOrDefault (p => string.Equals (p.Name' columnName' StringComparison.Ordinal)) ?? _fields.FirstOrDefault (p => string.Equals (p.Name' columnName' StringComparison.OrdinalIgnoreCase)); " is 207.
Long Statement,ML.Data,SqlMapperExtensions,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapperExtensions.cs,Get,The length of the statement  "		// TODO: query information schema and only select fields that are both in information schema and underlying class / interface  " is 125.
Long Statement,ML.Data,SqlMapperExtensions,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapperExtensions.cs,GetTableName,The length of the statement  "		//NOTE: This as dynamic trick should be able to handle both our own Table-attribute as well as the one in EntityFramework  " is 121.
Long Statement,ML.Data,SqlMapperExtensions,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapperExtensions.cs,GetTableName,The length of the statement  "		var tableattr = type.GetCustomAttributes (false).Where (attr => attr.GetType ().Name == "TableAttribute").SingleOrDefault () as dynamic; " is 136.
Long Statement,ML.Data,SqlMapperExtensions,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapperExtensions.cs,Insert,The length of the statement  "	int id = adapter.Insert (connection' transaction' commandTimeout' name' sbColumnList.ToString ()' sbParameterList.ToString ()' keyProperties' entityToInsert); " is 158.
Long Statement,ML.Data,SqlMapperExtensions,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapperExtensions.cs,Update,The length of the statement  "	var updated = connection.Execute (sb.ToString ()' entityToUpdate' commandTimeout: commandTimeout' transaction: transaction); " is 124.
Long Statement,ML.Data,SqlMapperExtensions,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapperExtensions.cs,Delete,The length of the statement  "	var deleted = connection.Execute (sb.ToString ()' entityToDelete' transaction: transaction' commandTimeout: commandTimeout); " is 124.
Long Statement,ML.Data,PostgresAdapter,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapperExtensions.cs,Insert,The length of the statement  "	var results = connection.Query (sb.ToString ()' entityToInsert' transaction: transaction' commandTimeout: commandTimeout); " is 122.
Long Statement,ML.Data,PostgresAdapter,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapperExtensions.cs,Insert,The length of the statement  "	// Return the key by assinging the corresponding property in the object - by product is that it supports compound primary keys " is 126.
Long Statement,Mono.Data.SqliteClient,SqliteParameterCollection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteParameterCollection.cs,Add,The length of the statement  "		throw new DuplicateNameException ("Parameter collection already contains the a SqliteParameter with the given ParameterName."); " is 127.
Long Statement,ML.Net,HttpHelper,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpHelper.cs,GetHtml,The length of the statement  "			if (response.ContentEncoding != null && response.ContentEncoding.Equals ("gzip"' StringComparison.InvariantCultureIgnoreCase)) { " is 128.
Long Statement,ML.Net,HttpHelper,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpHelper.cs,GetHtml,The length of the statement  "				Match meta = Regex.Match (Encoding.Default.GetString (RawResponse)' "<meta([^<]*)charset=([^<]*)[\"']"' RegexOptions.IgnoreCase); " is 129.
Long Statement,ML.Net,HttpHelper,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpHelper.cs,GetHtml,The length of the statement  "					encoding = Encoding.GetEncoding (charter.Trim ().Replace ("\""' "").Replace ("'"' "").Replace (";"' "").Replace ("iso-8859-1"' "gbk")); " is 135.
Long Statement,ML.Net,HttpHelper,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpHelper.cs,SetCer,The length of the statement  "		ServicePointManager.ServerCertificateValidationCallback = new System.Net.Security.RemoteCertificateValidationCallback (CheckValidationResult); " is 142.
Long Statement,ML.Net,HttpHelper,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpHelper.cs,SetPostData,The length of the statement  "		if (objhttpItem.PostDataType == PostDataType.Byte && objhttpItem.PostdataByte != null && objhttpItem.PostdataByte.Length > 0) { " is 127.
Long Statement,ML.Net.HttpLib,Request,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpLib\Request.cs,Post,The length of the statement  "	MakeRequest ("application/x-www-form-urlencoded"' HttpVerb.Post' url' parameters' StreamToStringCallback (successCallback)' webEx =>  { " is 135.
Long Statement,ML.Net.HttpLib,Request,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpLib\Request.cs,Post,The length of the statement  "	MakeRequest ("application/x-www-form-urlencoded"' HttpVerb.Post' url' parameters' StreamToStringCallback (successCallback)' failCallback); " is 138.
Long Statement,ML.Net.HttpLib,Request,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpLib\Request.cs,Patch,The length of the statement  "	MakeRequest ("application/x-www-form-urlencoded"' HttpVerb.Patch' url' parameters' StreamToStringCallback (successCallback)' webEx =>  { " is 136.
Long Statement,ML.Net.HttpLib,Request,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpLib\Request.cs,Patch,The length of the statement  "	MakeRequest ("application/x-www-form-urlencoded"' HttpVerb.Patch' url' parameters' StreamToStringCallback (successCallback)' failCallback); " is 139.
Long Statement,ML.Net.HttpLib,Request,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpLib\Request.cs,Put,The length of the statement  "	MakeRequest ("application/x-www-form-urlencoded"' HttpVerb.Put' url' parameters' StreamToStringCallback (successCallback)' webEx =>  { " is 134.
Long Statement,ML.Net.HttpLib,Request,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpLib\Request.cs,Put,The length of the statement  "	MakeRequest ("application/x-www-form-urlencoded"' HttpVerb.Put' url' parameters' StreamToStringCallback (successCallback)' failCallback); " is 137.
Long Statement,ML.Net.HttpLib,Request,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpLib\Request.cs,Delete,The length of the statement  "	MakeRequest ("application/x-www-form-urlencoded"' HttpVerb.Delete' url' parameters' StreamToStringCallback (successCallback)' webEx =>  { " is 137.
Long Statement,ML.Net.HttpLib,Request,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpLib\Request.cs,Delete,The length of the statement  "	MakeRequest ("application/x-www-form-urlencoded"' HttpVerb.Delete' url' parameters' StreamToStringCallback (successCallback)' failCallback); " is 140.
Long Statement,ML.Net.HttpLib,Request,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpLib\Request.cs,Upload,The length of the statement  "				qsAppend = "--" + boundary + "\ncontent-disposition: form-data; name=\"" + file.Name + "\"; filename=\"" + file.Filename + "\"\r\nContent-Type: " + file.ContentType + "\r\n\r\n"; " is 178.
Long Statement,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,IpToInt,The length of the statement  "	//return (uint.Parse(strArray[0]) << 24) + (uint.Parse(strArray[1]) << 16) + (uint.Parse(strArray[2]) << 8) + uint.Parse(strArray[0]); " is 134.
Long Statement,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,Query,The length of the statement  "	//if ((((intIP >= IpToInt("0.0.0.0")) && (intIP <= IpToInt("2.255.255.255"))) || ((intIP >= IpToInt("64.0.0.0")) && (intIP <= IpToInt("126.255.255.255")))) || " is 158.
Long Statement,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetStartIp,The length of the statement  "	return (uint)data [leftOffset] + (((uint)data [1 + leftOffset]) << 8) + (((uint)data [2 + leftOffset]) << 16) + (((uint)data [3 + leftOffset]) << 24); " is 150.
Long Statement,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetEndIp,The length of the statement  "	return (uint)data [endIpOff] + (((uint)data [1 + endIpOff]) << 8) + (((uint)data [2 + endIpOff]) << 16) + (((uint)data [3 + endIpOff]) << 24); " is 142.
Long Statement,ML.Security,BCEngine,C:\repos\JerryXia_ML\src\ML NET40\Security\BCEngine.cs,BouncyCastleCrypto,The length of the statement  "		_cipher = _padding == null ? new PaddedBufferedBlockCipher (_blockCipher) : new PaddedBufferedBlockCipher (_blockCipher' _padding); " is 131.
Long Statement,ML.Security,RSACryption,C:\repos\JerryXia_ML\src\ML NET40\Security\RSACryption.cs,SignatureFormatter,The length of the statement  "	System.Security.Cryptography.RSACryptoServiceProvider RSA = new System.Security.Cryptography.RSACryptoServiceProvider (); " is 121.
Long Statement,ML.Security,RSACryption,C:\repos\JerryXia_ML\src\ML NET40\Security\RSACryption.cs,SignatureFormatter,The length of the statement  "	System.Security.Cryptography.RSAPKCS1SignatureFormatter RSAFormatter = new System.Security.Cryptography.RSAPKCS1SignatureFormatter (RSA); " is 137.
Long Statement,ML.Security,RSACryption,C:\repos\JerryXia_ML\src\ML NET40\Security\RSACryption.cs,SignatureFormatter,The length of the statement  "	System.Security.Cryptography.RSACryptoServiceProvider RSA = new System.Security.Cryptography.RSACryptoServiceProvider (); " is 121.
Long Statement,ML.Security,RSACryption,C:\repos\JerryXia_ML\src\ML NET40\Security\RSACryption.cs,SignatureFormatter,The length of the statement  "	System.Security.Cryptography.RSAPKCS1SignatureFormatter RSAFormatter = new System.Security.Cryptography.RSAPKCS1SignatureFormatter (RSA); " is 137.
Long Statement,ML.Security,RSACryption,C:\repos\JerryXia_ML\src\ML NET40\Security\RSACryption.cs,SignatureFormatter,The length of the statement  "	System.Security.Cryptography.RSACryptoServiceProvider RSA = new System.Security.Cryptography.RSACryptoServiceProvider (); " is 121.
Long Statement,ML.Security,RSACryption,C:\repos\JerryXia_ML\src\ML NET40\Security\RSACryption.cs,SignatureFormatter,The length of the statement  "	System.Security.Cryptography.RSAPKCS1SignatureFormatter RSAFormatter = new System.Security.Cryptography.RSAPKCS1SignatureFormatter (RSA); " is 137.
Long Statement,ML.Security,RSACryption,C:\repos\JerryXia_ML\src\ML NET40\Security\RSACryption.cs,SignatureFormatter,The length of the statement  "	System.Security.Cryptography.RSACryptoServiceProvider RSA = new System.Security.Cryptography.RSACryptoServiceProvider (); " is 121.
Long Statement,ML.Security,RSACryption,C:\repos\JerryXia_ML\src\ML NET40\Security\RSACryption.cs,SignatureFormatter,The length of the statement  "	System.Security.Cryptography.RSAPKCS1SignatureFormatter RSAFormatter = new System.Security.Cryptography.RSAPKCS1SignatureFormatter (RSA); " is 137.
Long Statement,ML.Security,RSACryption,C:\repos\JerryXia_ML\src\ML NET40\Security\RSACryption.cs,SignatureDeformatter,The length of the statement  "	System.Security.Cryptography.RSACryptoServiceProvider RSA = new System.Security.Cryptography.RSACryptoServiceProvider (); " is 121.
Long Statement,ML.Security,RSACryption,C:\repos\JerryXia_ML\src\ML NET40\Security\RSACryption.cs,SignatureDeformatter,The length of the statement  "	System.Security.Cryptography.RSAPKCS1SignatureDeformatter RSADeformatter = new System.Security.Cryptography.RSAPKCS1SignatureDeformatter (RSA); " is 143.
Long Statement,ML.Security,RSACryption,C:\repos\JerryXia_ML\src\ML NET40\Security\RSACryption.cs,SignatureDeformatter,The length of the statement  "	System.Security.Cryptography.RSACryptoServiceProvider RSA = new System.Security.Cryptography.RSACryptoServiceProvider (); " is 121.
Long Statement,ML.Security,RSACryption,C:\repos\JerryXia_ML\src\ML NET40\Security\RSACryption.cs,SignatureDeformatter,The length of the statement  "	System.Security.Cryptography.RSAPKCS1SignatureDeformatter RSADeformatter = new System.Security.Cryptography.RSAPKCS1SignatureDeformatter (RSA); " is 143.
Long Statement,ML.Security,RSACryption,C:\repos\JerryXia_ML\src\ML NET40\Security\RSACryption.cs,SignatureDeformatter,The length of the statement  "	System.Security.Cryptography.RSACryptoServiceProvider RSA = new System.Security.Cryptography.RSACryptoServiceProvider (); " is 121.
Long Statement,ML.Security,RSACryption,C:\repos\JerryXia_ML\src\ML NET40\Security\RSACryption.cs,SignatureDeformatter,The length of the statement  "	System.Security.Cryptography.RSAPKCS1SignatureDeformatter RSADeformatter = new System.Security.Cryptography.RSAPKCS1SignatureDeformatter (RSA); " is 143.
Long Statement,ML.Utility,CheckHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\CheckHelper.cs,IsNumber,The length of the statement  "	return !objNotNumberPattern.IsMatch (strNumber) && !objTwoDotPattern.IsMatch (strNumber) && !objTwoMinusPattern.IsMatch (strNumber) && objNumberPattern.IsMatch (strNumber); " is 172.
Long Statement,ML.Utility,CheckHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\CheckHelper.cs,IsDateStr,The length of the statement  "	return Regex.IsMatch (str' @"^((((1[6-9]|[2-9]\d)\d{2})-(0?[13578]|1[02])-(0?[1-9]|[12]\d|3[01]))|(((1[6-9]|[2-9]\d)\d{2})-(0?[13456789]|1[012])-(0?[1-9]|[12]\d|30))|(((1[6-9]|[2-9]\d)\d{2})-0?2-(0?[1-9]|1\d|2[0-9]))|(((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))-0?2-29-))$"); " is 313.
Long Statement,ML.Utility,CheckHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\CheckHelper.cs,IsDateTimeStr,The length of the statement  "	return Regex.IsMatch (str' @"^(((((1[6-9]|[2-9]\d)\d{2})-(0?[13578]|1[02])-(0?[1-9]|[12]\d|3[01]))|(((1[6-9]|[2-9]\d)\d{2})-(0?[13456789]|1[012])-(0?[1-9]|[12]\d|30))|(((1[6-9]|[2-9]\d)\d{2})-0?2-(0?[1-9]|1\d|2[0-8]))|(((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))-0?2-29-)) (20|21|22|23|[0-1]?\d):[0-5]?\d:[0-5]?\d)$ "); " is 357.
Long Statement,ML.Utility,CheckHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\CheckHelper.cs,IsValidDoEmail,The length of the statement  "	return Regex.IsMatch (strEmail' @"^@((\[[0-9]{1'3}\.[0-9]{1'3}\.[0-9]{1'3}\.)|(([\w-]+\.)+))([a-zA-Z]{2'4}|[0-9]{1'3})(\]?)$"); " is 127.
Long Statement,ML.Utility,CheckHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\CheckHelper.cs,IsURL,The length of the statement  "	return Regex.IsMatch (strUrl' @"^(http|https)\://([a-zA-Z0-9\.\-]+(\:[a-zA-Z0-9\.&%\$\-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|localhost|([a-zA-Z0-9\-]+\.)*[a-zA-Z0-9\-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{1'10}))(\:[0-9]+)*(/($|[a-zA-Z0-9\.\'\?\'\\\+&%\$#\=~_\-]+))*$"); " is 538.
Long Statement,ML.Utility,GuardIDHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\GuardIDHelper.cs,Encode,The length of the statement  "	string result = string.Format ("{0}{1}{2}{3}"' orignalID.ToString ().Length.ToString ().Length' orignalID.ToString ().Length' orignalID.ToString ()' GetSpecCode (orignalID.ToString ())); " is 186.
Long Statement,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,EnableUrls,The length of the statement  "	//text = Regex.Replace(text' @"(^|<br>|<br/>|[^('|\>|""|=|&quot;|&gt;)])((?:http|ftp|https)://([\w-]+\.)+[\w-]+(/[\w-./?%&=]*)?)"' "$1<a href=\"$2\" target=\"_blank\" class=\"gray\">$2</a>"' RegexOptions.IgnoreCase | RegexOptions.Compiled); " is 240.
Long Statement,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,ReplaceSpace,The length of the statement  "	//string findstr = "(?<fore>(?:(?:[^< ])*(?:<(?:!--(?:(?:[^-])*(?:(?=-->)|-))*--|(?:[^>])+)>)?)*)[ ](?<back>(?:(?:[^< ])*(?:<(?:!--(?:(?:[^-])*(?:(?=-->)|-))*--|(?:[^>])+)>)?)*)"; " is 179.
Long Statement,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,ReplaceSpace,The length of the statement  "	//string targetstr = System.Text.RegularExpressions.Regex.Replace(content' findstr' replacestr' System.Text.RegularExpressions.RegexOptions.IgnoreCase); " is 152.
Long Statement,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,CatchHtmlBlock,The length of the statement  "	System.Text.RegularExpressions.MatchCollection matchs = System.Text.RegularExpressions.Regex.Matches (content' findstr' System.Text.RegularExpressions.RegexOptions.IgnoreCase); " is 176.
Long Statement,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,SimpleUbb,The length of the statement  "	str = regexUbbImg.Replace (str' @"<a href=""$1"" target=_blank><img src=""$1"" border=0 alt='点击查看大图' onload='javascript:if(this.width>screen.width-450)this.width=screen.width-450'></a>"); " is 187.
Long Statement,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,SimpleUbb,The length of the statement  "	//str = Regex.Replace(str'@"\[flv\](.*?)\[/flv\]"'@"<script language=""Javascript"">var vars='file=$1';GetFlash('flv_user_124'' '/media/FlvPlayer.swf'' vars' 149'27' false);</script>"'RegexOptions.IgnoreCase); " is 209.
Long Statement,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,SimpleUbb,The length of the statement  "	str = regexFlv.Replace (str' @"<div onclick=""ShowRecPlayer(this' '$1');"" class=""btnRecord""><img src=""/images/btn_RecPlayer.gif""/></div>"); " is 144.
Long Statement,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,SimpleUbb,The length of the statement  "	str = regexMp3.Replace (str' @"<div onclick=""ShowMp3Player(this' '$1');"" class=""btnRecord""><img src=""/images/btn_RecPlayer.gif""/></div>"); " is 144.
Long Statement,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,SimpleUbb,The length of the statement  "	str = regexIframeWH.Replace (str' @"<iframe width=""$1"" height=""$2"" border=""0"" scrolling=""auto"" frameborder=""0"" src=""$3"" style=""overflow:hidden""></iframe>"); " is 170.
Long Statement,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,SimpleUbb,The length of the statement  "	str = regexVote.Replace (str' @"<iframe width=""$1"" height=""$2"" border=""0"" scrolling=""auto"" frameborder=""0"" src=""http://vote.yeshj.com/$3"" style=""overflow:hidden""></iframe>"); " is 188.
Long Statement,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,SimpleUbb,The length of the statement  "	str = regexHJPlay1.Replace (str' "<script src='http://bulo.hjenglish.com/podcast/hjplayer.aspx?width=$1&height=$2&src=$5&autoplay=$3'></script>"); " is 146.
Long Statement,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,SimpleUbb,The length of the statement  "	str = regexHJPlay2.Replace (str' "<script src='http://www.hjenglish.com/common/getmediawindow.js' type='text/javascript'></script><script language='JavaScript'>GetMediaPlayerWindow( '$5'' $1' $2);</script>"); " is 208.
Long Statement,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,SimpleUbb,The length of the statement  "	str = regexHJPlay3.Replace (str' @"<div onclick=""ShowMp3Player(this' '$1');"" class=""btnRecord""><img src=""/images/btn_RecPlayer.gif""/></div>"); " is 148.
Long Statement,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,SimpleUbb,The length of the statement  "	str = regexHJPlay32.Replace (str' "<script src='http://bulo.hjenglish.com/musicbox/listcodemaker.aspx?$1' type='text/javascript'></script>"); " is 141.
Long Statement,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,SimpleUbb,The length of the statement  "	str = regexReplyView.Replace (str' @"<div class=""replyview"">------------------<br/><span class=red>回复可见内容</span><br/>------------------</div>"); " is 146.
Long Statement,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,SimpleUbb,The length of the statement  "	str = regexD.Replace (str' @"<a href=""http://dict.hjenglish.com/w/$1"" class=""hjdict"" word=""$1"" target=_blank>$1</a>"); " is 124.
Long Statement,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,SimpleUbb,The length of the statement  "	str = regexD2.Replace (str' @"<a href=""http://dict.hjenglish.com/w/$1""  class=""hjdict"" word=""$1"" target=_blank>$2</a>"); " is 126.
Long Statement,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,SimpleUbb,The length of the statement  "	str = regexD3.Replace (str' @"<a href=""http://dict.hjenglish.com/w/$1"" class=""hjdict"" word=""$1"" target=_blank>$1</a><script language=""Javascript"">GetWord(""$1"");</script>"); " is 182.
Long Statement,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,SimpleUbb,The length of the statement  "	str = regexDJ.Replace (str' @"<a href=""http://dict.hjenglish.com/jp/w/$1"" class=""hjdict"" word=""$1"" target=_blank>$1</a>"); " is 128.
Long Statement,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,SimpleUbb,The length of the statement  "	str = regexDJ2.Replace (str' @"<a href=""http://dict.hjenglish.com/jp/w/$1&type=$2"" class=""hjdict"" word=""$1&type=$2"" target=_blank>$3</a>"); " is 145.
Long Statement,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,SimpleUbb,The length of the statement  "	str = regexDJ3.Replace (str' @"<a href=""http://dict.hjenglish.com/jp/w/$1&type=jc"" class=""hjdict"" word=""$1"" target=_blank>$2</a><script language=""Javascript"">GetWord(""jp_$1"");</script>"); " is 197.
Long Statement,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,SimpleUbb,The length of the statement  "                    url为flash的地址    */str = regexFlash.Replace (str' "<OBJECT codeBase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9'0'28'0\" " + " classid=\"clsid:d27CDB6E-AE6D-11cf-96B8-444553540000\" " + "width=$1 height=$2>" + "<PARAM NAME=movie VALUE=\"$3\">" + "<PARAM NAME=quality VALUE=high>" + "<embed src=\"$3\" width=$1 height=$2 quality=high name=index type=\"application/x-shockwave-flash\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\"/>" + "</OBJECT>"); " is 496.
Long Statement,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,CheckSQLInjection,The length of the statement  "		//string Pattern = @"select |insert |delete from |count\(|drop table|update |truncate |asc\(|mid\(|char\(|xp_cmdshell|exec master|net localgroup administrators|:|net user|""|\'| or "; " is 183.
Long Statement,ML.Utility,UpYun,C:\repos\JerryXia_ML\src\ML NET40\Utility\UpYunLibrary.cs,newWorker,The length of the statement  "		request.Headers.Add ("Authorization"' "Basic " + Convert.ToBase64String (new System.Text.ASCIIEncoding ().GetBytes (this.username + ":" + this.password))); " is 155.
Long Statement,ML.Utility,UpYun,C:\repos\JerryXia_ML\src\ML NET40\Utility\UpYunLibrary.cs,md5_file,The length of the statement  "	System.Security.Cryptography.MD5CryptoServiceProvider oMD5Hasher = new System.Security.Cryptography.MD5CryptoServiceProvider (); " is 128.
Long Statement,ML.Utility,UpYun,C:\repos\JerryXia_ML\src\ML NET40\Utility\UpYunLibrary.cs,md5_file,The length of the statement  "		oFileStream = new System.IO.FileStream (pathName' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite); " is 133.
Complex Conditional,ML.Control,CssMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\CssMinifier.cs,ExcutePath,The conditional expression  "path.StartsWith ("/") || path.StartsWith ("http://"' StringComparison.OrdinalIgnoreCase) || path.StartsWith ("https://"' StringComparison.OrdinalIgnoreCase) || path.StartsWith ("data:"' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,action,The conditional expression  "theB == '/' && (theA == '(' || theA == ''' || theA == '=' || theA == '[' || theA == '!' || theA == ':' || theA == '&' || theA == '|' || theA == '?' || theA == '{' || theA == '}' || theA == ';' || theA == '\n')"  is complex.
Complex Conditional,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetBindByName,The conditional expression  "prop != null && prop.CanWrite && prop.PropertyType == typeof(bool) && ((indexers = prop.GetIndexParameters ()) == null || indexers.Length == 0) && (setter = prop.GetSetMethod ()) != null"  is complex.
Complex Conditional,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetDeserializer,The conditional expression  "!(typeMap.ContainsKey (type) || type.IsEnum || type.FullName == LinqBinary || (type.IsValueType && (underlyingType = Nullable.GetUnderlyingType (type)) != null && underlyingType.IsEnum))"  is complex.
Complex Conditional,ML.Data,DefaultTypeMap,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,FindConstructor,The conditional expression  "unboxedType != types [i] && !(unboxedType.IsEnum && Enum.GetUnderlyingType (unboxedType) == types [i]) && !(unboxedType == typeof(char) && types [i] == typeof(string))"  is complex.
Complex Conditional,ML.Net.HttpLib,Request,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpLib\Request.cs,MakeRequest,The conditional expression  "method == HttpVerb.Delete || method == HttpVerb.Post || method == HttpVerb.Put || method == HttpVerb.Patch"  is complex.
Complex Conditional,ML.Utility,Pinyin,C:\repos\JerryXia_ML\src\ML NET40\Utility\Pinyin.cs,GetChineseSpell,The conditional expression  "(vChar >= 'a' && vChar <= 'z') || (vChar >= 'A' && vChar <= 'Z')"  is complex.
Empty Catch Block,ML.Control,BlockHelper,C:\repos\JerryXia_ML\src\ML NET40\Control\Include.cs,GetFiles,The method has an empty catch block.
Empty Catch Block,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,QueryMultiple,The method has an empty catch block.
Empty Catch Block,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,QueryInternal,The method has an empty catch block.
Magic Number,ML.Caching,CacheHelper,C:\repos\JerryXia_ML\src\ML NET40\Caching\CacheHelper.cs,SetRandomTime,The following statement contains a magic number: if (seconds > 1800.00) {  	seconds = 1800.00;  }  
Magic Number,ML.Caching,CacheHelper,C:\repos\JerryXia_ML\src\ML NET40\Caching\CacheHelper.cs,SetRandomTime,The following statement contains a magic number: if (seconds > 1800.00) {  	seconds = 1800.00;  }  
Magic Number,ML.Caching,CacheHelper,C:\repos\JerryXia_ML\src\ML NET40\Caching\CacheHelper.cs,SetRandomTime,The following statement contains a magic number: seconds = 1800.00;  
Magic Number,ML.Control,CssMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\CssMinifier.cs,ExcutePath,The following statement contains a magic number: while (Regex.IsMatch (newpath' @"^[./]")) {  	//当前目录  	if (newpath.StartsWith ("./")) {  		newpath = newpath.Remove (0' 2);  	}  	//上级目录  	if (newpath.StartsWith ("../")) {  		newpath = newpath.Remove (0' 3);  		parent = Regex.Replace (parent' @"/[^/]+$"' "");  	}  }  
Magic Number,ML.Control,CssMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\CssMinifier.cs,ExcutePath,The following statement contains a magic number: while (Regex.IsMatch (newpath' @"^[./]")) {  	//当前目录  	if (newpath.StartsWith ("./")) {  		newpath = newpath.Remove (0' 2);  	}  	//上级目录  	if (newpath.StartsWith ("../")) {  		newpath = newpath.Remove (0' 3);  		parent = Regex.Replace (parent' @"/[^/]+$"' "");  	}  }  
Magic Number,ML.Control,CssMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\CssMinifier.cs,ExcutePath,The following statement contains a magic number: if (newpath.StartsWith ("./")) {  	newpath = newpath.Remove (0' 2);  }  
Magic Number,ML.Control,CssMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\CssMinifier.cs,ExcutePath,The following statement contains a magic number: newpath = newpath.Remove (0' 2);  
Magic Number,ML.Control,CssMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\CssMinifier.cs,ExcutePath,The following statement contains a magic number: if (newpath.StartsWith ("../")) {  	newpath = newpath.Remove (0' 3);  	parent = Regex.Replace (parent' @"/[^/]+$"' "");  }  
Magic Number,ML.Control,CssMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\CssMinifier.cs,ExcutePath,The following statement contains a magic number: newpath = newpath.Remove (0' 3);  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,jsmin,The following statement contains a magic number: action (3);  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,jsmin,The following statement contains a magic number: while (theA != EOF) {  	switch (theA) {  	case ' ': {  		if (isAlphanum (theB)) {  			action (1);  		}  		else {  			action (2);  		}  		break;  	}  	case '\n': {  		switch (theB) {  		case '{':  		case '[':  		case '(':  		case '+':  		case '-': {  			action (1);  			break;  		}  		case ' ': {  			action (3);  			break;  		}  		default: {  			if (isAlphanum (theB)) {  				action (1);  			}  			else {  				action (2);  			}  			break;  		}  		}  		break;  	}  	default: {  		switch (theB) {  		case ' ': {  			if (isAlphanum (theA)) {  				action (1);  				break;  			}  			action (3);  			break;  		}  		case '\n': {  			switch (theA) {  			case '}':  			case ']':  			case ')':  			case '+':  			case '-':  			case '"':  			case '\'': {  				action (1);  				break;  			}  			default: {  				if (isAlphanum (theA)) {  					action (1);  				}  				else {  					action (3);  				}  				break;  			}  			}  			break;  		}  		default: {  			action (1);  			break;  		}  		}  		break;  	}  	}  }  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,jsmin,The following statement contains a magic number: while (theA != EOF) {  	switch (theA) {  	case ' ': {  		if (isAlphanum (theB)) {  			action (1);  		}  		else {  			action (2);  		}  		break;  	}  	case '\n': {  		switch (theB) {  		case '{':  		case '[':  		case '(':  		case '+':  		case '-': {  			action (1);  			break;  		}  		case ' ': {  			action (3);  			break;  		}  		default: {  			if (isAlphanum (theB)) {  				action (1);  			}  			else {  				action (2);  			}  			break;  		}  		}  		break;  	}  	default: {  		switch (theB) {  		case ' ': {  			if (isAlphanum (theA)) {  				action (1);  				break;  			}  			action (3);  			break;  		}  		case '\n': {  			switch (theA) {  			case '}':  			case ']':  			case ')':  			case '+':  			case '-':  			case '"':  			case '\'': {  				action (1);  				break;  			}  			default: {  				if (isAlphanum (theA)) {  					action (1);  				}  				else {  					action (3);  				}  				break;  			}  			}  			break;  		}  		default: {  			action (1);  			break;  		}  		}  		break;  	}  	}  }  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,jsmin,The following statement contains a magic number: while (theA != EOF) {  	switch (theA) {  	case ' ': {  		if (isAlphanum (theB)) {  			action (1);  		}  		else {  			action (2);  		}  		break;  	}  	case '\n': {  		switch (theB) {  		case '{':  		case '[':  		case '(':  		case '+':  		case '-': {  			action (1);  			break;  		}  		case ' ': {  			action (3);  			break;  		}  		default: {  			if (isAlphanum (theB)) {  				action (1);  			}  			else {  				action (2);  			}  			break;  		}  		}  		break;  	}  	default: {  		switch (theB) {  		case ' ': {  			if (isAlphanum (theA)) {  				action (1);  				break;  			}  			action (3);  			break;  		}  		case '\n': {  			switch (theA) {  			case '}':  			case ']':  			case ')':  			case '+':  			case '-':  			case '"':  			case '\'': {  				action (1);  				break;  			}  			default: {  				if (isAlphanum (theA)) {  					action (1);  				}  				else {  					action (3);  				}  				break;  			}  			}  			break;  		}  		default: {  			action (1);  			break;  		}  		}  		break;  	}  	}  }  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,jsmin,The following statement contains a magic number: while (theA != EOF) {  	switch (theA) {  	case ' ': {  		if (isAlphanum (theB)) {  			action (1);  		}  		else {  			action (2);  		}  		break;  	}  	case '\n': {  		switch (theB) {  		case '{':  		case '[':  		case '(':  		case '+':  		case '-': {  			action (1);  			break;  		}  		case ' ': {  			action (3);  			break;  		}  		default: {  			if (isAlphanum (theB)) {  				action (1);  			}  			else {  				action (2);  			}  			break;  		}  		}  		break;  	}  	default: {  		switch (theB) {  		case ' ': {  			if (isAlphanum (theA)) {  				action (1);  				break;  			}  			action (3);  			break;  		}  		case '\n': {  			switch (theA) {  			case '}':  			case ']':  			case ')':  			case '+':  			case '-':  			case '"':  			case '\'': {  				action (1);  				break;  			}  			default: {  				if (isAlphanum (theA)) {  					action (1);  				}  				else {  					action (3);  				}  				break;  			}  			}  			break;  		}  		default: {  			action (1);  			break;  		}  		}  		break;  	}  	}  }  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,jsmin,The following statement contains a magic number: while (theA != EOF) {  	switch (theA) {  	case ' ': {  		if (isAlphanum (theB)) {  			action (1);  		}  		else {  			action (2);  		}  		break;  	}  	case '\n': {  		switch (theB) {  		case '{':  		case '[':  		case '(':  		case '+':  		case '-': {  			action (1);  			break;  		}  		case ' ': {  			action (3);  			break;  		}  		default: {  			if (isAlphanum (theB)) {  				action (1);  			}  			else {  				action (2);  			}  			break;  		}  		}  		break;  	}  	default: {  		switch (theB) {  		case ' ': {  			if (isAlphanum (theA)) {  				action (1);  				break;  			}  			action (3);  			break;  		}  		case '\n': {  			switch (theA) {  			case '}':  			case ']':  			case ')':  			case '+':  			case '-':  			case '"':  			case '\'': {  				action (1);  				break;  			}  			default: {  				if (isAlphanum (theA)) {  					action (1);  				}  				else {  					action (3);  				}  				break;  			}  			}  			break;  		}  		default: {  			action (1);  			break;  		}  		}  		break;  	}  	}  }  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,jsmin,The following statement contains a magic number: switch (theA) {  case ' ': {  	if (isAlphanum (theB)) {  		action (1);  	}  	else {  		action (2);  	}  	break;  }  case '\n': {  	switch (theB) {  	case '{':  	case '[':  	case '(':  	case '+':  	case '-': {  		action (1);  		break;  	}  	case ' ': {  		action (3);  		break;  	}  	default: {  		if (isAlphanum (theB)) {  			action (1);  		}  		else {  			action (2);  		}  		break;  	}  	}  	break;  }  default: {  	switch (theB) {  	case ' ': {  		if (isAlphanum (theA)) {  			action (1);  			break;  		}  		action (3);  		break;  	}  	case '\n': {  		switch (theA) {  		case '}':  		case ']':  		case ')':  		case '+':  		case '-':  		case '"':  		case '\'': {  			action (1);  			break;  		}  		default: {  			if (isAlphanum (theA)) {  				action (1);  			}  			else {  				action (3);  			}  			break;  		}  		}  		break;  	}  	default: {  		action (1);  		break;  	}  	}  	break;  }  }  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,jsmin,The following statement contains a magic number: switch (theA) {  case ' ': {  	if (isAlphanum (theB)) {  		action (1);  	}  	else {  		action (2);  	}  	break;  }  case '\n': {  	switch (theB) {  	case '{':  	case '[':  	case '(':  	case '+':  	case '-': {  		action (1);  		break;  	}  	case ' ': {  		action (3);  		break;  	}  	default: {  		if (isAlphanum (theB)) {  			action (1);  		}  		else {  			action (2);  		}  		break;  	}  	}  	break;  }  default: {  	switch (theB) {  	case ' ': {  		if (isAlphanum (theA)) {  			action (1);  			break;  		}  		action (3);  		break;  	}  	case '\n': {  		switch (theA) {  		case '}':  		case ']':  		case ')':  		case '+':  		case '-':  		case '"':  		case '\'': {  			action (1);  			break;  		}  		default: {  			if (isAlphanum (theA)) {  				action (1);  			}  			else {  				action (3);  			}  			break;  		}  		}  		break;  	}  	default: {  		action (1);  		break;  	}  	}  	break;  }  }  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,jsmin,The following statement contains a magic number: switch (theA) {  case ' ': {  	if (isAlphanum (theB)) {  		action (1);  	}  	else {  		action (2);  	}  	break;  }  case '\n': {  	switch (theB) {  	case '{':  	case '[':  	case '(':  	case '+':  	case '-': {  		action (1);  		break;  	}  	case ' ': {  		action (3);  		break;  	}  	default: {  		if (isAlphanum (theB)) {  			action (1);  		}  		else {  			action (2);  		}  		break;  	}  	}  	break;  }  default: {  	switch (theB) {  	case ' ': {  		if (isAlphanum (theA)) {  			action (1);  			break;  		}  		action (3);  		break;  	}  	case '\n': {  		switch (theA) {  		case '}':  		case ']':  		case ')':  		case '+':  		case '-':  		case '"':  		case '\'': {  			action (1);  			break;  		}  		default: {  			if (isAlphanum (theA)) {  				action (1);  			}  			else {  				action (3);  			}  			break;  		}  		}  		break;  	}  	default: {  		action (1);  		break;  	}  	}  	break;  }  }  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,jsmin,The following statement contains a magic number: switch (theA) {  case ' ': {  	if (isAlphanum (theB)) {  		action (1);  	}  	else {  		action (2);  	}  	break;  }  case '\n': {  	switch (theB) {  	case '{':  	case '[':  	case '(':  	case '+':  	case '-': {  		action (1);  		break;  	}  	case ' ': {  		action (3);  		break;  	}  	default: {  		if (isAlphanum (theB)) {  			action (1);  		}  		else {  			action (2);  		}  		break;  	}  	}  	break;  }  default: {  	switch (theB) {  	case ' ': {  		if (isAlphanum (theA)) {  			action (1);  			break;  		}  		action (3);  		break;  	}  	case '\n': {  		switch (theA) {  		case '}':  		case ']':  		case ')':  		case '+':  		case '-':  		case '"':  		case '\'': {  			action (1);  			break;  		}  		default: {  			if (isAlphanum (theA)) {  				action (1);  			}  			else {  				action (3);  			}  			break;  		}  		}  		break;  	}  	default: {  		action (1);  		break;  	}  	}  	break;  }  }  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,jsmin,The following statement contains a magic number: switch (theA) {  case ' ': {  	if (isAlphanum (theB)) {  		action (1);  	}  	else {  		action (2);  	}  	break;  }  case '\n': {  	switch (theB) {  	case '{':  	case '[':  	case '(':  	case '+':  	case '-': {  		action (1);  		break;  	}  	case ' ': {  		action (3);  		break;  	}  	default: {  		if (isAlphanum (theB)) {  			action (1);  		}  		else {  			action (2);  		}  		break;  	}  	}  	break;  }  default: {  	switch (theB) {  	case ' ': {  		if (isAlphanum (theA)) {  			action (1);  			break;  		}  		action (3);  		break;  	}  	case '\n': {  		switch (theA) {  		case '}':  		case ']':  		case ')':  		case '+':  		case '-':  		case '"':  		case '\'': {  			action (1);  			break;  		}  		default: {  			if (isAlphanum (theA)) {  				action (1);  			}  			else {  				action (3);  			}  			break;  		}  		}  		break;  	}  	default: {  		action (1);  		break;  	}  	}  	break;  }  }  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,jsmin,The following statement contains a magic number: if (isAlphanum (theB)) {  	action (1);  }  else {  	action (2);  }  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,jsmin,The following statement contains a magic number: action (2);  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,jsmin,The following statement contains a magic number: switch (theB) {  case '{':  case '[':  case '(':  case '+':  case '-': {  	action (1);  	break;  }  case ' ': {  	action (3);  	break;  }  default: {  	if (isAlphanum (theB)) {  		action (1);  	}  	else {  		action (2);  	}  	break;  }  }  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,jsmin,The following statement contains a magic number: switch (theB) {  case '{':  case '[':  case '(':  case '+':  case '-': {  	action (1);  	break;  }  case ' ': {  	action (3);  	break;  }  default: {  	if (isAlphanum (theB)) {  		action (1);  	}  	else {  		action (2);  	}  	break;  }  }  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,jsmin,The following statement contains a magic number: action (3);  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,jsmin,The following statement contains a magic number: if (isAlphanum (theB)) {  	action (1);  }  else {  	action (2);  }  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,jsmin,The following statement contains a magic number: action (2);  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,jsmin,The following statement contains a magic number: switch (theB) {  case ' ': {  	if (isAlphanum (theA)) {  		action (1);  		break;  	}  	action (3);  	break;  }  case '\n': {  	switch (theA) {  	case '}':  	case ']':  	case ')':  	case '+':  	case '-':  	case '"':  	case '\'': {  		action (1);  		break;  	}  	default: {  		if (isAlphanum (theA)) {  			action (1);  		}  		else {  			action (3);  		}  		break;  	}  	}  	break;  }  default: {  	action (1);  	break;  }  }  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,jsmin,The following statement contains a magic number: switch (theB) {  case ' ': {  	if (isAlphanum (theA)) {  		action (1);  		break;  	}  	action (3);  	break;  }  case '\n': {  	switch (theA) {  	case '}':  	case ']':  	case ')':  	case '+':  	case '-':  	case '"':  	case '\'': {  		action (1);  		break;  	}  	default: {  		if (isAlphanum (theA)) {  			action (1);  		}  		else {  			action (3);  		}  		break;  	}  	}  	break;  }  default: {  	action (1);  	break;  }  }  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,jsmin,The following statement contains a magic number: action (3);  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,jsmin,The following statement contains a magic number: switch (theA) {  case '}':  case ']':  case ')':  case '+':  case '-':  case '"':  case '\'': {  	action (1);  	break;  }  default: {  	if (isAlphanum (theA)) {  		action (1);  	}  	else {  		action (3);  	}  	break;  }  }  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,jsmin,The following statement contains a magic number: if (isAlphanum (theA)) {  	action (1);  }  else {  	action (3);  }  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,jsmin,The following statement contains a magic number: action (3);  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,action,The following statement contains a magic number: if (d <= 2) {  	theA = theB;  	if (theA == '\'' || theA == '"') {  		for (; ;) {  			put (theA);  			theA = get ();  			if (theA == theB) {  				break;  			}  			if (theA <= '\n') {  				throw new Exception (string.Format ("Error: JSMIN unterminated string literal: {0}\n"' theA));  			}  			if (theA == '\\') {  				put (theA);  				theA = get ();  			}  		}  	}  }  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,action,The following statement contains a magic number: if (d <= 3) {  	theB = next ();  	if (theB == '/' && (theA == '(' || theA == ''' || theA == '=' || theA == '[' || theA == '!' || theA == ':' || theA == '&' || theA == '|' || theA == '?' || theA == '{' || theA == '}' || theA == ';' || theA == '\n')) {  		put (theA);  		put (theB);  		for (; ;) {  			theA = get ();  			if (theA == '/') {  				break;  			}  			else if (theA == '\\') {  				put (theA);  				theA = get ();  			}  			else if (theA <= '\n') {  				throw new Exception (string.Format ("Error: JSMIN unterminated Regular Expression literal : {0}.\n"' theA));  			}  			put (theA);  		}  		theB = next ();  	}  }  
Magic Number,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,isAlphanum,The following statement contains a magic number: return ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') || c == '_' || c == '$' || c == '\\' || c > 126);  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetColumnHash,The following statement contains a magic number: unchecked {  	int colCount = reader.FieldCount' hash = colCount;  	for (int i = 0; i < colCount; i++) {  		// binding code is only interested in names - not types  		object tmp = reader.GetName (i);  		hash = (hash * 31) + (tmp == null ? 0 : tmp.GetHashCode ());  	}  	return hash;  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetColumnHash,The following statement contains a magic number: for (int i = 0; i < colCount; i++) {  	// binding code is only interested in names - not types  	object tmp = reader.GetName (i);  	hash = (hash * 31) + (tmp == null ? 0 : tmp.GetHashCode ());  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GetColumnHash,The following statement contains a magic number: hash = (hash * 31) + (tmp == null ? 0 : tmp.GetHashCode ());  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (list != null) {  	if (FeatureSupport.Get (command.Connection).Arrays) {  		var arrayParm = command.CreateParameter ();  		arrayParm.Value = list;  		arrayParm.ParameterName = namePrefix;  		command.Parameters.Add (arrayParm);  	}  	else {  		bool isString = value is IEnumerable<string>;  		bool isDbString = value is IEnumerable<DbString>;  		foreach (var item in list) {  			count++;  			var listParam = command.CreateParameter ();  			listParam.ParameterName = namePrefix + count;  			listParam.Value = item ?? DBNull.Value;  			if (isString) {  				listParam.Size = 4000;  				if (item != null && ((string)item).Length > 4000) {  					listParam.Size = -1;  				}  			}  			if (isDbString && item as DbString != null) {  				var str = item as DbString;  				str.AddParameter (command' listParam.ParameterName);  			}  			else {  				command.Parameters.Add (listParam);  			}  		}  		if (count == 0) {  			command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)");  		}  		else {  			command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match =>  {  				var grp = match.Value;  				var sb = new StringBuilder ("(").Append (grp).Append (1);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (grp).Append (i);  				}  				return sb.Append (')').ToString ();  			});  		}  	}  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (list != null) {  	if (FeatureSupport.Get (command.Connection).Arrays) {  		var arrayParm = command.CreateParameter ();  		arrayParm.Value = list;  		arrayParm.ParameterName = namePrefix;  		command.Parameters.Add (arrayParm);  	}  	else {  		bool isString = value is IEnumerable<string>;  		bool isDbString = value is IEnumerable<DbString>;  		foreach (var item in list) {  			count++;  			var listParam = command.CreateParameter ();  			listParam.ParameterName = namePrefix + count;  			listParam.Value = item ?? DBNull.Value;  			if (isString) {  				listParam.Size = 4000;  				if (item != null && ((string)item).Length > 4000) {  					listParam.Size = -1;  				}  			}  			if (isDbString && item as DbString != null) {  				var str = item as DbString;  				str.AddParameter (command' listParam.ParameterName);  			}  			else {  				command.Parameters.Add (listParam);  			}  		}  		if (count == 0) {  			command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)");  		}  		else {  			command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match =>  {  				var grp = match.Value;  				var sb = new StringBuilder ("(").Append (grp).Append (1);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (grp).Append (i);  				}  				return sb.Append (')').ToString ();  			});  		}  	}  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (list != null) {  	if (FeatureSupport.Get (command.Connection).Arrays) {  		var arrayParm = command.CreateParameter ();  		arrayParm.Value = list;  		arrayParm.ParameterName = namePrefix;  		command.Parameters.Add (arrayParm);  	}  	else {  		bool isString = value is IEnumerable<string>;  		bool isDbString = value is IEnumerable<DbString>;  		foreach (var item in list) {  			count++;  			var listParam = command.CreateParameter ();  			listParam.ParameterName = namePrefix + count;  			listParam.Value = item ?? DBNull.Value;  			if (isString) {  				listParam.Size = 4000;  				if (item != null && ((string)item).Length > 4000) {  					listParam.Size = -1;  				}  			}  			if (isDbString && item as DbString != null) {  				var str = item as DbString;  				str.AddParameter (command' listParam.ParameterName);  			}  			else {  				command.Parameters.Add (listParam);  			}  		}  		if (count == 0) {  			command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)");  		}  		else {  			command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match =>  {  				var grp = match.Value;  				var sb = new StringBuilder ("(").Append (grp).Append (1);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (grp).Append (i);  				}  				return sb.Append (')').ToString ();  			});  		}  	}  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (FeatureSupport.Get (command.Connection).Arrays) {  	var arrayParm = command.CreateParameter ();  	arrayParm.Value = list;  	arrayParm.ParameterName = namePrefix;  	command.Parameters.Add (arrayParm);  }  else {  	bool isString = value is IEnumerable<string>;  	bool isDbString = value is IEnumerable<DbString>;  	foreach (var item in list) {  		count++;  		var listParam = command.CreateParameter ();  		listParam.ParameterName = namePrefix + count;  		listParam.Value = item ?? DBNull.Value;  		if (isString) {  			listParam.Size = 4000;  			if (item != null && ((string)item).Length > 4000) {  				listParam.Size = -1;  			}  		}  		if (isDbString && item as DbString != null) {  			var str = item as DbString;  			str.AddParameter (command' listParam.ParameterName);  		}  		else {  			command.Parameters.Add (listParam);  		}  	}  	if (count == 0) {  		command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)");  	}  	else {  		command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match =>  {  			var grp = match.Value;  			var sb = new StringBuilder ("(").Append (grp).Append (1);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (grp).Append (i);  			}  			return sb.Append (')').ToString ();  		});  	}  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (FeatureSupport.Get (command.Connection).Arrays) {  	var arrayParm = command.CreateParameter ();  	arrayParm.Value = list;  	arrayParm.ParameterName = namePrefix;  	command.Parameters.Add (arrayParm);  }  else {  	bool isString = value is IEnumerable<string>;  	bool isDbString = value is IEnumerable<DbString>;  	foreach (var item in list) {  		count++;  		var listParam = command.CreateParameter ();  		listParam.ParameterName = namePrefix + count;  		listParam.Value = item ?? DBNull.Value;  		if (isString) {  			listParam.Size = 4000;  			if (item != null && ((string)item).Length > 4000) {  				listParam.Size = -1;  			}  		}  		if (isDbString && item as DbString != null) {  			var str = item as DbString;  			str.AddParameter (command' listParam.ParameterName);  		}  		else {  			command.Parameters.Add (listParam);  		}  	}  	if (count == 0) {  		command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)");  	}  	else {  		command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match =>  {  			var grp = match.Value;  			var sb = new StringBuilder ("(").Append (grp).Append (1);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (grp).Append (i);  			}  			return sb.Append (')').ToString ();  		});  	}  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (FeatureSupport.Get (command.Connection).Arrays) {  	var arrayParm = command.CreateParameter ();  	arrayParm.Value = list;  	arrayParm.ParameterName = namePrefix;  	command.Parameters.Add (arrayParm);  }  else {  	bool isString = value is IEnumerable<string>;  	bool isDbString = value is IEnumerable<DbString>;  	foreach (var item in list) {  		count++;  		var listParam = command.CreateParameter ();  		listParam.ParameterName = namePrefix + count;  		listParam.Value = item ?? DBNull.Value;  		if (isString) {  			listParam.Size = 4000;  			if (item != null && ((string)item).Length > 4000) {  				listParam.Size = -1;  			}  		}  		if (isDbString && item as DbString != null) {  			var str = item as DbString;  			str.AddParameter (command' listParam.ParameterName);  		}  		else {  			command.Parameters.Add (listParam);  		}  	}  	if (count == 0) {  		command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)");  	}  	else {  		command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match =>  {  			var grp = match.Value;  			var sb = new StringBuilder ("(").Append (grp).Append (1);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (grp).Append (i);  			}  			return sb.Append (')').ToString ();  		});  	}  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,PackListParameters,The following statement contains a magic number: foreach (var item in list) {  	count++;  	var listParam = command.CreateParameter ();  	listParam.ParameterName = namePrefix + count;  	listParam.Value = item ?? DBNull.Value;  	if (isString) {  		listParam.Size = 4000;  		if (item != null && ((string)item).Length > 4000) {  			listParam.Size = -1;  		}  	}  	if (isDbString && item as DbString != null) {  		var str = item as DbString;  		str.AddParameter (command' listParam.ParameterName);  	}  	else {  		command.Parameters.Add (listParam);  	}  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,PackListParameters,The following statement contains a magic number: foreach (var item in list) {  	count++;  	var listParam = command.CreateParameter ();  	listParam.ParameterName = namePrefix + count;  	listParam.Value = item ?? DBNull.Value;  	if (isString) {  		listParam.Size = 4000;  		if (item != null && ((string)item).Length > 4000) {  			listParam.Size = -1;  		}  	}  	if (isDbString && item as DbString != null) {  		var str = item as DbString;  		str.AddParameter (command' listParam.ParameterName);  	}  	else {  		command.Parameters.Add (listParam);  	}  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (isString) {  	listParam.Size = 4000;  	if (item != null && ((string)item).Length > 4000) {  		listParam.Size = -1;  	}  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (isString) {  	listParam.Size = 4000;  	if (item != null && ((string)item).Length > 4000) {  		listParam.Size = -1;  	}  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,PackListParameters,The following statement contains a magic number: listParam.Size = 4000;  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (item != null && ((string)item).Length > 4000) {  	listParam.Size = -1;  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (count == 0) {  	command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)");  }  else {  	command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match =>  {  		var grp = match.Value;  		var sb = new StringBuilder ("(").Append (grp).Append (1);  		for (int i = 2; i <= count; i++) {  			sb.Append (''').Append (grp).Append (i);  		}  		return sb.Append (')').ToString ();  	});  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,PackListParameters,The following statement contains a magic number: command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match =>  {  	var grp = match.Value;  	var sb = new StringBuilder ("(").Append (grp).Append (1);  	for (int i = 2; i <= count; i++) {  		sb.Append (''').Append (grp).Append (i);  	}  	return sb.Append (')').ToString ();  });  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,PackListParameters,The following statement contains a magic number: for (int i = 2; i <= count; i++) {  	sb.Append (''').Append (grp).Append (i);  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: foreach (var prop in props) {  	if (filterParams) {  		if (identity.sql.IndexOf ("@" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0 && identity.sql.IndexOf (":" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0 && identity.sql.IndexOf ("?" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0) {  			// can't see the parameter in the text (even in a comment' etc) - burn it with fire  			continue;  		}  	}  	if (typeof(ICustomQueryParameter).IsAssignableFrom (prop.PropertyType)) {  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [typed-param]  		il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  		// stack is [parameters] [dbstring]  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [dbstring] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [dbstring] [command] [name]  		il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("AddParameter")' null);  		// stack is now [parameters]  		continue;  	}  	DbType dbType = LookupDbType (prop.PropertyType' prop.Name);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		// this actually represents special handling for list types;  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [command] [name]  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [command] [name] [typed-param]  		il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  		// stack is [parameters] [command] [name] [typed-value]  		if (prop.PropertyType.IsValueType) {  			il.Emit (OpCodes.Box' prop.PropertyType);  			// stack is [parameters] [command] [name] [boxed-value]  		}  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod ("PackListParameters")' null);  		// stack is [parameters]  		continue;  	}  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [parameters]  	il.Emit (OpCodes.Ldarg_0);  	// stack is now [parameters] [parameters] [command]  	if (checkForDuplicates) {  		// need to be a little careful about adding; use a utility method  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [parameters] [command] [name]  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod ("FindOrAddParameter")' null);  		// stack is [parameters] [parameter]  	}  	else {  		// no risk of duplicates; just blindly add  		il.EmitCall (OpCodes.Callvirt' typeof(IDbCommand).GetMethod ("CreateParameter")' null);  		// stack is now [parameters] [parameters] [parameter]  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [parameters] [parameter] [parameter]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [parameters] [parameter] [parameter] [name]  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("ParameterName").GetSetMethod ()' null);  		// stack is now [parameters] [parameters] [parameter]  	}  	if (dbType != DbType.Time)// https://connect.microsoft.com/VisualStudio/feedback/details/381934/sqlparameter-dbtype-dbtype-time-sets-the-parameter-to-sqldbtype-datetime-instead-of-sqldbtype-time  	 {  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [[parameters]] [parameter] [parameter]  		EmitInt32 (il' (int)dbType);  		// stack is now [parameters] [[parameters]] [parameter] [parameter] [db-type]  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("DbType").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  	}  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [[parameters]] [parameter] [parameter]  	EmitInt32 (il' (int)ParameterDirection.Input);  	// stack is now [parameters] [[parameters]] [parameter] [parameter] [dir]  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Direction").GetSetMethod ()' null);  	// stack is now [parameters] [[parameters]] [parameter]  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [[parameters]] [parameter] [parameter]  	il.Emit (OpCodes.Ldloc_0);  	// stack is now [parameters] [[parameters]] [parameter] [parameter] [typed-param]  	il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  	// stack is [parameters] [[parameters]] [parameter] [parameter] [typed-value]  	bool checkForNull = true;  	if (prop.PropertyType.IsValueType) {  		il.Emit (OpCodes.Box' prop.PropertyType);  		// stack is [parameters] [[parameters]] [parameter] [parameter] [boxed-value]  		if (Nullable.GetUnderlyingType (prop.PropertyType) == null) {  			// struct but not Nullable<T>; boxed value cannot be null  			checkForNull = false;  		}  	}  	if (checkForNull) {  		if (dbType == DbType.String && !haveInt32Arg1) {  			il.DeclareLocal (typeof(int));  			haveInt32Arg1 = true;  		}  		// relative stack: [boxed value]  		il.Emit (OpCodes.Dup);  		// relative stack: [boxed value] [boxed value]  		Label notNull = il.DefineLabel ();  		Label? allDone = dbType == DbType.String ? il.DefineLabel () : (Label?)null;  		il.Emit (OpCodes.Brtrue_S' notNull);  		// relative stack [boxed value = null]  		il.Emit (OpCodes.Pop);  		// relative stack empty  		il.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"));  		// relative stack [DBNull]  		if (dbType == DbType.String) {  			EmitInt32 (il' 0);  			il.Emit (OpCodes.Stloc_1);  		}  		if (allDone != null)  			il.Emit (OpCodes.Br_S' allDone.Value);  		il.MarkLabel (notNull);  		if (prop.PropertyType == typeof(string)) {  			il.Emit (OpCodes.Dup);  			// [string] [string]  			il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  			// [string] [length]  			EmitInt32 (il' 4000);  			// [string] [length] [4000]  			il.Emit (OpCodes.Cgt);  			// [string] [0 or 1]  			Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  			il.Emit (OpCodes.Brtrue_S' isLong);  			EmitInt32 (il' 4000);  			// [string] [4000]  			il.Emit (OpCodes.Br_S' lenDone);  			il.MarkLabel (isLong);  			EmitInt32 (il' -1);  			// [string] [-1]  			il.MarkLabel (lenDone);  			il.Emit (OpCodes.Stloc_1);  			// [string]   		}  		if (prop.PropertyType.FullName == LinqBinary) {  			il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null);  		}  		if (allDone != null)  			il.MarkLabel (allDone.Value);  		// relative stack [boxed value or DBNull]  	}  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Value").GetSetMethod ()' null);  	// stack is now [parameters] [[parameters]] [parameter]  	if (prop.PropertyType == typeof(string)) {  		var endOfSize = il.DefineLabel ();  		// don't set if 0  		il.Emit (OpCodes.Ldloc_1);  		// [parameters] [[parameters]] [parameter] [size]  		il.Emit (OpCodes.Brfalse_S' endOfSize);  		// [parameters] [[parameters]] [parameter]  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [[parameters]] [parameter] [parameter]  		il.Emit (OpCodes.Ldloc_1);  		// stack is now [parameters] [[parameters]] [parameter] [parameter] [size]  		il.EmitCall (OpCodes.Callvirt' typeof(IDbDataParameter).GetProperty ("Size").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  		il.MarkLabel (endOfSize);  	}  	if (checkForDuplicates) {  		// stack is now [parameters] [parameter]  		il.Emit (OpCodes.Pop);  		// don't need parameter any more  	}  	else {  		// stack is now [parameters] [parameters] [parameter]  		// blindly add  		il.EmitCall (OpCodes.Callvirt' typeof(IList).GetMethod ("Add")' null);  		// stack is now [parameters]  		il.Emit (OpCodes.Pop);  		// IList.Add returns the new index (int); we don't care  	}  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: foreach (var prop in props) {  	if (filterParams) {  		if (identity.sql.IndexOf ("@" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0 && identity.sql.IndexOf (":" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0 && identity.sql.IndexOf ("?" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0) {  			// can't see the parameter in the text (even in a comment' etc) - burn it with fire  			continue;  		}  	}  	if (typeof(ICustomQueryParameter).IsAssignableFrom (prop.PropertyType)) {  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [typed-param]  		il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  		// stack is [parameters] [dbstring]  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [dbstring] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [dbstring] [command] [name]  		il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("AddParameter")' null);  		// stack is now [parameters]  		continue;  	}  	DbType dbType = LookupDbType (prop.PropertyType' prop.Name);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		// this actually represents special handling for list types;  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [command] [name]  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [command] [name] [typed-param]  		il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  		// stack is [parameters] [command] [name] [typed-value]  		if (prop.PropertyType.IsValueType) {  			il.Emit (OpCodes.Box' prop.PropertyType);  			// stack is [parameters] [command] [name] [boxed-value]  		}  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod ("PackListParameters")' null);  		// stack is [parameters]  		continue;  	}  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [parameters]  	il.Emit (OpCodes.Ldarg_0);  	// stack is now [parameters] [parameters] [command]  	if (checkForDuplicates) {  		// need to be a little careful about adding; use a utility method  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [parameters] [command] [name]  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod ("FindOrAddParameter")' null);  		// stack is [parameters] [parameter]  	}  	else {  		// no risk of duplicates; just blindly add  		il.EmitCall (OpCodes.Callvirt' typeof(IDbCommand).GetMethod ("CreateParameter")' null);  		// stack is now [parameters] [parameters] [parameter]  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [parameters] [parameter] [parameter]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [parameters] [parameter] [parameter] [name]  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("ParameterName").GetSetMethod ()' null);  		// stack is now [parameters] [parameters] [parameter]  	}  	if (dbType != DbType.Time)// https://connect.microsoft.com/VisualStudio/feedback/details/381934/sqlparameter-dbtype-dbtype-time-sets-the-parameter-to-sqldbtype-datetime-instead-of-sqldbtype-time  	 {  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [[parameters]] [parameter] [parameter]  		EmitInt32 (il' (int)dbType);  		// stack is now [parameters] [[parameters]] [parameter] [parameter] [db-type]  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("DbType").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  	}  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [[parameters]] [parameter] [parameter]  	EmitInt32 (il' (int)ParameterDirection.Input);  	// stack is now [parameters] [[parameters]] [parameter] [parameter] [dir]  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Direction").GetSetMethod ()' null);  	// stack is now [parameters] [[parameters]] [parameter]  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [[parameters]] [parameter] [parameter]  	il.Emit (OpCodes.Ldloc_0);  	// stack is now [parameters] [[parameters]] [parameter] [parameter] [typed-param]  	il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  	// stack is [parameters] [[parameters]] [parameter] [parameter] [typed-value]  	bool checkForNull = true;  	if (prop.PropertyType.IsValueType) {  		il.Emit (OpCodes.Box' prop.PropertyType);  		// stack is [parameters] [[parameters]] [parameter] [parameter] [boxed-value]  		if (Nullable.GetUnderlyingType (prop.PropertyType) == null) {  			// struct but not Nullable<T>; boxed value cannot be null  			checkForNull = false;  		}  	}  	if (checkForNull) {  		if (dbType == DbType.String && !haveInt32Arg1) {  			il.DeclareLocal (typeof(int));  			haveInt32Arg1 = true;  		}  		// relative stack: [boxed value]  		il.Emit (OpCodes.Dup);  		// relative stack: [boxed value] [boxed value]  		Label notNull = il.DefineLabel ();  		Label? allDone = dbType == DbType.String ? il.DefineLabel () : (Label?)null;  		il.Emit (OpCodes.Brtrue_S' notNull);  		// relative stack [boxed value = null]  		il.Emit (OpCodes.Pop);  		// relative stack empty  		il.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"));  		// relative stack [DBNull]  		if (dbType == DbType.String) {  			EmitInt32 (il' 0);  			il.Emit (OpCodes.Stloc_1);  		}  		if (allDone != null)  			il.Emit (OpCodes.Br_S' allDone.Value);  		il.MarkLabel (notNull);  		if (prop.PropertyType == typeof(string)) {  			il.Emit (OpCodes.Dup);  			// [string] [string]  			il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  			// [string] [length]  			EmitInt32 (il' 4000);  			// [string] [length] [4000]  			il.Emit (OpCodes.Cgt);  			// [string] [0 or 1]  			Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  			il.Emit (OpCodes.Brtrue_S' isLong);  			EmitInt32 (il' 4000);  			// [string] [4000]  			il.Emit (OpCodes.Br_S' lenDone);  			il.MarkLabel (isLong);  			EmitInt32 (il' -1);  			// [string] [-1]  			il.MarkLabel (lenDone);  			il.Emit (OpCodes.Stloc_1);  			// [string]   		}  		if (prop.PropertyType.FullName == LinqBinary) {  			il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null);  		}  		if (allDone != null)  			il.MarkLabel (allDone.Value);  		// relative stack [boxed value or DBNull]  	}  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Value").GetSetMethod ()' null);  	// stack is now [parameters] [[parameters]] [parameter]  	if (prop.PropertyType == typeof(string)) {  		var endOfSize = il.DefineLabel ();  		// don't set if 0  		il.Emit (OpCodes.Ldloc_1);  		// [parameters] [[parameters]] [parameter] [size]  		il.Emit (OpCodes.Brfalse_S' endOfSize);  		// [parameters] [[parameters]] [parameter]  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [[parameters]] [parameter] [parameter]  		il.Emit (OpCodes.Ldloc_1);  		// stack is now [parameters] [[parameters]] [parameter] [parameter] [size]  		il.EmitCall (OpCodes.Callvirt' typeof(IDbDataParameter).GetProperty ("Size").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  		il.MarkLabel (endOfSize);  	}  	if (checkForDuplicates) {  		// stack is now [parameters] [parameter]  		il.Emit (OpCodes.Pop);  		// don't need parameter any more  	}  	else {  		// stack is now [parameters] [parameters] [parameter]  		// blindly add  		il.EmitCall (OpCodes.Callvirt' typeof(IList).GetMethod ("Add")' null);  		// stack is now [parameters]  		il.Emit (OpCodes.Pop);  		// IList.Add returns the new index (int); we don't care  	}  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: if (checkForNull) {  	if (dbType == DbType.String && !haveInt32Arg1) {  		il.DeclareLocal (typeof(int));  		haveInt32Arg1 = true;  	}  	// relative stack: [boxed value]  	il.Emit (OpCodes.Dup);  	// relative stack: [boxed value] [boxed value]  	Label notNull = il.DefineLabel ();  	Label? allDone = dbType == DbType.String ? il.DefineLabel () : (Label?)null;  	il.Emit (OpCodes.Brtrue_S' notNull);  	// relative stack [boxed value = null]  	il.Emit (OpCodes.Pop);  	// relative stack empty  	il.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"));  	// relative stack [DBNull]  	if (dbType == DbType.String) {  		EmitInt32 (il' 0);  		il.Emit (OpCodes.Stloc_1);  	}  	if (allDone != null)  		il.Emit (OpCodes.Br_S' allDone.Value);  	il.MarkLabel (notNull);  	if (prop.PropertyType == typeof(string)) {  		il.Emit (OpCodes.Dup);  		// [string] [string]  		il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  		// [string] [length]  		EmitInt32 (il' 4000);  		// [string] [length] [4000]  		il.Emit (OpCodes.Cgt);  		// [string] [0 or 1]  		Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  		il.Emit (OpCodes.Brtrue_S' isLong);  		EmitInt32 (il' 4000);  		// [string] [4000]  		il.Emit (OpCodes.Br_S' lenDone);  		il.MarkLabel (isLong);  		EmitInt32 (il' -1);  		// [string] [-1]  		il.MarkLabel (lenDone);  		il.Emit (OpCodes.Stloc_1);  		// [string]   	}  	if (prop.PropertyType.FullName == LinqBinary) {  		il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null);  	}  	if (allDone != null)  		il.MarkLabel (allDone.Value);  	// relative stack [boxed value or DBNull]  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: if (checkForNull) {  	if (dbType == DbType.String && !haveInt32Arg1) {  		il.DeclareLocal (typeof(int));  		haveInt32Arg1 = true;  	}  	// relative stack: [boxed value]  	il.Emit (OpCodes.Dup);  	// relative stack: [boxed value] [boxed value]  	Label notNull = il.DefineLabel ();  	Label? allDone = dbType == DbType.String ? il.DefineLabel () : (Label?)null;  	il.Emit (OpCodes.Brtrue_S' notNull);  	// relative stack [boxed value = null]  	il.Emit (OpCodes.Pop);  	// relative stack empty  	il.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"));  	// relative stack [DBNull]  	if (dbType == DbType.String) {  		EmitInt32 (il' 0);  		il.Emit (OpCodes.Stloc_1);  	}  	if (allDone != null)  		il.Emit (OpCodes.Br_S' allDone.Value);  	il.MarkLabel (notNull);  	if (prop.PropertyType == typeof(string)) {  		il.Emit (OpCodes.Dup);  		// [string] [string]  		il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  		// [string] [length]  		EmitInt32 (il' 4000);  		// [string] [length] [4000]  		il.Emit (OpCodes.Cgt);  		// [string] [0 or 1]  		Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  		il.Emit (OpCodes.Brtrue_S' isLong);  		EmitInt32 (il' 4000);  		// [string] [4000]  		il.Emit (OpCodes.Br_S' lenDone);  		il.MarkLabel (isLong);  		EmitInt32 (il' -1);  		// [string] [-1]  		il.MarkLabel (lenDone);  		il.Emit (OpCodes.Stloc_1);  		// [string]   	}  	if (prop.PropertyType.FullName == LinqBinary) {  		il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null);  	}  	if (allDone != null)  		il.MarkLabel (allDone.Value);  	// relative stack [boxed value or DBNull]  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: if (prop.PropertyType == typeof(string)) {  	il.Emit (OpCodes.Dup);  	// [string] [string]  	il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  	// [string] [length]  	EmitInt32 (il' 4000);  	// [string] [length] [4000]  	il.Emit (OpCodes.Cgt);  	// [string] [0 or 1]  	Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  	il.Emit (OpCodes.Brtrue_S' isLong);  	EmitInt32 (il' 4000);  	// [string] [4000]  	il.Emit (OpCodes.Br_S' lenDone);  	il.MarkLabel (isLong);  	EmitInt32 (il' -1);  	// [string] [-1]  	il.MarkLabel (lenDone);  	il.Emit (OpCodes.Stloc_1);  	// [string]   }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: if (prop.PropertyType == typeof(string)) {  	il.Emit (OpCodes.Dup);  	// [string] [string]  	il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  	// [string] [length]  	EmitInt32 (il' 4000);  	// [string] [length] [4000]  	il.Emit (OpCodes.Cgt);  	// [string] [0 or 1]  	Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  	il.Emit (OpCodes.Brtrue_S' isLong);  	EmitInt32 (il' 4000);  	// [string] [4000]  	il.Emit (OpCodes.Br_S' lenDone);  	il.MarkLabel (isLong);  	EmitInt32 (il' -1);  	// [string] [-1]  	il.MarkLabel (lenDone);  	il.Emit (OpCodes.Stloc_1);  	// [string]   }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: EmitInt32 (il' 4000);  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: EmitInt32 (il' 4000);  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,LoadLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Ldloc_0);  	break;  case 1:  	il.Emit (OpCodes.Ldloc_1);  	break;  case 2:  	il.Emit (OpCodes.Ldloc_2);  	break;  case 3:  	il.Emit (OpCodes.Ldloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Ldloc_S' (byte)index);  	}  	else {  		il.Emit (OpCodes.Ldloc' (short)index);  	}  	break;  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,LoadLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Ldloc_0);  	break;  case 1:  	il.Emit (OpCodes.Ldloc_1);  	break;  case 2:  	il.Emit (OpCodes.Ldloc_2);  	break;  case 3:  	il.Emit (OpCodes.Ldloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Ldloc_S' (byte)index);  	}  	else {  		il.Emit (OpCodes.Ldloc' (short)index);  	}  	break;  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,LoadLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Ldloc_0);  	break;  case 1:  	il.Emit (OpCodes.Ldloc_1);  	break;  case 2:  	il.Emit (OpCodes.Ldloc_2);  	break;  case 3:  	il.Emit (OpCodes.Ldloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Ldloc_S' (byte)index);  	}  	else {  		il.Emit (OpCodes.Ldloc' (short)index);  	}  	break;  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,LoadLocal,The following statement contains a magic number: if (index <= 255) {  	il.Emit (OpCodes.Ldloc_S' (byte)index);  }  else {  	il.Emit (OpCodes.Ldloc' (short)index);  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,StoreLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Stloc_0);  	break;  case 1:  	il.Emit (OpCodes.Stloc_1);  	break;  case 2:  	il.Emit (OpCodes.Stloc_2);  	break;  case 3:  	il.Emit (OpCodes.Stloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Stloc_S' (byte)index);  	}  	else {  		il.Emit (OpCodes.Stloc' (short)index);  	}  	break;  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,StoreLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Stloc_0);  	break;  case 1:  	il.Emit (OpCodes.Stloc_1);  	break;  case 2:  	il.Emit (OpCodes.Stloc_2);  	break;  case 3:  	il.Emit (OpCodes.Stloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Stloc_S' (byte)index);  	}  	else {  		il.Emit (OpCodes.Stloc' (short)index);  	}  	break;  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,StoreLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Stloc_0);  	break;  case 1:  	il.Emit (OpCodes.Stloc_1);  	break;  case 2:  	il.Emit (OpCodes.Stloc_2);  	break;  case 3:  	il.Emit (OpCodes.Stloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Stloc_S' (byte)index);  	}  	else {  		il.Emit (OpCodes.Stloc' (short)index);  	}  	break;  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,StoreLocal,The following statement contains a magic number: if (index <= 255) {  	il.Emit (OpCodes.Stloc_S' (byte)index);  }  else {  	il.Emit (OpCodes.Stloc' (short)index);  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,LoadLocalAddress,The following statement contains a magic number: if (index <= 255) {  	il.Emit (OpCodes.Ldloca_S' (byte)index);  }  else {  	il.Emit (OpCodes.Ldloca' (short)index);  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,EmitInt32,The following statement contains a magic number: if (value >= -128 && value <= 127) {  	il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  }  else {  	il.Emit (OpCodes.Ldc_I4' value);  }  
Magic Number,ML.Data,SqlMapper,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,EmitInt32,The following statement contains a magic number: if (value >= -128 && value <= 127) {  	il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  }  else {  	il.Emit (OpCodes.Ldc_I4' value);  }  
Magic Number,ML.Data,DynamicParameters,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	if (dbType == null && val != null)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	}  	else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		}  		else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		p.Value = val ?? DBNull.Value;  		p.Direction = param.ParameterDirection;  		var s = val as string;  		if (s != null) {  			if (s.Length <= 4000) {  				p.Size = 4000;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  		if (dbType != null) {  			p.DbType = dbType.Value;  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,ML.Data,DynamicParameters,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	if (dbType == null && val != null)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	}  	else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		}  		else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		p.Value = val ?? DBNull.Value;  		p.Direction = param.ParameterDirection;  		var s = val as string;  		if (s != null) {  			if (s.Length <= 4000) {  				p.Size = 4000;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  		if (dbType != null) {  			p.DbType = dbType.Value;  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,ML.Data,DynamicParameters,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	if (dbType == null && val != null)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	}  	else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		}  		else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		p.Value = val ?? DBNull.Value;  		p.Direction = param.ParameterDirection;  		var s = val as string;  		if (s != null) {  			if (s.Length <= 4000) {  				p.Size = 4000;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  		if (dbType != null) {  			p.DbType = dbType.Value;  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,ML.Data,DynamicParameters,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	if (dbType == null && val != null)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	}  	else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		}  		else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		p.Value = val ?? DBNull.Value;  		p.Direction = param.ParameterDirection;  		var s = val as string;  		if (s != null) {  			if (s.Length <= 4000) {  				p.Size = 4000;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  		if (dbType != null) {  			p.DbType = dbType.Value;  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,ML.Data,DynamicParameters,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	if (dbType == null && val != null)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	}  	else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		}  		else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		p.Value = val ?? DBNull.Value;  		p.Direction = param.ParameterDirection;  		var s = val as string;  		if (s != null) {  			if (s.Length <= 4000) {  				p.Size = 4000;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  		if (dbType != null) {  			p.DbType = dbType.Value;  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,ML.Data,DynamicParameters,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	if (dbType == null && val != null)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	}  	else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		}  		else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		p.Value = val ?? DBNull.Value;  		p.Direction = param.ParameterDirection;  		var s = val as string;  		if (s != null) {  			if (s.Length <= 4000) {  				p.Size = 4000;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  		if (dbType != null) {  			p.DbType = dbType.Value;  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,ML.Data,DynamicParameters,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  }  else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	}  	else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	p.Value = val ?? DBNull.Value;  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (dbType != null) {  		p.DbType = dbType.Value;  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,ML.Data,DynamicParameters,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  }  else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	}  	else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	p.Value = val ?? DBNull.Value;  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (dbType != null) {  		p.DbType = dbType.Value;  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,ML.Data,DynamicParameters,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  }  else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	}  	else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	p.Value = val ?? DBNull.Value;  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (dbType != null) {  		p.DbType = dbType.Value;  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,ML.Data,DynamicParameters,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  }  else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	}  	else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	p.Value = val ?? DBNull.Value;  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (dbType != null) {  		p.DbType = dbType.Value;  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,ML.Data,DynamicParameters,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  }  else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	}  	else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	p.Value = val ?? DBNull.Value;  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (dbType != null) {  		p.DbType = dbType.Value;  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,ML.Data,DynamicParameters,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  }  else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	}  	else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	p.Value = val ?? DBNull.Value;  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (dbType != null) {  		p.DbType = dbType.Value;  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,ML.Data,DynamicParameters,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (s != null) {  	if (s.Length <= 4000) {  		p.Size = 4000;  	}  }  
Magic Number,ML.Data,DynamicParameters,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (s != null) {  	if (s.Length <= 4000) {  		p.Size = 4000;  	}  }  
Magic Number,ML.Data,DynamicParameters,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (s.Length <= 4000) {  	p.Size = 4000;  }  
Magic Number,ML.Data,DynamicParameters,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (s.Length <= 4000) {  	p.Size = 4000;  }  
Magic Number,ML.Data,DynamicParameters,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,AddParameters,The following statement contains a magic number: p.Size = 4000;  
Magic Number,ML.Data,DbString,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,AddParameter,The following statement contains a magic number: if (Length == -1 && Value != null && Value.Length <= 4000) {  	param.Size = 4000;  }  else {  	param.Size = Length;  }  
Magic Number,ML.Data,DbString,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,AddParameter,The following statement contains a magic number: if (Length == -1 && Value != null && Value.Length <= 4000) {  	param.Size = 4000;  }  else {  	param.Size = Length;  }  
Magic Number,ML.Data,DbString,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,AddParameter,The following statement contains a magic number: param.Size = 4000;  
Magic Number,ML.Data,DefaultTypeMap,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,FindConstructor,The following statement contains a magic number: foreach (ConstructorInfo ctor in constructors.OrderBy (c => c.IsPublic ? 0 : (c.IsPrivate ? 2 : 1)).ThenBy (c => c.GetParameters ().Length)) {  	ParameterInfo[] ctorParameters = ctor.GetParameters ();  	if (ctorParameters.Length == 0)  		return ctor;  	if (ctorParameters.Length != types.Length)  		continue;  	int i = 0;  	for (; i < ctorParameters.Length; i++) {  		if (!String.Equals (ctorParameters [i].Name' names [i]' StringComparison.OrdinalIgnoreCase))  			break;  		if (types [i] == typeof(byte[]) && ctorParameters [i].ParameterType.FullName == SqlMapper.LinqBinary)  			continue;  		var unboxedType = Nullable.GetUnderlyingType (ctorParameters [i].ParameterType) ?? ctorParameters [i].ParameterType;  		if (unboxedType != types [i] && !(unboxedType.IsEnum && Enum.GetUnderlyingType (unboxedType) == types [i]) && !(unboxedType == typeof(char) && types [i] == typeof(string)))  			break;  	}  	if (i == ctorParameters.Length)  		return ctor;  }  
Magic Number,Mono.Data.SqliteClient,SqliteCommand,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteCommand.cs,NumChanges,The following statement contains a magic number: if (parent_conn.Version == 3)  	return Sqlite.sqlite3_changes (parent_conn.Handle);  else  	return Sqlite.sqlite_changes (parent_conn.Handle);  
Magic Number,Mono.Data.SqliteClient,SqliteCommand,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteCommand.cs,GetNextStatement,The following statement contains a magic number: if (parent_conn.Version == 3) {  	SqliteError err = Sqlite.sqlite3_prepare16 (parent_conn.Handle' pzStart' -1' out pStmt' out pzTail);  	if (err != SqliteError.OK)  		throw new SqliteSyntaxException (GetError3 ());  }  else {  	IntPtr errMsg;  	SqliteError err = Sqlite.sqlite_compile (parent_conn.Handle' pzStart' out pzTail' out pStmt' out errMsg);  	if (err != SqliteError.OK) {  		string msg = "unknown error";  		if (errMsg != IntPtr.Zero) {  			msg = Marshal.PtrToStringAnsi (errMsg);  			Sqlite.sqliteFree (errMsg);  		}  		throw new SqliteSyntaxException (msg);  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteCommand,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteCommand.cs,ExecuteStatement,The following statement contains a magic number: if (parent_conn.Version == 3) {  	err = Sqlite.sqlite3_step (pStmt);  	if (err == SqliteError.ERROR)  		throw new SqliteExecutionException (GetError3 ());  	pazValue = IntPtr.Zero;  	pazColName = IntPtr.Zero;  	// not used for v=3  	cols = Sqlite.sqlite3_column_count (pStmt);  }  else {  	err = Sqlite.sqlite_step (pStmt' out cols' out pazValue' out pazColName);  	if (err == SqliteError.ERROR)  		throw new SqliteExecutionException ();  }  
Magic Number,Mono.Data.SqliteClient,SqliteCommand,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteCommand.cs,Prepare,The following statement contains a magic number: if (Parameters.Count > 0 && parent_conn.Version == 2) {  	sql = BindParameters2 ();  }  
Magic Number,Mono.Data.SqliteClient,SqliteCommand,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteCommand.cs,ExecuteReader,The following statement contains a magic number: if (parent_conn.Version == 2)  	psql = Sqlite.StringToHeap (sql.Trim ()' parent_conn.Encoding);  else  	psql = Marshal.StringToHGlobalUni (sql.Trim ());  
Magic Number,Mono.Data.SqliteClient,SqliteCommand,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteCommand.cs,ExecuteReader,The following statement contains a magic number: try {  	while (true) {  		IntPtr pStmt;  		GetNextStatement (pzTail' out pzTail' out pStmt);  		if (pStmt == IntPtr.Zero)  			throw new Exception ();  		// pzTail is positioned after the last byte in the  		// statement' which will be the NULL character if  		// this was the last statement.  		bool last = Marshal.ReadByte (pzTail) == 0;  		try {  			if (parent_conn.Version == 3)  				BindParameters3 (pStmt);  			if (last && want_results)  				return new SqliteDataReader (this' pStmt' parent_conn.Version);  			ExecuteStatement (pStmt);  			if (last)  				// rows_affected is only used if !want_results  				rows_affected = NumChanges ();  		}  		finally {  			if (parent_conn.Version == 3)  				Sqlite.sqlite3_finalize (pStmt);  			else  				Sqlite.sqlite_finalize (pStmt' out errMsgPtr);  		}  		if (last)  			break;  	}  	return null;  }  finally {  	parent_conn.EndExec ();  	Marshal.FreeHGlobal (psql);  }  
Magic Number,Mono.Data.SqliteClient,SqliteCommand,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteCommand.cs,ExecuteReader,The following statement contains a magic number: try {  	while (true) {  		IntPtr pStmt;  		GetNextStatement (pzTail' out pzTail' out pStmt);  		if (pStmt == IntPtr.Zero)  			throw new Exception ();  		// pzTail is positioned after the last byte in the  		// statement' which will be the NULL character if  		// this was the last statement.  		bool last = Marshal.ReadByte (pzTail) == 0;  		try {  			if (parent_conn.Version == 3)  				BindParameters3 (pStmt);  			if (last && want_results)  				return new SqliteDataReader (this' pStmt' parent_conn.Version);  			ExecuteStatement (pStmt);  			if (last)  				// rows_affected is only used if !want_results  				rows_affected = NumChanges ();  		}  		finally {  			if (parent_conn.Version == 3)  				Sqlite.sqlite3_finalize (pStmt);  			else  				Sqlite.sqlite_finalize (pStmt' out errMsgPtr);  		}  		if (last)  			break;  	}  	return null;  }  finally {  	parent_conn.EndExec ();  	Marshal.FreeHGlobal (psql);  }  
Magic Number,Mono.Data.SqliteClient,SqliteCommand,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteCommand.cs,ExecuteReader,The following statement contains a magic number: while (true) {  	IntPtr pStmt;  	GetNextStatement (pzTail' out pzTail' out pStmt);  	if (pStmt == IntPtr.Zero)  		throw new Exception ();  	// pzTail is positioned after the last byte in the  	// statement' which will be the NULL character if  	// this was the last statement.  	bool last = Marshal.ReadByte (pzTail) == 0;  	try {  		if (parent_conn.Version == 3)  			BindParameters3 (pStmt);  		if (last && want_results)  			return new SqliteDataReader (this' pStmt' parent_conn.Version);  		ExecuteStatement (pStmt);  		if (last)  			// rows_affected is only used if !want_results  			rows_affected = NumChanges ();  	}  	finally {  		if (parent_conn.Version == 3)  			Sqlite.sqlite3_finalize (pStmt);  		else  			Sqlite.sqlite_finalize (pStmt' out errMsgPtr);  	}  	if (last)  		break;  }  
Magic Number,Mono.Data.SqliteClient,SqliteCommand,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteCommand.cs,ExecuteReader,The following statement contains a magic number: while (true) {  	IntPtr pStmt;  	GetNextStatement (pzTail' out pzTail' out pStmt);  	if (pStmt == IntPtr.Zero)  		throw new Exception ();  	// pzTail is positioned after the last byte in the  	// statement' which will be the NULL character if  	// this was the last statement.  	bool last = Marshal.ReadByte (pzTail) == 0;  	try {  		if (parent_conn.Version == 3)  			BindParameters3 (pStmt);  		if (last && want_results)  			return new SqliteDataReader (this' pStmt' parent_conn.Version);  		ExecuteStatement (pStmt);  		if (last)  			// rows_affected is only used if !want_results  			rows_affected = NumChanges ();  	}  	finally {  		if (parent_conn.Version == 3)  			Sqlite.sqlite3_finalize (pStmt);  		else  			Sqlite.sqlite_finalize (pStmt' out errMsgPtr);  	}  	if (last)  		break;  }  
Magic Number,Mono.Data.SqliteClient,SqliteCommand,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteCommand.cs,ExecuteReader,The following statement contains a magic number: try {  	if (parent_conn.Version == 3)  		BindParameters3 (pStmt);  	if (last && want_results)  		return new SqliteDataReader (this' pStmt' parent_conn.Version);  	ExecuteStatement (pStmt);  	if (last)  		// rows_affected is only used if !want_results  		rows_affected = NumChanges ();  }  finally {  	if (parent_conn.Version == 3)  		Sqlite.sqlite3_finalize (pStmt);  	else  		Sqlite.sqlite_finalize (pStmt' out errMsgPtr);  }  
Magic Number,Mono.Data.SqliteClient,SqliteCommand,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteCommand.cs,ExecuteReader,The following statement contains a magic number: try {  	if (parent_conn.Version == 3)  		BindParameters3 (pStmt);  	if (last && want_results)  		return new SqliteDataReader (this' pStmt' parent_conn.Version);  	ExecuteStatement (pStmt);  	if (last)  		// rows_affected is only used if !want_results  		rows_affected = NumChanges ();  }  finally {  	if (parent_conn.Version == 3)  		Sqlite.sqlite3_finalize (pStmt);  	else  		Sqlite.sqlite_finalize (pStmt' out errMsgPtr);  }  
Magic Number,Mono.Data.SqliteClient,SqliteCommand,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteCommand.cs,ExecuteReader,The following statement contains a magic number: if (parent_conn.Version == 3)  	BindParameters3 (pStmt);  
Magic Number,Mono.Data.SqliteClient,SqliteCommand,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteCommand.cs,ExecuteReader,The following statement contains a magic number: if (parent_conn.Version == 3)  	Sqlite.sqlite3_finalize (pStmt);  else  	Sqlite.sqlite_finalize (pStmt' out errMsgPtr);  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,SqliteConnection,The following statement contains a magic number: db_mode = 0644;  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,SqliteConnection,The following statement contains a magic number: db_version = 2;  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: if (connstring != conn_str) {  	Close ();  	conn_str = connstring;  	db_file = null;  	db_mode = 0644;  	string[] conn_pieces = connstring.Split (''');  	for (int i = 0; i < conn_pieces.Length; i++) {  		string piece = conn_pieces [i].Trim ();  		if (piece.Length == 0) {  			// ignore empty elements  			continue;  		}  		string[] arg_pieces = piece.Split ('=');  		if (arg_pieces.Length != 2) {  			throw new InvalidOperationException ("Invalid connection string");  		}  		string token = arg_pieces [0].ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ();  		string tvalue = arg_pieces [1].Trim ();  		string tvalue_lc = arg_pieces [1].ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ();  		switch (token) {  		#if NET_2_0  								case "DataSource": #endif  		case "uri":  			if (tvalue_lc.StartsWith ("file://")) {  				db_file = tvalue.Substring (7);  			}  			else if (tvalue_lc.StartsWith ("file:")) {  				db_file = tvalue.Substring (5);  			}  			else if (tvalue_lc.StartsWith ("/")) {  				db_file = tvalue;  				#if NET_2_0  											} else if (tvalue_lc.StartsWith ("|DataDirectory|"' 											 StringComparison.InvariantCultureIgnoreCase)) { 								AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation; 								string filePath = String.Format ("App_Data{0}{1}"' 												 Path.DirectorySeparatorChar' 												 tvalue_lc.Substring (15)); 								 								db_file = Path.Combine (ads.ApplicationBase' filePath); #endif  			}  			else {  				throw new InvalidOperationException ("Invalid connection string: invalid URI");  			}  			break;  		case "mode":  			db_mode = Convert.ToInt32 (tvalue);  			break;  		case "version":  			db_version = Convert.ToInt32 (tvalue);  			break;  		case "encoding":  			// only for sqlite2  			encoding = Encoding.GetEncoding (tvalue);  			break;  		case "busy_timeout":  			busy_timeout = Convert.ToInt32 (tvalue);  			break;  		}  	}  	if (db_file == null) {  		throw new InvalidOperationException ("Invalid connection string: no URI");  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: if (connstring != conn_str) {  	Close ();  	conn_str = connstring;  	db_file = null;  	db_mode = 0644;  	string[] conn_pieces = connstring.Split (''');  	for (int i = 0; i < conn_pieces.Length; i++) {  		string piece = conn_pieces [i].Trim ();  		if (piece.Length == 0) {  			// ignore empty elements  			continue;  		}  		string[] arg_pieces = piece.Split ('=');  		if (arg_pieces.Length != 2) {  			throw new InvalidOperationException ("Invalid connection string");  		}  		string token = arg_pieces [0].ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ();  		string tvalue = arg_pieces [1].Trim ();  		string tvalue_lc = arg_pieces [1].ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ();  		switch (token) {  		#if NET_2_0  								case "DataSource": #endif  		case "uri":  			if (tvalue_lc.StartsWith ("file://")) {  				db_file = tvalue.Substring (7);  			}  			else if (tvalue_lc.StartsWith ("file:")) {  				db_file = tvalue.Substring (5);  			}  			else if (tvalue_lc.StartsWith ("/")) {  				db_file = tvalue;  				#if NET_2_0  											} else if (tvalue_lc.StartsWith ("|DataDirectory|"' 											 StringComparison.InvariantCultureIgnoreCase)) { 								AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation; 								string filePath = String.Format ("App_Data{0}{1}"' 												 Path.DirectorySeparatorChar' 												 tvalue_lc.Substring (15)); 								 								db_file = Path.Combine (ads.ApplicationBase' filePath); #endif  			}  			else {  				throw new InvalidOperationException ("Invalid connection string: invalid URI");  			}  			break;  		case "mode":  			db_mode = Convert.ToInt32 (tvalue);  			break;  		case "version":  			db_version = Convert.ToInt32 (tvalue);  			break;  		case "encoding":  			// only for sqlite2  			encoding = Encoding.GetEncoding (tvalue);  			break;  		case "busy_timeout":  			busy_timeout = Convert.ToInt32 (tvalue);  			break;  		}  	}  	if (db_file == null) {  		throw new InvalidOperationException ("Invalid connection string: no URI");  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: if (connstring != conn_str) {  	Close ();  	conn_str = connstring;  	db_file = null;  	db_mode = 0644;  	string[] conn_pieces = connstring.Split (''');  	for (int i = 0; i < conn_pieces.Length; i++) {  		string piece = conn_pieces [i].Trim ();  		if (piece.Length == 0) {  			// ignore empty elements  			continue;  		}  		string[] arg_pieces = piece.Split ('=');  		if (arg_pieces.Length != 2) {  			throw new InvalidOperationException ("Invalid connection string");  		}  		string token = arg_pieces [0].ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ();  		string tvalue = arg_pieces [1].Trim ();  		string tvalue_lc = arg_pieces [1].ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ();  		switch (token) {  		#if NET_2_0  								case "DataSource": #endif  		case "uri":  			if (tvalue_lc.StartsWith ("file://")) {  				db_file = tvalue.Substring (7);  			}  			else if (tvalue_lc.StartsWith ("file:")) {  				db_file = tvalue.Substring (5);  			}  			else if (tvalue_lc.StartsWith ("/")) {  				db_file = tvalue;  				#if NET_2_0  											} else if (tvalue_lc.StartsWith ("|DataDirectory|"' 											 StringComparison.InvariantCultureIgnoreCase)) { 								AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation; 								string filePath = String.Format ("App_Data{0}{1}"' 												 Path.DirectorySeparatorChar' 												 tvalue_lc.Substring (15)); 								 								db_file = Path.Combine (ads.ApplicationBase' filePath); #endif  			}  			else {  				throw new InvalidOperationException ("Invalid connection string: invalid URI");  			}  			break;  		case "mode":  			db_mode = Convert.ToInt32 (tvalue);  			break;  		case "version":  			db_version = Convert.ToInt32 (tvalue);  			break;  		case "encoding":  			// only for sqlite2  			encoding = Encoding.GetEncoding (tvalue);  			break;  		case "busy_timeout":  			busy_timeout = Convert.ToInt32 (tvalue);  			break;  		}  	}  	if (db_file == null) {  		throw new InvalidOperationException ("Invalid connection string: no URI");  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: if (connstring != conn_str) {  	Close ();  	conn_str = connstring;  	db_file = null;  	db_mode = 0644;  	string[] conn_pieces = connstring.Split (''');  	for (int i = 0; i < conn_pieces.Length; i++) {  		string piece = conn_pieces [i].Trim ();  		if (piece.Length == 0) {  			// ignore empty elements  			continue;  		}  		string[] arg_pieces = piece.Split ('=');  		if (arg_pieces.Length != 2) {  			throw new InvalidOperationException ("Invalid connection string");  		}  		string token = arg_pieces [0].ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ();  		string tvalue = arg_pieces [1].Trim ();  		string tvalue_lc = arg_pieces [1].ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ();  		switch (token) {  		#if NET_2_0  								case "DataSource": #endif  		case "uri":  			if (tvalue_lc.StartsWith ("file://")) {  				db_file = tvalue.Substring (7);  			}  			else if (tvalue_lc.StartsWith ("file:")) {  				db_file = tvalue.Substring (5);  			}  			else if (tvalue_lc.StartsWith ("/")) {  				db_file = tvalue;  				#if NET_2_0  											} else if (tvalue_lc.StartsWith ("|DataDirectory|"' 											 StringComparison.InvariantCultureIgnoreCase)) { 								AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation; 								string filePath = String.Format ("App_Data{0}{1}"' 												 Path.DirectorySeparatorChar' 												 tvalue_lc.Substring (15)); 								 								db_file = Path.Combine (ads.ApplicationBase' filePath); #endif  			}  			else {  				throw new InvalidOperationException ("Invalid connection string: invalid URI");  			}  			break;  		case "mode":  			db_mode = Convert.ToInt32 (tvalue);  			break;  		case "version":  			db_version = Convert.ToInt32 (tvalue);  			break;  		case "encoding":  			// only for sqlite2  			encoding = Encoding.GetEncoding (tvalue);  			break;  		case "busy_timeout":  			busy_timeout = Convert.ToInt32 (tvalue);  			break;  		}  	}  	if (db_file == null) {  		throw new InvalidOperationException ("Invalid connection string: no URI");  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: db_mode = 0644;  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: for (int i = 0; i < conn_pieces.Length; i++) {  	string piece = conn_pieces [i].Trim ();  	if (piece.Length == 0) {  		// ignore empty elements  		continue;  	}  	string[] arg_pieces = piece.Split ('=');  	if (arg_pieces.Length != 2) {  		throw new InvalidOperationException ("Invalid connection string");  	}  	string token = arg_pieces [0].ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ();  	string tvalue = arg_pieces [1].Trim ();  	string tvalue_lc = arg_pieces [1].ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ();  	switch (token) {  	#if NET_2_0  							case "DataSource": #endif  	case "uri":  		if (tvalue_lc.StartsWith ("file://")) {  			db_file = tvalue.Substring (7);  		}  		else if (tvalue_lc.StartsWith ("file:")) {  			db_file = tvalue.Substring (5);  		}  		else if (tvalue_lc.StartsWith ("/")) {  			db_file = tvalue;  			#if NET_2_0  										} else if (tvalue_lc.StartsWith ("|DataDirectory|"' 											 StringComparison.InvariantCultureIgnoreCase)) { 								AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation; 								string filePath = String.Format ("App_Data{0}{1}"' 												 Path.DirectorySeparatorChar' 												 tvalue_lc.Substring (15)); 								 								db_file = Path.Combine (ads.ApplicationBase' filePath); #endif  		}  		else {  			throw new InvalidOperationException ("Invalid connection string: invalid URI");  		}  		break;  	case "mode":  		db_mode = Convert.ToInt32 (tvalue);  		break;  	case "version":  		db_version = Convert.ToInt32 (tvalue);  		break;  	case "encoding":  		// only for sqlite2  		encoding = Encoding.GetEncoding (tvalue);  		break;  	case "busy_timeout":  		busy_timeout = Convert.ToInt32 (tvalue);  		break;  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: for (int i = 0; i < conn_pieces.Length; i++) {  	string piece = conn_pieces [i].Trim ();  	if (piece.Length == 0) {  		// ignore empty elements  		continue;  	}  	string[] arg_pieces = piece.Split ('=');  	if (arg_pieces.Length != 2) {  		throw new InvalidOperationException ("Invalid connection string");  	}  	string token = arg_pieces [0].ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ();  	string tvalue = arg_pieces [1].Trim ();  	string tvalue_lc = arg_pieces [1].ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ();  	switch (token) {  	#if NET_2_0  							case "DataSource": #endif  	case "uri":  		if (tvalue_lc.StartsWith ("file://")) {  			db_file = tvalue.Substring (7);  		}  		else if (tvalue_lc.StartsWith ("file:")) {  			db_file = tvalue.Substring (5);  		}  		else if (tvalue_lc.StartsWith ("/")) {  			db_file = tvalue;  			#if NET_2_0  										} else if (tvalue_lc.StartsWith ("|DataDirectory|"' 											 StringComparison.InvariantCultureIgnoreCase)) { 								AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation; 								string filePath = String.Format ("App_Data{0}{1}"' 												 Path.DirectorySeparatorChar' 												 tvalue_lc.Substring (15)); 								 								db_file = Path.Combine (ads.ApplicationBase' filePath); #endif  		}  		else {  			throw new InvalidOperationException ("Invalid connection string: invalid URI");  		}  		break;  	case "mode":  		db_mode = Convert.ToInt32 (tvalue);  		break;  	case "version":  		db_version = Convert.ToInt32 (tvalue);  		break;  	case "encoding":  		// only for sqlite2  		encoding = Encoding.GetEncoding (tvalue);  		break;  	case "busy_timeout":  		busy_timeout = Convert.ToInt32 (tvalue);  		break;  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: for (int i = 0; i < conn_pieces.Length; i++) {  	string piece = conn_pieces [i].Trim ();  	if (piece.Length == 0) {  		// ignore empty elements  		continue;  	}  	string[] arg_pieces = piece.Split ('=');  	if (arg_pieces.Length != 2) {  		throw new InvalidOperationException ("Invalid connection string");  	}  	string token = arg_pieces [0].ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ();  	string tvalue = arg_pieces [1].Trim ();  	string tvalue_lc = arg_pieces [1].ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ();  	switch (token) {  	#if NET_2_0  							case "DataSource": #endif  	case "uri":  		if (tvalue_lc.StartsWith ("file://")) {  			db_file = tvalue.Substring (7);  		}  		else if (tvalue_lc.StartsWith ("file:")) {  			db_file = tvalue.Substring (5);  		}  		else if (tvalue_lc.StartsWith ("/")) {  			db_file = tvalue;  			#if NET_2_0  										} else if (tvalue_lc.StartsWith ("|DataDirectory|"' 											 StringComparison.InvariantCultureIgnoreCase)) { 								AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation; 								string filePath = String.Format ("App_Data{0}{1}"' 												 Path.DirectorySeparatorChar' 												 tvalue_lc.Substring (15)); 								 								db_file = Path.Combine (ads.ApplicationBase' filePath); #endif  		}  		else {  			throw new InvalidOperationException ("Invalid connection string: invalid URI");  		}  		break;  	case "mode":  		db_mode = Convert.ToInt32 (tvalue);  		break;  	case "version":  		db_version = Convert.ToInt32 (tvalue);  		break;  	case "encoding":  		// only for sqlite2  		encoding = Encoding.GetEncoding (tvalue);  		break;  	case "busy_timeout":  		busy_timeout = Convert.ToInt32 (tvalue);  		break;  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: if (arg_pieces.Length != 2) {  	throw new InvalidOperationException ("Invalid connection string");  }  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: switch (token) {  #if NET_2_0  						case "DataSource": #endif  case "uri":  	if (tvalue_lc.StartsWith ("file://")) {  		db_file = tvalue.Substring (7);  	}  	else if (tvalue_lc.StartsWith ("file:")) {  		db_file = tvalue.Substring (5);  	}  	else if (tvalue_lc.StartsWith ("/")) {  		db_file = tvalue;  		#if NET_2_0  									} else if (tvalue_lc.StartsWith ("|DataDirectory|"' 											 StringComparison.InvariantCultureIgnoreCase)) { 								AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation; 								string filePath = String.Format ("App_Data{0}{1}"' 												 Path.DirectorySeparatorChar' 												 tvalue_lc.Substring (15)); 								 								db_file = Path.Combine (ads.ApplicationBase' filePath); #endif  	}  	else {  		throw new InvalidOperationException ("Invalid connection string: invalid URI");  	}  	break;  case "mode":  	db_mode = Convert.ToInt32 (tvalue);  	break;  case "version":  	db_version = Convert.ToInt32 (tvalue);  	break;  case "encoding":  	// only for sqlite2  	encoding = Encoding.GetEncoding (tvalue);  	break;  case "busy_timeout":  	busy_timeout = Convert.ToInt32 (tvalue);  	break;  }  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: switch (token) {  #if NET_2_0  						case "DataSource": #endif  case "uri":  	if (tvalue_lc.StartsWith ("file://")) {  		db_file = tvalue.Substring (7);  	}  	else if (tvalue_lc.StartsWith ("file:")) {  		db_file = tvalue.Substring (5);  	}  	else if (tvalue_lc.StartsWith ("/")) {  		db_file = tvalue;  		#if NET_2_0  									} else if (tvalue_lc.StartsWith ("|DataDirectory|"' 											 StringComparison.InvariantCultureIgnoreCase)) { 								AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation; 								string filePath = String.Format ("App_Data{0}{1}"' 												 Path.DirectorySeparatorChar' 												 tvalue_lc.Substring (15)); 								 								db_file = Path.Combine (ads.ApplicationBase' filePath); #endif  	}  	else {  		throw new InvalidOperationException ("Invalid connection string: invalid URI");  	}  	break;  case "mode":  	db_mode = Convert.ToInt32 (tvalue);  	break;  case "version":  	db_version = Convert.ToInt32 (tvalue);  	break;  case "encoding":  	// only for sqlite2  	encoding = Encoding.GetEncoding (tvalue);  	break;  case "busy_timeout":  	busy_timeout = Convert.ToInt32 (tvalue);  	break;  }  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: if (tvalue_lc.StartsWith ("file://")) {  	db_file = tvalue.Substring (7);  }  else if (tvalue_lc.StartsWith ("file:")) {  	db_file = tvalue.Substring (5);  }  else if (tvalue_lc.StartsWith ("/")) {  	db_file = tvalue;  	#if NET_2_0  								} else if (tvalue_lc.StartsWith ("|DataDirectory|"' 											 StringComparison.InvariantCultureIgnoreCase)) { 								AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation; 								string filePath = String.Format ("App_Data{0}{1}"' 												 Path.DirectorySeparatorChar' 												 tvalue_lc.Substring (15)); 								 								db_file = Path.Combine (ads.ApplicationBase' filePath); #endif  }  else {  	throw new InvalidOperationException ("Invalid connection string: invalid URI");  }  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: if (tvalue_lc.StartsWith ("file://")) {  	db_file = tvalue.Substring (7);  }  else if (tvalue_lc.StartsWith ("file:")) {  	db_file = tvalue.Substring (5);  }  else if (tvalue_lc.StartsWith ("/")) {  	db_file = tvalue;  	#if NET_2_0  								} else if (tvalue_lc.StartsWith ("|DataDirectory|"' 											 StringComparison.InvariantCultureIgnoreCase)) { 								AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation; 								string filePath = String.Format ("App_Data{0}{1}"' 												 Path.DirectorySeparatorChar' 												 tvalue_lc.Substring (15)); 								 								db_file = Path.Combine (ads.ApplicationBase' filePath); #endif  }  else {  	throw new InvalidOperationException ("Invalid connection string: invalid URI");  }  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: db_file = tvalue.Substring (7);  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: if (tvalue_lc.StartsWith ("file:")) {  	db_file = tvalue.Substring (5);  }  else if (tvalue_lc.StartsWith ("/")) {  	db_file = tvalue;  	#if NET_2_0  								} else if (tvalue_lc.StartsWith ("|DataDirectory|"' 											 StringComparison.InvariantCultureIgnoreCase)) { 								AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation; 								string filePath = String.Format ("App_Data{0}{1}"' 												 Path.DirectorySeparatorChar' 												 tvalue_lc.Substring (15)); 								 								db_file = Path.Combine (ads.ApplicationBase' filePath); #endif  }  else {  	throw new InvalidOperationException ("Invalid connection string: invalid URI");  }  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: db_file = tvalue.Substring (5);  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,Close,The following statement contains a magic number: if (Version == 3)  	Sqlite.sqlite3_close (sqlite_handle);  else  	Sqlite.sqlite_close (sqlite_handle);  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,Open,The following statement contains a magic number: if (Version == 2) {  	try {  		sqlite_handle = Sqlite.sqlite_open (db_file' db_mode' out errmsg);  		if (errmsg != IntPtr.Zero) {  			string msg = Marshal.PtrToStringAnsi (errmsg);  			Sqlite.sqliteFree (errmsg);  			throw new ApplicationException (msg);  		}  	}  	catch (DllNotFoundException) {  		db_version = 3;  	}  	catch (EntryPointNotFoundException) {  		db_version = 3;  	}  	if (busy_timeout != 0)  		Sqlite.sqlite_busy_timeout (sqlite_handle' busy_timeout);  }  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,Open,The following statement contains a magic number: if (Version == 2) {  	try {  		sqlite_handle = Sqlite.sqlite_open (db_file' db_mode' out errmsg);  		if (errmsg != IntPtr.Zero) {  			string msg = Marshal.PtrToStringAnsi (errmsg);  			Sqlite.sqliteFree (errmsg);  			throw new ApplicationException (msg);  		}  	}  	catch (DllNotFoundException) {  		db_version = 3;  	}  	catch (EntryPointNotFoundException) {  		db_version = 3;  	}  	if (busy_timeout != 0)  		Sqlite.sqlite_busy_timeout (sqlite_handle' busy_timeout);  }  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,Open,The following statement contains a magic number: if (Version == 2) {  	try {  		sqlite_handle = Sqlite.sqlite_open (db_file' db_mode' out errmsg);  		if (errmsg != IntPtr.Zero) {  			string msg = Marshal.PtrToStringAnsi (errmsg);  			Sqlite.sqliteFree (errmsg);  			throw new ApplicationException (msg);  		}  	}  	catch (DllNotFoundException) {  		db_version = 3;  	}  	catch (EntryPointNotFoundException) {  		db_version = 3;  	}  	if (busy_timeout != 0)  		Sqlite.sqlite_busy_timeout (sqlite_handle' busy_timeout);  }  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,Open,The following statement contains a magic number: try {  	sqlite_handle = Sqlite.sqlite_open (db_file' db_mode' out errmsg);  	if (errmsg != IntPtr.Zero) {  		string msg = Marshal.PtrToStringAnsi (errmsg);  		Sqlite.sqliteFree (errmsg);  		throw new ApplicationException (msg);  	}  }  catch (DllNotFoundException) {  	db_version = 3;  }  catch (EntryPointNotFoundException) {  	db_version = 3;  }  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,Open,The following statement contains a magic number: try {  	sqlite_handle = Sqlite.sqlite_open (db_file' db_mode' out errmsg);  	if (errmsg != IntPtr.Zero) {  		string msg = Marshal.PtrToStringAnsi (errmsg);  		Sqlite.sqliteFree (errmsg);  		throw new ApplicationException (msg);  	}  }  catch (DllNotFoundException) {  	db_version = 3;  }  catch (EntryPointNotFoundException) {  	db_version = 3;  }  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,Open,The following statement contains a magic number: db_version = 3;  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,Open,The following statement contains a magic number: db_version = 3;  
Magic Number,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,Open,The following statement contains a magic number: if (Version == 3) {  	int err = Sqlite.sqlite3_open16 (db_file' out sqlite_handle);  	if (err == (int)SqliteError.ERROR)  		throw new ApplicationException (Marshal.PtrToStringUni (Sqlite.sqlite3_errmsg16 (sqlite_handle)));  	if (busy_timeout != 0)  		Sqlite.sqlite3_busy_timeout (sqlite_handle' busy_timeout);  }  else {  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: while (true) {  	bool hasdata = cmd.ExecuteStatement (pVm' out pN' out pazValue' out pazColName);  	// For the first row' get the column information  	if (first) {  		first = false;  		if (version == 3) {  			// A decltype might be null if the type is unknown to sqlite.  			decltypes = new string[pN];  			declmode = new int[pN];  			// 1 == integer' 2 == datetime  			for (int i = 0; i < pN; i++) {  				IntPtr decl = Sqlite.sqlite3_column_decltype16 (pVm' i);  				if (decl != IntPtr.Zero) {  					decltypes [i] = Marshal.PtrToStringUni (decl).ToLower (System.Globalization.CultureInfo.InvariantCulture);  					if (decltypes [i] == "int" || decltypes [i] == "integer")  						declmode [i] = 1;  					else if (decltypes [i] == "date" || decltypes [i] == "datetime")  						declmode [i] = 2;  				}  			}  		}  		columns = new string[pN];  		for (int i = 0; i < pN; i++) {  			string colName;  			if (version == 2) {  				IntPtr fieldPtr = Marshal.ReadIntPtr (pazColName' i * IntPtr.Size);  				colName = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  			}  			else {  				colName = Marshal.PtrToStringUni (Sqlite.sqlite3_column_name16 (pVm' i));  			}  			columns [i] = colName;  			column_names_sens [colName] = i;  			column_names_insens [colName] = i;  		}  	}  	if (!hasdata)  		break;  	object[] data_row = new object[pN];  	for (int i = 0; i < pN; i++) {  		if (version == 2) {  			IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i * IntPtr.Size);  			data_row [i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  		}  		else {  			switch (Sqlite.sqlite3_column_type (pVm' i)) {  			case 1:  				long val = Sqlite.sqlite3_column_int64 (pVm' i);  				// If the column was declared as an 'int' or 'integer'' let's play  				// nice and return an int (version 3 only).  				if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  					data_row [i] = (int)val;  				// Or if it was declared a date or datetime' do the reverse of what we  				// do for DateTime parameters.  				else if (declmode [i] == 2)  					data_row [i] = DateTime.FromFileTime (val);  				else  					data_row [i] = val;  				break;  			case 2:  				data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  				break;  			case 3:  				data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  				// If the column was declared as a 'date' or 'datetime'' let's play  				// nice and return a DateTime (version 3 only).  				if (declmode [i] == 2)  					data_row [i] = DateTime.Parse ((string)data_row [i]);  				break;  			case 4:  				int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  				IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  				byte[] blob = new byte[blobbytes];  				Marshal.Copy (blobptr' blob' 0' blobbytes);  				data_row [i] = blob;  				break;  			case 5:  				data_row [i] = null;  				break;  			default:  				throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  			}  		}  	}  	rows.Add (data_row);  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: while (true) {  	bool hasdata = cmd.ExecuteStatement (pVm' out pN' out pazValue' out pazColName);  	// For the first row' get the column information  	if (first) {  		first = false;  		if (version == 3) {  			// A decltype might be null if the type is unknown to sqlite.  			decltypes = new string[pN];  			declmode = new int[pN];  			// 1 == integer' 2 == datetime  			for (int i = 0; i < pN; i++) {  				IntPtr decl = Sqlite.sqlite3_column_decltype16 (pVm' i);  				if (decl != IntPtr.Zero) {  					decltypes [i] = Marshal.PtrToStringUni (decl).ToLower (System.Globalization.CultureInfo.InvariantCulture);  					if (decltypes [i] == "int" || decltypes [i] == "integer")  						declmode [i] = 1;  					else if (decltypes [i] == "date" || decltypes [i] == "datetime")  						declmode [i] = 2;  				}  			}  		}  		columns = new string[pN];  		for (int i = 0; i < pN; i++) {  			string colName;  			if (version == 2) {  				IntPtr fieldPtr = Marshal.ReadIntPtr (pazColName' i * IntPtr.Size);  				colName = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  			}  			else {  				colName = Marshal.PtrToStringUni (Sqlite.sqlite3_column_name16 (pVm' i));  			}  			columns [i] = colName;  			column_names_sens [colName] = i;  			column_names_insens [colName] = i;  		}  	}  	if (!hasdata)  		break;  	object[] data_row = new object[pN];  	for (int i = 0; i < pN; i++) {  		if (version == 2) {  			IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i * IntPtr.Size);  			data_row [i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  		}  		else {  			switch (Sqlite.sqlite3_column_type (pVm' i)) {  			case 1:  				long val = Sqlite.sqlite3_column_int64 (pVm' i);  				// If the column was declared as an 'int' or 'integer'' let's play  				// nice and return an int (version 3 only).  				if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  					data_row [i] = (int)val;  				// Or if it was declared a date or datetime' do the reverse of what we  				// do for DateTime parameters.  				else if (declmode [i] == 2)  					data_row [i] = DateTime.FromFileTime (val);  				else  					data_row [i] = val;  				break;  			case 2:  				data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  				break;  			case 3:  				data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  				// If the column was declared as a 'date' or 'datetime'' let's play  				// nice and return a DateTime (version 3 only).  				if (declmode [i] == 2)  					data_row [i] = DateTime.Parse ((string)data_row [i]);  				break;  			case 4:  				int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  				IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  				byte[] blob = new byte[blobbytes];  				Marshal.Copy (blobptr' blob' 0' blobbytes);  				data_row [i] = blob;  				break;  			case 5:  				data_row [i] = null;  				break;  			default:  				throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  			}  		}  	}  	rows.Add (data_row);  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: while (true) {  	bool hasdata = cmd.ExecuteStatement (pVm' out pN' out pazValue' out pazColName);  	// For the first row' get the column information  	if (first) {  		first = false;  		if (version == 3) {  			// A decltype might be null if the type is unknown to sqlite.  			decltypes = new string[pN];  			declmode = new int[pN];  			// 1 == integer' 2 == datetime  			for (int i = 0; i < pN; i++) {  				IntPtr decl = Sqlite.sqlite3_column_decltype16 (pVm' i);  				if (decl != IntPtr.Zero) {  					decltypes [i] = Marshal.PtrToStringUni (decl).ToLower (System.Globalization.CultureInfo.InvariantCulture);  					if (decltypes [i] == "int" || decltypes [i] == "integer")  						declmode [i] = 1;  					else if (decltypes [i] == "date" || decltypes [i] == "datetime")  						declmode [i] = 2;  				}  			}  		}  		columns = new string[pN];  		for (int i = 0; i < pN; i++) {  			string colName;  			if (version == 2) {  				IntPtr fieldPtr = Marshal.ReadIntPtr (pazColName' i * IntPtr.Size);  				colName = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  			}  			else {  				colName = Marshal.PtrToStringUni (Sqlite.sqlite3_column_name16 (pVm' i));  			}  			columns [i] = colName;  			column_names_sens [colName] = i;  			column_names_insens [colName] = i;  		}  	}  	if (!hasdata)  		break;  	object[] data_row = new object[pN];  	for (int i = 0; i < pN; i++) {  		if (version == 2) {  			IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i * IntPtr.Size);  			data_row [i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  		}  		else {  			switch (Sqlite.sqlite3_column_type (pVm' i)) {  			case 1:  				long val = Sqlite.sqlite3_column_int64 (pVm' i);  				// If the column was declared as an 'int' or 'integer'' let's play  				// nice and return an int (version 3 only).  				if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  					data_row [i] = (int)val;  				// Or if it was declared a date or datetime' do the reverse of what we  				// do for DateTime parameters.  				else if (declmode [i] == 2)  					data_row [i] = DateTime.FromFileTime (val);  				else  					data_row [i] = val;  				break;  			case 2:  				data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  				break;  			case 3:  				data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  				// If the column was declared as a 'date' or 'datetime'' let's play  				// nice and return a DateTime (version 3 only).  				if (declmode [i] == 2)  					data_row [i] = DateTime.Parse ((string)data_row [i]);  				break;  			case 4:  				int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  				IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  				byte[] blob = new byte[blobbytes];  				Marshal.Copy (blobptr' blob' 0' blobbytes);  				data_row [i] = blob;  				break;  			case 5:  				data_row [i] = null;  				break;  			default:  				throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  			}  		}  	}  	rows.Add (data_row);  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: while (true) {  	bool hasdata = cmd.ExecuteStatement (pVm' out pN' out pazValue' out pazColName);  	// For the first row' get the column information  	if (first) {  		first = false;  		if (version == 3) {  			// A decltype might be null if the type is unknown to sqlite.  			decltypes = new string[pN];  			declmode = new int[pN];  			// 1 == integer' 2 == datetime  			for (int i = 0; i < pN; i++) {  				IntPtr decl = Sqlite.sqlite3_column_decltype16 (pVm' i);  				if (decl != IntPtr.Zero) {  					decltypes [i] = Marshal.PtrToStringUni (decl).ToLower (System.Globalization.CultureInfo.InvariantCulture);  					if (decltypes [i] == "int" || decltypes [i] == "integer")  						declmode [i] = 1;  					else if (decltypes [i] == "date" || decltypes [i] == "datetime")  						declmode [i] = 2;  				}  			}  		}  		columns = new string[pN];  		for (int i = 0; i < pN; i++) {  			string colName;  			if (version == 2) {  				IntPtr fieldPtr = Marshal.ReadIntPtr (pazColName' i * IntPtr.Size);  				colName = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  			}  			else {  				colName = Marshal.PtrToStringUni (Sqlite.sqlite3_column_name16 (pVm' i));  			}  			columns [i] = colName;  			column_names_sens [colName] = i;  			column_names_insens [colName] = i;  		}  	}  	if (!hasdata)  		break;  	object[] data_row = new object[pN];  	for (int i = 0; i < pN; i++) {  		if (version == 2) {  			IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i * IntPtr.Size);  			data_row [i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  		}  		else {  			switch (Sqlite.sqlite3_column_type (pVm' i)) {  			case 1:  				long val = Sqlite.sqlite3_column_int64 (pVm' i);  				// If the column was declared as an 'int' or 'integer'' let's play  				// nice and return an int (version 3 only).  				if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  					data_row [i] = (int)val;  				// Or if it was declared a date or datetime' do the reverse of what we  				// do for DateTime parameters.  				else if (declmode [i] == 2)  					data_row [i] = DateTime.FromFileTime (val);  				else  					data_row [i] = val;  				break;  			case 2:  				data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  				break;  			case 3:  				data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  				// If the column was declared as a 'date' or 'datetime'' let's play  				// nice and return a DateTime (version 3 only).  				if (declmode [i] == 2)  					data_row [i] = DateTime.Parse ((string)data_row [i]);  				break;  			case 4:  				int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  				IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  				byte[] blob = new byte[blobbytes];  				Marshal.Copy (blobptr' blob' 0' blobbytes);  				data_row [i] = blob;  				break;  			case 5:  				data_row [i] = null;  				break;  			default:  				throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  			}  		}  	}  	rows.Add (data_row);  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: while (true) {  	bool hasdata = cmd.ExecuteStatement (pVm' out pN' out pazValue' out pazColName);  	// For the first row' get the column information  	if (first) {  		first = false;  		if (version == 3) {  			// A decltype might be null if the type is unknown to sqlite.  			decltypes = new string[pN];  			declmode = new int[pN];  			// 1 == integer' 2 == datetime  			for (int i = 0; i < pN; i++) {  				IntPtr decl = Sqlite.sqlite3_column_decltype16 (pVm' i);  				if (decl != IntPtr.Zero) {  					decltypes [i] = Marshal.PtrToStringUni (decl).ToLower (System.Globalization.CultureInfo.InvariantCulture);  					if (decltypes [i] == "int" || decltypes [i] == "integer")  						declmode [i] = 1;  					else if (decltypes [i] == "date" || decltypes [i] == "datetime")  						declmode [i] = 2;  				}  			}  		}  		columns = new string[pN];  		for (int i = 0; i < pN; i++) {  			string colName;  			if (version == 2) {  				IntPtr fieldPtr = Marshal.ReadIntPtr (pazColName' i * IntPtr.Size);  				colName = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  			}  			else {  				colName = Marshal.PtrToStringUni (Sqlite.sqlite3_column_name16 (pVm' i));  			}  			columns [i] = colName;  			column_names_sens [colName] = i;  			column_names_insens [colName] = i;  		}  	}  	if (!hasdata)  		break;  	object[] data_row = new object[pN];  	for (int i = 0; i < pN; i++) {  		if (version == 2) {  			IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i * IntPtr.Size);  			data_row [i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  		}  		else {  			switch (Sqlite.sqlite3_column_type (pVm' i)) {  			case 1:  				long val = Sqlite.sqlite3_column_int64 (pVm' i);  				// If the column was declared as an 'int' or 'integer'' let's play  				// nice and return an int (version 3 only).  				if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  					data_row [i] = (int)val;  				// Or if it was declared a date or datetime' do the reverse of what we  				// do for DateTime parameters.  				else if (declmode [i] == 2)  					data_row [i] = DateTime.FromFileTime (val);  				else  					data_row [i] = val;  				break;  			case 2:  				data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  				break;  			case 3:  				data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  				// If the column was declared as a 'date' or 'datetime'' let's play  				// nice and return a DateTime (version 3 only).  				if (declmode [i] == 2)  					data_row [i] = DateTime.Parse ((string)data_row [i]);  				break;  			case 4:  				int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  				IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  				byte[] blob = new byte[blobbytes];  				Marshal.Copy (blobptr' blob' 0' blobbytes);  				data_row [i] = blob;  				break;  			case 5:  				data_row [i] = null;  				break;  			default:  				throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  			}  		}  	}  	rows.Add (data_row);  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: while (true) {  	bool hasdata = cmd.ExecuteStatement (pVm' out pN' out pazValue' out pazColName);  	// For the first row' get the column information  	if (first) {  		first = false;  		if (version == 3) {  			// A decltype might be null if the type is unknown to sqlite.  			decltypes = new string[pN];  			declmode = new int[pN];  			// 1 == integer' 2 == datetime  			for (int i = 0; i < pN; i++) {  				IntPtr decl = Sqlite.sqlite3_column_decltype16 (pVm' i);  				if (decl != IntPtr.Zero) {  					decltypes [i] = Marshal.PtrToStringUni (decl).ToLower (System.Globalization.CultureInfo.InvariantCulture);  					if (decltypes [i] == "int" || decltypes [i] == "integer")  						declmode [i] = 1;  					else if (decltypes [i] == "date" || decltypes [i] == "datetime")  						declmode [i] = 2;  				}  			}  		}  		columns = new string[pN];  		for (int i = 0; i < pN; i++) {  			string colName;  			if (version == 2) {  				IntPtr fieldPtr = Marshal.ReadIntPtr (pazColName' i * IntPtr.Size);  				colName = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  			}  			else {  				colName = Marshal.PtrToStringUni (Sqlite.sqlite3_column_name16 (pVm' i));  			}  			columns [i] = colName;  			column_names_sens [colName] = i;  			column_names_insens [colName] = i;  		}  	}  	if (!hasdata)  		break;  	object[] data_row = new object[pN];  	for (int i = 0; i < pN; i++) {  		if (version == 2) {  			IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i * IntPtr.Size);  			data_row [i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  		}  		else {  			switch (Sqlite.sqlite3_column_type (pVm' i)) {  			case 1:  				long val = Sqlite.sqlite3_column_int64 (pVm' i);  				// If the column was declared as an 'int' or 'integer'' let's play  				// nice and return an int (version 3 only).  				if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  					data_row [i] = (int)val;  				// Or if it was declared a date or datetime' do the reverse of what we  				// do for DateTime parameters.  				else if (declmode [i] == 2)  					data_row [i] = DateTime.FromFileTime (val);  				else  					data_row [i] = val;  				break;  			case 2:  				data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  				break;  			case 3:  				data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  				// If the column was declared as a 'date' or 'datetime'' let's play  				// nice and return a DateTime (version 3 only).  				if (declmode [i] == 2)  					data_row [i] = DateTime.Parse ((string)data_row [i]);  				break;  			case 4:  				int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  				IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  				byte[] blob = new byte[blobbytes];  				Marshal.Copy (blobptr' blob' 0' blobbytes);  				data_row [i] = blob;  				break;  			case 5:  				data_row [i] = null;  				break;  			default:  				throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  			}  		}  	}  	rows.Add (data_row);  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: while (true) {  	bool hasdata = cmd.ExecuteStatement (pVm' out pN' out pazValue' out pazColName);  	// For the first row' get the column information  	if (first) {  		first = false;  		if (version == 3) {  			// A decltype might be null if the type is unknown to sqlite.  			decltypes = new string[pN];  			declmode = new int[pN];  			// 1 == integer' 2 == datetime  			for (int i = 0; i < pN; i++) {  				IntPtr decl = Sqlite.sqlite3_column_decltype16 (pVm' i);  				if (decl != IntPtr.Zero) {  					decltypes [i] = Marshal.PtrToStringUni (decl).ToLower (System.Globalization.CultureInfo.InvariantCulture);  					if (decltypes [i] == "int" || decltypes [i] == "integer")  						declmode [i] = 1;  					else if (decltypes [i] == "date" || decltypes [i] == "datetime")  						declmode [i] = 2;  				}  			}  		}  		columns = new string[pN];  		for (int i = 0; i < pN; i++) {  			string colName;  			if (version == 2) {  				IntPtr fieldPtr = Marshal.ReadIntPtr (pazColName' i * IntPtr.Size);  				colName = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  			}  			else {  				colName = Marshal.PtrToStringUni (Sqlite.sqlite3_column_name16 (pVm' i));  			}  			columns [i] = colName;  			column_names_sens [colName] = i;  			column_names_insens [colName] = i;  		}  	}  	if (!hasdata)  		break;  	object[] data_row = new object[pN];  	for (int i = 0; i < pN; i++) {  		if (version == 2) {  			IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i * IntPtr.Size);  			data_row [i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  		}  		else {  			switch (Sqlite.sqlite3_column_type (pVm' i)) {  			case 1:  				long val = Sqlite.sqlite3_column_int64 (pVm' i);  				// If the column was declared as an 'int' or 'integer'' let's play  				// nice and return an int (version 3 only).  				if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  					data_row [i] = (int)val;  				// Or if it was declared a date or datetime' do the reverse of what we  				// do for DateTime parameters.  				else if (declmode [i] == 2)  					data_row [i] = DateTime.FromFileTime (val);  				else  					data_row [i] = val;  				break;  			case 2:  				data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  				break;  			case 3:  				data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  				// If the column was declared as a 'date' or 'datetime'' let's play  				// nice and return a DateTime (version 3 only).  				if (declmode [i] == 2)  					data_row [i] = DateTime.Parse ((string)data_row [i]);  				break;  			case 4:  				int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  				IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  				byte[] blob = new byte[blobbytes];  				Marshal.Copy (blobptr' blob' 0' blobbytes);  				data_row [i] = blob;  				break;  			case 5:  				data_row [i] = null;  				break;  			default:  				throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  			}  		}  	}  	rows.Add (data_row);  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: while (true) {  	bool hasdata = cmd.ExecuteStatement (pVm' out pN' out pazValue' out pazColName);  	// For the first row' get the column information  	if (first) {  		first = false;  		if (version == 3) {  			// A decltype might be null if the type is unknown to sqlite.  			decltypes = new string[pN];  			declmode = new int[pN];  			// 1 == integer' 2 == datetime  			for (int i = 0; i < pN; i++) {  				IntPtr decl = Sqlite.sqlite3_column_decltype16 (pVm' i);  				if (decl != IntPtr.Zero) {  					decltypes [i] = Marshal.PtrToStringUni (decl).ToLower (System.Globalization.CultureInfo.InvariantCulture);  					if (decltypes [i] == "int" || decltypes [i] == "integer")  						declmode [i] = 1;  					else if (decltypes [i] == "date" || decltypes [i] == "datetime")  						declmode [i] = 2;  				}  			}  		}  		columns = new string[pN];  		for (int i = 0; i < pN; i++) {  			string colName;  			if (version == 2) {  				IntPtr fieldPtr = Marshal.ReadIntPtr (pazColName' i * IntPtr.Size);  				colName = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  			}  			else {  				colName = Marshal.PtrToStringUni (Sqlite.sqlite3_column_name16 (pVm' i));  			}  			columns [i] = colName;  			column_names_sens [colName] = i;  			column_names_insens [colName] = i;  		}  	}  	if (!hasdata)  		break;  	object[] data_row = new object[pN];  	for (int i = 0; i < pN; i++) {  		if (version == 2) {  			IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i * IntPtr.Size);  			data_row [i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  		}  		else {  			switch (Sqlite.sqlite3_column_type (pVm' i)) {  			case 1:  				long val = Sqlite.sqlite3_column_int64 (pVm' i);  				// If the column was declared as an 'int' or 'integer'' let's play  				// nice and return an int (version 3 only).  				if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  					data_row [i] = (int)val;  				// Or if it was declared a date or datetime' do the reverse of what we  				// do for DateTime parameters.  				else if (declmode [i] == 2)  					data_row [i] = DateTime.FromFileTime (val);  				else  					data_row [i] = val;  				break;  			case 2:  				data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  				break;  			case 3:  				data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  				// If the column was declared as a 'date' or 'datetime'' let's play  				// nice and return a DateTime (version 3 only).  				if (declmode [i] == 2)  					data_row [i] = DateTime.Parse ((string)data_row [i]);  				break;  			case 4:  				int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  				IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  				byte[] blob = new byte[blobbytes];  				Marshal.Copy (blobptr' blob' 0' blobbytes);  				data_row [i] = blob;  				break;  			case 5:  				data_row [i] = null;  				break;  			default:  				throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  			}  		}  	}  	rows.Add (data_row);  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: while (true) {  	bool hasdata = cmd.ExecuteStatement (pVm' out pN' out pazValue' out pazColName);  	// For the first row' get the column information  	if (first) {  		first = false;  		if (version == 3) {  			// A decltype might be null if the type is unknown to sqlite.  			decltypes = new string[pN];  			declmode = new int[pN];  			// 1 == integer' 2 == datetime  			for (int i = 0; i < pN; i++) {  				IntPtr decl = Sqlite.sqlite3_column_decltype16 (pVm' i);  				if (decl != IntPtr.Zero) {  					decltypes [i] = Marshal.PtrToStringUni (decl).ToLower (System.Globalization.CultureInfo.InvariantCulture);  					if (decltypes [i] == "int" || decltypes [i] == "integer")  						declmode [i] = 1;  					else if (decltypes [i] == "date" || decltypes [i] == "datetime")  						declmode [i] = 2;  				}  			}  		}  		columns = new string[pN];  		for (int i = 0; i < pN; i++) {  			string colName;  			if (version == 2) {  				IntPtr fieldPtr = Marshal.ReadIntPtr (pazColName' i * IntPtr.Size);  				colName = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  			}  			else {  				colName = Marshal.PtrToStringUni (Sqlite.sqlite3_column_name16 (pVm' i));  			}  			columns [i] = colName;  			column_names_sens [colName] = i;  			column_names_insens [colName] = i;  		}  	}  	if (!hasdata)  		break;  	object[] data_row = new object[pN];  	for (int i = 0; i < pN; i++) {  		if (version == 2) {  			IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i * IntPtr.Size);  			data_row [i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  		}  		else {  			switch (Sqlite.sqlite3_column_type (pVm' i)) {  			case 1:  				long val = Sqlite.sqlite3_column_int64 (pVm' i);  				// If the column was declared as an 'int' or 'integer'' let's play  				// nice and return an int (version 3 only).  				if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  					data_row [i] = (int)val;  				// Or if it was declared a date or datetime' do the reverse of what we  				// do for DateTime parameters.  				else if (declmode [i] == 2)  					data_row [i] = DateTime.FromFileTime (val);  				else  					data_row [i] = val;  				break;  			case 2:  				data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  				break;  			case 3:  				data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  				// If the column was declared as a 'date' or 'datetime'' let's play  				// nice and return a DateTime (version 3 only).  				if (declmode [i] == 2)  					data_row [i] = DateTime.Parse ((string)data_row [i]);  				break;  			case 4:  				int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  				IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  				byte[] blob = new byte[blobbytes];  				Marshal.Copy (blobptr' blob' 0' blobbytes);  				data_row [i] = blob;  				break;  			case 5:  				data_row [i] = null;  				break;  			default:  				throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  			}  		}  	}  	rows.Add (data_row);  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: while (true) {  	bool hasdata = cmd.ExecuteStatement (pVm' out pN' out pazValue' out pazColName);  	// For the first row' get the column information  	if (first) {  		first = false;  		if (version == 3) {  			// A decltype might be null if the type is unknown to sqlite.  			decltypes = new string[pN];  			declmode = new int[pN];  			// 1 == integer' 2 == datetime  			for (int i = 0; i < pN; i++) {  				IntPtr decl = Sqlite.sqlite3_column_decltype16 (pVm' i);  				if (decl != IntPtr.Zero) {  					decltypes [i] = Marshal.PtrToStringUni (decl).ToLower (System.Globalization.CultureInfo.InvariantCulture);  					if (decltypes [i] == "int" || decltypes [i] == "integer")  						declmode [i] = 1;  					else if (decltypes [i] == "date" || decltypes [i] == "datetime")  						declmode [i] = 2;  				}  			}  		}  		columns = new string[pN];  		for (int i = 0; i < pN; i++) {  			string colName;  			if (version == 2) {  				IntPtr fieldPtr = Marshal.ReadIntPtr (pazColName' i * IntPtr.Size);  				colName = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  			}  			else {  				colName = Marshal.PtrToStringUni (Sqlite.sqlite3_column_name16 (pVm' i));  			}  			columns [i] = colName;  			column_names_sens [colName] = i;  			column_names_insens [colName] = i;  		}  	}  	if (!hasdata)  		break;  	object[] data_row = new object[pN];  	for (int i = 0; i < pN; i++) {  		if (version == 2) {  			IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i * IntPtr.Size);  			data_row [i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  		}  		else {  			switch (Sqlite.sqlite3_column_type (pVm' i)) {  			case 1:  				long val = Sqlite.sqlite3_column_int64 (pVm' i);  				// If the column was declared as an 'int' or 'integer'' let's play  				// nice and return an int (version 3 only).  				if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  					data_row [i] = (int)val;  				// Or if it was declared a date or datetime' do the reverse of what we  				// do for DateTime parameters.  				else if (declmode [i] == 2)  					data_row [i] = DateTime.FromFileTime (val);  				else  					data_row [i] = val;  				break;  			case 2:  				data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  				break;  			case 3:  				data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  				// If the column was declared as a 'date' or 'datetime'' let's play  				// nice and return a DateTime (version 3 only).  				if (declmode [i] == 2)  					data_row [i] = DateTime.Parse ((string)data_row [i]);  				break;  			case 4:  				int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  				IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  				byte[] blob = new byte[blobbytes];  				Marshal.Copy (blobptr' blob' 0' blobbytes);  				data_row [i] = blob;  				break;  			case 5:  				data_row [i] = null;  				break;  			default:  				throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  			}  		}  	}  	rows.Add (data_row);  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (first) {  	first = false;  	if (version == 3) {  		// A decltype might be null if the type is unknown to sqlite.  		decltypes = new string[pN];  		declmode = new int[pN];  		// 1 == integer' 2 == datetime  		for (int i = 0; i < pN; i++) {  			IntPtr decl = Sqlite.sqlite3_column_decltype16 (pVm' i);  			if (decl != IntPtr.Zero) {  				decltypes [i] = Marshal.PtrToStringUni (decl).ToLower (System.Globalization.CultureInfo.InvariantCulture);  				if (decltypes [i] == "int" || decltypes [i] == "integer")  					declmode [i] = 1;  				else if (decltypes [i] == "date" || decltypes [i] == "datetime")  					declmode [i] = 2;  			}  		}  	}  	columns = new string[pN];  	for (int i = 0; i < pN; i++) {  		string colName;  		if (version == 2) {  			IntPtr fieldPtr = Marshal.ReadIntPtr (pazColName' i * IntPtr.Size);  			colName = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  		}  		else {  			colName = Marshal.PtrToStringUni (Sqlite.sqlite3_column_name16 (pVm' i));  		}  		columns [i] = colName;  		column_names_sens [colName] = i;  		column_names_insens [colName] = i;  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (first) {  	first = false;  	if (version == 3) {  		// A decltype might be null if the type is unknown to sqlite.  		decltypes = new string[pN];  		declmode = new int[pN];  		// 1 == integer' 2 == datetime  		for (int i = 0; i < pN; i++) {  			IntPtr decl = Sqlite.sqlite3_column_decltype16 (pVm' i);  			if (decl != IntPtr.Zero) {  				decltypes [i] = Marshal.PtrToStringUni (decl).ToLower (System.Globalization.CultureInfo.InvariantCulture);  				if (decltypes [i] == "int" || decltypes [i] == "integer")  					declmode [i] = 1;  				else if (decltypes [i] == "date" || decltypes [i] == "datetime")  					declmode [i] = 2;  			}  		}  	}  	columns = new string[pN];  	for (int i = 0; i < pN; i++) {  		string colName;  		if (version == 2) {  			IntPtr fieldPtr = Marshal.ReadIntPtr (pazColName' i * IntPtr.Size);  			colName = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  		}  		else {  			colName = Marshal.PtrToStringUni (Sqlite.sqlite3_column_name16 (pVm' i));  		}  		columns [i] = colName;  		column_names_sens [colName] = i;  		column_names_insens [colName] = i;  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (first) {  	first = false;  	if (version == 3) {  		// A decltype might be null if the type is unknown to sqlite.  		decltypes = new string[pN];  		declmode = new int[pN];  		// 1 == integer' 2 == datetime  		for (int i = 0; i < pN; i++) {  			IntPtr decl = Sqlite.sqlite3_column_decltype16 (pVm' i);  			if (decl != IntPtr.Zero) {  				decltypes [i] = Marshal.PtrToStringUni (decl).ToLower (System.Globalization.CultureInfo.InvariantCulture);  				if (decltypes [i] == "int" || decltypes [i] == "integer")  					declmode [i] = 1;  				else if (decltypes [i] == "date" || decltypes [i] == "datetime")  					declmode [i] = 2;  			}  		}  	}  	columns = new string[pN];  	for (int i = 0; i < pN; i++) {  		string colName;  		if (version == 2) {  			IntPtr fieldPtr = Marshal.ReadIntPtr (pazColName' i * IntPtr.Size);  			colName = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  		}  		else {  			colName = Marshal.PtrToStringUni (Sqlite.sqlite3_column_name16 (pVm' i));  		}  		columns [i] = colName;  		column_names_sens [colName] = i;  		column_names_insens [colName] = i;  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (version == 3) {  	// A decltype might be null if the type is unknown to sqlite.  	decltypes = new string[pN];  	declmode = new int[pN];  	// 1 == integer' 2 == datetime  	for (int i = 0; i < pN; i++) {  		IntPtr decl = Sqlite.sqlite3_column_decltype16 (pVm' i);  		if (decl != IntPtr.Zero) {  			decltypes [i] = Marshal.PtrToStringUni (decl).ToLower (System.Globalization.CultureInfo.InvariantCulture);  			if (decltypes [i] == "int" || decltypes [i] == "integer")  				declmode [i] = 1;  			else if (decltypes [i] == "date" || decltypes [i] == "datetime")  				declmode [i] = 2;  		}  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (version == 3) {  	// A decltype might be null if the type is unknown to sqlite.  	decltypes = new string[pN];  	declmode = new int[pN];  	// 1 == integer' 2 == datetime  	for (int i = 0; i < pN; i++) {  		IntPtr decl = Sqlite.sqlite3_column_decltype16 (pVm' i);  		if (decl != IntPtr.Zero) {  			decltypes [i] = Marshal.PtrToStringUni (decl).ToLower (System.Globalization.CultureInfo.InvariantCulture);  			if (decltypes [i] == "int" || decltypes [i] == "integer")  				declmode [i] = 1;  			else if (decltypes [i] == "date" || decltypes [i] == "datetime")  				declmode [i] = 2;  		}  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: for (int i = 0; i < pN; i++) {  	IntPtr decl = Sqlite.sqlite3_column_decltype16 (pVm' i);  	if (decl != IntPtr.Zero) {  		decltypes [i] = Marshal.PtrToStringUni (decl).ToLower (System.Globalization.CultureInfo.InvariantCulture);  		if (decltypes [i] == "int" || decltypes [i] == "integer")  			declmode [i] = 1;  		else if (decltypes [i] == "date" || decltypes [i] == "datetime")  			declmode [i] = 2;  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (decl != IntPtr.Zero) {  	decltypes [i] = Marshal.PtrToStringUni (decl).ToLower (System.Globalization.CultureInfo.InvariantCulture);  	if (decltypes [i] == "int" || decltypes [i] == "integer")  		declmode [i] = 1;  	else if (decltypes [i] == "date" || decltypes [i] == "datetime")  		declmode [i] = 2;  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (decltypes [i] == "int" || decltypes [i] == "integer")  	declmode [i] = 1;  else if (decltypes [i] == "date" || decltypes [i] == "datetime")  	declmode [i] = 2;  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (decltypes [i] == "date" || decltypes [i] == "datetime")  	declmode [i] = 2;  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: declmode [i] = 2;  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: for (int i = 0; i < pN; i++) {  	string colName;  	if (version == 2) {  		IntPtr fieldPtr = Marshal.ReadIntPtr (pazColName' i * IntPtr.Size);  		colName = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  	}  	else {  		colName = Marshal.PtrToStringUni (Sqlite.sqlite3_column_name16 (pVm' i));  	}  	columns [i] = colName;  	column_names_sens [colName] = i;  	column_names_insens [colName] = i;  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (version == 2) {  	IntPtr fieldPtr = Marshal.ReadIntPtr (pazColName' i * IntPtr.Size);  	colName = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  }  else {  	colName = Marshal.PtrToStringUni (Sqlite.sqlite3_column_name16 (pVm' i));  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: for (int i = 0; i < pN; i++) {  	if (version == 2) {  		IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i * IntPtr.Size);  		data_row [i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  	}  	else {  		switch (Sqlite.sqlite3_column_type (pVm' i)) {  		case 1:  			long val = Sqlite.sqlite3_column_int64 (pVm' i);  			// If the column was declared as an 'int' or 'integer'' let's play  			// nice and return an int (version 3 only).  			if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  				data_row [i] = (int)val;  			// Or if it was declared a date or datetime' do the reverse of what we  			// do for DateTime parameters.  			else if (declmode [i] == 2)  				data_row [i] = DateTime.FromFileTime (val);  			else  				data_row [i] = val;  			break;  		case 2:  			data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  			break;  		case 3:  			data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  			// If the column was declared as a 'date' or 'datetime'' let's play  			// nice and return a DateTime (version 3 only).  			if (declmode [i] == 2)  				data_row [i] = DateTime.Parse ((string)data_row [i]);  			break;  		case 4:  			int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  			IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  			byte[] blob = new byte[blobbytes];  			Marshal.Copy (blobptr' blob' 0' blobbytes);  			data_row [i] = blob;  			break;  		case 5:  			data_row [i] = null;  			break;  		default:  			throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  		}  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: for (int i = 0; i < pN; i++) {  	if (version == 2) {  		IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i * IntPtr.Size);  		data_row [i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  	}  	else {  		switch (Sqlite.sqlite3_column_type (pVm' i)) {  		case 1:  			long val = Sqlite.sqlite3_column_int64 (pVm' i);  			// If the column was declared as an 'int' or 'integer'' let's play  			// nice and return an int (version 3 only).  			if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  				data_row [i] = (int)val;  			// Or if it was declared a date or datetime' do the reverse of what we  			// do for DateTime parameters.  			else if (declmode [i] == 2)  				data_row [i] = DateTime.FromFileTime (val);  			else  				data_row [i] = val;  			break;  		case 2:  			data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  			break;  		case 3:  			data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  			// If the column was declared as a 'date' or 'datetime'' let's play  			// nice and return a DateTime (version 3 only).  			if (declmode [i] == 2)  				data_row [i] = DateTime.Parse ((string)data_row [i]);  			break;  		case 4:  			int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  			IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  			byte[] blob = new byte[blobbytes];  			Marshal.Copy (blobptr' blob' 0' blobbytes);  			data_row [i] = blob;  			break;  		case 5:  			data_row [i] = null;  			break;  		default:  			throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  		}  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: for (int i = 0; i < pN; i++) {  	if (version == 2) {  		IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i * IntPtr.Size);  		data_row [i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  	}  	else {  		switch (Sqlite.sqlite3_column_type (pVm' i)) {  		case 1:  			long val = Sqlite.sqlite3_column_int64 (pVm' i);  			// If the column was declared as an 'int' or 'integer'' let's play  			// nice and return an int (version 3 only).  			if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  				data_row [i] = (int)val;  			// Or if it was declared a date or datetime' do the reverse of what we  			// do for DateTime parameters.  			else if (declmode [i] == 2)  				data_row [i] = DateTime.FromFileTime (val);  			else  				data_row [i] = val;  			break;  		case 2:  			data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  			break;  		case 3:  			data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  			// If the column was declared as a 'date' or 'datetime'' let's play  			// nice and return a DateTime (version 3 only).  			if (declmode [i] == 2)  				data_row [i] = DateTime.Parse ((string)data_row [i]);  			break;  		case 4:  			int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  			IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  			byte[] blob = new byte[blobbytes];  			Marshal.Copy (blobptr' blob' 0' blobbytes);  			data_row [i] = blob;  			break;  		case 5:  			data_row [i] = null;  			break;  		default:  			throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  		}  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: for (int i = 0; i < pN; i++) {  	if (version == 2) {  		IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i * IntPtr.Size);  		data_row [i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  	}  	else {  		switch (Sqlite.sqlite3_column_type (pVm' i)) {  		case 1:  			long val = Sqlite.sqlite3_column_int64 (pVm' i);  			// If the column was declared as an 'int' or 'integer'' let's play  			// nice and return an int (version 3 only).  			if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  				data_row [i] = (int)val;  			// Or if it was declared a date or datetime' do the reverse of what we  			// do for DateTime parameters.  			else if (declmode [i] == 2)  				data_row [i] = DateTime.FromFileTime (val);  			else  				data_row [i] = val;  			break;  		case 2:  			data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  			break;  		case 3:  			data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  			// If the column was declared as a 'date' or 'datetime'' let's play  			// nice and return a DateTime (version 3 only).  			if (declmode [i] == 2)  				data_row [i] = DateTime.Parse ((string)data_row [i]);  			break;  		case 4:  			int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  			IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  			byte[] blob = new byte[blobbytes];  			Marshal.Copy (blobptr' blob' 0' blobbytes);  			data_row [i] = blob;  			break;  		case 5:  			data_row [i] = null;  			break;  		default:  			throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  		}  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: for (int i = 0; i < pN; i++) {  	if (version == 2) {  		IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i * IntPtr.Size);  		data_row [i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  	}  	else {  		switch (Sqlite.sqlite3_column_type (pVm' i)) {  		case 1:  			long val = Sqlite.sqlite3_column_int64 (pVm' i);  			// If the column was declared as an 'int' or 'integer'' let's play  			// nice and return an int (version 3 only).  			if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  				data_row [i] = (int)val;  			// Or if it was declared a date or datetime' do the reverse of what we  			// do for DateTime parameters.  			else if (declmode [i] == 2)  				data_row [i] = DateTime.FromFileTime (val);  			else  				data_row [i] = val;  			break;  		case 2:  			data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  			break;  		case 3:  			data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  			// If the column was declared as a 'date' or 'datetime'' let's play  			// nice and return a DateTime (version 3 only).  			if (declmode [i] == 2)  				data_row [i] = DateTime.Parse ((string)data_row [i]);  			break;  		case 4:  			int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  			IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  			byte[] blob = new byte[blobbytes];  			Marshal.Copy (blobptr' blob' 0' blobbytes);  			data_row [i] = blob;  			break;  		case 5:  			data_row [i] = null;  			break;  		default:  			throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  		}  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: for (int i = 0; i < pN; i++) {  	if (version == 2) {  		IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i * IntPtr.Size);  		data_row [i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  	}  	else {  		switch (Sqlite.sqlite3_column_type (pVm' i)) {  		case 1:  			long val = Sqlite.sqlite3_column_int64 (pVm' i);  			// If the column was declared as an 'int' or 'integer'' let's play  			// nice and return an int (version 3 only).  			if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  				data_row [i] = (int)val;  			// Or if it was declared a date or datetime' do the reverse of what we  			// do for DateTime parameters.  			else if (declmode [i] == 2)  				data_row [i] = DateTime.FromFileTime (val);  			else  				data_row [i] = val;  			break;  		case 2:  			data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  			break;  		case 3:  			data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  			// If the column was declared as a 'date' or 'datetime'' let's play  			// nice and return a DateTime (version 3 only).  			if (declmode [i] == 2)  				data_row [i] = DateTime.Parse ((string)data_row [i]);  			break;  		case 4:  			int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  			IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  			byte[] blob = new byte[blobbytes];  			Marshal.Copy (blobptr' blob' 0' blobbytes);  			data_row [i] = blob;  			break;  		case 5:  			data_row [i] = null;  			break;  		default:  			throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  		}  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: for (int i = 0; i < pN; i++) {  	if (version == 2) {  		IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i * IntPtr.Size);  		data_row [i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  	}  	else {  		switch (Sqlite.sqlite3_column_type (pVm' i)) {  		case 1:  			long val = Sqlite.sqlite3_column_int64 (pVm' i);  			// If the column was declared as an 'int' or 'integer'' let's play  			// nice and return an int (version 3 only).  			if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  				data_row [i] = (int)val;  			// Or if it was declared a date or datetime' do the reverse of what we  			// do for DateTime parameters.  			else if (declmode [i] == 2)  				data_row [i] = DateTime.FromFileTime (val);  			else  				data_row [i] = val;  			break;  		case 2:  			data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  			break;  		case 3:  			data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  			// If the column was declared as a 'date' or 'datetime'' let's play  			// nice and return a DateTime (version 3 only).  			if (declmode [i] == 2)  				data_row [i] = DateTime.Parse ((string)data_row [i]);  			break;  		case 4:  			int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  			IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  			byte[] blob = new byte[blobbytes];  			Marshal.Copy (blobptr' blob' 0' blobbytes);  			data_row [i] = blob;  			break;  		case 5:  			data_row [i] = null;  			break;  		default:  			throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  		}  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (version == 2) {  	IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i * IntPtr.Size);  	data_row [i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  }  else {  	switch (Sqlite.sqlite3_column_type (pVm' i)) {  	case 1:  		long val = Sqlite.sqlite3_column_int64 (pVm' i);  		// If the column was declared as an 'int' or 'integer'' let's play  		// nice and return an int (version 3 only).  		if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  			data_row [i] = (int)val;  		// Or if it was declared a date or datetime' do the reverse of what we  		// do for DateTime parameters.  		else if (declmode [i] == 2)  			data_row [i] = DateTime.FromFileTime (val);  		else  			data_row [i] = val;  		break;  	case 2:  		data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  		break;  	case 3:  		data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  		// If the column was declared as a 'date' or 'datetime'' let's play  		// nice and return a DateTime (version 3 only).  		if (declmode [i] == 2)  			data_row [i] = DateTime.Parse ((string)data_row [i]);  		break;  	case 4:  		int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  		IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  		byte[] blob = new byte[blobbytes];  		Marshal.Copy (blobptr' blob' 0' blobbytes);  		data_row [i] = blob;  		break;  	case 5:  		data_row [i] = null;  		break;  	default:  		throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (version == 2) {  	IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i * IntPtr.Size);  	data_row [i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  }  else {  	switch (Sqlite.sqlite3_column_type (pVm' i)) {  	case 1:  		long val = Sqlite.sqlite3_column_int64 (pVm' i);  		// If the column was declared as an 'int' or 'integer'' let's play  		// nice and return an int (version 3 only).  		if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  			data_row [i] = (int)val;  		// Or if it was declared a date or datetime' do the reverse of what we  		// do for DateTime parameters.  		else if (declmode [i] == 2)  			data_row [i] = DateTime.FromFileTime (val);  		else  			data_row [i] = val;  		break;  	case 2:  		data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  		break;  	case 3:  		data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  		// If the column was declared as a 'date' or 'datetime'' let's play  		// nice and return a DateTime (version 3 only).  		if (declmode [i] == 2)  			data_row [i] = DateTime.Parse ((string)data_row [i]);  		break;  	case 4:  		int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  		IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  		byte[] blob = new byte[blobbytes];  		Marshal.Copy (blobptr' blob' 0' blobbytes);  		data_row [i] = blob;  		break;  	case 5:  		data_row [i] = null;  		break;  	default:  		throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (version == 2) {  	IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i * IntPtr.Size);  	data_row [i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  }  else {  	switch (Sqlite.sqlite3_column_type (pVm' i)) {  	case 1:  		long val = Sqlite.sqlite3_column_int64 (pVm' i);  		// If the column was declared as an 'int' or 'integer'' let's play  		// nice and return an int (version 3 only).  		if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  			data_row [i] = (int)val;  		// Or if it was declared a date or datetime' do the reverse of what we  		// do for DateTime parameters.  		else if (declmode [i] == 2)  			data_row [i] = DateTime.FromFileTime (val);  		else  			data_row [i] = val;  		break;  	case 2:  		data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  		break;  	case 3:  		data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  		// If the column was declared as a 'date' or 'datetime'' let's play  		// nice and return a DateTime (version 3 only).  		if (declmode [i] == 2)  			data_row [i] = DateTime.Parse ((string)data_row [i]);  		break;  	case 4:  		int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  		IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  		byte[] blob = new byte[blobbytes];  		Marshal.Copy (blobptr' blob' 0' blobbytes);  		data_row [i] = blob;  		break;  	case 5:  		data_row [i] = null;  		break;  	default:  		throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (version == 2) {  	IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i * IntPtr.Size);  	data_row [i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  }  else {  	switch (Sqlite.sqlite3_column_type (pVm' i)) {  	case 1:  		long val = Sqlite.sqlite3_column_int64 (pVm' i);  		// If the column was declared as an 'int' or 'integer'' let's play  		// nice and return an int (version 3 only).  		if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  			data_row [i] = (int)val;  		// Or if it was declared a date or datetime' do the reverse of what we  		// do for DateTime parameters.  		else if (declmode [i] == 2)  			data_row [i] = DateTime.FromFileTime (val);  		else  			data_row [i] = val;  		break;  	case 2:  		data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  		break;  	case 3:  		data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  		// If the column was declared as a 'date' or 'datetime'' let's play  		// nice and return a DateTime (version 3 only).  		if (declmode [i] == 2)  			data_row [i] = DateTime.Parse ((string)data_row [i]);  		break;  	case 4:  		int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  		IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  		byte[] blob = new byte[blobbytes];  		Marshal.Copy (blobptr' blob' 0' blobbytes);  		data_row [i] = blob;  		break;  	case 5:  		data_row [i] = null;  		break;  	default:  		throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (version == 2) {  	IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i * IntPtr.Size);  	data_row [i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  }  else {  	switch (Sqlite.sqlite3_column_type (pVm' i)) {  	case 1:  		long val = Sqlite.sqlite3_column_int64 (pVm' i);  		// If the column was declared as an 'int' or 'integer'' let's play  		// nice and return an int (version 3 only).  		if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  			data_row [i] = (int)val;  		// Or if it was declared a date or datetime' do the reverse of what we  		// do for DateTime parameters.  		else if (declmode [i] == 2)  			data_row [i] = DateTime.FromFileTime (val);  		else  			data_row [i] = val;  		break;  	case 2:  		data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  		break;  	case 3:  		data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  		// If the column was declared as a 'date' or 'datetime'' let's play  		// nice and return a DateTime (version 3 only).  		if (declmode [i] == 2)  			data_row [i] = DateTime.Parse ((string)data_row [i]);  		break;  	case 4:  		int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  		IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  		byte[] blob = new byte[blobbytes];  		Marshal.Copy (blobptr' blob' 0' blobbytes);  		data_row [i] = blob;  		break;  	case 5:  		data_row [i] = null;  		break;  	default:  		throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (version == 2) {  	IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i * IntPtr.Size);  	data_row [i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  }  else {  	switch (Sqlite.sqlite3_column_type (pVm' i)) {  	case 1:  		long val = Sqlite.sqlite3_column_int64 (pVm' i);  		// If the column was declared as an 'int' or 'integer'' let's play  		// nice and return an int (version 3 only).  		if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  			data_row [i] = (int)val;  		// Or if it was declared a date or datetime' do the reverse of what we  		// do for DateTime parameters.  		else if (declmode [i] == 2)  			data_row [i] = DateTime.FromFileTime (val);  		else  			data_row [i] = val;  		break;  	case 2:  		data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  		break;  	case 3:  		data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  		// If the column was declared as a 'date' or 'datetime'' let's play  		// nice and return a DateTime (version 3 only).  		if (declmode [i] == 2)  			data_row [i] = DateTime.Parse ((string)data_row [i]);  		break;  	case 4:  		int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  		IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  		byte[] blob = new byte[blobbytes];  		Marshal.Copy (blobptr' blob' 0' blobbytes);  		data_row [i] = blob;  		break;  	case 5:  		data_row [i] = null;  		break;  	default:  		throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (version == 2) {  	IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i * IntPtr.Size);  	data_row [i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  }  else {  	switch (Sqlite.sqlite3_column_type (pVm' i)) {  	case 1:  		long val = Sqlite.sqlite3_column_int64 (pVm' i);  		// If the column was declared as an 'int' or 'integer'' let's play  		// nice and return an int (version 3 only).  		if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  			data_row [i] = (int)val;  		// Or if it was declared a date or datetime' do the reverse of what we  		// do for DateTime parameters.  		else if (declmode [i] == 2)  			data_row [i] = DateTime.FromFileTime (val);  		else  			data_row [i] = val;  		break;  	case 2:  		data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  		break;  	case 3:  		data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  		// If the column was declared as a 'date' or 'datetime'' let's play  		// nice and return a DateTime (version 3 only).  		if (declmode [i] == 2)  			data_row [i] = DateTime.Parse ((string)data_row [i]);  		break;  	case 4:  		int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  		IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  		byte[] blob = new byte[blobbytes];  		Marshal.Copy (blobptr' blob' 0' blobbytes);  		data_row [i] = blob;  		break;  	case 5:  		data_row [i] = null;  		break;  	default:  		throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  	}  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: switch (Sqlite.sqlite3_column_type (pVm' i)) {  case 1:  	long val = Sqlite.sqlite3_column_int64 (pVm' i);  	// If the column was declared as an 'int' or 'integer'' let's play  	// nice and return an int (version 3 only).  	if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  		data_row [i] = (int)val;  	// Or if it was declared a date or datetime' do the reverse of what we  	// do for DateTime parameters.  	else if (declmode [i] == 2)  		data_row [i] = DateTime.FromFileTime (val);  	else  		data_row [i] = val;  	break;  case 2:  	data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  	break;  case 3:  	data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  	// If the column was declared as a 'date' or 'datetime'' let's play  	// nice and return a DateTime (version 3 only).  	if (declmode [i] == 2)  		data_row [i] = DateTime.Parse ((string)data_row [i]);  	break;  case 4:  	int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  	IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  	byte[] blob = new byte[blobbytes];  	Marshal.Copy (blobptr' blob' 0' blobbytes);  	data_row [i] = blob;  	break;  case 5:  	data_row [i] = null;  	break;  default:  	throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: switch (Sqlite.sqlite3_column_type (pVm' i)) {  case 1:  	long val = Sqlite.sqlite3_column_int64 (pVm' i);  	// If the column was declared as an 'int' or 'integer'' let's play  	// nice and return an int (version 3 only).  	if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  		data_row [i] = (int)val;  	// Or if it was declared a date or datetime' do the reverse of what we  	// do for DateTime parameters.  	else if (declmode [i] == 2)  		data_row [i] = DateTime.FromFileTime (val);  	else  		data_row [i] = val;  	break;  case 2:  	data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  	break;  case 3:  	data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  	// If the column was declared as a 'date' or 'datetime'' let's play  	// nice and return a DateTime (version 3 only).  	if (declmode [i] == 2)  		data_row [i] = DateTime.Parse ((string)data_row [i]);  	break;  case 4:  	int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  	IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  	byte[] blob = new byte[blobbytes];  	Marshal.Copy (blobptr' blob' 0' blobbytes);  	data_row [i] = blob;  	break;  case 5:  	data_row [i] = null;  	break;  default:  	throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: switch (Sqlite.sqlite3_column_type (pVm' i)) {  case 1:  	long val = Sqlite.sqlite3_column_int64 (pVm' i);  	// If the column was declared as an 'int' or 'integer'' let's play  	// nice and return an int (version 3 only).  	if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  		data_row [i] = (int)val;  	// Or if it was declared a date or datetime' do the reverse of what we  	// do for DateTime parameters.  	else if (declmode [i] == 2)  		data_row [i] = DateTime.FromFileTime (val);  	else  		data_row [i] = val;  	break;  case 2:  	data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  	break;  case 3:  	data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  	// If the column was declared as a 'date' or 'datetime'' let's play  	// nice and return a DateTime (version 3 only).  	if (declmode [i] == 2)  		data_row [i] = DateTime.Parse ((string)data_row [i]);  	break;  case 4:  	int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  	IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  	byte[] blob = new byte[blobbytes];  	Marshal.Copy (blobptr' blob' 0' blobbytes);  	data_row [i] = blob;  	break;  case 5:  	data_row [i] = null;  	break;  default:  	throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: switch (Sqlite.sqlite3_column_type (pVm' i)) {  case 1:  	long val = Sqlite.sqlite3_column_int64 (pVm' i);  	// If the column was declared as an 'int' or 'integer'' let's play  	// nice and return an int (version 3 only).  	if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  		data_row [i] = (int)val;  	// Or if it was declared a date or datetime' do the reverse of what we  	// do for DateTime parameters.  	else if (declmode [i] == 2)  		data_row [i] = DateTime.FromFileTime (val);  	else  		data_row [i] = val;  	break;  case 2:  	data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  	break;  case 3:  	data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  	// If the column was declared as a 'date' or 'datetime'' let's play  	// nice and return a DateTime (version 3 only).  	if (declmode [i] == 2)  		data_row [i] = DateTime.Parse ((string)data_row [i]);  	break;  case 4:  	int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  	IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  	byte[] blob = new byte[blobbytes];  	Marshal.Copy (blobptr' blob' 0' blobbytes);  	data_row [i] = blob;  	break;  case 5:  	data_row [i] = null;  	break;  default:  	throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: switch (Sqlite.sqlite3_column_type (pVm' i)) {  case 1:  	long val = Sqlite.sqlite3_column_int64 (pVm' i);  	// If the column was declared as an 'int' or 'integer'' let's play  	// nice and return an int (version 3 only).  	if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  		data_row [i] = (int)val;  	// Or if it was declared a date or datetime' do the reverse of what we  	// do for DateTime parameters.  	else if (declmode [i] == 2)  		data_row [i] = DateTime.FromFileTime (val);  	else  		data_row [i] = val;  	break;  case 2:  	data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  	break;  case 3:  	data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  	// If the column was declared as a 'date' or 'datetime'' let's play  	// nice and return a DateTime (version 3 only).  	if (declmode [i] == 2)  		data_row [i] = DateTime.Parse ((string)data_row [i]);  	break;  case 4:  	int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  	IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  	byte[] blob = new byte[blobbytes];  	Marshal.Copy (blobptr' blob' 0' blobbytes);  	data_row [i] = blob;  	break;  case 5:  	data_row [i] = null;  	break;  default:  	throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: switch (Sqlite.sqlite3_column_type (pVm' i)) {  case 1:  	long val = Sqlite.sqlite3_column_int64 (pVm' i);  	// If the column was declared as an 'int' or 'integer'' let's play  	// nice and return an int (version 3 only).  	if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  		data_row [i] = (int)val;  	// Or if it was declared a date or datetime' do the reverse of what we  	// do for DateTime parameters.  	else if (declmode [i] == 2)  		data_row [i] = DateTime.FromFileTime (val);  	else  		data_row [i] = val;  	break;  case 2:  	data_row [i] = Sqlite.sqlite3_column_double (pVm' i);  	break;  case 3:  	data_row [i] = Marshal.PtrToStringUni (Sqlite.sqlite3_column_text16 (pVm' i));  	// If the column was declared as a 'date' or 'datetime'' let's play  	// nice and return a DateTime (version 3 only).  	if (declmode [i] == 2)  		data_row [i] = DateTime.Parse ((string)data_row [i]);  	break;  case 4:  	int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm' i);  	IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm' i);  	byte[] blob = new byte[blobbytes];  	Marshal.Copy (blobptr' blob' 0' blobbytes);  	data_row [i] = blob;  	break;  case 5:  	data_row [i] = null;  	break;  default:  	throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");  }  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  	data_row [i] = (int)val;  // Or if it was declared a date or datetime' do the reverse of what we  // do for DateTime parameters.  else if (declmode [i] == 2)  	data_row [i] = DateTime.FromFileTime (val);  else  	data_row [i] = val;  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (declmode [i] == 2)  	data_row [i] = DateTime.FromFileTime (val);  else  	data_row [i] = val;  
Magic Number,Mono.Data.SqliteClient,SqliteDataReader,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (declmode [i] == 2)  	data_row [i] = DateTime.Parse ((string)data_row [i]);  
Magic Number,ML.Net,HttpHelper,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpHelper.cs,GetHtml,The following statement contains a magic number: try {  	#region 得到请求的response  	using (response = (HttpWebResponse)request.GetResponse ()) {  		result.StatusCode = response.StatusCode;  		result.StatusDescription = response.StatusDescription;  		result.Header = response.Headers;  		if (response.Cookies != null)  			result.CookieCollection = response.Cookies;  		if (response.Headers ["set-cookie"] != null)  			result.Cookie = response.Headers ["set-cookie"];  		MemoryStream _stream = new MemoryStream ();  		//GZIIP处理  		if (response.ContentEncoding != null && response.ContentEncoding.Equals ("gzip"' StringComparison.InvariantCultureIgnoreCase)) {  			//开始读取流并设置编码方式  			//new GZipStream(response.GetResponseStream()' CompressionMode.Decompress).CopyTo(_stream' 10240);  			//.net4.0以下写法  			_stream = GetMemoryStream (new GZipStream (response.GetResponseStream ()' CompressionMode.Decompress));  		}  		else {  			//开始读取流并设置编码方式  			//response.GetResponseStream().CopyTo(_stream' 10240);  			//.net4.0以下写法  			_stream = GetMemoryStream (response.GetResponseStream ());  		}  		//获取Byte  		byte[] RawResponse = _stream.ToArray ();  		_stream.Close ();  		//是否返回Byte类型数据  		if (objhttpitem.ResultType == ResultType.Byte)  			result.ResultByte = RawResponse;  		//从这里开始我们要无视编码了  		if (encoding == null) {  			Match meta = Regex.Match (Encoding.Default.GetString (RawResponse)' "<meta([^<]*)charset=([^<]*)[\"']"' RegexOptions.IgnoreCase);  			string charter = (meta.Groups.Count > 1) ? meta.Groups [2].Value.ToLower () : string.Empty;  			if (charter.Length > 2)  				encoding = Encoding.GetEncoding (charter.Trim ().Replace ("\""' "").Replace ("'"' "").Replace (";"' "").Replace ("iso-8859-1"' "gbk"));  			else {  				if (string.IsNullOrEmpty (response.CharacterSet))  					encoding = Encoding.UTF8;  				else  					encoding = Encoding.GetEncoding (response.CharacterSet);  			}  		}  		//得到返回的HTML  		result.Html = encoding.GetString (RawResponse);  	}  	#endregion  }  catch (WebException ex) {  	//这里是在发生异常时返回的错误信息  	response = (HttpWebResponse)ex.Response;  	result.Html = ex.Message;  	if (response != null) {  		result.StatusCode = response.StatusCode;  		result.StatusDescription = response.StatusDescription;  	}  }  catch (Exception ex) {  	result.Html = ex.Message;  }  
Magic Number,ML.Net,HttpHelper,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpHelper.cs,GetHtml,The following statement contains a magic number: try {  	#region 得到请求的response  	using (response = (HttpWebResponse)request.GetResponse ()) {  		result.StatusCode = response.StatusCode;  		result.StatusDescription = response.StatusDescription;  		result.Header = response.Headers;  		if (response.Cookies != null)  			result.CookieCollection = response.Cookies;  		if (response.Headers ["set-cookie"] != null)  			result.Cookie = response.Headers ["set-cookie"];  		MemoryStream _stream = new MemoryStream ();  		//GZIIP处理  		if (response.ContentEncoding != null && response.ContentEncoding.Equals ("gzip"' StringComparison.InvariantCultureIgnoreCase)) {  			//开始读取流并设置编码方式  			//new GZipStream(response.GetResponseStream()' CompressionMode.Decompress).CopyTo(_stream' 10240);  			//.net4.0以下写法  			_stream = GetMemoryStream (new GZipStream (response.GetResponseStream ()' CompressionMode.Decompress));  		}  		else {  			//开始读取流并设置编码方式  			//response.GetResponseStream().CopyTo(_stream' 10240);  			//.net4.0以下写法  			_stream = GetMemoryStream (response.GetResponseStream ());  		}  		//获取Byte  		byte[] RawResponse = _stream.ToArray ();  		_stream.Close ();  		//是否返回Byte类型数据  		if (objhttpitem.ResultType == ResultType.Byte)  			result.ResultByte = RawResponse;  		//从这里开始我们要无视编码了  		if (encoding == null) {  			Match meta = Regex.Match (Encoding.Default.GetString (RawResponse)' "<meta([^<]*)charset=([^<]*)[\"']"' RegexOptions.IgnoreCase);  			string charter = (meta.Groups.Count > 1) ? meta.Groups [2].Value.ToLower () : string.Empty;  			if (charter.Length > 2)  				encoding = Encoding.GetEncoding (charter.Trim ().Replace ("\""' "").Replace ("'"' "").Replace (";"' "").Replace ("iso-8859-1"' "gbk"));  			else {  				if (string.IsNullOrEmpty (response.CharacterSet))  					encoding = Encoding.UTF8;  				else  					encoding = Encoding.GetEncoding (response.CharacterSet);  			}  		}  		//得到返回的HTML  		result.Html = encoding.GetString (RawResponse);  	}  	#endregion  }  catch (WebException ex) {  	//这里是在发生异常时返回的错误信息  	response = (HttpWebResponse)ex.Response;  	result.Html = ex.Message;  	if (response != null) {  		result.StatusCode = response.StatusCode;  		result.StatusDescription = response.StatusDescription;  	}  }  catch (Exception ex) {  	result.Html = ex.Message;  }  
Magic Number,ML.Net,HttpHelper,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpHelper.cs,GetHtml,The following statement contains a magic number: using (response = (HttpWebResponse)request.GetResponse ()) {  	result.StatusCode = response.StatusCode;  	result.StatusDescription = response.StatusDescription;  	result.Header = response.Headers;  	if (response.Cookies != null)  		result.CookieCollection = response.Cookies;  	if (response.Headers ["set-cookie"] != null)  		result.Cookie = response.Headers ["set-cookie"];  	MemoryStream _stream = new MemoryStream ();  	//GZIIP处理  	if (response.ContentEncoding != null && response.ContentEncoding.Equals ("gzip"' StringComparison.InvariantCultureIgnoreCase)) {  		//开始读取流并设置编码方式  		//new GZipStream(response.GetResponseStream()' CompressionMode.Decompress).CopyTo(_stream' 10240);  		//.net4.0以下写法  		_stream = GetMemoryStream (new GZipStream (response.GetResponseStream ()' CompressionMode.Decompress));  	}  	else {  		//开始读取流并设置编码方式  		//response.GetResponseStream().CopyTo(_stream' 10240);  		//.net4.0以下写法  		_stream = GetMemoryStream (response.GetResponseStream ());  	}  	//获取Byte  	byte[] RawResponse = _stream.ToArray ();  	_stream.Close ();  	//是否返回Byte类型数据  	if (objhttpitem.ResultType == ResultType.Byte)  		result.ResultByte = RawResponse;  	//从这里开始我们要无视编码了  	if (encoding == null) {  		Match meta = Regex.Match (Encoding.Default.GetString (RawResponse)' "<meta([^<]*)charset=([^<]*)[\"']"' RegexOptions.IgnoreCase);  		string charter = (meta.Groups.Count > 1) ? meta.Groups [2].Value.ToLower () : string.Empty;  		if (charter.Length > 2)  			encoding = Encoding.GetEncoding (charter.Trim ().Replace ("\""' "").Replace ("'"' "").Replace (";"' "").Replace ("iso-8859-1"' "gbk"));  		else {  			if (string.IsNullOrEmpty (response.CharacterSet))  				encoding = Encoding.UTF8;  			else  				encoding = Encoding.GetEncoding (response.CharacterSet);  		}  	}  	//得到返回的HTML  	result.Html = encoding.GetString (RawResponse);  }  
Magic Number,ML.Net,HttpHelper,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpHelper.cs,GetHtml,The following statement contains a magic number: using (response = (HttpWebResponse)request.GetResponse ()) {  	result.StatusCode = response.StatusCode;  	result.StatusDescription = response.StatusDescription;  	result.Header = response.Headers;  	if (response.Cookies != null)  		result.CookieCollection = response.Cookies;  	if (response.Headers ["set-cookie"] != null)  		result.Cookie = response.Headers ["set-cookie"];  	MemoryStream _stream = new MemoryStream ();  	//GZIIP处理  	if (response.ContentEncoding != null && response.ContentEncoding.Equals ("gzip"' StringComparison.InvariantCultureIgnoreCase)) {  		//开始读取流并设置编码方式  		//new GZipStream(response.GetResponseStream()' CompressionMode.Decompress).CopyTo(_stream' 10240);  		//.net4.0以下写法  		_stream = GetMemoryStream (new GZipStream (response.GetResponseStream ()' CompressionMode.Decompress));  	}  	else {  		//开始读取流并设置编码方式  		//response.GetResponseStream().CopyTo(_stream' 10240);  		//.net4.0以下写法  		_stream = GetMemoryStream (response.GetResponseStream ());  	}  	//获取Byte  	byte[] RawResponse = _stream.ToArray ();  	_stream.Close ();  	//是否返回Byte类型数据  	if (objhttpitem.ResultType == ResultType.Byte)  		result.ResultByte = RawResponse;  	//从这里开始我们要无视编码了  	if (encoding == null) {  		Match meta = Regex.Match (Encoding.Default.GetString (RawResponse)' "<meta([^<]*)charset=([^<]*)[\"']"' RegexOptions.IgnoreCase);  		string charter = (meta.Groups.Count > 1) ? meta.Groups [2].Value.ToLower () : string.Empty;  		if (charter.Length > 2)  			encoding = Encoding.GetEncoding (charter.Trim ().Replace ("\""' "").Replace ("'"' "").Replace (";"' "").Replace ("iso-8859-1"' "gbk"));  		else {  			if (string.IsNullOrEmpty (response.CharacterSet))  				encoding = Encoding.UTF8;  			else  				encoding = Encoding.GetEncoding (response.CharacterSet);  		}  	}  	//得到返回的HTML  	result.Html = encoding.GetString (RawResponse);  }  
Magic Number,ML.Net,HttpHelper,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpHelper.cs,GetHtml,The following statement contains a magic number: if (encoding == null) {  	Match meta = Regex.Match (Encoding.Default.GetString (RawResponse)' "<meta([^<]*)charset=([^<]*)[\"']"' RegexOptions.IgnoreCase);  	string charter = (meta.Groups.Count > 1) ? meta.Groups [2].Value.ToLower () : string.Empty;  	if (charter.Length > 2)  		encoding = Encoding.GetEncoding (charter.Trim ().Replace ("\""' "").Replace ("'"' "").Replace (";"' "").Replace ("iso-8859-1"' "gbk"));  	else {  		if (string.IsNullOrEmpty (response.CharacterSet))  			encoding = Encoding.UTF8;  		else  			encoding = Encoding.GetEncoding (response.CharacterSet);  	}  }  
Magic Number,ML.Net,HttpHelper,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpHelper.cs,GetHtml,The following statement contains a magic number: if (encoding == null) {  	Match meta = Regex.Match (Encoding.Default.GetString (RawResponse)' "<meta([^<]*)charset=([^<]*)[\"']"' RegexOptions.IgnoreCase);  	string charter = (meta.Groups.Count > 1) ? meta.Groups [2].Value.ToLower () : string.Empty;  	if (charter.Length > 2)  		encoding = Encoding.GetEncoding (charter.Trim ().Replace ("\""' "").Replace ("'"' "").Replace (";"' "").Replace ("iso-8859-1"' "gbk"));  	else {  		if (string.IsNullOrEmpty (response.CharacterSet))  			encoding = Encoding.UTF8;  		else  			encoding = Encoding.GetEncoding (response.CharacterSet);  	}  }  
Magic Number,ML.Net,HttpHelper,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpHelper.cs,GetHtml,The following statement contains a magic number: if (charter.Length > 2)  	encoding = Encoding.GetEncoding (charter.Trim ().Replace ("\""' "").Replace ("'"' "").Replace (";"' "").Replace ("iso-8859-1"' "gbk"));  else {  	if (string.IsNullOrEmpty (response.CharacterSet))  		encoding = Encoding.UTF8;  	else  		encoding = Encoding.GetEncoding (response.CharacterSet);  }  
Magic Number,ML.Net.HttpLib,Request,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpLib\Request.cs,Upload,The following statement contains a magic number: try {  	/*                  * Generate a random boundry string                  */string boundary = RandomString (12);  	HttpWebRequest request = (HttpWebRequest)HttpWebRequest.Create (new Uri (url));  	request.Method = method.ToString ();  	request.ContentType = "multipart/form-data' boundary=" + boundary;  	request.CookieContainer = cookies;  	request.BeginGetRequestStream (new AsyncCallback ((IAsyncResult asynchronousResult) =>  {  		/*                      * Create a new request                      */HttpWebRequest tmprequest = (HttpWebRequest)asynchronousResult.AsyncState;  		/*                      * Get a stream that we can write to                      */Stream postStream = tmprequest.EndGetRequestStream (asynchronousResult);  		string querystring = "\n";  		/*                      * Serialize parameters in multipart manner                      */  		#if NETFX_CORE  		                    foreach (var property in parameters.GetType().GetTypeInfo().DeclaredProperties) #else  		foreach (var property in parameters.GetType ().GetProperties ())  		#endif  		 {  			querystring += "--" + boundary + "\n";  			querystring += "content-disposition: form-data; name=\"" + System.Uri.EscapeDataString (property.Name) + "\"\n\n";  			querystring += System.Uri.EscapeDataString (property.GetValue (parameters' null).ToString ());  			querystring += "\n";  		}  		/*                      * Then write query string to the postStream                      */byte[] byteArray = System.Text.Encoding.UTF8.GetBytes (querystring);  		postStream.Write (byteArray' 0' byteArray.Length);  		/*                      * A boundary string that we'll reuse to separate files                      */byte[] closing = System.Text.Encoding.UTF8.GetBytes ("\n--" + boundary + "--\n");  		/*                      * Write each files to the postStream                      */foreach (NamedFileStream file in files) {  			/*                          * A temporary buffer to hold the file stream                          * Not sure if this is needed ???                          */Stream outBuffer = new MemoryStream ();  			/*                          * Additional info that is prepended to the file                          */string qsAppend;  			qsAppend = "--" + boundary + "\ncontent-disposition: form-data; name=\"" + file.Name + "\"; filename=\"" + file.Filename + "\"\r\nContent-Type: " + file.ContentType + "\r\n\r\n";  			/*                          * Read the file into the output buffer                          */StreamReader sr = new StreamReader (file.Stream);  			outBuffer.Write (System.Text.Encoding.UTF8.GetBytes (qsAppend)' 0' qsAppend.Length);  			int bytesRead = 0;  			byte[] buffer = new byte[4096];  			while ((bytesRead = file.Stream.Read (buffer' 0' buffer.Length)) != 0) {  				outBuffer.Write (buffer' 0' bytesRead);  			}  			/*                          * Write the delimiter to the output buffer                          */outBuffer.Write (closing' 0' closing.Length);  			/*                          * Write the output buffer to the post stream using an intemediate byteArray                          */outBuffer.Position = 0;  			byte[] tempBuffer = new byte[outBuffer.Length];  			outBuffer.Read (tempBuffer' 0' tempBuffer.Length);  			postStream.Write (tempBuffer' 0' tempBuffer.Length);  			postStream.Flush ();  		}  		postStream.Flush ();  		postStream.Dispose ();  		tmprequest.BeginGetResponse (ProcessCallback (successCallback' failCallback)' tmprequest);  	})' request);  }  catch (WebException webEx) {  	failCallback (webEx);  }  
Magic Number,ML.Net.HttpLib,Request,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpLib\Request.cs,Upload,The following statement contains a magic number: try {  	/*                  * Generate a random boundry string                  */string boundary = RandomString (12);  	HttpWebRequest request = (HttpWebRequest)HttpWebRequest.Create (new Uri (url));  	request.Method = method.ToString ();  	request.ContentType = "multipart/form-data' boundary=" + boundary;  	request.CookieContainer = cookies;  	request.BeginGetRequestStream (new AsyncCallback ((IAsyncResult asynchronousResult) =>  {  		/*                      * Create a new request                      */HttpWebRequest tmprequest = (HttpWebRequest)asynchronousResult.AsyncState;  		/*                      * Get a stream that we can write to                      */Stream postStream = tmprequest.EndGetRequestStream (asynchronousResult);  		string querystring = "\n";  		/*                      * Serialize parameters in multipart manner                      */  		#if NETFX_CORE  		                    foreach (var property in parameters.GetType().GetTypeInfo().DeclaredProperties) #else  		foreach (var property in parameters.GetType ().GetProperties ())  		#endif  		 {  			querystring += "--" + boundary + "\n";  			querystring += "content-disposition: form-data; name=\"" + System.Uri.EscapeDataString (property.Name) + "\"\n\n";  			querystring += System.Uri.EscapeDataString (property.GetValue (parameters' null).ToString ());  			querystring += "\n";  		}  		/*                      * Then write query string to the postStream                      */byte[] byteArray = System.Text.Encoding.UTF8.GetBytes (querystring);  		postStream.Write (byteArray' 0' byteArray.Length);  		/*                      * A boundary string that we'll reuse to separate files                      */byte[] closing = System.Text.Encoding.UTF8.GetBytes ("\n--" + boundary + "--\n");  		/*                      * Write each files to the postStream                      */foreach (NamedFileStream file in files) {  			/*                          * A temporary buffer to hold the file stream                          * Not sure if this is needed ???                          */Stream outBuffer = new MemoryStream ();  			/*                          * Additional info that is prepended to the file                          */string qsAppend;  			qsAppend = "--" + boundary + "\ncontent-disposition: form-data; name=\"" + file.Name + "\"; filename=\"" + file.Filename + "\"\r\nContent-Type: " + file.ContentType + "\r\n\r\n";  			/*                          * Read the file into the output buffer                          */StreamReader sr = new StreamReader (file.Stream);  			outBuffer.Write (System.Text.Encoding.UTF8.GetBytes (qsAppend)' 0' qsAppend.Length);  			int bytesRead = 0;  			byte[] buffer = new byte[4096];  			while ((bytesRead = file.Stream.Read (buffer' 0' buffer.Length)) != 0) {  				outBuffer.Write (buffer' 0' bytesRead);  			}  			/*                          * Write the delimiter to the output buffer                          */outBuffer.Write (closing' 0' closing.Length);  			/*                          * Write the output buffer to the post stream using an intemediate byteArray                          */outBuffer.Position = 0;  			byte[] tempBuffer = new byte[outBuffer.Length];  			outBuffer.Read (tempBuffer' 0' tempBuffer.Length);  			postStream.Write (tempBuffer' 0' tempBuffer.Length);  			postStream.Flush ();  		}  		postStream.Flush ();  		postStream.Dispose ();  		tmprequest.BeginGetResponse (ProcessCallback (successCallback' failCallback)' tmprequest);  	})' request);  }  catch (WebException webEx) {  	failCallback (webEx);  }  
Magic Number,ML.Net.HttpLib,Request,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpLib\Request.cs,Upload,The following statement contains a magic number: request.BeginGetRequestStream (new AsyncCallback ((IAsyncResult asynchronousResult) =>  {  	/*                      * Create a new request                      */HttpWebRequest tmprequest = (HttpWebRequest)asynchronousResult.AsyncState;  	/*                      * Get a stream that we can write to                      */Stream postStream = tmprequest.EndGetRequestStream (asynchronousResult);  	string querystring = "\n";  	/*                      * Serialize parameters in multipart manner                      */  	#if NETFX_CORE  	                    foreach (var property in parameters.GetType().GetTypeInfo().DeclaredProperties) #else  	foreach (var property in parameters.GetType ().GetProperties ())  	#endif  	 {  		querystring += "--" + boundary + "\n";  		querystring += "content-disposition: form-data; name=\"" + System.Uri.EscapeDataString (property.Name) + "\"\n\n";  		querystring += System.Uri.EscapeDataString (property.GetValue (parameters' null).ToString ());  		querystring += "\n";  	}  	/*                      * Then write query string to the postStream                      */byte[] byteArray = System.Text.Encoding.UTF8.GetBytes (querystring);  	postStream.Write (byteArray' 0' byteArray.Length);  	/*                      * A boundary string that we'll reuse to separate files                      */byte[] closing = System.Text.Encoding.UTF8.GetBytes ("\n--" + boundary + "--\n");  	/*                      * Write each files to the postStream                      */foreach (NamedFileStream file in files) {  		/*                          * A temporary buffer to hold the file stream                          * Not sure if this is needed ???                          */Stream outBuffer = new MemoryStream ();  		/*                          * Additional info that is prepended to the file                          */string qsAppend;  		qsAppend = "--" + boundary + "\ncontent-disposition: form-data; name=\"" + file.Name + "\"; filename=\"" + file.Filename + "\"\r\nContent-Type: " + file.ContentType + "\r\n\r\n";  		/*                          * Read the file into the output buffer                          */StreamReader sr = new StreamReader (file.Stream);  		outBuffer.Write (System.Text.Encoding.UTF8.GetBytes (qsAppend)' 0' qsAppend.Length);  		int bytesRead = 0;  		byte[] buffer = new byte[4096];  		while ((bytesRead = file.Stream.Read (buffer' 0' buffer.Length)) != 0) {  			outBuffer.Write (buffer' 0' bytesRead);  		}  		/*                          * Write the delimiter to the output buffer                          */outBuffer.Write (closing' 0' closing.Length);  		/*                          * Write the output buffer to the post stream using an intemediate byteArray                          */outBuffer.Position = 0;  		byte[] tempBuffer = new byte[outBuffer.Length];  		outBuffer.Read (tempBuffer' 0' tempBuffer.Length);  		postStream.Write (tempBuffer' 0' tempBuffer.Length);  		postStream.Flush ();  	}  	postStream.Flush ();  	postStream.Dispose ();  	tmprequest.BeginGetResponse (ProcessCallback (successCallback' failCallback)' tmprequest);  })' request);  
Magic Number,ML.Net.HttpLib,Request,C:\repos\JerryXia_ML\src\ML NET40\Net\HttpLib\Request.cs,Upload,The following statement contains a magic number: foreach (NamedFileStream file in files) {  	/*                          * A temporary buffer to hold the file stream                          * Not sure if this is needed ???                          */Stream outBuffer = new MemoryStream ();  	/*                          * Additional info that is prepended to the file                          */string qsAppend;  	qsAppend = "--" + boundary + "\ncontent-disposition: form-data; name=\"" + file.Name + "\"; filename=\"" + file.Filename + "\"\r\nContent-Type: " + file.ContentType + "\r\n\r\n";  	/*                          * Read the file into the output buffer                          */StreamReader sr = new StreamReader (file.Stream);  	outBuffer.Write (System.Text.Encoding.UTF8.GetBytes (qsAppend)' 0' qsAppend.Length);  	int bytesRead = 0;  	byte[] buffer = new byte[4096];  	while ((bytesRead = file.Stream.Read (buffer' 0' buffer.Length)) != 0) {  		outBuffer.Write (buffer' 0' bytesRead);  	}  	/*                          * Write the delimiter to the output buffer                          */outBuffer.Write (closing' 0' closing.Length);  	/*                          * Write the output buffer to the post stream using an intemediate byteArray                          */outBuffer.Position = 0;  	byte[] tempBuffer = new byte[outBuffer.Length];  	outBuffer.Read (tempBuffer' 0' tempBuffer.Length);  	postStream.Write (tempBuffer' 0' tempBuffer.Length);  	postStream.Flush ();  }  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,QQWryLocator,The following statement contains a magic number: firstStartIpOffset = (int)data [0] + (((int)data [1]) << 8) + (((int)data [2]) << 16) + (((int)data [3]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,QQWryLocator,The following statement contains a magic number: firstStartIpOffset = (int)data [0] + (((int)data [1]) << 8) + (((int)data [2]) << 16) + (((int)data [3]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,QQWryLocator,The following statement contains a magic number: firstStartIpOffset = (int)data [0] + (((int)data [1]) << 8) + (((int)data [2]) << 16) + (((int)data [3]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,QQWryLocator,The following statement contains a magic number: firstStartIpOffset = (int)data [0] + (((int)data [1]) << 8) + (((int)data [2]) << 16) + (((int)data [3]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,QQWryLocator,The following statement contains a magic number: firstStartIpOffset = (int)data [0] + (((int)data [1]) << 8) + (((int)data [2]) << 16) + (((int)data [3]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,QQWryLocator,The following statement contains a magic number: lastStartIpOffset = (int)data [4] + (((int)data [5]) << 8) + (((int)data [6]) << 16) + (((int)data [7]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,QQWryLocator,The following statement contains a magic number: lastStartIpOffset = (int)data [4] + (((int)data [5]) << 8) + (((int)data [6]) << 16) + (((int)data [7]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,QQWryLocator,The following statement contains a magic number: lastStartIpOffset = (int)data [4] + (((int)data [5]) << 8) + (((int)data [6]) << 16) + (((int)data [7]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,QQWryLocator,The following statement contains a magic number: lastStartIpOffset = (int)data [4] + (((int)data [5]) << 8) + (((int)data [6]) << 16) + (((int)data [7]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,QQWryLocator,The following statement contains a magic number: lastStartIpOffset = (int)data [4] + (((int)data [5]) << 8) + (((int)data [6]) << 16) + (((int)data [7]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,QQWryLocator,The following statement contains a magic number: lastStartIpOffset = (int)data [4] + (((int)data [5]) << 8) + (((int)data [6]) << 16) + (((int)data [7]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,QQWryLocator,The following statement contains a magic number: lastStartIpOffset = (int)data [4] + (((int)data [5]) << 8) + (((int)data [6]) << 16) + (((int)data [7]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,QQWryLocator,The following statement contains a magic number: ipCount = (lastStartIpOffset - firstStartIpOffset) / 7 + 1;  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,IpToInt,The following statement contains a magic number: return (uint)bytes [3] + (((uint)bytes [2]) << 8) + (((uint)bytes [1]) << 16) + (((uint)bytes [0]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,IpToInt,The following statement contains a magic number: return (uint)bytes [3] + (((uint)bytes [2]) << 8) + (((uint)bytes [1]) << 16) + (((uint)bytes [0]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,IpToInt,The following statement contains a magic number: return (uint)bytes [3] + (((uint)bytes [2]) << 8) + (((uint)bytes [1]) << 16) + (((uint)bytes [0]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,IpToInt,The following statement contains a magic number: return (uint)bytes [3] + (((uint)bytes [2]) << 8) + (((uint)bytes [1]) << 16) + (((uint)bytes [0]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,IpToInt,The following statement contains a magic number: return (uint)bytes [3] + (((uint)bytes [2]) << 8) + (((uint)bytes [1]) << 16) + (((uint)bytes [0]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,Query,The following statement contains a magic number: while (left < (right - 1)) {  	middle = (right + left) / 2;  	startIp = GetStartIp (middle' out endIpOff);  	if (intIP == startIp) {  		left = middle;  		break;  	}  	if (intIP > startIp) {  		left = middle;  	}  	else {  		right = middle;  	}  }  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,Query,The following statement contains a magic number: middle = (right + left) / 2;  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetStartIp,The following statement contains a magic number: endIpOff = (uint)data [4 + leftOffset] + (((uint)data [5 + leftOffset]) << 8) + (((uint)data [6 + leftOffset]) << 16);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetStartIp,The following statement contains a magic number: endIpOff = (uint)data [4 + leftOffset] + (((uint)data [5 + leftOffset]) << 8) + (((uint)data [6 + leftOffset]) << 16);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetStartIp,The following statement contains a magic number: endIpOff = (uint)data [4 + leftOffset] + (((uint)data [5 + leftOffset]) << 8) + (((uint)data [6 + leftOffset]) << 16);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetStartIp,The following statement contains a magic number: endIpOff = (uint)data [4 + leftOffset] + (((uint)data [5 + leftOffset]) << 8) + (((uint)data [6 + leftOffset]) << 16);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetStartIp,The following statement contains a magic number: endIpOff = (uint)data [4 + leftOffset] + (((uint)data [5 + leftOffset]) << 8) + (((uint)data [6 + leftOffset]) << 16);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetStartIp,The following statement contains a magic number: return (uint)data [leftOffset] + (((uint)data [1 + leftOffset]) << 8) + (((uint)data [2 + leftOffset]) << 16) + (((uint)data [3 + leftOffset]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetStartIp,The following statement contains a magic number: return (uint)data [leftOffset] + (((uint)data [1 + leftOffset]) << 8) + (((uint)data [2 + leftOffset]) << 16) + (((uint)data [3 + leftOffset]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetStartIp,The following statement contains a magic number: return (uint)data [leftOffset] + (((uint)data [1 + leftOffset]) << 8) + (((uint)data [2 + leftOffset]) << 16) + (((uint)data [3 + leftOffset]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetStartIp,The following statement contains a magic number: return (uint)data [leftOffset] + (((uint)data [1 + leftOffset]) << 8) + (((uint)data [2 + leftOffset]) << 16) + (((uint)data [3 + leftOffset]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetStartIp,The following statement contains a magic number: return (uint)data [leftOffset] + (((uint)data [1 + leftOffset]) << 8) + (((uint)data [2 + leftOffset]) << 16) + (((uint)data [3 + leftOffset]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetEndIp,The following statement contains a magic number: countryFlag = data [4 + endIpOff];  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetEndIp,The following statement contains a magic number: return (uint)data [endIpOff] + (((uint)data [1 + endIpOff]) << 8) + (((uint)data [2 + endIpOff]) << 16) + (((uint)data [3 + endIpOff]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetEndIp,The following statement contains a magic number: return (uint)data [endIpOff] + (((uint)data [1 + endIpOff]) << 8) + (((uint)data [2 + endIpOff]) << 16) + (((uint)data [3 + endIpOff]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetEndIp,The following statement contains a magic number: return (uint)data [endIpOff] + (((uint)data [1 + endIpOff]) << 8) + (((uint)data [2 + endIpOff]) << 16) + (((uint)data [3 + endIpOff]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetEndIp,The following statement contains a magic number: return (uint)data [endIpOff] + (((uint)data [1 + endIpOff]) << 8) + (((uint)data [2 + endIpOff]) << 16) + (((uint)data [3 + endIpOff]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetEndIp,The following statement contains a magic number: return (uint)data [endIpOff] + (((uint)data [1 + endIpOff]) << 8) + (((uint)data [2 + endIpOff]) << 16) + (((uint)data [3 + endIpOff]) << 24);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetCountry,The following statement contains a magic number: switch (countryFlag) {  case 1:  case 2:  	country = GetFlagStr (ref offset' ref countryFlag' ref endIpOff);  	offset = endIpOff + 8;  	local = (1 == countryFlag) ? string.Empty : GetFlagStr (ref offset' ref countryFlag' ref endIpOff);  	break;  default:  	country = GetFlagStr (ref offset' ref countryFlag' ref endIpOff);  	local = GetFlagStr (ref offset' ref countryFlag' ref endIpOff);  	break;  }  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetCountry,The following statement contains a magic number: switch (countryFlag) {  case 1:  case 2:  	country = GetFlagStr (ref offset' ref countryFlag' ref endIpOff);  	offset = endIpOff + 8;  	local = (1 == countryFlag) ? string.Empty : GetFlagStr (ref offset' ref countryFlag' ref endIpOff);  	break;  default:  	country = GetFlagStr (ref offset' ref countryFlag' ref endIpOff);  	local = GetFlagStr (ref offset' ref countryFlag' ref endIpOff);  	break;  }  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetCountry,The following statement contains a magic number: offset = endIpOff + 8;  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetFlagStr,The following statement contains a magic number: while (true) {  	flag = data [offset];  	//没有重定向  	if (flag != 1 && flag != 2) {  		break;  	}  	if (flag == 2) {  		countryFlag = 2;  		endIpOff = offset - 4;  	}  	offset = (uint)data [1 + offset] + (((uint)data [2 + offset]) << 8) + (((uint)data [3 + offset]) << 16);  }  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetFlagStr,The following statement contains a magic number: while (true) {  	flag = data [offset];  	//没有重定向  	if (flag != 1 && flag != 2) {  		break;  	}  	if (flag == 2) {  		countryFlag = 2;  		endIpOff = offset - 4;  	}  	offset = (uint)data [1 + offset] + (((uint)data [2 + offset]) << 8) + (((uint)data [3 + offset]) << 16);  }  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetFlagStr,The following statement contains a magic number: while (true) {  	flag = data [offset];  	//没有重定向  	if (flag != 1 && flag != 2) {  		break;  	}  	if (flag == 2) {  		countryFlag = 2;  		endIpOff = offset - 4;  	}  	offset = (uint)data [1 + offset] + (((uint)data [2 + offset]) << 8) + (((uint)data [3 + offset]) << 16);  }  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetFlagStr,The following statement contains a magic number: while (true) {  	flag = data [offset];  	//没有重定向  	if (flag != 1 && flag != 2) {  		break;  	}  	if (flag == 2) {  		countryFlag = 2;  		endIpOff = offset - 4;  	}  	offset = (uint)data [1 + offset] + (((uint)data [2 + offset]) << 8) + (((uint)data [3 + offset]) << 16);  }  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetFlagStr,The following statement contains a magic number: while (true) {  	flag = data [offset];  	//没有重定向  	if (flag != 1 && flag != 2) {  		break;  	}  	if (flag == 2) {  		countryFlag = 2;  		endIpOff = offset - 4;  	}  	offset = (uint)data [1 + offset] + (((uint)data [2 + offset]) << 8) + (((uint)data [3 + offset]) << 16);  }  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetFlagStr,The following statement contains a magic number: while (true) {  	flag = data [offset];  	//没有重定向  	if (flag != 1 && flag != 2) {  		break;  	}  	if (flag == 2) {  		countryFlag = 2;  		endIpOff = offset - 4;  	}  	offset = (uint)data [1 + offset] + (((uint)data [2 + offset]) << 8) + (((uint)data [3 + offset]) << 16);  }  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetFlagStr,The following statement contains a magic number: while (true) {  	flag = data [offset];  	//没有重定向  	if (flag != 1 && flag != 2) {  		break;  	}  	if (flag == 2) {  		countryFlag = 2;  		endIpOff = offset - 4;  	}  	offset = (uint)data [1 + offset] + (((uint)data [2 + offset]) << 8) + (((uint)data [3 + offset]) << 16);  }  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetFlagStr,The following statement contains a magic number: while (true) {  	flag = data [offset];  	//没有重定向  	if (flag != 1 && flag != 2) {  		break;  	}  	if (flag == 2) {  		countryFlag = 2;  		endIpOff = offset - 4;  	}  	offset = (uint)data [1 + offset] + (((uint)data [2 + offset]) << 8) + (((uint)data [3 + offset]) << 16);  }  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetFlagStr,The following statement contains a magic number: if (flag != 1 && flag != 2) {  	break;  }  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetFlagStr,The following statement contains a magic number: if (flag == 2) {  	countryFlag = 2;  	endIpOff = offset - 4;  }  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetFlagStr,The following statement contains a magic number: if (flag == 2) {  	countryFlag = 2;  	endIpOff = offset - 4;  }  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetFlagStr,The following statement contains a magic number: if (flag == 2) {  	countryFlag = 2;  	endIpOff = offset - 4;  }  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetFlagStr,The following statement contains a magic number: countryFlag = 2;  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetFlagStr,The following statement contains a magic number: endIpOff = offset - 4;  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetFlagStr,The following statement contains a magic number: offset = (uint)data [1 + offset] + (((uint)data [2 + offset]) << 8) + (((uint)data [3 + offset]) << 16);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetFlagStr,The following statement contains a magic number: offset = (uint)data [1 + offset] + (((uint)data [2 + offset]) << 8) + (((uint)data [3 + offset]) << 16);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetFlagStr,The following statement contains a magic number: offset = (uint)data [1 + offset] + (((uint)data [2 + offset]) << 8) + (((uint)data [3 + offset]) << 16);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetFlagStr,The following statement contains a magic number: offset = (uint)data [1 + offset] + (((uint)data [2 + offset]) << 8) + (((uint)data [3 + offset]) << 16);  
Magic Number,QQWry.Net,QQWryLocator,C:\repos\JerryXia_ML\src\ML NET40\QQWry.Net\QQWryLocator.cs,GetFlagStr,The following statement contains a magic number: if (offset < 12) {  	return string.Empty;  }  
Magic Number,ML.Security,AESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\AESCryption.cs,AESEncryptBase64,The following statement contains a magic number: rijndaelManager.Key = Encoding.UTF8.GetBytes (key.PadRight (32' ' ').Substring (0' 32));  
Magic Number,ML.Security,AESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\AESCryption.cs,AESEncryptBase64,The following statement contains a magic number: rijndaelManager.Key = Encoding.UTF8.GetBytes (key.PadRight (32' ' ').Substring (0' 32));  
Magic Number,ML.Security,AESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\AESCryption.cs,AESDecryptBase64,The following statement contains a magic number: rijndaelManager.Key = Encoding.UTF8.GetBytes (key.PadRight (32' ' ').Substring (0' 32));  
Magic Number,ML.Security,AESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\AESCryption.cs,AESDecryptBase64,The following statement contains a magic number: rijndaelManager.Key = Encoding.UTF8.GetBytes (key.PadRight (32' ' ').Substring (0' 32));  
Magic Number,ML.Security,AESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\AESCryption.cs,AESEncrypt,The following statement contains a magic number: rijndaelManager.Key = Encoding.UTF8.GetBytes (key.PadRight (32' ' ').Substring (0' 32));  
Magic Number,ML.Security,AESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\AESCryption.cs,AESEncrypt,The following statement contains a magic number: rijndaelManager.Key = Encoding.UTF8.GetBytes (key.PadRight (32' ' ').Substring (0' 32));  
Magic Number,ML.Security,AESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\AESCryption.cs,AESDecrypt,The following statement contains a magic number: foreach (byte b in inputData) {  	inputData [arrayIndex] = (byte)Convert.ToInt32 (decryptString.Substring (arrayIndex * 2' 2)' 16);  	arrayIndex = arrayIndex + 1;  }  
Magic Number,ML.Security,AESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\AESCryption.cs,AESDecrypt,The following statement contains a magic number: foreach (byte b in inputData) {  	inputData [arrayIndex] = (byte)Convert.ToInt32 (decryptString.Substring (arrayIndex * 2' 2)' 16);  	arrayIndex = arrayIndex + 1;  }  
Magic Number,ML.Security,AESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\AESCryption.cs,AESDecrypt,The following statement contains a magic number: foreach (byte b in inputData) {  	inputData [arrayIndex] = (byte)Convert.ToInt32 (decryptString.Substring (arrayIndex * 2' 2)' 16);  	arrayIndex = arrayIndex + 1;  }  
Magic Number,ML.Security,AESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\AESCryption.cs,AESDecrypt,The following statement contains a magic number: inputData [arrayIndex] = (byte)Convert.ToInt32 (decryptString.Substring (arrayIndex * 2' 2)' 16);  
Magic Number,ML.Security,AESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\AESCryption.cs,AESDecrypt,The following statement contains a magic number: inputData [arrayIndex] = (byte)Convert.ToInt32 (decryptString.Substring (arrayIndex * 2' 2)' 16);  
Magic Number,ML.Security,AESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\AESCryption.cs,AESDecrypt,The following statement contains a magic number: inputData [arrayIndex] = (byte)Convert.ToInt32 (decryptString.Substring (arrayIndex * 2' 2)' 16);  
Magic Number,ML.Security,AESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\AESCryption.cs,AESDecrypt,The following statement contains a magic number: rijndaelManager.Key = Encoding.UTF8.GetBytes (key.PadRight (32' ' ').Substring (0' 32));  
Magic Number,ML.Security,AESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\AESCryption.cs,AESDecrypt,The following statement contains a magic number: rijndaelManager.Key = Encoding.UTF8.GetBytes (key.PadRight (32' ' ').Substring (0' 32));  
Magic Number,ML.Security,CommonCrypt,C:\repos\JerryXia_ML\src\ML NET40\Security\CommonCrypt.cs,AESEncryption,The following statement contains a magic number: return bcEngine.Encrypt (plain' CheckKeyLength (key' 32));  
Magic Number,ML.Security,CommonCrypt,C:\repos\JerryXia_ML\src\ML NET40\Security\CommonCrypt.cs,AESDecryption,The following statement contains a magic number: return bcEngine.Decrypt (cipher' CheckKeyLength (key' 32));  
Magic Number,ML.Security,CommonCrypt,C:\repos\JerryXia_ML\src\ML NET40\Security\CommonCrypt.cs,DESEncryption,The following statement contains a magic number: return bcEngine.Encrypt (plain' CheckKeyLength (key' 8));  
Magic Number,ML.Security,CommonCrypt,C:\repos\JerryXia_ML\src\ML NET40\Security\CommonCrypt.cs,DESDecryption,The following statement contains a magic number: return bcEngine.Decrypt (cipher' CheckKeyLength (key' 8));  
Magic Number,ML.Security,DESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\DESCryption.cs,DESEncryptBase64,The following statement contains a magic number: des.Key = Encoding.UTF8.GetBytes (key.PadRight (8' ' ').Substring (0' 8));  
Magic Number,ML.Security,DESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\DESCryption.cs,DESEncryptBase64,The following statement contains a magic number: des.Key = Encoding.UTF8.GetBytes (key.PadRight (8' ' ').Substring (0' 8));  
Magic Number,ML.Security,DESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\DESCryption.cs,DesDecryptBase64,The following statement contains a magic number: des.Key = Encoding.UTF8.GetBytes (key.PadRight (8' ' ').Substring (0' 8));  
Magic Number,ML.Security,DESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\DESCryption.cs,DesDecryptBase64,The following statement contains a magic number: des.Key = Encoding.UTF8.GetBytes (key.PadRight (8' ' ').Substring (0' 8));  
Magic Number,ML.Security,DESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\DESCryption.cs,DESEncrypt,The following statement contains a magic number: des.Key = Encoding.UTF8.GetBytes (key.PadRight (8' ' ').Substring (0' 8));  
Magic Number,ML.Security,DESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\DESCryption.cs,DESEncrypt,The following statement contains a magic number: des.Key = Encoding.UTF8.GetBytes (key.PadRight (8' ' ').Substring (0' 8));  
Magic Number,ML.Security,DESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\DESCryption.cs,DesDecrypt,The following statement contains a magic number: foreach (byte b in inputData) {  	inputData [arrayIndex] = (byte)Convert.ToInt32 (decryptString.Substring (arrayIndex * 2' 2)' 16);  	arrayIndex = arrayIndex + 1;  }  
Magic Number,ML.Security,DESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\DESCryption.cs,DesDecrypt,The following statement contains a magic number: foreach (byte b in inputData) {  	inputData [arrayIndex] = (byte)Convert.ToInt32 (decryptString.Substring (arrayIndex * 2' 2)' 16);  	arrayIndex = arrayIndex + 1;  }  
Magic Number,ML.Security,DESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\DESCryption.cs,DesDecrypt,The following statement contains a magic number: foreach (byte b in inputData) {  	inputData [arrayIndex] = (byte)Convert.ToInt32 (decryptString.Substring (arrayIndex * 2' 2)' 16);  	arrayIndex = arrayIndex + 1;  }  
Magic Number,ML.Security,DESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\DESCryption.cs,DesDecrypt,The following statement contains a magic number: inputData [arrayIndex] = (byte)Convert.ToInt32 (decryptString.Substring (arrayIndex * 2' 2)' 16);  
Magic Number,ML.Security,DESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\DESCryption.cs,DesDecrypt,The following statement contains a magic number: inputData [arrayIndex] = (byte)Convert.ToInt32 (decryptString.Substring (arrayIndex * 2' 2)' 16);  
Magic Number,ML.Security,DESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\DESCryption.cs,DesDecrypt,The following statement contains a magic number: inputData [arrayIndex] = (byte)Convert.ToInt32 (decryptString.Substring (arrayIndex * 2' 2)' 16);  
Magic Number,ML.Security,DESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\DESCryption.cs,DesDecrypt,The following statement contains a magic number: des.Key = Encoding.UTF8.GetBytes (key.PadRight (8' ' ').Substring (0' 8));  
Magic Number,ML.Security,DESCryption,C:\repos\JerryXia_ML\src\ML NET40\Security\DESCryption.cs,DesDecrypt,The following statement contains a magic number: des.Key = Encoding.UTF8.GetBytes (key.PadRight (8' ' ').Substring (0' 8));  
Magic Number,ML.Utility,CheckHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\CheckHelper.cs,IsIPStr,The following statement contains a magic number: if (in_str.Replace ("."' "").Length == in_str.Length - 3) {  	IPAddress ip;  	return IPAddress.TryParse (in_str' out ip);  }  
Magic Number,ML.Utility,GuardIDHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\GuardIDHelper.cs,GuardIDHelper,The following statement contains a magic number: KeepHashCodeLength = 2;  
Magic Number,ML.Utility,GuardIDHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\GuardIDHelper.cs,Decode,The following statement contains a magic number: if (int.TryParse (encode [0].ToString ()' out lenlen) && lenlen <= 2) {  	string lenStr = "";  	for (int i = 1; i < lenlen + 1; i++) {  		lenStr += encode [i].ToString ();  	}  	if (int.TryParse (lenStr' out len)) {  		if (encodedID.Length == 1 + lenlen + len + KeepHashCodeLength) {  			string orignalID = encodedID.Substring (1 + lenlen' len);  			string orignalHashCode = encodedID.Substring (lenlen + len + 1);  			if (orignalHashCode == GetSpecCode (orignalID)) {  				encodedID = orignalID;  			}  		}  	}  }  else {  	return 0;  }  
Magic Number,ML.Utility,Pinyin,C:\repos\JerryXia_ML\src\ML NET40\Utility\Pinyin.cs,GetChineseSpell,The following statement contains a magic number: foreach (char vChar in strText) {  	// 若是字母则直接输出  	if ((vChar >= 'a' && vChar <= 'z') || (vChar >= 'A' && vChar <= 'Z'))  		myStr += char.ToUpper (vChar);  	else if ((int)vChar >= 19968 && (int)vChar <= 40869) {  		// 对可以查找的汉字计算它的首拼音字母的位置，然后输出  		myStr += strChineseFirstPY [(int)vChar - 19968];  	}  	else {  		myStr += vChar.ToString ();  	}  }  
Magic Number,ML.Utility,Pinyin,C:\repos\JerryXia_ML\src\ML NET40\Utility\Pinyin.cs,GetChineseSpell,The following statement contains a magic number: foreach (char vChar in strText) {  	// 若是字母则直接输出  	if ((vChar >= 'a' && vChar <= 'z') || (vChar >= 'A' && vChar <= 'Z'))  		myStr += char.ToUpper (vChar);  	else if ((int)vChar >= 19968 && (int)vChar <= 40869) {  		// 对可以查找的汉字计算它的首拼音字母的位置，然后输出  		myStr += strChineseFirstPY [(int)vChar - 19968];  	}  	else {  		myStr += vChar.ToString ();  	}  }  
Magic Number,ML.Utility,Pinyin,C:\repos\JerryXia_ML\src\ML NET40\Utility\Pinyin.cs,GetChineseSpell,The following statement contains a magic number: foreach (char vChar in strText) {  	// 若是字母则直接输出  	if ((vChar >= 'a' && vChar <= 'z') || (vChar >= 'A' && vChar <= 'Z'))  		myStr += char.ToUpper (vChar);  	else if ((int)vChar >= 19968 && (int)vChar <= 40869) {  		// 对可以查找的汉字计算它的首拼音字母的位置，然后输出  		myStr += strChineseFirstPY [(int)vChar - 19968];  	}  	else {  		myStr += vChar.ToString ();  	}  }  
Magic Number,ML.Utility,Pinyin,C:\repos\JerryXia_ML\src\ML NET40\Utility\Pinyin.cs,GetChineseSpell,The following statement contains a magic number: if ((vChar >= 'a' && vChar <= 'z') || (vChar >= 'A' && vChar <= 'Z'))  	myStr += char.ToUpper (vChar);  else if ((int)vChar >= 19968 && (int)vChar <= 40869) {  	// 对可以查找的汉字计算它的首拼音字母的位置，然后输出  	myStr += strChineseFirstPY [(int)vChar - 19968];  }  else {  	myStr += vChar.ToString ();  }  
Magic Number,ML.Utility,Pinyin,C:\repos\JerryXia_ML\src\ML NET40\Utility\Pinyin.cs,GetChineseSpell,The following statement contains a magic number: if ((vChar >= 'a' && vChar <= 'z') || (vChar >= 'A' && vChar <= 'Z'))  	myStr += char.ToUpper (vChar);  else if ((int)vChar >= 19968 && (int)vChar <= 40869) {  	// 对可以查找的汉字计算它的首拼音字母的位置，然后输出  	myStr += strChineseFirstPY [(int)vChar - 19968];  }  else {  	myStr += vChar.ToString ();  }  
Magic Number,ML.Utility,Pinyin,C:\repos\JerryXia_ML\src\ML NET40\Utility\Pinyin.cs,GetChineseSpell,The following statement contains a magic number: if ((vChar >= 'a' && vChar <= 'z') || (vChar >= 'A' && vChar <= 'Z'))  	myStr += char.ToUpper (vChar);  else if ((int)vChar >= 19968 && (int)vChar <= 40869) {  	// 对可以查找的汉字计算它的首拼音字母的位置，然后输出  	myStr += strChineseFirstPY [(int)vChar - 19968];  }  else {  	myStr += vChar.ToString ();  }  
Magic Number,ML.Utility,Pinyin,C:\repos\JerryXia_ML\src\ML NET40\Utility\Pinyin.cs,GetChineseSpell,The following statement contains a magic number: if ((int)vChar >= 19968 && (int)vChar <= 40869) {  	// 对可以查找的汉字计算它的首拼音字母的位置，然后输出  	myStr += strChineseFirstPY [(int)vChar - 19968];  }  else {  	myStr += vChar.ToString ();  }  
Magic Number,ML.Utility,Pinyin,C:\repos\JerryXia_ML\src\ML NET40\Utility\Pinyin.cs,GetChineseSpell,The following statement contains a magic number: if ((int)vChar >= 19968 && (int)vChar <= 40869) {  	// 对可以查找的汉字计算它的首拼音字母的位置，然后输出  	myStr += strChineseFirstPY [(int)vChar - 19968];  }  else {  	myStr += vChar.ToString ();  }  
Magic Number,ML.Utility,Pinyin,C:\repos\JerryXia_ML\src\ML NET40\Utility\Pinyin.cs,GetChineseSpell,The following statement contains a magic number: if ((int)vChar >= 19968 && (int)vChar <= 40869) {  	// 对可以查找的汉字计算它的首拼音字母的位置，然后输出  	myStr += strChineseFirstPY [(int)vChar - 19968];  }  else {  	myStr += vChar.ToString ();  }  
Magic Number,ML.Utility,Pinyin,C:\repos\JerryXia_ML\src\ML NET40\Utility\Pinyin.cs,GetChineseSpell,The following statement contains a magic number: myStr += strChineseFirstPY [(int)vChar - 19968];  
Magic Number,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,CutString,The following statement contains a magic number: if (origStr != "") {  	int i = 0' j = 0;  	foreach (char Char in origStr) {  		if ((int)Char > 127)  			i += 2;  		else  			i++;  		if (i > endIndex) {  			origStr = origStr.Substring (0' j) + "...";  			break;  		}  		j++;  	}  	return origStr;  	/*byte[] bytes=System.Text.Encoding.GetEncoding("gb2312").GetBytes(origStr);                 //如果endIndex大于或等当前字符串的字节数，则返回整个字符串                 if(endIndex>=bytes.Length)                     return origStr;                  byte[] subBytes=new byte[endIndex];                 Array.Copy(bytes'0'subBytes'0'endIndex);                 return System.Text.Encoding.GetEncoding("gb2312").GetString(subBytes);*/}  
Magic Number,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,CutString,The following statement contains a magic number: if (origStr != "") {  	int i = 0' j = 0;  	foreach (char Char in origStr) {  		if ((int)Char > 127)  			i += 2;  		else  			i++;  		if (i > endIndex) {  			origStr = origStr.Substring (0' j) + "...";  			break;  		}  		j++;  	}  	return origStr;  	/*byte[] bytes=System.Text.Encoding.GetEncoding("gb2312").GetBytes(origStr);                 //如果endIndex大于或等当前字符串的字节数，则返回整个字符串                 if(endIndex>=bytes.Length)                     return origStr;                  byte[] subBytes=new byte[endIndex];                 Array.Copy(bytes'0'subBytes'0'endIndex);                 return System.Text.Encoding.GetEncoding("gb2312").GetString(subBytes);*/}  
Magic Number,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,CutString,The following statement contains a magic number: foreach (char Char in origStr) {  	if ((int)Char > 127)  		i += 2;  	else  		i++;  	if (i > endIndex) {  		origStr = origStr.Substring (0' j) + "...";  		break;  	}  	j++;  }  
Magic Number,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,CutString,The following statement contains a magic number: foreach (char Char in origStr) {  	if ((int)Char > 127)  		i += 2;  	else  		i++;  	if (i > endIndex) {  		origStr = origStr.Substring (0' j) + "...";  		break;  	}  	j++;  }  
Magic Number,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,CutString,The following statement contains a magic number: if ((int)Char > 127)  	i += 2;  else  	i++;  
Magic Number,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,CutString,The following statement contains a magic number: if ((int)Char > 127)  	i += 2;  else  	i++;  
Magic Number,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,CutString,The following statement contains a magic number: i += 2;  
Magic Number,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,GetRandSN,The following statement contains a magic number: for (int i = 0; i < strLength; i++) {  	newRandom.Append (constant [rd.Next (36)]);  }  
Magic Number,ML.Utility,TextHelper,C:\repos\JerryXia_ML\src\ML NET40\Utility\TextHelper.cs,GetRandSN,The following statement contains a magic number: newRandom.Append (constant [rd.Next (36)]);  
Magic Number,ML.Utility,UpYun,C:\repos\JerryXia_ML\src\ML NET40\Utility\UpYunLibrary.cs,delete,The following statement contains a magic number: if ((int)resp.StatusCode == 200) {  	resp.Close ();  	return true;  }  else {  	resp.Close ();  	return false;  }  
Magic Number,ML.Utility,UpYun,C:\repos\JerryXia_ML\src\ML NET40\Utility\UpYunLibrary.cs,newWorker,The following statement contains a magic number: try {  	response = (HttpWebResponse)request.GetResponse ();  	this.tmp_infos = new Hashtable ();  	foreach (var hl in response.Headers) {  		string name = (string)hl;  		if (name.Length > 7 && name.Substring (0' 7) == "x-upyun") {  			this.tmp_infos.Add (name' response.Headers [name]);  		}  	}  }  catch (Exception e) {  	throw e;  }  
Magic Number,ML.Utility,UpYun,C:\repos\JerryXia_ML\src\ML NET40\Utility\UpYunLibrary.cs,newWorker,The following statement contains a magic number: try {  	response = (HttpWebResponse)request.GetResponse ();  	this.tmp_infos = new Hashtable ();  	foreach (var hl in response.Headers) {  		string name = (string)hl;  		if (name.Length > 7 && name.Substring (0' 7) == "x-upyun") {  			this.tmp_infos.Add (name' response.Headers [name]);  		}  	}  }  catch (Exception e) {  	throw e;  }  
Magic Number,ML.Utility,UpYun,C:\repos\JerryXia_ML\src\ML NET40\Utility\UpYunLibrary.cs,newWorker,The following statement contains a magic number: foreach (var hl in response.Headers) {  	string name = (string)hl;  	if (name.Length > 7 && name.Substring (0' 7) == "x-upyun") {  		this.tmp_infos.Add (name' response.Headers [name]);  	}  }  
Magic Number,ML.Utility,UpYun,C:\repos\JerryXia_ML\src\ML NET40\Utility\UpYunLibrary.cs,newWorker,The following statement contains a magic number: foreach (var hl in response.Headers) {  	string name = (string)hl;  	if (name.Length > 7 && name.Substring (0' 7) == "x-upyun") {  		this.tmp_infos.Add (name' response.Headers [name]);  	}  }  
Magic Number,ML.Utility,UpYun,C:\repos\JerryXia_ML\src\ML NET40\Utility\UpYunLibrary.cs,newWorker,The following statement contains a magic number: if (name.Length > 7 && name.Substring (0' 7) == "x-upyun") {  	this.tmp_infos.Add (name' response.Headers [name]);  }  
Magic Number,ML.Utility,UpYun,C:\repos\JerryXia_ML\src\ML NET40\Utility\UpYunLibrary.cs,newWorker,The following statement contains a magic number: if (name.Length > 7 && name.Substring (0' 7) == "x-upyun") {  	this.tmp_infos.Add (name' response.Headers [name]);  }  
Magic Number,ML.Utility,UpYun,C:\repos\JerryXia_ML\src\ML NET40\Utility\UpYunLibrary.cs,mkDir,The following statement contains a magic number: if ((int)resp.StatusCode == 200) {  	resp.Close ();  	return true;  }  else {  	resp.Close ();  	return false;  }  
Magic Number,ML.Utility,UpYun,C:\repos\JerryXia_ML\src\ML NET40\Utility\UpYunLibrary.cs,readDir,The following statement contains a magic number: while (i < ss.Length) {  	FolderItem fi = new FolderItem (ss [i]' ss [i + 1]' int.Parse (ss [i + 2])' int.Parse (ss [i + 3]));  	AL.Add (fi);  	i += 4;  }  
Magic Number,ML.Utility,UpYun,C:\repos\JerryXia_ML\src\ML NET40\Utility\UpYunLibrary.cs,readDir,The following statement contains a magic number: while (i < ss.Length) {  	FolderItem fi = new FolderItem (ss [i]' ss [i + 1]' int.Parse (ss [i + 2])' int.Parse (ss [i + 3]));  	AL.Add (fi);  	i += 4;  }  
Magic Number,ML.Utility,UpYun,C:\repos\JerryXia_ML\src\ML NET40\Utility\UpYunLibrary.cs,readDir,The following statement contains a magic number: while (i < ss.Length) {  	FolderItem fi = new FolderItem (ss [i]' ss [i + 1]' int.Parse (ss [i + 2])' int.Parse (ss [i + 3]));  	AL.Add (fi);  	i += 4;  }  
Magic Number,ML.Utility,UpYun,C:\repos\JerryXia_ML\src\ML NET40\Utility\UpYunLibrary.cs,readDir,The following statement contains a magic number: i += 4;  
Magic Number,ML.Utility,UpYun,C:\repos\JerryXia_ML\src\ML NET40\Utility\UpYunLibrary.cs,writeFile,The following statement contains a magic number: if ((int)resp.StatusCode == 200) {  	resp.Close ();  	return true;  }  else {  	resp.Close ();  	return false;  }  
Missing Default,ML.Control,JavaScriptMinifier,C:\repos\JerryXia_ML\src\ML NET40\Control\JavaScriptMinifier.cs,next,The following switch statement is missing a default case: switch (get ()) {  case '*': {  	if (peek () == '/') {  		get ();  		return ' ';  	}  	break;  }  case EOF: {  	throw new Exception ("Error: JSMIN Unterminated comment.\n");  }  }  
Missing Default,ML.Data,DynamicParameters,C:\repos\JerryXia_ML\src\ML NET40\Data\SqlMapper.cs,Clean,The following switch statement is missing a default case: switch (name [0]) {  case '@':  case ':':  case '?':  	return name.Substring (1);  }  
Missing Default,Mono.Data.SqliteClient,SqliteConnection,C:\repos\JerryXia_ML\src\ML NET40\Mono.Data.SqliteClient\SqliteConnection.cs,SetConnectionString,The following switch statement is missing a default case: switch (token) {  #if NET_2_0  						case "DataSource": #endif  case "uri":  	if (tvalue_lc.StartsWith ("file://")) {  		db_file = tvalue.Substring (7);  	}  	else if (tvalue_lc.StartsWith ("file:")) {  		db_file = tvalue.Substring (5);  	}  	else if (tvalue_lc.StartsWith ("/")) {  		db_file = tvalue;  		#if NET_2_0  									} else if (tvalue_lc.StartsWith ("|DataDirectory|"' 											 StringComparison.InvariantCultureIgnoreCase)) { 								AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation; 								string filePath = String.Format ("App_Data{0}{1}"' 												 Path.DirectorySeparatorChar' 												 tvalue_lc.Substring (15)); 								 								db_file = Path.Combine (ads.ApplicationBase' filePath); #endif  	}  	else {  		throw new InvalidOperationException ("Invalid connection string: invalid URI");  	}  	break;  case "mode":  	db_mode = Convert.ToInt32 (tvalue);  	break;  case "version":  	db_version = Convert.ToInt32 (tvalue);  	break;  case "encoding":  	// only for sqlite2  	encoding = Encoding.GetEncoding (tvalue);  	break;  case "busy_timeout":  	busy_timeout = Convert.ToInt32 (tvalue);  	break;  }  
