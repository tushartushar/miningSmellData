Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Encryptamajig,AesEncryptamajig,C:\repos\jbubriski_Encryptamajig\src\Encryptamajig\Encryptamajig\AesEncryptamajig.cs,Encrypt,The length of the statement  "                    // Return the encrypted bytes from the memory stream' in Base64 form so we can send it right to a database (if we want). " is 120.
Magic Number,Encryptamajig,AesEncryptamajig,C:\repos\jbubriski_Encryptamajig\src\Encryptamajig\Encryptamajig\AesEncryptamajig.cs,Encrypt,The following statement contains a magic number: using (var keyDerivationFunction = new Rfc2898DeriveBytes(key' _saltSize))              {                  var saltBytes = keyDerivationFunction.Salt;                  var keyBytes = keyDerivationFunction.GetBytes(32);                  var ivBytes = keyDerivationFunction.GetBytes(16);                    // Create an encryptor to perform the stream transform.                  // Create the streams used for encryption.                  using (var aesManaged = new AesManaged())                  using (var encryptor = aesManaged.CreateEncryptor(keyBytes' ivBytes))                  using (var memoryStream = new MemoryStream())                  {                      using (var cryptoStream = new CryptoStream(memoryStream' encryptor' CryptoStreamMode.Write))                      using (var streamWriter = new StreamWriter(cryptoStream))                      {                          // Send the data through the StreamWriter' through the CryptoStream' to the underlying MemoryStream                          streamWriter.Write(plainText);                      }                        // Return the encrypted bytes from the memory stream' in Base64 form so we can send it right to a database (if we want).                      var cipherTextBytes = memoryStream.ToArray();                      Array.Resize(ref saltBytes' saltBytes.Length + cipherTextBytes.Length);                      Array.Copy(cipherTextBytes' 0' saltBytes' _saltSize' cipherTextBytes.Length);                        return Convert.ToBase64String(saltBytes);                  }              }
Magic Number,Encryptamajig,AesEncryptamajig,C:\repos\jbubriski_Encryptamajig\src\Encryptamajig\Encryptamajig\AesEncryptamajig.cs,Encrypt,The following statement contains a magic number: using (var keyDerivationFunction = new Rfc2898DeriveBytes(key' _saltSize))              {                  var saltBytes = keyDerivationFunction.Salt;                  var keyBytes = keyDerivationFunction.GetBytes(32);                  var ivBytes = keyDerivationFunction.GetBytes(16);                    // Create an encryptor to perform the stream transform.                  // Create the streams used for encryption.                  using (var aesManaged = new AesManaged())                  using (var encryptor = aesManaged.CreateEncryptor(keyBytes' ivBytes))                  using (var memoryStream = new MemoryStream())                  {                      using (var cryptoStream = new CryptoStream(memoryStream' encryptor' CryptoStreamMode.Write))                      using (var streamWriter = new StreamWriter(cryptoStream))                      {                          // Send the data through the StreamWriter' through the CryptoStream' to the underlying MemoryStream                          streamWriter.Write(plainText);                      }                        // Return the encrypted bytes from the memory stream' in Base64 form so we can send it right to a database (if we want).                      var cipherTextBytes = memoryStream.ToArray();                      Array.Resize(ref saltBytes' saltBytes.Length + cipherTextBytes.Length);                      Array.Copy(cipherTextBytes' 0' saltBytes' _saltSize' cipherTextBytes.Length);                        return Convert.ToBase64String(saltBytes);                  }              }
Magic Number,Encryptamajig,AesEncryptamajig,C:\repos\jbubriski_Encryptamajig\src\Encryptamajig\Encryptamajig\AesEncryptamajig.cs,Decrypt,The following statement contains a magic number: using (var keyDerivationFunction = new Rfc2898DeriveBytes(key' saltBytes))              {                  // Derive the previous IV from the Key and Salt                  var keyBytes = keyDerivationFunction.GetBytes(32);                  var ivBytes = keyDerivationFunction.GetBytes(16);                                    // Create a decrytor to perform the stream transform.                  // Create the streams used for decryption.                  // The default Cipher Mode is CBC and the Padding is PKCS7 which are both good                  using (var aesManaged = new AesManaged())                  using (var decryptor = aesManaged.CreateDecryptor(keyBytes' ivBytes))                  using (var memoryStream = new MemoryStream(ciphertextBytes))                  using (var cryptoStream = new CryptoStream(memoryStream' decryptor' CryptoStreamMode.Read))                  using (var streamReader = new StreamReader(cryptoStream))                  {                      // Return the decrypted bytes from the decrypting stream.                      return streamReader.ReadToEnd();                  }              }
Magic Number,Encryptamajig,AesEncryptamajig,C:\repos\jbubriski_Encryptamajig\src\Encryptamajig\Encryptamajig\AesEncryptamajig.cs,Decrypt,The following statement contains a magic number: using (var keyDerivationFunction = new Rfc2898DeriveBytes(key' saltBytes))              {                  // Derive the previous IV from the Key and Salt                  var keyBytes = keyDerivationFunction.GetBytes(32);                  var ivBytes = keyDerivationFunction.GetBytes(16);                                    // Create a decrytor to perform the stream transform.                  // Create the streams used for decryption.                  // The default Cipher Mode is CBC and the Padding is PKCS7 which are both good                  using (var aesManaged = new AesManaged())                  using (var decryptor = aesManaged.CreateDecryptor(keyBytes' ivBytes))                  using (var memoryStream = new MemoryStream(ciphertextBytes))                  using (var cryptoStream = new CryptoStream(memoryStream' decryptor' CryptoStreamMode.Read))                  using (var streamReader = new StreamReader(cryptoStream))                  {                      // Return the decrypted bytes from the decrypting stream.                      return streamReader.ReadToEnd();                  }              }
