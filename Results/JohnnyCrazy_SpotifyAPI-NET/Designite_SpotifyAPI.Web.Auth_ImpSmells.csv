Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,SpotifyAPI.Web.Auth,AuthorizationCodeAuth,D:\research\architectureSmells\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI.Web.Auth\AuthorizationCodeAuth.cs,AuthorizationCodeAuth,The method has 6 parameters. Parameters: clientId' secretId' redirectUri' serverUri' scope' state
Long Parameter List,SpotifyAPI.Web.Auth,ImplicitGrantAuth,D:\research\architectureSmells\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI.Web.Auth\ImplicitGrantAuth.cs,ImplicitGrantAuth,The method has 5 parameters. Parameters: clientId' redirectUri' serverUri' scope' state
Long Parameter List,SpotifyAPI.Web.Auth,SpotifyAuthServer<T>,D:\research\architectureSmells\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI.Web.Auth\SpotifyAuthServer.cs,SpotifyAuthServer,The method has 6 parameters. Parameters: type' folder' redirectUri' serverUri' scope' state
Long Parameter List,SpotifyAPI.Web.Auth,TokenSwapAuth,D:\research\architectureSmells\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI.Web.Auth\TokenSwapAuth.cs,TokenSwapAuth,The method has 5 parameters. Parameters: exchangeServerUri' serverUri' scope' state' htmlResponse
Long Parameter List,SpotifyAPI.Web.Auth,TokenSwapWebAPIFactory,D:\research\architectureSmells\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI.Web.Auth\TokenSwapWebAPIFactory.cs,TokenSwapWebAPIFactory,The method has 6 parameters. Parameters: exchangeServerUri' scope' hostServerUri' timeout' autoRefresh' openBrowser
Long Statement,SpotifyAPI.Web.Auth,AuthorizationCodeAuthController,D:\research\architectureSmells\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI.Web.Auth\AuthorizationCodeAuth.cs,GetEmpty,The length of the statement  "            return HttpContext.HtmlResponseAsync("<html><script type=\"text/javascript\">window.close();</script>OK - This window can be closed now</html>"); " is 145.
Long Statement,SpotifyAPI.Web.Auth,ImplicitGrantAuthController,D:\research\architectureSmells\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI.Web.Auth\ImplicitGrantAuth.cs,GetAuth,The length of the statement  "            return HttpContext.HtmlResponseAsync("<html><script type=\"text/javascript\">window.close();</script>OK - This window can be closed now</html>"); " is 145.
Long Statement,SpotifyAPI.Web.Auth,SpotifyAuthServer<T>,D:\research\architectureSmells\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI.Web.Auth\SpotifyAuthServer.cs,Start,The length of the statement  "            _server.RegisterModule(new ResourceFilesModule(Assembly.GetExecutingAssembly()' $"SpotifyAPI.Web.Auth.Resources.{_folder}")); " is 125.
Empty Catch Block,SpotifyAPI.Web.Auth,TokenSwapAuth,D:\research\architectureSmells\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI.Web.Auth\TokenSwapAuth.cs,GetToken,The method has an empty catch block.
Magic Number,SpotifyAPI.Web.Auth,SpotifyAuthServer<T>,D:\research\architectureSmells\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI.Web.Auth\SpotifyAuthServer.cs,SpotifyAuthServer,The following statement contains a magic number: State = string.IsNullOrEmpty(state) ? string.Join(""' Guid.NewGuid().ToString("n").Take(8)) : state;
Magic Number,SpotifyAPI.Web.Auth,TokenSwapAuth,D:\research\architectureSmells\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI.Web.Auth\TokenSwapAuth.cs,SetAccessExpireTimer,The following statement contains a magic number: _accessTokenExpireTimer = new System.Timers.Timer              {                  Enabled = true'                  Interval = token.ExpiresIn * 1000'                  AutoReset = false              };
Magic Number,SpotifyAPI.Web.Auth,TokenSwapWebAPIFactory,D:\research\architectureSmells\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI.Web.Auth\TokenSwapWebAPIFactory.cs,GetWebApiAsync,The following statement contains a magic number: return await Task<SpotifyWebAPI>.Factory.StartNew(() =>              {                  bool currentlyAuthorizing = true;                    // Cancel any ongoing get web API requests                  CancelGetWebApiRequest();                    lastAuth = new TokenSwapAuth(                      exchangeServerUri: ExchangeServerUri'                      serverUri: HostServerUri'                      scope: Scope'                      htmlResponse: HtmlResponse)                  {                      ShowDialog = ShowDialog'                      MaxGetTokenRetries = MaxGetTokenRetries'                      TimeAccessExpiry = AutoRefresh || TimeAccessExpiry                  };                  lastAuth.AuthReceived += async (sender' response) =>                  {                      if (!string.IsNullOrEmpty(response.Error) || string.IsNullOrEmpty(response.Code))                      {                          // We only want one auth failure to be fired' if the request timed out then don't bother.                          if (!webApiTimeoutTimer.Enabled) return;                            OnAuthFailure?.Invoke(this' new AuthFailureEventArgs(response.Error));                          currentlyAuthorizing = false;                          return;                      }                        lastToken = await lastAuth.ExchangeCodeAsync(response.Code);                        if (lastToken == null || lastToken.HasError() || string.IsNullOrEmpty(lastToken.AccessToken))                      {                          // We only want one auth failure to be fired' if the request timed out then don't bother.                          if (!webApiTimeoutTimer.Enabled) return;                            OnAuthFailure?.Invoke(this' new AuthFailureEventArgs("Exchange token not returned by server."));                          currentlyAuthorizing = false;                          return;                      }                        if (lastWebApi != null)                      {                          lastWebApi.Dispose();                      }                      lastWebApi = new SpotifyWebAPI()                      {                          TokenType = lastToken.TokenType'                          AccessToken = lastToken.AccessToken                      };                        lastAuth.Stop();                        OnAuthSuccess?.Invoke(this' AuthSuccessEventArgs.Empty);                      currentlyAuthorizing = false;                  };                  lastAuth.OnAccessTokenExpired += async (sender' e) =>                  {                      if (TimeAccessExpiry)                      {                          OnAccessTokenExpired?.Invoke(sender' AccessTokenExpiredEventArgs.Empty);                      }                        if (AutoRefresh)                      {                          await RefreshAuthAsync();                      }                  };                  lastAuth.Start();                  OnExchangeReady?.Invoke(this' new ExchangeReadyEventArgs { ExchangeUri = lastAuth.GetUri() });                  if (OpenBrowser)                  {                      lastAuth.OpenBrowser();                  }                    webApiTimeoutTimer = new System.Timers.Timer                  {                      AutoReset = false'                      Enabled = true'                      Interval = Timeout * 1000                  };                    while (currentlyAuthorizing && webApiTimeoutTimer.Enabled) ;                    // If a timeout occurred                  if (lastWebApi == null && currentlyAuthorizing)                  {                      OnAuthFailure?.Invoke(this' new AuthFailureEventArgs("Authorization request has timed out."));                  }                    return lastWebApi;              });
