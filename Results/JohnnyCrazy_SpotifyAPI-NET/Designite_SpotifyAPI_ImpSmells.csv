Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SpotifyAPI.Local,SpotifyLocalAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,ElapsedTick,Cyclomatic complexity of the method is 9
Complex Method,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetRecommendations,Cyclomatic complexity of the method is 8
Long Parameter List,SpotifyAPI.Web.Auth,WebAPIFactory,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\Auth\WebAPIFactory.cs,WebAPIFactory,The method has 6 parameters. Parameters: redirectUrl' listeningPort' clientId' scope' timeout' xss
Long Parameter List,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,SearchItems,The method has 5 parameters. Parameters: q' type' limit' offset' market
Long Parameter List,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,SearchItemsAsync,The method has 5 parameters. Parameters: q' type' limit' offset' market
Long Parameter List,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,GetArtistsAlbums,The method has 5 parameters. Parameters: id' type' limit' offset' market
Long Parameter List,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,GetArtistsAlbumsAsync,The method has 5 parameters. Parameters: id' type' limit' offset' market
Long Parameter List,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,GetFeaturedPlaylists,The method has 5 parameters. Parameters: locale' country' timestamp' limit' offset
Long Parameter List,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,GetFeaturedPlaylistsAsync,The method has 5 parameters. Parameters: locale' country' timestamp' limit' offset
Long Parameter List,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,GetRecommendations,The method has 8 parameters. Parameters: artistSeed' genreSeed' trackSeed' target' min' max' limit' market
Long Parameter List,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,GetRecommendationsAsync,The method has 8 parameters. Parameters: artistSeed' genreSeed' trackSeed' target' min' max' limit' market
Long Parameter List,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,GetPlaylistTracks,The method has 6 parameters. Parameters: userId' playlistId' fields' limit' offset' market
Long Parameter List,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,GetPlaylistTracksAsync,The method has 6 parameters. Parameters: userId' playlistId' fields' limit' offset' market
Long Parameter List,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,ReorderPlaylist,The method has 6 parameters. Parameters: userId' playlistId' rangeStart' insertBefore' rangeLength' snapshotId
Long Parameter List,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,ReorderPlaylistAsync,The method has 6 parameters. Parameters: userId' playlistId' rangeStart' insertBefore' rangeLength' snapshotId
Long Parameter List,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,SearchItems,The method has 5 parameters. Parameters: q' type' limit' offset' market
Long Parameter List,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetArtistsAlbums,The method has 5 parameters. Parameters: id' type' limit' offset' market
Long Parameter List,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetFeaturedPlaylists,The method has 5 parameters. Parameters: locale' country' timestamp' limit' offset
Long Parameter List,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetRecommendations,The method has 8 parameters. Parameters: artistSeed' genreSeed' trackSeed' target' min' max' limit' market
Long Parameter List,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetPlaylistTracks,The method has 6 parameters. Parameters: userId' playlistId' fields' limit' offset' market
Long Statement,SpotifyAPI.Local,RemoteHandler,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\RemoteHandler.cs,SendPlayRequest,The length of the statement  "            // TODO: instead of having an empty context' one way to fix the bug with the playback time beyond the length of a song would be to provide a 1-song context' and it would be fixed. " is 179.
Long Statement,SpotifyAPI.Local,SpotifyLocalAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,IsOSCompatible,The length of the statement  "            return Environment.OSVersion.Version.Major > minMajor || (Environment.OSVersion.Version.Major == minMajor && Environment.OSVersion.Version.Minor >= minMinor); " is 158.
Long Statement,SpotifyAPI.Local,SpotifyLocalAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,IsSpotifyInstalled,The length of the statement  "            string uwpSpotifyPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData)' @"Packages\SpotifyAB.SpotifyMusic_zpdnekdrzrea0"); " is 162.
Long Statement,SpotifyAPI.Local,SpotifyLocalAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,IsSpotifyInstalled,The length of the statement  "                string desktopSpotifyPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' @"Spotify\Spotify.exe"); " is 135.
Long Statement,SpotifyAPI.Local,SpotifyLocalAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,RunSpotify,The length of the statement  "            if (!IsSpotifyRunning() && File.Exists(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' @"spotify\spotify.exe"))) " is 147.
Long Statement,SpotifyAPI.Local,SpotifyLocalAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,RunSpotify,The length of the statement  "                Process.Start(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' @"spotify\spotify.exe")); " is 122.
Long Statement,SpotifyAPI.Local,SpotifyLocalAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,RunSpotifyWebHelper,The length of the statement  "            if (!IsSpotifyWebHelperRunning() && File.Exists(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' @"spotify\data\spotifywebhelper.exe"))) " is 170.
Long Statement,SpotifyAPI.Local,SpotifyLocalAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,RunSpotifyWebHelper,The length of the statement  "                Process.Start(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' @"spotify\data\spotifywebhelper.exe")); " is 136.
Long Statement,SpotifyAPI.Local,SpotifyLocalAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,RunSpotifyWebHelper,The length of the statement  "            else if (!IsSpotifyWebHelperRunning() && File.Exists(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' @"spotify\spotifywebhelper.exe"))) " is 170.
Long Statement,SpotifyAPI.Local,SpotifyLocalAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,RunSpotifyWebHelper,The length of the statement  "                Process.Start(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' @"spotify\spotifywebhelper.exe")); " is 131.
Long Statement,SpotifyAPI.Local.Models,Track,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\Track.cs,GetAlbumArtUrl,The length of the statement  "            if (AlbumResource.Uri == null || !AlbumResource.Uri.Contains("spotify:album:") || AlbumResource.Uri.Contains("spotify:album:0000000000000000000000")) " is 149.
Long Statement,SpotifyAPI.Local.Models,Track,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\Track.cs,GetAlbumArtUrl,The length of the statement  "                wc.Headers.Add("User-Agent"' "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML' like Gecko) Chrome/58.0.3029.110 Safari/537.36"); " is 148.
Long Statement,SpotifyAPI.Local.Models,Track,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\Track.cs,GetAlbumArtUrl,The length of the statement  "                raw = wc.DownloadString("http://open.spotify.com/album/" + AlbumResource.Uri.Split(new[] { ":" }' StringSplitOptions.None)[2]); " is 127.
Long Statement,SpotifyAPI.Web,SimpleHttpServer,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The length of the statement  "                    p.OutputStream.WriteLine("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>"); " is 120.
Long Statement,SpotifyAPI.Web,SimpleHttpServer,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The length of the statement  "                    p.OutputStream.WriteLine("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>"); " is 120.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,GetRecommendations,The length of the statement  "            return DownloadData<Recommendations>(_builder.GetRecommendations(artistSeed' genreSeed' trackSeed' target' min' max' limit' market)); " is 133.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,GetRecommendationsAsync,The length of the statement  "            return DownloadDataAsync<Recommendations>(_builder.GetRecommendations(artistSeed' genreSeed' trackSeed' target' min' max' limit' market)); " is 138.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,Follow,The length of the statement  "            return UploadData<ErrorResponse>(_builder.Follow(followType)' ob.ToString(Formatting.None)' "PUT") ?? new ErrorResponse(); " is 122.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,Unfollow,The length of the statement  "            return UploadData<ErrorResponse>(_builder.Unfollow(followType)' ob.ToString(Formatting.None)' "DELETE") ?? new ErrorResponse(); " is 127.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,UnfollowAsync,The length of the statement  "            return (await UploadDataAsync<ErrorResponse>(_builder.Unfollow(followType)' ob.ToString(Formatting.None)' "DELETE").ConfigureAwait(false)) ?? new ErrorResponse(); " is 162.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,FollowPlaylist,The length of the statement  "            return UploadData<ErrorResponse>(_builder.FollowPlaylist(ownerId' playlistId' showPublic)' body.ToString(Formatting.None)' "PUT"); " is 130.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,FollowPlaylistAsync,The length of the statement  "            return UploadDataAsync<ErrorResponse>(_builder.FollowPlaylist(ownerId' playlistId' showPublic)' body.ToString(Formatting.None)' "PUT"); " is 135.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,SaveTracksAsync,The length of the statement  "            return (await UploadDataAsync<ErrorResponse>(_builder.SaveTracks()' array.ToString(Formatting.None)' "PUT").ConfigureAwait(false)) ?? new ErrorResponse(); " is 154.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,RemoveSavedTracks,The length of the statement  "            return UploadData<ErrorResponse>(_builder.RemoveSavedTracks()' array.ToString(Formatting.None)' "DELETE") ?? new ErrorResponse(); " is 129.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,RemoveSavedTracksAsync,The length of the statement  "            return (await UploadDataAsync<ErrorResponse>(_builder.RemoveSavedTracks()' array.ToString(Formatting.None)' "DELETE").ConfigureAwait(false)) ?? new ErrorResponse(); " is 164.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,SaveAlbumsAsync,The length of the statement  "            return (await UploadDataAsync<ErrorResponse>(_builder.SaveAlbums()' array.ToString(Formatting.None)' "PUT").ConfigureAwait(false)) ?? new ErrorResponse(); " is 154.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,RemoveSavedAlbums,The length of the statement  "            return UploadData<ErrorResponse>(_builder.RemoveSavedAlbums()' array.ToString(Formatting.None)' "DELETE") ?? new ErrorResponse(); " is 129.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,RemoveSavedAlbumsAsync,The length of the statement  "            return (await UploadDataAsync<ErrorResponse>(_builder.RemoveSavedAlbums()' array.ToString(Formatting.None)' "DELETE").ConfigureAwait(false)) ?? new ErrorResponse(); " is 164.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,GetPlaylistTracks,The length of the statement  "            return DownloadData<Paging<PlaylistTrack>>(_builder.GetPlaylistTracks(userId' playlistId' fields' limit' offset' market)); " is 122.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,GetPlaylistTracksAsync,The length of the statement  "            return DownloadDataAsync<Paging<PlaylistTrack>>(_builder.GetPlaylistTracks(userId' playlistId' fields' limit' offset' market)); " is 127.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,CreatePlaylist,The length of the statement  "            return UploadData<FullPlaylist>(_builder.CreatePlaylist(userId' playlistName' isPublic)' body.ToString(Formatting.None)); " is 121.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,CreatePlaylistAsync,The length of the statement  "            return UploadDataAsync<FullPlaylist>(_builder.CreatePlaylist(userId' playlistName' isPublic)' body.ToString(Formatting.None)); " is 126.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,UpdatePlaylist,The length of the statement  "            return UploadData<ErrorResponse>(_builder.UpdatePlaylist(userId' playlistId)' body.ToString(Formatting.None)' "PUT") ?? new ErrorResponse(); " is 140.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,UpdatePlaylistAsync,The length of the statement  "            return (await UploadDataAsync<ErrorResponse>(_builder.UpdatePlaylist(userId' playlistId)' body.ToString(Formatting.None)' "PUT").ConfigureAwait(false)) ?? new ErrorResponse(); " is 175.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,ReplacePlaylistTracks,The length of the statement  "            return UploadData<ErrorResponse>(_builder.ReplacePlaylistTracks(userId' playlistId)' body.ToString(Formatting.None)' "PUT") ?? new ErrorResponse(); " is 147.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,ReplacePlaylistTracksAsync,The length of the statement  "            return await (UploadDataAsync<ErrorResponse>(_builder.ReplacePlaylistTracks(userId' playlistId)' body.ToString(Formatting.None)' "PUT").ConfigureAwait(false)) ?? new ErrorResponse(); " is 182.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,RemovePlaylistTracks,The length of the statement  "            return UploadData<ErrorResponse>(_builder.RemovePlaylistTracks(userId' playlistId' uris)' body.ToString(Formatting.None)' "DELETE") ?? new ErrorResponse(); " is 155.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,RemovePlaylistTracksAsync,The length of the statement  "            return await (UploadDataAsync<ErrorResponse>(_builder.RemovePlaylistTracks(userId' playlistId' uris)' body.ToString(Formatting.None)' "DELETE").ConfigureAwait(false)) ?? new ErrorResponse(); " is 190.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,AddPlaylistTracks,The length of the statement  "            return UploadData<ErrorResponse>(_builder.AddPlaylistTracks(userId' playlistId' uris' position)' body.ToString(Formatting.None)) ?? new ErrorResponse(); " is 152.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,AddPlaylistTracksAsync,The length of the statement  "            return await (UploadDataAsync<ErrorResponse>(_builder.AddPlaylistTracks(userId' playlistId' uris' position)' body.ToString(Formatting.None)).ConfigureAwait(false)) ?? new ErrorResponse(); " is 187.
Empty Catch Block,SpotifyAPI.Web,HttpServer,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,AcceptTcpConnection,The method has an empty catch block.
Magic Number,SpotifyAPI.Local,ExtendedWebClient,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\ExtendedWebClient.cs,ExtendedWebClient,The following statement contains a magic number: Timeout = 2000;
Magic Number,SpotifyAPI.Local,VolumeMixerControl,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\VolumeMixerControl.cs,GetSpotifyVolume,The following statement contains a magic number: return level * 100;
Magic Number,SpotifyAPI.Local,VolumeMixerControl,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\VolumeMixerControl.cs,SetSpotifyVolume,The following statement contains a magic number: volume.SetMasterVolume(level / 100' ref guid);
Magic Number,SpotifyAPI.Local,RemoteHandler,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\RemoteHandler.cs,GetTimestamp,The following statement contains a magic number: return Convert.ToInt32((DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0)).TotalSeconds);
Magic Number,SpotifyAPI.Local,SpotifyLocalAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,SetSpotifyVolume,The following statement contains a magic number: if (volume < 0 || volume > 100)                  throw new ArgumentOutOfRangeException(nameof(volume));
Magic Number,SpotifyAPI.Local.Models,SpotifyUri,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\SpotifyUri.cs,Parse,The following statement contains a magic number: if (props.Length < 3 || !Enum.TryParse(props[1]' out uriType))                  throw new ArgumentException("Unexpected Uri");
Magic Number,SpotifyAPI.Local.Models,SpotifyUri,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\SpotifyUri.cs,Parse,The following statement contains a magic number: Dictionary<UriType' string> properties = new Dictionary<UriType' string> { { uriType' props[2] } };
Magic Number,SpotifyAPI.Local.Models,SpotifyUri,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\SpotifyUri.cs,Parse,The following statement contains a magic number: for (int index = 3; index < props.Length; index += 2)              {                  UriType type = UriType.none;                  if (Enum.TryParse(props[index]' out type))                      properties.Add(type' props[index + 1]);              }
Magic Number,SpotifyAPI.Local.Models,SpotifyUri,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\SpotifyUri.cs,Parse,The following statement contains a magic number: for (int index = 3; index < props.Length; index += 2)              {                  UriType type = UriType.none;                  if (Enum.TryParse(props[index]' out type))                      properties.Add(type' props[index + 1]);              }
Magic Number,SpotifyAPI.Local.Models,Track,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\Track.cs,GetAlbumArtUrl,The following statement contains a magic number: switch (size)              {                  case AlbumArtSize.Size160:                      albumsize = 160;                      break;                    case AlbumArtSize.Size320:                      albumsize = 320;                      break;                    case AlbumArtSize.Size640:                      albumsize = 640;                      break;              }
Magic Number,SpotifyAPI.Local.Models,Track,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\Track.cs,GetAlbumArtUrl,The following statement contains a magic number: switch (size)              {                  case AlbumArtSize.Size160:                      albumsize = 160;                      break;                    case AlbumArtSize.Size320:                      albumsize = 320;                      break;                    case AlbumArtSize.Size640:                      albumsize = 640;                      break;              }
Magic Number,SpotifyAPI.Local.Models,Track,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\Track.cs,GetAlbumArtUrl,The following statement contains a magic number: switch (size)              {                  case AlbumArtSize.Size160:                      albumsize = 160;                      break;                    case AlbumArtSize.Size320:                      albumsize = 320;                      break;                    case AlbumArtSize.Size640:                      albumsize = 640;                      break;              }
Magic Number,SpotifyAPI.Local.Models,Track,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\Track.cs,GetAlbumArtUrl,The following statement contains a magic number: using (WebClient wc = new WebClient())              {                  wc.Headers.Add("User-Agent"' "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML' like Gecko) Chrome/58.0.3029.110 Safari/537.36");                  raw = wc.DownloadString("http://open.spotify.com/album/" + AlbumResource.Uri.Split(new[] { ":" }' StringSplitOptions.None)[2]);              }
Magic Number,SpotifyAPI.Local.Models,Track,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\Track.cs,GetAlbumArtUrl,The following statement contains a magic number: foreach (string line in lines)              {                  MatchCollection matches = rgx.Matches(line);                  if (matches.Count > 0)                  {                      string content = matches[0].Groups[1].Value;                      string[] l = content.Split(new[] { "/" }' StringSplitOptions.None);                      return "http://o.scdn.co/" + albumsize + @"/" + l[4];                  }              }
Magic Number,SpotifyAPI.Web,HttpProcessor,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,GetIncomingRequest,The following statement contains a magic number: var buffer = new byte[4096];
Magic Number,SpotifyAPI.Web,HttpProcessor,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,ParseRequest,The following statement contains a magic number: if (tokens.Length < 2)              {                  throw new Exception("Invalid HTTP request line");              }
Magic Number,SpotifyAPI.Web,HttpServer,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,Listen,The following statement contains a magic number: try              {                  _listener = new TcpListener(IPAddress.Any' Port);                  _listener.Start();                    _listener.BeginAcceptTcpClient(AcceptTcpConnection' _listener);                }              catch (SocketException e)              {                  if (e.ErrorCode != 10004) //Ignore 10004' which is thrown when the thread gets terminated                      throw;              }
Magic Number,SpotifyAPI.Web,SimpleHttpServer,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The following statement contains a magic number: if (_type == AuthType.Authorization)              {                  string url = p.HttpUrl;                  url = url.Substring(2' url.Length - 2);                  NameValueCollection col = HttpUtility.ParseQueryString(url);                  if (col.Keys.Get(0) != "code")                  {                       p.OutputStream.WriteLine("<html><body><h1>Spotify Auth canceled!</h1></body></html>");                      t = new Thread(o =>                      {                          OnAuth?.Invoke(new AuthEventArgs()                          {                              State = col.Get(1)'                              Error = col.Get(0)'                          });                      });                  }                  else                  {                      p.OutputStream.WriteLine("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>");                      t = new Thread(o =>                      {                          OnAuth?.Invoke(new AuthEventArgs()                          {                              Code = col.Get(0)'                              State = col.Get(1)                          });                      });                  }              }              else              {                  if (p.HttpUrl == "/")                  {                      p.OutputStream.WriteLine("<html><body>" +                                               "<script>" +                                               "" +                                               "var hashes = window.location.hash;" +                                               "hashes = hashes.replace('#'''&');" +                                               "window.location = hashes" +                                               "</script>" +                                               "<h1>Spotify Auth successful!<br>Please copy the URL and paste it into the application</h1></body></html>");                      p.OutputStream.Flush();                      p.OutputStream.Close();                      return;                  }                  string url = p.HttpUrl;                  url = url.Substring(2' url.Length - 2);                  NameValueCollection col = HttpUtility.ParseQueryString(url);                  if (col.Keys.Get(0) != "access_token")                  {                      p.OutputStream.WriteLine("<html><body><h1>Spotify Auth canceled!</h1></body></html>");                      t = new Thread(o =>                      {                          OnAuth?.Invoke(new AuthEventArgs()                          {                              Error = col.Get(0)'                              State = col.Get(1)                          });                      });                  }                  else                  {                      p.OutputStream.WriteLine("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>");                      t = new Thread(o =>                      {                          OnAuth?.Invoke(new AuthEventArgs()                          {                              Code = col.Get(0)'                              TokenType = col.Get(1)'                              ExpiresIn = Convert.ToInt32(col.Get(2))'                              State = col.Get(3)                          });                      });                      p.OutputStream.Flush();                      p.OutputStream.Close();                  }              }
Magic Number,SpotifyAPI.Web,SimpleHttpServer,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The following statement contains a magic number: if (_type == AuthType.Authorization)              {                  string url = p.HttpUrl;                  url = url.Substring(2' url.Length - 2);                  NameValueCollection col = HttpUtility.ParseQueryString(url);                  if (col.Keys.Get(0) != "code")                  {                       p.OutputStream.WriteLine("<html><body><h1>Spotify Auth canceled!</h1></body></html>");                      t = new Thread(o =>                      {                          OnAuth?.Invoke(new AuthEventArgs()                          {                              State = col.Get(1)'                              Error = col.Get(0)'                          });                      });                  }                  else                  {                      p.OutputStream.WriteLine("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>");                      t = new Thread(o =>                      {                          OnAuth?.Invoke(new AuthEventArgs()                          {                              Code = col.Get(0)'                              State = col.Get(1)                          });                      });                  }              }              else              {                  if (p.HttpUrl == "/")                  {                      p.OutputStream.WriteLine("<html><body>" +                                               "<script>" +                                               "" +                                               "var hashes = window.location.hash;" +                                               "hashes = hashes.replace('#'''&');" +                                               "window.location = hashes" +                                               "</script>" +                                               "<h1>Spotify Auth successful!<br>Please copy the URL and paste it into the application</h1></body></html>");                      p.OutputStream.Flush();                      p.OutputStream.Close();                      return;                  }                  string url = p.HttpUrl;                  url = url.Substring(2' url.Length - 2);                  NameValueCollection col = HttpUtility.ParseQueryString(url);                  if (col.Keys.Get(0) != "access_token")                  {                      p.OutputStream.WriteLine("<html><body><h1>Spotify Auth canceled!</h1></body></html>");                      t = new Thread(o =>                      {                          OnAuth?.Invoke(new AuthEventArgs()                          {                              Error = col.Get(0)'                              State = col.Get(1)                          });                      });                  }                  else                  {                      p.OutputStream.WriteLine("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>");                      t = new Thread(o =>                      {                          OnAuth?.Invoke(new AuthEventArgs()                          {                              Code = col.Get(0)'                              TokenType = col.Get(1)'                              ExpiresIn = Convert.ToInt32(col.Get(2))'                              State = col.Get(3)                          });                      });                      p.OutputStream.Flush();                      p.OutputStream.Close();                  }              }
Magic Number,SpotifyAPI.Web,SimpleHttpServer,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The following statement contains a magic number: if (_type == AuthType.Authorization)              {                  string url = p.HttpUrl;                  url = url.Substring(2' url.Length - 2);                  NameValueCollection col = HttpUtility.ParseQueryString(url);                  if (col.Keys.Get(0) != "code")                  {                       p.OutputStream.WriteLine("<html><body><h1>Spotify Auth canceled!</h1></body></html>");                      t = new Thread(o =>                      {                          OnAuth?.Invoke(new AuthEventArgs()                          {                              State = col.Get(1)'                              Error = col.Get(0)'                          });                      });                  }                  else                  {                      p.OutputStream.WriteLine("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>");                      t = new Thread(o =>                      {                          OnAuth?.Invoke(new AuthEventArgs()                          {                              Code = col.Get(0)'                              State = col.Get(1)                          });                      });                  }              }              else              {                  if (p.HttpUrl == "/")                  {                      p.OutputStream.WriteLine("<html><body>" +                                               "<script>" +                                               "" +                                               "var hashes = window.location.hash;" +                                               "hashes = hashes.replace('#'''&');" +                                               "window.location = hashes" +                                               "</script>" +                                               "<h1>Spotify Auth successful!<br>Please copy the URL and paste it into the application</h1></body></html>");                      p.OutputStream.Flush();                      p.OutputStream.Close();                      return;                  }                  string url = p.HttpUrl;                  url = url.Substring(2' url.Length - 2);                  NameValueCollection col = HttpUtility.ParseQueryString(url);                  if (col.Keys.Get(0) != "access_token")                  {                      p.OutputStream.WriteLine("<html><body><h1>Spotify Auth canceled!</h1></body></html>");                      t = new Thread(o =>                      {                          OnAuth?.Invoke(new AuthEventArgs()                          {                              Error = col.Get(0)'                              State = col.Get(1)                          });                      });                  }                  else                  {                      p.OutputStream.WriteLine("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>");                      t = new Thread(o =>                      {                          OnAuth?.Invoke(new AuthEventArgs()                          {                              Code = col.Get(0)'                              TokenType = col.Get(1)'                              ExpiresIn = Convert.ToInt32(col.Get(2))'                              State = col.Get(3)                          });                      });                      p.OutputStream.Flush();                      p.OutputStream.Close();                  }              }
Magic Number,SpotifyAPI.Web,SimpleHttpServer,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The following statement contains a magic number: if (_type == AuthType.Authorization)              {                  string url = p.HttpUrl;                  url = url.Substring(2' url.Length - 2);                  NameValueCollection col = HttpUtility.ParseQueryString(url);                  if (col.Keys.Get(0) != "code")                  {                       p.OutputStream.WriteLine("<html><body><h1>Spotify Auth canceled!</h1></body></html>");                      t = new Thread(o =>                      {                          OnAuth?.Invoke(new AuthEventArgs()                          {                              State = col.Get(1)'                              Error = col.Get(0)'                          });                      });                  }                  else                  {                      p.OutputStream.WriteLine("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>");                      t = new Thread(o =>                      {                          OnAuth?.Invoke(new AuthEventArgs()                          {                              Code = col.Get(0)'                              State = col.Get(1)                          });                      });                  }              }              else              {                  if (p.HttpUrl == "/")                  {                      p.OutputStream.WriteLine("<html><body>" +                                               "<script>" +                                               "" +                                               "var hashes = window.location.hash;" +                                               "hashes = hashes.replace('#'''&');" +                                               "window.location = hashes" +                                               "</script>" +                                               "<h1>Spotify Auth successful!<br>Please copy the URL and paste it into the application</h1></body></html>");                      p.OutputStream.Flush();                      p.OutputStream.Close();                      return;                  }                  string url = p.HttpUrl;                  url = url.Substring(2' url.Length - 2);                  NameValueCollection col = HttpUtility.ParseQueryString(url);                  if (col.Keys.Get(0) != "access_token")                  {                      p.OutputStream.WriteLine("<html><body><h1>Spotify Auth canceled!</h1></body></html>");                      t = new Thread(o =>                      {                          OnAuth?.Invoke(new AuthEventArgs()                          {                              Error = col.Get(0)'                              State = col.Get(1)                          });                      });                  }                  else                  {                      p.OutputStream.WriteLine("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>");                      t = new Thread(o =>                      {                          OnAuth?.Invoke(new AuthEventArgs()                          {                              Code = col.Get(0)'                              TokenType = col.Get(1)'                              ExpiresIn = Convert.ToInt32(col.Get(2))'                              State = col.Get(3)                          });                      });                      p.OutputStream.Flush();                      p.OutputStream.Close();                  }              }
Magic Number,SpotifyAPI.Web,SimpleHttpServer,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The following statement contains a magic number: if (_type == AuthType.Authorization)              {                  string url = p.HttpUrl;                  url = url.Substring(2' url.Length - 2);                  NameValueCollection col = HttpUtility.ParseQueryString(url);                  if (col.Keys.Get(0) != "code")                  {                       p.OutputStream.WriteLine("<html><body><h1>Spotify Auth canceled!</h1></body></html>");                      t = new Thread(o =>                      {                          OnAuth?.Invoke(new AuthEventArgs()                          {                              State = col.Get(1)'                              Error = col.Get(0)'                          });                      });                  }                  else                  {                      p.OutputStream.WriteLine("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>");                      t = new Thread(o =>                      {                          OnAuth?.Invoke(new AuthEventArgs()                          {                              Code = col.Get(0)'                              State = col.Get(1)                          });                      });                  }              }              else              {                  if (p.HttpUrl == "/")                  {                      p.OutputStream.WriteLine("<html><body>" +                                               "<script>" +                                               "" +                                               "var hashes = window.location.hash;" +                                               "hashes = hashes.replace('#'''&');" +                                               "window.location = hashes" +                                               "</script>" +                                               "<h1>Spotify Auth successful!<br>Please copy the URL and paste it into the application</h1></body></html>");                      p.OutputStream.Flush();                      p.OutputStream.Close();                      return;                  }                  string url = p.HttpUrl;                  url = url.Substring(2' url.Length - 2);                  NameValueCollection col = HttpUtility.ParseQueryString(url);                  if (col.Keys.Get(0) != "access_token")                  {                      p.OutputStream.WriteLine("<html><body><h1>Spotify Auth canceled!</h1></body></html>");                      t = new Thread(o =>                      {                          OnAuth?.Invoke(new AuthEventArgs()                          {                              Error = col.Get(0)'                              State = col.Get(1)                          });                      });                  }                  else                  {                      p.OutputStream.WriteLine("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>");                      t = new Thread(o =>                      {                          OnAuth?.Invoke(new AuthEventArgs()                          {                              Code = col.Get(0)'                              TokenType = col.Get(1)'                              ExpiresIn = Convert.ToInt32(col.Get(2))'                              State = col.Get(3)                          });                      });                      p.OutputStream.Flush();                      p.OutputStream.Close();                  }              }
Magic Number,SpotifyAPI.Web,SimpleHttpServer,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The following statement contains a magic number: if (_type == AuthType.Authorization)              {                  string url = p.HttpUrl;                  url = url.Substring(2' url.Length - 2);                  NameValueCollection col = HttpUtility.ParseQueryString(url);                  if (col.Keys.Get(0) != "code")                  {                       p.OutputStream.WriteLine("<html><body><h1>Spotify Auth canceled!</h1></body></html>");                      t = new Thread(o =>                      {                          OnAuth?.Invoke(new AuthEventArgs()                          {                              State = col.Get(1)'                              Error = col.Get(0)'                          });                      });                  }                  else                  {                      p.OutputStream.WriteLine("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>");                      t = new Thread(o =>                      {                          OnAuth?.Invoke(new AuthEventArgs()                          {                              Code = col.Get(0)'                              State = col.Get(1)                          });                      });                  }              }              else              {                  if (p.HttpUrl == "/")                  {                      p.OutputStream.WriteLine("<html><body>" +                                               "<script>" +                                               "" +                                               "var hashes = window.location.hash;" +                                               "hashes = hashes.replace('#'''&');" +                                               "window.location = hashes" +                                               "</script>" +                                               "<h1>Spotify Auth successful!<br>Please copy the URL and paste it into the application</h1></body></html>");                      p.OutputStream.Flush();                      p.OutputStream.Close();                      return;                  }                  string url = p.HttpUrl;                  url = url.Substring(2' url.Length - 2);                  NameValueCollection col = HttpUtility.ParseQueryString(url);                  if (col.Keys.Get(0) != "access_token")                  {                      p.OutputStream.WriteLine("<html><body><h1>Spotify Auth canceled!</h1></body></html>");                      t = new Thread(o =>                      {                          OnAuth?.Invoke(new AuthEventArgs()                          {                              Error = col.Get(0)'                              State = col.Get(1)                          });                      });                  }                  else                  {                      p.OutputStream.WriteLine("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>");                      t = new Thread(o =>                      {                          OnAuth?.Invoke(new AuthEventArgs()                          {                              Code = col.Get(0)'                              TokenType = col.Get(1)'                              ExpiresIn = Convert.ToInt32(col.Get(2))'                              State = col.Get(3)                          });                      });                      p.OutputStream.Flush();                      p.OutputStream.Close();                  }              }
Magic Number,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,ReplacePlaylistTracks,The following statement contains a magic number: JObject body = new JObject              {                  {"uris"' new JArray(uris.Take(100))}              };
Magic Number,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,ReplacePlaylistTracksAsync,The following statement contains a magic number: JObject body = new JObject              {                  {"uris"' new JArray(uris.Take(100))}              };
Magic Number,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,RemovePlaylistTracks,The following statement contains a magic number: JObject body = new JObject              {                  {"tracks"' JArray.FromObject(uris.Take(100))}              };
Magic Number,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,RemovePlaylistTracksAsync,The following statement contains a magic number: JObject body = new JObject              {                  {"tracks"' JArray.FromObject(uris.Take(100))}              };
Magic Number,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,AddPlaylistTracks,The following statement contains a magic number: JObject body = new JObject              {                  {"uris"' JArray.FromObject(uris.Take(100))}              };
Magic Number,SpotifyAPI.Web,SpotifyWebAPI,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,AddPlaylistTracksAsync,The following statement contains a magic number: JObject body = new JObject              {                  {"uris"' JArray.FromObject(uris.Take(100))}              };
Magic Number,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,SearchItems,The following statement contains a magic number: limit = Math.Min(50' limit);
Magic Number,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetAlbumTracks,The following statement contains a magic number: limit = Math.Min(limit' 50);
Magic Number,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetSeveralAlbums,The following statement contains a magic number: if (string.IsNullOrEmpty(market))                  return $"{APIBase}/albums?ids={string.Join("'"' ids.Take(20))}";
Magic Number,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetSeveralAlbums,The following statement contains a magic number: return $"{APIBase}/albums?market={market}&ids={string.Join("'"' ids.Take(20))}";
Magic Number,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetArtistsAlbums,The following statement contains a magic number: limit = Math.Min(limit' 50);
Magic Number,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetSeveralArtists,The following statement contains a magic number: return $"{APIBase}/artists?ids={string.Join("'"' ids.Take(50))}";
Magic Number,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetFeaturedPlaylists,The following statement contains a magic number: limit = Math.Min(limit' 50);
Magic Number,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetNewAlbumReleases,The following statement contains a magic number: limit = Math.Min(limit' 50);
Magic Number,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetCategories,The following statement contains a magic number: limit = Math.Min(50' limit);
Magic Number,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetCategoryPlaylists,The following statement contains a magic number: limit = Math.Min(50' limit);
Magic Number,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetRecommendations,The following statement contains a magic number: limit = Math.Min(100' limit);
Magic Number,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetFollowedArtists,The following statement contains a magic number: limit = Math.Min(limit' 50);
Magic Number,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetSavedTracks,The following statement contains a magic number: limit = Math.Min(limit' 50);
Magic Number,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetSavedAlbums,The following statement contains a magic number: limit = Math.Min(limit' 50);
Magic Number,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetUsersTopTracks,The following statement contains a magic number: limit = Math.Min(50' limit);
Magic Number,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetUsersTopArtists,The following statement contains a magic number: limit = Math.Min(50' limit);
Magic Number,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetUsersRecentlyPlayedTracks,The following statement contains a magic number: limit = Math.Min(50' limit);
Magic Number,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetUserPlaylists,The following statement contains a magic number: limit = Math.Min(limit' 50);
Magic Number,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetPlaylistTracks,The following statement contains a magic number: limit = Math.Min(limit' 100);
Magic Number,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetSeveralTracks,The following statement contains a magic number: if (string.IsNullOrEmpty(market))                  return $"{APIBase}/tracks?ids={string.Join("'"' ids.Take(50))}";
Magic Number,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetSeveralTracks,The following statement contains a magic number: return $"{APIBase}/tracks?market={market}&ids={string.Join("'"' ids.Take(50))}";
Magic Number,SpotifyAPI.Web,SpotifyWebBuilder,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetSeveralAudioFeatures,The following statement contains a magic number: return $"{APIBase}/audio-features?ids={string.Join("'"' ids.Take(100))}";
Magic Number,SpotifyAPI.Web,Util,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\Util.cs,ToUnixTimeMillisecondsPoly,The following statement contains a magic number: return (int)time.Subtract(new DateTime(1970' 1' 1)).TotalMilliseconds;
Missing Default,SpotifyAPI.Local.Models,Track,C:\repos\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\Track.cs,GetAlbumArtUrl,The following switch statement is missing a default case: switch (size)              {                  case AlbumArtSize.Size160:                      albumsize = 160;                      break;                    case AlbumArtSize.Size320:                      albumsize = 320;                      break;                    case AlbumArtSize.Size640:                      albumsize = 640;                      break;              }
