Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SpotifyAPI.Local,RemoteHandler,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\RemoteHandler.cs,Query,Cyclomatic complexity of the method is 9
Complex Method,SpotifyAPI.Local,RemoteHandler,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\RemoteHandler.cs,QueryAsync,Cyclomatic complexity of the method is 9
Complex Method,SpotifyAPI.Local,SpotifyLocalAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,ElapsedTick,Cyclomatic complexity of the method is 9
Complex Method,SpotifyAPI.Local.Models,Track,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\Track.cs,GetAlbumArtUrl,Cyclomatic complexity of the method is 13
Long Parameter List,SpotifyAPI.Web.Auth,WebAPIFactory,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\Auth\WebAPIFactory.cs,WebAPIFactory,The method has 6 parameters.
Long Parameter List,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,SearchItems,The method has 5 parameters.
Long Parameter List,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,SearchItemsAsync,The method has 5 parameters.
Long Parameter List,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,GetArtistsAlbums,The method has 5 parameters.
Long Parameter List,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,GetArtistsAlbumsAsync,The method has 5 parameters.
Long Parameter List,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,GetFeaturedPlaylists,The method has 5 parameters.
Long Parameter List,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,GetFeaturedPlaylistsAsync,The method has 5 parameters.
Long Parameter List,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,GetRecommendations,The method has 8 parameters.
Long Parameter List,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,GetRecommendationsAsync,The method has 8 parameters.
Long Parameter List,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,GetPlaylistTracks,The method has 6 parameters.
Long Parameter List,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,GetPlaylistTracksAsync,The method has 6 parameters.
Long Parameter List,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,ReorderPlaylist,The method has 6 parameters.
Long Parameter List,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,ReorderPlaylistAsync,The method has 6 parameters.
Long Parameter List,SpotifyAPI.Web,SpotifyWebBuilder,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,SearchItems,The method has 5 parameters.
Long Statement,SpotifyAPI.Local,RemoteHandler,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\RemoteHandler.cs,SendPlayRequest,The length of the statement  "	// TODO: instead of having an empty context' one way to fix the bug with the playback time beyond the length of a song would be to provide a 1-song context' and it would be fixed. " is 179.
Long Statement,SpotifyAPI.Local,SpotifyLocalAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,RunSpotify,The length of the statement  "	if (!IsSpotifyRunning () && File.Exists (Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData)' @"spotify\spotify.exe"))) " is 151.
Long Statement,SpotifyAPI.Local,SpotifyLocalAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,RunSpotify,The length of the statement  "		Process.Start (Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData)' @"spotify\spotify.exe")); " is 125.
Long Statement,SpotifyAPI.Local,SpotifyLocalAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,RunSpotifyWebHelper,The length of the statement  "	if (!IsSpotifyWebHelperRunning () && File.Exists (Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData)' @"spotify\data\spotifywebhelper.exe"))) { " is 176.
Long Statement,SpotifyAPI.Local,SpotifyLocalAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,RunSpotifyWebHelper,The length of the statement  "		Process.Start (Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData)' @"spotify\data\spotifywebhelper.exe")); " is 139.
Long Statement,SpotifyAPI.Local,SpotifyLocalAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,RunSpotifyWebHelper,The length of the statement  "	} else if (!IsSpotifyWebHelperRunning () && File.Exists (Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData)' @"spotify\spotifywebhelper.exe"))) { " is 178.
Long Statement,SpotifyAPI.Local,SpotifyLocalAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,RunSpotifyWebHelper,The length of the statement  "		Process.Start (Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData)' @"spotify\spotifywebhelper.exe")); " is 134.
Long Statement,SpotifyAPI.Local.Models,Track,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\Track.cs,GetAlbumArtUrl,The length of the statement  "	if (AlbumResource.Uri == null || !AlbumResource.Uri.Contains ("spotify:album:") || AlbumResource.Uri.Contains ("spotify:album:0000000000000000000000")) " is 151.
Long Statement,SpotifyAPI.Web.Auth,AutorizationCodeAuth,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\Auth\AutorizationCodeAuth.cs,RefreshToken,The length of the statement  "		wc.Headers.Add ("Authorization"' "Basic " + Convert.ToBase64String (Encoding.UTF8.GetBytes (ClientId + ":" + clientSecret))); " is 125.
Long Statement,SpotifyAPI.Web.Auth,ClientCredentialsAuth,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\Auth\ClientCredentialsAuth.cs,DoAuth,The length of the statement  "		wc.Headers.Add ("Authorization"' "Basic " + Convert.ToBase64String (Encoding.UTF8.GetBytes (ClientId + ":" + ClientSecret))); " is 125.
Long Statement,SpotifyAPI.Web,SimpleHttpServer,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The length of the statement  "			p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>"); " is 121.
Long Statement,SpotifyAPI.Web,SimpleHttpServer,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The length of the statement  "			p.OutputStream.WriteLine ("<html><body>" + "<script>" + "" + "var hashes = window.location.hash;" + "hashes = hashes.replace('#'''&');" + "window.location = hashes" + "</script>" + "<h1>Spotify Auth successful!<br>Please copy the URL and paste it into the application</h1></body></html>"); " is 289.
Long Statement,SpotifyAPI.Web,SimpleHttpServer,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The length of the statement  "			p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>"); " is 121.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,GetFeaturedPlaylistsAsync,The length of the statement  "	return DownloadDataAsync<FeaturedPlaylists> (_builder.GetFeaturedPlaylists (locale' country' timestamp' limit' offset)); " is 120.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,GetRecommendations,The length of the statement  "	return DownloadData<Recommendations> (_builder.GetRecommendations (artistSeed' genreSeed' trackSeed' target' min' max' limit' market)); " is 135.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,GetRecommendationsAsync,The length of the statement  "	return DownloadDataAsync<Recommendations> (_builder.GetRecommendations (artistSeed' genreSeed' trackSeed' target' min' max' limit' market)); " is 140.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,Follow,The length of the statement  "	return UploadData<ErrorResponse> (_builder.Follow (followType)' ob.ToString (Formatting.None)' "PUT") ?? new ErrorResponse (); " is 126.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,FollowAsync,The length of the statement  "	return (await UploadDataAsync<ErrorResponse> (_builder.Follow (followType)' ob.ToString (Formatting.None)' "PUT").ConfigureAwait (false)) ?? new ErrorResponse (); " is 162.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,Unfollow,The length of the statement  "	return UploadData<ErrorResponse> (_builder.Unfollow (followType)' ob.ToString (Formatting.None)' "DELETE") ?? new ErrorResponse (); " is 131.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,UnfollowAsync,The length of the statement  "	return (await UploadDataAsync<ErrorResponse> (_builder.Unfollow (followType)' ob.ToString (Formatting.None)' "DELETE").ConfigureAwait (false)) ?? new ErrorResponse (); " is 167.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,FollowPlaylist,The length of the statement  "	return UploadData<ErrorResponse> (_builder.FollowPlaylist (ownerId' playlistId' showPublic)' body.ToString (Formatting.None)' "PUT"); " is 133.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,FollowPlaylistAsync,The length of the statement  "	return UploadDataAsync<ErrorResponse> (_builder.FollowPlaylist (ownerId' playlistId' showPublic)' body.ToString (Formatting.None)' "PUT"); " is 138.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,SaveTracks,The length of the statement  "	return UploadData<ErrorResponse> (_builder.SaveTracks ()' array.ToString (Formatting.None)' "PUT") ?? new ErrorResponse (); " is 123.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,SaveTracksAsync,The length of the statement  "	return (await UploadDataAsync<ErrorResponse> (_builder.SaveTracks ()' array.ToString (Formatting.None)' "PUT").ConfigureAwait (false)) ?? new ErrorResponse (); " is 159.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,RemoveSavedTracks,The length of the statement  "	return UploadData<ErrorResponse> (_builder.RemoveSavedTracks ()' array.ToString (Formatting.None)' "DELETE") ?? new ErrorResponse (); " is 133.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,RemoveSavedTracksAsync,The length of the statement  "	return (await UploadDataAsync<ErrorResponse> (_builder.RemoveSavedTracks ()' array.ToString (Formatting.None)' "DELETE").ConfigureAwait (false)) ?? new ErrorResponse (); " is 169.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,SaveAlbums,The length of the statement  "	return UploadData<ErrorResponse> (_builder.SaveAlbums ()' array.ToString (Formatting.None)' "PUT") ?? new ErrorResponse (); " is 123.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,SaveAlbumsAsync,The length of the statement  "	return (await UploadDataAsync<ErrorResponse> (_builder.SaveAlbums ()' array.ToString (Formatting.None)' "PUT").ConfigureAwait (false)) ?? new ErrorResponse (); " is 159.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,RemoveSavedAlbums,The length of the statement  "	return UploadData<ErrorResponse> (_builder.RemoveSavedAlbums ()' array.ToString (Formatting.None)' "DELETE") ?? new ErrorResponse (); " is 133.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,RemoveSavedAlbumsAsync,The length of the statement  "	return (await UploadDataAsync<ErrorResponse> (_builder.RemoveSavedAlbums ()' array.ToString (Formatting.None)' "DELETE").ConfigureAwait (false)) ?? new ErrorResponse (); " is 169.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,GetPlaylistTracks,The length of the statement  "	return DownloadData<Paging<PlaylistTrack>> (_builder.GetPlaylistTracks (userId' playlistId' fields' limit' offset' market)); " is 124.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,GetPlaylistTracksAsync,The length of the statement  "	return DownloadDataAsync<Paging<PlaylistTrack>> (_builder.GetPlaylistTracks (userId' playlistId' fields' limit' offset' market)); " is 129.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,CreatePlaylist,The length of the statement  "	return UploadData<FullPlaylist> (_builder.CreatePlaylist (userId' playlistName' isPublic)' body.ToString (Formatting.None)); " is 124.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,CreatePlaylistAsync,The length of the statement  "	return UploadDataAsync<FullPlaylist> (_builder.CreatePlaylist (userId' playlistName' isPublic)' body.ToString (Formatting.None)); " is 129.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,UpdatePlaylist,The length of the statement  "	return UploadData<ErrorResponse> (_builder.UpdatePlaylist (userId' playlistId)' body.ToString (Formatting.None)' "PUT") ?? new ErrorResponse (); " is 144.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,UpdatePlaylistAsync,The length of the statement  "	return (await UploadDataAsync<ErrorResponse> (_builder.UpdatePlaylist (userId' playlistId)' body.ToString (Formatting.None)' "PUT").ConfigureAwait (false)) ?? new ErrorResponse (); " is 180.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,ReplacePlaylistTracks,The length of the statement  "	return UploadData<ErrorResponse> (_builder.ReplacePlaylistTracks (userId' playlistId)' body.ToString (Formatting.None)' "PUT") ?? new ErrorResponse (); " is 151.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,ReplacePlaylistTracksAsync,The length of the statement  "	return await(UploadDataAsync<ErrorResponse> (_builder.ReplacePlaylistTracks (userId' playlistId)' body.ToString (Formatting.None)' "PUT").ConfigureAwait (false)) ?? new ErrorResponse (); " is 186.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,RemovePlaylistTracks,The length of the statement  "	return UploadData<ErrorResponse> (_builder.RemovePlaylistTracks (userId' playlistId' uris)' body.ToString (Formatting.None)' "DELETE") ?? new ErrorResponse (); " is 159.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,RemovePlaylistTracksAsync,The length of the statement  "	return await(UploadDataAsync<ErrorResponse> (_builder.RemovePlaylistTracks (userId' playlistId' uris)' body.ToString (Formatting.None)' "DELETE").ConfigureAwait (false)) ?? new ErrorResponse (); " is 194.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,AddPlaylistTracks,The length of the statement  "	return UploadData<ErrorResponse> (_builder.AddPlaylistTracks (userId' playlistId' uris' position)' body.ToString (Formatting.None)) ?? new ErrorResponse (); " is 156.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,AddPlaylistTracksAsync,The length of the statement  "	return await(UploadDataAsync<ErrorResponse> (_builder.AddPlaylistTracks (userId' playlistId' uris' position)' body.ToString (Formatting.None)).ConfigureAwait (false)) ?? new ErrorResponse (); " is 191.
Long Statement,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,ReorderPlaylistAsync,The length of the statement  "	return UploadDataAsync<Snapshot> (_builder.ReorderPlaylist (userId' playlistId)' body.ToString (Formatting.None)' "PUT"); " is 121.
Long Statement,SpotifyAPI.Web,Util,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\Util.cs,GetStringAttribute,The length of the statement  "	IEnumerable<StringAttribute> attributes = Enum.GetValues (typeof(T)).Cast<T> ().Where (v => e.HasFlag ((Enum)(object)v)).Select (v => typeof(T).GetField (v.ToString (CultureInfo.InvariantCulture))).Select (f => f.GetCustomAttributes (typeof(StringAttribute)' false) [0]).Cast<StringAttribute> (); " is 296.
Long Statement,SpotifyAPI.Web,SpotifyWebClient,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebClient.cs,Upload,The length of the statement  "		response = new Tuple<ResponseInfo' string> (data.Item1' data.Item2.Length > 0 ? _encoding.GetString (data.Item2) : "{}"); " is 121.
Long Statement,SpotifyAPI.Web,SpotifyWebClient,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebClient.cs,UploadAsync,The length of the statement  "		response = new Tuple<ResponseInfo' string> (data.Item1' data.Item2.Length > 0 ? _encoding.GetString (data.Item2) : "{}"); " is 121.
Long Statement,SpotifyAPI.Web,SpotifyWebClient,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebClient.cs,GetHeaders,The length of the statement  "	return _webClient.Headers.AllKeys.Select (header => new KeyValuePair<string' string> (header' _webClient.Headers [header])).ToList (); " is 134.
Complex Conditional,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,DownloadList,The conditional expression  "UseAutoRetry && triesLeft > 0 && lastError != null && RetryErrorCodes.Contains (lastError.Status)"  is complex.
Complex Conditional,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,DownloadListAsync,The conditional expression  "UseAutoRetry && triesLeft > 0 && lastError != null && RetryErrorCodes.Contains (lastError.Status)"  is complex.
Complex Conditional,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,UploadData,The conditional expression  "UseAutoRetry && triesLeft > 0 && lastError != null && RetryErrorCodes.Contains (lastError.Status)"  is complex.
Complex Conditional,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,UploadDataAsync,The conditional expression  "UseAutoRetry && triesLeft > 0 && lastError != null && RetryErrorCodes.Contains (lastError.Status)"  is complex.
Complex Conditional,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,DownloadData,The conditional expression  "UseAutoRetry && triesLeft > 0 && lastError != null && RetryErrorCodes.Contains (lastError.Status)"  is complex.
Complex Conditional,SpotifyAPI.Web,SpotifyWebAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebAPI.cs,DownloadDataAsync,The conditional expression  "UseAutoRetry && triesLeft > 0 && lastError != null && RetryErrorCodes.Contains (lastError.Status)"  is complex.
Empty Catch Block,SpotifyAPI.Web,HttpServer,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,AcceptTcpConnection,The method has an empty catch block.
Magic Number,SpotifyAPI.Local,ExtendedWebClient,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\ExtendedWebClient.cs,ExtendedWebClient,The following statement contains a magic number: Timeout = 2000;  
Magic Number,SpotifyAPI.Local,VolumeMixerControl,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\VolumeMixerControl.cs,GetSpotifyVolume,The following statement contains a magic number: return level * 100;  
Magic Number,SpotifyAPI.Local,VolumeMixerControl,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\VolumeMixerControl.cs,SetSpotifyVolume,The following statement contains a magic number: volume.SetMasterVolume (level / 100' ref guid);  
Magic Number,SpotifyAPI.Local,RemoteHandler,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\RemoteHandler.cs,GetTimestamp,The following statement contains a magic number: return Convert.ToInt32 ((DateTime.UtcNow - new DateTime (1970' 1' 1' 0' 0' 0)).TotalSeconds);  
Magic Number,SpotifyAPI.Local,SpotifyLocalAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,Mute,The following statement contains a magic number: if (Environment.OSVersion.Version.Major < 6)  	throw new NotSupportedException ("This feature is only available on Windows 7 or newer");  
Magic Number,SpotifyAPI.Local,SpotifyLocalAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,Mute,The following statement contains a magic number: if (Environment.OSVersion.Version.Major == 6)  	if (Environment.OSVersion.Version.Minor == 0)  		throw new NotSupportedException ("This feature is only available on Windows 7 or newer");  
Magic Number,SpotifyAPI.Local,SpotifyLocalAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,UnMute,The following statement contains a magic number: if (Environment.OSVersion.Version.Major < 6)  	throw new NotSupportedException ("This feature is only available on Windows 7 or newer");  
Magic Number,SpotifyAPI.Local,SpotifyLocalAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,UnMute,The following statement contains a magic number: if (Environment.OSVersion.Version.Major == 6)  	if (Environment.OSVersion.Version.Minor == 0)  		throw new NotSupportedException ("This feature is only available on Windows 7 or newer");  
Magic Number,SpotifyAPI.Local,SpotifyLocalAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,IsSpotifyMuted,The following statement contains a magic number: if (Environment.OSVersion.Version.Major < 6)  	throw new NotSupportedException ("This feature is only available on Windows 7 or newer");  
Magic Number,SpotifyAPI.Local,SpotifyLocalAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,IsSpotifyMuted,The following statement contains a magic number: if (Environment.OSVersion.Version.Major == 6)  	if (Environment.OSVersion.Version.Minor == 0)  		throw new NotSupportedException ("This feature is only available on Windows 7 or newer");  
Magic Number,SpotifyAPI.Local,SpotifyLocalAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,SetSpotifyVolume,The following statement contains a magic number: if (Environment.OSVersion.Version.Major < 6)  	throw new NotSupportedException ("This feature is only available on Windows 7 or newer");  
Magic Number,SpotifyAPI.Local,SpotifyLocalAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,SetSpotifyVolume,The following statement contains a magic number: if (Environment.OSVersion.Version.Major == 6)  	if (Environment.OSVersion.Version.Minor == 0)  		throw new NotSupportedException ("This feature is only available on Windows 7 or newer");  
Magic Number,SpotifyAPI.Local,SpotifyLocalAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,SetSpotifyVolume,The following statement contains a magic number: if (volume < 0 || volume > 100)  	throw new ArgumentOutOfRangeException (nameof (volume));  
Magic Number,SpotifyAPI.Local,SpotifyLocalAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,GetSpotifyVolume,The following statement contains a magic number: if (Environment.OSVersion.Version.Major < 6)  	throw new NotSupportedException ("This feature is only available on Windows 7 or newer");  
Magic Number,SpotifyAPI.Local,SpotifyLocalAPI,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\SpotifyLocalAPI.cs,GetSpotifyVolume,The following statement contains a magic number: if (Environment.OSVersion.Version.Major == 6)  	if (Environment.OSVersion.Version.Minor == 0)  		throw new NotSupportedException ("This feature is only available on Windows 7 or newer");  
Magic Number,SpotifyAPI.Local.Models,SpotifyUri,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\SpotifyUri.cs,Parse,The following statement contains a magic number: if (props.Length != 3)  	throw new ArgumentException ("Unexpected Uri");  
Magic Number,SpotifyAPI.Local.Models,SpotifyUri,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\SpotifyUri.cs,Parse,The following statement contains a magic number: return new SpotifyUri (props [0]' props [1]' props [2]);  
Magic Number,SpotifyAPI.Local.Models,Track,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\Track.cs,GetAlbumArtUrl,The following statement contains a magic number: switch (size) {  case AlbumArtSize.Size160:  	albumsize = 160;  	break;  case AlbumArtSize.Size320:  	albumsize = 320;  	break;  case AlbumArtSize.Size640:  	albumsize = 640;  	break;  }  
Magic Number,SpotifyAPI.Local.Models,Track,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\Track.cs,GetAlbumArtUrl,The following statement contains a magic number: switch (size) {  case AlbumArtSize.Size160:  	albumsize = 160;  	break;  case AlbumArtSize.Size320:  	albumsize = 320;  	break;  case AlbumArtSize.Size640:  	albumsize = 640;  	break;  }  
Magic Number,SpotifyAPI.Local.Models,Track,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\Track.cs,GetAlbumArtUrl,The following statement contains a magic number: switch (size) {  case AlbumArtSize.Size160:  	albumsize = 160;  	break;  case AlbumArtSize.Size320:  	albumsize = 320;  	break;  case AlbumArtSize.Size640:  	albumsize = 640;  	break;  }  
Magic Number,SpotifyAPI.Local.Models,Track,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\Track.cs,GetAlbumArtUrl,The following statement contains a magic number: albumsize = 160;  
Magic Number,SpotifyAPI.Local.Models,Track,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\Track.cs,GetAlbumArtUrl,The following statement contains a magic number: albumsize = 320;  
Magic Number,SpotifyAPI.Local.Models,Track,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\Track.cs,GetAlbumArtUrl,The following statement contains a magic number: albumsize = 640;  
Magic Number,SpotifyAPI.Local.Models,Track,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\Track.cs,GetAlbumArtUrl,The following statement contains a magic number: using (WebClient wc = new WebClient ()) {  	wc.Proxy = null;  	raw = wc.DownloadString ("http://open.spotify.com/album/" + AlbumResource.Uri.Split (new[] {  		":"  	}' StringSplitOptions.None) [2]);  }  
Magic Number,SpotifyAPI.Local.Models,Track,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\Track.cs,GetAlbumArtUrl,The following statement contains a magic number: raw = wc.DownloadString ("http://open.spotify.com/album/" + AlbumResource.Uri.Split (new[] {  	":"  }' StringSplitOptions.None) [2]);  
Magic Number,SpotifyAPI.Local.Models,Track,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\Track.cs,GetAlbumArtUrl,The following statement contains a magic number: foreach (string line in lines) {  	if (line.Trim ().Contains ("<meta property=\"og:image\"")) {  		int start = line.IndexOf (startString' 0) + startString.Length;  		int end = line.IndexOf (endString' start);  		string content = line.Substring (start' end - start);  		string[] l = content.Split (new[] {  			"/"  		}' StringSplitOptions.None);  		return "http://o.scdn.co/" + albumsize + @"/" + l [4].Replace ("\""' "").Replace (">"' "");  	}  }  
Magic Number,SpotifyAPI.Local.Models,Track,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\Track.cs,GetAlbumArtUrl,The following statement contains a magic number: if (line.Trim ().Contains ("<meta property=\"og:image\"")) {  	int start = line.IndexOf (startString' 0) + startString.Length;  	int end = line.IndexOf (endString' start);  	string content = line.Substring (start' end - start);  	string[] l = content.Split (new[] {  		"/"  	}' StringSplitOptions.None);  	return "http://o.scdn.co/" + albumsize + @"/" + l [4].Replace ("\""' "").Replace (">"' "");  }  
Magic Number,SpotifyAPI.Local.Models,Track,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\Track.cs,GetAlbumArtUrl,The following statement contains a magic number: return "http://o.scdn.co/" + albumsize + @"/" + l [4].Replace ("\""' "").Replace (">"' "");  
Magic Number,SpotifyAPI.Web,HttpProcessor,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,ParseRequest,The following statement contains a magic number: if (tokens.Length < 2) {  	throw new Exception ("Invalid HTTP request line");  }  
Magic Number,SpotifyAPI.Web,HttpServer,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,Listen,The following statement contains a magic number: try {  	_listener = new TcpListener (IPAddress.Any' Port);  	_listener.Start ();  	_listener.BeginAcceptTcpClient (AcceptTcpConnection' _listener);  } catch (SocketException e) {  	if (e.ErrorCode != 10004)  		//Ignore 10004' which is thrown when the thread gets terminated  		throw;  }  
Magic Number,SpotifyAPI.Web,HttpServer,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,Listen,The following statement contains a magic number: if (e.ErrorCode != 10004)  	//Ignore 10004' which is thrown when the thread gets terminated  	throw;  
Magic Number,SpotifyAPI.Web,SimpleHttpServer,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The following statement contains a magic number: if (_type == AuthType.Authorization) {  	string url = p.HttpUrl;  	url = url.Substring (2' url.Length - 2);  	NameValueCollection col = HttpUtility.ParseQueryString (url);  	if (col.Keys.Get (0) != "code") {  		p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth canceled!</h1></body></html>");  		t = new Thread (o => {  			OnAuth.Invoke (new AuthEventArgs () {  				State = col.Get (1)'  				Error = col.Get (0)'  			});  		});  	} else {  		p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>");  		t = new Thread (o => {  			OnAuth.Invoke (new AuthEventArgs () {  				Code = col.Get (0)'  				State = col.Get (1)  			});  		});  	}  } else {  	if (p.HttpUrl == "/") {  		p.OutputStream.WriteLine ("<html><body>" + "<script>" + "" + "var hashes = window.location.hash;" + "hashes = hashes.replace('#'''&');" + "window.location = hashes" + "</script>" + "<h1>Spotify Auth successful!<br>Please copy the URL and paste it into the application</h1></body></html>");  		p.OutputStream.Flush ();  		p.OutputStream.Close ();  		return;  	}  	string url = p.HttpUrl;  	url = url.Substring (2' url.Length - 2);  	NameValueCollection col = HttpUtility.ParseQueryString (url);  	if (col.Keys.Get (0) != "access_token") {  		p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth canceled!</h1></body></html>");  		t = new Thread (o => {  			OnAuth.Invoke (new AuthEventArgs () {  				Error = col.Get (0)'  				State = col.Get (1)  			});  		});  	} else {  		p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>");  		t = new Thread (o => {  			OnAuth.Invoke (new AuthEventArgs () {  				Code = col.Get (0)'  				TokenType = col.Get (1)'  				ExpiresIn = Convert.ToInt32 (col.Get (2))'  				State = col.Get (3)  			});  		});  		p.OutputStream.Flush ();  		p.OutputStream.Close ();  	}  }  
Magic Number,SpotifyAPI.Web,SimpleHttpServer,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The following statement contains a magic number: if (_type == AuthType.Authorization) {  	string url = p.HttpUrl;  	url = url.Substring (2' url.Length - 2);  	NameValueCollection col = HttpUtility.ParseQueryString (url);  	if (col.Keys.Get (0) != "code") {  		p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth canceled!</h1></body></html>");  		t = new Thread (o => {  			OnAuth.Invoke (new AuthEventArgs () {  				State = col.Get (1)'  				Error = col.Get (0)'  			});  		});  	} else {  		p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>");  		t = new Thread (o => {  			OnAuth.Invoke (new AuthEventArgs () {  				Code = col.Get (0)'  				State = col.Get (1)  			});  		});  	}  } else {  	if (p.HttpUrl == "/") {  		p.OutputStream.WriteLine ("<html><body>" + "<script>" + "" + "var hashes = window.location.hash;" + "hashes = hashes.replace('#'''&');" + "window.location = hashes" + "</script>" + "<h1>Spotify Auth successful!<br>Please copy the URL and paste it into the application</h1></body></html>");  		p.OutputStream.Flush ();  		p.OutputStream.Close ();  		return;  	}  	string url = p.HttpUrl;  	url = url.Substring (2' url.Length - 2);  	NameValueCollection col = HttpUtility.ParseQueryString (url);  	if (col.Keys.Get (0) != "access_token") {  		p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth canceled!</h1></body></html>");  		t = new Thread (o => {  			OnAuth.Invoke (new AuthEventArgs () {  				Error = col.Get (0)'  				State = col.Get (1)  			});  		});  	} else {  		p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>");  		t = new Thread (o => {  			OnAuth.Invoke (new AuthEventArgs () {  				Code = col.Get (0)'  				TokenType = col.Get (1)'  				ExpiresIn = Convert.ToInt32 (col.Get (2))'  				State = col.Get (3)  			});  		});  		p.OutputStream.Flush ();  		p.OutputStream.Close ();  	}  }  
Magic Number,SpotifyAPI.Web,SimpleHttpServer,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The following statement contains a magic number: if (_type == AuthType.Authorization) {  	string url = p.HttpUrl;  	url = url.Substring (2' url.Length - 2);  	NameValueCollection col = HttpUtility.ParseQueryString (url);  	if (col.Keys.Get (0) != "code") {  		p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth canceled!</h1></body></html>");  		t = new Thread (o => {  			OnAuth.Invoke (new AuthEventArgs () {  				State = col.Get (1)'  				Error = col.Get (0)'  			});  		});  	} else {  		p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>");  		t = new Thread (o => {  			OnAuth.Invoke (new AuthEventArgs () {  				Code = col.Get (0)'  				State = col.Get (1)  			});  		});  	}  } else {  	if (p.HttpUrl == "/") {  		p.OutputStream.WriteLine ("<html><body>" + "<script>" + "" + "var hashes = window.location.hash;" + "hashes = hashes.replace('#'''&');" + "window.location = hashes" + "</script>" + "<h1>Spotify Auth successful!<br>Please copy the URL and paste it into the application</h1></body></html>");  		p.OutputStream.Flush ();  		p.OutputStream.Close ();  		return;  	}  	string url = p.HttpUrl;  	url = url.Substring (2' url.Length - 2);  	NameValueCollection col = HttpUtility.ParseQueryString (url);  	if (col.Keys.Get (0) != "access_token") {  		p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth canceled!</h1></body></html>");  		t = new Thread (o => {  			OnAuth.Invoke (new AuthEventArgs () {  				Error = col.Get (0)'  				State = col.Get (1)  			});  		});  	} else {  		p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>");  		t = new Thread (o => {  			OnAuth.Invoke (new AuthEventArgs () {  				Code = col.Get (0)'  				TokenType = col.Get (1)'  				ExpiresIn = Convert.ToInt32 (col.Get (2))'  				State = col.Get (3)  			});  		});  		p.OutputStream.Flush ();  		p.OutputStream.Close ();  	}  }  
Magic Number,SpotifyAPI.Web,SimpleHttpServer,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The following statement contains a magic number: if (_type == AuthType.Authorization) {  	string url = p.HttpUrl;  	url = url.Substring (2' url.Length - 2);  	NameValueCollection col = HttpUtility.ParseQueryString (url);  	if (col.Keys.Get (0) != "code") {  		p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth canceled!</h1></body></html>");  		t = new Thread (o => {  			OnAuth.Invoke (new AuthEventArgs () {  				State = col.Get (1)'  				Error = col.Get (0)'  			});  		});  	} else {  		p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>");  		t = new Thread (o => {  			OnAuth.Invoke (new AuthEventArgs () {  				Code = col.Get (0)'  				State = col.Get (1)  			});  		});  	}  } else {  	if (p.HttpUrl == "/") {  		p.OutputStream.WriteLine ("<html><body>" + "<script>" + "" + "var hashes = window.location.hash;" + "hashes = hashes.replace('#'''&');" + "window.location = hashes" + "</script>" + "<h1>Spotify Auth successful!<br>Please copy the URL and paste it into the application</h1></body></html>");  		p.OutputStream.Flush ();  		p.OutputStream.Close ();  		return;  	}  	string url = p.HttpUrl;  	url = url.Substring (2' url.Length - 2);  	NameValueCollection col = HttpUtility.ParseQueryString (url);  	if (col.Keys.Get (0) != "access_token") {  		p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth canceled!</h1></body></html>");  		t = new Thread (o => {  			OnAuth.Invoke (new AuthEventArgs () {  				Error = col.Get (0)'  				State = col.Get (1)  			});  		});  	} else {  		p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>");  		t = new Thread (o => {  			OnAuth.Invoke (new AuthEventArgs () {  				Code = col.Get (0)'  				TokenType = col.Get (1)'  				ExpiresIn = Convert.ToInt32 (col.Get (2))'  				State = col.Get (3)  			});  		});  		p.OutputStream.Flush ();  		p.OutputStream.Close ();  	}  }  
Magic Number,SpotifyAPI.Web,SimpleHttpServer,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The following statement contains a magic number: if (_type == AuthType.Authorization) {  	string url = p.HttpUrl;  	url = url.Substring (2' url.Length - 2);  	NameValueCollection col = HttpUtility.ParseQueryString (url);  	if (col.Keys.Get (0) != "code") {  		p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth canceled!</h1></body></html>");  		t = new Thread (o => {  			OnAuth.Invoke (new AuthEventArgs () {  				State = col.Get (1)'  				Error = col.Get (0)'  			});  		});  	} else {  		p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>");  		t = new Thread (o => {  			OnAuth.Invoke (new AuthEventArgs () {  				Code = col.Get (0)'  				State = col.Get (1)  			});  		});  	}  } else {  	if (p.HttpUrl == "/") {  		p.OutputStream.WriteLine ("<html><body>" + "<script>" + "" + "var hashes = window.location.hash;" + "hashes = hashes.replace('#'''&');" + "window.location = hashes" + "</script>" + "<h1>Spotify Auth successful!<br>Please copy the URL and paste it into the application</h1></body></html>");  		p.OutputStream.Flush ();  		p.OutputStream.Close ();  		return;  	}  	string url = p.HttpUrl;  	url = url.Substring (2' url.Length - 2);  	NameValueCollection col = HttpUtility.ParseQueryString (url);  	if (col.Keys.Get (0) != "access_token") {  		p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth canceled!</h1></body></html>");  		t = new Thread (o => {  			OnAuth.Invoke (new AuthEventArgs () {  				Error = col.Get (0)'  				State = col.Get (1)  			});  		});  	} else {  		p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>");  		t = new Thread (o => {  			OnAuth.Invoke (new AuthEventArgs () {  				Code = col.Get (0)'  				TokenType = col.Get (1)'  				ExpiresIn = Convert.ToInt32 (col.Get (2))'  				State = col.Get (3)  			});  		});  		p.OutputStream.Flush ();  		p.OutputStream.Close ();  	}  }  
Magic Number,SpotifyAPI.Web,SimpleHttpServer,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The following statement contains a magic number: if (_type == AuthType.Authorization) {  	string url = p.HttpUrl;  	url = url.Substring (2' url.Length - 2);  	NameValueCollection col = HttpUtility.ParseQueryString (url);  	if (col.Keys.Get (0) != "code") {  		p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth canceled!</h1></body></html>");  		t = new Thread (o => {  			OnAuth.Invoke (new AuthEventArgs () {  				State = col.Get (1)'  				Error = col.Get (0)'  			});  		});  	} else {  		p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>");  		t = new Thread (o => {  			OnAuth.Invoke (new AuthEventArgs () {  				Code = col.Get (0)'  				State = col.Get (1)  			});  		});  	}  } else {  	if (p.HttpUrl == "/") {  		p.OutputStream.WriteLine ("<html><body>" + "<script>" + "" + "var hashes = window.location.hash;" + "hashes = hashes.replace('#'''&');" + "window.location = hashes" + "</script>" + "<h1>Spotify Auth successful!<br>Please copy the URL and paste it into the application</h1></body></html>");  		p.OutputStream.Flush ();  		p.OutputStream.Close ();  		return;  	}  	string url = p.HttpUrl;  	url = url.Substring (2' url.Length - 2);  	NameValueCollection col = HttpUtility.ParseQueryString (url);  	if (col.Keys.Get (0) != "access_token") {  		p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth canceled!</h1></body></html>");  		t = new Thread (o => {  			OnAuth.Invoke (new AuthEventArgs () {  				Error = col.Get (0)'  				State = col.Get (1)  			});  		});  	} else {  		p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>");  		t = new Thread (o => {  			OnAuth.Invoke (new AuthEventArgs () {  				Code = col.Get (0)'  				TokenType = col.Get (1)'  				ExpiresIn = Convert.ToInt32 (col.Get (2))'  				State = col.Get (3)  			});  		});  		p.OutputStream.Flush ();  		p.OutputStream.Close ();  	}  }  
Magic Number,SpotifyAPI.Web,SimpleHttpServer,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The following statement contains a magic number: url = url.Substring (2' url.Length - 2);  
Magic Number,SpotifyAPI.Web,SimpleHttpServer,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The following statement contains a magic number: url = url.Substring (2' url.Length - 2);  
Magic Number,SpotifyAPI.Web,SimpleHttpServer,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The following statement contains a magic number: url = url.Substring (2' url.Length - 2);  
Magic Number,SpotifyAPI.Web,SimpleHttpServer,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The following statement contains a magic number: url = url.Substring (2' url.Length - 2);  
Magic Number,SpotifyAPI.Web,SimpleHttpServer,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The following statement contains a magic number: if (col.Keys.Get (0) != "access_token") {  	p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth canceled!</h1></body></html>");  	t = new Thread (o => {  		OnAuth.Invoke (new AuthEventArgs () {  			Error = col.Get (0)'  			State = col.Get (1)  		});  	});  } else {  	p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>");  	t = new Thread (o => {  		OnAuth.Invoke (new AuthEventArgs () {  			Code = col.Get (0)'  			TokenType = col.Get (1)'  			ExpiresIn = Convert.ToInt32 (col.Get (2))'  			State = col.Get (3)  		});  	});  	p.OutputStream.Flush ();  	p.OutputStream.Close ();  }  
Magic Number,SpotifyAPI.Web,SimpleHttpServer,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The following statement contains a magic number: if (col.Keys.Get (0) != "access_token") {  	p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth canceled!</h1></body></html>");  	t = new Thread (o => {  		OnAuth.Invoke (new AuthEventArgs () {  			Error = col.Get (0)'  			State = col.Get (1)  		});  	});  } else {  	p.OutputStream.WriteLine ("<html><body><h1>Spotify Auth successful!</h1><script>window.close();</script></body></html>");  	t = new Thread (o => {  		OnAuth.Invoke (new AuthEventArgs () {  			Code = col.Get (0)'  			TokenType = col.Get (1)'  			ExpiresIn = Convert.ToInt32 (col.Get (2))'  			State = col.Get (3)  		});  	});  	p.OutputStream.Flush ();  	p.OutputStream.Close ();  }  
Magic Number,SpotifyAPI.Web,SimpleHttpServer,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The following statement contains a magic number: t = new Thread (o => {  	OnAuth.Invoke (new AuthEventArgs () {  		Code = col.Get (0)'  		TokenType = col.Get (1)'  		ExpiresIn = Convert.ToInt32 (col.Get (2))'  		State = col.Get (3)  	});  });  
Magic Number,SpotifyAPI.Web,SimpleHttpServer,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The following statement contains a magic number: t = new Thread (o => {  	OnAuth.Invoke (new AuthEventArgs () {  		Code = col.Get (0)'  		TokenType = col.Get (1)'  		ExpiresIn = Convert.ToInt32 (col.Get (2))'  		State = col.Get (3)  	});  });  
Magic Number,SpotifyAPI.Web,SimpleHttpServer,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The following statement contains a magic number: OnAuth.Invoke (new AuthEventArgs () {  	Code = col.Get (0)'  	TokenType = col.Get (1)'  	ExpiresIn = Convert.ToInt32 (col.Get (2))'  	State = col.Get (3)  });  
Magic Number,SpotifyAPI.Web,SimpleHttpServer,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SimpleHttpServer.cs,HandleGetRequest,The following statement contains a magic number: OnAuth.Invoke (new AuthEventArgs () {  	Code = col.Get (0)'  	TokenType = col.Get (1)'  	ExpiresIn = Convert.ToInt32 (col.Get (2))'  	State = col.Get (3)  });  
Magic Number,SpotifyAPI.Web,SpotifyWebBuilder,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,SearchItems,The following statement contains a magic number: limit = Math.Min (50' limit);  
Magic Number,SpotifyAPI.Web,SpotifyWebBuilder,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\SpotifyWebBuilder.cs,GetAlbumTracks,The following statement contains a magic number: limit = Math.Min (limit' 50);  
Magic Number,SpotifyAPI.Web,Util,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Web\Util.cs,ToUnixTimeMillisecondsPoly,The following statement contains a magic number: return (int)time.Subtract (new DateTime (1970' 1' 1)).TotalMilliseconds;  
Missing Default,SpotifyAPI.Local.Models,Track,F:\newReposMay17\JohnnyCrazy_SpotifyAPI-NET\SpotifyAPI\Local\Models\Track.cs,GetAlbumArtUrl,The following switch statement is missing a default case: switch (size) {  case AlbumArtSize.Size160:  	albumsize = 160;  	break;  case AlbumArtSize.Size320:  	albumsize = 320;  	break;  case AlbumArtSize.Size640:  	albumsize = 640;  	break;  }  
