Implementation smell,Namespace,Class,File,Method,Description
Long Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,bgLoadFacade,The method has 495 lines of code.
Long Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnClicked,The method has 186 lines of code.
Long Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnAction,The method has 125 lines of code.
Long Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,Group_OnItemSelectedDisplay,The method has 100 lines of code.
Long Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The method has 153 lines of code.
Long Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuDatabases,The method has 123 lines of code.
Long Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuGroupEdit,The method has 122 lines of code.
Long Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuGroup,The method has 160 lines of code.
Long Method,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,ParseSource,The method has 105 lines of code.
Long Method,MyAnimePlugin3.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsBakaBT.cs,ParseSource,The method has 142 lines of code.
Long Method,MyAnimePlugin3.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadHelper.cs,SearchTorrents,The method has 128 lines of code.
Long Method,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\MultiSort.cs,MultiSort,The method has 102 lines of code.
Long Method,MyAnimePlugin3.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The method has 112 lines of code.
Long Method,MyAnimePlugin3.ViewModel,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The method has 136 lines of code.
Long Method,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,OnClicked,The method has 102 lines of code.
Complex Method,MyAnimePlugin3,View,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\View.cs,View,Cyclomatic complexity of the method is 11
Complex Method,MyAnimePlugin3,View,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\View.cs,View,Cyclomatic complexity of the method is 38
Complex Method,MyAnimePlugin3,Fanart,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Fanart.cs,Fanart,Cyclomatic complexity of the method is 9
Complex Method,MyAnimePlugin3,MA3WindowManager,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MA3WindowManager.cs,HandleWindowChangeButton,Cyclomatic complexity of the method is 45
Complex Method,MyAnimePlugin3,FacadeHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\FacadeHelper.cs,GetGroupFiltersForPredefined,Cyclomatic complexity of the method is 13
Complex Method,MyAnimePlugin3,ImageAllocator,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ImageAllocator.cs,GetGroupImage,Cyclomatic complexity of the method is 14
Complex Method,MyAnimePlugin3,ImageAllocator,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ImageAllocator.cs,GetGroupImageAsFileName,Cyclomatic complexity of the method is 9
Complex Method,MyAnimePlugin3,ImageAllocator,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ImageAllocator.cs,GetSeriesImage,Cyclomatic complexity of the method is 14
Complex Method,MyAnimePlugin3,ImageAllocator,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ImageAllocator.cs,GetSeriesImageAsFileName,Cyclomatic complexity of the method is 9
Complex Method,MyAnimePlugin3,ImageAllocator,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ImageAllocator.cs,GetAnimeImageAsFileName,Cyclomatic complexity of the method is 9
Complex Method,MyAnimePlugin3,Logos,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Logos.cs,buildLogoImage,Cyclomatic complexity of the method is 15
Complex Method,MyAnimePlugin3,SearchCollection,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\SearchCollection.cs,GetMatch,Cyclomatic complexity of the method is 8
Complex Method,MyAnimePlugin3,SearchCollection,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\SearchCollection.cs,GetMatches,Cyclomatic complexity of the method is 8
Complex Method,MyAnimePlugin3,SkinSettings,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\SkinSettings.cs,GetLogos,Cyclomatic complexity of the method is 12
Complex Method,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,Cyclomatic complexity of the method is 58
Complex Method,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,ReparseDescription,Cyclomatic complexity of the method is 25
Complex Method,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetOSInfo,Cyclomatic complexity of the method is 31
Complex Method,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,Cyclomatic complexity of the method is 9
Complex Method,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,Play,Cyclomatic complexity of the method is 14
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,downloadImagesWorker_DoWork,Cyclomatic complexity of the method is 15
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,EvaluateVisibility,Cyclomatic complexity of the method is 8
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,workerFacade_ProgressChanged,Cyclomatic complexity of the method is 27
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,bgLoadFacade,Cyclomatic complexity of the method is 82
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetEpisodeTypeListItem,Cyclomatic complexity of the method is 8
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetSeriesListItem,Cyclomatic complexity of the method is 19
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetGroupListItem,Cyclomatic complexity of the method is 9
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowLayoutMenu,Cyclomatic complexity of the method is 18
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowDisplayOptionsMenu,Cyclomatic complexity of the method is 8
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowOptionsMenu,Cyclomatic complexity of the method is 9
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowOptionsDisplayMenu,Cyclomatic complexity of the method is 17
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetFacade,Cyclomatic complexity of the method is 18
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnClicked,Cyclomatic complexity of the method is 69
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnAction,Cyclomatic complexity of the method is 46
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,hook_KeyUp,Cyclomatic complexity of the method is 22
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnSearchAction,Cyclomatic complexity of the method is 24
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnSearchChar,Cyclomatic complexity of the method is 11
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,DoSearch,Cyclomatic complexity of the method is 10
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,UpdateSearchPanel,Cyclomatic complexity of the method is 10
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,Cyclomatic complexity of the method is 24
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnFirstStart,Cyclomatic complexity of the method is 9
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,Group_OnItemSelectedDisplay,Cyclomatic complexity of the method is 11
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,Series_OnItemSelected,Cyclomatic complexity of the method is 8
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,Episode_OnItemSelected,Cyclomatic complexity of the method is 12
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnShowContextMenu,Cyclomatic complexity of the method is 16
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTheTvDB,Cyclomatic complexity of the method is 9
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTrakt,Cyclomatic complexity of the method is 9
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTheTvDBMenu,Cyclomatic complexity of the method is 19
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTraktMenu,Cyclomatic complexity of the method is 14
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTheMovieDBMenu,Cyclomatic complexity of the method is 14
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTheMovieDB,Cyclomatic complexity of the method is 10
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchMALMenu,Cyclomatic complexity of the method is 11
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchMAL,Cyclomatic complexity of the method is 10
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,Cyclomatic complexity of the method is 38
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuDatabases,Cyclomatic complexity of the method is 23
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuGroupEdit,Cyclomatic complexity of the method is 20
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuSeriesInfo,Cyclomatic complexity of the method is 8
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuGroup,Cyclomatic complexity of the method is 25
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuImages,Cyclomatic complexity of the method is 12
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuTVDB,Cyclomatic complexity of the method is 11
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuTrakt,Cyclomatic complexity of the method is 10
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuMAL,Cyclomatic complexity of the method is 8
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowSeasonSelectionMenuTvDB,Cyclomatic complexity of the method is 9
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowSeasonSelectionMenuTrakt,Cyclomatic complexity of the method is 9
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuSeriesEdit,Cyclomatic complexity of the method is 16
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuSeries,Cyclomatic complexity of the method is 30
Complex Method,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuPostProcessing,Cyclomatic complexity of the method is 13
Complex Method,MyAnimePlugin3.ConfigFiles,frmConfig,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\frmConfig.cs,cboFileFormat_SelectedIndexChanged,Cyclomatic complexity of the method is 18
Complex Method,MyAnimePlugin3.ConfigFiles,frmConfig,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\frmConfig.cs,LoadSettingsIntoForm,Cyclomatic complexity of the method is 8
Complex Method,MyAnimePlugin3.DataHelpers,FFDShowHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\FFDShowHelper.cs,loadPlayingPreset,Cyclomatic complexity of the method is 11
Complex Method,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes_here,Cyclomatic complexity of the method is 10
Complex Method,MyAnimePlugin3.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsBakaBT.cs,ParseSource,Cyclomatic complexity of the method is 10
Complex Method,MyAnimePlugin3.Downloads,CsvStream,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\CsvStream.cs,GetNextItem,Cyclomatic complexity of the method is 10
Complex Method,MyAnimePlugin3.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadHelper.cs,SearchTorrents,Cyclomatic complexity of the method is 29
Complex Method,MyAnimePlugin3.Downloads,DownloadSearchCriteria,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadSearchCriteria.cs,GetParms,Cyclomatic complexity of the method is 9
Complex Method,MyAnimePlugin3.Downloads,DownloadSearchCriteria,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadSearchCriteria.cs,ToString,Cyclomatic complexity of the method is 11
Complex Method,MyAnimePlugin3.ImageManagement,ImageDownloader,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ImageManagement\ImageDownloader.cs,DownloadAniDBCharactersCreatorsSync,Cyclomatic complexity of the method is 10
Complex Method,MyAnimePlugin3.ImageManagement,ImageDownloader,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ImageManagement\ImageDownloader.cs,GetFileName,Cyclomatic complexity of the method is 25
Complex Method,MyAnimePlugin3.ImageManagement,ImageDownloader,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ImageManagement\ImageDownloader.cs,GetEntityID,Cyclomatic complexity of the method is 25
Complex Method,MyAnimePlugin3.ImageManagement,ImageDownloader,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ImageManagement\ImageDownloader.cs,ProcessImageDownloadRequest,Cyclomatic complexity of the method is 19
Complex Method,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\MultiSort.cs,MultiSort,Cyclomatic complexity of the method is 12
Complex Method,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,Cyclomatic complexity of the method is 24
Complex Method,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,Cyclomatic complexity of the method is 24
Complex Method,MyAnimePlugin3.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,Cyclomatic complexity of the method is 28
Complex Method,MyAnimePlugin3.ViewModel,AniDB_Anime_DefaultImageVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AniDB_Anime_DefaultImageVM.cs,AniDB_Anime_DefaultImageVM,Cyclomatic complexity of the method is 8
Complex Method,MyAnimePlugin3.ViewModel,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,Cyclomatic complexity of the method is 35
Complex Method,MyAnimePlugin3.ViewModel,AnimeSeriesVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AnimeSeriesVM.cs,Populate,Cyclomatic complexity of the method is 11
Complex Method,MyAnimePlugin3.ViewModel,FanartContainer,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\FanartContainer.cs,FanartContainer,Cyclomatic complexity of the method is 18
Complex Method,MyAnimePlugin3.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\GroupFilterHelper.cs,GetTextForEnum_Sorting,Cyclomatic complexity of the method is 13
Complex Method,MyAnimePlugin3.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\GroupFilterHelper.cs,GetSortDescription,Cyclomatic complexity of the method is 53
Complex Method,MyAnimePlugin3.ViewModel,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\GroupFilterVM.cs,Populate,Cyclomatic complexity of the method is 8
Complex Method,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,downloadRecommendedAnimeWorker_DoWork,Cyclomatic complexity of the method is 9
Complex Method,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,downloadRelatedAnimeWorker_DoWork,Cyclomatic complexity of the method is 8
Complex Method,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,SetDefaultPoster,Cyclomatic complexity of the method is 21
Complex Method,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,EnableDisablePoster,Cyclomatic complexity of the method is 22
Complex Method,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,SetDefaultFanart,Cyclomatic complexity of the method is 16
Complex Method,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,EnableDisableFanart,Cyclomatic complexity of the method is 17
Complex Method,MyAnimePlugin3.ViewModel,PosterContainer,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\PosterContainer.cs,PosterContainer,Cyclomatic complexity of the method is 24
Complex Method,MyAnimePlugin3.Windows,ActorWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\ActorWindow.cs,ShowCharacters,Cyclomatic complexity of the method is 11
Complex Method,MyAnimePlugin3.Windows,AdminWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\AdminWindow.cs,OnAction,Cyclomatic complexity of the method is 9
Complex Method,MyAnimePlugin3.Windows,AdminWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\AdminWindow.cs,ShowMoreOptionsMenu,Cyclomatic complexity of the method is 18
Complex Method,MyAnimePlugin3.Windows,AnimeInfoWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\AnimeInfoWindow.cs,OnShowContextMenu,Cyclomatic complexity of the method is 11
Complex Method,MyAnimePlugin3.Windows,AnimeInfoWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\AnimeInfoWindow.cs,OnAction,Cyclomatic complexity of the method is 9
Complex Method,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,LoadData,Cyclomatic complexity of the method is 15
Complex Method,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,OnShowContextMenu,Cyclomatic complexity of the method is 18
Complex Method,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,OnAction,Cyclomatic complexity of the method is 9
Complex Method,MyAnimePlugin3.Windows,CharWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CharWindow.cs,ShowCharacters,Cyclomatic complexity of the method is 10
Complex Method,MyAnimePlugin3.Windows,CharWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CharWindow.cs,SetActorProperties,Cyclomatic complexity of the method is 10
Complex Method,MyAnimePlugin3.Windows,CharWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CharWindow.cs,OnAction,Cyclomatic complexity of the method is 9
Complex Method,MyAnimePlugin3.Windows,ContinueWatchingWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\ContinueWatchingWindow.cs,getDataWorker_RunWorkerCompleted,Cyclomatic complexity of the method is 11
Complex Method,MyAnimePlugin3.Windows,ContinueWatchingWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\ContinueWatchingWindow.cs,SetEpisode,Cyclomatic complexity of the method is 11
Complex Method,MyAnimePlugin3.Windows,ContinueWatchingWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\ContinueWatchingWindow.cs,OnShowContextMenu,Cyclomatic complexity of the method is 36
Complex Method,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,OnAction,Cyclomatic complexity of the method is 9
Complex Method,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,OnClicked,Cyclomatic complexity of the method is 12
Complex Method,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowUTorrentList,Cyclomatic complexity of the method is 17
Complex Method,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,DisplayTorrentFileDetails,Cyclomatic complexity of the method is 12
Complex Method,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,OnMessage,Cyclomatic complexity of the method is 10
Complex Method,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowContextMenuSearch,Cyclomatic complexity of the method is 20
Complex Method,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowBrowseSources,Cyclomatic complexity of the method is 20
Complex Method,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowContextMenuTorrents,Cyclomatic complexity of the method is 20
Complex Method,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowContextMenuTorrentFiles,Cyclomatic complexity of the method is 16
Complex Method,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,OnShowContextMenu,Cyclomatic complexity of the method is 12
Complex Method,MyAnimePlugin3.Windows,FanartWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\FanartWindow.cs,UpdateLayoutButton,Cyclomatic complexity of the method is 19
Complex Method,MyAnimePlugin3.Windows,FanartWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\FanartWindow.cs,ShowFanart,Cyclomatic complexity of the method is 8
Complex Method,MyAnimePlugin3.Windows,FanartWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\FanartWindow.cs,OnClicked,Cyclomatic complexity of the method is 29
Complex Method,MyAnimePlugin3.Windows,FanartWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\FanartWindow.cs,OnAction,Cyclomatic complexity of the method is 12
Complex Method,MyAnimePlugin3.Windows,PosterWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\PosterWindow.cs,ShowPosters,Cyclomatic complexity of the method is 9
Complex Method,MyAnimePlugin3.Windows,PosterWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\PosterWindow.cs,OnAction,Cyclomatic complexity of the method is 12
Complex Method,MyAnimePlugin3.Windows,PosterWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\PosterWindow.cs,OnClicked,Cyclomatic complexity of the method is 15
Complex Method,MyAnimePlugin3.Windows,PosterWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\PosterWindow.cs,UpdateLayoutButton,Cyclomatic complexity of the method is 16
Complex Method,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,SetDetails,Cyclomatic complexity of the method is 8
Complex Method,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,GetSeriesForGroupFilter,Cyclomatic complexity of the method is 24
Complex Method,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,GetSeriesForGroup,Cyclomatic complexity of the method is 14
Complex Method,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,SetRandomEpisode,Cyclomatic complexity of the method is 20
Complex Method,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,DisplayEpisode,Cyclomatic complexity of the method is 10
Complex Method,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,OnClicked,Cyclomatic complexity of the method is 25
Complex Method,MyAnimePlugin3.Windows,RecommendationsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RecommendationsWindow.cs,OnShowContextMenu,Cyclomatic complexity of the method is 23
Complex Method,MyAnimePlugin3.Windows,RecommendationsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RecommendationsWindow.cs,OnClicked,Cyclomatic complexity of the method is 15
Complex Method,MyAnimePlugin3.Windows,RelationsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RelationsWindow.cs,ShowRelations,Cyclomatic complexity of the method is 11
Complex Method,MyAnimePlugin3.Windows,RelationsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RelationsWindow.cs,OnAction,Cyclomatic complexity of the method is 9
Complex Method,MyAnimePlugin3.Windows,WideBannerWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\WideBannerWindow.cs,OnAction,Cyclomatic complexity of the method is 9
Complex Method,MyAnimePlugin3.Windows,WideBannerWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\WideBannerWindow.cs,UpdateLayoutButton,Cyclomatic complexity of the method is 15
Complex Method,MyAnimePlugin3.Windows,WideBannerWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\WideBannerWindow.cs,OnShowContextMenu,Cyclomatic complexity of the method is 8
Long Parameter List,MyAnimePlugin3,KeyEventArgsEx,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\KeyboardHook.cs,ToAscii,The method has 5 parameters.
Long Parameter List,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,CallWindowProc,The method has 5 parameters.
Long Parameter List,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,LinkAniDBToTVDB,The method has 7 parameters.
Long Parameter List,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,FF,The method has 6 parameters.
Long Parameter List,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,GG,The method has 6 parameters.
Long Parameter List,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,HH,The method has 6 parameters.
Long Parameter List,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,FF,The method has 6 parameters.
Long Parameter List,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,GG,The method has 6 parameters.
Long Parameter List,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,HH,The method has 6 parameters.
Long Parameter List,WindowPlugins.Anime2.MediaInfoLib,MediaInfo,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MediaInfo.cs,MediaInfo_Get,The method has 6 parameters.
Long Parameter List,WindowPlugins.Anime2.MediaInfoLib,MediaInfo,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MediaInfo.cs,Get,The method has 5 parameters.
Long Parameter List,MyAnimePlugin3.JMMServerBinary,IJMMServer,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Service References\JMMServerBinary\Reference.cs,LinkAniDBMAL,The method has 5 parameters.
Long Parameter List,MyAnimePlugin3.JMMServerBinary,IJMMServer,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Service References\JMMServerBinary\Reference.cs,LinkAniDBMALUpdated,The method has 7 parameters.
Long Parameter List,MyAnimePlugin3.JMMServerBinary,IJMMServer,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Service References\JMMServerBinary\Reference.cs,SetDefaultImage,The method has 5 parameters.
Long Parameter List,MyAnimePlugin3.JMMServerBinary,IJMMServer,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Service References\JMMServerBinary\Reference.cs,SetWatchedStatusOnSeries,The method has 5 parameters.
Long Parameter List,MyAnimePlugin3.JMMServerBinary,IJMMServer,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Service References\JMMServerBinary\Reference.cs,GetFilesByGroupAndResolution,The method has 6 parameters.
Long Parameter List,MyAnimePlugin3.JMMServerBinary,IJMMServer,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Service References\JMMServerBinary\Reference.cs,LinkAniDBTvDB,The method has 7 parameters.
Long Parameter List,MyAnimePlugin3.JMMServerBinary,IJMMServer,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Service References\JMMServerBinary\Reference.cs,RemoveLinkAniDBTvDB,The method has 6 parameters.
Long Parameter List,MyAnimePlugin3.JMMServerBinary,JMMServerClient,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Service References\JMMServerBinary\Reference.cs,LinkAniDBMAL,The method has 5 parameters.
Long Parameter List,MyAnimePlugin3.JMMServerBinary,JMMServerClient,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Service References\JMMServerBinary\Reference.cs,LinkAniDBMALUpdated,The method has 7 parameters.
Long Parameter List,MyAnimePlugin3.JMMServerBinary,JMMServerClient,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Service References\JMMServerBinary\Reference.cs,SetDefaultImage,The method has 5 parameters.
Long Parameter List,MyAnimePlugin3.JMMServerBinary,JMMServerClient,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Service References\JMMServerBinary\Reference.cs,SetWatchedStatusOnSeries,The method has 5 parameters.
Long Parameter List,MyAnimePlugin3.JMMServerBinary,JMMServerClient,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Service References\JMMServerBinary\Reference.cs,GetFilesByGroupAndResolution,The method has 6 parameters.
Long Parameter List,MyAnimePlugin3.JMMServerBinary,JMMServerClient,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Service References\JMMServerBinary\Reference.cs,LinkAniDBTvDB,The method has 7 parameters.
Long Parameter List,MyAnimePlugin3.JMMServerBinary,JMMServerClient,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Service References\JMMServerBinary\Reference.cs,RemoveLinkAniDBTvDB,The method has 6 parameters.
Long Statement,MyAnimePlugin3,View,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\View.cs,ContentEquals,The length of the statement  "	if ((_showTypeCompleted != view._showTypeCompleted) || (_showTypeNewEps != view._showTypeNewEps) || (_showTypeNewSeason != view._showTypeNewSeason) || (_showTypeWatched != view._showTypeWatched) || (_showTypeFavorite != view._showTypeFavorite) || (_showTypeAdultContent != view._showTypeAdultContent) || (_showTypeMissingEpisodes != view._showTypeMissingEpisodes) || (_showTypeBluRay != view._showTypeBluRay) || (_showTypeDVD != view._showTypeDVD) || (_showTypeRecentlyWatched != view._showTypeRecentlyWatched)) " is 511.
Long Statement,MyAnimePlugin3,View,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\View.cs,ContentEquals,The length of the statement  "	if (_dctGenre.Count != view._dctGenre.Count || (_dctYear.Count != view._dctYear.Count) || (_dctAudioLang.Count != view._dctAudioLang.Count) || (_dctSubtitleLang.Count != view._dctSubtitleLang.Count) || (_dctAnimeType.Count != view._dctAnimeType.Count)) " is 252.
Long Statement,MyAnimePlugin3,View,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\View.cs,UpdateDefault,The length of the statement  "	_showByDefault = (_showTypeCompleted != eShowType.show) && (_showTypeNewEps != eShowType.show) && (_showTypeNewSeason != eShowType.show) && (_showTypeWatched != eShowType.show) && (_showTypeFavorite != eShowType.show) && (_showTypeAdultContent != eShowType.show) && (_showTypeMissingEpisodes != eShowType.show) && (_showTypeRecentlyWatched != eShowType.show) && (_showTypeBluRay != eShowType.show) && (_showTypeDVD != eShowType.show) && (!ItemIsShown (_dctGenre)) && (!ItemIsShown (_dctYear)) && (!ItemIsShown (_dctAudioLang)) && (!ItemIsShown (_dctSubtitleLang)) && (!ItemIsShown (_dctAnimeType)); " is 598.
Long Statement,MyAnimePlugin3,Fanart,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Fanart.cs,GetColor,The length of the statement  "		return System.Drawing.Color.FromArgb (100' Int32.Parse (rgbValues [0])' Int32.Parse (rgbValues [1])' Int32.Parse (rgbValues [2])); " is 130.
Long Statement,MyAnimePlugin3,AnimePluginSettings,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\AnimePluginSettings.cs,Load,The length of the statement  "	MediaPortal.Profile.Settings xmlreader = new MediaPortal.Profile.Settings (Config.GetFile (Config.Dir.Config' "MediaPortal.xml")); " is 130.
Long Statement,MyAnimePlugin3,AnimePluginSettings,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\AnimePluginSettings.cs,Load,The length of the statement  "	fileSelectionDisplayFormat = xmlreader.GetValueAsString ("Anime3"' "FileSelectionDisplayFormat"' @"<AnGroupShort> - <FileRes> / <FileSource> / <VideoBitDepth>bit"); " is 164.
Long Statement,MyAnimePlugin3,AnimePluginSettings,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\AnimePluginSettings.cs,Load,The length of the statement  "	FfdshowNotificationsAutoCloseTime = int.Parse (xmlreader.GetValueAsString ("Anime3"' "FfdshowNotificationsAutoCloseTime"' "3000")); " is 131.
Long Statement,MyAnimePlugin3,AnimePluginSettings,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\AnimePluginSettings.cs,Load,The length of the statement  "	FfdshowNotificationsLockTime = int.Parse (xmlreader.GetValueAsString ("Anime3"' "FfdshowNotificationsLockTime"' "5000")); " is 121.
Long Statement,MyAnimePlugin3,AnimePluginSettings,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\AnimePluginSettings.cs,Save,The length of the statement  "	using (MediaPortal.Profile.Settings xmlwriter = new MediaPortal.Profile.Settings (Config.GetFile (Config.Dir.Config' "MediaPortal.xml"))) { " is 139.
Long Statement,MyAnimePlugin3,AnimePluginSettings,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\AnimePluginSettings.cs,Save,The length of the statement  "		xmlwriter.SetValue ("Anime3"' "FfdshowNotificationsAutoCloseTime"' ((int)FfdshowNotificationsAutoCloseTime).ToString ()); " is 121.
Long Statement,MyAnimePlugin3,FacadeHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\FacadeHelper.cs,ProximityForEach,The length of the statement  "		throw new ArgumentOutOfRangeException ("startElement"' startElement' "startElement must be > 0 and <= elements.Count (" + elements.Count + ")"); " is 144.
Long Statement,MyAnimePlugin3,FacadeHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\FacadeHelper.cs,GetGroupFiltersForPredefined,The length of the statement  "		List<JMMServerBinary.Contract_AnimeSeries> contracts = JMMServerVM.Instance.clientBinaryHTTP.GetAllSeries (JMMServerVM.Instance.CurrentUser.JMMUserID); " is 151.
Long Statement,MyAnimePlugin3,ImageAllocator,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ImageAllocator.cs,drawSimpleBanner,The length of the statement  "	//gph.FillRectangle(new SolidBrush(Color.FromArgb(50' Color.White))' new Rectangle(0' 0' sizeImage.Width' sizeImage.Height)); " is 125.
Long Statement,MyAnimePlugin3,ImageAllocator,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ImageAllocator.cs,drawSimpleBanner,The length of the statement  "	gph.DrawString (label' font' new SolidBrush (Color.FromArgb (200' Color.White))' 5' (sizeImage.Height - font.GetHeight ()) / 2); " is 128.
Long Statement,MyAnimePlugin3,ImageAllocator,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ImageAllocator.cs,LoadImageFastFromFile,The length of the statement  "			i = (Image)imageType.InvokeMember ("FromGDIplus"' BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.InvokeMethod' null' null' new object[] { " is 150.
Long Statement,MyAnimePlugin3,Logos,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Logos.cs,buildLogoImage,The length of the statement  "			if ((GetVideoSourceRanking (vid.AniDB_File_Source) > GetVideoSourceRanking (bestSource)) || (GetVideoSourceRanking (vid.AniDB_File_Source) == GetVideoSourceRanking (bestSource) && videoWidth > bestWidth)) { " is 206.
Long Statement,MyAnimePlugin3,SearchCollection,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\SearchCollection.cs,GetItemSearchPropertyValue,The length of the statement  "	object item = _list.GetType ().InvokeMember ("Item"' BindingFlags.Default | BindingFlags.GetProperty' null' _list' new object[] { " is 129.
Long Statement,MyAnimePlugin3,TvDBSummary,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\TvDBSummary.cs,PopulateCrossRefs,The length of the statement  "		List<JMMServerBinary.Contract_CrossRef_AniDB_TvDBV2> contract = JMMServerVM.Instance.clientBinaryHTTP.GetTVDBCrossRefV2 (this.AnimeID); " is 135.
Long Statement,MyAnimePlugin3,TvDBSummary,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\TvDBSummary.cs,PopulateCrossRefsEpisodes,The length of the statement  "		List<JMMServerBinary.Contract_CrossRef_AniDB_TvDB_Episode> contracts = JMMServerVM.Instance.clientBinaryHTTP.GetTVDBCrossRefEpisode (this.AnimeID); " is 147.
Long Statement,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,CheckRequiredFiles,The length of the statement  "				mediaInfoVersion = string.Format ("{0}.{1}.{2}.{3}"' fvi.FileMajorPart' fvi.FileMinorPart' fvi.FileBuildPart' fvi.FilePrivatePart); " is 131.
Long Statement,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,CheckRequiredFiles,The length of the statement  "				FileVersionInfo fvi = FileVersionInfo.GetVersionInfo (Config.GetFolder (Config.Dir.Plugins) + @"\windows\MediaInfo.dll"); " is 121.
Long Statement,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,CheckRequiredFiles,The length of the statement  "				mediaInfoVersion = string.Format ("{0}.{1}.{2}.{3}"' fvi.FileMajorPart' fvi.FileMinorPart' fvi.FileBuildPart' fvi.FilePrivatePart); " is 131.
Long Statement,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,DownloadWebPage,The length of the statement  "		string msg = "---------- ERROR IN DOWNLOAD WEB PAGE ---------" + Environment.NewLine + url + Environment.NewLine + ex.ToString () + Environment.NewLine + "------------------------------------"; " is 193.
Long Statement,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,DownloadWebBinary,The length of the statement  "		// this is true for instance for EVERY thailand internet connection (also needs to be set for banners/episodethumbs and any other http request we send) " is 151.
Long Statement,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,ReparseDescription,The length of the statement  "	val = val.Replace ("<br />"' Environment.NewLine).Replace ("<br/>"' Environment.NewLine).Replace ("<i>"' "").Replace ("</i>"' "").Replace ("<b>"' "").Replace ("</b>"' "").Replace ("[i]"' "").Replace ("[/i]"' "").Replace ("[b]"' "").Replace ("[/b]"' ""); " is 253.
Long Statement,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,ReparseDescription,The length of the statement  "	val = val.Replace ("<BR />"' Environment.NewLine).Replace ("<BR/>"' Environment.NewLine).Replace ("<I>"' "").Replace ("</I>"' "").Replace ("<B>"' "").Replace ("</B>"' "").Replace ("[I]"' "").Replace ("[/I]"' "").Replace ("[B]"' "").Replace ("[/B]"' ""); " is 253.
Long Statement,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,FormatSecondsToDisplayTime,The length of the statement  "		return string.Format ("{0}:{1}:{2}"' t.Hours' t.Minutes.ToString ().PadLeft (2' '0')' t.Seconds.ToString ().PadLeft (2' '0')); " is 126.
Long Statement,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,DialogSelectGFQuickSort,The length of the statement  "		string menu = string.Format ("Sort Direction ({0}) >>>"' sortDirection == GroupFilterSortDirection.Asc ? "Asc" : "Desc"); " is 121.
Long Statement,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetAllAudioSubtitleLanaguages,The length of the statement  "	foreach (System.Globalization.CultureInfo cultureInformation in System.Globalization.CultureInfo.GetCultures (System.Globalization.CultureTypes.NeutralCultures)) { " is 163.
Long Statement,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetAllAudioSubtitleLanaguages,The length of the statement  "		if (cultureInformation.ThreeLetterISOLanguageName.Equals ("eng"' StringComparison.InvariantCultureIgnoreCase) || cultureInformation.ThreeLetterISOLanguageName.Equals ("jpn"' StringComparison.InvariantCultureIgnoreCase)) { " is 221.
Long Statement,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,The length of the statement  "				dlgYesNo.SetLine (2' GUILocalizeStrings.Get (936) + " " + MediaPortal.Util.Utils.SecondsToHMSString (timeMovieStopped)); " is 120.
Long Statement,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,The length of the statement  "				dlgYesNo.SetLine (2' GUILocalizeStrings.Get (936) + " " + MediaPortal.Util.Utils.SecondsToHMSString (timeMovieStopped)); " is 120.
Long Statement,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,Play,The length of the statement  "		// note: MP might still be unresponsive during this time' but at least we are in fullscreen and can see video should this happen " is 128.
Long Statement,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,Play,The length of the statement  "		// I haven't actually found out why it happens' but I strongly believe it has something to do with the video database and the player doing something in the background " is 166.
Long Statement,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,Play,The length of the statement  "					if (MediaPortal.Util.Utils.TranslateLanguageString (lang).Equals (requestedLanguage' StringComparison.OrdinalIgnoreCase)) { " is 123.
Long Statement,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,Play,The length of the statement  "					if (MediaPortal.Util.Utils.TranslateLanguageString (lang).Equals (requestedLanguage' StringComparison.OrdinalIgnoreCase)) { " is 123.
Long Statement,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,g_Player_PlayBackChanged,The length of the statement  "	if (PlayBackOpWasOfConcern (g_Player.IsVideo ? g_Player.MediaType.Video : g_Player.MediaType.Unknown' g_Player.CurrentFile)) { " is 126.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,downloadImagesWorker_DoWork,The length of the statement  "	List<JMMServerBinary.Contract_TvDB_ImagePoster> posters = JMMServerVM.Instance.clientBinaryHTTP.GetAllTvDBPosters (null); " is 121.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,downloadImagesWorker_DoWork,The length of the statement  "	List<JMMServerBinary.Contract_MovieDB_Poster> moviePosters = JMMServerVM.Instance.clientBinaryHTTP.GetAllMovieDBPosters (null); " is 127.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,downloadImagesWorker_DoWork,The length of the statement  "	List<JMMServerBinary.Contract_TvDB_ImageWideBanner> banners = JMMServerVM.Instance.clientBinaryHTTP.GetAllTvDBWideBanners (null); " is 129.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,downloadImagesWorker_DoWork,The length of the statement  "	List<JMMServerBinary.Contract_TvDB_ImageFanart> fanarts = JMMServerVM.Instance.clientBinaryHTTP.GetAllTvDBFanart (null); " is 120.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,downloadImagesWorker_DoWork,The length of the statement  "	List<JMMServerBinary.Contract_MovieDB_Fanart> movieFanarts = JMMServerVM.Instance.clientBinaryHTTP.GetAllMovieDBFanart (null); " is 126.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,downloadImagesWorker_DoWork,The length of the statement  "	List<JMMServerBinary.Contract_Trakt_ImagePoster> traktPosters = JMMServerVM.Instance.clientBinaryHTTP.GetAllTraktPosters (null); " is 128.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,downloadImagesWorker_DoWork,The length of the statement  "	List<JMMServerBinary.Contract_Trakt_ImageFanart> traktFanarts = JMMServerVM.Instance.clientBinaryHTTP.GetAllTraktFanart (null); " is 127.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,downloadImagesWorker_DoWork,The length of the statement  "	List<JMMServerBinary.Contract_Trakt_Episode> traktEpisodes = JMMServerVM.Instance.clientBinaryHTTP.GetAllTraktEpisodes (null); " is 126.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,EvaluateVisibility,The length of the statement  "		//BaseConfig.MyAnimeLog.Write("EvaluateVisibility:: {0} - {1} - {2}"' imgListFave != null' curAnimeGroup.IsFave' dummyLayoutListMode.Visible); " is 142.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,workerFacade_ProgressChanged,The length of the statement  "					if (m_Facade.CurrentLayout == GUIFacadeControl.Layout.Filmstrip || m_Facade.CurrentLayout == GUIFacadeControl.Layout.CoverFlow) " is 127.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SelectItem,The length of the statement  "	if (m_Facade.CurrentLayout == GUIFacadeControl.Layout.Filmstrip || m_Facade.CurrentLayout == GUIFacadeControl.Layout.CoverFlow) { " is 129.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SelectItem,The length of the statement  "				MediaPortal.GUI.Library.Action.ActionType actionType = (currentIndex < index) ? MediaPortal.GUI.Library.Action.ActionType.ACTION_MOVE_RIGHT : MediaPortal.GUI.Library.Action.ActionType.ACTION_MOVE_LEFT; " is 201.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,bgLoadFacade,The length of the statement  "						string msg = string.Format ("The 'LoadFacade' function has generated an error displaying list items: {0} - {1}"' listLevel' ex.ToString ()); " is 140.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,bgLoadFacade,The length of the statement  "						string msg = string.Format ("The 'LoadFacade' function has generated an error displaying list items: {0} - {1}"' listLevel' ex.ToString ()); " is 140.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,bgLoadFacade,The length of the statement  "						string msg = string.Format ("The 'LoadFacade' function has generated an error displaying list items: {0} - {1}"' listLevel' ex.ToString ()); " is 140.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,bgLoadFacade,The length of the statement  "					GroupFilterSorting sortType = GroupFilterHelper.GetEnumForText_Sorting (GroupFilterQuickSorts [curGroupFilter.GroupFilterID.Value].SortType); " is 141.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,bgLoadFacade,The length of the statement  "					SortPropOrFieldAndDirection sortProp = GroupFilterHelper.GetSortDescription (sortType' GroupFilterQuickSorts [curGroupFilter.GroupFilterID.Value].SortDirection); " is 161.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,bgLoadFacade,The length of the statement  "				type = (groupViewMode != GUIFacadeControl.Layout.List) ? BackGroundLoadingArgumentType.ListElementForDelayedImgLoading : BackGroundLoadingArgumentType.ListFullElement; " is 167.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,bgLoadFacade,The length of the statement  "						string msg = string.Format ("The 'LoadFacade' function has generated an error displaying list items: {0} - {1}"' listLevel' ex.ToString ()); " is 140.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,bgLoadFacade,The length of the statement  "						string msg = string.Format ("The 'LoadFacade' function has generated an error displaying list items: {0} - {1}"' listLevel' ex.ToString ()); " is 140.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,bgLoadFacade,The length of the statement  "						string msg = string.Format ("The 'LoadFacade' function has generated an error displaying list items: {0} - {1}"' listLevel' ex.ToString ()); " is 140.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,bgLoadFacade,The length of the statement  "						string msg = string.Format ("The 'LoadFacade' function has generated an error displaying list items: {0} - {1}"' listLevel' ex.ToString ()); " is 140.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,bgLoadFacade,The length of the statement  "			// Fill the list of groups in order of their proximity to the current selection. This makes the groups currently shown load first' and then further out. " is 152.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,bgLoadFacade,The length of the statement  "			// Do not continue untill all the image loading threads are finished. Currently we are in the facade background worker thread. The image loading threads call " is 157.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,bgLoadFacade,The length of the statement  "			// this thread's ProgressChanged function' which then adds the images that were loaded in to the facade. If we go beyond this point before the image loading " is 156.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,bgLoadFacade,The length of the statement  "			// threads finish' then that ProgressChanged function might not exisit any more since this facade background worker thread could have finished already. " is 151.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,bgLoadFacade,The length of the statement  "			JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (animeSeriesIDToBeRated.Value' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 171.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,TestPosters,The length of the statement  "	foreach (string fileName in Directory.GetFiles (@"C:\Users\All Users\Team MediaPortal\MediaPortal\thumbs\AnimeThumbs\AniDB"' "*.jpg")) { " is 136.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowOptionsDisplayMenu,The length of the statement  "		string showEps = string.Format ("Only Show Available Episodes ({0})"' settings.ShowOnlyAvailableEpisodes ? "On" : "Off"); " is 121.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ChangeView,The length of the statement  "	BaseConfig.MyAnimeLog.Write (string.Format ("ChangeView: {0} - {1}"' currentViewClassification' v == null ? "" : v.Name)); " is 122.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetFacade,The length of the statement  "	if (listLevel == Listlevel.GroupFilter || listLevel == Listlevel.GroupFilterSub || listLevel == Listlevel.GroupFilterSub2) { " is 124.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetFacade,The length of the statement  "		//BaseConfig.MyAnimeLog.Write("List Mode: {0}' IsGroups: {1}"' this.dummyLayoutListMode.Visible' dummyIsGroups.Visible); " is 120.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetFacade,The length of the statement  "		//BaseConfig.MyAnimeLog.Write("List Mode: {0}' IsSeries: {1}"' this.dummyLayoutListMode.Visible' dummyIsSeries.Visible); " is 120.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetFacade,The length of the statement  "		//BaseConfig.MyAnimeLog.Write("List Mode: {0}' IsEpisodeTypes: {1}"' this.dummyLayoutListMode.Visible' dummyIsEpisodeTypes.Visible); " is 132.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetFacade,The length of the statement  "		//BaseConfig.MyAnimeLog.Write("List Mode: {0}' dummyIsEpisodes: {1}"' this.dummyLayoutListMode.Visible' dummyIsEpisodes.Visible); " is 129.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetFacade,The length of the statement  "	//if (this.dummyLayoutFilmstripMode != null) BaseConfig.MyAnimeLog.Write("SetFacade: dummyLayoutFilmstripMode.Visible : {0}"' this.dummyLayoutFilmstripMode.Visible); " is 165.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetFacade,The length of the statement  "	//if (this.dummyLayoutWideBanners != null) BaseConfig.MyAnimeLog.Write("SetFacade: dummyLayoutWideBanners.Visible : {0}"' this.dummyLayoutWideBanners.Visible); " is 159.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetFacade,The length of the statement  "	//if (this.dummyLayoutListMode != null) BaseConfig.MyAnimeLog.Write("SetFacade: dummyLayoutListMode.Visible : {0}"' this.dummyLayoutListMode.Visible); " is 150.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetFacade,The length of the statement  "	BaseConfig.MyAnimeLog.Write ("SetFacade: Filters: {0} - Groups: {1} - Series: {2} - Episodes: {3}"' groupfilters' groups' series' episodes); " is 140.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnAction,The length of the statement  "			if ((m_Facade.CurrentLayout == GUIFacadeControl.Layout.List && m_Facade.ListLayout.IsFocused) || (m_Facade.CurrentLayout == GUIFacadeControl.Layout.LargeIcons && m_Facade.ThumbnailLayout.IsFocused) || (m_Facade.CurrentLayout == GUIFacadeControl.Layout.Filmstrip && m_Facade.FilmstripLayout.IsFocused) || (m_Facade.CurrentLayout == GUIFacadeControl.Layout.CoverFlow && m_Facade.CoverFlowLayout.IsFocused)) " is 404.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnAction,The length of the statement  "				JMMServerBinary.Contract_AnimeEpisode contract = JMMServerVM.Instance.clientBinaryHTTP.GetNextUnwatchedEpisodeForGroup (curAnimeGroup.AnimeGroupID' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 192.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnAction,The length of the statement  "				JMMServerBinary.Contract_AnimeEpisode contract = JMMServerVM.Instance.clientBinaryHTTP.GetNextUnwatchedEpisode (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 192.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,hook_KeyUp,The length of the statement  "	if ((m_Facade.CurrentLayout == GUIFacadeControl.Layout.List && m_Facade.ListLayout.IsFocused) || (m_Facade.CurrentLayout == GUIFacadeControl.Layout.LargeIcons && m_Facade.ThumbnailLayout.IsFocused) || (m_Facade.CurrentLayout == GUIFacadeControl.Layout.Filmstrip && m_Facade.FilmstripLayout.IsFocused) || (m_Facade.CurrentLayout == GUIFacadeControl.Layout.CoverFlow && m_Facade.CoverFlowLayout.IsFocused)) { " is 406.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,onFacadeItemSelected,The length of the statement  "	if (parent != m_Facade && parent != m_Facade.FilmstripLayout && parent != m_Facade.CoverFlowLayout && parent != m_Facade.ThumbnailLayout && parent != m_Facade.ListLayout) " is 170.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnFirstStart,The length of the statement  "	if (string.IsNullOrEmpty (MainWindow.settings.JMMServer_Address) || string.IsNullOrEmpty (MainWindow.settings.JMMServer_Port)) { " is 128.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,EpisodeType_OnItemSelected,The length of the statement  "	rating = Utils.FormatAniDBRating ((double)anAnime.AniDBRating) + " (" + anAnime.AniDBTotalVotes.ToString () + " votes)"; " is 120.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,Series_OnItemSelected,The length of the statement  "	rating = Utils.FormatAniDBRating ((double)anAnime.AniDBRating) + " (" + anAnime.AniDBTotalVotes.ToString () + " votes)"; " is 120.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTheTvDB,The length of the statement  "	List<JMMServerBinary.Contract_TVDBSeriesSearchResult> tvResults = JMMServerVM.Instance.clientBinaryHTTP.SearchTheTvDB (searchCriteria.Trim ()); " is 143.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTrakt,The length of the statement  "	List<JMMServerBinary.Contract_TraktTVShowResponse> traktResults = JMMServerVM.Instance.clientBinaryHTTP.SearchTrakt (searchCriteria); " is 133.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTheTvDBMenu,The length of the statement  "		List<JMMServerBinary.Contract_Azure_CrossRef_AniDB_TvDB> xrefs = JMMServerVM.Instance.clientBinaryHTTP.GetTVDBCrossRefWebCache (aniDBID); " is 137.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTheTvDBMenu,The length of the statement  "				xrefSummary += string.Format ("AniDB {0}:{1} -- TvDB {2}: {3}:{4}"' xref.AniDBStartEpisodeType' xref.AniDBStartEpisodeNumber' xref.TvDBTitle' xref.TvDBSeasonNumber' xref.TvDBStartEpisodeNumber); " is 194.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTheTvDBMenu,The length of the statement  "				LinkAniDBToTVDB (ser' xref.AnimeID' (enEpisodeType)xref.AniDBStartEpisodeType' xref.AniDBStartEpisodeNumber' xref.TvDBID' xref.TvDBSeasonNumber' xref.TvDBStartEpisodeNumber); " is 174.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTraktMenu,The length of the statement  "		JMMServerBinary.Contract_CrossRef_AniDB_TraktResult xref = JMMServerVM.Instance.clientBinaryHTTP.GetTraktCrossRefWebCache (aniDBID); " is 132.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,LinkAniDBToTVDB,The length of the statement  "	string res = JMMServerVM.Instance.clientBinaryHTTP.LinkAniDBTvDB (animeID' (int)anidbEpType' anidbEpNumber' tvDBID' tvSeason' tvEpNumber' null); " is 144.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,LinkAniDBToMAL,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.RemoveLinkAniDBMAL (xref.AnimeID' xref.StartEpisodeType' xref.StartEpisodeNumber); " is 120.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTheMovieDBMenu,The length of the statement  "		JMMServerBinary.Contract_CrossRef_AniDB_OtherResult xref = JMMServerVM.Instance.clientBinaryHTTP.GetOtherAnimeCrossRefWebCache (aniDBID' (int)CrossRefType.MovieDB); " is 164.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTheMovieDB,The length of the statement  "	List<JMMServerBinary.Contract_MovieDBMovieSearchResult> movieResults = JMMServerVM.Instance.clientBinaryHTTP.SearchTheMovieDB (searchCriteria.Trim ()); " is 151.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchMAL,The length of the statement  "	List<JMMServerBinary.Contract_MALAnimeResponse> malResults = JMMServerVM.Instance.clientBinaryHTTP.SearchMAL (searchCriteria.Trim ()); " is 134.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 202.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The length of the statement  "				JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 177.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 203.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 211.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The length of the statement  "			JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 177.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 212.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The length of the statement  "				string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveAssociationOnFile (selectedFile.VideoLocalID' episode.AniDB_EpisodeID); " is 128.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuDatabases,The length of the statement  "	bool hasTvDBLink = ser.CrossRef_AniDB_TvDBV2.Count > 0 && ser.AniDB_Anime.AniDB_AnimeCrossRefs != null && ser.AniDB_Anime.AniDB_AnimeCrossRefs.TvDBCrossRefExists; " is 162.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuDatabases,The length of the statement  "	bool hasMovieDBLink = ser.CrossRef_AniDB_MovieDB != null && ser.AniDB_Anime.AniDB_AnimeCrossRefs != null && ser.AniDB_Anime.AniDB_AnimeCrossRefs.MovieDB_Movie != null; " is 167.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuDatabases,The length of the statement  "	bool hasTraktLink = ser.AniDB_Anime.AniDB_AnimeCrossRefs != null && ser.AniDB_Anime.AniDB_AnimeCrossRefs.TraktShow != null; " is 123.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuTVDB,The length of the statement  "	if (ser.CrossRef_AniDB_TvDBV2.Count > 0 && ser.TvDBSeriesV2.Count > 0 && ser.AniDB_Anime.AniDB_AnimeCrossRefs != null && ser.AniDB_Anime.AniDB_AnimeCrossRefs.TvDBCrossRefExists) { " is 179.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuTrakt,The length of the statement  "	if (ser.AniDB_Anime.AniDB_AnimeCrossRefs != null && ser.AniDB_Anime.AniDB_AnimeCrossRefs.CrossRef_AniDB_Trakt != null && ser.AniDB_Anime.AniDB_AnimeCrossRefs.TraktShow != null) { " is 178.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuMovieDB,The length of the statement  "	if (ser.CrossRef_AniDB_MovieDB != null && ser.AniDB_Anime.AniDB_AnimeCrossRefs != null && ser.AniDB_Anime.AniDB_AnimeCrossRefs.MovieDB_Movie != null) { " is 151.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuMAL,The length of the statement  "				JMMServerVM.Instance.clientBinaryHTTP.RemoveLinkAniDBMAL (xref.AnimeID' xref.StartEpisodeType' xref.StartEpisodeNumber); " is 120.
Long Statement,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuSeries,The length of the statement  "			JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (ser.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 166.
Long Statement,Cornerstone.MP,AsyncImageResource,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\AsyncImageResource.cs,loadResourceSafe,The length of the statement  "			//logger.Warn("Cannot preform asynchronous loading with this version of MediaPortal. Please upgrade for improved performance."); " is 128.
Long Statement,Cornerstone.MP,AsyncImageResource,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\AsyncImageResource.cs,LoadImageFastFromFile,The length of the statement  "			image = (Image)typeof(Bitmap).InvokeMember ("FromGDIplus"' BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.InvokeMethod' null' null' new object[] { " is 159.
Long Statement,MyAnimePlugin3.ConfigFiles,frmConfig,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\frmConfig.cs,btnAnimeBytesTest_Click,The length of the statement  "		BaseConfig.Settings.AnimeBytesCookieHeader = AnimeBytes.Login (BaseConfig.Settings.AnimeBytesUsername' BaseConfig.Settings.AnimeBytesPassword); " is 143.
Long Statement,MyAnimePlugin3.ConfigFiles,frmConfig,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\frmConfig.cs,btnBakaBTTest_Click,The length of the statement  "		BaseConfig.Settings.BakaBTCookieHeader = bakaBT.Login (BaseConfig.Settings.BakaBTUsername' BaseConfig.Settings.BakaBTPassword); " is 127.
Long Statement,MyAnimePlugin3.DataHelpers,FFDShowHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\FFDShowHelper.cs,loadPlayingPreset,The length of the statement  "		debug ("Found preset for episode \"" + curEpisode.EpisodeName + "\"' preset name is: \"" + fileFfdshowPreset.Preset + "\""); " is 124.
Long Statement,MyAnimePlugin3.DataHelpers,FFDShowHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\FFDShowHelper.cs,loadPlayingPreset,The length of the statement  "		//                FFDShowAPI.FFDShowAPI ffdshowAPI = new FFDShowAPI.FFDShowAPI(fileName' FFDShowAPI.FFDShowAPI.FileNameMode.FileName);  <- currently doesn't work " is 161.
Long Statement,MyAnimePlugin3.DataHelpers,FFDShowHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\FFDShowHelper.cs,loadPlayingPreset,The length of the statement  "		//                FFDShowAPI.FFDShowAPI ffdshowAPI = new FFDShowAPI.FFDShowAPI();  <- retrieve only the first ffdshow instance " is 126.
Long Statement,MyAnimePlugin3.DataHelpers,FFDShowHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\FFDShowHelper.cs,loadPlayingPreset,The length of the statement  "			BaseConfig.MyAnimeLog.Write ("FFDShow Error: be sure you have \"ffdshow raw video filter\" added and check in [MediaPortal Configuration -> Videos -> Video Post Processing] and you have in your ffdshow raw configuration: - checked keyboard shortcuts - checked remote API - choosen Custom 32786"); " is 296.
Long Statement,MyAnimePlugin3.DataHelpers,FFDShowHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\FFDShowHelper.cs,loadPlayingPreset,The length of the statement  "			if (ffdshowInstances [i].fileName == null || ffdshowInstances [i].fileName.Trim () == "")// ffdshow raw doesn't have filename " is 125.
Long Statement,MyAnimePlugin3.DataHelpers,FFDShowHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\FFDShowHelper.cs,loadPlayingPreset,The length of the statement  "					BaseConfig.MyAnimeLog.Write ("FFDShow Error: be sure you have \"ffdshow raw video filter\" added and check in [MediaPortal Configuration -> Videos -> Video Post Processing] and you have in your ffdshow raw configuration: - checked keyboard shortcuts - checked remote API - choosen Custom 32786"); " is 296.
Long Statement,MyAnimePlugin3.DataHelpers,JSONHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\JSONHelper.cs,Serialize,The length of the statement  "	System.Runtime.Serialization.Json.DataContractJsonSerializer serializer = new System.Runtime.Serialization.Json.DataContractJsonSerializer (obj.GetType ()); " is 156.
Long Statement,MyAnimePlugin3.DataHelpers,JSONHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\JSONHelper.cs,Deserialize,The length of the statement  "	System.Runtime.Serialization.Json.DataContractJsonSerializer serializer = new System.Runtime.Serialization.Json.DataContractJsonSerializer (obj.GetType ()); " is 156.
Long Statement,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,Login,The length of the statement  "		// NOTE: This is the URL the form POSTs to' not the URL of the form (you can find this in the "action" attribute of the HTML's form tag " is 135.
Long Statement,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,ParseSource,The length of the statement  "	string torSeedStart = "<td class=" + quote + "torrent_seeders" + quote + " title=" + quote + "Seeders" + quote + "><span>"; " is 123.
Long Statement,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,ParseSource,The length of the statement  "	string torLeechStart = "<td class=" + quote + "torrent_leechers" + quote + " title=" + quote + "Leechers" + quote + "><span>"; " is 126.
Long Statement,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,ParseSource,The length of the statement  "			string torSize = output.Substring (posTorSizeStart + torSizeStart.Length' posTorSizeEnd - posTorSizeStart - torSizeStart.Length); " is 129.
Long Statement,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,ParseSource,The length of the statement  "			string torSeed = output.Substring (posTorSeedStart + torSeedStart.Length' posTorSeedEnd - posTorSeedStart - torSeedStart.Length); " is 129.
Long Statement,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,ParseSource,The length of the statement  "			string torLeech = output.Substring (posTorLeechStart + torLeechStart.Length' posTorLeechEnd - posTorLeechStart - torLeechStart.Length); " is 135.
Long Statement,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,GetTorrents,The length of the statement  "		if (string.IsNullOrEmpty (BaseConfig.Settings.AnimeBytesUsername) || string.IsNullOrEmpty (BaseConfig.Settings.AnimeBytesPassword)) " is 131.
Long Statement,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,GetTorrents,The length of the statement  "		string urlBase = "http://animebyt.es/torrents.php?filter_cat%5B1%5D=1&searchstr={0}&action=advanced&search_type=title&year=&year2=&tags=&tags_type=0&sort=time_added&way=desc&hentai=2&releasegroup=&epcount=&epcount2=&artbooktitle="; " is 231.
Long Statement,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,BrowseTorrents,The length of the statement  "		if (string.IsNullOrEmpty (BaseConfig.Settings.AnimeBytesUsername) || string.IsNullOrEmpty (BaseConfig.Settings.AnimeBytesPassword)) " is 131.
Long Statement,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,GetAllCookies,The length of the statement  "	Hashtable table = (Hashtable)cc.GetType ().InvokeMember ("m_domainTable"' System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.GetField | System.Reflection.BindingFlags.Instance' null' cc' new object[] { " is 224.
Long Statement,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,GetAllCookies,The length of the statement  "		SortedList lstCookieCol = (SortedList)pathList.GetType ().InvokeMember ("m_list"' System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.GetField | System.Reflection.BindingFlags.Instance' null' pathList' new object[] { " is 238.
Long Statement,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,ShowAllCookies,The length of the statement  "		sb.AppendLine ("#" + cpt++ + "> Name: " + c.Name + "\tValue: " + c.Value + "\tDomain: " + c.Domain + "\tPath: " + c.Path + "\tExp: " + c.Expires.ToString ()); " is 158.
Long Statement,MyAnimePlugin3.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsBakaBT.cs,Login,The length of the statement  "		// NOTE: This is the URL the form POSTs to' not the URL of the form (you can find this in the "action" attribute of the HTML's form tag " is 135.
Long Statement,MyAnimePlugin3.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsBakaBT.cs,ParseSource,The length of the statement  "			string linkAlt = output.Substring (poslinkStartAlt + linkStartAlt.Length' poslinkEndAlt - poslinkStartAlt - linkStartAlt.Length); " is 129.
Long Statement,MyAnimePlugin3.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsBakaBT.cs,ParseSource,The length of the statement  "			string torNameAlt = output.Substring (posnameStartAlt + nameStartAlt.Length' posnameEndAlt - posnameStartAlt - nameStartAlt.Length); " is 132.
Long Statement,MyAnimePlugin3.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsBakaBT.cs,ParseSource,The length of the statement  "				torSizeAlt = output.Substring (posSizeStartAlt + sizeStartAlt.Length' posSizeEndAlt - posSizeStartAlt - sizeStartAlt.Length); " is 125.
Long Statement,MyAnimePlugin3.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsBakaBT.cs,ParseSource,The length of the statement  "				torSeedAlt = output.Substring (posSeedStartAlt + seedStartAlt.Length' posSeedEndAlt - posSeedStartAlt - seedStartAlt.Length); " is 125.
Long Statement,MyAnimePlugin3.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsBakaBT.cs,ParseSource,The length of the statement  "				torLeechAlt = output.Substring (posLeechStartAlt + leechStartAlt.Length' posLeechEndAlt - posLeechStartAlt - leechStartAlt.Length); " is 131.
Long Statement,MyAnimePlugin3.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsBakaBT.cs,GetTorrents,The length of the statement  "		if (string.IsNullOrEmpty (BaseConfig.Settings.BakaBTUsername) || string.IsNullOrEmpty (BaseConfig.Settings.BakaBTPassword)) " is 123.
Long Statement,MyAnimePlugin3.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsBakaBT.cs,GetTorrents,The length of the statement  "		string urlBase = "http://bakabt.me/browse.php?only=0&hentai=1&incomplete=1&lossless=1&hd=1&multiaudio=1&bonus=1&c1=1&c2=1&c5=1&reorder=1&q={0}"; " is 144.
Long Statement,MyAnimePlugin3.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsBakaBT.cs,BrowseTorrents,The length of the statement  "		if (string.IsNullOrEmpty (BaseConfig.Settings.BakaBTUsername) || string.IsNullOrEmpty (BaseConfig.Settings.BakaBTPassword)) " is 123.
Long Statement,MyAnimePlugin3.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsBakaBT.cs,BrowseTorrents,The length of the statement  "		string url = "http://bakabt.me/browse.php?only=0&hentai=1&incomplete=1&lossless=1&hd=1&multiaudio=1&bonus=1&c1=1&c2=1&c5=1&reorder=1&q="; " is 137.
Long Statement,MyAnimePlugin3.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsBakaBT.cs,PopulateTorrentLink,The length of the statement  "		if (string.IsNullOrEmpty (BaseConfig.Settings.BakaBTUsername) || string.IsNullOrEmpty (BaseConfig.Settings.BakaBTPassword)) " is 123.
Long Statement,MyAnimePlugin3.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsBakaBT.cs,GetAllCookies,The length of the statement  "	Hashtable table = (Hashtable)cc.GetType ().InvokeMember ("m_domainTable"' System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.GetField | System.Reflection.BindingFlags.Instance' null' cc' new object[] { " is 224.
Long Statement,MyAnimePlugin3.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsBakaBT.cs,GetAllCookies,The length of the statement  "		SortedList lstCookieCol = (SortedList)pathList.GetType ().InvokeMember ("m_list"' System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.GetField | System.Reflection.BindingFlags.Instance' null' pathList' new object[] { " is 238.
Long Statement,MyAnimePlugin3.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsBakaBT.cs,ShowAllCookies,The length of the statement  "		sb.AppendLine ("#" + cpt++ + "> Name: " + c.Name + "\tValue: " + c.Value + "\tDomain: " + c.Domain + "\tPath: " + c.Path + "\tExp: " + c.Expires.ToString ()); " is 158.
Long Statement,MyAnimePlugin3.Downloads,TorrentsNyaa,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsNyaa.cs,ParseSourceSingleResult,The length of the statement  "	// class="thead">Name:</td><td class="tinfotorrentname">[Hadena] Koi to Senkyo to Chocolate - 03 [720p] [9CD64623].mkv</td> " is 123.
Long Statement,MyAnimePlugin3.Downloads,TorrentsNyaa,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsNyaa.cs,ParseSourceSingleResult,The length of the statement  "	string seedStart = "Seeders:</td><td class=" + quote + "vtop" + quote + "><span class=" + quote + "tinfosn" + quote + ">"; " is 122.
Long Statement,MyAnimePlugin3.Downloads,TorrentsNyaa,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsNyaa.cs,ParseSourceSingleResult,The length of the statement  "	string leechStart = "Leechers:</td><td class=" + quote + "vtop" + quote + "><span class=" + quote + "tinfoln" + quote + ">"; " is 124.
Long Statement,MyAnimePlugin3.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadHelper.cs,SearchTorrents,The length of the statement  "			List<JMMServerBinary.Contract_GroupVideoQuality> summ = JMMServerVM.Instance.clientBinaryHTTP.GetGroupVideoQualitySummary (series.AniDB_Anime.AnimeID); " is 151.
Long Statement,MyAnimePlugin3.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadHelper.cs,SearchTorrents,The length of the statement  "	if (BaseConfig.Settings.TorrentSources.Contains (MyAnimePlugin3.Constants.TorrentSourceNames.BakaBT) && search.SearchType == DownloadSearchType.Series) { " is 153.
Long Statement,MyAnimePlugin3.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadHelper.cs,SearchTorrents,The length of the statement  "	if (BaseConfig.Settings.TorrentSources.Contains (MyAnimePlugin3.Constants.TorrentSourceNames.AnimeBytes) && search.SearchType == DownloadSearchType.Series) { " is 157.
Long Statement,MyAnimePlugin3.Downloads,TorrentsBakaUpdates,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsBakaUpdates.cs,GetTorrents,The length of the statement  "	string urlBase = "http://www.baka-updates.com/search/search?searchitem={0}&submit.x=0&submit.y=0&submit=submit&searchradio=releases"; " is 133.
Long Statement,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,PopulateToken,The length of the statement  "		// <html><div id='token' style='display:none;'>u3iiuDG4dwYDMzurIFif7FS-ldLPcvHk6QlB4y8LSKK5mX9GSPUZ_PpxD0s=</div></html> " is 120.
Long Statement,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The length of the statement  "		X [i] = ((uint)block [offset++] & 0xFF) | (((uint)block [offset++] & 0xFF) << 8) | (((uint)block [offset++] & 0xFF) << 16) | (((uint)block [offset++] & 0xFF) << 24); " is 165.
Long Statement,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\MultiSort.cs,SortInPlace,The length of the statement  "		throw new Exception ("Error trying to sort list of " + typeof(T).Name + " using " + (sortBy.NameIsPropertyName ? "property " : "field ") + sortBy.sPropertyOrFieldName' ex); " is 172.
Long Statement,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The length of the statement  "				throw new Exception ("Property name " + sPropertyName + " not found while trying to compare objects of type " + typeof(T).Name); " is 128.
Long Statement,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The length of the statement  "				throw new Exception ("Field name " + sFieldName + " not found while trying to compare objects of type " + typeof(T).Name); " is 122.
Long Statement,MyAnimePlugin3.JMMServerBinary,JMMServerClient,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Service References\JMMServerBinary\Reference.cs,GetFilesByGroupAndResolution,The length of the statement  "	return base.Channel.GetFilesByGroupAndResolution (animeID' relGroupName' resolution' videoSource' videoBitDepth' userID); " is 121.
Long Statement,MyAnimePlugin3.JMMServerBinary,JMMServerClient,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Service References\JMMServerBinary\Reference.cs,LinkAniDBTvDB,The length of the statement  "	return base.Channel.LinkAniDBTvDB (animeID' aniEpType' aniEpNumber' tvDBID' tvSeasonNumber' tvEpNumber' crossRef_AniDB_TvDBV2ID); " is 129.
Long Statement,MyAnimePlugin3.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The length of the statement  "		if (anime != null && anime.DefaultFanart != null && anime.DefaultFanart.ImageParentType == (int)ImageEntityType.Trakt_Fanart && anime.DefaultFanart.ImageParentID == TraktImageFanart.Trakt_ImageFanartID) { " is 204.
Long Statement,MyAnimePlugin3.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The length of the statement  "		if (anime != null && anime.DefaultPoster != null && anime.DefaultPoster.ImageParentType == (int)ImageEntityType.Trakt_Poster && anime.DefaultPoster.ImageParentID == TraktImagePoster.Trakt_ImagePosterID) { " is 204.
Long Statement,MyAnimePlugin3.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The length of the statement  "		if (anime != null && anime.DefaultFanart != null && anime.DefaultFanart.ImageParentType == (int)ImageEntityType.TvDB_FanArt && anime.DefaultFanart.ImageParentID == contract.TvDB_ImageFanartID) { " is 194.
Long Statement,MyAnimePlugin3.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The length of the statement  "		if (anime != null && anime.DefaultPoster != null && anime.DefaultPoster.ImageParentType == (int)ImageEntityType.TvDB_Cover && anime.DefaultPoster.ImageParentID == contract.TvDB_ImagePosterID) { " is 193.
Long Statement,MyAnimePlugin3.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The length of the statement  "		if (anime != null && anime.DefaultWideBanner != null && anime.DefaultWideBanner.ImageParentType == (int)ImageEntityType.TvDB_Banner && anime.DefaultWideBanner.ImageParentID == contract.TvDB_ImageWideBannerID) { " is 210.
Long Statement,MyAnimePlugin3.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The length of the statement  "		if (anime != null && anime.DefaultFanart != null && anime.DefaultFanart.ImageParentType == (int)ImageEntityType.MovieDB_FanArt && anime.DefaultFanart.ImageParentID == contract.MovieDB_FanartID) { " is 195.
Long Statement,MyAnimePlugin3.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The length of the statement  "		if (anime != null && anime.DefaultPoster != null && anime.DefaultPoster.ImageParentType == (int)ImageEntityType.MovieDB_Poster && anime.DefaultPoster.ImageParentID == contract.MovieDB_PosterID) { " is 195.
Long Statement,MyAnimePlugin3.ViewModel,AniDB_AnimeVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AniDB_AnimeVM.cs,RefreshAnimeCrossRefs,The length of the statement  "	JMMServerBinary.Contract_AniDB_AnimeCrossRefs xrefDetails = JMMServerVM.Instance.clientBinaryHTTP.GetCrossRefDetails (this.AnimeID); " is 132.
Long Statement,MyAnimePlugin3.ViewModel,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The length of the statement  "			List<CrossRef_AniDB_TvDBVMV2> tvDBCrossRef = Sorting.MultiSort<CrossRef_AniDB_TvDBVMV2> (tvSummary.CrossRefTvDBV2' sortCriteria); " is 129.
Long Statement,MyAnimePlugin3.ViewModel,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The length of the statement  "					int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (this.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1); " is 166.
Long Statement,MyAnimePlugin3.ViewModel,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The length of the statement  "		List<CrossRef_AniDB_TvDBVMV2> tvDBCrossRef = Sorting.MultiSort<CrossRef_AniDB_TvDBVMV2> (tvSummary.CrossRefTvDBV2' sortCriteria); " is 129.
Long Statement,MyAnimePlugin3.ViewModel,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The length of the statement  "					int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (this.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1); " is 166.
Long Statement,MyAnimePlugin3.ViewModel,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AnimeEpisodeVM.cs,RefreshFilesForEpisode,The length of the statement  "		List<JMMServerBinary.Contract_VideoDetailed> contracts = JMMServerVM.Instance.clientBinaryHTTP.GetFilesForEpisode (AnimeEpisodeID' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 175.
Long Statement,MyAnimePlugin3.ViewModel,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AnimeEpisodeVM.cs,ToggleWatchedStatus,The length of the statement  "	JMMServerBinary.Contract_ToggleWatchedStatusOnEpisode_Response response = JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnEpisode (AnimeEpisodeID' watched' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 211.
Long Statement,MyAnimePlugin3.ViewModel,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AnimeEpisodeVM.cs,ToggleWatchedStatus,The length of the statement  "		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (response.AnimeEpisode.AnimeSeriesID' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 178.
Long Statement,MyAnimePlugin3.ViewModel,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AnimeEpisodeVM.cs,IncrementEpisodeStats,The length of the statement  "	JMMServerVM.Instance.clientBinaryHTTP.IncrementEpisodeStats (this.AnimeEpisodeID' JMMServerVM.Instance.CurrentUser.JMMUserID' (int)statCountType); " is 146.
Long Statement,MyAnimePlugin3.ViewModel,AnimeGroupVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AnimeGroupVM.cs,Save,The length of the statement  "		JMMServerBinary.Contract_AnimeGroup_SaveResponse response = JMMServerVM.Instance.clientBinaryHTTP.SaveGroup (this.ToContract ()' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 173.
Long Statement,MyAnimePlugin3.ViewModel,AnimeSeriesVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AnimeSeriesVM.cs,Save,The length of the statement  "		JMMServerBinary.Contract_AnimeSeries_SaveResponse response = JMMServerVM.Instance.clientBinaryHTTP.SaveSeries (this.ToContract ()' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 175.
Long Statement,MyAnimePlugin3.ViewModel,BookmarkedAnimeVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\BookmarkedAnimeVM.cs,Save,The length of the statement  "	JMMServerBinary.Contract_BookmarkedAnime_SaveResponse resp = JMMServerVM.Instance.clientBinaryHTTP.SaveBookmarkedAnime (ba); " is 124.
Long Statement,MyAnimePlugin3.ViewModel,CrossRef_AniDB_TvDBVMV2,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\CrossRef_AniDB_TvDBVM.cs,ToString,The length of the statement  "	return string.Format ("{0} = {1}   AniDB # {2}:{3}   TvDB {4}:{5}"' AnimeID' TvDBID' AniDBStartEpisodeType' AniDBStartEpisodeNumber' TvDBSeasonNumber' TvDBStartEpisodeNumber); " is 175.
Long Statement,MyAnimePlugin3.ViewModel,GroupFilterExtendedVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\GroupFilterExtendedVM.cs,ToString,The length of the statement  "	return string.Format ("Group Filter: {0} - Groups: {1}' Series: {2}"' GroupFilter.GroupFilterName' GroupCount' SeriesCount); " is 124.
Long Statement,MyAnimePlugin3.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\GroupFilterHelper.cs,GetDateAsString,The length of the statement  "	return aDate.Year.ToString ().PadLeft (4' '0') + aDate.Month.ToString ().PadLeft (2' '0') + aDate.Day.ToString ().PadLeft (2' '0'); " is 131.
Long Statement,MyAnimePlugin3.ViewModel,GroupVideoQualityVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\GroupVideoQualityVM.cs,ToString,The length of the statement  "	return string.Format ("{0} - {1}/{2} - {3}/{4} Files"' GroupNameShort' Resolution' VideoSource' FileCountNormal' FileCountSpecials); " is 132.
Long Statement,MyAnimePlugin3.ViewModel,ImportFolderVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\ImportFolderVM.cs,Save,The length of the statement  "		JMMServerBinary.Contract_ImportFolder_SaveResponse response = JMMServerVM.Instance.clientBinaryHTTP.SaveImportFolder (this.ToContract ()); " is 138.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,downloadRecommendedAnimeWorker_DoWork,The length of the statement  "	List<JMMServerBinary.Contract_Recommendation> contracts = JMMServerVM.Instance.clientBinaryHTTP.GetRecommendations (20' JMMServerVM.Instance.CurrentUser.JMMUserID' 2); " is 167.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,downloadRecommendedAnimeWorker_DoWork,The length of the statement  "	contracts = JMMServerVM.Instance.clientBinaryHTTP.GetRecommendations (20' JMMServerVM.Instance.CurrentUser.JMMUserID' 2); " is 121.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,downloadCharacterImagesForSeiyuuWorker_DoWork,The length of the statement  "	List<JMMServerBinary.Contract_AniDB_Character> charContracts = JMMServerVM.Instance.clientBinaryHTTP.GetCharactersForSeiyuu (seiyuu.AniDB_SeiyuuID); " is 148.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,GetGroupFilterExtended,The length of the statement  "	JMMServerBinary.Contract_GroupFilterExtended contract = JMMServerVM.Instance.clientBinaryHTTP.GetGroupFilterExtended (groupFilterID' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 177.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,GetAllGroupFilters,The length of the statement  "		/*List<JMMServerBinary.Contract_GroupFilterExtended> gf_cons = JMMServerVM.Instance.clientBinaryHTTP.GetAllGroupFiltersExtended(1);" is 131.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,GetAnimeGroupsForFilter,The length of the statement  "		List<JMMServerBinary.Contract_AnimeGroup> rawGrps = JMMServerVM.Instance.clientBinaryHTTP.GetAnimeGroupsForFilter (groupFilter.GroupFilterID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID' BaseConfig.Settings.SingleSeriesGroups); " is 232.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,GetAnimeGroupsForFilter,The length of the statement  "			SortPropOrFieldAndDirection sortProp = GroupFilterHelper.GetSortDescription (GroupFilterSorting.SortName' GroupFilterSortDirection.Asc); " is 136.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,GetAnimeGroupsForFilter,The length of the statement  "			BaseConfig.MyAnimeLog.Write (string.Format ("Sorting: {0} / {1} / {2}"' scrit.sPropertyOrFieldName' scrit.fSortDescending' scrit.sortType)); " is 140.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,GetAnimeGroupsForFilter,The length of the statement  "		string msg = string.Format ("JMMServerHelper: Got groups for filter: {0} - {1} in {2} ms"' groupFilter.GroupFilterName' allGroups.Count' ts.TotalMilliseconds); " is 159.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,GetSubGroupsForGroup,The length of the statement  "		List<JMMServerBinary.Contract_AnimeGroup> rawGroups = JMMServerVM.Instance.clientBinaryHTTP.GetSubGroupsForGroup (grp.AnimeGroupID' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 176.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,GetSubGroupsForGroup,The length of the statement  "		string msg = string.Format ("Got sub groups for group: {0} - {1} in {2} ms"' grp.GroupName' allGroups.Count' ts.TotalMilliseconds); " is 131.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,GetAnimeSeriesForGroup,The length of the statement  "		List<JMMServerBinary.Contract_AnimeSeries> rawSeries = JMMServerVM.Instance.clientBinaryHTTP.GetSeriesForGroup (grp.AnimeGroupID' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 174.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,GetAnimeSeriesForGroup,The length of the statement  "		string msg = string.Format ("Got series for group: {0} - {1} in {2} ms"' grp.GroupName' allSeries.Count' ts.TotalMilliseconds); " is 127.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,GetAnimeSeriesForGroupRecursive,The length of the statement  "		List<JMMServerBinary.Contract_AnimeSeries> rawSeries = JMMServerVM.Instance.clientBinaryHTTP.GetSeriesForGroupRecursive (grp.AnimeGroupID' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 183.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,GetAnimeSeriesForGroupRecursive,The length of the statement  "		//string msg = string.Format("Got series for group Recursive: {0} - {1} in {2} ms"' grp.GroupName' allSeries.Count' ts.TotalMilliseconds); " is 138.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,GetGroup,The length of the statement  "		JMMServerBinary.Contract_AnimeGroup rawGroup = JMMServerVM.Instance.clientBinaryHTTP.GetGroup (animeGroupID' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 153.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,GetSeries,The length of the statement  "		JMMServerBinary.Contract_AnimeSeries rawSeries = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (animeSeriesID' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 157.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,GetSeriesForAnime,The length of the statement  "		JMMServerBinary.Contract_AnimeSeries rawSeries = JMMServerVM.Instance.clientBinaryHTTP.GetSeriesForAnime (animeID' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 159.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,GetEpisodesForSeries,The length of the statement  "		List<JMMServerBinary.Contract_AnimeEpisode> eps = JMMServerVM.Instance.clientBinaryHTTP.GetEpisodesForSeries (animeSeriesID' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 169.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,GetUnlinkedVideos,The length of the statement  "		List<JMMServerBinary.Contract_VideoLocal> vids = JMMServerVM.Instance.clientBinaryHTTP.GetUnrecognisedFiles (JMMServerVM.Instance.CurrentUser.JMMUserID); " is 153.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,SetWatchedStatusOnSeries,The length of the statement  "		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (animeSeriesID' watchedStatus' maxEpisodeNumber' (int)episodeType' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 174.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,SetDefaultPoster,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' animeID' tvPoster.TvDB_ImagePosterID' (int)ImageEntityType.TvDB_Cover' (int)ImageSizeType.Poster); " is 164.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,SetDefaultPoster,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' animeID' traktPoster.Trakt_ImagePosterID' (int)ImageEntityType.Trakt_Poster' (int)ImageSizeType.Poster); " is 170.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,SetDefaultPoster,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' animeID' anime.AnimeID' (int)ImageEntityType.AniDB_Cover' (int)ImageSizeType.Poster); " is 151.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,SetDefaultPoster,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' animeID' moviePoster.MovieDB_PosterID' (int)ImageEntityType.MovieDB_Poster' (int)ImageSizeType.Poster); " is 169.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,EnableDisablePoster,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' tvPoster.TvDB_ImagePosterID' (int)ImageEntityType.TvDB_Cover); " is 129.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,EnableDisablePoster,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' traktPoster.Trakt_ImagePosterID' (int)ImageEntityType.Trakt_Poster); " is 135.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,EnableDisablePoster,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' moviePoster.MovieDB_PosterID' (int)ImageEntityType.MovieDB_Poster); " is 134.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,SetDefaultWideBanner,The length of the statement  "		JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' animeID' banner.TvDB_ImageWideBannerID' (int)ImageEntityType.TvDB_Banner' (int)ImageSizeType.WideBanner); " is 171.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,EnableDisableWideBanner,The length of the statement  "		JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' banner.TvDB_ImageWideBannerID' (int)ImageEntityType.TvDB_Banner); " is 132.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,SetDefaultFanart,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' animeID' tvFanart.TvDB_ImageFanartID' (int)ImageEntityType.TvDB_FanArt' (int)ImageSizeType.Fanart); " is 165.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,SetDefaultFanart,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' animeID' traktFanart.Trakt_ImageFanartID' (int)ImageEntityType.Trakt_Fanart' (int)ImageSizeType.Fanart); " is 170.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,SetDefaultFanart,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' animeID' movieFanart.MovieDB_FanartID' (int)ImageEntityType.MovieDB_FanArt' (int)ImageSizeType.Fanart); " is 169.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,EnableDisableFanart,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' tvFanart.TvDB_ImageFanartID' (int)ImageEntityType.TvDB_FanArt); " is 130.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,EnableDisableFanart,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' traktFanart.Trakt_ImageFanartID' (int)ImageEntityType.Trakt_Fanart); " is 135.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,EnableDisableFanart,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' movieFanart.MovieDB_FanartID' (int)ImageEntityType.MovieDB_FanArt); " is 134.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,GetReleaseGroupsForAnime,The length of the statement  "		List<JMMServerBinary.Contract_AniDBReleaseGroup> grpsRaw = JMMServerVM.Instance.clientBinaryHTTP.GetReleaseGroupsForAnime (animeID); " is 132.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,GetAnimeForMonthYear,The length of the statement  "		List<JMMServerBinary.Contract_AniDBAnime> rawAnime = JMMServerVM.Instance.clientBinaryHTTP.GetAnimeForMonth (JMMServerVM.Instance.CurrentUser.JMMUserID' month' year); " is 166.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,GetRelatedAnime,The length of the statement  "		List<JMMServerBinary.Contract_AniDB_Anime_Relation> links = JMMServerVM.Instance.clientBinaryHTTP.GetRelatedAnimeLinks (animeID' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 173.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,GetCharactersForAnime,The length of the statement  "		List<JMMServerBinary.Contract_AniDB_Character> chars = JMMServerVM.Instance.clientBinaryHTTP.GetCharactersForAnime (animeID); " is 125.
Long Statement,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,serverStatusTimer_Elapsed,The length of the statement  "		string msg = string.Format ("JMM Server Status: {0}/{1} -- {2}/{3}"' GeneralQueueState' GeneralQueueCount' HasherQueueState' HasherQueueCount); " is 143.
Long Statement,MyAnimePlugin3.ViewModel,VideoLocalVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\VideoLocalVM.cs,GetEpisodes,The length of the statement  "		List<JMMServerBinary.Contract_AnimeEpisode> epContracts = JMMServerVM.Instance.clientBinaryHTTP.GetEpisodesForFile (this.VideoLocalID' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 179.
Long Statement,MyAnimePlugin3.Windows,ActorWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\ActorWindow.cs,ShowCharacters,The length of the statement  "	JMMServerBinary.Contract_AniDB_Seiyuu contract = JMMServerVM.Instance.clientBinaryHTTP.GetAniDBSeiyuu (MainWindow.GlobalSeiyuuID); " is 130.
Long Statement,MyAnimePlugin3.Windows,ActorWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\ActorWindow.cs,ShowCharacters,The length of the statement  "	List<JMMServerBinary.Contract_AniDB_Character> charContracts = JMMServerVM.Instance.clientBinaryHTTP.GetCharactersForSeiyuu (MainWindow.GlobalSeiyuuID); " is 152.
Long Statement,MyAnimePlugin3.Windows,AdminWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\AdminWindow.cs,Instance_ServerStatusEvent,The length of the statement  "	string msg = string.Format ("JMM Server Status: {0}/{1} -- {2}/{3}"' ev.GeneralQueueState' ev.GeneralQueueCount' ev.HasherQueueState' ev.HasherQueueCount); " is 155.
Long Statement,MyAnimePlugin3.Windows,AdminWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\AdminWindow.cs,Instance_ServerStatusEvent,The length of the statement  "			clearGUIProperty("Utilities.Status.GeneralQueueRunning");*/setGUIProperty ("Utilities.Status.HasherQueueCount"' ev.HasherQueueCount.ToString ()); " is 145.
Long Statement,MyAnimePlugin3.Windows,AnimeInfoWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\AnimeInfoWindow.cs,InfoPage,The length of the statement  "	setGUIProperty ("AnimeInfo.Info.AnidbTitle"' string.Format ("{0} (AID {1})"' MainAnime.FormattedTitle' MainAnime.AnimeID)); " is 123.
Long Statement,MyAnimePlugin3.Windows,AnimeInfoWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\AnimeInfoWindow.cs,InfoPage,The length of the statement  "	string eps = MainAnime.EpisodeCountNormal.ToString () + " (" + MainAnime.EpisodeCountSpecial.ToString () + " Specials)"; " is 120.
Long Statement,MyAnimePlugin3.Windows,AnimeInfoWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\AnimeInfoWindow.cs,FormatTextRating,The length of the statement  "	string rat = string.Format ("{0} (Votes {1}) / {2} (Votes {3})"' MainAnime.Rating.ToString ().Insert (1' ".")' MainAnime.VoteCount' MainAnime.TempRating.ToString ().Insert (1' ".")' MainAnime.TempVoteCount); " is 207.
Long Statement,MyAnimePlugin3.Windows,AnimeInfoWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\AnimeInfoWindow.cs,FormatTextReviews,The length of the statement  "	return MainAnime.ReviewCount.ToString () + " (Average rating: " + MainAnime.AvgReviewRating.ToString ().Insert (1' ".") + ")"; " is 126.
Long Statement,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,LoadData,The length of the statement  "			MediaPortal.GUI.Library.Action.ActionType actionType = (currentIndex < selIndex) ? MediaPortal.GUI.Library.Action.ActionType.ACTION_MOVE_RIGHT : MediaPortal.GUI.Library.Action.ActionType.ACTION_MOVE_LEFT; " is 204.
Long Statement,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,OnShowContextMenu,The length of the statement  "				JMMServerBinary.Contract_AnimeSeries_SaveResponse resp = JMMServerVM.Instance.clientBinaryHTTP.CreateSeriesFromAnime (anime4.AnimeID' null' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 184.
Long Statement,MyAnimePlugin3.Windows,ContinueWatchingWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\ContinueWatchingWindow.cs,getDataWorker_RunWorkerCompleted,The length of the statement  "		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (MainWindow.animeSeriesIDToBeRated.Value' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 182.
Long Statement,MyAnimePlugin3.Windows,ContinueWatchingWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\ContinueWatchingWindow.cs,getDataWorker_DoWork,The length of the statement  "	List<JMMServerBinary.Contract_AnimeEpisode> epContracts = JMMServerVM.Instance.clientBinaryHTTP.GetContinueWatchingFilter (JMMServerVM.Instance.CurrentUser.JMMUserID' 25); " is 171.
Long Statement,MyAnimePlugin3.Windows,ContinueWatchingWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\ContinueWatchingWindow.cs,SetEpisode,The length of the statement  "			ep.SetTvDBInfo(dictTvDBEpisodes' dictTvDBSeasons' dictTvDBSeasonsSpecials' tvDBCrossRef);*/clearGUIProperty ("Watching.Series.Title"); " is 134.
Long Statement,MyAnimePlugin3.Windows,ContinueWatchingWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\ContinueWatchingWindow.cs,SetEpisode,The length of the statement  "	setGUIProperty ("Watching.Series.LastWatched"' ep.AnimeSeries.WatchedDate.HasValue ? ep.AnimeSeries.WatchedDate.Value.ToString ("dd MMM yy"' Globals.Culture) : "-"); " is 165.
Long Statement,MyAnimePlugin3.Windows,ContinueWatchingWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\ContinueWatchingWindow.cs,SetEpisode,The length of the statement  "	setGUIProperty ("Watching.Series.Poster"' ImageAllocator.GetSeriesImageAsFileName (ep.AnimeSeries' GUIFacadeControl.Layout.List)); " is 130.
Long Statement,MyAnimePlugin3.Windows,ContinueWatchingWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\ContinueWatchingWindow.cs,SetEpisode,The length of the statement  "	List<JMMServerBinary.Contract_VideoDetailed> contracts = JMMServerVM.Instance.clientBinaryHTTP.GetFilesForEpisode (ep.AnimeEpisodeID' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 178.
Long Statement,MyAnimePlugin3.Windows,ContinueWatchingWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\ContinueWatchingWindow.cs,OnShowContextMenu,The length of the statement  "				JMMServerBinary.Contract_AnimeEpisode contract = JMMServerVM.Instance.clientBinaryHTTP.GetPreviousEpisodeForUnwatched (ep.AnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 199.
Long Statement,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowEpisodeDetails,The length of the statement  "		List<JMMServerBinary.Contract_GroupVideoQuality> summ = JMMServerVM.Instance.clientBinaryHTTP.GetGroupVideoQualitySummary (series.AniDB_Anime.AnimeID); " is 151.
Long Statement,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowEpisodeDetails,The length of the statement  "				fileDetails += string.Format ("{0}({1}/{2}/{3}bit) - {4} Files ({5})"' gvq.GroupNameShort' gvq.Resolution' gvq.VideoSource' gvq.VideoBitDepth' gvq.FileCountNormal' gvq.NormalEpisodeNumberSummary) + Environment.NewLine; " is 218.
Long Statement,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowPageSearch,The length of the statement  "				ShowSearchResults (MainWindow.downloadSearchHistory [MainWindow.downloadSearchHistory.Count - 1]' MainWindow.downloadSearchResultsHistory [MainWindow.downloadSearchHistory.Count - 1]); " is 184.
Long Statement,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowUTorrentList,The length of the statement  "			setGUIProperty ("Torrent.Summary"' string.Format ("{0} Active Torrents at {1}/sec"' activeTorrents' Utils.FormatByteSize ((long)totalSpeed))); " is 142.
Long Statement,MyAnimePlugin3.Windows,FanartWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\FanartWindow.cs,OnPageLoad,The length of the statement  "	BaseConfig.MyAnimeLog.Write ("OnPageLoad:FanartWindow seriesid : {0} -  CurrentView: {1}"' MainWindow.GlobalSeriesID.ToString ()' CurrentView); " is 143.
Long Statement,MyAnimePlugin3.Windows,FanartWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\FanartWindow.cs,onFacadeItemSelected,The length of the statement  "	if (parent != m_Facade && parent != m_Facade.FilmstripLayout && parent != m_Facade.CoverFlowLayout && parent != m_Facade.ThumbnailLayout && parent != m_Facade.ListLayout) " is 170.
Long Statement,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,LoadData,The length of the statement  "	else if (MainWindow.RandomWindow_RandomType == RandomObjectType.Episode && MainWindow.RandomWindow_CurrentEpisode != null) " is 122.
Long Statement,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,GetSeriesForGroupFilter,The length of the statement  "		List<JMMServerBinary.Contract_AnimeGroup> contracts = JMMServerVM.Instance.clientBinaryHTTP.GetAnimeGroupsForFilter (gf.GroupFilterID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID' BaseConfig.Settings.SingleSeriesGroups); " is 225.
Long Statement,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,DisplayEpisode,The length of the statement  "		setGUIProperty ("Series.LastWatched"' MainWindow.RandomWindow_CurrentSeries.WatchedDate.HasValue ? MainWindow.RandomWindow_CurrentSeries.WatchedDate.Value.ToString ("dd MMM yy"' Globals.Culture) : "-"); " is 202.
Long Statement,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,DisplayEpisode,The length of the statement  "		setGUIProperty ("Series.Poster"' ImageAllocator.GetSeriesImageAsFileName (MainWindow.RandomWindow_CurrentSeries' GUIFacadeControl.Layout.List)); " is 144.
Long Statement,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,DisplayEpisode,The length of the statement  "		setGUIProperty ("Episode.RunTime"' Utils.FormatSecondsToDisplayTime (MainWindow.RandomWindow_CurrentEpisode.AniDB_LengthSeconds)); " is 130.
Long Statement,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,DisplayEpisode,The length of the statement  "			if (MainWindow.RandomWindow_CurrentEpisode.EpisodeOverview.Trim ().Length > 0 && MainWindow.RandomWindow_CurrentEpisode.IsWatched == 0) " is 135.
Long Statement,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,DisplayEpisode,The length of the statement  "		List<JMMServerBinary.Contract_VideoDetailed> contracts = JMMServerVM.Instance.clientBinaryHTTP.GetFilesForEpisode (MainWindow.RandomWindow_CurrentEpisode.AnimeEpisodeID' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 214.
Long Statement,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,DisplaySeries,The length of the statement  "		setGUIProperty ("Series.LastWatched"' MainWindow.RandomWindow_CurrentSeries.WatchedDate.HasValue ? MainWindow.RandomWindow_CurrentSeries.WatchedDate.Value.ToString ("dd MMM yy"' Globals.Culture) : "-"); " is 202.
Long Statement,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,DisplaySeries,The length of the statement  "		setGUIProperty ("Series.Poster"' ImageAllocator.GetSeriesImageAsFileName (MainWindow.RandomWindow_CurrentSeries' GUIFacadeControl.Layout.List)); " is 144.
Long Statement,MyAnimePlugin3.Windows,RecommendationsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RecommendationsWindow.cs,getDataWorker_DoWork,The length of the statement  "	List<JMMServerBinary.Contract_Recommendation> contracts = JMMServerVM.Instance.clientBinaryHTTP.GetRecommendations (20' JMMServerVM.Instance.CurrentUser.JMMUserID' recType); " is 173.
Long Statement,MyAnimePlugin3.Windows,RecommendationsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RecommendationsWindow.cs,OnShowContextMenu,The length of the statement  "				JMMServerVM.Instance.clientBinaryHTTP.IgnoreAnime (rec.RecommendedAnimeID' recType' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 128.
Long Statement,MyAnimePlugin3.Windows,RecommendationsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RecommendationsWindow.cs,OnShowContextMenu,The length of the statement  "				JMMServerBinary.Contract_AnimeSeries_SaveResponse resp = JMMServerVM.Instance.clientBinaryHTTP.CreateSeriesFromAnime (rec.RecommendedAnimeID' null' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 192.
Long Statement,MyAnimePlugin3.Windows,RecommendationsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RecommendationsWindow.cs,OnClicked,The length of the statement  "					JMMServerBinary.Contract_AnimeEpisode ep = JMMServerVM.Instance.clientBinaryHTTP.GetNextUnwatchedEpisode (rec.Recommended_AnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID); " is 199.
Long Statement,MyAnimePlugin3.Windows,RelationsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RelationsWindow.cs,ShowRelations,The length of the statement  "		BaseConfig.MyAnimeLog.Write ("AnimeID: " + mainAnime.AnimeID.ToString () + "' Related ID: " + ra.AniDB_Anime.AnimeID.ToString ()); " is 130.
Long Statement,MyAnimePlugin3.Windows,RelationsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RelationsWindow.cs,SetAnime,The length of the statement  "		setGUIProperty ("Related.Episodes"' anime.EpisodeCountNormal.ToString () + " (" + anime.EpisodeCountSpecial.ToString () + " Specials)"); " is 136.
Complex Conditional,MyAnimePlugin3,View,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\View.cs,ContentEquals,The conditional expression  "(_showTypeCompleted != view._showTypeCompleted) || (_showTypeNewEps != view._showTypeNewEps) || (_showTypeNewSeason != view._showTypeNewSeason) || (_showTypeWatched != view._showTypeWatched) || (_showTypeFavorite != view._showTypeFavorite) || (_showTypeAdultContent != view._showTypeAdultContent) || (_showTypeMissingEpisodes != view._showTypeMissingEpisodes) || (_showTypeBluRay != view._showTypeBluRay) || (_showTypeDVD != view._showTypeDVD) || (_showTypeRecentlyWatched != view._showTypeRecentlyWatched)"  is complex.
Complex Conditional,MyAnimePlugin3,View,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\View.cs,ContentEquals,The conditional expression  "_dctGenre.Count != view._dctGenre.Count || (_dctYear.Count != view._dctYear.Count) || (_dctAudioLang.Count != view._dctAudioLang.Count) || (_dctSubtitleLang.Count != view._dctSubtitleLang.Count) || (_dctAnimeType.Count != view._dctAnimeType.Count)"  is complex.
Complex Conditional,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnAction,The conditional expression  "(m_Facade.CurrentLayout == GUIFacadeControl.Layout.List && m_Facade.ListLayout.IsFocused) || (m_Facade.CurrentLayout == GUIFacadeControl.Layout.LargeIcons && m_Facade.ThumbnailLayout.IsFocused) || (m_Facade.CurrentLayout == GUIFacadeControl.Layout.Filmstrip && m_Facade.FilmstripLayout.IsFocused) || (m_Facade.CurrentLayout == GUIFacadeControl.Layout.CoverFlow && m_Facade.CoverFlowLayout.IsFocused)"  is complex.
Complex Conditional,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,hook_KeyDown,The conditional expression  "!e.Alt && !e.Control && IsSearchChar (e.keyChar) && MediaPortal.Player.g_Player.Playing == false"  is complex.
Complex Conditional,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,hook_KeyUp,The conditional expression  "(m_Facade.CurrentLayout == GUIFacadeControl.Layout.List && m_Facade.ListLayout.IsFocused) || (m_Facade.CurrentLayout == GUIFacadeControl.Layout.LargeIcons && m_Facade.ThumbnailLayout.IsFocused) || (m_Facade.CurrentLayout == GUIFacadeControl.Layout.Filmstrip && m_Facade.FilmstripLayout.IsFocused) || (m_Facade.CurrentLayout == GUIFacadeControl.Layout.CoverFlow && m_Facade.CoverFlowLayout.IsFocused)"  is complex.
Complex Conditional,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,onFacadeItemSelected,The conditional expression  "parent != m_Facade && parent != m_Facade.FilmstripLayout && parent != m_Facade.CoverFlowLayout && parent != m_Facade.ThumbnailLayout && parent != m_Facade.ListLayout"  is complex.
Complex Conditional,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuTVDB,The conditional expression  "ser.CrossRef_AniDB_TvDBV2.Count > 0 && ser.TvDBSeriesV2.Count > 0 && ser.AniDB_Anime.AniDB_AnimeCrossRefs != null && ser.AniDB_Anime.AniDB_AnimeCrossRefs.TvDBCrossRefExists"  is complex.
Complex Conditional,MyAnimePlugin3.Downloads,CsvStream,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\CsvStream.cs,GetNextItem,The conditional expression  "(predata || postdata || !quoted) && (c == '\x0A' || c == '\x0D')"  is complex.
Complex Conditional,MyAnimePlugin3.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The conditional expression  "anime != null && anime.DefaultFanart != null && anime.DefaultFanart.ImageParentType == (int)ImageEntityType.Trakt_Fanart && anime.DefaultFanart.ImageParentID == TraktImageFanart.Trakt_ImageFanartID"  is complex.
Complex Conditional,MyAnimePlugin3.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The conditional expression  "anime != null && anime.DefaultPoster != null && anime.DefaultPoster.ImageParentType == (int)ImageEntityType.Trakt_Poster && anime.DefaultPoster.ImageParentID == TraktImagePoster.Trakt_ImagePosterID"  is complex.
Complex Conditional,MyAnimePlugin3.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The conditional expression  "anime != null && anime.DefaultFanart != null && anime.DefaultFanart.ImageParentType == (int)ImageEntityType.TvDB_FanArt && anime.DefaultFanart.ImageParentID == contract.TvDB_ImageFanartID"  is complex.
Complex Conditional,MyAnimePlugin3.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The conditional expression  "anime != null && anime.DefaultPoster != null && anime.DefaultPoster.ImageParentType == (int)ImageEntityType.TvDB_Cover && anime.DefaultPoster.ImageParentID == contract.TvDB_ImagePosterID"  is complex.
Complex Conditional,MyAnimePlugin3.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The conditional expression  "anime != null && anime.DefaultWideBanner != null && anime.DefaultWideBanner.ImageParentType == (int)ImageEntityType.TvDB_Banner && anime.DefaultWideBanner.ImageParentID == contract.TvDB_ImageWideBannerID"  is complex.
Complex Conditional,MyAnimePlugin3.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The conditional expression  "(CrossRef_AniDB_TvDB == null || CrossRef_AniDB_TvDB.Count == 0) || (TvDBSeries == null || TvDBSeries.Count == 0)"  is complex.
Complex Conditional,MyAnimePlugin3.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The conditional expression  "anime != null && anime.DefaultFanart != null && anime.DefaultFanart.ImageParentType == (int)ImageEntityType.MovieDB_FanArt && anime.DefaultFanart.ImageParentID == contract.MovieDB_FanartID"  is complex.
Complex Conditional,MyAnimePlugin3.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The conditional expression  "anime != null && anime.DefaultPoster != null && anime.DefaultPoster.ImageParentType == (int)ImageEntityType.MovieDB_Poster && anime.DefaultPoster.ImageParentID == contract.MovieDB_PosterID"  is complex.
Complex Conditional,MyAnimePlugin3.Windows,FanartWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\FanartWindow.cs,onFacadeItemSelected,The conditional expression  "parent != m_Facade && parent != m_Facade.FilmstripLayout && parent != m_Facade.CoverFlowLayout && parent != m_Facade.ThumbnailLayout && parent != m_Facade.ListLayout"  is complex.
Empty Catch Block,MyAnimePlugin3,MyAnimeLog,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MyAnimeLog.cs,Write,The method has an empty catch block.
Empty Catch Block,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,CheckRequiredFiles,The method has an empty catch block.
Empty Catch Block,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,SetGUIProperties,The method has an empty catch block.
Empty Catch Block,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,hook_KeyUp,The method has an empty catch block.
Empty Catch Block,Cornerstone.MP,AsyncImageResource,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\AsyncImageResource.cs,loadResource,The method has an empty catch block.
Empty Catch Block,MyAnimePlugin3.ImageManagement,ImageDownloader,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ImageManagement\ImageDownloader.cs,ProcessImageDownloadRequest,The method has an empty catch block.
Empty Catch Block,MyAnimePlugin3.ImageManagement,ImageDownloader,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ImageManagement\ImageDownloader.cs,ProcessImageDownloadRequest,The method has an empty catch block.
Empty Catch Block,MyAnimePlugin3.ImageManagement,ImageDownloader,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ImageManagement\ImageDownloader.cs,DownloadImage,The method has an empty catch block.
Empty Catch Block,MyAnimePlugin3.ImageManagement,ImageDownloader,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ImageManagement\ImageDownloader.cs,DownloadImage,The method has an empty catch block.
Empty Catch Block,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,Init,The method has an empty catch block.
Empty Catch Block,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,serverStatusTimer_Elapsed,The method has an empty catch block.
Empty Catch Block,MyAnimePlugin3.Windows,CharWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CharWindow.cs,SetCharacterProperties,The method has an empty catch block.
Empty Catch Block,MyAnimePlugin3.Windows,CharWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CharWindow.cs,SetActorProperties,The method has an empty catch block.
Empty Catch Block,MyAnimePlugin3.Windows,CharWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CharWindow.cs,SetActorProperties,The method has an empty catch block.
Empty Catch Block,MyAnimePlugin3.Windows,CharWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CharWindow.cs,OnClicked,The method has an empty catch block.
Magic Number,MyAnimePlugin3,Fanart,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Fanart.cs,GetColor,The following statement contains a magic number: if (HasColorInfo && which <= 3 && which > 0) {  	string[] split = this.colors.ToString ().Split (new char[] {  		'|'  	}' StringSplitOptions.RemoveEmptyEntries);  	if (split.Length != 3)  		return default(System.Drawing.Color);  	string[] rgbValues = split [--which].Split (new char[] {  		'''  	}' StringSplitOptions.RemoveEmptyEntries);  	return System.Drawing.Color.FromArgb (100' Int32.Parse (rgbValues [0])' Int32.Parse (rgbValues [1])' Int32.Parse (rgbValues [2]));  }  else  	return default(System.Drawing.Color);  
Magic Number,MyAnimePlugin3,Fanart,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Fanart.cs,GetColor,The following statement contains a magic number: if (HasColorInfo && which <= 3 && which > 0) {  	string[] split = this.colors.ToString ().Split (new char[] {  		'|'  	}' StringSplitOptions.RemoveEmptyEntries);  	if (split.Length != 3)  		return default(System.Drawing.Color);  	string[] rgbValues = split [--which].Split (new char[] {  		'''  	}' StringSplitOptions.RemoveEmptyEntries);  	return System.Drawing.Color.FromArgb (100' Int32.Parse (rgbValues [0])' Int32.Parse (rgbValues [1])' Int32.Parse (rgbValues [2]));  }  else  	return default(System.Drawing.Color);  
Magic Number,MyAnimePlugin3,Fanart,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Fanart.cs,GetColor,The following statement contains a magic number: if (HasColorInfo && which <= 3 && which > 0) {  	string[] split = this.colors.ToString ().Split (new char[] {  		'|'  	}' StringSplitOptions.RemoveEmptyEntries);  	if (split.Length != 3)  		return default(System.Drawing.Color);  	string[] rgbValues = split [--which].Split (new char[] {  		'''  	}' StringSplitOptions.RemoveEmptyEntries);  	return System.Drawing.Color.FromArgb (100' Int32.Parse (rgbValues [0])' Int32.Parse (rgbValues [1])' Int32.Parse (rgbValues [2]));  }  else  	return default(System.Drawing.Color);  
Magic Number,MyAnimePlugin3,Fanart,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Fanart.cs,GetColor,The following statement contains a magic number: if (HasColorInfo && which <= 3 && which > 0) {  	string[] split = this.colors.ToString ().Split (new char[] {  		'|'  	}' StringSplitOptions.RemoveEmptyEntries);  	if (split.Length != 3)  		return default(System.Drawing.Color);  	string[] rgbValues = split [--which].Split (new char[] {  		'''  	}' StringSplitOptions.RemoveEmptyEntries);  	return System.Drawing.Color.FromArgb (100' Int32.Parse (rgbValues [0])' Int32.Parse (rgbValues [1])' Int32.Parse (rgbValues [2]));  }  else  	return default(System.Drawing.Color);  
Magic Number,MyAnimePlugin3,Fanart,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Fanart.cs,GetColor,The following statement contains a magic number: if (split.Length != 3)  	return default(System.Drawing.Color);  
Magic Number,MyAnimePlugin3,Fanart,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Fanart.cs,GetColor,The following statement contains a magic number: return System.Drawing.Color.FromArgb (100' Int32.Parse (rgbValues [0])' Int32.Parse (rgbValues [1])' Int32.Parse (rgbValues [2]));  
Magic Number,MyAnimePlugin3,Fanart,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Fanart.cs,GetColor,The following statement contains a magic number: return System.Drawing.Color.FromArgb (100' Int32.Parse (rgbValues [0])' Int32.Parse (rgbValues [1])' Int32.Parse (rgbValues [2]));  
Magic Number,MyAnimePlugin3,AnimePluginSettings,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\AnimePluginSettings.cs,Load,The following statement contains a magic number: if (tmpPost > 0 && tmpPost <= 100)  	PosterSizePct = tmpPost;  else  	PosterSizePct = 50;  
Magic Number,MyAnimePlugin3,AnimePluginSettings,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\AnimePluginSettings.cs,Load,The following statement contains a magic number: if (tmpPost > 0 && tmpPost <= 100)  	PosterSizePct = tmpPost;  else  	PosterSizePct = 50;  
Magic Number,MyAnimePlugin3,AnimePluginSettings,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\AnimePluginSettings.cs,Load,The following statement contains a magic number: PosterSizePct = 50;  
Magic Number,MyAnimePlugin3,AnimePluginSettings,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\AnimePluginSettings.cs,Load,The following statement contains a magic number: if (tmpBanner > 0 && tmpBanner <= 100)  	BannerSizePct = tmpBanner;  else  	BannerSizePct = 50;  
Magic Number,MyAnimePlugin3,AnimePluginSettings,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\AnimePluginSettings.cs,Load,The following statement contains a magic number: if (tmpBanner > 0 && tmpBanner <= 100)  	BannerSizePct = tmpBanner;  else  	BannerSizePct = 50;  
Magic Number,MyAnimePlugin3,AnimePluginSettings,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\AnimePluginSettings.cs,Load,The following statement contains a magic number: BannerSizePct = 50;  
Magic Number,MyAnimePlugin3,ImageAllocator,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ImageAllocator.cs,drawSimpleBanner,The following statement contains a magic number: gph.DrawString (label' font' new SolidBrush (Color.FromArgb (200' Color.White))' 5' (sizeImage.Height - font.GetHeight ()) / 2);  
Magic Number,MyAnimePlugin3,ImageAllocator,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ImageAllocator.cs,drawSimpleBanner,The following statement contains a magic number: gph.DrawString (label' font' new SolidBrush (Color.FromArgb (200' Color.White))' 5' (sizeImage.Height - font.GetHeight ()) / 2);  
Magic Number,MyAnimePlugin3,ImageAllocator,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ImageAllocator.cs,drawSimpleBanner,The following statement contains a magic number: gph.DrawString (label' font' new SolidBrush (Color.FromArgb (200' Color.White))' 5' (sizeImage.Height - font.GetHeight ()) / 2);  
Magic Number,MyAnimePlugin3,Logos,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Logos.cs,buildLogoImage,The following statement contains a magic number: if (bestWidth >= 1280 && bestWidth < 1920 && File.Exists (SkinSettings.LogoRes720))  	logosForBuilding.Add (SkinSettings.LogoRes720);  
Magic Number,MyAnimePlugin3,Logos,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Logos.cs,buildLogoImage,The following statement contains a magic number: if (bestWidth >= 1280 && bestWidth < 1920 && File.Exists (SkinSettings.LogoRes720))  	logosForBuilding.Add (SkinSettings.LogoRes720);  
Magic Number,MyAnimePlugin3,Logos,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Logos.cs,buildLogoImage,The following statement contains a magic number: if (bestWidth >= 1920 && File.Exists (SkinSettings.LogoRes1080))  	logosForBuilding.Add (SkinSettings.LogoRes1080);  
Magic Number,MyAnimePlugin3,Logos,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Logos.cs,buildLogoImage,The following statement contains a magic number: if (bestWidth > 0 && bestHeight > 0) {  	double dim = (double)bestWidth / (double)bestHeight;  	if (dim > (double)1.4) {  		if (File.Exists (SkinSettings.LogoWidescreen))  			logosForBuilding.Add (SkinSettings.LogoWidescreen);  	}  	else {  		if (File.Exists (SkinSettings.LogoFullscreen))  			logosForBuilding.Add (SkinSettings.LogoFullscreen);  	}  }  
Magic Number,MyAnimePlugin3,Logos,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Logos.cs,buildLogoImage,The following statement contains a magic number: if (dim > (double)1.4) {  	if (File.Exists (SkinSettings.LogoWidescreen))  		logosForBuilding.Add (SkinSettings.LogoWidescreen);  }  else {  	if (File.Exists (SkinSettings.LogoFullscreen))  		logosForBuilding.Add (SkinSettings.LogoFullscreen);  }  
Magic Number,MyAnimePlugin3,Logos,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Logos.cs,buildLogoImage,The following statement contains a magic number: return buildLogoImage (logosForBuilding' 800' 50);  
Magic Number,MyAnimePlugin3,Logos,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Logos.cs,buildLogoImage,The following statement contains a magic number: return buildLogoImage (logosForBuilding' 800' 50);  
Magic Number,MyAnimePlugin3,Logos,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Logos.cs,GetVideoSourceRanking,The following statement contains a magic number: if (source.ToUpper ().Contains ("BLU"))  	return 100;  
Magic Number,MyAnimePlugin3,Logos,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Logos.cs,GetVideoSourceRanking,The following statement contains a magic number: return 100;  
Magic Number,MyAnimePlugin3,Logos,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Logos.cs,GetVideoSourceRanking,The following statement contains a magic number: if (source.ToUpper ().Contains ("DVD"))  	return 99;  
Magic Number,MyAnimePlugin3,Logos,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Logos.cs,GetVideoSourceRanking,The following statement contains a magic number: return 99;  
Magic Number,MyAnimePlugin3,Logos,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Logos.cs,GetVideoSourceRanking,The following statement contains a magic number: if (source.ToUpper ().Contains ("HDTV"))  	return 98;  
Magic Number,MyAnimePlugin3,Logos,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Logos.cs,GetVideoSourceRanking,The following statement contains a magic number: return 98;  
Magic Number,MyAnimePlugin3,Logos,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Logos.cs,GetVideoSourceRanking,The following statement contains a magic number: if (source.ToUpper ().Contains ("DTV"))  	return 97;  
Magic Number,MyAnimePlugin3,Logos,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Logos.cs,GetVideoSourceRanking,The following statement contains a magic number: return 97;  
Magic Number,MyAnimePlugin3,Logos,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Logos.cs,GetVideoSourceRanking,The following statement contains a magic number: if (source.ToUpper ().Trim () == "TV")  	return 96;  
Magic Number,MyAnimePlugin3,Logos,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Logos.cs,GetVideoSourceRanking,The following statement contains a magic number: return 96;  
Magic Number,MyAnimePlugin3,Logos,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Logos.cs,GetVideoSourceRanking,The following statement contains a magic number: if (source.ToUpper ().Contains ("VHS"))  	return 95;  
Magic Number,MyAnimePlugin3,Logos,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Logos.cs,GetVideoSourceRanking,The following statement contains a magic number: return 95;  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,DownloadWebPage,The following statement contains a magic number: try {  	//BaseConfig.MyAnimeLog.Write("DownloadWebPage called by: {0} - {1}"' GetParentMethodName()' url);  	HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create (url);  	webReq.Timeout = 10000;  	// 10 seconds  	webReq.Headers.Add (HttpRequestHeader.AcceptEncoding' "gzip'deflate");  	webReq.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;  	if (!string.IsNullOrEmpty (cookieHeader))  		webReq.Headers.Add ("Cookie"' cookieHeader);  	if (setUserAgent)  		webReq.UserAgent = "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)";  	HttpWebResponse WebResponse = (HttpWebResponse)webReq.GetResponse ();  	Stream responseStream = WebResponse.GetResponseStream ();  	String enco = WebResponse.CharacterSet;  	Encoding encoding = null;  	if (!String.IsNullOrEmpty (enco))  		encoding = Encoding.GetEncoding (WebResponse.CharacterSet);  	if (encoding == null)  		encoding = Encoding.Default;  	StreamReader Reader = new StreamReader (responseStream' encoding);  	string output = Reader.ReadToEnd ();  	//BaseConfig.MyAnimeLog.Write("DownloadWebPage: {0}"' output);  	WebResponse.Close ();  	responseStream.Close ();  	return output;  }  catch (Exception ex) {  	string msg = "---------- ERROR IN DOWNLOAD WEB PAGE ---------" + Environment.NewLine + url + Environment.NewLine + ex.ToString () + Environment.NewLine + "------------------------------------";  	BaseConfig.MyAnimeLog.Write (msg);  	// if the error is a 404 error it may mean that there is a bad series association  	// so lets log it to the web cache so we can investigate  	if (ex.ToString ().Contains ("(404) Not Found")) {  	}  	return "";  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,DownloadWebPage,The following statement contains a magic number: webReq.Timeout = 10000;  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,DownloadWebBinary,The following statement contains a magic number: try {  	HttpWebResponse response = null;  	HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create (url);  	// Note: some network proxies require the useragent string to be set or they will deny the http request  	// this is true for instance for EVERY thailand internet connection (also needs to be set for banners/episodethumbs and any other http request we send)  	webReq.UserAgent = "Anime2MP";  	webReq.Timeout = 20000;  	// 20 seconds  	response = (HttpWebResponse)webReq.GetResponse ();  	if (response != null)  		// Get the stream associated with the response.  		return response.GetResponseStream ();  	else  		return null;  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write (ex.ToString ());  	return null;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,DownloadWebBinary,The following statement contains a magic number: webReq.Timeout = 20000;  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: selValue = (decimal)1.5;  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: selValue = (decimal)2;  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: selValue = (decimal)2.5;  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: selValue = (decimal)3;  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: selValue = (decimal)3.5;  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: selValue = (decimal)4;  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: selValue = (decimal)4.5;  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: selValue = (decimal)5;  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: selValue = (decimal)5.5;  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: selValue = (decimal)6;  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: selValue = (decimal)6.5;  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: selValue = (decimal)7;  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: selValue = (decimal)7.5;  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: selValue = (decimal)8;  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: selValue = (decimal)8.5;  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: selValue = (decimal)9;  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: selValue = (decimal)9.5;  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following statement contains a magic number: selValue = (decimal)10;  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,ReparseDescription,The following statement contains a magic number: while ((vup.Contains ("[URL")) || (vup.Contains ("[/URL]"))) {  	int a = vup.IndexOf ("[URL");  	if (a >= 0) {  		int b = vup.IndexOf ("]"' a + 1);  		if (b >= 0) {  			val = val.Substring (0' a) + val.Substring (b + 1);  			vup = val.ToUpper ();  		}  	}  	a = vup.IndexOf ("[/URL]");  	if (a >= 0) {  		val = val.Substring (0' a) + val.Substring (a + 6);  		vup = val.ToUpper ();  	}  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,ReparseDescription,The following statement contains a magic number: if (a >= 0) {  	val = val.Substring (0' a) + val.Substring (a + 6);  	vup = val.ToUpper ();  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,ReparseDescription,The following statement contains a magic number: val = val.Substring (0' a) + val.Substring (a + 6);  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,ReparseDescription,The following statement contains a magic number: while (vup.Contains ("HTTP:")) {  	int a = vup.IndexOf ("HTTP:");  	if (a >= 0) {  		int b = vup.IndexOf (" "' a + 1);  		if (b >= 0) {  			if (vup [b + 1] == '[') {  				int c = vup.IndexOf ("]"' b + 1);  				val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  			}  			else {  				val = val.Substring (0' a) + val.Substring (b);  			}  			vup = val.ToUpper ();  		}  		else {  			break;  		}  	}  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,ReparseDescription,The following statement contains a magic number: while (vup.Contains ("HTTP:")) {  	int a = vup.IndexOf ("HTTP:");  	if (a >= 0) {  		int b = vup.IndexOf (" "' a + 1);  		if (b >= 0) {  			if (vup [b + 1] == '[') {  				int c = vup.IndexOf ("]"' b + 1);  				val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  			}  			else {  				val = val.Substring (0' a) + val.Substring (b);  			}  			vup = val.ToUpper ();  		}  		else {  			break;  		}  	}  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,ReparseDescription,The following statement contains a magic number: if (a >= 0) {  	int b = vup.IndexOf (" "' a + 1);  	if (b >= 0) {  		if (vup [b + 1] == '[') {  			int c = vup.IndexOf ("]"' b + 1);  			val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  		}  		else {  			val = val.Substring (0' a) + val.Substring (b);  		}  		vup = val.ToUpper ();  	}  	else {  		break;  	}  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,ReparseDescription,The following statement contains a magic number: if (a >= 0) {  	int b = vup.IndexOf (" "' a + 1);  	if (b >= 0) {  		if (vup [b + 1] == '[') {  			int c = vup.IndexOf ("]"' b + 1);  			val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  		}  		else {  			val = val.Substring (0' a) + val.Substring (b);  		}  		vup = val.ToUpper ();  	}  	else {  		break;  	}  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,ReparseDescription,The following statement contains a magic number: if (b >= 0) {  	if (vup [b + 1] == '[') {  		int c = vup.IndexOf ("]"' b + 1);  		val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  	}  	else {  		val = val.Substring (0' a) + val.Substring (b);  	}  	vup = val.ToUpper ();  }  else {  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,ReparseDescription,The following statement contains a magic number: if (b >= 0) {  	if (vup [b + 1] == '[') {  		int c = vup.IndexOf ("]"' b + 1);  		val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  	}  	else {  		val = val.Substring (0' a) + val.Substring (b);  	}  	vup = val.ToUpper ();  }  else {  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,ReparseDescription,The following statement contains a magic number: if (vup [b + 1] == '[') {  	int c = vup.IndexOf ("]"' b + 1);  	val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  }  else {  	val = val.Substring (0' a) + val.Substring (b);  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,ReparseDescription,The following statement contains a magic number: if (vup [b + 1] == '[') {  	int c = vup.IndexOf ("]"' b + 1);  	val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  }  else {  	val = val.Substring (0' a) + val.Substring (b);  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,ReparseDescription,The following statement contains a magic number: val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,ReparseDescription,The following statement contains a magic number: val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,FormatSecondsToDisplayTime,The following statement contains a magic number: if (t.Hours > 0)  	return string.Format ("{0}:{1}:{2}"' t.Hours' t.Minutes.ToString ().PadLeft (2' '0')' t.Seconds.ToString ().PadLeft (2' '0'));  else  	return string.Format ("{0}:{1}"' t.Minutes' t.Seconds.ToString ().PadLeft (2' '0'));  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,FormatSecondsToDisplayTime,The following statement contains a magic number: if (t.Hours > 0)  	return string.Format ("{0}:{1}:{2}"' t.Hours' t.Minutes.ToString ().PadLeft (2' '0')' t.Seconds.ToString ().PadLeft (2' '0'));  else  	return string.Format ("{0}:{1}"' t.Minutes' t.Seconds.ToString ().PadLeft (2' '0'));  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,FormatSecondsToDisplayTime,The following statement contains a magic number: if (t.Hours > 0)  	return string.Format ("{0}:{1}:{2}"' t.Hours' t.Minutes.ToString ().PadLeft (2' '0')' t.Seconds.ToString ().PadLeft (2' '0'));  else  	return string.Format ("{0}:{1}"' t.Minutes' t.Seconds.ToString ().PadLeft (2' '0'));  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,FormatSecondsToDisplayTime,The following statement contains a magic number: return string.Format ("{0}:{1}:{2}"' t.Hours' t.Minutes.ToString ().PadLeft (2' '0')' t.Seconds.ToString ().PadLeft (2' '0'));  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,FormatSecondsToDisplayTime,The following statement contains a magic number: return string.Format ("{0}:{1}:{2}"' t.Hours' t.Minutes.ToString ().PadLeft (2' '0')' t.Seconds.ToString ().PadLeft (2' '0'));  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,FormatSecondsToDisplayTime,The following statement contains a magic number: return string.Format ("{0}:{1}"' t.Minutes' t.Seconds.ToString ().PadLeft (2' '0'));  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,RemoveInvalidFolderNameCharacters,The following statement contains a magic number: ret = ret.Replace (((Char)34).ToString ()' "");  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetSortName,The following statement contains a magic number: if (newName.ToLower ().StartsWith ("the "))  	newName.Remove (0' 4);  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetSortName,The following statement contains a magic number: newName.Remove (0' 4);  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetSortName,The following statement contains a magic number: if (newName.ToLower ().StartsWith ("a "))  	newName.Remove (0' 2);  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetSortName,The following statement contains a magic number: newName.Remove (0' 2);  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32Windows) {  	//This is a pre-NT version of Windows  	switch (vs.Minor) {  	case 0:  		operatingSystem = "95";  		break;  	case 10:  		if (vs.Revision.ToString () == "2222A")  			operatingSystem = "98SE";  		else  			operatingSystem = "98";  		break;  	case 90:  		operatingSystem = "Me";  		break;  	default:  		break;  	}  }  else if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32Windows) {  	//This is a pre-NT version of Windows  	switch (vs.Minor) {  	case 0:  		operatingSystem = "95";  		break;  	case 10:  		if (vs.Revision.ToString () == "2222A")  			operatingSystem = "98SE";  		else  			operatingSystem = "98";  		break;  	case 90:  		operatingSystem = "Me";  		break;  	default:  		break;  	}  }  else if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32Windows) {  	//This is a pre-NT version of Windows  	switch (vs.Minor) {  	case 0:  		operatingSystem = "95";  		break;  	case 10:  		if (vs.Revision.ToString () == "2222A")  			operatingSystem = "98SE";  		else  			operatingSystem = "98";  		break;  	case 90:  		operatingSystem = "Me";  		break;  	default:  		break;  	}  }  else if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32Windows) {  	//This is a pre-NT version of Windows  	switch (vs.Minor) {  	case 0:  		operatingSystem = "95";  		break;  	case 10:  		if (vs.Revision.ToString () == "2222A")  			operatingSystem = "98SE";  		else  			operatingSystem = "98";  		break;  	case 90:  		operatingSystem = "Me";  		break;  	default:  		break;  	}  }  else if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32Windows) {  	//This is a pre-NT version of Windows  	switch (vs.Minor) {  	case 0:  		operatingSystem = "95";  		break;  	case 10:  		if (vs.Revision.ToString () == "2222A")  			operatingSystem = "98SE";  		else  			operatingSystem = "98";  		break;  	case 90:  		operatingSystem = "Me";  		break;  	default:  		break;  	}  }  else if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32Windows) {  	//This is a pre-NT version of Windows  	switch (vs.Minor) {  	case 0:  		operatingSystem = "95";  		break;  	case 10:  		if (vs.Revision.ToString () == "2222A")  			operatingSystem = "98SE";  		else  			operatingSystem = "98";  		break;  	case 90:  		operatingSystem = "Me";  		break;  	default:  		break;  	}  }  else if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetOSInfo,The following statement contains a magic number: switch (vs.Minor) {  case 0:  	operatingSystem = "95";  	break;  case 10:  	if (vs.Revision.ToString () == "2222A")  		operatingSystem = "98SE";  	else  		operatingSystem = "98";  	break;  case 90:  	operatingSystem = "Me";  	break;  default:  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetOSInfo,The following statement contains a magic number: switch (vs.Minor) {  case 0:  	operatingSystem = "95";  	break;  case 10:  	if (vs.Revision.ToString () == "2222A")  		operatingSystem = "98SE";  	else  		operatingSystem = "98";  	break;  case 90:  	operatingSystem = "Me";  	break;  default:  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetOSInfo,The following statement contains a magic number: switch (vs.Major) {  case 3:  	operatingSystem = "NT 3.51";  	break;  case 4:  	operatingSystem = "NT 4.0";  	break;  case 5:  	if (vs.Minor == 0)  		operatingSystem = "2000";  	else  		operatingSystem = "XP";  	break;  case 6:  	if (vs.Minor == 0)  		operatingSystem = "Vista";  	else  		operatingSystem = "7";  	break;  default:  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetOSInfo,The following statement contains a magic number: switch (vs.Major) {  case 3:  	operatingSystem = "NT 3.51";  	break;  case 4:  	operatingSystem = "NT 4.0";  	break;  case 5:  	if (vs.Minor == 0)  		operatingSystem = "2000";  	else  		operatingSystem = "XP";  	break;  case 6:  	if (vs.Minor == 0)  		operatingSystem = "Vista";  	else  		operatingSystem = "7";  	break;  default:  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetOSInfo,The following statement contains a magic number: switch (vs.Major) {  case 3:  	operatingSystem = "NT 3.51";  	break;  case 4:  	operatingSystem = "NT 4.0";  	break;  case 5:  	if (vs.Minor == 0)  		operatingSystem = "2000";  	else  		operatingSystem = "XP";  	break;  case 6:  	if (vs.Minor == 0)  		operatingSystem = "Vista";  	else  		operatingSystem = "7";  	break;  default:  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetOSInfo,The following statement contains a magic number: switch (vs.Major) {  case 3:  	operatingSystem = "NT 3.51";  	break;  case 4:  	operatingSystem = "NT 4.0";  	break;  case 5:  	if (vs.Minor == 0)  		operatingSystem = "2000";  	else  		operatingSystem = "XP";  	break;  case 6:  	if (vs.Minor == 0)  		operatingSystem = "Vista";  	else  		operatingSystem = "7";  	break;  default:  	break;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,getOSArchitecture,The following statement contains a magic number: return IntPtr.Size * 8;  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,FormatByteSize,The following statement contains a magic number: StrFormatByteSize (fileSize' sbBuffer' 20);  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,DialogMsg,The following statement contains a magic number: if (lines.Length == 2)  	dlgOK.SetLine (2' lines [1]);  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,DialogMsg,The following statement contains a magic number: if (lines.Length == 2)  	dlgOK.SetLine (2' lines [1]);  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,DialogMsg,The following statement contains a magic number: dlgOK.SetLine (2' lines [1]);  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,DialogMsg,The following statement contains a magic number: if (lines.Length == 3)  	dlgOK.SetLine (2' lines [2]);  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,DialogMsg,The following statement contains a magic number: if (lines.Length == 3)  	dlgOK.SetLine (2' lines [2]);  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,DialogMsg,The following statement contains a magic number: if (lines.Length == 3)  	dlgOK.SetLine (2' lines [2]);  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,DialogMsg,The following statement contains a magic number: dlgOK.SetLine (2' lines [2]);  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,DialogMsg,The following statement contains a magic number: dlgOK.SetLine (2' lines [2]);  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,DialogConfirm,The following statement contains a magic number: dlg.SetLine (2' msg);  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,DialogLanguage,The following statement contains a magic number: if (dlg.SelectedLabel == 0)  	language = string.Empty;  else if (dlg.SelectedLabel == 1)  	language = "<file>";  else if (allowNone && dlg.SelectedLabel == 2)  	language = "<none>";  else  	language = dlg.SelectedLabelText;  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,DialogLanguage,The following statement contains a magic number: if (dlg.SelectedLabel == 1)  	language = "<file>";  else if (allowNone && dlg.SelectedLabel == 2)  	language = "<none>";  else  	language = dlg.SelectedLabelText;  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,DialogLanguage,The following statement contains a magic number: if (allowNone && dlg.SelectedLabel == 2)  	language = "<none>";  else  	language = dlg.SelectedLabelText;  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,DialogSelectGFQuickSort,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading ("Quick Sort");  	dlg.Add ("<<< " + previousMenu);  	string menu = string.Format ("Sort Direction ({0}) >>>"' sortDirection == GroupFilterSortDirection.Asc ? "Asc" : "Desc");  	dlg.Add (menu);  	int index = 0;  	foreach (string srt in sortTypes) {  		dlg.Add (srt);  		index++;  	}  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	int selection = dlg.SelectedLabel;  	if (selection <= 0)  		return true;  	if (selection == 1) {  		Utils.DialogSelectGFQuickSortDirection (ref sortDirection' "Quick Sort");  		// display quick sort again  	}  	else {  		sortType = sortTypes [selection - 2];  		return false;  	}  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,DialogSelectGFQuickSort,The following statement contains a magic number: if (selection == 1) {  	Utils.DialogSelectGFQuickSortDirection (ref sortDirection' "Quick Sort");  	// display quick sort again  }  else {  	sortType = sortTypes [selection - 2];  	return false;  }  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,DialogSelectGFQuickSort,The following statement contains a magic number: sortType = sortTypes [selection - 2];  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,DialogSelectGFQuickSortDirection,The following statement contains a magic number: if (selection == 2)  	sortDirection = GroupFilterSortDirection.Desc;  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetAniDBImagePath,The following statement contains a magic number: if (sid.Length == 1)  	subFolder = sid;  else  	subFolder = sid.Substring (0' 2);  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetAniDBImagePath,The following statement contains a magic number: subFolder = sid.Substring (0' 2);  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetAniDBCharacterImagePath,The following statement contains a magic number: if (sid.Length == 1)  	subFolder = sid;  else  	subFolder = sid.Substring (0' 2);  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetAniDBCharacterImagePath,The following statement contains a magic number: subFolder = sid.Substring (0' 2);  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetAniDBCreatorImagePath,The following statement contains a magic number: if (sid.Length == 1)  	subFolder = sid;  else  	subFolder = sid.Substring (0' 2);  
Magic Number,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,GetAniDBCreatorImagePath,The following statement contains a magic number: subFolder = sid.Substring (0' 2);  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,The following statement contains a magic number: try {  	curEpisode = null;  	int timeMovieStopped = 0;  	if (!File.Exists (fileToPlay.FullPath)) {  		Utils.DialogMsg ("Error"' "File could not be found!");  		return false;  	}  	BaseConfig.MyAnimeLog.Write ("Getting time stopped for : {0}"' fileToPlay.FullPath);  	timeMovieStopped = GetTimeStopped (fileToPlay.FullPath);  	BaseConfig.MyAnimeLog.Write ("Time stopped for : {0} - {1}"' fileToPlay.FullPath' timeMovieStopped);  	curFileName = fileToPlay.FullPath;  	#region Ask user to Resume  	if (timeMovieStopped > 0) {  		GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_YES_NO);  		if (null != dlgYesNo) {  			dlgYesNo.SetHeading (GUILocalizeStrings.Get (900));  			//resume movie?  			dlgYesNo.SetLine (1' fileToPlay.FileName);  			dlgYesNo.SetLine (2' GUILocalizeStrings.Get (936) + " " + MediaPortal.Util.Utils.SecondsToHMSString (timeMovieStopped));  			dlgYesNo.SetDefaultToYes (true);  			dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  			if (!dlgYesNo.IsConfirmed)// reset resume data in DB  			 {  				timeMovieStopped = 0;  			}  		}  	}  	#endregion  	Play (timeMovieStopped' fileToPlay.DefaultAudioLanguage' fileToPlay.DefaultSubtitleLanguage);  	return true;  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write ("Error inResumeOrPlay : {0}"' ex.ToString ());  }  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,The following statement contains a magic number: try {  	curEpisode = null;  	int timeMovieStopped = 0;  	if (!File.Exists (fileToPlay.FullPath)) {  		Utils.DialogMsg ("Error"' "File could not be found!");  		return false;  	}  	BaseConfig.MyAnimeLog.Write ("Getting time stopped for : {0}"' fileToPlay.FullPath);  	timeMovieStopped = GetTimeStopped (fileToPlay.FullPath);  	BaseConfig.MyAnimeLog.Write ("Time stopped for : {0} - {1}"' fileToPlay.FullPath' timeMovieStopped);  	curFileName = fileToPlay.FullPath;  	#region Ask user to Resume  	if (timeMovieStopped > 0) {  		GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_YES_NO);  		if (null != dlgYesNo) {  			dlgYesNo.SetHeading (GUILocalizeStrings.Get (900));  			//resume movie?  			dlgYesNo.SetLine (1' fileToPlay.FileName);  			dlgYesNo.SetLine (2' GUILocalizeStrings.Get (936) + " " + MediaPortal.Util.Utils.SecondsToHMSString (timeMovieStopped));  			dlgYesNo.SetDefaultToYes (true);  			dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  			if (!dlgYesNo.IsConfirmed)// reset resume data in DB  			 {  				timeMovieStopped = 0;  			}  		}  	}  	#endregion  	Play (timeMovieStopped' fileToPlay.DefaultAudioLanguage' fileToPlay.DefaultSubtitleLanguage);  	return true;  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write ("Error inResumeOrPlay : {0}"' ex.ToString ());  }  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,The following statement contains a magic number: try {  	curEpisode = null;  	int timeMovieStopped = 0;  	if (!File.Exists (fileToPlay.FullPath)) {  		Utils.DialogMsg ("Error"' "File could not be found!");  		return false;  	}  	BaseConfig.MyAnimeLog.Write ("Getting time stopped for : {0}"' fileToPlay.FullPath);  	timeMovieStopped = GetTimeStopped (fileToPlay.FullPath);  	BaseConfig.MyAnimeLog.Write ("Time stopped for : {0} - {1}"' fileToPlay.FullPath' timeMovieStopped);  	curFileName = fileToPlay.FullPath;  	#region Ask user to Resume  	if (timeMovieStopped > 0) {  		GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_YES_NO);  		if (null != dlgYesNo) {  			dlgYesNo.SetHeading (GUILocalizeStrings.Get (900));  			//resume movie?  			dlgYesNo.SetLine (1' fileToPlay.FileName);  			dlgYesNo.SetLine (2' GUILocalizeStrings.Get (936) + " " + MediaPortal.Util.Utils.SecondsToHMSString (timeMovieStopped));  			dlgYesNo.SetDefaultToYes (true);  			dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  			if (!dlgYesNo.IsConfirmed)// reset resume data in DB  			 {  				timeMovieStopped = 0;  			}  		}  	}  	#endregion  	Play (timeMovieStopped' fileToPlay.DefaultAudioLanguage' fileToPlay.DefaultSubtitleLanguage);  	return true;  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write ("Error inResumeOrPlay : {0}"' ex.ToString ());  }  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,The following statement contains a magic number: if (timeMovieStopped > 0) {  	GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_YES_NO);  	if (null != dlgYesNo) {  		dlgYesNo.SetHeading (GUILocalizeStrings.Get (900));  		//resume movie?  		dlgYesNo.SetLine (1' fileToPlay.FileName);  		dlgYesNo.SetLine (2' GUILocalizeStrings.Get (936) + " " + MediaPortal.Util.Utils.SecondsToHMSString (timeMovieStopped));  		dlgYesNo.SetDefaultToYes (true);  		dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  		if (!dlgYesNo.IsConfirmed)// reset resume data in DB  		 {  			timeMovieStopped = 0;  		}  	}  }  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,The following statement contains a magic number: if (timeMovieStopped > 0) {  	GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_YES_NO);  	if (null != dlgYesNo) {  		dlgYesNo.SetHeading (GUILocalizeStrings.Get (900));  		//resume movie?  		dlgYesNo.SetLine (1' fileToPlay.FileName);  		dlgYesNo.SetLine (2' GUILocalizeStrings.Get (936) + " " + MediaPortal.Util.Utils.SecondsToHMSString (timeMovieStopped));  		dlgYesNo.SetDefaultToYes (true);  		dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  		if (!dlgYesNo.IsConfirmed)// reset resume data in DB  		 {  			timeMovieStopped = 0;  		}  	}  }  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,The following statement contains a magic number: if (timeMovieStopped > 0) {  	GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_YES_NO);  	if (null != dlgYesNo) {  		dlgYesNo.SetHeading (GUILocalizeStrings.Get (900));  		//resume movie?  		dlgYesNo.SetLine (1' fileToPlay.FileName);  		dlgYesNo.SetLine (2' GUILocalizeStrings.Get (936) + " " + MediaPortal.Util.Utils.SecondsToHMSString (timeMovieStopped));  		dlgYesNo.SetDefaultToYes (true);  		dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  		if (!dlgYesNo.IsConfirmed)// reset resume data in DB  		 {  			timeMovieStopped = 0;  		}  	}  }  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,The following statement contains a magic number: if (null != dlgYesNo) {  	dlgYesNo.SetHeading (GUILocalizeStrings.Get (900));  	//resume movie?  	dlgYesNo.SetLine (1' fileToPlay.FileName);  	dlgYesNo.SetLine (2' GUILocalizeStrings.Get (936) + " " + MediaPortal.Util.Utils.SecondsToHMSString (timeMovieStopped));  	dlgYesNo.SetDefaultToYes (true);  	dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  	if (!dlgYesNo.IsConfirmed)// reset resume data in DB  	 {  		timeMovieStopped = 0;  	}  }  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,The following statement contains a magic number: if (null != dlgYesNo) {  	dlgYesNo.SetHeading (GUILocalizeStrings.Get (900));  	//resume movie?  	dlgYesNo.SetLine (1' fileToPlay.FileName);  	dlgYesNo.SetLine (2' GUILocalizeStrings.Get (936) + " " + MediaPortal.Util.Utils.SecondsToHMSString (timeMovieStopped));  	dlgYesNo.SetDefaultToYes (true);  	dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  	if (!dlgYesNo.IsConfirmed)// reset resume data in DB  	 {  		timeMovieStopped = 0;  	}  }  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,The following statement contains a magic number: if (null != dlgYesNo) {  	dlgYesNo.SetHeading (GUILocalizeStrings.Get (900));  	//resume movie?  	dlgYesNo.SetLine (1' fileToPlay.FileName);  	dlgYesNo.SetLine (2' GUILocalizeStrings.Get (936) + " " + MediaPortal.Util.Utils.SecondsToHMSString (timeMovieStopped));  	dlgYesNo.SetDefaultToYes (true);  	dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  	if (!dlgYesNo.IsConfirmed)// reset resume data in DB  	 {  		timeMovieStopped = 0;  	}  }  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,The following statement contains a magic number: dlgYesNo.SetHeading (GUILocalizeStrings.Get (900));  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,The following statement contains a magic number: dlgYesNo.SetLine (2' GUILocalizeStrings.Get (936) + " " + MediaPortal.Util.Utils.SecondsToHMSString (timeMovieStopped));  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,The following statement contains a magic number: dlgYesNo.SetLine (2' GUILocalizeStrings.Get (936) + " " + MediaPortal.Util.Utils.SecondsToHMSString (timeMovieStopped));  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,The following statement contains a magic number: try {  	// get the list if FileLocal records for this AnimeEpisode  	List<VideoDetailedVM> fileLocalList = episode.FilesForEpisode;  	if (fileLocalList.Count == 0)  		return false;  	VideoDetailedVM fileToPlay = null;  	if (fileLocalList.Count == 1)  		fileToPlay = fileLocalList [0];  	else {  		// ask the user which file they want to play  		IDialogbox dlg = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		dlg.Reset ();  		dlg.SetHeading ("Select File");  		GUIListItem pItem = null;  		foreach (VideoDetailedVM fl in fileLocalList) {  			pItem = new GUIListItem (fl.FileSelectionDisplay);  			dlg.Add (pItem);  		}  		dlg.DoModal (GUIWindowManager.ActiveWindow);  		if (dlg.SelectedId > 0) {  			fileToPlay = fileLocalList [dlg.SelectedId - 1];  		}  	}  	if (fileToPlay == null)  		return false;  	BaseConfig.MyAnimeLog.Write ("Filetoplay: {0}"' fileToPlay.FullPath);  	if (!File.Exists (fileToPlay.FullPath)) {  		Utils.DialogMsg ("Error"' "File could not be found!");  		return false;  	}  	BaseConfig.MyAnimeLog.Write ("Getting time stopped for : {0}"' fileToPlay.FullPath);  	timeMovieStopped = GetTimeStopped (fileToPlay.FullPath);  	BaseConfig.MyAnimeLog.Write ("Time stopped for : {0} - {1}"' fileToPlay.FullPath' timeMovieStopped);  	prevEpisode = curEpisode;  	prevFileName = curFileName;  	curEpisode = episode;  	curFileName = fileToPlay.FullPath;  	#region Ask user to Resume  	if (timeMovieStopped > 0) {  		//MPTVSeriesLog.Write("Asking user to resume episode from: " + Utils.SecondsToHMSString(timeMovieStopped));  		GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_YES_NO);  		if (null != dlgYesNo) {  			dlgYesNo.SetHeading (GUILocalizeStrings.Get (900));  			//resume movie?  			dlgYesNo.SetLine (1' episode.EpisodeName);  			dlgYesNo.SetLine (2' GUILocalizeStrings.Get (936) + " " + MediaPortal.Util.Utils.SecondsToHMSString (timeMovieStopped));  			dlgYesNo.SetDefaultToYes (true);  			dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  			if (!dlgYesNo.IsConfirmed)// reset resume data in DB  			 {  				timeMovieStopped = 0;  				//MPTVSeriesLog.Write("User selected to start episode from beginning"' MPTVSeriesLog.LogLevel.Debug);  			}  		}  	}  	#endregion  	Play (timeMovieStopped' curEpisode.DefaultAudioLanguage' curEpisode.DefaultSubtitleLanguage);  	return true;  }  catch (Exception e) {  	BaseConfig.MyAnimeLog.Write ("ResumeOrPlay: {0}"' e.ToString ());  	return false;  }  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,The following statement contains a magic number: try {  	// get the list if FileLocal records for this AnimeEpisode  	List<VideoDetailedVM> fileLocalList = episode.FilesForEpisode;  	if (fileLocalList.Count == 0)  		return false;  	VideoDetailedVM fileToPlay = null;  	if (fileLocalList.Count == 1)  		fileToPlay = fileLocalList [0];  	else {  		// ask the user which file they want to play  		IDialogbox dlg = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		dlg.Reset ();  		dlg.SetHeading ("Select File");  		GUIListItem pItem = null;  		foreach (VideoDetailedVM fl in fileLocalList) {  			pItem = new GUIListItem (fl.FileSelectionDisplay);  			dlg.Add (pItem);  		}  		dlg.DoModal (GUIWindowManager.ActiveWindow);  		if (dlg.SelectedId > 0) {  			fileToPlay = fileLocalList [dlg.SelectedId - 1];  		}  	}  	if (fileToPlay == null)  		return false;  	BaseConfig.MyAnimeLog.Write ("Filetoplay: {0}"' fileToPlay.FullPath);  	if (!File.Exists (fileToPlay.FullPath)) {  		Utils.DialogMsg ("Error"' "File could not be found!");  		return false;  	}  	BaseConfig.MyAnimeLog.Write ("Getting time stopped for : {0}"' fileToPlay.FullPath);  	timeMovieStopped = GetTimeStopped (fileToPlay.FullPath);  	BaseConfig.MyAnimeLog.Write ("Time stopped for : {0} - {1}"' fileToPlay.FullPath' timeMovieStopped);  	prevEpisode = curEpisode;  	prevFileName = curFileName;  	curEpisode = episode;  	curFileName = fileToPlay.FullPath;  	#region Ask user to Resume  	if (timeMovieStopped > 0) {  		//MPTVSeriesLog.Write("Asking user to resume episode from: " + Utils.SecondsToHMSString(timeMovieStopped));  		GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_YES_NO);  		if (null != dlgYesNo) {  			dlgYesNo.SetHeading (GUILocalizeStrings.Get (900));  			//resume movie?  			dlgYesNo.SetLine (1' episode.EpisodeName);  			dlgYesNo.SetLine (2' GUILocalizeStrings.Get (936) + " " + MediaPortal.Util.Utils.SecondsToHMSString (timeMovieStopped));  			dlgYesNo.SetDefaultToYes (true);  			dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  			if (!dlgYesNo.IsConfirmed)// reset resume data in DB  			 {  				timeMovieStopped = 0;  				//MPTVSeriesLog.Write("User selected to start episode from beginning"' MPTVSeriesLog.LogLevel.Debug);  			}  		}  	}  	#endregion  	Play (timeMovieStopped' curEpisode.DefaultAudioLanguage' curEpisode.DefaultSubtitleLanguage);  	return true;  }  catch (Exception e) {  	BaseConfig.MyAnimeLog.Write ("ResumeOrPlay: {0}"' e.ToString ());  	return false;  }  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,The following statement contains a magic number: try {  	// get the list if FileLocal records for this AnimeEpisode  	List<VideoDetailedVM> fileLocalList = episode.FilesForEpisode;  	if (fileLocalList.Count == 0)  		return false;  	VideoDetailedVM fileToPlay = null;  	if (fileLocalList.Count == 1)  		fileToPlay = fileLocalList [0];  	else {  		// ask the user which file they want to play  		IDialogbox dlg = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		dlg.Reset ();  		dlg.SetHeading ("Select File");  		GUIListItem pItem = null;  		foreach (VideoDetailedVM fl in fileLocalList) {  			pItem = new GUIListItem (fl.FileSelectionDisplay);  			dlg.Add (pItem);  		}  		dlg.DoModal (GUIWindowManager.ActiveWindow);  		if (dlg.SelectedId > 0) {  			fileToPlay = fileLocalList [dlg.SelectedId - 1];  		}  	}  	if (fileToPlay == null)  		return false;  	BaseConfig.MyAnimeLog.Write ("Filetoplay: {0}"' fileToPlay.FullPath);  	if (!File.Exists (fileToPlay.FullPath)) {  		Utils.DialogMsg ("Error"' "File could not be found!");  		return false;  	}  	BaseConfig.MyAnimeLog.Write ("Getting time stopped for : {0}"' fileToPlay.FullPath);  	timeMovieStopped = GetTimeStopped (fileToPlay.FullPath);  	BaseConfig.MyAnimeLog.Write ("Time stopped for : {0} - {1}"' fileToPlay.FullPath' timeMovieStopped);  	prevEpisode = curEpisode;  	prevFileName = curFileName;  	curEpisode = episode;  	curFileName = fileToPlay.FullPath;  	#region Ask user to Resume  	if (timeMovieStopped > 0) {  		//MPTVSeriesLog.Write("Asking user to resume episode from: " + Utils.SecondsToHMSString(timeMovieStopped));  		GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_YES_NO);  		if (null != dlgYesNo) {  			dlgYesNo.SetHeading (GUILocalizeStrings.Get (900));  			//resume movie?  			dlgYesNo.SetLine (1' episode.EpisodeName);  			dlgYesNo.SetLine (2' GUILocalizeStrings.Get (936) + " " + MediaPortal.Util.Utils.SecondsToHMSString (timeMovieStopped));  			dlgYesNo.SetDefaultToYes (true);  			dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  			if (!dlgYesNo.IsConfirmed)// reset resume data in DB  			 {  				timeMovieStopped = 0;  				//MPTVSeriesLog.Write("User selected to start episode from beginning"' MPTVSeriesLog.LogLevel.Debug);  			}  		}  	}  	#endregion  	Play (timeMovieStopped' curEpisode.DefaultAudioLanguage' curEpisode.DefaultSubtitleLanguage);  	return true;  }  catch (Exception e) {  	BaseConfig.MyAnimeLog.Write ("ResumeOrPlay: {0}"' e.ToString ());  	return false;  }  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,The following statement contains a magic number: if (timeMovieStopped > 0) {  	//MPTVSeriesLog.Write("Asking user to resume episode from: " + Utils.SecondsToHMSString(timeMovieStopped));  	GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_YES_NO);  	if (null != dlgYesNo) {  		dlgYesNo.SetHeading (GUILocalizeStrings.Get (900));  		//resume movie?  		dlgYesNo.SetLine (1' episode.EpisodeName);  		dlgYesNo.SetLine (2' GUILocalizeStrings.Get (936) + " " + MediaPortal.Util.Utils.SecondsToHMSString (timeMovieStopped));  		dlgYesNo.SetDefaultToYes (true);  		dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  		if (!dlgYesNo.IsConfirmed)// reset resume data in DB  		 {  			timeMovieStopped = 0;  			//MPTVSeriesLog.Write("User selected to start episode from beginning"' MPTVSeriesLog.LogLevel.Debug);  		}  	}  }  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,The following statement contains a magic number: if (timeMovieStopped > 0) {  	//MPTVSeriesLog.Write("Asking user to resume episode from: " + Utils.SecondsToHMSString(timeMovieStopped));  	GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_YES_NO);  	if (null != dlgYesNo) {  		dlgYesNo.SetHeading (GUILocalizeStrings.Get (900));  		//resume movie?  		dlgYesNo.SetLine (1' episode.EpisodeName);  		dlgYesNo.SetLine (2' GUILocalizeStrings.Get (936) + " " + MediaPortal.Util.Utils.SecondsToHMSString (timeMovieStopped));  		dlgYesNo.SetDefaultToYes (true);  		dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  		if (!dlgYesNo.IsConfirmed)// reset resume data in DB  		 {  			timeMovieStopped = 0;  			//MPTVSeriesLog.Write("User selected to start episode from beginning"' MPTVSeriesLog.LogLevel.Debug);  		}  	}  }  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,The following statement contains a magic number: if (timeMovieStopped > 0) {  	//MPTVSeriesLog.Write("Asking user to resume episode from: " + Utils.SecondsToHMSString(timeMovieStopped));  	GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_YES_NO);  	if (null != dlgYesNo) {  		dlgYesNo.SetHeading (GUILocalizeStrings.Get (900));  		//resume movie?  		dlgYesNo.SetLine (1' episode.EpisodeName);  		dlgYesNo.SetLine (2' GUILocalizeStrings.Get (936) + " " + MediaPortal.Util.Utils.SecondsToHMSString (timeMovieStopped));  		dlgYesNo.SetDefaultToYes (true);  		dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  		if (!dlgYesNo.IsConfirmed)// reset resume data in DB  		 {  			timeMovieStopped = 0;  			//MPTVSeriesLog.Write("User selected to start episode from beginning"' MPTVSeriesLog.LogLevel.Debug);  		}  	}  }  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,The following statement contains a magic number: if (null != dlgYesNo) {  	dlgYesNo.SetHeading (GUILocalizeStrings.Get (900));  	//resume movie?  	dlgYesNo.SetLine (1' episode.EpisodeName);  	dlgYesNo.SetLine (2' GUILocalizeStrings.Get (936) + " " + MediaPortal.Util.Utils.SecondsToHMSString (timeMovieStopped));  	dlgYesNo.SetDefaultToYes (true);  	dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  	if (!dlgYesNo.IsConfirmed)// reset resume data in DB  	 {  		timeMovieStopped = 0;  		//MPTVSeriesLog.Write("User selected to start episode from beginning"' MPTVSeriesLog.LogLevel.Debug);  	}  }  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,The following statement contains a magic number: if (null != dlgYesNo) {  	dlgYesNo.SetHeading (GUILocalizeStrings.Get (900));  	//resume movie?  	dlgYesNo.SetLine (1' episode.EpisodeName);  	dlgYesNo.SetLine (2' GUILocalizeStrings.Get (936) + " " + MediaPortal.Util.Utils.SecondsToHMSString (timeMovieStopped));  	dlgYesNo.SetDefaultToYes (true);  	dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  	if (!dlgYesNo.IsConfirmed)// reset resume data in DB  	 {  		timeMovieStopped = 0;  		//MPTVSeriesLog.Write("User selected to start episode from beginning"' MPTVSeriesLog.LogLevel.Debug);  	}  }  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,The following statement contains a magic number: if (null != dlgYesNo) {  	dlgYesNo.SetHeading (GUILocalizeStrings.Get (900));  	//resume movie?  	dlgYesNo.SetLine (1' episode.EpisodeName);  	dlgYesNo.SetLine (2' GUILocalizeStrings.Get (936) + " " + MediaPortal.Util.Utils.SecondsToHMSString (timeMovieStopped));  	dlgYesNo.SetDefaultToYes (true);  	dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  	if (!dlgYesNo.IsConfirmed)// reset resume data in DB  	 {  		timeMovieStopped = 0;  		//MPTVSeriesLog.Write("User selected to start episode from beginning"' MPTVSeriesLog.LogLevel.Debug);  	}  }  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,The following statement contains a magic number: dlgYesNo.SetHeading (GUILocalizeStrings.Get (900));  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,The following statement contains a magic number: dlgYesNo.SetLine (2' GUILocalizeStrings.Get (936) + " " + MediaPortal.Util.Utils.SecondsToHMSString (timeMovieStopped));  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,ResumeOrPlay,The following statement contains a magic number: dlgYesNo.SetLine (2' GUILocalizeStrings.Get (936) + " " + MediaPortal.Util.Utils.SecondsToHMSString (timeMovieStopped));  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,w_DoWork,The following statement contains a magic number: if (!clear)  	System.Threading.Thread.Sleep (2000);  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,w_DoWork,The following statement contains a magic number: System.Threading.Thread.Sleep (2000);  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,OnPlayBackStopped,The following statement contains a magic number: if (PlayBackOpIsOfConcern (type' filename)) {  	LogPlayBackOp ("stopped"' filename);  	try {  		BaseConfig.MyAnimeLog.Write ("Checking for set watched");  		#region Set Watched  		double watchedAfter = BaseConfig.Settings.WatchedPercentage;  		if (!g_Player.IsExternalPlayer) {  			if ((timeMovieStopped / g_Player.Duration) > watchedAfter / 100)  				PlaybackOperationEnded (true' curEpisode);  			else  				PlaybackOperationEnded (false' curEpisode);  		}  		else {  			// if this is an external player always set watched to true  			PlaybackOperationEnded (true' curEpisode);  		}  		#endregion  	}  	catch (Exception e) {  		BaseConfig.MyAnimeLog.Write ("AnimePlugin.VideoHandler.OnPlayBackStopped()\r\n" + e.ToString ());  	}  }  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,OnPlayBackStopped,The following statement contains a magic number: try {  	BaseConfig.MyAnimeLog.Write ("Checking for set watched");  	#region Set Watched  	double watchedAfter = BaseConfig.Settings.WatchedPercentage;  	if (!g_Player.IsExternalPlayer) {  		if ((timeMovieStopped / g_Player.Duration) > watchedAfter / 100)  			PlaybackOperationEnded (true' curEpisode);  		else  			PlaybackOperationEnded (false' curEpisode);  	}  	else {  		// if this is an external player always set watched to true  		PlaybackOperationEnded (true' curEpisode);  	}  	#endregion  }  catch (Exception e) {  	BaseConfig.MyAnimeLog.Write ("AnimePlugin.VideoHandler.OnPlayBackStopped()\r\n" + e.ToString ());  }  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,OnPlayBackStopped,The following statement contains a magic number: if (!g_Player.IsExternalPlayer) {  	if ((timeMovieStopped / g_Player.Duration) > watchedAfter / 100)  		PlaybackOperationEnded (true' curEpisode);  	else  		PlaybackOperationEnded (false' curEpisode);  }  else {  	// if this is an external player always set watched to true  	PlaybackOperationEnded (true' curEpisode);  }  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,OnPlayBackStopped,The following statement contains a magic number: if ((timeMovieStopped / g_Player.Duration) > watchedAfter / 100)  	PlaybackOperationEnded (true' curEpisode);  else  	PlaybackOperationEnded (false' curEpisode);  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,g_Player_PlayBackChanged,The following statement contains a magic number: if (PlayBackOpWasOfConcern (g_Player.IsVideo ? g_Player.MediaType.Video : g_Player.MediaType.Unknown' g_Player.CurrentFile)) {  	try {  		BaseConfig.MyAnimeLog.Write ("Checking for set watched");  		#region Set Watched  		double watchedAfter = BaseConfig.Settings.WatchedPercentage;  		if (!g_Player.IsExternalPlayer) {  			if ((stoptime / g_Player.Duration) > watchedAfter / 100)  				PlaybackOperationEnded (true' prevEpisode);  			else  				PlaybackOperationEnded (false' prevEpisode);  		}  		else {  			// if this is an external player always set watched to true  			PlaybackOperationEnded (true' prevEpisode);  		}  		#endregion  	}  	catch (Exception e) {  		BaseConfig.MyAnimeLog.Write ("AnimePlugin.VideoHandler.OnPlayBackStopped()\r\n" + e.ToString ());  	}  }  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,g_Player_PlayBackChanged,The following statement contains a magic number: try {  	BaseConfig.MyAnimeLog.Write ("Checking for set watched");  	#region Set Watched  	double watchedAfter = BaseConfig.Settings.WatchedPercentage;  	if (!g_Player.IsExternalPlayer) {  		if ((stoptime / g_Player.Duration) > watchedAfter / 100)  			PlaybackOperationEnded (true' prevEpisode);  		else  			PlaybackOperationEnded (false' prevEpisode);  	}  	else {  		// if this is an external player always set watched to true  		PlaybackOperationEnded (true' prevEpisode);  	}  	#endregion  }  catch (Exception e) {  	BaseConfig.MyAnimeLog.Write ("AnimePlugin.VideoHandler.OnPlayBackStopped()\r\n" + e.ToString ());  }  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,g_Player_PlayBackChanged,The following statement contains a magic number: if (!g_Player.IsExternalPlayer) {  	if ((stoptime / g_Player.Duration) > watchedAfter / 100)  		PlaybackOperationEnded (true' prevEpisode);  	else  		PlaybackOperationEnded (false' prevEpisode);  }  else {  	// if this is an external player always set watched to true  	PlaybackOperationEnded (true' prevEpisode);  }  
Magic Number,MyAnimePlugin3,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\VideoHandler.cs,g_Player_PlayBackChanged,The following statement contains a magic number: if ((stoptime / g_Player.Duration) > watchedAfter / 100)  	PlaybackOperationEnded (true' prevEpisode);  else  	PlaybackOperationEnded (false' prevEpisode);  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,MainWindow,The following statement contains a magic number: try {  	settings = new AnimePluginSettings ();  	imageHelper = new ImageDownloader ();  	imageHelper.Init ();  	listPoster = new AsyncImageResource ();  	listPoster.Property = "#Anime3.GroupSeriesPoster";  	listPoster.Delay = artworkDelay;  	fanartTexture = new AsyncImageResource ();  	fanartTexture.Property = "#Anime3.Fanart.1";  	fanartTexture.Delay = artworkDelay;  	GroupFilterQuickSorts = new Dictionary<int' QuickSort> ();  	//searching  	searchTimer = new System.Timers.Timer ();  	searchTimer.AutoReset = true;  	searchTimer.Interval = settings.FindTimeout_s * 1000;  	searchTimer.Elapsed += new System.Timers.ElapsedEventHandler (searchTimer_Elapsed);  	//set the search key sound to the same sound for the REMOTE_1 key  	Key key = new Key ('1'' (int)Keys.D1);  	MediaPortal.GUI.Library.Action action = new MediaPortal.GUI.Library.Action ();  	ActionTranslator.GetAction (GetID' key' ref action);  	searchSound = action.SoundFileName;  	// timer for automatic updates  	autoUpdateTimer = new System.Timers.Timer ();  	autoUpdateTimer.AutoReset = true;  	autoUpdateTimer.Interval = 5 * 60 * 1000;  	// 5 minutes * 60 seconds  	autoUpdateTimer.Elapsed += new System.Timers.ElapsedEventHandler (autoUpdateTimer_Elapsed);  	downloadImagesWorker.DoWork += new DoWorkEventHandler (downloadImagesWorker_DoWork);  	this.OnToggleWatched += new OnToggleWatchedHandler (MainWindow_OnToggleWatched);  	g_Player.PlayBackEnded += new g_Player.EndedHandler (g_Player_PlayBackEnded);  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write (ex.ToString ());  	throw;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,MainWindow,The following statement contains a magic number: try {  	settings = new AnimePluginSettings ();  	imageHelper = new ImageDownloader ();  	imageHelper.Init ();  	listPoster = new AsyncImageResource ();  	listPoster.Property = "#Anime3.GroupSeriesPoster";  	listPoster.Delay = artworkDelay;  	fanartTexture = new AsyncImageResource ();  	fanartTexture.Property = "#Anime3.Fanart.1";  	fanartTexture.Delay = artworkDelay;  	GroupFilterQuickSorts = new Dictionary<int' QuickSort> ();  	//searching  	searchTimer = new System.Timers.Timer ();  	searchTimer.AutoReset = true;  	searchTimer.Interval = settings.FindTimeout_s * 1000;  	searchTimer.Elapsed += new System.Timers.ElapsedEventHandler (searchTimer_Elapsed);  	//set the search key sound to the same sound for the REMOTE_1 key  	Key key = new Key ('1'' (int)Keys.D1);  	MediaPortal.GUI.Library.Action action = new MediaPortal.GUI.Library.Action ();  	ActionTranslator.GetAction (GetID' key' ref action);  	searchSound = action.SoundFileName;  	// timer for automatic updates  	autoUpdateTimer = new System.Timers.Timer ();  	autoUpdateTimer.AutoReset = true;  	autoUpdateTimer.Interval = 5 * 60 * 1000;  	// 5 minutes * 60 seconds  	autoUpdateTimer.Elapsed += new System.Timers.ElapsedEventHandler (autoUpdateTimer_Elapsed);  	downloadImagesWorker.DoWork += new DoWorkEventHandler (downloadImagesWorker_DoWork);  	this.OnToggleWatched += new OnToggleWatchedHandler (MainWindow_OnToggleWatched);  	g_Player.PlayBackEnded += new g_Player.EndedHandler (g_Player_PlayBackEnded);  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write (ex.ToString ());  	throw;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,MainWindow,The following statement contains a magic number: try {  	settings = new AnimePluginSettings ();  	imageHelper = new ImageDownloader ();  	imageHelper.Init ();  	listPoster = new AsyncImageResource ();  	listPoster.Property = "#Anime3.GroupSeriesPoster";  	listPoster.Delay = artworkDelay;  	fanartTexture = new AsyncImageResource ();  	fanartTexture.Property = "#Anime3.Fanart.1";  	fanartTexture.Delay = artworkDelay;  	GroupFilterQuickSorts = new Dictionary<int' QuickSort> ();  	//searching  	searchTimer = new System.Timers.Timer ();  	searchTimer.AutoReset = true;  	searchTimer.Interval = settings.FindTimeout_s * 1000;  	searchTimer.Elapsed += new System.Timers.ElapsedEventHandler (searchTimer_Elapsed);  	//set the search key sound to the same sound for the REMOTE_1 key  	Key key = new Key ('1'' (int)Keys.D1);  	MediaPortal.GUI.Library.Action action = new MediaPortal.GUI.Library.Action ();  	ActionTranslator.GetAction (GetID' key' ref action);  	searchSound = action.SoundFileName;  	// timer for automatic updates  	autoUpdateTimer = new System.Timers.Timer ();  	autoUpdateTimer.AutoReset = true;  	autoUpdateTimer.Interval = 5 * 60 * 1000;  	// 5 minutes * 60 seconds  	autoUpdateTimer.Elapsed += new System.Timers.ElapsedEventHandler (autoUpdateTimer_Elapsed);  	downloadImagesWorker.DoWork += new DoWorkEventHandler (downloadImagesWorker_DoWork);  	this.OnToggleWatched += new OnToggleWatchedHandler (MainWindow_OnToggleWatched);  	g_Player.PlayBackEnded += new g_Player.EndedHandler (g_Player_PlayBackEnded);  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write (ex.ToString ());  	throw;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,MainWindow,The following statement contains a magic number: try {  	settings = new AnimePluginSettings ();  	imageHelper = new ImageDownloader ();  	imageHelper.Init ();  	listPoster = new AsyncImageResource ();  	listPoster.Property = "#Anime3.GroupSeriesPoster";  	listPoster.Delay = artworkDelay;  	fanartTexture = new AsyncImageResource ();  	fanartTexture.Property = "#Anime3.Fanart.1";  	fanartTexture.Delay = artworkDelay;  	GroupFilterQuickSorts = new Dictionary<int' QuickSort> ();  	//searching  	searchTimer = new System.Timers.Timer ();  	searchTimer.AutoReset = true;  	searchTimer.Interval = settings.FindTimeout_s * 1000;  	searchTimer.Elapsed += new System.Timers.ElapsedEventHandler (searchTimer_Elapsed);  	//set the search key sound to the same sound for the REMOTE_1 key  	Key key = new Key ('1'' (int)Keys.D1);  	MediaPortal.GUI.Library.Action action = new MediaPortal.GUI.Library.Action ();  	ActionTranslator.GetAction (GetID' key' ref action);  	searchSound = action.SoundFileName;  	// timer for automatic updates  	autoUpdateTimer = new System.Timers.Timer ();  	autoUpdateTimer.AutoReset = true;  	autoUpdateTimer.Interval = 5 * 60 * 1000;  	// 5 minutes * 60 seconds  	autoUpdateTimer.Elapsed += new System.Timers.ElapsedEventHandler (autoUpdateTimer_Elapsed);  	downloadImagesWorker.DoWork += new DoWorkEventHandler (downloadImagesWorker_DoWork);  	this.OnToggleWatched += new OnToggleWatchedHandler (MainWindow_OnToggleWatched);  	g_Player.PlayBackEnded += new g_Player.EndedHandler (g_Player_PlayBackEnded);  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write (ex.ToString ());  	throw;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,MainWindow,The following statement contains a magic number: searchTimer.Interval = settings.FindTimeout_s * 1000;  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,MainWindow,The following statement contains a magic number: autoUpdateTimer.Interval = 5 * 60 * 1000;  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,MainWindow,The following statement contains a magic number: autoUpdateTimer.Interval = 5 * 60 * 1000;  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,MainWindow,The following statement contains a magic number: autoUpdateTimer.Interval = 5 * 60 * 1000;  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetWindowLongPtr,The following statement contains a magic number: if (IntPtr.Size == 8)  	return SetWindowLongPtr64 (hWnd' nIndex' dwNewLong);  else  	return new IntPtr (SetWindowLong32 (hWnd' nIndex' dwNewLong.ToInt32 ()));  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,bgLoadFacade,The following statement contains a magic number: try {  	GUIListItem item = null;  	int selectedIndex = -1;  	int count = 0;  	bool delayedImageLoading = false;  	List<AnimeGroupVM> groups = null;  	List<GroupFilterVM> groupFilters = null;  	List<GUIListItem> list = new List<GUIListItem> ();  	BackGroundLoadingArgumentType type = BackGroundLoadingArgumentType.None;  	switch (listLevel) {  	#region Group Filters  	case Listlevel.GroupFilter:  		{  			// List/Poster/Banner  			setGUIProperty ("SimpleCurrentView"' "Group Filters");  			if (groupViewMode != GUIFacadeControl.Layout.List) {  				// reinit the itemsList  				delayedImageLoading = true;  				ReportFacadeLoadingProgress (BackGroundLoadingArgumentType.DelayedImgInit' 0' null);  			}  			// text as usual  			ReportFacadeLoadingProgress (BackGroundLoadingArgumentType.SetFacadeMode' 0' GUIFacadeControl.Layout.List);  			if (workerFacade.CancellationPending)  				return;  			BaseConfig.MyAnimeLog.Write ("bgLoadFacde: Group Filters");  			groupFilters = FacadeHelper.GetGroupFilters ();  			type = BackGroundLoadingArgumentType.ListFullElement;  			setGUIProperty (guiProperty.GroupCount' groupFilters.Count.ToString ());  			foreach (GroupFilterVM grpFilter in groupFilters) {  				if (workerFacade.CancellationPending)  					return;  				try {  					item = null;  					SetGroupFilterListItem (ref item' grpFilter);  					if (curGroupFilter != null) {  						if (grpFilter.GroupFilterID.Value == curGroupFilter.GroupFilterID.Value) {  							selectedIndex = count;  						}  					}  					else {  						if (selectedIndex == -1)  							selectedIndex = count;  					}  					if (workerFacade.CancellationPending)  						return;  					else {  						list.Add (item);  					}  				}  				catch (Exception ex) {  					string msg = string.Format ("The 'LoadFacade' function has generated an error displaying list items: {0} - {1}"' listLevel' ex.ToString ());  					BaseConfig.MyAnimeLog.Write (msg);  				}  				count++;  			}  		}  		break;  	#endregion  	#region Group Filters - Sub  	case Listlevel.GroupFilterSub:  		{  			// List/Poster/Banner  			setGUIProperty ("SimpleCurrentView"' curGroupFilter.GroupFilterName);  			if (groupViewMode != GUIFacadeControl.Layout.List) {  				// reinit the itemsList  				delayedImageLoading = true;  				ReportFacadeLoadingProgress (BackGroundLoadingArgumentType.DelayedImgInit' 0' null);  			}  			// text as usual  			ReportFacadeLoadingProgress (BackGroundLoadingArgumentType.SetFacadeMode' 0' GUIFacadeControl.Layout.List);  			if (workerFacade.CancellationPending)  				return;  			BaseConfig.MyAnimeLog.Write ("bgLoadFacde: Group Filters");  			groupFilters = FacadeHelper.GetGroupFilters ();  			type = BackGroundLoadingArgumentType.ListFullElement;  			setGUIProperty (guiProperty.GroupCount' "0");  			foreach (GroupFilterVM grpFilter in FacadeHelper.GetTopLevelPredefinedGroupFilters ()) {  				if (workerFacade.CancellationPending)  					return;  				try {  					item = null;  					SetGroupFilterListItem (ref item' grpFilter);  					if (curGroupFilter != null) {  						if (grpFilter.GroupFilterID.Value == curGroupFilter.GroupFilterID.Value) {  							selectedIndex = count;  						}  					}  					else {  						if (selectedIndex == -1)  							selectedIndex = count;  					}  					if (workerFacade.CancellationPending)  						return;  					else {  						list.Add (item);  					}  				}  				catch (Exception ex) {  					string msg = string.Format ("The 'LoadFacade' function has generated an error displaying list items: {0} - {1}"' listLevel' ex.ToString ());  					BaseConfig.MyAnimeLog.Write (msg);  				}  				count++;  			}  		}  		break;  	#endregion  	#region Group Filters - Sub2  	case Listlevel.GroupFilterSub2:  		{  			// List/Poster/Banner  			setGUIProperty ("SimpleCurrentView"' curGroupFilter.GroupFilterName);  			if (groupViewMode != GUIFacadeControl.Layout.List) {  				// reinit the itemsList  				delayedImageLoading = true;  				ReportFacadeLoadingProgress (BackGroundLoadingArgumentType.DelayedImgInit' 0' null);  			}  			// text as usual  			ReportFacadeLoadingProgress (BackGroundLoadingArgumentType.SetFacadeMode' 0' GUIFacadeControl.Layout.List);  			if (workerFacade.CancellationPending)  				return;  			BaseConfig.MyAnimeLog.Write ("bgLoadFacde: Group Filters");  			groupFilters = FacadeHelper.GetGroupFilters ();  			type = BackGroundLoadingArgumentType.ListFullElement;  			setGUIProperty (guiProperty.GroupCount' "0");  			foreach (GroupFilterVM grpFilter in FacadeHelper.GetGroupFiltersForPredefined (curGroupFilterSub)) {  				if (workerFacade.CancellationPending)  					return;  				try {  					item = null;  					SetGroupFilterListItem (ref item' grpFilter);  					if (curGroupFilter != null) {  						if (grpFilter.GroupFilterID.Value == curGroupFilter.GroupFilterID.Value) {  							selectedIndex = count;  						}  					}  					else {  						if (selectedIndex == -1)  							selectedIndex = count;  					}  					if (workerFacade.CancellationPending)  						return;  					else {  						list.Add (item);  					}  				}  				catch (Exception ex) {  					string msg = string.Format ("The 'LoadFacade' function has generated an error displaying list items: {0} - {1}"' listLevel' ex.ToString ());  					BaseConfig.MyAnimeLog.Write (msg);  				}  				count++;  			}  		}  		break;  	#endregion  	#region Groups  	case Listlevel.Group:  		{  			// List/Poster/Banner  			setGUIProperty ("SimpleCurrentView"' curGroupFilter.GroupFilterName);  			if (groupViewMode != GUIFacadeControl.Layout.List) {  				// reinit the itemsList  				delayedImageLoading = true;  				ReportFacadeLoadingProgress (BackGroundLoadingArgumentType.DelayedImgInit' 0' null);  			}  			if (groupViewMode != GUIFacadeControl.Layout.List) {  				// graphical  				ReportFacadeLoadingProgress (BackGroundLoadingArgumentType.SetFacadeMode' 0' GUIFacadeControl.Layout.AlbumView);  			}  			else {  				// text as usual  				ReportFacadeLoadingProgress (BackGroundLoadingArgumentType.SetFacadeMode' 0' GUIFacadeControl.Layout.List);  			}  			if (workerFacade.CancellationPending)  				return;  			if (curGroupFilterSub2 == null)  				groups = JMMServerHelper.GetAnimeGroupsForFilter (curGroupFilter);  			else {  				groups = new List<AnimeGroupVM> ();  				List<AnimeGroupVM> tempGroups = JMMServerHelper.GetAnimeGroupsForFilter (GroupFilterHelper.AllGroupsFilter);  				foreach (AnimeGroupVM grp in tempGroups) {  					if (curGroupFilterSub2.GroupFilterID.Value == Constants.StaticGF.Predefined_Categories_Child) {  						if (grp.Categories.Contains (curGroupFilterSub2.PredefinedCriteria))  							groups.Add (grp);  					}  					if (curGroupFilterSub2.GroupFilterID.Value == Constants.StaticGF.Predefined_Years_Child) {  						// find all the groups that qualify by this year  						int startYear = 0;  						if (!grp.Stat_AirDate_Min.HasValue)  							continue;  						startYear = grp.Stat_AirDate_Min.Value.Year;  						int endYear = int.MaxValue;  						if (grp.Stat_AirDate_Max.HasValue)  							endYear = grp.Stat_AirDate_Max.Value.Year;  						int critYear = 0;  						if (!int.TryParse (curGroupFilterSub2.PredefinedCriteria' out critYear))  							continue;  						if (critYear >= startYear && critYear <= endYear)  							groups.Add (grp);  					}  				}  			}  			// re-sort if user has set a quick sort  			if (GroupFilterQuickSorts.ContainsKey (curGroupFilter.GroupFilterID.Value)) {  				BaseConfig.MyAnimeLog.Write ("APPLYING QUICK SORT");  				GroupFilterSorting sortType = GroupFilterHelper.GetEnumForText_Sorting (GroupFilterQuickSorts [curGroupFilter.GroupFilterID.Value].SortType);  				SortPropOrFieldAndDirection sortProp = GroupFilterHelper.GetSortDescription (sortType' GroupFilterQuickSorts [curGroupFilter.GroupFilterID.Value].SortDirection);  				List<SortPropOrFieldAndDirection> sortCriteria = new List<SortPropOrFieldAndDirection> ();  				sortCriteria.Add (sortProp);  				groups = Sorting.MultiSort<AnimeGroupVM> (groups' sortCriteria);  			}  			// Update Series Count Property  			setGUIProperty (guiProperty.GroupCount' groups.Count.ToString ());  			type = (groupViewMode != GUIFacadeControl.Layout.List) ? BackGroundLoadingArgumentType.ListElementForDelayedImgLoading : BackGroundLoadingArgumentType.ListFullElement;  			int seriesCount = 0;  			double totalTime = 0;  			DateTime start = DateTime.Now;  			BaseConfig.MyAnimeLog.Write ("Building groups: " + curGroupFilter.GroupFilterName);  			foreach (AnimeGroupVM grp in groups) {  				if (workerFacade.CancellationPending)  					return;  				try {  					item = null;  					//BaseConfig.MyAnimeLog.Write(string.Format("{0} - {1}"' grp.GroupName' grp.AniDBRating));  					SetGroupListItem (ref item' grp);  					if (settings.HideWatchedFiles && grp.UnwatchedEpisodeCount <= 0) {  						//watched files should be hidden and entire group is watched  						// -> hide entire group  						continue;  					}  					seriesCount += grp.AllSeriesCount;  					if (curAnimeGroup != null) {  						if (grp.AnimeGroupID == curAnimeGroup.AnimeGroupID) {  							selectedIndex = count;  						}  					}  					else {  						if (selectedIndex == -1)  							selectedIndex = count;  					}  					if (workerFacade.CancellationPending)  						return;  					else {  						list.Add (item);  					}  				}  				catch (Exception ex) {  					string msg = string.Format ("The 'LoadFacade' function has generated an error displaying list items: {0} - {1}"' listLevel' ex.ToString ());  					BaseConfig.MyAnimeLog.Write (msg);  				}  				count++;  			}  			TimeSpan ts2 = DateTime.Now - start;  			totalTime += ts2.TotalMilliseconds;  			BaseConfig.MyAnimeLog.Write ("Total time for rendering groups: {0}-{1}"' groups.Count' totalTime);  			setGUIProperty (guiProperty.SeriesCount' seriesCount.ToString ());  		}  		break;  	#endregion  	#region Series  	case Listlevel.Series:  		{  			// this level includes series as well as sub-groups  			if (seriesViewMode != GUIFacadeControl.Layout.List) {  				// reinit the itemsList  				delayedImageLoading = true;  				ReportFacadeLoadingProgress (BackGroundLoadingArgumentType.DelayedImgInit' 0' null);  			}  			if (workerFacade.CancellationPending)  				return;  			List<SortPropOrFieldAndDirection> sortCriteria = null;  			List<AnimeGroupVM> subGroups = curAnimeGroupViewed.SubGroups;  			if (subGroups.Count > 0) {  				sortCriteria = new List<SortPropOrFieldAndDirection> ();  				sortCriteria.Add (new SortPropOrFieldAndDirection ("SortName"' false' SortType.eString));  				subGroups = Sorting.MultiSort<AnimeGroupVM> (subGroups' sortCriteria);  			}  			// get the series for this group  			List<AnimeSeriesVM> seriesList = curAnimeGroupViewed.ChildSeries;  			if (seriesList.Count > 0) {  				sortCriteria = new List<SortPropOrFieldAndDirection> ();  				sortCriteria.Add (new SortPropOrFieldAndDirection ("AirDate"' false' SortType.eDateTime));  				seriesList = Sorting.MultiSort<AnimeSeriesVM> (seriesList' sortCriteria);  			}  			//if (seriesList.Count == 0)  			//	bFacadeEmpty = true;  			// Update Series Count Property  			setGUIProperty (guiProperty.SeriesCount' seriesList.Count.ToString ());  			// now sort the groups by air date  			type = BackGroundLoadingArgumentType.ListFullElement;  			foreach (AnimeGroupVM grp in subGroups) {  				if (workerFacade.CancellationPending)  					return;  				try {  					item = null;  					SetGroupListItem (ref item' grp);  					if (settings.HideWatchedFiles && grp.UnwatchedEpisodeCount <= 0) {  						//watched files should be hidden and entire group is watched  						// -> hide entire group  						continue;  					}  					if (workerFacade.CancellationPending)  						return;  					else {  						list.Add (item);  					}  				}  				catch (Exception ex) {  					string msg = string.Format ("The 'LoadFacade' function has generated an error displaying list items: {0} - {1}"' listLevel' ex.ToString ());  					BaseConfig.MyAnimeLog.Write (msg);  				}  			}  			foreach (AnimeSeriesVM ser in seriesList) {  				//BaseConfig.MyAnimeLog.Write("LoadFacade-Series:: {0}"' ser);  				if (workerFacade.CancellationPending)  					return;  				try {  					item = null;  					SetSeriesListItem (ref item' ser);  					if (settings.HideWatchedFiles && ser.UnwatchedEpisodeCount <= 0) {  						//watched files should be hidden and entire series is watched  						// -> hide entire series  						continue;  					}  					if (workerFacade.CancellationPending)  						return;  					else {  						list.Add (item);  					}  				}  				catch (Exception ex) {  					string msg = string.Format ("The 'LoadFacade' function has generated an error displaying list items: {0} - {1}"' listLevel' ex.ToString ());  					BaseConfig.MyAnimeLog.Write (msg);  				}  				count++;  			}  		}  		break;  	#endregion  	#region Episode Types  	case Listlevel.EpisodeTypes:  		{  			if (workerFacade.CancellationPending)  				return;  			//List<AnimeEpisodeType> anEpTypes = AnimeSeries.GetEpisodeTypes(curAnimeSeries.AnimeSeriesID.Value);  			type = BackGroundLoadingArgumentType.ListFullElement;  			foreach (AnimeEpisodeTypeVM anEpType in curAnimeSeries.EpisodeTypesToDisplay) {  				item = null;  				SetEpisodeTypeListItem (ref item' anEpType);  				if (workerFacade.CancellationPending)  					return;  				else {  					list.Add (item);  				}  				count++;  			}  		}  		break;  	#endregion  	#region Episodes  	case Listlevel.Episode:  		{  			if (workerFacade.CancellationPending)  				return;  			if (curAnimeSeries == null)  				return;  			// get the episodes for this series / episode types  			//BaseConfig.MyAnimeLog.Write("GetEpisodes:: {0}"' curAnimeSeries.AnimeSeriesID.Value);  			//List<AnimeEpisode> episodeList = AnimeSeries.GetEpisodes(curAnimeSeries.AnimeSeriesID.Value);  			curAnimeSeries.RefreshEpisodes ();  			List<AnimeEpisodeVM> episodeList = curAnimeSeries.GetEpisodesToDisplay (curAnimeEpisodeType.EpisodeType);  			// Update Series Count Property  			//setGUIProperty(guiProperty.SeriesCount' episodeList.Count.ToString());  			bool foundFirstUnwatched = false;  			type = BackGroundLoadingArgumentType.ListFullElement;  			foreach (AnimeEpisodeVM ep in episodeList) {  				//BaseConfig.MyAnimeLog.Write("LoadFacade-Episodes:: {0}"' ep);  				if (workerFacade.CancellationPending)  					return;  				try {  					item = null;  					bool isWatched = SetEpisodeListItem (ref item' ep);  					if (isWatched && settings.HideWatchedFiles)  						continue;  					if (!foundFirstUnwatched && !isWatched && ep.LocalFileCount > 0) {  						selectedIndex = count;  						foundFirstUnwatched = true;  					}  					if (workerFacade.CancellationPending)  						return;  					else {  						list.Add (item);  					}  				}  				catch (Exception ex) {  					string msg = string.Format ("The 'LoadFacade' function has generated an error displaying list items: {0} - {1}"' listLevel' ex.ToString ());  					BaseConfig.MyAnimeLog.Write (msg);  				}  				count++;  			}  			SetFanartForEpisodes ();  		}  		setGUIProperty (guiProperty.EpisodeCount' count.ToString ());  		break;  	#endregion  	}  	#region Report ItemToAutoSelect  	if (selectedIndex == -1)  		selectedIndex = 0;  	BaseConfig.MyAnimeLog.Write ("Report ItemToAutoSelect: {0}"' selectedIndex.ToString ());  	#endregion  	ReportFacadeLoadingProgress (type' selectedIndex' list);  	SetFacade ();  	#region DelayedImageLoading  	// we only use delayed image loading for the main groups view  	// since the other views will not have enough items to be concerned about  	if (delayedImageLoading && groups != null) {  		BaseConfig.MyAnimeLog.Write ("delayedImageLoading: Started");  		// This is a perfect oportunity to use all cores on the machine  		// we queue each image up to be loaded' resize and put them into memory in parallel  		// Set the amount of threads to the amount of CPU cores in the machine.  		int MaxThreads = Environment.ProcessorCount;  		// This keeps track of how many of the threads have terminated  		int done = 0;  		// Pool of threads.  		List<Thread> ImageLoadThreadPool = new List<Thread> ();  		// List of Groups in the facade. This is checked by the threads to get groups to load fanart for.  		List<KeyValuePair<AnimeGroupVM' int>> FacadeGroups = new List<KeyValuePair<AnimeGroupVM' int>> ();  		// Fill the list of groups in order of their proximity to the current selection. This makes the groups currently shown load first' and then further out.  		FacadeHelper.ProximityForEach (groups' selectedIndex' delegate (AnimeGroupVM grp' int currIndex) {  			FacadeGroups.Add (new KeyValuePair<AnimeGroupVM' int> (grp' currIndex));  		});  		// Create number of threads based on MaxThreads. MaxThreads should be the amount of CPU cores.  		for (int i = 0; i < MaxThreads; i++) {  			// Create a new thread. The function it should run is written here using the delegate word.  			Thread thread = new Thread (new ThreadStart (delegate () {  				// The number of groups left to load in the facade. Is renewed on each loop of the threads do while loop.  				int FacadeGroupCount = 0;  				do {  					// create varible to store the group.  					KeyValuePair<AnimeGroupVM' int> group = new KeyValuePair<AnimeGroupVM' int> ();  					// The FacadeGroups list is accessed by all threads' therefor it is in a locked section to make it thread safe.  					lock (FacadeGroups) {  						// Dtore into the facadeGroupCount varible which is in the threads scope.  						FacadeGroupCount = FacadeGroups.Count;  						// If there are groups left to load' and the facade is not stopping' load a group and remove it from the list.  						if (FacadeGroupCount > 0 && !workerFacade.CancellationPending) {  							group = FacadeGroups [0];  							FacadeGroups.RemoveAt (0);  						}  						// Ether their are no more groups or the facade is stopping' so we should exit while marking us as finished.  						else {  							Interlocked.Increment (ref done);  							return;  						}  					}  					// If a group was loaded' get it's image' then report that the image is loaded to the facadeworker.  					// the facade worker (which is another thread itself) will handle putting the image into the facade for us.  					if (group.Key != null) {  						string img = ImageAllocator.GetGroupImage (group.Key' groupViewMode);  						ReportFacadeLoadingProgress (BackGroundLoadingArgumentType.DelayedImgLoading' group.Value' img);  					}  				}  				// while there are still groups left to load' repeat loop.  				while (FacadeGroupCount > 0);  			}));  			// Make the thread a lower priority. Everything else should have a higher priority then this background image loading.  			thread.Priority = ThreadPriority.BelowNormal;  			// add this thread to the thread pool.  			ImageLoadThreadPool.Add (thread);  		}  		// for each thread in the thread pool' start it.  		foreach (Thread thread in ImageLoadThreadPool)  			thread.Start ();  		// Do not continue untill all the image loading threads are finished. Currently we are in the facade background worker thread. The image loading threads call  		// this thread's ProgressChanged function' which then adds the images that were loaded in to the facade. If we go beyond this point before the image loading  		// threads finish' then that ProgressChanged function might not exisit any more since this facade background worker thread could have finished already.  		while (done < MaxThreads)  			Thread.Sleep (500);  		BaseConfig.MyAnimeLog.Write ("ImageLoad: Finished");  	}  	#endregion  	if (animeSeriesIDToBeRated.HasValue && BaseConfig.Settings.DisplayRatingDialogOnCompletion) {  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (animeSeriesIDToBeRated.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM ser = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (ser);  		}  		animeSeriesIDToBeRated = null;  	}  }  catch (Exception e) {  	BaseConfig.MyAnimeLog.Write ("The 'LoadFacade' function has generated an error: {0}"' e.ToString ());  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,bgLoadFacade,The following statement contains a magic number: if (delayedImageLoading && groups != null) {  	BaseConfig.MyAnimeLog.Write ("delayedImageLoading: Started");  	// This is a perfect oportunity to use all cores on the machine  	// we queue each image up to be loaded' resize and put them into memory in parallel  	// Set the amount of threads to the amount of CPU cores in the machine.  	int MaxThreads = Environment.ProcessorCount;  	// This keeps track of how many of the threads have terminated  	int done = 0;  	// Pool of threads.  	List<Thread> ImageLoadThreadPool = new List<Thread> ();  	// List of Groups in the facade. This is checked by the threads to get groups to load fanart for.  	List<KeyValuePair<AnimeGroupVM' int>> FacadeGroups = new List<KeyValuePair<AnimeGroupVM' int>> ();  	// Fill the list of groups in order of their proximity to the current selection. This makes the groups currently shown load first' and then further out.  	FacadeHelper.ProximityForEach (groups' selectedIndex' delegate (AnimeGroupVM grp' int currIndex) {  		FacadeGroups.Add (new KeyValuePair<AnimeGroupVM' int> (grp' currIndex));  	});  	// Create number of threads based on MaxThreads. MaxThreads should be the amount of CPU cores.  	for (int i = 0; i < MaxThreads; i++) {  		// Create a new thread. The function it should run is written here using the delegate word.  		Thread thread = new Thread (new ThreadStart (delegate () {  			// The number of groups left to load in the facade. Is renewed on each loop of the threads do while loop.  			int FacadeGroupCount = 0;  			do {  				// create varible to store the group.  				KeyValuePair<AnimeGroupVM' int> group = new KeyValuePair<AnimeGroupVM' int> ();  				// The FacadeGroups list is accessed by all threads' therefor it is in a locked section to make it thread safe.  				lock (FacadeGroups) {  					// Dtore into the facadeGroupCount varible which is in the threads scope.  					FacadeGroupCount = FacadeGroups.Count;  					// If there are groups left to load' and the facade is not stopping' load a group and remove it from the list.  					if (FacadeGroupCount > 0 && !workerFacade.CancellationPending) {  						group = FacadeGroups [0];  						FacadeGroups.RemoveAt (0);  					}  					// Ether their are no more groups or the facade is stopping' so we should exit while marking us as finished.  					else {  						Interlocked.Increment (ref done);  						return;  					}  				}  				// If a group was loaded' get it's image' then report that the image is loaded to the facadeworker.  				// the facade worker (which is another thread itself) will handle putting the image into the facade for us.  				if (group.Key != null) {  					string img = ImageAllocator.GetGroupImage (group.Key' groupViewMode);  					ReportFacadeLoadingProgress (BackGroundLoadingArgumentType.DelayedImgLoading' group.Value' img);  				}  			}  			// while there are still groups left to load' repeat loop.  			while (FacadeGroupCount > 0);  		}));  		// Make the thread a lower priority. Everything else should have a higher priority then this background image loading.  		thread.Priority = ThreadPriority.BelowNormal;  		// add this thread to the thread pool.  		ImageLoadThreadPool.Add (thread);  	}  	// for each thread in the thread pool' start it.  	foreach (Thread thread in ImageLoadThreadPool)  		thread.Start ();  	// Do not continue untill all the image loading threads are finished. Currently we are in the facade background worker thread. The image loading threads call  	// this thread's ProgressChanged function' which then adds the images that were loaded in to the facade. If we go beyond this point before the image loading  	// threads finish' then that ProgressChanged function might not exisit any more since this facade background worker thread could have finished already.  	while (done < MaxThreads)  		Thread.Sleep (500);  	BaseConfig.MyAnimeLog.Write ("ImageLoad: Finished");  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,bgLoadFacade,The following statement contains a magic number: while (done < MaxThreads)  	Thread.Sleep (500);  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,bgLoadFacade,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetEpisodeTypeListItem,The following statement contains a magic number: try {  	item = new GUIListItem (epType.EpisodeTypeDescription);  	item.DVDLabel = epType.EpisodeTypeDescription;  	item.TVTag = epType;  	int unwatched = 0;  	int watched = 0;  	if (curAnimeSeries != null)  		curAnimeSeries.GetWatchedUnwatchedCount (epType.EpisodeType' ref unwatched' ref watched);  	item.IsPlayed = (unwatched == 0);  	View.eLabelStyleGroups style = View.eLabelStyleGroups.WatchedUnwatched;  	switch (style) {  	case View.eLabelStyleGroups.WatchedUnwatched:  		string space = " ";  		item.Label3 = space + watched.ToString ().PadLeft (3' '0');  		item.IconImage = sIconList;  		item.Label2 = unwatched.ToString ().PadLeft (3' '0');  		break;  	/*case View.eLabelStyleGroups.Unwatched:  						if (unwatched > 0) 						{ 							item.IconImage = sUnWatchedFilename; 							item.Label3 = unwatched.ToString() + " New"; 							item.Label2 = "  "; 						} 						else 						{ 							item.Label2 = "  "; 							item.Label3 = "  "; 						} 						break;  					case View.eLabelStyleGroups.TotalEpisodes:  						int totalEps = unwatched + watched;  						item.IconImage = sUnWatchedFilename; 						item.Label3 = totalEps.ToString() + " Episodes"; 						item.Label2 = "  ";  						break;*/}  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write ("Failed to create episode type item: {0}"' ex);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetEpisodeTypeListItem,The following statement contains a magic number: try {  	item = new GUIListItem (epType.EpisodeTypeDescription);  	item.DVDLabel = epType.EpisodeTypeDescription;  	item.TVTag = epType;  	int unwatched = 0;  	int watched = 0;  	if (curAnimeSeries != null)  		curAnimeSeries.GetWatchedUnwatchedCount (epType.EpisodeType' ref unwatched' ref watched);  	item.IsPlayed = (unwatched == 0);  	View.eLabelStyleGroups style = View.eLabelStyleGroups.WatchedUnwatched;  	switch (style) {  	case View.eLabelStyleGroups.WatchedUnwatched:  		string space = " ";  		item.Label3 = space + watched.ToString ().PadLeft (3' '0');  		item.IconImage = sIconList;  		item.Label2 = unwatched.ToString ().PadLeft (3' '0');  		break;  	/*case View.eLabelStyleGroups.Unwatched:  						if (unwatched > 0) 						{ 							item.IconImage = sUnWatchedFilename; 							item.Label3 = unwatched.ToString() + " New"; 							item.Label2 = "  "; 						} 						else 						{ 							item.Label2 = "  "; 							item.Label3 = "  "; 						} 						break;  					case View.eLabelStyleGroups.TotalEpisodes:  						int totalEps = unwatched + watched;  						item.IconImage = sUnWatchedFilename; 						item.Label3 = totalEps.ToString() + " Episodes"; 						item.Label2 = "  ";  						break;*/}  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write ("Failed to create episode type item: {0}"' ex);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetEpisodeTypeListItem,The following statement contains a magic number: switch (style) {  case View.eLabelStyleGroups.WatchedUnwatched:  	string space = " ";  	item.Label3 = space + watched.ToString ().PadLeft (3' '0');  	item.IconImage = sIconList;  	item.Label2 = unwatched.ToString ().PadLeft (3' '0');  	break;  /*case View.eLabelStyleGroups.Unwatched:  						if (unwatched > 0) 						{ 							item.IconImage = sUnWatchedFilename; 							item.Label3 = unwatched.ToString() + " New"; 							item.Label2 = "  "; 						} 						else 						{ 							item.Label2 = "  "; 							item.Label3 = "  "; 						} 						break;  					case View.eLabelStyleGroups.TotalEpisodes:  						int totalEps = unwatched + watched;  						item.IconImage = sUnWatchedFilename; 						item.Label3 = totalEps.ToString() + " Episodes"; 						item.Label2 = "  ";  						break;*/}  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetEpisodeTypeListItem,The following statement contains a magic number: switch (style) {  case View.eLabelStyleGroups.WatchedUnwatched:  	string space = " ";  	item.Label3 = space + watched.ToString ().PadLeft (3' '0');  	item.IconImage = sIconList;  	item.Label2 = unwatched.ToString ().PadLeft (3' '0');  	break;  /*case View.eLabelStyleGroups.Unwatched:  						if (unwatched > 0) 						{ 							item.IconImage = sUnWatchedFilename; 							item.Label3 = unwatched.ToString() + " New"; 							item.Label2 = "  "; 						} 						else 						{ 							item.Label2 = "  "; 							item.Label3 = "  "; 						} 						break;  					case View.eLabelStyleGroups.TotalEpisodes:  						int totalEps = unwatched + watched;  						item.IconImage = sUnWatchedFilename; 						item.Label3 = totalEps.ToString() + " Episodes"; 						item.Label2 = "  ";  						break;*/}  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetEpisodeTypeListItem,The following statement contains a magic number: item.Label3 = space + watched.ToString ().PadLeft (3' '0');  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetEpisodeTypeListItem,The following statement contains a magic number: item.Label2 = unwatched.ToString ().PadLeft (3' '0');  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetSeriesListItem,The following statement contains a magic number: if (seriesViewMode != GUIFacadeControl.Layout.List) {  	// Graphical Mode  	item = new GUIListItem ();  	//item.IconImage = item.IconImageBig = ImageAllocator.GetSeriesBanner(ser' seriesViewMode);  }  else {  	item = new GUIListItem (ser.SeriesName);  	View.eLabelStyleGroups style = settings.LabelStyleGroups;  	switch (style) {  	case View.eLabelStyleGroups.WatchedUnwatched:  		string unwatched = ser.UnwatchedEpisodeCount.ToString ();  		string watched = ser.WatchedEpisodeCount.ToString ();  		string space = " ";  		item.Label3 = space + watched.ToString ().PadLeft (3' '0');  		item.IconImage = sIconList;  		item.Label2 = unwatched.ToString ().PadLeft (3' '0');  		break;  	case View.eLabelStyleGroups.Unwatched:  		if (ser.UnwatchedEpisodeCount > 0) {  			item.IconImage = sUnWatchedFilename;  			item.Label3 = ser.UnwatchedEpisodeCount.ToString () + " New";  			item.Label2 = "  ";  		}  		else {  			item.Label2 = "  ";  			item.Label3 = "  ";  		}  		break;  	case View.eLabelStyleGroups.TotalEpisodes:  		int totalEps = ser.UnwatchedEpisodeCount + ser.WatchedEpisodeCount;  		item.IconImage = sUnWatchedFilename;  		item.Label3 = totalEps.ToString () + " Episodes";  		item.Label2 = "  ";  		break;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetSeriesListItem,The following statement contains a magic number: if (seriesViewMode != GUIFacadeControl.Layout.List) {  	// Graphical Mode  	item = new GUIListItem ();  	//item.IconImage = item.IconImageBig = ImageAllocator.GetSeriesBanner(ser' seriesViewMode);  }  else {  	item = new GUIListItem (ser.SeriesName);  	View.eLabelStyleGroups style = settings.LabelStyleGroups;  	switch (style) {  	case View.eLabelStyleGroups.WatchedUnwatched:  		string unwatched = ser.UnwatchedEpisodeCount.ToString ();  		string watched = ser.WatchedEpisodeCount.ToString ();  		string space = " ";  		item.Label3 = space + watched.ToString ().PadLeft (3' '0');  		item.IconImage = sIconList;  		item.Label2 = unwatched.ToString ().PadLeft (3' '0');  		break;  	case View.eLabelStyleGroups.Unwatched:  		if (ser.UnwatchedEpisodeCount > 0) {  			item.IconImage = sUnWatchedFilename;  			item.Label3 = ser.UnwatchedEpisodeCount.ToString () + " New";  			item.Label2 = "  ";  		}  		else {  			item.Label2 = "  ";  			item.Label3 = "  ";  		}  		break;  	case View.eLabelStyleGroups.TotalEpisodes:  		int totalEps = ser.UnwatchedEpisodeCount + ser.WatchedEpisodeCount;  		item.IconImage = sUnWatchedFilename;  		item.Label3 = totalEps.ToString () + " Episodes";  		item.Label2 = "  ";  		break;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetSeriesListItem,The following statement contains a magic number: switch (style) {  case View.eLabelStyleGroups.WatchedUnwatched:  	string unwatched = ser.UnwatchedEpisodeCount.ToString ();  	string watched = ser.WatchedEpisodeCount.ToString ();  	string space = " ";  	item.Label3 = space + watched.ToString ().PadLeft (3' '0');  	item.IconImage = sIconList;  	item.Label2 = unwatched.ToString ().PadLeft (3' '0');  	break;  case View.eLabelStyleGroups.Unwatched:  	if (ser.UnwatchedEpisodeCount > 0) {  		item.IconImage = sUnWatchedFilename;  		item.Label3 = ser.UnwatchedEpisodeCount.ToString () + " New";  		item.Label2 = "  ";  	}  	else {  		item.Label2 = "  ";  		item.Label3 = "  ";  	}  	break;  case View.eLabelStyleGroups.TotalEpisodes:  	int totalEps = ser.UnwatchedEpisodeCount + ser.WatchedEpisodeCount;  	item.IconImage = sUnWatchedFilename;  	item.Label3 = totalEps.ToString () + " Episodes";  	item.Label2 = "  ";  	break;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetSeriesListItem,The following statement contains a magic number: switch (style) {  case View.eLabelStyleGroups.WatchedUnwatched:  	string unwatched = ser.UnwatchedEpisodeCount.ToString ();  	string watched = ser.WatchedEpisodeCount.ToString ();  	string space = " ";  	item.Label3 = space + watched.ToString ().PadLeft (3' '0');  	item.IconImage = sIconList;  	item.Label2 = unwatched.ToString ().PadLeft (3' '0');  	break;  case View.eLabelStyleGroups.Unwatched:  	if (ser.UnwatchedEpisodeCount > 0) {  		item.IconImage = sUnWatchedFilename;  		item.Label3 = ser.UnwatchedEpisodeCount.ToString () + " New";  		item.Label2 = "  ";  	}  	else {  		item.Label2 = "  ";  		item.Label3 = "  ";  	}  	break;  case View.eLabelStyleGroups.TotalEpisodes:  	int totalEps = ser.UnwatchedEpisodeCount + ser.WatchedEpisodeCount;  	item.IconImage = sUnWatchedFilename;  	item.Label3 = totalEps.ToString () + " Episodes";  	item.Label2 = "  ";  	break;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetSeriesListItem,The following statement contains a magic number: item.Label3 = space + watched.ToString ().PadLeft (3' '0');  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetSeriesListItem,The following statement contains a magic number: item.Label2 = unwatched.ToString ().PadLeft (3' '0');  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetGroupListItem,The following statement contains a magic number: if (groupViewMode != GUIFacadeControl.Layout.List) {  	// Graphical Mode  	item = new GUIListItem ();  }  else {  	string sIconList = GUIGraphicsContext.Skin + @"\Media\MyAnime3\anime3_ListIcon.png";  	// MyAnime3\anime3_ListIcon  	//string sUnWatchedFilename = GUIGraphicsContext.Skin + @"\Media\MyAnime3\anime3_UnWatched_left.png";  	item = new GUIListItem (grp.GroupName);  	View.eLabelStyleGroups style = View.eLabelStyleGroups.WatchedUnwatched;  	switch (style) {  	case View.eLabelStyleGroups.WatchedUnwatched:  		// Available (Files are Local) Images  		string unwatched = grp.UnwatchedEpisodeCount.ToString ();  		string watched = grp.WatchedEpisodeCount.ToString ();  		string space = " ";  		//item.Label3 = space + watched.ToString().PadLeft(3' '0');  		item.Label3 = space + watched.ToString ().PadLeft (3' '0');  		item.IconImage = sIconList;  		item.Label2 = unwatched.ToString ().PadLeft (3' '0');  		break;  	/*case View.eLabelStyleGroups.Unwatched:  						if (grp.UnwatchedEpisodeCount > 0) 						{ 							item.IconImage = sUnWatchedFilename; 							item.Label3 = grp.UnwatchedEpisodeCount.ToString() + " New"; 							item.Label2 = "  "; 						} 						else 						{ 							item.Label2 = "  "; 							item.Label3 = "  "; 						} 						break;  					case View.eLabelStyleGroups.TotalEpisodes:  						int totalEps = grp.UnwatchedEpisodeCount + grp.WatchedEpisodeCount;  						item.IconImage = sUnWatchedFilename; 						item.Label3 = totalEps.ToString() + " Eps"; 						item.Label2 = "  ";  						break;*/}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetGroupListItem,The following statement contains a magic number: if (groupViewMode != GUIFacadeControl.Layout.List) {  	// Graphical Mode  	item = new GUIListItem ();  }  else {  	string sIconList = GUIGraphicsContext.Skin + @"\Media\MyAnime3\anime3_ListIcon.png";  	// MyAnime3\anime3_ListIcon  	//string sUnWatchedFilename = GUIGraphicsContext.Skin + @"\Media\MyAnime3\anime3_UnWatched_left.png";  	item = new GUIListItem (grp.GroupName);  	View.eLabelStyleGroups style = View.eLabelStyleGroups.WatchedUnwatched;  	switch (style) {  	case View.eLabelStyleGroups.WatchedUnwatched:  		// Available (Files are Local) Images  		string unwatched = grp.UnwatchedEpisodeCount.ToString ();  		string watched = grp.WatchedEpisodeCount.ToString ();  		string space = " ";  		//item.Label3 = space + watched.ToString().PadLeft(3' '0');  		item.Label3 = space + watched.ToString ().PadLeft (3' '0');  		item.IconImage = sIconList;  		item.Label2 = unwatched.ToString ().PadLeft (3' '0');  		break;  	/*case View.eLabelStyleGroups.Unwatched:  						if (grp.UnwatchedEpisodeCount > 0) 						{ 							item.IconImage = sUnWatchedFilename; 							item.Label3 = grp.UnwatchedEpisodeCount.ToString() + " New"; 							item.Label2 = "  "; 						} 						else 						{ 							item.Label2 = "  "; 							item.Label3 = "  "; 						} 						break;  					case View.eLabelStyleGroups.TotalEpisodes:  						int totalEps = grp.UnwatchedEpisodeCount + grp.WatchedEpisodeCount;  						item.IconImage = sUnWatchedFilename; 						item.Label3 = totalEps.ToString() + " Eps"; 						item.Label2 = "  ";  						break;*/}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetGroupListItem,The following statement contains a magic number: switch (style) {  case View.eLabelStyleGroups.WatchedUnwatched:  	// Available (Files are Local) Images  	string unwatched = grp.UnwatchedEpisodeCount.ToString ();  	string watched = grp.WatchedEpisodeCount.ToString ();  	string space = " ";  	//item.Label3 = space + watched.ToString().PadLeft(3' '0');  	item.Label3 = space + watched.ToString ().PadLeft (3' '0');  	item.IconImage = sIconList;  	item.Label2 = unwatched.ToString ().PadLeft (3' '0');  	break;  /*case View.eLabelStyleGroups.Unwatched:  						if (grp.UnwatchedEpisodeCount > 0) 						{ 							item.IconImage = sUnWatchedFilename; 							item.Label3 = grp.UnwatchedEpisodeCount.ToString() + " New"; 							item.Label2 = "  "; 						} 						else 						{ 							item.Label2 = "  "; 							item.Label3 = "  "; 						} 						break;  					case View.eLabelStyleGroups.TotalEpisodes:  						int totalEps = grp.UnwatchedEpisodeCount + grp.WatchedEpisodeCount;  						item.IconImage = sUnWatchedFilename; 						item.Label3 = totalEps.ToString() + " Eps"; 						item.Label2 = "  ";  						break;*/}  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetGroupListItem,The following statement contains a magic number: switch (style) {  case View.eLabelStyleGroups.WatchedUnwatched:  	// Available (Files are Local) Images  	string unwatched = grp.UnwatchedEpisodeCount.ToString ();  	string watched = grp.WatchedEpisodeCount.ToString ();  	string space = " ";  	//item.Label3 = space + watched.ToString().PadLeft(3' '0');  	item.Label3 = space + watched.ToString ().PadLeft (3' '0');  	item.IconImage = sIconList;  	item.Label2 = unwatched.ToString ().PadLeft (3' '0');  	break;  /*case View.eLabelStyleGroups.Unwatched:  						if (grp.UnwatchedEpisodeCount > 0) 						{ 							item.IconImage = sUnWatchedFilename; 							item.Label3 = grp.UnwatchedEpisodeCount.ToString() + " New"; 							item.Label2 = "  "; 						} 						else 						{ 							item.Label2 = "  "; 							item.Label3 = "  "; 						} 						break;  					case View.eLabelStyleGroups.TotalEpisodes:  						int totalEps = grp.UnwatchedEpisodeCount + grp.WatchedEpisodeCount;  						item.IconImage = sUnWatchedFilename; 						item.Label3 = totalEps.ToString() + " Eps"; 						item.Label2 = "  ";  						break;*/}  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetGroupListItem,The following statement contains a magic number: item.Label3 = space + watched.ToString ().PadLeft (3' '0');  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetGroupListItem,The following statement contains a magic number: item.Label2 = unwatched.ToString ().PadLeft (3' '0');  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowLayoutMenu,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add ("List Posters");  	dlg.Add ("Wide Banners");  	dlg.Add ("Filmstrip");  	if (!m_Facade.IsNullLayout (GUIFacadeControl.Layout.CoverFlow))  		dlg.Add ("Coverflow");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		groupViewMode = GUIFacadeControl.Layout.List;  		break;  	case 2:  		groupViewMode = GUIFacadeControl.Layout.LargeIcons;  		break;  	case 3:  		groupViewMode = GUIFacadeControl.Layout.Filmstrip;  		break;  	case 4:  		// Disabled for now due to a bug - enable to see the issue  		groupViewMode = GUIFacadeControl.Layout.CoverFlow;  		break;  	//Utils.DialogMsg("Disabled"' "This Layout is temporarily disabled");  	//return false;  	default:  		//close menu  		return false;  	}  	break;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowLayoutMenu,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add ("List Posters");  	dlg.Add ("Wide Banners");  	dlg.Add ("Filmstrip");  	if (!m_Facade.IsNullLayout (GUIFacadeControl.Layout.CoverFlow))  		dlg.Add ("Coverflow");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		groupViewMode = GUIFacadeControl.Layout.List;  		break;  	case 2:  		groupViewMode = GUIFacadeControl.Layout.LargeIcons;  		break;  	case 3:  		groupViewMode = GUIFacadeControl.Layout.Filmstrip;  		break;  	case 4:  		// Disabled for now due to a bug - enable to see the issue  		groupViewMode = GUIFacadeControl.Layout.CoverFlow;  		break;  	//Utils.DialogMsg("Disabled"' "This Layout is temporarily disabled");  	//return false;  	default:  		//close menu  		return false;  	}  	break;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowLayoutMenu,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add ("List Posters");  	dlg.Add ("Wide Banners");  	dlg.Add ("Filmstrip");  	if (!m_Facade.IsNullLayout (GUIFacadeControl.Layout.CoverFlow))  		dlg.Add ("Coverflow");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		groupViewMode = GUIFacadeControl.Layout.List;  		break;  	case 2:  		groupViewMode = GUIFacadeControl.Layout.LargeIcons;  		break;  	case 3:  		groupViewMode = GUIFacadeControl.Layout.Filmstrip;  		break;  	case 4:  		// Disabled for now due to a bug - enable to see the issue  		groupViewMode = GUIFacadeControl.Layout.CoverFlow;  		break;  	//Utils.DialogMsg("Disabled"' "This Layout is temporarily disabled");  	//return false;  	default:  		//close menu  		return false;  	}  	break;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowLayoutMenu,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	groupViewMode = GUIFacadeControl.Layout.List;  	break;  case 2:  	groupViewMode = GUIFacadeControl.Layout.LargeIcons;  	break;  case 3:  	groupViewMode = GUIFacadeControl.Layout.Filmstrip;  	break;  case 4:  	// Disabled for now due to a bug - enable to see the issue  	groupViewMode = GUIFacadeControl.Layout.CoverFlow;  	break;  //Utils.DialogMsg("Disabled"' "This Layout is temporarily disabled");  //return false;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowLayoutMenu,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	groupViewMode = GUIFacadeControl.Layout.List;  	break;  case 2:  	groupViewMode = GUIFacadeControl.Layout.LargeIcons;  	break;  case 3:  	groupViewMode = GUIFacadeControl.Layout.Filmstrip;  	break;  case 4:  	// Disabled for now due to a bug - enable to see the issue  	groupViewMode = GUIFacadeControl.Layout.CoverFlow;  	break;  //Utils.DialogMsg("Disabled"' "This Layout is temporarily disabled");  //return false;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowLayoutMenu,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	groupViewMode = GUIFacadeControl.Layout.List;  	break;  case 2:  	groupViewMode = GUIFacadeControl.Layout.LargeIcons;  	break;  case 3:  	groupViewMode = GUIFacadeControl.Layout.Filmstrip;  	break;  case 4:  	// Disabled for now due to a bug - enable to see the issue  	groupViewMode = GUIFacadeControl.Layout.CoverFlow;  	break;  //Utils.DialogMsg("Disabled"' "This Layout is temporarily disabled");  //return false;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowOptionsMenu,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add ("AniDB >>>");  	dlg.Add ("Display >>>");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		//if (!ShowOptionsAniDBMenu(currentMenu))  		//	return false;  		break;  	case 2:  		if (!ShowOptionsDisplayMenu (currentMenu))  			return false;  		break;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowOptionsMenu,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	//if (!ShowOptionsAniDBMenu(currentMenu))  	//	return false;  	break;  case 2:  	if (!ShowOptionsDisplayMenu (currentMenu))  		return false;  	break;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowOptionsDisplayMenu,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	string showEps = string.Format ("Only Show Available Episodes ({0})"' settings.ShowOnlyAvailableEpisodes ? "On" : "Off");  	string hideWatched = string.Format ("Hide Watched Episodes ({0})"' settings.HideWatchedFiles ? "On" : "Off");  	string findFilter = string.Format ("Find - Only Show Matches ({0})"' settings.FindFilter ? "On" : "Off");  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add (showEps);  	dlg.Add (hideWatched);  	dlg.Add (findFilter);  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		settings.ShowOnlyAvailableEpisodes = !settings.ShowOnlyAvailableEpisodes;  		LoadFacade ();  		break;  	case 2:  		settings.HideWatchedFiles = !settings.HideWatchedFiles;  		LoadFacade ();  		break;  	case 3:  		settings.FindFilter = !settings.FindFilter;  		if (searchTimer.Enabled) {  			SaveOrRestoreFacadeItems (false);  			DoSearch (m_Facade.SelectedListItemIndex);  		}  		break;  	default:  		//close menu  		return false;  	}  	settings.Save ();  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowOptionsDisplayMenu,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	string showEps = string.Format ("Only Show Available Episodes ({0})"' settings.ShowOnlyAvailableEpisodes ? "On" : "Off");  	string hideWatched = string.Format ("Hide Watched Episodes ({0})"' settings.HideWatchedFiles ? "On" : "Off");  	string findFilter = string.Format ("Find - Only Show Matches ({0})"' settings.FindFilter ? "On" : "Off");  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add (showEps);  	dlg.Add (hideWatched);  	dlg.Add (findFilter);  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		settings.ShowOnlyAvailableEpisodes = !settings.ShowOnlyAvailableEpisodes;  		LoadFacade ();  		break;  	case 2:  		settings.HideWatchedFiles = !settings.HideWatchedFiles;  		LoadFacade ();  		break;  	case 3:  		settings.FindFilter = !settings.FindFilter;  		if (searchTimer.Enabled) {  			SaveOrRestoreFacadeItems (false);  			DoSearch (m_Facade.SelectedListItemIndex);  		}  		break;  	default:  		//close menu  		return false;  	}  	settings.Save ();  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowOptionsDisplayMenu,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	settings.ShowOnlyAvailableEpisodes = !settings.ShowOnlyAvailableEpisodes;  	LoadFacade ();  	break;  case 2:  	settings.HideWatchedFiles = !settings.HideWatchedFiles;  	LoadFacade ();  	break;  case 3:  	settings.FindFilter = !settings.FindFilter;  	if (searchTimer.Enabled) {  		SaveOrRestoreFacadeItems (false);  		DoSearch (m_Facade.SelectedListItemIndex);  	}  	break;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowOptionsDisplayMenu,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	settings.ShowOnlyAvailableEpisodes = !settings.ShowOnlyAvailableEpisodes;  	LoadFacade ();  	break;  case 2:  	settings.HideWatchedFiles = !settings.HideWatchedFiles;  	LoadFacade ();  	break;  case 3:  	settings.FindFilter = !settings.FindFilter;  	if (searchTimer.Enabled) {  		SaveOrRestoreFacadeItems (false);  		DoSearch (m_Facade.SelectedListItemIndex);  	}  	break;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnClicked,The following statement contains a magic number: if (this.btnDisplayOptions != null && control == this.btnDisplayOptions) {  	hook.IsEnabled = false;  	ShowDisplayOptionsMenu ("");  	btnDisplayOptions.Focus = false;  	Thread.Sleep (100);  	//make sure key-up's from the context menu aren't cought by the hook  	hook.IsEnabled = true;  	this.btnDisplayOptions.IsFocused = false;  	return;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnClicked,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnClicked,The following statement contains a magic number: if (this.btnSettings != null && control == this.btnSettings) {  	hook.IsEnabled = false;  	ShowOptionsDisplayMenu ("");  	btnDisplayOptions.Focus = false;  	Thread.Sleep (100);  	//make sure key-up's from the context menu aren't cought by the hook  	hook.IsEnabled = true;  	this.btnSettings.IsFocused = false;  	return;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnClicked,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,AddSearchChar,The following statement contains a magic number: if (search.Mode == SearchMode.t9) {  	int n = (int)c - (int)'0';  	if (n >= 0 && n <= 9) {  		//add number to sequence  		search.Input = search.Input + c;  		searchText = searchText + "?";  	}  }  else if (search.Mode == SearchMode.text) {  	//add char to sequence  	search.Input = search.Input + c;  	searchText = searchText + "?";  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,AddSearchChar,The following statement contains a magic number: if (n >= 0 && n <= 9) {  	//add number to sequence  	search.Input = search.Input + c;  	searchText = searchText + "?";  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: switch (message.Message) {  case GUIMessage.MessageType.GUI_MSG_ITEM_FOCUS_CHANGED:  	{  		int iControl = message.SenderControlId;  		if (iControl == (int)m_Facade.GetID) {  			if (m_Facade.SelectedListItem != null && m_Facade.SelectedListItem.TVTag != null) {  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(GroupFilterVM)) {  					GroupFilterVM gf = m_Facade.SelectedListItem.TVTag as GroupFilterVM;  					if (LastFocusType == 1) {  						if (gf != null && gf.GroupFilterID.Value == LastFocusID)  							return true;  					}  					if (gf != null) {  						LastFocusType = 1;  						LastFocusID = gf.GroupFilterID.Value;  					}  					GroupFilter_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  					AnimeGroupVM obj = m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  					if (LastFocusType == 2) {  						if (obj != null && obj.AnimeGroupID == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 2;  						LastFocusID = obj.AnimeGroupID;  					}  					Group_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  					AnimeSeriesVM obj = m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  					if (LastFocusType == 3) {  						if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 3;  						LastFocusID = obj.AnimeSeriesID.Value;  					}  					Series_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeTypeVM)) {  					AnimeEpisodeTypeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  					if (LastFocusType == 4) {  						if (obj != null && (int)obj.EpisodeType == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 4;  						LastFocusID = (int)obj.EpisodeType;  					}  					EpisodeType_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  					AnimeEpisodeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  					if (LastFocusType == 5) {  						if (obj != null && obj.AnimeEpisodeID == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 5;  						LastFocusID = obj.AnimeEpisodeID;  					}  					Episode_OnItemSelected (m_Facade.SelectedListItem);  				}  			}  		}  	}  	EvaluateVisibility ();  	return true;  case GUIMessage.MessageType.GUI_MSG_PLAYBACK_ENDED:  case GUIMessage.MessageType.GUI_MSG_PLAYBACK_STOPPED:  	{  		//-- Need to reload the GUI to display changes   		//-- if episode is classified as watched  		LoadFacade ();  	}  	return true;  default:  	return base.OnMessage (message);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: switch (message.Message) {  case GUIMessage.MessageType.GUI_MSG_ITEM_FOCUS_CHANGED:  	{  		int iControl = message.SenderControlId;  		if (iControl == (int)m_Facade.GetID) {  			if (m_Facade.SelectedListItem != null && m_Facade.SelectedListItem.TVTag != null) {  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(GroupFilterVM)) {  					GroupFilterVM gf = m_Facade.SelectedListItem.TVTag as GroupFilterVM;  					if (LastFocusType == 1) {  						if (gf != null && gf.GroupFilterID.Value == LastFocusID)  							return true;  					}  					if (gf != null) {  						LastFocusType = 1;  						LastFocusID = gf.GroupFilterID.Value;  					}  					GroupFilter_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  					AnimeGroupVM obj = m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  					if (LastFocusType == 2) {  						if (obj != null && obj.AnimeGroupID == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 2;  						LastFocusID = obj.AnimeGroupID;  					}  					Group_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  					AnimeSeriesVM obj = m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  					if (LastFocusType == 3) {  						if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 3;  						LastFocusID = obj.AnimeSeriesID.Value;  					}  					Series_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeTypeVM)) {  					AnimeEpisodeTypeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  					if (LastFocusType == 4) {  						if (obj != null && (int)obj.EpisodeType == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 4;  						LastFocusID = (int)obj.EpisodeType;  					}  					EpisodeType_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  					AnimeEpisodeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  					if (LastFocusType == 5) {  						if (obj != null && obj.AnimeEpisodeID == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 5;  						LastFocusID = obj.AnimeEpisodeID;  					}  					Episode_OnItemSelected (m_Facade.SelectedListItem);  				}  			}  		}  	}  	EvaluateVisibility ();  	return true;  case GUIMessage.MessageType.GUI_MSG_PLAYBACK_ENDED:  case GUIMessage.MessageType.GUI_MSG_PLAYBACK_STOPPED:  	{  		//-- Need to reload the GUI to display changes   		//-- if episode is classified as watched  		LoadFacade ();  	}  	return true;  default:  	return base.OnMessage (message);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: switch (message.Message) {  case GUIMessage.MessageType.GUI_MSG_ITEM_FOCUS_CHANGED:  	{  		int iControl = message.SenderControlId;  		if (iControl == (int)m_Facade.GetID) {  			if (m_Facade.SelectedListItem != null && m_Facade.SelectedListItem.TVTag != null) {  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(GroupFilterVM)) {  					GroupFilterVM gf = m_Facade.SelectedListItem.TVTag as GroupFilterVM;  					if (LastFocusType == 1) {  						if (gf != null && gf.GroupFilterID.Value == LastFocusID)  							return true;  					}  					if (gf != null) {  						LastFocusType = 1;  						LastFocusID = gf.GroupFilterID.Value;  					}  					GroupFilter_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  					AnimeGroupVM obj = m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  					if (LastFocusType == 2) {  						if (obj != null && obj.AnimeGroupID == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 2;  						LastFocusID = obj.AnimeGroupID;  					}  					Group_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  					AnimeSeriesVM obj = m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  					if (LastFocusType == 3) {  						if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 3;  						LastFocusID = obj.AnimeSeriesID.Value;  					}  					Series_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeTypeVM)) {  					AnimeEpisodeTypeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  					if (LastFocusType == 4) {  						if (obj != null && (int)obj.EpisodeType == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 4;  						LastFocusID = (int)obj.EpisodeType;  					}  					EpisodeType_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  					AnimeEpisodeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  					if (LastFocusType == 5) {  						if (obj != null && obj.AnimeEpisodeID == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 5;  						LastFocusID = obj.AnimeEpisodeID;  					}  					Episode_OnItemSelected (m_Facade.SelectedListItem);  				}  			}  		}  	}  	EvaluateVisibility ();  	return true;  case GUIMessage.MessageType.GUI_MSG_PLAYBACK_ENDED:  case GUIMessage.MessageType.GUI_MSG_PLAYBACK_STOPPED:  	{  		//-- Need to reload the GUI to display changes   		//-- if episode is classified as watched  		LoadFacade ();  	}  	return true;  default:  	return base.OnMessage (message);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: switch (message.Message) {  case GUIMessage.MessageType.GUI_MSG_ITEM_FOCUS_CHANGED:  	{  		int iControl = message.SenderControlId;  		if (iControl == (int)m_Facade.GetID) {  			if (m_Facade.SelectedListItem != null && m_Facade.SelectedListItem.TVTag != null) {  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(GroupFilterVM)) {  					GroupFilterVM gf = m_Facade.SelectedListItem.TVTag as GroupFilterVM;  					if (LastFocusType == 1) {  						if (gf != null && gf.GroupFilterID.Value == LastFocusID)  							return true;  					}  					if (gf != null) {  						LastFocusType = 1;  						LastFocusID = gf.GroupFilterID.Value;  					}  					GroupFilter_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  					AnimeGroupVM obj = m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  					if (LastFocusType == 2) {  						if (obj != null && obj.AnimeGroupID == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 2;  						LastFocusID = obj.AnimeGroupID;  					}  					Group_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  					AnimeSeriesVM obj = m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  					if (LastFocusType == 3) {  						if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 3;  						LastFocusID = obj.AnimeSeriesID.Value;  					}  					Series_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeTypeVM)) {  					AnimeEpisodeTypeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  					if (LastFocusType == 4) {  						if (obj != null && (int)obj.EpisodeType == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 4;  						LastFocusID = (int)obj.EpisodeType;  					}  					EpisodeType_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  					AnimeEpisodeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  					if (LastFocusType == 5) {  						if (obj != null && obj.AnimeEpisodeID == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 5;  						LastFocusID = obj.AnimeEpisodeID;  					}  					Episode_OnItemSelected (m_Facade.SelectedListItem);  				}  			}  		}  	}  	EvaluateVisibility ();  	return true;  case GUIMessage.MessageType.GUI_MSG_PLAYBACK_ENDED:  case GUIMessage.MessageType.GUI_MSG_PLAYBACK_STOPPED:  	{  		//-- Need to reload the GUI to display changes   		//-- if episode is classified as watched  		LoadFacade ();  	}  	return true;  default:  	return base.OnMessage (message);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: switch (message.Message) {  case GUIMessage.MessageType.GUI_MSG_ITEM_FOCUS_CHANGED:  	{  		int iControl = message.SenderControlId;  		if (iControl == (int)m_Facade.GetID) {  			if (m_Facade.SelectedListItem != null && m_Facade.SelectedListItem.TVTag != null) {  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(GroupFilterVM)) {  					GroupFilterVM gf = m_Facade.SelectedListItem.TVTag as GroupFilterVM;  					if (LastFocusType == 1) {  						if (gf != null && gf.GroupFilterID.Value == LastFocusID)  							return true;  					}  					if (gf != null) {  						LastFocusType = 1;  						LastFocusID = gf.GroupFilterID.Value;  					}  					GroupFilter_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  					AnimeGroupVM obj = m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  					if (LastFocusType == 2) {  						if (obj != null && obj.AnimeGroupID == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 2;  						LastFocusID = obj.AnimeGroupID;  					}  					Group_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  					AnimeSeriesVM obj = m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  					if (LastFocusType == 3) {  						if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 3;  						LastFocusID = obj.AnimeSeriesID.Value;  					}  					Series_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeTypeVM)) {  					AnimeEpisodeTypeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  					if (LastFocusType == 4) {  						if (obj != null && (int)obj.EpisodeType == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 4;  						LastFocusID = (int)obj.EpisodeType;  					}  					EpisodeType_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  					AnimeEpisodeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  					if (LastFocusType == 5) {  						if (obj != null && obj.AnimeEpisodeID == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 5;  						LastFocusID = obj.AnimeEpisodeID;  					}  					Episode_OnItemSelected (m_Facade.SelectedListItem);  				}  			}  		}  	}  	EvaluateVisibility ();  	return true;  case GUIMessage.MessageType.GUI_MSG_PLAYBACK_ENDED:  case GUIMessage.MessageType.GUI_MSG_PLAYBACK_STOPPED:  	{  		//-- Need to reload the GUI to display changes   		//-- if episode is classified as watched  		LoadFacade ();  	}  	return true;  default:  	return base.OnMessage (message);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: switch (message.Message) {  case GUIMessage.MessageType.GUI_MSG_ITEM_FOCUS_CHANGED:  	{  		int iControl = message.SenderControlId;  		if (iControl == (int)m_Facade.GetID) {  			if (m_Facade.SelectedListItem != null && m_Facade.SelectedListItem.TVTag != null) {  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(GroupFilterVM)) {  					GroupFilterVM gf = m_Facade.SelectedListItem.TVTag as GroupFilterVM;  					if (LastFocusType == 1) {  						if (gf != null && gf.GroupFilterID.Value == LastFocusID)  							return true;  					}  					if (gf != null) {  						LastFocusType = 1;  						LastFocusID = gf.GroupFilterID.Value;  					}  					GroupFilter_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  					AnimeGroupVM obj = m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  					if (LastFocusType == 2) {  						if (obj != null && obj.AnimeGroupID == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 2;  						LastFocusID = obj.AnimeGroupID;  					}  					Group_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  					AnimeSeriesVM obj = m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  					if (LastFocusType == 3) {  						if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 3;  						LastFocusID = obj.AnimeSeriesID.Value;  					}  					Series_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeTypeVM)) {  					AnimeEpisodeTypeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  					if (LastFocusType == 4) {  						if (obj != null && (int)obj.EpisodeType == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 4;  						LastFocusID = (int)obj.EpisodeType;  					}  					EpisodeType_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  					AnimeEpisodeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  					if (LastFocusType == 5) {  						if (obj != null && obj.AnimeEpisodeID == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 5;  						LastFocusID = obj.AnimeEpisodeID;  					}  					Episode_OnItemSelected (m_Facade.SelectedListItem);  				}  			}  		}  	}  	EvaluateVisibility ();  	return true;  case GUIMessage.MessageType.GUI_MSG_PLAYBACK_ENDED:  case GUIMessage.MessageType.GUI_MSG_PLAYBACK_STOPPED:  	{  		//-- Need to reload the GUI to display changes   		//-- if episode is classified as watched  		LoadFacade ();  	}  	return true;  default:  	return base.OnMessage (message);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: switch (message.Message) {  case GUIMessage.MessageType.GUI_MSG_ITEM_FOCUS_CHANGED:  	{  		int iControl = message.SenderControlId;  		if (iControl == (int)m_Facade.GetID) {  			if (m_Facade.SelectedListItem != null && m_Facade.SelectedListItem.TVTag != null) {  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(GroupFilterVM)) {  					GroupFilterVM gf = m_Facade.SelectedListItem.TVTag as GroupFilterVM;  					if (LastFocusType == 1) {  						if (gf != null && gf.GroupFilterID.Value == LastFocusID)  							return true;  					}  					if (gf != null) {  						LastFocusType = 1;  						LastFocusID = gf.GroupFilterID.Value;  					}  					GroupFilter_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  					AnimeGroupVM obj = m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  					if (LastFocusType == 2) {  						if (obj != null && obj.AnimeGroupID == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 2;  						LastFocusID = obj.AnimeGroupID;  					}  					Group_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  					AnimeSeriesVM obj = m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  					if (LastFocusType == 3) {  						if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 3;  						LastFocusID = obj.AnimeSeriesID.Value;  					}  					Series_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeTypeVM)) {  					AnimeEpisodeTypeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  					if (LastFocusType == 4) {  						if (obj != null && (int)obj.EpisodeType == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 4;  						LastFocusID = (int)obj.EpisodeType;  					}  					EpisodeType_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  					AnimeEpisodeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  					if (LastFocusType == 5) {  						if (obj != null && obj.AnimeEpisodeID == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 5;  						LastFocusID = obj.AnimeEpisodeID;  					}  					Episode_OnItemSelected (m_Facade.SelectedListItem);  				}  			}  		}  	}  	EvaluateVisibility ();  	return true;  case GUIMessage.MessageType.GUI_MSG_PLAYBACK_ENDED:  case GUIMessage.MessageType.GUI_MSG_PLAYBACK_STOPPED:  	{  		//-- Need to reload the GUI to display changes   		//-- if episode is classified as watched  		LoadFacade ();  	}  	return true;  default:  	return base.OnMessage (message);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: switch (message.Message) {  case GUIMessage.MessageType.GUI_MSG_ITEM_FOCUS_CHANGED:  	{  		int iControl = message.SenderControlId;  		if (iControl == (int)m_Facade.GetID) {  			if (m_Facade.SelectedListItem != null && m_Facade.SelectedListItem.TVTag != null) {  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(GroupFilterVM)) {  					GroupFilterVM gf = m_Facade.SelectedListItem.TVTag as GroupFilterVM;  					if (LastFocusType == 1) {  						if (gf != null && gf.GroupFilterID.Value == LastFocusID)  							return true;  					}  					if (gf != null) {  						LastFocusType = 1;  						LastFocusID = gf.GroupFilterID.Value;  					}  					GroupFilter_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  					AnimeGroupVM obj = m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  					if (LastFocusType == 2) {  						if (obj != null && obj.AnimeGroupID == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 2;  						LastFocusID = obj.AnimeGroupID;  					}  					Group_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  					AnimeSeriesVM obj = m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  					if (LastFocusType == 3) {  						if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 3;  						LastFocusID = obj.AnimeSeriesID.Value;  					}  					Series_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeTypeVM)) {  					AnimeEpisodeTypeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  					if (LastFocusType == 4) {  						if (obj != null && (int)obj.EpisodeType == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 4;  						LastFocusID = (int)obj.EpisodeType;  					}  					EpisodeType_OnItemSelected (m_Facade.SelectedListItem);  				}  				if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  					AnimeEpisodeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  					if (LastFocusType == 5) {  						if (obj != null && obj.AnimeEpisodeID == LastFocusID)  							return true;  					}  					if (obj != null) {  						LastFocusType = 5;  						LastFocusID = obj.AnimeEpisodeID;  					}  					Episode_OnItemSelected (m_Facade.SelectedListItem);  				}  			}  		}  	}  	EvaluateVisibility ();  	return true;  case GUIMessage.MessageType.GUI_MSG_PLAYBACK_ENDED:  case GUIMessage.MessageType.GUI_MSG_PLAYBACK_STOPPED:  	{  		//-- Need to reload the GUI to display changes   		//-- if episode is classified as watched  		LoadFacade ();  	}  	return true;  default:  	return base.OnMessage (message);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (iControl == (int)m_Facade.GetID) {  	if (m_Facade.SelectedListItem != null && m_Facade.SelectedListItem.TVTag != null) {  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(GroupFilterVM)) {  			GroupFilterVM gf = m_Facade.SelectedListItem.TVTag as GroupFilterVM;  			if (LastFocusType == 1) {  				if (gf != null && gf.GroupFilterID.Value == LastFocusID)  					return true;  			}  			if (gf != null) {  				LastFocusType = 1;  				LastFocusID = gf.GroupFilterID.Value;  			}  			GroupFilter_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  			AnimeGroupVM obj = m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  			if (LastFocusType == 2) {  				if (obj != null && obj.AnimeGroupID == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 2;  				LastFocusID = obj.AnimeGroupID;  			}  			Group_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  			AnimeSeriesVM obj = m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  			if (LastFocusType == 3) {  				if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 3;  				LastFocusID = obj.AnimeSeriesID.Value;  			}  			Series_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeTypeVM)) {  			AnimeEpisodeTypeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  			if (LastFocusType == 4) {  				if (obj != null && (int)obj.EpisodeType == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 4;  				LastFocusID = (int)obj.EpisodeType;  			}  			EpisodeType_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  			AnimeEpisodeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  			if (LastFocusType == 5) {  				if (obj != null && obj.AnimeEpisodeID == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 5;  				LastFocusID = obj.AnimeEpisodeID;  			}  			Episode_OnItemSelected (m_Facade.SelectedListItem);  		}  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (iControl == (int)m_Facade.GetID) {  	if (m_Facade.SelectedListItem != null && m_Facade.SelectedListItem.TVTag != null) {  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(GroupFilterVM)) {  			GroupFilterVM gf = m_Facade.SelectedListItem.TVTag as GroupFilterVM;  			if (LastFocusType == 1) {  				if (gf != null && gf.GroupFilterID.Value == LastFocusID)  					return true;  			}  			if (gf != null) {  				LastFocusType = 1;  				LastFocusID = gf.GroupFilterID.Value;  			}  			GroupFilter_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  			AnimeGroupVM obj = m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  			if (LastFocusType == 2) {  				if (obj != null && obj.AnimeGroupID == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 2;  				LastFocusID = obj.AnimeGroupID;  			}  			Group_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  			AnimeSeriesVM obj = m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  			if (LastFocusType == 3) {  				if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 3;  				LastFocusID = obj.AnimeSeriesID.Value;  			}  			Series_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeTypeVM)) {  			AnimeEpisodeTypeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  			if (LastFocusType == 4) {  				if (obj != null && (int)obj.EpisodeType == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 4;  				LastFocusID = (int)obj.EpisodeType;  			}  			EpisodeType_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  			AnimeEpisodeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  			if (LastFocusType == 5) {  				if (obj != null && obj.AnimeEpisodeID == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 5;  				LastFocusID = obj.AnimeEpisodeID;  			}  			Episode_OnItemSelected (m_Facade.SelectedListItem);  		}  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (iControl == (int)m_Facade.GetID) {  	if (m_Facade.SelectedListItem != null && m_Facade.SelectedListItem.TVTag != null) {  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(GroupFilterVM)) {  			GroupFilterVM gf = m_Facade.SelectedListItem.TVTag as GroupFilterVM;  			if (LastFocusType == 1) {  				if (gf != null && gf.GroupFilterID.Value == LastFocusID)  					return true;  			}  			if (gf != null) {  				LastFocusType = 1;  				LastFocusID = gf.GroupFilterID.Value;  			}  			GroupFilter_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  			AnimeGroupVM obj = m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  			if (LastFocusType == 2) {  				if (obj != null && obj.AnimeGroupID == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 2;  				LastFocusID = obj.AnimeGroupID;  			}  			Group_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  			AnimeSeriesVM obj = m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  			if (LastFocusType == 3) {  				if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 3;  				LastFocusID = obj.AnimeSeriesID.Value;  			}  			Series_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeTypeVM)) {  			AnimeEpisodeTypeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  			if (LastFocusType == 4) {  				if (obj != null && (int)obj.EpisodeType == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 4;  				LastFocusID = (int)obj.EpisodeType;  			}  			EpisodeType_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  			AnimeEpisodeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  			if (LastFocusType == 5) {  				if (obj != null && obj.AnimeEpisodeID == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 5;  				LastFocusID = obj.AnimeEpisodeID;  			}  			Episode_OnItemSelected (m_Facade.SelectedListItem);  		}  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (iControl == (int)m_Facade.GetID) {  	if (m_Facade.SelectedListItem != null && m_Facade.SelectedListItem.TVTag != null) {  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(GroupFilterVM)) {  			GroupFilterVM gf = m_Facade.SelectedListItem.TVTag as GroupFilterVM;  			if (LastFocusType == 1) {  				if (gf != null && gf.GroupFilterID.Value == LastFocusID)  					return true;  			}  			if (gf != null) {  				LastFocusType = 1;  				LastFocusID = gf.GroupFilterID.Value;  			}  			GroupFilter_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  			AnimeGroupVM obj = m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  			if (LastFocusType == 2) {  				if (obj != null && obj.AnimeGroupID == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 2;  				LastFocusID = obj.AnimeGroupID;  			}  			Group_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  			AnimeSeriesVM obj = m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  			if (LastFocusType == 3) {  				if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 3;  				LastFocusID = obj.AnimeSeriesID.Value;  			}  			Series_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeTypeVM)) {  			AnimeEpisodeTypeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  			if (LastFocusType == 4) {  				if (obj != null && (int)obj.EpisodeType == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 4;  				LastFocusID = (int)obj.EpisodeType;  			}  			EpisodeType_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  			AnimeEpisodeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  			if (LastFocusType == 5) {  				if (obj != null && obj.AnimeEpisodeID == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 5;  				LastFocusID = obj.AnimeEpisodeID;  			}  			Episode_OnItemSelected (m_Facade.SelectedListItem);  		}  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (iControl == (int)m_Facade.GetID) {  	if (m_Facade.SelectedListItem != null && m_Facade.SelectedListItem.TVTag != null) {  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(GroupFilterVM)) {  			GroupFilterVM gf = m_Facade.SelectedListItem.TVTag as GroupFilterVM;  			if (LastFocusType == 1) {  				if (gf != null && gf.GroupFilterID.Value == LastFocusID)  					return true;  			}  			if (gf != null) {  				LastFocusType = 1;  				LastFocusID = gf.GroupFilterID.Value;  			}  			GroupFilter_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  			AnimeGroupVM obj = m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  			if (LastFocusType == 2) {  				if (obj != null && obj.AnimeGroupID == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 2;  				LastFocusID = obj.AnimeGroupID;  			}  			Group_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  			AnimeSeriesVM obj = m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  			if (LastFocusType == 3) {  				if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 3;  				LastFocusID = obj.AnimeSeriesID.Value;  			}  			Series_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeTypeVM)) {  			AnimeEpisodeTypeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  			if (LastFocusType == 4) {  				if (obj != null && (int)obj.EpisodeType == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 4;  				LastFocusID = (int)obj.EpisodeType;  			}  			EpisodeType_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  			AnimeEpisodeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  			if (LastFocusType == 5) {  				if (obj != null && obj.AnimeEpisodeID == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 5;  				LastFocusID = obj.AnimeEpisodeID;  			}  			Episode_OnItemSelected (m_Facade.SelectedListItem);  		}  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (iControl == (int)m_Facade.GetID) {  	if (m_Facade.SelectedListItem != null && m_Facade.SelectedListItem.TVTag != null) {  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(GroupFilterVM)) {  			GroupFilterVM gf = m_Facade.SelectedListItem.TVTag as GroupFilterVM;  			if (LastFocusType == 1) {  				if (gf != null && gf.GroupFilterID.Value == LastFocusID)  					return true;  			}  			if (gf != null) {  				LastFocusType = 1;  				LastFocusID = gf.GroupFilterID.Value;  			}  			GroupFilter_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  			AnimeGroupVM obj = m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  			if (LastFocusType == 2) {  				if (obj != null && obj.AnimeGroupID == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 2;  				LastFocusID = obj.AnimeGroupID;  			}  			Group_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  			AnimeSeriesVM obj = m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  			if (LastFocusType == 3) {  				if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 3;  				LastFocusID = obj.AnimeSeriesID.Value;  			}  			Series_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeTypeVM)) {  			AnimeEpisodeTypeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  			if (LastFocusType == 4) {  				if (obj != null && (int)obj.EpisodeType == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 4;  				LastFocusID = (int)obj.EpisodeType;  			}  			EpisodeType_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  			AnimeEpisodeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  			if (LastFocusType == 5) {  				if (obj != null && obj.AnimeEpisodeID == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 5;  				LastFocusID = obj.AnimeEpisodeID;  			}  			Episode_OnItemSelected (m_Facade.SelectedListItem);  		}  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (iControl == (int)m_Facade.GetID) {  	if (m_Facade.SelectedListItem != null && m_Facade.SelectedListItem.TVTag != null) {  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(GroupFilterVM)) {  			GroupFilterVM gf = m_Facade.SelectedListItem.TVTag as GroupFilterVM;  			if (LastFocusType == 1) {  				if (gf != null && gf.GroupFilterID.Value == LastFocusID)  					return true;  			}  			if (gf != null) {  				LastFocusType = 1;  				LastFocusID = gf.GroupFilterID.Value;  			}  			GroupFilter_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  			AnimeGroupVM obj = m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  			if (LastFocusType == 2) {  				if (obj != null && obj.AnimeGroupID == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 2;  				LastFocusID = obj.AnimeGroupID;  			}  			Group_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  			AnimeSeriesVM obj = m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  			if (LastFocusType == 3) {  				if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 3;  				LastFocusID = obj.AnimeSeriesID.Value;  			}  			Series_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeTypeVM)) {  			AnimeEpisodeTypeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  			if (LastFocusType == 4) {  				if (obj != null && (int)obj.EpisodeType == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 4;  				LastFocusID = (int)obj.EpisodeType;  			}  			EpisodeType_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  			AnimeEpisodeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  			if (LastFocusType == 5) {  				if (obj != null && obj.AnimeEpisodeID == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 5;  				LastFocusID = obj.AnimeEpisodeID;  			}  			Episode_OnItemSelected (m_Facade.SelectedListItem);  		}  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (iControl == (int)m_Facade.GetID) {  	if (m_Facade.SelectedListItem != null && m_Facade.SelectedListItem.TVTag != null) {  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(GroupFilterVM)) {  			GroupFilterVM gf = m_Facade.SelectedListItem.TVTag as GroupFilterVM;  			if (LastFocusType == 1) {  				if (gf != null && gf.GroupFilterID.Value == LastFocusID)  					return true;  			}  			if (gf != null) {  				LastFocusType = 1;  				LastFocusID = gf.GroupFilterID.Value;  			}  			GroupFilter_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  			AnimeGroupVM obj = m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  			if (LastFocusType == 2) {  				if (obj != null && obj.AnimeGroupID == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 2;  				LastFocusID = obj.AnimeGroupID;  			}  			Group_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  			AnimeSeriesVM obj = m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  			if (LastFocusType == 3) {  				if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 3;  				LastFocusID = obj.AnimeSeriesID.Value;  			}  			Series_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeTypeVM)) {  			AnimeEpisodeTypeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  			if (LastFocusType == 4) {  				if (obj != null && (int)obj.EpisodeType == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 4;  				LastFocusID = (int)obj.EpisodeType;  			}  			EpisodeType_OnItemSelected (m_Facade.SelectedListItem);  		}  		if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  			AnimeEpisodeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  			if (LastFocusType == 5) {  				if (obj != null && obj.AnimeEpisodeID == LastFocusID)  					return true;  			}  			if (obj != null) {  				LastFocusType = 5;  				LastFocusID = obj.AnimeEpisodeID;  			}  			Episode_OnItemSelected (m_Facade.SelectedListItem);  		}  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (m_Facade.SelectedListItem != null && m_Facade.SelectedListItem.TVTag != null) {  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(GroupFilterVM)) {  		GroupFilterVM gf = m_Facade.SelectedListItem.TVTag as GroupFilterVM;  		if (LastFocusType == 1) {  			if (gf != null && gf.GroupFilterID.Value == LastFocusID)  				return true;  		}  		if (gf != null) {  			LastFocusType = 1;  			LastFocusID = gf.GroupFilterID.Value;  		}  		GroupFilter_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  		AnimeGroupVM obj = m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  		if (LastFocusType == 2) {  			if (obj != null && obj.AnimeGroupID == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 2;  			LastFocusID = obj.AnimeGroupID;  		}  		Group_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  		AnimeSeriesVM obj = m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  		if (LastFocusType == 3) {  			if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 3;  			LastFocusID = obj.AnimeSeriesID.Value;  		}  		Series_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeTypeVM)) {  		AnimeEpisodeTypeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  		if (LastFocusType == 4) {  			if (obj != null && (int)obj.EpisodeType == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 4;  			LastFocusID = (int)obj.EpisodeType;  		}  		EpisodeType_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  		AnimeEpisodeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  		if (LastFocusType == 5) {  			if (obj != null && obj.AnimeEpisodeID == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 5;  			LastFocusID = obj.AnimeEpisodeID;  		}  		Episode_OnItemSelected (m_Facade.SelectedListItem);  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (m_Facade.SelectedListItem != null && m_Facade.SelectedListItem.TVTag != null) {  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(GroupFilterVM)) {  		GroupFilterVM gf = m_Facade.SelectedListItem.TVTag as GroupFilterVM;  		if (LastFocusType == 1) {  			if (gf != null && gf.GroupFilterID.Value == LastFocusID)  				return true;  		}  		if (gf != null) {  			LastFocusType = 1;  			LastFocusID = gf.GroupFilterID.Value;  		}  		GroupFilter_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  		AnimeGroupVM obj = m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  		if (LastFocusType == 2) {  			if (obj != null && obj.AnimeGroupID == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 2;  			LastFocusID = obj.AnimeGroupID;  		}  		Group_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  		AnimeSeriesVM obj = m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  		if (LastFocusType == 3) {  			if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 3;  			LastFocusID = obj.AnimeSeriesID.Value;  		}  		Series_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeTypeVM)) {  		AnimeEpisodeTypeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  		if (LastFocusType == 4) {  			if (obj != null && (int)obj.EpisodeType == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 4;  			LastFocusID = (int)obj.EpisodeType;  		}  		EpisodeType_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  		AnimeEpisodeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  		if (LastFocusType == 5) {  			if (obj != null && obj.AnimeEpisodeID == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 5;  			LastFocusID = obj.AnimeEpisodeID;  		}  		Episode_OnItemSelected (m_Facade.SelectedListItem);  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (m_Facade.SelectedListItem != null && m_Facade.SelectedListItem.TVTag != null) {  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(GroupFilterVM)) {  		GroupFilterVM gf = m_Facade.SelectedListItem.TVTag as GroupFilterVM;  		if (LastFocusType == 1) {  			if (gf != null && gf.GroupFilterID.Value == LastFocusID)  				return true;  		}  		if (gf != null) {  			LastFocusType = 1;  			LastFocusID = gf.GroupFilterID.Value;  		}  		GroupFilter_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  		AnimeGroupVM obj = m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  		if (LastFocusType == 2) {  			if (obj != null && obj.AnimeGroupID == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 2;  			LastFocusID = obj.AnimeGroupID;  		}  		Group_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  		AnimeSeriesVM obj = m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  		if (LastFocusType == 3) {  			if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 3;  			LastFocusID = obj.AnimeSeriesID.Value;  		}  		Series_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeTypeVM)) {  		AnimeEpisodeTypeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  		if (LastFocusType == 4) {  			if (obj != null && (int)obj.EpisodeType == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 4;  			LastFocusID = (int)obj.EpisodeType;  		}  		EpisodeType_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  		AnimeEpisodeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  		if (LastFocusType == 5) {  			if (obj != null && obj.AnimeEpisodeID == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 5;  			LastFocusID = obj.AnimeEpisodeID;  		}  		Episode_OnItemSelected (m_Facade.SelectedListItem);  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (m_Facade.SelectedListItem != null && m_Facade.SelectedListItem.TVTag != null) {  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(GroupFilterVM)) {  		GroupFilterVM gf = m_Facade.SelectedListItem.TVTag as GroupFilterVM;  		if (LastFocusType == 1) {  			if (gf != null && gf.GroupFilterID.Value == LastFocusID)  				return true;  		}  		if (gf != null) {  			LastFocusType = 1;  			LastFocusID = gf.GroupFilterID.Value;  		}  		GroupFilter_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  		AnimeGroupVM obj = m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  		if (LastFocusType == 2) {  			if (obj != null && obj.AnimeGroupID == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 2;  			LastFocusID = obj.AnimeGroupID;  		}  		Group_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  		AnimeSeriesVM obj = m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  		if (LastFocusType == 3) {  			if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 3;  			LastFocusID = obj.AnimeSeriesID.Value;  		}  		Series_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeTypeVM)) {  		AnimeEpisodeTypeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  		if (LastFocusType == 4) {  			if (obj != null && (int)obj.EpisodeType == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 4;  			LastFocusID = (int)obj.EpisodeType;  		}  		EpisodeType_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  		AnimeEpisodeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  		if (LastFocusType == 5) {  			if (obj != null && obj.AnimeEpisodeID == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 5;  			LastFocusID = obj.AnimeEpisodeID;  		}  		Episode_OnItemSelected (m_Facade.SelectedListItem);  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (m_Facade.SelectedListItem != null && m_Facade.SelectedListItem.TVTag != null) {  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(GroupFilterVM)) {  		GroupFilterVM gf = m_Facade.SelectedListItem.TVTag as GroupFilterVM;  		if (LastFocusType == 1) {  			if (gf != null && gf.GroupFilterID.Value == LastFocusID)  				return true;  		}  		if (gf != null) {  			LastFocusType = 1;  			LastFocusID = gf.GroupFilterID.Value;  		}  		GroupFilter_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  		AnimeGroupVM obj = m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  		if (LastFocusType == 2) {  			if (obj != null && obj.AnimeGroupID == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 2;  			LastFocusID = obj.AnimeGroupID;  		}  		Group_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  		AnimeSeriesVM obj = m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  		if (LastFocusType == 3) {  			if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 3;  			LastFocusID = obj.AnimeSeriesID.Value;  		}  		Series_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeTypeVM)) {  		AnimeEpisodeTypeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  		if (LastFocusType == 4) {  			if (obj != null && (int)obj.EpisodeType == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 4;  			LastFocusID = (int)obj.EpisodeType;  		}  		EpisodeType_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  		AnimeEpisodeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  		if (LastFocusType == 5) {  			if (obj != null && obj.AnimeEpisodeID == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 5;  			LastFocusID = obj.AnimeEpisodeID;  		}  		Episode_OnItemSelected (m_Facade.SelectedListItem);  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (m_Facade.SelectedListItem != null && m_Facade.SelectedListItem.TVTag != null) {  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(GroupFilterVM)) {  		GroupFilterVM gf = m_Facade.SelectedListItem.TVTag as GroupFilterVM;  		if (LastFocusType == 1) {  			if (gf != null && gf.GroupFilterID.Value == LastFocusID)  				return true;  		}  		if (gf != null) {  			LastFocusType = 1;  			LastFocusID = gf.GroupFilterID.Value;  		}  		GroupFilter_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  		AnimeGroupVM obj = m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  		if (LastFocusType == 2) {  			if (obj != null && obj.AnimeGroupID == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 2;  			LastFocusID = obj.AnimeGroupID;  		}  		Group_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  		AnimeSeriesVM obj = m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  		if (LastFocusType == 3) {  			if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 3;  			LastFocusID = obj.AnimeSeriesID.Value;  		}  		Series_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeTypeVM)) {  		AnimeEpisodeTypeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  		if (LastFocusType == 4) {  			if (obj != null && (int)obj.EpisodeType == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 4;  			LastFocusID = (int)obj.EpisodeType;  		}  		EpisodeType_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  		AnimeEpisodeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  		if (LastFocusType == 5) {  			if (obj != null && obj.AnimeEpisodeID == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 5;  			LastFocusID = obj.AnimeEpisodeID;  		}  		Episode_OnItemSelected (m_Facade.SelectedListItem);  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (m_Facade.SelectedListItem != null && m_Facade.SelectedListItem.TVTag != null) {  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(GroupFilterVM)) {  		GroupFilterVM gf = m_Facade.SelectedListItem.TVTag as GroupFilterVM;  		if (LastFocusType == 1) {  			if (gf != null && gf.GroupFilterID.Value == LastFocusID)  				return true;  		}  		if (gf != null) {  			LastFocusType = 1;  			LastFocusID = gf.GroupFilterID.Value;  		}  		GroupFilter_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  		AnimeGroupVM obj = m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  		if (LastFocusType == 2) {  			if (obj != null && obj.AnimeGroupID == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 2;  			LastFocusID = obj.AnimeGroupID;  		}  		Group_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  		AnimeSeriesVM obj = m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  		if (LastFocusType == 3) {  			if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 3;  			LastFocusID = obj.AnimeSeriesID.Value;  		}  		Series_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeTypeVM)) {  		AnimeEpisodeTypeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  		if (LastFocusType == 4) {  			if (obj != null && (int)obj.EpisodeType == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 4;  			LastFocusID = (int)obj.EpisodeType;  		}  		EpisodeType_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  		AnimeEpisodeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  		if (LastFocusType == 5) {  			if (obj != null && obj.AnimeEpisodeID == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 5;  			LastFocusID = obj.AnimeEpisodeID;  		}  		Episode_OnItemSelected (m_Facade.SelectedListItem);  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (m_Facade.SelectedListItem != null && m_Facade.SelectedListItem.TVTag != null) {  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(GroupFilterVM)) {  		GroupFilterVM gf = m_Facade.SelectedListItem.TVTag as GroupFilterVM;  		if (LastFocusType == 1) {  			if (gf != null && gf.GroupFilterID.Value == LastFocusID)  				return true;  		}  		if (gf != null) {  			LastFocusType = 1;  			LastFocusID = gf.GroupFilterID.Value;  		}  		GroupFilter_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  		AnimeGroupVM obj = m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  		if (LastFocusType == 2) {  			if (obj != null && obj.AnimeGroupID == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 2;  			LastFocusID = obj.AnimeGroupID;  		}  		Group_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  		AnimeSeriesVM obj = m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  		if (LastFocusType == 3) {  			if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 3;  			LastFocusID = obj.AnimeSeriesID.Value;  		}  		Series_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeTypeVM)) {  		AnimeEpisodeTypeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  		if (LastFocusType == 4) {  			if (obj != null && (int)obj.EpisodeType == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 4;  			LastFocusID = (int)obj.EpisodeType;  		}  		EpisodeType_OnItemSelected (m_Facade.SelectedListItem);  	}  	if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  		AnimeEpisodeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  		if (LastFocusType == 5) {  			if (obj != null && obj.AnimeEpisodeID == LastFocusID)  				return true;  		}  		if (obj != null) {  			LastFocusType = 5;  			LastFocusID = obj.AnimeEpisodeID;  		}  		Episode_OnItemSelected (m_Facade.SelectedListItem);  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  	AnimeGroupVM obj = m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  	if (LastFocusType == 2) {  		if (obj != null && obj.AnimeGroupID == LastFocusID)  			return true;  	}  	if (obj != null) {  		LastFocusType = 2;  		LastFocusID = obj.AnimeGroupID;  	}  	Group_OnItemSelected (m_Facade.SelectedListItem);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  	AnimeGroupVM obj = m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  	if (LastFocusType == 2) {  		if (obj != null && obj.AnimeGroupID == LastFocusID)  			return true;  	}  	if (obj != null) {  		LastFocusType = 2;  		LastFocusID = obj.AnimeGroupID;  	}  	Group_OnItemSelected (m_Facade.SelectedListItem);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (LastFocusType == 2) {  	if (obj != null && obj.AnimeGroupID == LastFocusID)  		return true;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (obj != null) {  	LastFocusType = 2;  	LastFocusID = obj.AnimeGroupID;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: LastFocusType = 2;  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  	AnimeSeriesVM obj = m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  	if (LastFocusType == 3) {  		if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  			return true;  	}  	if (obj != null) {  		LastFocusType = 3;  		LastFocusID = obj.AnimeSeriesID.Value;  	}  	Series_OnItemSelected (m_Facade.SelectedListItem);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  	AnimeSeriesVM obj = m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  	if (LastFocusType == 3) {  		if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  			return true;  	}  	if (obj != null) {  		LastFocusType = 3;  		LastFocusID = obj.AnimeSeriesID.Value;  	}  	Series_OnItemSelected (m_Facade.SelectedListItem);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (LastFocusType == 3) {  	if (obj != null && obj.AnimeSeriesID.Value == LastFocusID)  		return true;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (obj != null) {  	LastFocusType = 3;  	LastFocusID = obj.AnimeSeriesID.Value;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: LastFocusType = 3;  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeTypeVM)) {  	AnimeEpisodeTypeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  	if (LastFocusType == 4) {  		if (obj != null && (int)obj.EpisodeType == LastFocusID)  			return true;  	}  	if (obj != null) {  		LastFocusType = 4;  		LastFocusID = (int)obj.EpisodeType;  	}  	EpisodeType_OnItemSelected (m_Facade.SelectedListItem);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeTypeVM)) {  	AnimeEpisodeTypeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  	if (LastFocusType == 4) {  		if (obj != null && (int)obj.EpisodeType == LastFocusID)  			return true;  	}  	if (obj != null) {  		LastFocusType = 4;  		LastFocusID = (int)obj.EpisodeType;  	}  	EpisodeType_OnItemSelected (m_Facade.SelectedListItem);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (LastFocusType == 4) {  	if (obj != null && (int)obj.EpisodeType == LastFocusID)  		return true;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (obj != null) {  	LastFocusType = 4;  	LastFocusID = (int)obj.EpisodeType;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: LastFocusType = 4;  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  	AnimeEpisodeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  	if (LastFocusType == 5) {  		if (obj != null && obj.AnimeEpisodeID == LastFocusID)  			return true;  	}  	if (obj != null) {  		LastFocusType = 5;  		LastFocusID = obj.AnimeEpisodeID;  	}  	Episode_OnItemSelected (m_Facade.SelectedListItem);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  	AnimeEpisodeVM obj = m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  	if (LastFocusType == 5) {  		if (obj != null && obj.AnimeEpisodeID == LastFocusID)  			return true;  	}  	if (obj != null) {  		LastFocusType = 5;  		LastFocusID = obj.AnimeEpisodeID;  	}  	Episode_OnItemSelected (m_Facade.SelectedListItem);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (LastFocusType == 5) {  	if (obj != null && obj.AnimeEpisodeID == LastFocusID)  		return true;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: if (obj != null) {  	LastFocusType = 5;  	LastFocusID = obj.AnimeEpisodeID;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnMessage,The following statement contains a magic number: LastFocusType = 5;  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,Group_OnItemSelectedDisplay,The following statement contains a magic number: if (totalVotes == 0)  	AniDBRating = 0;  else  	AniDBRating = totalRating / (decimal)totalVotes / (decimal)100;  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,Group_OnItemSelectedDisplay,The following statement contains a magic number: AniDBRating = totalRating / (decimal)totalVotes / (decimal)100;  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnShowContextMenu,The following statement contains a magic number: try {  	hook.IsEnabled = false;  	switch (listLevel) {  	case Listlevel.GroupFilter:  		ShowContextMenuGroupFilter ("");  		break;  	case Listlevel.Group:  		ShowContextMenuGroup ("");  		break;  	case Listlevel.Series:  		ShowContextMenuSeries ("");  		break;  	case Listlevel.EpisodeTypes:  		break;  	case Listlevel.Episode:  		ShowContextMenuEpisode ("");  		break;  	}  	Thread.Sleep (100);  	//make sure key-up's from the context menu aren't cought by the hook  	if (hook != null)  		//hook may have fallen out of scope when using contect menu togo to another window.  		hook.IsEnabled = true;  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write ("Error in menu: {0}"' ex);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnShowContextMenu,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTheTvDB,The following statement contains a magic number: if (TVDBSeriesSearchResults.Count > 0) {  	GUIDialogMenu dlg = (GUIDialogMenu)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	if (dlg == null)  		return true;  	//keep showing the dialog until the user closes it  	int selectedLabel = 0;  	while (true) {  		dlg.Reset ();  		dlg.SetHeading ("TvDB Search Results");  		if (previousMenu != string.Empty)  			dlg.Add ("<<< " + previousMenu);  		foreach (TVDBSeriesSearchResultVM res in TVDBSeriesSearchResults) {  			string disp = string.Format ("{0} ({1}) / {2}"' res.SeriesName' res.Language' res.Id);  			dlg.Add (disp);  		}  		dlg.SelectedLabel = selectedLabel;  		dlg.DoModal (GUIWindowManager.ActiveWindow);  		selectedLabel = dlg.SelectedLabel;  		int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  		if (selection == 0)  			return true;  		// previous menu  		if (selection > 0 && selection <= TVDBSeriesSearchResults.Count) {  			TVDBSeriesSearchResultVM res = TVDBSeriesSearchResults [selection - 1];  			LinkAniDBToTVDB (ser' aniDBID' enEpisodeType.Episode' 1' res.SeriesID' 1' 1);  			return false;  		}  		return true;  	}  }  else {  	GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  	if (null != dlgOK) {  		dlgOK.SetHeading ("Search Results");  		dlgOK.SetLine (1' string.Empty);  		dlgOK.SetLine (2' "No results found");  		dlgOK.DoModal (GUIWindowManager.ActiveWindow);  	}  	return true;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTheTvDB,The following statement contains a magic number: if (null != dlgOK) {  	dlgOK.SetHeading ("Search Results");  	dlgOK.SetLine (1' string.Empty);  	dlgOK.SetLine (2' "No results found");  	dlgOK.DoModal (GUIWindowManager.ActiveWindow);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTheTvDB,The following statement contains a magic number: dlgOK.SetLine (2' "No results found");  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTrakt,The following statement contains a magic number: if (TraktSeriesSearchResults.Count > 0) {  	GUIDialogMenu dlg = (GUIDialogMenu)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	if (dlg == null)  		return true;  	//keep showing the dialog until the user closes it  	int selectedLabel = 0;  	while (true) {  		dlg.Reset ();  		dlg.SetHeading ("Trakt Search Results");  		if (previousMenu != string.Empty)  			dlg.Add ("<<< " + previousMenu);  		foreach (TraktTVShowResponseVM res in TraktSeriesSearchResults) {  			string disp = string.Format ("{0} ({1})"' res.title' res.year);  			dlg.Add (disp);  		}  		dlg.SelectedLabel = selectedLabel;  		dlg.DoModal (GUIWindowManager.ActiveWindow);  		selectedLabel = dlg.SelectedLabel;  		int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  		if (selection == 0)  			return true;  		// previous menu  		if (selection > 0 && selection <= TraktSeriesSearchResults.Count) {  			TraktTVShowResponseVM res = TraktSeriesSearchResults [selection - 1];  			LinkAniDBToTrakt (ser' aniDBID' res.TraktID' 1);  			return false;  		}  		return true;  	}  }  else {  	GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  	if (null != dlgOK) {  		dlgOK.SetHeading ("Search Results");  		dlgOK.SetLine (1' string.Empty);  		dlgOK.SetLine (2' "No results found");  		dlgOK.DoModal (GUIWindowManager.ActiveWindow);  	}  	return true;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTrakt,The following statement contains a magic number: if (null != dlgOK) {  	dlgOK.SetHeading ("Search Results");  	dlgOK.SetLine (1' string.Empty);  	dlgOK.SetLine (2' "No results found");  	dlgOK.DoModal (GUIWindowManager.ActiveWindow);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTrakt,The following statement contains a magic number: dlgOK.SetLine (2' "No results found");  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTheTvDBMenu,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add ("Search using:   " + ser.AniDB_Anime.FormattedTitle);  	dlg.Add ("Manual Search");  	List<CrossRef_AniDB_TvDBVMV2> CrossRef_AniDB_TvDBResult = new List<CrossRef_AniDB_TvDBVMV2> ();  	List<JMMServerBinary.Contract_Azure_CrossRef_AniDB_TvDB> xrefs = JMMServerVM.Instance.clientBinaryHTTP.GetTVDBCrossRefWebCache (aniDBID);  	if (xrefs != null && xrefs.Count > 0) {  		string xrefSummary = string.Empty;  		foreach (JMMServerBinary.Contract_Azure_CrossRef_AniDB_TvDB xref in xrefs) {  			CrossRef_AniDB_TvDBVMV2 xrefAzure = new CrossRef_AniDB_TvDBVMV2 (xref);  			CrossRef_AniDB_TvDBResult.Add (xrefAzure);  			xrefSummary += Environment.NewLine;  			xrefSummary += string.Format ("AniDB {0}:{1} -- TvDB {2}: {3}:{4}"' xref.AniDBStartEpisodeType' xref.AniDBStartEpisodeNumber' xref.TvDBTitle' xref.TvDBSeasonNumber' xref.TvDBStartEpisodeNumber);  		}  		dlg.Add ("Community Says:   " + xrefSummary);  	}  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		if (!SearchTheTvDB (ser' ser.AniDB_Anime.FormattedTitle' currentMenu))  			return false;  		break;  	case 2:  		{  			if (Utils.DialogText (ref searchText' GetID)) {  				if (!SearchTheTvDB (ser' searchText' currentMenu))  					return false;  			}  		}  		break;  	case 3:  		string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveLinkAniDBTvDBForAnime (aniDBID);  		if (res.Length > 0) {  			Utils.DialogMsg ("Error"' res);  			return false;  		}  		foreach (CrossRef_AniDB_TvDBVMV2 xref in CrossRef_AniDB_TvDBResult) {  			LinkAniDBToTVDB (ser' xref.AnimeID' (enEpisodeType)xref.AniDBStartEpisodeType' xref.AniDBStartEpisodeNumber' xref.TvDBID' xref.TvDBSeasonNumber' xref.TvDBStartEpisodeNumber);  		}  		return false;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTheTvDBMenu,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add ("Search using:   " + ser.AniDB_Anime.FormattedTitle);  	dlg.Add ("Manual Search");  	List<CrossRef_AniDB_TvDBVMV2> CrossRef_AniDB_TvDBResult = new List<CrossRef_AniDB_TvDBVMV2> ();  	List<JMMServerBinary.Contract_Azure_CrossRef_AniDB_TvDB> xrefs = JMMServerVM.Instance.clientBinaryHTTP.GetTVDBCrossRefWebCache (aniDBID);  	if (xrefs != null && xrefs.Count > 0) {  		string xrefSummary = string.Empty;  		foreach (JMMServerBinary.Contract_Azure_CrossRef_AniDB_TvDB xref in xrefs) {  			CrossRef_AniDB_TvDBVMV2 xrefAzure = new CrossRef_AniDB_TvDBVMV2 (xref);  			CrossRef_AniDB_TvDBResult.Add (xrefAzure);  			xrefSummary += Environment.NewLine;  			xrefSummary += string.Format ("AniDB {0}:{1} -- TvDB {2}: {3}:{4}"' xref.AniDBStartEpisodeType' xref.AniDBStartEpisodeNumber' xref.TvDBTitle' xref.TvDBSeasonNumber' xref.TvDBStartEpisodeNumber);  		}  		dlg.Add ("Community Says:   " + xrefSummary);  	}  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		if (!SearchTheTvDB (ser' ser.AniDB_Anime.FormattedTitle' currentMenu))  			return false;  		break;  	case 2:  		{  			if (Utils.DialogText (ref searchText' GetID)) {  				if (!SearchTheTvDB (ser' searchText' currentMenu))  					return false;  			}  		}  		break;  	case 3:  		string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveLinkAniDBTvDBForAnime (aniDBID);  		if (res.Length > 0) {  			Utils.DialogMsg ("Error"' res);  			return false;  		}  		foreach (CrossRef_AniDB_TvDBVMV2 xref in CrossRef_AniDB_TvDBResult) {  			LinkAniDBToTVDB (ser' xref.AnimeID' (enEpisodeType)xref.AniDBStartEpisodeType' xref.AniDBStartEpisodeNumber' xref.TvDBID' xref.TvDBSeasonNumber' xref.TvDBStartEpisodeNumber);  		}  		return false;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTheTvDBMenu,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	if (!SearchTheTvDB (ser' ser.AniDB_Anime.FormattedTitle' currentMenu))  		return false;  	break;  case 2:  	{  		if (Utils.DialogText (ref searchText' GetID)) {  			if (!SearchTheTvDB (ser' searchText' currentMenu))  				return false;  		}  	}  	break;  case 3:  	string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveLinkAniDBTvDBForAnime (aniDBID);  	if (res.Length > 0) {  		Utils.DialogMsg ("Error"' res);  		return false;  	}  	foreach (CrossRef_AniDB_TvDBVMV2 xref in CrossRef_AniDB_TvDBResult) {  		LinkAniDBToTVDB (ser' xref.AnimeID' (enEpisodeType)xref.AniDBStartEpisodeType' xref.AniDBStartEpisodeNumber' xref.TvDBID' xref.TvDBSeasonNumber' xref.TvDBStartEpisodeNumber);  	}  	return false;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTheTvDBMenu,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	if (!SearchTheTvDB (ser' ser.AniDB_Anime.FormattedTitle' currentMenu))  		return false;  	break;  case 2:  	{  		if (Utils.DialogText (ref searchText' GetID)) {  			if (!SearchTheTvDB (ser' searchText' currentMenu))  				return false;  		}  	}  	break;  case 3:  	string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveLinkAniDBTvDBForAnime (aniDBID);  	if (res.Length > 0) {  		Utils.DialogMsg ("Error"' res);  		return false;  	}  	foreach (CrossRef_AniDB_TvDBVMV2 xref in CrossRef_AniDB_TvDBResult) {  		LinkAniDBToTVDB (ser' xref.AnimeID' (enEpisodeType)xref.AniDBStartEpisodeType' xref.AniDBStartEpisodeNumber' xref.TvDBID' xref.TvDBSeasonNumber' xref.TvDBStartEpisodeNumber);  	}  	return false;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTraktMenu,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add ("Search using:   " + ser.AniDB_Anime.FormattedTitle);  	dlg.Add ("Manual Search");  	CrossRef_AniDB_TraktResultVM webCacheResult = null;  	JMMServerBinary.Contract_CrossRef_AniDB_TraktResult xref = JMMServerVM.Instance.clientBinaryHTTP.GetTraktCrossRefWebCache (aniDBID);  	if (xref != null) {  		webCacheResult = new CrossRef_AniDB_TraktResultVM (xref);  		dlg.Add ("Community Says:   " + webCacheResult.ShowName);  	}  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		if (!SearchTrakt (ser' ser.AniDB_Anime.FormattedTitle' currentMenu))  			return false;  		break;  	case 2:  		{  			if (Utils.DialogText (ref searchText' GetID)) {  				if (!SearchTrakt (ser' searchText' currentMenu))  					return false;  			}  		}  		break;  	case 3:  		LinkAniDBToTrakt (ser' ser.AniDB_Anime.AnimeID' webCacheResult.TraktID' webCacheResult.TraktSeasonNumber);  		return false;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTraktMenu,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add ("Search using:   " + ser.AniDB_Anime.FormattedTitle);  	dlg.Add ("Manual Search");  	CrossRef_AniDB_TraktResultVM webCacheResult = null;  	JMMServerBinary.Contract_CrossRef_AniDB_TraktResult xref = JMMServerVM.Instance.clientBinaryHTTP.GetTraktCrossRefWebCache (aniDBID);  	if (xref != null) {  		webCacheResult = new CrossRef_AniDB_TraktResultVM (xref);  		dlg.Add ("Community Says:   " + webCacheResult.ShowName);  	}  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		if (!SearchTrakt (ser' ser.AniDB_Anime.FormattedTitle' currentMenu))  			return false;  		break;  	case 2:  		{  			if (Utils.DialogText (ref searchText' GetID)) {  				if (!SearchTrakt (ser' searchText' currentMenu))  					return false;  			}  		}  		break;  	case 3:  		LinkAniDBToTrakt (ser' ser.AniDB_Anime.AnimeID' webCacheResult.TraktID' webCacheResult.TraktSeasonNumber);  		return false;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTraktMenu,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	if (!SearchTrakt (ser' ser.AniDB_Anime.FormattedTitle' currentMenu))  		return false;  	break;  case 2:  	{  		if (Utils.DialogText (ref searchText' GetID)) {  			if (!SearchTrakt (ser' searchText' currentMenu))  				return false;  		}  	}  	break;  case 3:  	LinkAniDBToTrakt (ser' ser.AniDB_Anime.AnimeID' webCacheResult.TraktID' webCacheResult.TraktSeasonNumber);  	return false;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTraktMenu,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	if (!SearchTrakt (ser' ser.AniDB_Anime.FormattedTitle' currentMenu))  		return false;  	break;  case 2:  	{  		if (Utils.DialogText (ref searchText' GetID)) {  			if (!SearchTrakt (ser' searchText' currentMenu))  				return false;  		}  	}  	break;  case 3:  	LinkAniDBToTrakt (ser' ser.AniDB_Anime.AnimeID' webCacheResult.TraktID' webCacheResult.TraktSeasonNumber);  	return false;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTheMovieDBMenu,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add ("Search using:   " + ser.AniDB_Anime.FormattedTitle);  	dlg.Add ("Manual Search");  	CrossRef_AniDB_OtherResultVM CrossRef_AniDB_OtherResult = null;  	JMMServerBinary.Contract_CrossRef_AniDB_OtherResult xref = JMMServerVM.Instance.clientBinaryHTTP.GetOtherAnimeCrossRefWebCache (aniDBID' (int)CrossRefType.MovieDB);  	if (xref != null) {  		CrossRef_AniDB_OtherResult = new CrossRef_AniDB_OtherResultVM (xref);  		dlg.Add ("Community Says:   " + CrossRef_AniDB_OtherResult.CrossRefID.ToString ());  	}  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		if (!SearchTheMovieDB (ser' ser.AniDB_Anime.FormattedTitle' currentMenu))  			return false;  		break;  	case 2:  		{  			string searchText = ser.AniDB_Anime.FormattedTitle;  			if (Utils.DialogText (ref searchText' GetID)) {  				if (!SearchTheMovieDB (ser' searchText' currentMenu))  					return false;  			}  		}  		break;  	case 3:  		LinkAniDBToMovieDB (ser' CrossRef_AniDB_OtherResult.AnimeID' int.Parse (CrossRef_AniDB_OtherResult.CrossRefID));  		return false;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTheMovieDBMenu,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add ("Search using:   " + ser.AniDB_Anime.FormattedTitle);  	dlg.Add ("Manual Search");  	CrossRef_AniDB_OtherResultVM CrossRef_AniDB_OtherResult = null;  	JMMServerBinary.Contract_CrossRef_AniDB_OtherResult xref = JMMServerVM.Instance.clientBinaryHTTP.GetOtherAnimeCrossRefWebCache (aniDBID' (int)CrossRefType.MovieDB);  	if (xref != null) {  		CrossRef_AniDB_OtherResult = new CrossRef_AniDB_OtherResultVM (xref);  		dlg.Add ("Community Says:   " + CrossRef_AniDB_OtherResult.CrossRefID.ToString ());  	}  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		if (!SearchTheMovieDB (ser' ser.AniDB_Anime.FormattedTitle' currentMenu))  			return false;  		break;  	case 2:  		{  			string searchText = ser.AniDB_Anime.FormattedTitle;  			if (Utils.DialogText (ref searchText' GetID)) {  				if (!SearchTheMovieDB (ser' searchText' currentMenu))  					return false;  			}  		}  		break;  	case 3:  		LinkAniDBToMovieDB (ser' CrossRef_AniDB_OtherResult.AnimeID' int.Parse (CrossRef_AniDB_OtherResult.CrossRefID));  		return false;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTheMovieDBMenu,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	if (!SearchTheMovieDB (ser' ser.AniDB_Anime.FormattedTitle' currentMenu))  		return false;  	break;  case 2:  	{  		string searchText = ser.AniDB_Anime.FormattedTitle;  		if (Utils.DialogText (ref searchText' GetID)) {  			if (!SearchTheMovieDB (ser' searchText' currentMenu))  				return false;  		}  	}  	break;  case 3:  	LinkAniDBToMovieDB (ser' CrossRef_AniDB_OtherResult.AnimeID' int.Parse (CrossRef_AniDB_OtherResult.CrossRefID));  	return false;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTheMovieDBMenu,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	if (!SearchTheMovieDB (ser' ser.AniDB_Anime.FormattedTitle' currentMenu))  		return false;  	break;  case 2:  	{  		string searchText = ser.AniDB_Anime.FormattedTitle;  		if (Utils.DialogText (ref searchText' GetID)) {  			if (!SearchTheMovieDB (ser' searchText' currentMenu))  				return false;  		}  	}  	break;  case 3:  	LinkAniDBToMovieDB (ser' CrossRef_AniDB_OtherResult.AnimeID' int.Parse (CrossRef_AniDB_OtherResult.CrossRefID));  	return false;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTheMovieDB,The following statement contains a magic number: if (MovieDBSeriesSearchResults.Count > 0) {  	GUIDialogMenu dlg = (GUIDialogMenu)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	if (dlg == null)  		return true;  	//keep showing the dialog until the user closes it  	int selectedLabel = 0;  	while (true) {  		dlg.Reset ();  		dlg.SetHeading ("Search Results");  		if (previousMenu != string.Empty)  			dlg.Add ("<<< " + previousMenu);  		foreach (MovieDBMovieSearchResultVM res in MovieDBSeriesSearchResults)  			dlg.Add (res.MovieName);  		dlg.SelectedLabel = selectedLabel;  		dlg.DoModal (GUIWindowManager.ActiveWindow);  		selectedLabel = dlg.SelectedLabel;  		int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  		if (selection == 0)  			return true;  		//previous menu  		if (selection > 0 && selection <= MovieDBSeriesSearchResults.Count) {  			MovieDBMovieSearchResultVM res = MovieDBSeriesSearchResults [selection - 1];  			LinkAniDBToMovieDB (ser' aniDBID' res.MovieID);  			return false;  		}  		return true;  	}  }  else {  	GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  	if (null != dlgOK) {  		dlgOK.SetHeading ("Search Results");  		dlgOK.SetLine (1' string.Empty);  		dlgOK.SetLine (2' "No results found");  		dlgOK.DoModal (GUIWindowManager.ActiveWindow);  	}  	return true;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTheMovieDB,The following statement contains a magic number: if (null != dlgOK) {  	dlgOK.SetHeading ("Search Results");  	dlgOK.SetLine (1' string.Empty);  	dlgOK.SetLine (2' "No results found");  	dlgOK.DoModal (GUIWindowManager.ActiveWindow);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchTheMovieDB,The following statement contains a magic number: dlgOK.SetLine (2' "No results found");  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchMALMenu,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add ("Search using:   " + ser.AniDB_Anime.FormattedTitle);  	dlg.Add ("Manual Search");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		if (!SearchMAL (ser' ser.AniDB_Anime.FormattedTitle' currentMenu))  			return false;  		break;  	case 2:  		{  			string searchText = ser.AniDB_Anime.FormattedTitle;  			if (Utils.DialogText (ref searchText' GetID)) {  				if (!SearchMAL (ser' searchText' currentMenu))  					return false;  			}  		}  		break;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchMALMenu,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	if (!SearchMAL (ser' ser.AniDB_Anime.FormattedTitle' currentMenu))  		return false;  	break;  case 2:  	{  		string searchText = ser.AniDB_Anime.FormattedTitle;  		if (Utils.DialogText (ref searchText' GetID)) {  			if (!SearchMAL (ser' searchText' currentMenu))  				return false;  		}  	}  	break;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchMAL,The following statement contains a magic number: if (MALSearchResults.Count > 0) {  	GUIDialogMenu dlg = (GUIDialogMenu)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	if (dlg == null)  		return true;  	//keep showing the dialog until the user closes it  	int selectedLabel = 0;  	while (true) {  		dlg.Reset ();  		dlg.SetHeading ("Search Results");  		if (previousMenu != string.Empty)  			dlg.Add ("<<< " + previousMenu);  		foreach (MALSearchResultVM res in MALSearchResults)  			dlg.Add (string.Format ("{0} ({1} Eps)"' res.title' res.episodes));  		dlg.SelectedLabel = selectedLabel;  		dlg.DoModal (GUIWindowManager.ActiveWindow);  		selectedLabel = dlg.SelectedLabel;  		int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  		if (selection == 0)  			return true;  		//previous menu  		if (selection > 0 && selection <= MALSearchResults.Count) {  			MALSearchResultVM res = MALSearchResults [selection - 1];  			LinkAniDBToMAL (ser' aniDBID' res.id' res.title);  			return false;  		}  		return true;  	}  }  else {  	GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  	if (null != dlgOK) {  		dlgOK.SetHeading ("Search Results");  		dlgOK.SetLine (1' string.Empty);  		dlgOK.SetLine (2' "No results found");  		dlgOK.DoModal (GUIWindowManager.ActiveWindow);  	}  	return true;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchMAL,The following statement contains a magic number: if (null != dlgOK) {  	dlgOK.SetHeading ("Search Results");  	dlgOK.SetLine (1' string.Empty);  	dlgOK.SetLine (2' "No results found");  	dlgOK.DoModal (GUIWindowManager.ActiveWindow);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SearchMAL,The following statement contains a magic number: dlgOK.SetLine (2' "No results found");  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	bool isWatched = (episode.IsWatched == 1);  	if (isWatched)  		dlg.Add ("Mark as Unwatched");  	else  		dlg.Add ("Mark as Watched");  	dlg.Add ("Mark ALL as Watched");  	dlg.Add ("Mark ALL as Unwatched");  	dlg.Add ("Mark ALL PREVIOUS as Watched");  	dlg.Add ("Mark ALL PREVIOUS as Unwatched");  	dlg.Add ("Associate File With This Episode");  	dlg.Add ("Remove File From This Episode");  	dlg.Add ("Download this epsiode");  	dlg.Add ("Post-processing >>>");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1: {  		// Mark as Watched/Unwatched  		BaseConfig.MyAnimeLog.Write ("Toggle watched status: {0} - {1}"' isWatched' episode);  		episode.ToggleWatchedStatus (!isWatched);  		LoadFacade ();  		return false;  	}  	case 2:// Mark ALL as Watched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (BaseConfig.Settings.DisplayRatingDialogOnCompletion) {  			JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  			if (contract != null) {  				AnimeSeriesVM ser = new AnimeSeriesVM (contract);  				Utils.PromptToRateSeriesOnCompletion (ser);  			}  		}  		LoadFacade ();  		return false;  	}  	case 3:// Mark ALL as Unwatched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		LoadFacade ();  		return false;  	}  	case 4:// Mark ALL PREVIOUS as Watched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM ser = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (ser);  		}  		LoadFacade ();  		return false;  	}  	case 5:// Mark ALL PREVIOUS as Unwatched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		LoadFacade ();  		return false;  	}  	case 6:// associate file with this episode  	 {  		List<VideoLocalVM> unlinkedVideos = JMMServerHelper.GetUnlinkedVideos ();  		if (unlinkedVideos.Count == 0) {  			GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  			if (null != dlgOK) {  				dlgOK.SetHeading ("Error");  				dlgOK.SetLine (1' string.Empty);  				dlgOK.SetLine (2' "No unlinked files to select");  				dlgOK.DoModal (GUIWindowManager.ActiveWindow);  			}  			break;  		}  		// ask the user which file they want to associate  		IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		dlg2.Reset ();  		dlg2.SetHeading ("Select File");  		foreach (VideoLocalVM fl in unlinkedVideos)  			dlg2.Add (Path.GetFileName (fl.FullPath) + " - " + Path.GetDirectoryName (fl.FullPath));  		dlg2.DoModal (GUIWindowManager.ActiveWindow);  		if (dlg2.SelectedId > 0) {  			VideoLocalVM selectedFile = unlinkedVideos [dlg2.SelectedId - 1];  			JMMServerHelper.LinkedFileToEpisode (selectedFile.VideoLocalID' episode.AnimeEpisodeID);  			LoadFacade ();  			return false;  		}  		break;  	}  	case 7:// remove associated file  	 {  		List<VideoDetailedVM> vidList = episode.FilesForEpisode;  		if (vidList.Count == 0) {  			GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  			if (null != dlgOK) {  				dlgOK.SetHeading ("Error");  				dlgOK.SetLine (1' string.Empty);  				dlgOK.SetLine (2' "This episode has no associated files");  				dlgOK.DoModal (GUIWindowManager.ActiveWindow);  			}  			break;  		}  		// ask the user which file they want to un-associate  		IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		dlg2.Reset ();  		dlg2.SetHeading ("Select File");  		foreach (VideoDetailedVM fl in vidList)  			dlg2.Add (Path.GetFileName (fl.FileName));  		dlg2.DoModal (GUIWindowManager.ActiveWindow);  		if (dlg2.SelectedId > 0) {  			VideoDetailedVM selectedFile = vidList [dlg2.SelectedId - 1];  			string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveAssociationOnFile (selectedFile.VideoLocalID' episode.AniDB_EpisodeID);  			if (!string.IsNullOrEmpty (res))  				Utils.DialogMsg ("Error"' res);  			LoadFacade ();  			return false;  		}  		break;  	}  	case 8:  		DownloadHelper.SearchEpisode (curAnimeEpisode);  		return false;  	case 9:  		if (!ShowContextMenuPostProcessing (currentMenu))  			return false;  		break;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	bool isWatched = (episode.IsWatched == 1);  	if (isWatched)  		dlg.Add ("Mark as Unwatched");  	else  		dlg.Add ("Mark as Watched");  	dlg.Add ("Mark ALL as Watched");  	dlg.Add ("Mark ALL as Unwatched");  	dlg.Add ("Mark ALL PREVIOUS as Watched");  	dlg.Add ("Mark ALL PREVIOUS as Unwatched");  	dlg.Add ("Associate File With This Episode");  	dlg.Add ("Remove File From This Episode");  	dlg.Add ("Download this epsiode");  	dlg.Add ("Post-processing >>>");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1: {  		// Mark as Watched/Unwatched  		BaseConfig.MyAnimeLog.Write ("Toggle watched status: {0} - {1}"' isWatched' episode);  		episode.ToggleWatchedStatus (!isWatched);  		LoadFacade ();  		return false;  	}  	case 2:// Mark ALL as Watched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (BaseConfig.Settings.DisplayRatingDialogOnCompletion) {  			JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  			if (contract != null) {  				AnimeSeriesVM ser = new AnimeSeriesVM (contract);  				Utils.PromptToRateSeriesOnCompletion (ser);  			}  		}  		LoadFacade ();  		return false;  	}  	case 3:// Mark ALL as Unwatched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		LoadFacade ();  		return false;  	}  	case 4:// Mark ALL PREVIOUS as Watched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM ser = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (ser);  		}  		LoadFacade ();  		return false;  	}  	case 5:// Mark ALL PREVIOUS as Unwatched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		LoadFacade ();  		return false;  	}  	case 6:// associate file with this episode  	 {  		List<VideoLocalVM> unlinkedVideos = JMMServerHelper.GetUnlinkedVideos ();  		if (unlinkedVideos.Count == 0) {  			GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  			if (null != dlgOK) {  				dlgOK.SetHeading ("Error");  				dlgOK.SetLine (1' string.Empty);  				dlgOK.SetLine (2' "No unlinked files to select");  				dlgOK.DoModal (GUIWindowManager.ActiveWindow);  			}  			break;  		}  		// ask the user which file they want to associate  		IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		dlg2.Reset ();  		dlg2.SetHeading ("Select File");  		foreach (VideoLocalVM fl in unlinkedVideos)  			dlg2.Add (Path.GetFileName (fl.FullPath) + " - " + Path.GetDirectoryName (fl.FullPath));  		dlg2.DoModal (GUIWindowManager.ActiveWindow);  		if (dlg2.SelectedId > 0) {  			VideoLocalVM selectedFile = unlinkedVideos [dlg2.SelectedId - 1];  			JMMServerHelper.LinkedFileToEpisode (selectedFile.VideoLocalID' episode.AnimeEpisodeID);  			LoadFacade ();  			return false;  		}  		break;  	}  	case 7:// remove associated file  	 {  		List<VideoDetailedVM> vidList = episode.FilesForEpisode;  		if (vidList.Count == 0) {  			GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  			if (null != dlgOK) {  				dlgOK.SetHeading ("Error");  				dlgOK.SetLine (1' string.Empty);  				dlgOK.SetLine (2' "This episode has no associated files");  				dlgOK.DoModal (GUIWindowManager.ActiveWindow);  			}  			break;  		}  		// ask the user which file they want to un-associate  		IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		dlg2.Reset ();  		dlg2.SetHeading ("Select File");  		foreach (VideoDetailedVM fl in vidList)  			dlg2.Add (Path.GetFileName (fl.FileName));  		dlg2.DoModal (GUIWindowManager.ActiveWindow);  		if (dlg2.SelectedId > 0) {  			VideoDetailedVM selectedFile = vidList [dlg2.SelectedId - 1];  			string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveAssociationOnFile (selectedFile.VideoLocalID' episode.AniDB_EpisodeID);  			if (!string.IsNullOrEmpty (res))  				Utils.DialogMsg ("Error"' res);  			LoadFacade ();  			return false;  		}  		break;  	}  	case 8:  		DownloadHelper.SearchEpisode (curAnimeEpisode);  		return false;  	case 9:  		if (!ShowContextMenuPostProcessing (currentMenu))  			return false;  		break;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	bool isWatched = (episode.IsWatched == 1);  	if (isWatched)  		dlg.Add ("Mark as Unwatched");  	else  		dlg.Add ("Mark as Watched");  	dlg.Add ("Mark ALL as Watched");  	dlg.Add ("Mark ALL as Unwatched");  	dlg.Add ("Mark ALL PREVIOUS as Watched");  	dlg.Add ("Mark ALL PREVIOUS as Unwatched");  	dlg.Add ("Associate File With This Episode");  	dlg.Add ("Remove File From This Episode");  	dlg.Add ("Download this epsiode");  	dlg.Add ("Post-processing >>>");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1: {  		// Mark as Watched/Unwatched  		BaseConfig.MyAnimeLog.Write ("Toggle watched status: {0} - {1}"' isWatched' episode);  		episode.ToggleWatchedStatus (!isWatched);  		LoadFacade ();  		return false;  	}  	case 2:// Mark ALL as Watched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (BaseConfig.Settings.DisplayRatingDialogOnCompletion) {  			JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  			if (contract != null) {  				AnimeSeriesVM ser = new AnimeSeriesVM (contract);  				Utils.PromptToRateSeriesOnCompletion (ser);  			}  		}  		LoadFacade ();  		return false;  	}  	case 3:// Mark ALL as Unwatched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		LoadFacade ();  		return false;  	}  	case 4:// Mark ALL PREVIOUS as Watched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM ser = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (ser);  		}  		LoadFacade ();  		return false;  	}  	case 5:// Mark ALL PREVIOUS as Unwatched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		LoadFacade ();  		return false;  	}  	case 6:// associate file with this episode  	 {  		List<VideoLocalVM> unlinkedVideos = JMMServerHelper.GetUnlinkedVideos ();  		if (unlinkedVideos.Count == 0) {  			GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  			if (null != dlgOK) {  				dlgOK.SetHeading ("Error");  				dlgOK.SetLine (1' string.Empty);  				dlgOK.SetLine (2' "No unlinked files to select");  				dlgOK.DoModal (GUIWindowManager.ActiveWindow);  			}  			break;  		}  		// ask the user which file they want to associate  		IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		dlg2.Reset ();  		dlg2.SetHeading ("Select File");  		foreach (VideoLocalVM fl in unlinkedVideos)  			dlg2.Add (Path.GetFileName (fl.FullPath) + " - " + Path.GetDirectoryName (fl.FullPath));  		dlg2.DoModal (GUIWindowManager.ActiveWindow);  		if (dlg2.SelectedId > 0) {  			VideoLocalVM selectedFile = unlinkedVideos [dlg2.SelectedId - 1];  			JMMServerHelper.LinkedFileToEpisode (selectedFile.VideoLocalID' episode.AnimeEpisodeID);  			LoadFacade ();  			return false;  		}  		break;  	}  	case 7:// remove associated file  	 {  		List<VideoDetailedVM> vidList = episode.FilesForEpisode;  		if (vidList.Count == 0) {  			GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  			if (null != dlgOK) {  				dlgOK.SetHeading ("Error");  				dlgOK.SetLine (1' string.Empty);  				dlgOK.SetLine (2' "This episode has no associated files");  				dlgOK.DoModal (GUIWindowManager.ActiveWindow);  			}  			break;  		}  		// ask the user which file they want to un-associate  		IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		dlg2.Reset ();  		dlg2.SetHeading ("Select File");  		foreach (VideoDetailedVM fl in vidList)  			dlg2.Add (Path.GetFileName (fl.FileName));  		dlg2.DoModal (GUIWindowManager.ActiveWindow);  		if (dlg2.SelectedId > 0) {  			VideoDetailedVM selectedFile = vidList [dlg2.SelectedId - 1];  			string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveAssociationOnFile (selectedFile.VideoLocalID' episode.AniDB_EpisodeID);  			if (!string.IsNullOrEmpty (res))  				Utils.DialogMsg ("Error"' res);  			LoadFacade ();  			return false;  		}  		break;  	}  	case 8:  		DownloadHelper.SearchEpisode (curAnimeEpisode);  		return false;  	case 9:  		if (!ShowContextMenuPostProcessing (currentMenu))  			return false;  		break;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	bool isWatched = (episode.IsWatched == 1);  	if (isWatched)  		dlg.Add ("Mark as Unwatched");  	else  		dlg.Add ("Mark as Watched");  	dlg.Add ("Mark ALL as Watched");  	dlg.Add ("Mark ALL as Unwatched");  	dlg.Add ("Mark ALL PREVIOUS as Watched");  	dlg.Add ("Mark ALL PREVIOUS as Unwatched");  	dlg.Add ("Associate File With This Episode");  	dlg.Add ("Remove File From This Episode");  	dlg.Add ("Download this epsiode");  	dlg.Add ("Post-processing >>>");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1: {  		// Mark as Watched/Unwatched  		BaseConfig.MyAnimeLog.Write ("Toggle watched status: {0} - {1}"' isWatched' episode);  		episode.ToggleWatchedStatus (!isWatched);  		LoadFacade ();  		return false;  	}  	case 2:// Mark ALL as Watched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (BaseConfig.Settings.DisplayRatingDialogOnCompletion) {  			JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  			if (contract != null) {  				AnimeSeriesVM ser = new AnimeSeriesVM (contract);  				Utils.PromptToRateSeriesOnCompletion (ser);  			}  		}  		LoadFacade ();  		return false;  	}  	case 3:// Mark ALL as Unwatched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		LoadFacade ();  		return false;  	}  	case 4:// Mark ALL PREVIOUS as Watched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM ser = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (ser);  		}  		LoadFacade ();  		return false;  	}  	case 5:// Mark ALL PREVIOUS as Unwatched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		LoadFacade ();  		return false;  	}  	case 6:// associate file with this episode  	 {  		List<VideoLocalVM> unlinkedVideos = JMMServerHelper.GetUnlinkedVideos ();  		if (unlinkedVideos.Count == 0) {  			GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  			if (null != dlgOK) {  				dlgOK.SetHeading ("Error");  				dlgOK.SetLine (1' string.Empty);  				dlgOK.SetLine (2' "No unlinked files to select");  				dlgOK.DoModal (GUIWindowManager.ActiveWindow);  			}  			break;  		}  		// ask the user which file they want to associate  		IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		dlg2.Reset ();  		dlg2.SetHeading ("Select File");  		foreach (VideoLocalVM fl in unlinkedVideos)  			dlg2.Add (Path.GetFileName (fl.FullPath) + " - " + Path.GetDirectoryName (fl.FullPath));  		dlg2.DoModal (GUIWindowManager.ActiveWindow);  		if (dlg2.SelectedId > 0) {  			VideoLocalVM selectedFile = unlinkedVideos [dlg2.SelectedId - 1];  			JMMServerHelper.LinkedFileToEpisode (selectedFile.VideoLocalID' episode.AnimeEpisodeID);  			LoadFacade ();  			return false;  		}  		break;  	}  	case 7:// remove associated file  	 {  		List<VideoDetailedVM> vidList = episode.FilesForEpisode;  		if (vidList.Count == 0) {  			GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  			if (null != dlgOK) {  				dlgOK.SetHeading ("Error");  				dlgOK.SetLine (1' string.Empty);  				dlgOK.SetLine (2' "This episode has no associated files");  				dlgOK.DoModal (GUIWindowManager.ActiveWindow);  			}  			break;  		}  		// ask the user which file they want to un-associate  		IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		dlg2.Reset ();  		dlg2.SetHeading ("Select File");  		foreach (VideoDetailedVM fl in vidList)  			dlg2.Add (Path.GetFileName (fl.FileName));  		dlg2.DoModal (GUIWindowManager.ActiveWindow);  		if (dlg2.SelectedId > 0) {  			VideoDetailedVM selectedFile = vidList [dlg2.SelectedId - 1];  			string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveAssociationOnFile (selectedFile.VideoLocalID' episode.AniDB_EpisodeID);  			if (!string.IsNullOrEmpty (res))  				Utils.DialogMsg ("Error"' res);  			LoadFacade ();  			return false;  		}  		break;  	}  	case 8:  		DownloadHelper.SearchEpisode (curAnimeEpisode);  		return false;  	case 9:  		if (!ShowContextMenuPostProcessing (currentMenu))  			return false;  		break;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	bool isWatched = (episode.IsWatched == 1);  	if (isWatched)  		dlg.Add ("Mark as Unwatched");  	else  		dlg.Add ("Mark as Watched");  	dlg.Add ("Mark ALL as Watched");  	dlg.Add ("Mark ALL as Unwatched");  	dlg.Add ("Mark ALL PREVIOUS as Watched");  	dlg.Add ("Mark ALL PREVIOUS as Unwatched");  	dlg.Add ("Associate File With This Episode");  	dlg.Add ("Remove File From This Episode");  	dlg.Add ("Download this epsiode");  	dlg.Add ("Post-processing >>>");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1: {  		// Mark as Watched/Unwatched  		BaseConfig.MyAnimeLog.Write ("Toggle watched status: {0} - {1}"' isWatched' episode);  		episode.ToggleWatchedStatus (!isWatched);  		LoadFacade ();  		return false;  	}  	case 2:// Mark ALL as Watched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (BaseConfig.Settings.DisplayRatingDialogOnCompletion) {  			JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  			if (contract != null) {  				AnimeSeriesVM ser = new AnimeSeriesVM (contract);  				Utils.PromptToRateSeriesOnCompletion (ser);  			}  		}  		LoadFacade ();  		return false;  	}  	case 3:// Mark ALL as Unwatched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		LoadFacade ();  		return false;  	}  	case 4:// Mark ALL PREVIOUS as Watched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM ser = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (ser);  		}  		LoadFacade ();  		return false;  	}  	case 5:// Mark ALL PREVIOUS as Unwatched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		LoadFacade ();  		return false;  	}  	case 6:// associate file with this episode  	 {  		List<VideoLocalVM> unlinkedVideos = JMMServerHelper.GetUnlinkedVideos ();  		if (unlinkedVideos.Count == 0) {  			GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  			if (null != dlgOK) {  				dlgOK.SetHeading ("Error");  				dlgOK.SetLine (1' string.Empty);  				dlgOK.SetLine (2' "No unlinked files to select");  				dlgOK.DoModal (GUIWindowManager.ActiveWindow);  			}  			break;  		}  		// ask the user which file they want to associate  		IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		dlg2.Reset ();  		dlg2.SetHeading ("Select File");  		foreach (VideoLocalVM fl in unlinkedVideos)  			dlg2.Add (Path.GetFileName (fl.FullPath) + " - " + Path.GetDirectoryName (fl.FullPath));  		dlg2.DoModal (GUIWindowManager.ActiveWindow);  		if (dlg2.SelectedId > 0) {  			VideoLocalVM selectedFile = unlinkedVideos [dlg2.SelectedId - 1];  			JMMServerHelper.LinkedFileToEpisode (selectedFile.VideoLocalID' episode.AnimeEpisodeID);  			LoadFacade ();  			return false;  		}  		break;  	}  	case 7:// remove associated file  	 {  		List<VideoDetailedVM> vidList = episode.FilesForEpisode;  		if (vidList.Count == 0) {  			GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  			if (null != dlgOK) {  				dlgOK.SetHeading ("Error");  				dlgOK.SetLine (1' string.Empty);  				dlgOK.SetLine (2' "This episode has no associated files");  				dlgOK.DoModal (GUIWindowManager.ActiveWindow);  			}  			break;  		}  		// ask the user which file they want to un-associate  		IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		dlg2.Reset ();  		dlg2.SetHeading ("Select File");  		foreach (VideoDetailedVM fl in vidList)  			dlg2.Add (Path.GetFileName (fl.FileName));  		dlg2.DoModal (GUIWindowManager.ActiveWindow);  		if (dlg2.SelectedId > 0) {  			VideoDetailedVM selectedFile = vidList [dlg2.SelectedId - 1];  			string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveAssociationOnFile (selectedFile.VideoLocalID' episode.AniDB_EpisodeID);  			if (!string.IsNullOrEmpty (res))  				Utils.DialogMsg ("Error"' res);  			LoadFacade ();  			return false;  		}  		break;  	}  	case 8:  		DownloadHelper.SearchEpisode (curAnimeEpisode);  		return false;  	case 9:  		if (!ShowContextMenuPostProcessing (currentMenu))  			return false;  		break;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	bool isWatched = (episode.IsWatched == 1);  	if (isWatched)  		dlg.Add ("Mark as Unwatched");  	else  		dlg.Add ("Mark as Watched");  	dlg.Add ("Mark ALL as Watched");  	dlg.Add ("Mark ALL as Unwatched");  	dlg.Add ("Mark ALL PREVIOUS as Watched");  	dlg.Add ("Mark ALL PREVIOUS as Unwatched");  	dlg.Add ("Associate File With This Episode");  	dlg.Add ("Remove File From This Episode");  	dlg.Add ("Download this epsiode");  	dlg.Add ("Post-processing >>>");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1: {  		// Mark as Watched/Unwatched  		BaseConfig.MyAnimeLog.Write ("Toggle watched status: {0} - {1}"' isWatched' episode);  		episode.ToggleWatchedStatus (!isWatched);  		LoadFacade ();  		return false;  	}  	case 2:// Mark ALL as Watched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (BaseConfig.Settings.DisplayRatingDialogOnCompletion) {  			JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  			if (contract != null) {  				AnimeSeriesVM ser = new AnimeSeriesVM (contract);  				Utils.PromptToRateSeriesOnCompletion (ser);  			}  		}  		LoadFacade ();  		return false;  	}  	case 3:// Mark ALL as Unwatched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		LoadFacade ();  		return false;  	}  	case 4:// Mark ALL PREVIOUS as Watched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM ser = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (ser);  		}  		LoadFacade ();  		return false;  	}  	case 5:// Mark ALL PREVIOUS as Unwatched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		LoadFacade ();  		return false;  	}  	case 6:// associate file with this episode  	 {  		List<VideoLocalVM> unlinkedVideos = JMMServerHelper.GetUnlinkedVideos ();  		if (unlinkedVideos.Count == 0) {  			GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  			if (null != dlgOK) {  				dlgOK.SetHeading ("Error");  				dlgOK.SetLine (1' string.Empty);  				dlgOK.SetLine (2' "No unlinked files to select");  				dlgOK.DoModal (GUIWindowManager.ActiveWindow);  			}  			break;  		}  		// ask the user which file they want to associate  		IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		dlg2.Reset ();  		dlg2.SetHeading ("Select File");  		foreach (VideoLocalVM fl in unlinkedVideos)  			dlg2.Add (Path.GetFileName (fl.FullPath) + " - " + Path.GetDirectoryName (fl.FullPath));  		dlg2.DoModal (GUIWindowManager.ActiveWindow);  		if (dlg2.SelectedId > 0) {  			VideoLocalVM selectedFile = unlinkedVideos [dlg2.SelectedId - 1];  			JMMServerHelper.LinkedFileToEpisode (selectedFile.VideoLocalID' episode.AnimeEpisodeID);  			LoadFacade ();  			return false;  		}  		break;  	}  	case 7:// remove associated file  	 {  		List<VideoDetailedVM> vidList = episode.FilesForEpisode;  		if (vidList.Count == 0) {  			GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  			if (null != dlgOK) {  				dlgOK.SetHeading ("Error");  				dlgOK.SetLine (1' string.Empty);  				dlgOK.SetLine (2' "This episode has no associated files");  				dlgOK.DoModal (GUIWindowManager.ActiveWindow);  			}  			break;  		}  		// ask the user which file they want to un-associate  		IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		dlg2.Reset ();  		dlg2.SetHeading ("Select File");  		foreach (VideoDetailedVM fl in vidList)  			dlg2.Add (Path.GetFileName (fl.FileName));  		dlg2.DoModal (GUIWindowManager.ActiveWindow);  		if (dlg2.SelectedId > 0) {  			VideoDetailedVM selectedFile = vidList [dlg2.SelectedId - 1];  			string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveAssociationOnFile (selectedFile.VideoLocalID' episode.AniDB_EpisodeID);  			if (!string.IsNullOrEmpty (res))  				Utils.DialogMsg ("Error"' res);  			LoadFacade ();  			return false;  		}  		break;  	}  	case 8:  		DownloadHelper.SearchEpisode (curAnimeEpisode);  		return false;  	case 9:  		if (!ShowContextMenuPostProcessing (currentMenu))  			return false;  		break;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	bool isWatched = (episode.IsWatched == 1);  	if (isWatched)  		dlg.Add ("Mark as Unwatched");  	else  		dlg.Add ("Mark as Watched");  	dlg.Add ("Mark ALL as Watched");  	dlg.Add ("Mark ALL as Unwatched");  	dlg.Add ("Mark ALL PREVIOUS as Watched");  	dlg.Add ("Mark ALL PREVIOUS as Unwatched");  	dlg.Add ("Associate File With This Episode");  	dlg.Add ("Remove File From This Episode");  	dlg.Add ("Download this epsiode");  	dlg.Add ("Post-processing >>>");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1: {  		// Mark as Watched/Unwatched  		BaseConfig.MyAnimeLog.Write ("Toggle watched status: {0} - {1}"' isWatched' episode);  		episode.ToggleWatchedStatus (!isWatched);  		LoadFacade ();  		return false;  	}  	case 2:// Mark ALL as Watched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (BaseConfig.Settings.DisplayRatingDialogOnCompletion) {  			JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  			if (contract != null) {  				AnimeSeriesVM ser = new AnimeSeriesVM (contract);  				Utils.PromptToRateSeriesOnCompletion (ser);  			}  		}  		LoadFacade ();  		return false;  	}  	case 3:// Mark ALL as Unwatched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		LoadFacade ();  		return false;  	}  	case 4:// Mark ALL PREVIOUS as Watched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM ser = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (ser);  		}  		LoadFacade ();  		return false;  	}  	case 5:// Mark ALL PREVIOUS as Unwatched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		LoadFacade ();  		return false;  	}  	case 6:// associate file with this episode  	 {  		List<VideoLocalVM> unlinkedVideos = JMMServerHelper.GetUnlinkedVideos ();  		if (unlinkedVideos.Count == 0) {  			GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  			if (null != dlgOK) {  				dlgOK.SetHeading ("Error");  				dlgOK.SetLine (1' string.Empty);  				dlgOK.SetLine (2' "No unlinked files to select");  				dlgOK.DoModal (GUIWindowManager.ActiveWindow);  			}  			break;  		}  		// ask the user which file they want to associate  		IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		dlg2.Reset ();  		dlg2.SetHeading ("Select File");  		foreach (VideoLocalVM fl in unlinkedVideos)  			dlg2.Add (Path.GetFileName (fl.FullPath) + " - " + Path.GetDirectoryName (fl.FullPath));  		dlg2.DoModal (GUIWindowManager.ActiveWindow);  		if (dlg2.SelectedId > 0) {  			VideoLocalVM selectedFile = unlinkedVideos [dlg2.SelectedId - 1];  			JMMServerHelper.LinkedFileToEpisode (selectedFile.VideoLocalID' episode.AnimeEpisodeID);  			LoadFacade ();  			return false;  		}  		break;  	}  	case 7:// remove associated file  	 {  		List<VideoDetailedVM> vidList = episode.FilesForEpisode;  		if (vidList.Count == 0) {  			GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  			if (null != dlgOK) {  				dlgOK.SetHeading ("Error");  				dlgOK.SetLine (1' string.Empty);  				dlgOK.SetLine (2' "This episode has no associated files");  				dlgOK.DoModal (GUIWindowManager.ActiveWindow);  			}  			break;  		}  		// ask the user which file they want to un-associate  		IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		dlg2.Reset ();  		dlg2.SetHeading ("Select File");  		foreach (VideoDetailedVM fl in vidList)  			dlg2.Add (Path.GetFileName (fl.FileName));  		dlg2.DoModal (GUIWindowManager.ActiveWindow);  		if (dlg2.SelectedId > 0) {  			VideoDetailedVM selectedFile = vidList [dlg2.SelectedId - 1];  			string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveAssociationOnFile (selectedFile.VideoLocalID' episode.AniDB_EpisodeID);  			if (!string.IsNullOrEmpty (res))  				Utils.DialogMsg ("Error"' res);  			LoadFacade ();  			return false;  		}  		break;  	}  	case 8:  		DownloadHelper.SearchEpisode (curAnimeEpisode);  		return false;  	case 9:  		if (!ShowContextMenuPostProcessing (currentMenu))  			return false;  		break;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	bool isWatched = (episode.IsWatched == 1);  	if (isWatched)  		dlg.Add ("Mark as Unwatched");  	else  		dlg.Add ("Mark as Watched");  	dlg.Add ("Mark ALL as Watched");  	dlg.Add ("Mark ALL as Unwatched");  	dlg.Add ("Mark ALL PREVIOUS as Watched");  	dlg.Add ("Mark ALL PREVIOUS as Unwatched");  	dlg.Add ("Associate File With This Episode");  	dlg.Add ("Remove File From This Episode");  	dlg.Add ("Download this epsiode");  	dlg.Add ("Post-processing >>>");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1: {  		// Mark as Watched/Unwatched  		BaseConfig.MyAnimeLog.Write ("Toggle watched status: {0} - {1}"' isWatched' episode);  		episode.ToggleWatchedStatus (!isWatched);  		LoadFacade ();  		return false;  	}  	case 2:// Mark ALL as Watched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (BaseConfig.Settings.DisplayRatingDialogOnCompletion) {  			JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  			if (contract != null) {  				AnimeSeriesVM ser = new AnimeSeriesVM (contract);  				Utils.PromptToRateSeriesOnCompletion (ser);  			}  		}  		LoadFacade ();  		return false;  	}  	case 3:// Mark ALL as Unwatched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		LoadFacade ();  		return false;  	}  	case 4:// Mark ALL PREVIOUS as Watched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM ser = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (ser);  		}  		LoadFacade ();  		return false;  	}  	case 5:// Mark ALL PREVIOUS as Unwatched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		LoadFacade ();  		return false;  	}  	case 6:// associate file with this episode  	 {  		List<VideoLocalVM> unlinkedVideos = JMMServerHelper.GetUnlinkedVideos ();  		if (unlinkedVideos.Count == 0) {  			GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  			if (null != dlgOK) {  				dlgOK.SetHeading ("Error");  				dlgOK.SetLine (1' string.Empty);  				dlgOK.SetLine (2' "No unlinked files to select");  				dlgOK.DoModal (GUIWindowManager.ActiveWindow);  			}  			break;  		}  		// ask the user which file they want to associate  		IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		dlg2.Reset ();  		dlg2.SetHeading ("Select File");  		foreach (VideoLocalVM fl in unlinkedVideos)  			dlg2.Add (Path.GetFileName (fl.FullPath) + " - " + Path.GetDirectoryName (fl.FullPath));  		dlg2.DoModal (GUIWindowManager.ActiveWindow);  		if (dlg2.SelectedId > 0) {  			VideoLocalVM selectedFile = unlinkedVideos [dlg2.SelectedId - 1];  			JMMServerHelper.LinkedFileToEpisode (selectedFile.VideoLocalID' episode.AnimeEpisodeID);  			LoadFacade ();  			return false;  		}  		break;  	}  	case 7:// remove associated file  	 {  		List<VideoDetailedVM> vidList = episode.FilesForEpisode;  		if (vidList.Count == 0) {  			GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  			if (null != dlgOK) {  				dlgOK.SetHeading ("Error");  				dlgOK.SetLine (1' string.Empty);  				dlgOK.SetLine (2' "This episode has no associated files");  				dlgOK.DoModal (GUIWindowManager.ActiveWindow);  			}  			break;  		}  		// ask the user which file they want to un-associate  		IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		dlg2.Reset ();  		dlg2.SetHeading ("Select File");  		foreach (VideoDetailedVM fl in vidList)  			dlg2.Add (Path.GetFileName (fl.FileName));  		dlg2.DoModal (GUIWindowManager.ActiveWindow);  		if (dlg2.SelectedId > 0) {  			VideoDetailedVM selectedFile = vidList [dlg2.SelectedId - 1];  			string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveAssociationOnFile (selectedFile.VideoLocalID' episode.AniDB_EpisodeID);  			if (!string.IsNullOrEmpty (res))  				Utils.DialogMsg ("Error"' res);  			LoadFacade ();  			return false;  		}  		break;  	}  	case 8:  		DownloadHelper.SearchEpisode (curAnimeEpisode);  		return false;  	case 9:  		if (!ShowContextMenuPostProcessing (currentMenu))  			return false;  		break;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	bool isWatched = (episode.IsWatched == 1);  	if (isWatched)  		dlg.Add ("Mark as Unwatched");  	else  		dlg.Add ("Mark as Watched");  	dlg.Add ("Mark ALL as Watched");  	dlg.Add ("Mark ALL as Unwatched");  	dlg.Add ("Mark ALL PREVIOUS as Watched");  	dlg.Add ("Mark ALL PREVIOUS as Unwatched");  	dlg.Add ("Associate File With This Episode");  	dlg.Add ("Remove File From This Episode");  	dlg.Add ("Download this epsiode");  	dlg.Add ("Post-processing >>>");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1: {  		// Mark as Watched/Unwatched  		BaseConfig.MyAnimeLog.Write ("Toggle watched status: {0} - {1}"' isWatched' episode);  		episode.ToggleWatchedStatus (!isWatched);  		LoadFacade ();  		return false;  	}  	case 2:// Mark ALL as Watched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (BaseConfig.Settings.DisplayRatingDialogOnCompletion) {  			JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  			if (contract != null) {  				AnimeSeriesVM ser = new AnimeSeriesVM (contract);  				Utils.PromptToRateSeriesOnCompletion (ser);  			}  		}  		LoadFacade ();  		return false;  	}  	case 3:// Mark ALL as Unwatched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		LoadFacade ();  		return false;  	}  	case 4:// Mark ALL PREVIOUS as Watched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM ser = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (ser);  		}  		LoadFacade ();  		return false;  	}  	case 5:// Mark ALL PREVIOUS as Unwatched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		LoadFacade ();  		return false;  	}  	case 6:// associate file with this episode  	 {  		List<VideoLocalVM> unlinkedVideos = JMMServerHelper.GetUnlinkedVideos ();  		if (unlinkedVideos.Count == 0) {  			GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  			if (null != dlgOK) {  				dlgOK.SetHeading ("Error");  				dlgOK.SetLine (1' string.Empty);  				dlgOK.SetLine (2' "No unlinked files to select");  				dlgOK.DoModal (GUIWindowManager.ActiveWindow);  			}  			break;  		}  		// ask the user which file they want to associate  		IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		dlg2.Reset ();  		dlg2.SetHeading ("Select File");  		foreach (VideoLocalVM fl in unlinkedVideos)  			dlg2.Add (Path.GetFileName (fl.FullPath) + " - " + Path.GetDirectoryName (fl.FullPath));  		dlg2.DoModal (GUIWindowManager.ActiveWindow);  		if (dlg2.SelectedId > 0) {  			VideoLocalVM selectedFile = unlinkedVideos [dlg2.SelectedId - 1];  			JMMServerHelper.LinkedFileToEpisode (selectedFile.VideoLocalID' episode.AnimeEpisodeID);  			LoadFacade ();  			return false;  		}  		break;  	}  	case 7:// remove associated file  	 {  		List<VideoDetailedVM> vidList = episode.FilesForEpisode;  		if (vidList.Count == 0) {  			GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  			if (null != dlgOK) {  				dlgOK.SetHeading ("Error");  				dlgOK.SetLine (1' string.Empty);  				dlgOK.SetLine (2' "This episode has no associated files");  				dlgOK.DoModal (GUIWindowManager.ActiveWindow);  			}  			break;  		}  		// ask the user which file they want to un-associate  		IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		dlg2.Reset ();  		dlg2.SetHeading ("Select File");  		foreach (VideoDetailedVM fl in vidList)  			dlg2.Add (Path.GetFileName (fl.FileName));  		dlg2.DoModal (GUIWindowManager.ActiveWindow);  		if (dlg2.SelectedId > 0) {  			VideoDetailedVM selectedFile = vidList [dlg2.SelectedId - 1];  			string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveAssociationOnFile (selectedFile.VideoLocalID' episode.AniDB_EpisodeID);  			if (!string.IsNullOrEmpty (res))  				Utils.DialogMsg ("Error"' res);  			LoadFacade ();  			return false;  		}  		break;  	}  	case 8:  		DownloadHelper.SearchEpisode (curAnimeEpisode);  		return false;  	case 9:  		if (!ShowContextMenuPostProcessing (currentMenu))  			return false;  		break;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	bool isWatched = (episode.IsWatched == 1);  	if (isWatched)  		dlg.Add ("Mark as Unwatched");  	else  		dlg.Add ("Mark as Watched");  	dlg.Add ("Mark ALL as Watched");  	dlg.Add ("Mark ALL as Unwatched");  	dlg.Add ("Mark ALL PREVIOUS as Watched");  	dlg.Add ("Mark ALL PREVIOUS as Unwatched");  	dlg.Add ("Associate File With This Episode");  	dlg.Add ("Remove File From This Episode");  	dlg.Add ("Download this epsiode");  	dlg.Add ("Post-processing >>>");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1: {  		// Mark as Watched/Unwatched  		BaseConfig.MyAnimeLog.Write ("Toggle watched status: {0} - {1}"' isWatched' episode);  		episode.ToggleWatchedStatus (!isWatched);  		LoadFacade ();  		return false;  	}  	case 2:// Mark ALL as Watched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (BaseConfig.Settings.DisplayRatingDialogOnCompletion) {  			JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  			if (contract != null) {  				AnimeSeriesVM ser = new AnimeSeriesVM (contract);  				Utils.PromptToRateSeriesOnCompletion (ser);  			}  		}  		LoadFacade ();  		return false;  	}  	case 3:// Mark ALL as Unwatched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		LoadFacade ();  		return false;  	}  	case 4:// Mark ALL PREVIOUS as Watched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM ser = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (ser);  		}  		LoadFacade ();  		return false;  	}  	case 5:// Mark ALL PREVIOUS as Unwatched  	 {  		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		LoadFacade ();  		return false;  	}  	case 6:// associate file with this episode  	 {  		List<VideoLocalVM> unlinkedVideos = JMMServerHelper.GetUnlinkedVideos ();  		if (unlinkedVideos.Count == 0) {  			GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  			if (null != dlgOK) {  				dlgOK.SetHeading ("Error");  				dlgOK.SetLine (1' string.Empty);  				dlgOK.SetLine (2' "No unlinked files to select");  				dlgOK.DoModal (GUIWindowManager.ActiveWindow);  			}  			break;  		}  		// ask the user which file they want to associate  		IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		dlg2.Reset ();  		dlg2.SetHeading ("Select File");  		foreach (VideoLocalVM fl in unlinkedVideos)  			dlg2.Add (Path.GetFileName (fl.FullPath) + " - " + Path.GetDirectoryName (fl.FullPath));  		dlg2.DoModal (GUIWindowManager.ActiveWindow);  		if (dlg2.SelectedId > 0) {  			VideoLocalVM selectedFile = unlinkedVideos [dlg2.SelectedId - 1];  			JMMServerHelper.LinkedFileToEpisode (selectedFile.VideoLocalID' episode.AnimeEpisodeID);  			LoadFacade ();  			return false;  		}  		break;  	}  	case 7:// remove associated file  	 {  		List<VideoDetailedVM> vidList = episode.FilesForEpisode;  		if (vidList.Count == 0) {  			GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  			if (null != dlgOK) {  				dlgOK.SetHeading ("Error");  				dlgOK.SetLine (1' string.Empty);  				dlgOK.SetLine (2' "This episode has no associated files");  				dlgOK.DoModal (GUIWindowManager.ActiveWindow);  			}  			break;  		}  		// ask the user which file they want to un-associate  		IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		dlg2.Reset ();  		dlg2.SetHeading ("Select File");  		foreach (VideoDetailedVM fl in vidList)  			dlg2.Add (Path.GetFileName (fl.FileName));  		dlg2.DoModal (GUIWindowManager.ActiveWindow);  		if (dlg2.SelectedId > 0) {  			VideoDetailedVM selectedFile = vidList [dlg2.SelectedId - 1];  			string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveAssociationOnFile (selectedFile.VideoLocalID' episode.AniDB_EpisodeID);  			if (!string.IsNullOrEmpty (res))  				Utils.DialogMsg ("Error"' res);  			LoadFacade ();  			return false;  		}  		break;  	}  	case 8:  		DownloadHelper.SearchEpisode (curAnimeEpisode);  		return false;  	case 9:  		if (!ShowContextMenuPostProcessing (currentMenu))  			return false;  		break;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1: {  	// Mark as Watched/Unwatched  	BaseConfig.MyAnimeLog.Write ("Toggle watched status: {0} - {1}"' isWatched' episode);  	episode.ToggleWatchedStatus (!isWatched);  	LoadFacade ();  	return false;  }  case 2:// Mark ALL as Watched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (BaseConfig.Settings.DisplayRatingDialogOnCompletion) {  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM ser = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (ser);  		}  	}  	LoadFacade ();  	return false;  }  case 3:// Mark ALL as Unwatched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	LoadFacade ();  	return false;  }  case 4:// Mark ALL PREVIOUS as Watched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (contract != null) {  		AnimeSeriesVM ser = new AnimeSeriesVM (contract);  		Utils.PromptToRateSeriesOnCompletion (ser);  	}  	LoadFacade ();  	return false;  }  case 5:// Mark ALL PREVIOUS as Unwatched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	LoadFacade ();  	return false;  }  case 6:// associate file with this episode   {  	List<VideoLocalVM> unlinkedVideos = JMMServerHelper.GetUnlinkedVideos ();  	if (unlinkedVideos.Count == 0) {  		GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  		if (null != dlgOK) {  			dlgOK.SetHeading ("Error");  			dlgOK.SetLine (1' string.Empty);  			dlgOK.SetLine (2' "No unlinked files to select");  			dlgOK.DoModal (GUIWindowManager.ActiveWindow);  		}  		break;  	}  	// ask the user which file they want to associate  	IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	dlg2.Reset ();  	dlg2.SetHeading ("Select File");  	foreach (VideoLocalVM fl in unlinkedVideos)  		dlg2.Add (Path.GetFileName (fl.FullPath) + " - " + Path.GetDirectoryName (fl.FullPath));  	dlg2.DoModal (GUIWindowManager.ActiveWindow);  	if (dlg2.SelectedId > 0) {  		VideoLocalVM selectedFile = unlinkedVideos [dlg2.SelectedId - 1];  		JMMServerHelper.LinkedFileToEpisode (selectedFile.VideoLocalID' episode.AnimeEpisodeID);  		LoadFacade ();  		return false;  	}  	break;  }  case 7:// remove associated file   {  	List<VideoDetailedVM> vidList = episode.FilesForEpisode;  	if (vidList.Count == 0) {  		GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  		if (null != dlgOK) {  			dlgOK.SetHeading ("Error");  			dlgOK.SetLine (1' string.Empty);  			dlgOK.SetLine (2' "This episode has no associated files");  			dlgOK.DoModal (GUIWindowManager.ActiveWindow);  		}  		break;  	}  	// ask the user which file they want to un-associate  	IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	dlg2.Reset ();  	dlg2.SetHeading ("Select File");  	foreach (VideoDetailedVM fl in vidList)  		dlg2.Add (Path.GetFileName (fl.FileName));  	dlg2.DoModal (GUIWindowManager.ActiveWindow);  	if (dlg2.SelectedId > 0) {  		VideoDetailedVM selectedFile = vidList [dlg2.SelectedId - 1];  		string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveAssociationOnFile (selectedFile.VideoLocalID' episode.AniDB_EpisodeID);  		if (!string.IsNullOrEmpty (res))  			Utils.DialogMsg ("Error"' res);  		LoadFacade ();  		return false;  	}  	break;  }  case 8:  	DownloadHelper.SearchEpisode (curAnimeEpisode);  	return false;  case 9:  	if (!ShowContextMenuPostProcessing (currentMenu))  		return false;  	break;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1: {  	// Mark as Watched/Unwatched  	BaseConfig.MyAnimeLog.Write ("Toggle watched status: {0} - {1}"' isWatched' episode);  	episode.ToggleWatchedStatus (!isWatched);  	LoadFacade ();  	return false;  }  case 2:// Mark ALL as Watched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (BaseConfig.Settings.DisplayRatingDialogOnCompletion) {  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM ser = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (ser);  		}  	}  	LoadFacade ();  	return false;  }  case 3:// Mark ALL as Unwatched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	LoadFacade ();  	return false;  }  case 4:// Mark ALL PREVIOUS as Watched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (contract != null) {  		AnimeSeriesVM ser = new AnimeSeriesVM (contract);  		Utils.PromptToRateSeriesOnCompletion (ser);  	}  	LoadFacade ();  	return false;  }  case 5:// Mark ALL PREVIOUS as Unwatched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	LoadFacade ();  	return false;  }  case 6:// associate file with this episode   {  	List<VideoLocalVM> unlinkedVideos = JMMServerHelper.GetUnlinkedVideos ();  	if (unlinkedVideos.Count == 0) {  		GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  		if (null != dlgOK) {  			dlgOK.SetHeading ("Error");  			dlgOK.SetLine (1' string.Empty);  			dlgOK.SetLine (2' "No unlinked files to select");  			dlgOK.DoModal (GUIWindowManager.ActiveWindow);  		}  		break;  	}  	// ask the user which file they want to associate  	IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	dlg2.Reset ();  	dlg2.SetHeading ("Select File");  	foreach (VideoLocalVM fl in unlinkedVideos)  		dlg2.Add (Path.GetFileName (fl.FullPath) + " - " + Path.GetDirectoryName (fl.FullPath));  	dlg2.DoModal (GUIWindowManager.ActiveWindow);  	if (dlg2.SelectedId > 0) {  		VideoLocalVM selectedFile = unlinkedVideos [dlg2.SelectedId - 1];  		JMMServerHelper.LinkedFileToEpisode (selectedFile.VideoLocalID' episode.AnimeEpisodeID);  		LoadFacade ();  		return false;  	}  	break;  }  case 7:// remove associated file   {  	List<VideoDetailedVM> vidList = episode.FilesForEpisode;  	if (vidList.Count == 0) {  		GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  		if (null != dlgOK) {  			dlgOK.SetHeading ("Error");  			dlgOK.SetLine (1' string.Empty);  			dlgOK.SetLine (2' "This episode has no associated files");  			dlgOK.DoModal (GUIWindowManager.ActiveWindow);  		}  		break;  	}  	// ask the user which file they want to un-associate  	IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	dlg2.Reset ();  	dlg2.SetHeading ("Select File");  	foreach (VideoDetailedVM fl in vidList)  		dlg2.Add (Path.GetFileName (fl.FileName));  	dlg2.DoModal (GUIWindowManager.ActiveWindow);  	if (dlg2.SelectedId > 0) {  		VideoDetailedVM selectedFile = vidList [dlg2.SelectedId - 1];  		string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveAssociationOnFile (selectedFile.VideoLocalID' episode.AniDB_EpisodeID);  		if (!string.IsNullOrEmpty (res))  			Utils.DialogMsg ("Error"' res);  		LoadFacade ();  		return false;  	}  	break;  }  case 8:  	DownloadHelper.SearchEpisode (curAnimeEpisode);  	return false;  case 9:  	if (!ShowContextMenuPostProcessing (currentMenu))  		return false;  	break;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1: {  	// Mark as Watched/Unwatched  	BaseConfig.MyAnimeLog.Write ("Toggle watched status: {0} - {1}"' isWatched' episode);  	episode.ToggleWatchedStatus (!isWatched);  	LoadFacade ();  	return false;  }  case 2:// Mark ALL as Watched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (BaseConfig.Settings.DisplayRatingDialogOnCompletion) {  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM ser = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (ser);  		}  	}  	LoadFacade ();  	return false;  }  case 3:// Mark ALL as Unwatched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	LoadFacade ();  	return false;  }  case 4:// Mark ALL PREVIOUS as Watched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (contract != null) {  		AnimeSeriesVM ser = new AnimeSeriesVM (contract);  		Utils.PromptToRateSeriesOnCompletion (ser);  	}  	LoadFacade ();  	return false;  }  case 5:// Mark ALL PREVIOUS as Unwatched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	LoadFacade ();  	return false;  }  case 6:// associate file with this episode   {  	List<VideoLocalVM> unlinkedVideos = JMMServerHelper.GetUnlinkedVideos ();  	if (unlinkedVideos.Count == 0) {  		GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  		if (null != dlgOK) {  			dlgOK.SetHeading ("Error");  			dlgOK.SetLine (1' string.Empty);  			dlgOK.SetLine (2' "No unlinked files to select");  			dlgOK.DoModal (GUIWindowManager.ActiveWindow);  		}  		break;  	}  	// ask the user which file they want to associate  	IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	dlg2.Reset ();  	dlg2.SetHeading ("Select File");  	foreach (VideoLocalVM fl in unlinkedVideos)  		dlg2.Add (Path.GetFileName (fl.FullPath) + " - " + Path.GetDirectoryName (fl.FullPath));  	dlg2.DoModal (GUIWindowManager.ActiveWindow);  	if (dlg2.SelectedId > 0) {  		VideoLocalVM selectedFile = unlinkedVideos [dlg2.SelectedId - 1];  		JMMServerHelper.LinkedFileToEpisode (selectedFile.VideoLocalID' episode.AnimeEpisodeID);  		LoadFacade ();  		return false;  	}  	break;  }  case 7:// remove associated file   {  	List<VideoDetailedVM> vidList = episode.FilesForEpisode;  	if (vidList.Count == 0) {  		GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  		if (null != dlgOK) {  			dlgOK.SetHeading ("Error");  			dlgOK.SetLine (1' string.Empty);  			dlgOK.SetLine (2' "This episode has no associated files");  			dlgOK.DoModal (GUIWindowManager.ActiveWindow);  		}  		break;  	}  	// ask the user which file they want to un-associate  	IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	dlg2.Reset ();  	dlg2.SetHeading ("Select File");  	foreach (VideoDetailedVM fl in vidList)  		dlg2.Add (Path.GetFileName (fl.FileName));  	dlg2.DoModal (GUIWindowManager.ActiveWindow);  	if (dlg2.SelectedId > 0) {  		VideoDetailedVM selectedFile = vidList [dlg2.SelectedId - 1];  		string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveAssociationOnFile (selectedFile.VideoLocalID' episode.AniDB_EpisodeID);  		if (!string.IsNullOrEmpty (res))  			Utils.DialogMsg ("Error"' res);  		LoadFacade ();  		return false;  	}  	break;  }  case 8:  	DownloadHelper.SearchEpisode (curAnimeEpisode);  	return false;  case 9:  	if (!ShowContextMenuPostProcessing (currentMenu))  		return false;  	break;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1: {  	// Mark as Watched/Unwatched  	BaseConfig.MyAnimeLog.Write ("Toggle watched status: {0} - {1}"' isWatched' episode);  	episode.ToggleWatchedStatus (!isWatched);  	LoadFacade ();  	return false;  }  case 2:// Mark ALL as Watched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (BaseConfig.Settings.DisplayRatingDialogOnCompletion) {  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM ser = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (ser);  		}  	}  	LoadFacade ();  	return false;  }  case 3:// Mark ALL as Unwatched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	LoadFacade ();  	return false;  }  case 4:// Mark ALL PREVIOUS as Watched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (contract != null) {  		AnimeSeriesVM ser = new AnimeSeriesVM (contract);  		Utils.PromptToRateSeriesOnCompletion (ser);  	}  	LoadFacade ();  	return false;  }  case 5:// Mark ALL PREVIOUS as Unwatched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	LoadFacade ();  	return false;  }  case 6:// associate file with this episode   {  	List<VideoLocalVM> unlinkedVideos = JMMServerHelper.GetUnlinkedVideos ();  	if (unlinkedVideos.Count == 0) {  		GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  		if (null != dlgOK) {  			dlgOK.SetHeading ("Error");  			dlgOK.SetLine (1' string.Empty);  			dlgOK.SetLine (2' "No unlinked files to select");  			dlgOK.DoModal (GUIWindowManager.ActiveWindow);  		}  		break;  	}  	// ask the user which file they want to associate  	IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	dlg2.Reset ();  	dlg2.SetHeading ("Select File");  	foreach (VideoLocalVM fl in unlinkedVideos)  		dlg2.Add (Path.GetFileName (fl.FullPath) + " - " + Path.GetDirectoryName (fl.FullPath));  	dlg2.DoModal (GUIWindowManager.ActiveWindow);  	if (dlg2.SelectedId > 0) {  		VideoLocalVM selectedFile = unlinkedVideos [dlg2.SelectedId - 1];  		JMMServerHelper.LinkedFileToEpisode (selectedFile.VideoLocalID' episode.AnimeEpisodeID);  		LoadFacade ();  		return false;  	}  	break;  }  case 7:// remove associated file   {  	List<VideoDetailedVM> vidList = episode.FilesForEpisode;  	if (vidList.Count == 0) {  		GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  		if (null != dlgOK) {  			dlgOK.SetHeading ("Error");  			dlgOK.SetLine (1' string.Empty);  			dlgOK.SetLine (2' "This episode has no associated files");  			dlgOK.DoModal (GUIWindowManager.ActiveWindow);  		}  		break;  	}  	// ask the user which file they want to un-associate  	IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	dlg2.Reset ();  	dlg2.SetHeading ("Select File");  	foreach (VideoDetailedVM fl in vidList)  		dlg2.Add (Path.GetFileName (fl.FileName));  	dlg2.DoModal (GUIWindowManager.ActiveWindow);  	if (dlg2.SelectedId > 0) {  		VideoDetailedVM selectedFile = vidList [dlg2.SelectedId - 1];  		string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveAssociationOnFile (selectedFile.VideoLocalID' episode.AniDB_EpisodeID);  		if (!string.IsNullOrEmpty (res))  			Utils.DialogMsg ("Error"' res);  		LoadFacade ();  		return false;  	}  	break;  }  case 8:  	DownloadHelper.SearchEpisode (curAnimeEpisode);  	return false;  case 9:  	if (!ShowContextMenuPostProcessing (currentMenu))  		return false;  	break;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1: {  	// Mark as Watched/Unwatched  	BaseConfig.MyAnimeLog.Write ("Toggle watched status: {0} - {1}"' isWatched' episode);  	episode.ToggleWatchedStatus (!isWatched);  	LoadFacade ();  	return false;  }  case 2:// Mark ALL as Watched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (BaseConfig.Settings.DisplayRatingDialogOnCompletion) {  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM ser = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (ser);  		}  	}  	LoadFacade ();  	return false;  }  case 3:// Mark ALL as Unwatched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	LoadFacade ();  	return false;  }  case 4:// Mark ALL PREVIOUS as Watched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (contract != null) {  		AnimeSeriesVM ser = new AnimeSeriesVM (contract);  		Utils.PromptToRateSeriesOnCompletion (ser);  	}  	LoadFacade ();  	return false;  }  case 5:// Mark ALL PREVIOUS as Unwatched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	LoadFacade ();  	return false;  }  case 6:// associate file with this episode   {  	List<VideoLocalVM> unlinkedVideos = JMMServerHelper.GetUnlinkedVideos ();  	if (unlinkedVideos.Count == 0) {  		GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  		if (null != dlgOK) {  			dlgOK.SetHeading ("Error");  			dlgOK.SetLine (1' string.Empty);  			dlgOK.SetLine (2' "No unlinked files to select");  			dlgOK.DoModal (GUIWindowManager.ActiveWindow);  		}  		break;  	}  	// ask the user which file they want to associate  	IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	dlg2.Reset ();  	dlg2.SetHeading ("Select File");  	foreach (VideoLocalVM fl in unlinkedVideos)  		dlg2.Add (Path.GetFileName (fl.FullPath) + " - " + Path.GetDirectoryName (fl.FullPath));  	dlg2.DoModal (GUIWindowManager.ActiveWindow);  	if (dlg2.SelectedId > 0) {  		VideoLocalVM selectedFile = unlinkedVideos [dlg2.SelectedId - 1];  		JMMServerHelper.LinkedFileToEpisode (selectedFile.VideoLocalID' episode.AnimeEpisodeID);  		LoadFacade ();  		return false;  	}  	break;  }  case 7:// remove associated file   {  	List<VideoDetailedVM> vidList = episode.FilesForEpisode;  	if (vidList.Count == 0) {  		GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  		if (null != dlgOK) {  			dlgOK.SetHeading ("Error");  			dlgOK.SetLine (1' string.Empty);  			dlgOK.SetLine (2' "This episode has no associated files");  			dlgOK.DoModal (GUIWindowManager.ActiveWindow);  		}  		break;  	}  	// ask the user which file they want to un-associate  	IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	dlg2.Reset ();  	dlg2.SetHeading ("Select File");  	foreach (VideoDetailedVM fl in vidList)  		dlg2.Add (Path.GetFileName (fl.FileName));  	dlg2.DoModal (GUIWindowManager.ActiveWindow);  	if (dlg2.SelectedId > 0) {  		VideoDetailedVM selectedFile = vidList [dlg2.SelectedId - 1];  		string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveAssociationOnFile (selectedFile.VideoLocalID' episode.AniDB_EpisodeID);  		if (!string.IsNullOrEmpty (res))  			Utils.DialogMsg ("Error"' res);  		LoadFacade ();  		return false;  	}  	break;  }  case 8:  	DownloadHelper.SearchEpisode (curAnimeEpisode);  	return false;  case 9:  	if (!ShowContextMenuPostProcessing (currentMenu))  		return false;  	break;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1: {  	// Mark as Watched/Unwatched  	BaseConfig.MyAnimeLog.Write ("Toggle watched status: {0} - {1}"' isWatched' episode);  	episode.ToggleWatchedStatus (!isWatched);  	LoadFacade ();  	return false;  }  case 2:// Mark ALL as Watched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (BaseConfig.Settings.DisplayRatingDialogOnCompletion) {  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM ser = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (ser);  		}  	}  	LoadFacade ();  	return false;  }  case 3:// Mark ALL as Unwatched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	LoadFacade ();  	return false;  }  case 4:// Mark ALL PREVIOUS as Watched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (contract != null) {  		AnimeSeriesVM ser = new AnimeSeriesVM (contract);  		Utils.PromptToRateSeriesOnCompletion (ser);  	}  	LoadFacade ();  	return false;  }  case 5:// Mark ALL PREVIOUS as Unwatched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	LoadFacade ();  	return false;  }  case 6:// associate file with this episode   {  	List<VideoLocalVM> unlinkedVideos = JMMServerHelper.GetUnlinkedVideos ();  	if (unlinkedVideos.Count == 0) {  		GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  		if (null != dlgOK) {  			dlgOK.SetHeading ("Error");  			dlgOK.SetLine (1' string.Empty);  			dlgOK.SetLine (2' "No unlinked files to select");  			dlgOK.DoModal (GUIWindowManager.ActiveWindow);  		}  		break;  	}  	// ask the user which file they want to associate  	IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	dlg2.Reset ();  	dlg2.SetHeading ("Select File");  	foreach (VideoLocalVM fl in unlinkedVideos)  		dlg2.Add (Path.GetFileName (fl.FullPath) + " - " + Path.GetDirectoryName (fl.FullPath));  	dlg2.DoModal (GUIWindowManager.ActiveWindow);  	if (dlg2.SelectedId > 0) {  		VideoLocalVM selectedFile = unlinkedVideos [dlg2.SelectedId - 1];  		JMMServerHelper.LinkedFileToEpisode (selectedFile.VideoLocalID' episode.AnimeEpisodeID);  		LoadFacade ();  		return false;  	}  	break;  }  case 7:// remove associated file   {  	List<VideoDetailedVM> vidList = episode.FilesForEpisode;  	if (vidList.Count == 0) {  		GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  		if (null != dlgOK) {  			dlgOK.SetHeading ("Error");  			dlgOK.SetLine (1' string.Empty);  			dlgOK.SetLine (2' "This episode has no associated files");  			dlgOK.DoModal (GUIWindowManager.ActiveWindow);  		}  		break;  	}  	// ask the user which file they want to un-associate  	IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	dlg2.Reset ();  	dlg2.SetHeading ("Select File");  	foreach (VideoDetailedVM fl in vidList)  		dlg2.Add (Path.GetFileName (fl.FileName));  	dlg2.DoModal (GUIWindowManager.ActiveWindow);  	if (dlg2.SelectedId > 0) {  		VideoDetailedVM selectedFile = vidList [dlg2.SelectedId - 1];  		string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveAssociationOnFile (selectedFile.VideoLocalID' episode.AniDB_EpisodeID);  		if (!string.IsNullOrEmpty (res))  			Utils.DialogMsg ("Error"' res);  		LoadFacade ();  		return false;  	}  	break;  }  case 8:  	DownloadHelper.SearchEpisode (curAnimeEpisode);  	return false;  case 9:  	if (!ShowContextMenuPostProcessing (currentMenu))  		return false;  	break;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1: {  	// Mark as Watched/Unwatched  	BaseConfig.MyAnimeLog.Write ("Toggle watched status: {0} - {1}"' isWatched' episode);  	episode.ToggleWatchedStatus (!isWatched);  	LoadFacade ();  	return false;  }  case 2:// Mark ALL as Watched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (BaseConfig.Settings.DisplayRatingDialogOnCompletion) {  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM ser = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (ser);  		}  	}  	LoadFacade ();  	return false;  }  case 3:// Mark ALL as Unwatched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	LoadFacade ();  	return false;  }  case 4:// Mark ALL PREVIOUS as Watched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (contract != null) {  		AnimeSeriesVM ser = new AnimeSeriesVM (contract);  		Utils.PromptToRateSeriesOnCompletion (ser);  	}  	LoadFacade ();  	return false;  }  case 5:// Mark ALL PREVIOUS as Unwatched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	LoadFacade ();  	return false;  }  case 6:// associate file with this episode   {  	List<VideoLocalVM> unlinkedVideos = JMMServerHelper.GetUnlinkedVideos ();  	if (unlinkedVideos.Count == 0) {  		GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  		if (null != dlgOK) {  			dlgOK.SetHeading ("Error");  			dlgOK.SetLine (1' string.Empty);  			dlgOK.SetLine (2' "No unlinked files to select");  			dlgOK.DoModal (GUIWindowManager.ActiveWindow);  		}  		break;  	}  	// ask the user which file they want to associate  	IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	dlg2.Reset ();  	dlg2.SetHeading ("Select File");  	foreach (VideoLocalVM fl in unlinkedVideos)  		dlg2.Add (Path.GetFileName (fl.FullPath) + " - " + Path.GetDirectoryName (fl.FullPath));  	dlg2.DoModal (GUIWindowManager.ActiveWindow);  	if (dlg2.SelectedId > 0) {  		VideoLocalVM selectedFile = unlinkedVideos [dlg2.SelectedId - 1];  		JMMServerHelper.LinkedFileToEpisode (selectedFile.VideoLocalID' episode.AnimeEpisodeID);  		LoadFacade ();  		return false;  	}  	break;  }  case 7:// remove associated file   {  	List<VideoDetailedVM> vidList = episode.FilesForEpisode;  	if (vidList.Count == 0) {  		GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  		if (null != dlgOK) {  			dlgOK.SetHeading ("Error");  			dlgOK.SetLine (1' string.Empty);  			dlgOK.SetLine (2' "This episode has no associated files");  			dlgOK.DoModal (GUIWindowManager.ActiveWindow);  		}  		break;  	}  	// ask the user which file they want to un-associate  	IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	dlg2.Reset ();  	dlg2.SetHeading ("Select File");  	foreach (VideoDetailedVM fl in vidList)  		dlg2.Add (Path.GetFileName (fl.FileName));  	dlg2.DoModal (GUIWindowManager.ActiveWindow);  	if (dlg2.SelectedId > 0) {  		VideoDetailedVM selectedFile = vidList [dlg2.SelectedId - 1];  		string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveAssociationOnFile (selectedFile.VideoLocalID' episode.AniDB_EpisodeID);  		if (!string.IsNullOrEmpty (res))  			Utils.DialogMsg ("Error"' res);  		LoadFacade ();  		return false;  	}  	break;  }  case 8:  	DownloadHelper.SearchEpisode (curAnimeEpisode);  	return false;  case 9:  	if (!ShowContextMenuPostProcessing (currentMenu))  		return false;  	break;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1: {  	// Mark as Watched/Unwatched  	BaseConfig.MyAnimeLog.Write ("Toggle watched status: {0} - {1}"' isWatched' episode);  	episode.ToggleWatchedStatus (!isWatched);  	LoadFacade ();  	return false;  }  case 2:// Mark ALL as Watched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (BaseConfig.Settings.DisplayRatingDialogOnCompletion) {  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM ser = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (ser);  		}  	}  	LoadFacade ();  	return false;  }  case 3:// Mark ALL as Unwatched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	LoadFacade ();  	return false;  }  case 4:// Mark ALL PREVIOUS as Watched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (contract != null) {  		AnimeSeriesVM ser = new AnimeSeriesVM (contract);  		Utils.PromptToRateSeriesOnCompletion (ser);  	}  	LoadFacade ();  	return false;  }  case 5:// Mark ALL PREVIOUS as Unwatched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	LoadFacade ();  	return false;  }  case 6:// associate file with this episode   {  	List<VideoLocalVM> unlinkedVideos = JMMServerHelper.GetUnlinkedVideos ();  	if (unlinkedVideos.Count == 0) {  		GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  		if (null != dlgOK) {  			dlgOK.SetHeading ("Error");  			dlgOK.SetLine (1' string.Empty);  			dlgOK.SetLine (2' "No unlinked files to select");  			dlgOK.DoModal (GUIWindowManager.ActiveWindow);  		}  		break;  	}  	// ask the user which file they want to associate  	IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	dlg2.Reset ();  	dlg2.SetHeading ("Select File");  	foreach (VideoLocalVM fl in unlinkedVideos)  		dlg2.Add (Path.GetFileName (fl.FullPath) + " - " + Path.GetDirectoryName (fl.FullPath));  	dlg2.DoModal (GUIWindowManager.ActiveWindow);  	if (dlg2.SelectedId > 0) {  		VideoLocalVM selectedFile = unlinkedVideos [dlg2.SelectedId - 1];  		JMMServerHelper.LinkedFileToEpisode (selectedFile.VideoLocalID' episode.AnimeEpisodeID);  		LoadFacade ();  		return false;  	}  	break;  }  case 7:// remove associated file   {  	List<VideoDetailedVM> vidList = episode.FilesForEpisode;  	if (vidList.Count == 0) {  		GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  		if (null != dlgOK) {  			dlgOK.SetHeading ("Error");  			dlgOK.SetLine (1' string.Empty);  			dlgOK.SetLine (2' "This episode has no associated files");  			dlgOK.DoModal (GUIWindowManager.ActiveWindow);  		}  		break;  	}  	// ask the user which file they want to un-associate  	IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	dlg2.Reset ();  	dlg2.SetHeading ("Select File");  	foreach (VideoDetailedVM fl in vidList)  		dlg2.Add (Path.GetFileName (fl.FileName));  	dlg2.DoModal (GUIWindowManager.ActiveWindow);  	if (dlg2.SelectedId > 0) {  		VideoDetailedVM selectedFile = vidList [dlg2.SelectedId - 1];  		string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveAssociationOnFile (selectedFile.VideoLocalID' episode.AniDB_EpisodeID);  		if (!string.IsNullOrEmpty (res))  			Utils.DialogMsg ("Error"' res);  		LoadFacade ();  		return false;  	}  	break;  }  case 8:  	DownloadHelper.SearchEpisode (curAnimeEpisode);  	return false;  case 9:  	if (!ShowContextMenuPostProcessing (currentMenu))  		return false;  	break;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1: {  	// Mark as Watched/Unwatched  	BaseConfig.MyAnimeLog.Write ("Toggle watched status: {0} - {1}"' isWatched' episode);  	episode.ToggleWatchedStatus (!isWatched);  	LoadFacade ();  	return false;  }  case 2:// Mark ALL as Watched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (BaseConfig.Settings.DisplayRatingDialogOnCompletion) {  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM ser = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (ser);  		}  	}  	LoadFacade ();  	return false;  }  case 3:// Mark ALL as Unwatched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	LoadFacade ();  	return false;  }  case 4:// Mark ALL PREVIOUS as Watched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (contract != null) {  		AnimeSeriesVM ser = new AnimeSeriesVM (contract);  		Utils.PromptToRateSeriesOnCompletion (ser);  	}  	LoadFacade ();  	return false;  }  case 5:// Mark ALL PREVIOUS as Unwatched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	LoadFacade ();  	return false;  }  case 6:// associate file with this episode   {  	List<VideoLocalVM> unlinkedVideos = JMMServerHelper.GetUnlinkedVideos ();  	if (unlinkedVideos.Count == 0) {  		GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  		if (null != dlgOK) {  			dlgOK.SetHeading ("Error");  			dlgOK.SetLine (1' string.Empty);  			dlgOK.SetLine (2' "No unlinked files to select");  			dlgOK.DoModal (GUIWindowManager.ActiveWindow);  		}  		break;  	}  	// ask the user which file they want to associate  	IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	dlg2.Reset ();  	dlg2.SetHeading ("Select File");  	foreach (VideoLocalVM fl in unlinkedVideos)  		dlg2.Add (Path.GetFileName (fl.FullPath) + " - " + Path.GetDirectoryName (fl.FullPath));  	dlg2.DoModal (GUIWindowManager.ActiveWindow);  	if (dlg2.SelectedId > 0) {  		VideoLocalVM selectedFile = unlinkedVideos [dlg2.SelectedId - 1];  		JMMServerHelper.LinkedFileToEpisode (selectedFile.VideoLocalID' episode.AnimeEpisodeID);  		LoadFacade ();  		return false;  	}  	break;  }  case 7:// remove associated file   {  	List<VideoDetailedVM> vidList = episode.FilesForEpisode;  	if (vidList.Count == 0) {  		GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  		if (null != dlgOK) {  			dlgOK.SetHeading ("Error");  			dlgOK.SetLine (1' string.Empty);  			dlgOK.SetLine (2' "This episode has no associated files");  			dlgOK.DoModal (GUIWindowManager.ActiveWindow);  		}  		break;  	}  	// ask the user which file they want to un-associate  	IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	dlg2.Reset ();  	dlg2.SetHeading ("Select File");  	foreach (VideoDetailedVM fl in vidList)  		dlg2.Add (Path.GetFileName (fl.FileName));  	dlg2.DoModal (GUIWindowManager.ActiveWindow);  	if (dlg2.SelectedId > 0) {  		VideoDetailedVM selectedFile = vidList [dlg2.SelectedId - 1];  		string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveAssociationOnFile (selectedFile.VideoLocalID' episode.AniDB_EpisodeID);  		if (!string.IsNullOrEmpty (res))  			Utils.DialogMsg ("Error"' res);  		LoadFacade ();  		return false;  	}  	break;  }  case 8:  	DownloadHelper.SearchEpisode (curAnimeEpisode);  	return false;  case 9:  	if (!ShowContextMenuPostProcessing (currentMenu))  		return false;  	break;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1: {  	// Mark as Watched/Unwatched  	BaseConfig.MyAnimeLog.Write ("Toggle watched status: {0} - {1}"' isWatched' episode);  	episode.ToggleWatchedStatus (!isWatched);  	LoadFacade ();  	return false;  }  case 2:// Mark ALL as Watched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (BaseConfig.Settings.DisplayRatingDialogOnCompletion) {  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM ser = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (ser);  		}  	}  	LoadFacade ();  	return false;  }  case 3:// Mark ALL as Unwatched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' int.MaxValue' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	LoadFacade ();  	return false;  }  case 4:// Mark ALL PREVIOUS as Watched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' true' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (curAnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (contract != null) {  		AnimeSeriesVM ser = new AnimeSeriesVM (contract);  		Utils.PromptToRateSeriesOnCompletion (ser);  	}  	LoadFacade ();  	return false;  }  case 5:// Mark ALL PREVIOUS as Unwatched   {  	JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (curAnimeSeries.AnimeSeriesID.Value' false' episode.EpisodeNumber' (int)curAnimeEpisodeType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	LoadFacade ();  	return false;  }  case 6:// associate file with this episode   {  	List<VideoLocalVM> unlinkedVideos = JMMServerHelper.GetUnlinkedVideos ();  	if (unlinkedVideos.Count == 0) {  		GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  		if (null != dlgOK) {  			dlgOK.SetHeading ("Error");  			dlgOK.SetLine (1' string.Empty);  			dlgOK.SetLine (2' "No unlinked files to select");  			dlgOK.DoModal (GUIWindowManager.ActiveWindow);  		}  		break;  	}  	// ask the user which file they want to associate  	IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	dlg2.Reset ();  	dlg2.SetHeading ("Select File");  	foreach (VideoLocalVM fl in unlinkedVideos)  		dlg2.Add (Path.GetFileName (fl.FullPath) + " - " + Path.GetDirectoryName (fl.FullPath));  	dlg2.DoModal (GUIWindowManager.ActiveWindow);  	if (dlg2.SelectedId > 0) {  		VideoLocalVM selectedFile = unlinkedVideos [dlg2.SelectedId - 1];  		JMMServerHelper.LinkedFileToEpisode (selectedFile.VideoLocalID' episode.AnimeEpisodeID);  		LoadFacade ();  		return false;  	}  	break;  }  case 7:// remove associated file   {  	List<VideoDetailedVM> vidList = episode.FilesForEpisode;  	if (vidList.Count == 0) {  		GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  		if (null != dlgOK) {  			dlgOK.SetHeading ("Error");  			dlgOK.SetLine (1' string.Empty);  			dlgOK.SetLine (2' "This episode has no associated files");  			dlgOK.DoModal (GUIWindowManager.ActiveWindow);  		}  		break;  	}  	// ask the user which file they want to un-associate  	IDialogbox dlg2 = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	dlg2.Reset ();  	dlg2.SetHeading ("Select File");  	foreach (VideoDetailedVM fl in vidList)  		dlg2.Add (Path.GetFileName (fl.FileName));  	dlg2.DoModal (GUIWindowManager.ActiveWindow);  	if (dlg2.SelectedId > 0) {  		VideoDetailedVM selectedFile = vidList [dlg2.SelectedId - 1];  		string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveAssociationOnFile (selectedFile.VideoLocalID' episode.AniDB_EpisodeID);  		if (!string.IsNullOrEmpty (res))  			Utils.DialogMsg ("Error"' res);  		LoadFacade ();  		return false;  	}  	break;  }  case 8:  	DownloadHelper.SearchEpisode (curAnimeEpisode);  	return false;  case 9:  	if (!ShowContextMenuPostProcessing (currentMenu))  		return false;  	break;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The following statement contains a magic number: if (unlinkedVideos.Count == 0) {  	GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  	if (null != dlgOK) {  		dlgOK.SetHeading ("Error");  		dlgOK.SetLine (1' string.Empty);  		dlgOK.SetLine (2' "No unlinked files to select");  		dlgOK.DoModal (GUIWindowManager.ActiveWindow);  	}  	break;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The following statement contains a magic number: if (null != dlgOK) {  	dlgOK.SetHeading ("Error");  	dlgOK.SetLine (1' string.Empty);  	dlgOK.SetLine (2' "No unlinked files to select");  	dlgOK.DoModal (GUIWindowManager.ActiveWindow);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The following statement contains a magic number: dlgOK.SetLine (2' "No unlinked files to select");  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The following statement contains a magic number: if (vidList.Count == 0) {  	GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  	if (null != dlgOK) {  		dlgOK.SetHeading ("Error");  		dlgOK.SetLine (1' string.Empty);  		dlgOK.SetLine (2' "This episode has no associated files");  		dlgOK.DoModal (GUIWindowManager.ActiveWindow);  	}  	break;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The following statement contains a magic number: if (null != dlgOK) {  	dlgOK.SetHeading ("Error");  	dlgOK.SetLine (1' string.Empty);  	dlgOK.SetLine (2' "This episode has no associated files");  	dlgOK.DoModal (GUIWindowManager.ActiveWindow);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuEpisode,The following statement contains a magic number: dlgOK.SetLine (2' "This episode has no associated files");  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuSeriesInfo,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add ("Characters/Actors");  	dlg.Add ("Related Series");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		ShowCharacterWindow ();  		return false;  	case 2:  		ShowRelationsWindow ();  		return false;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuSeriesInfo,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	ShowCharacterWindow ();  	return false;  case 2:  	ShowRelationsWindow ();  	return false;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuImages,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add ("Fanart");  	dlg.Add ("Posters");  	dlg.Add ("Wide Banners");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		ShowFanartWindow ();  		return false;  	case 2:  		ShowPostersWindow ();  		return false;  	case 3:  		ShowWideBannersWindow ();  		return false;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuImages,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add ("Fanart");  	dlg.Add ("Posters");  	dlg.Add ("Wide Banners");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		ShowFanartWindow ();  		return false;  	case 2:  		ShowPostersWindow ();  		return false;  	case 3:  		ShowWideBannersWindow ();  		return false;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuImages,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	ShowFanartWindow ();  	return false;  case 2:  	ShowPostersWindow ();  	return false;  case 3:  	ShowWideBannersWindow ();  	return false;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuImages,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	ShowFanartWindow ();  	return false;  case 2:  	ShowPostersWindow ();  	return false;  case 3:  	ShowWideBannersWindow ();  	return false;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuTVDB,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add ("Remove TVDB Association");  	dlg.Add ("Switch Season (Current is " + season.ToString () + ")");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		JMMServerVM.Instance.clientBinaryHTTP.RemoveLinkAniDBTvDBForAnime (ser.AniDB_Anime.AnimeID);  		break;  	case 2:  		if (ser.CrossRef_AniDB_TvDBV2.Count < 2) {  			if (!ShowSeasonSelectionMenuTvDB (ser' ser.AniDB_Anime.AnimeID' tvdbid' currentMenu))  				return false;  		}  		else {  			Utils.DialogMsg ("Error"' "Cannot edit seasons when series has more than one TvDB link' use JMM Desktop instead");  		}  		break;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuTVDB,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add ("Remove TVDB Association");  	dlg.Add ("Switch Season (Current is " + season.ToString () + ")");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		JMMServerVM.Instance.clientBinaryHTTP.RemoveLinkAniDBTvDBForAnime (ser.AniDB_Anime.AnimeID);  		break;  	case 2:  		if (ser.CrossRef_AniDB_TvDBV2.Count < 2) {  			if (!ShowSeasonSelectionMenuTvDB (ser' ser.AniDB_Anime.AnimeID' tvdbid' currentMenu))  				return false;  		}  		else {  			Utils.DialogMsg ("Error"' "Cannot edit seasons when series has more than one TvDB link' use JMM Desktop instead");  		}  		break;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuTVDB,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	JMMServerVM.Instance.clientBinaryHTTP.RemoveLinkAniDBTvDBForAnime (ser.AniDB_Anime.AnimeID);  	break;  case 2:  	if (ser.CrossRef_AniDB_TvDBV2.Count < 2) {  		if (!ShowSeasonSelectionMenuTvDB (ser' ser.AniDB_Anime.AnimeID' tvdbid' currentMenu))  			return false;  	}  	else {  		Utils.DialogMsg ("Error"' "Cannot edit seasons when series has more than one TvDB link' use JMM Desktop instead");  	}  	break;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuTVDB,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	JMMServerVM.Instance.clientBinaryHTTP.RemoveLinkAniDBTvDBForAnime (ser.AniDB_Anime.AnimeID);  	break;  case 2:  	if (ser.CrossRef_AniDB_TvDBV2.Count < 2) {  		if (!ShowSeasonSelectionMenuTvDB (ser' ser.AniDB_Anime.AnimeID' tvdbid' currentMenu))  			return false;  	}  	else {  		Utils.DialogMsg ("Error"' "Cannot edit seasons when series has more than one TvDB link' use JMM Desktop instead");  	}  	break;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuTVDB,The following statement contains a magic number: if (ser.CrossRef_AniDB_TvDBV2.Count < 2) {  	if (!ShowSeasonSelectionMenuTvDB (ser' ser.AniDB_Anime.AnimeID' tvdbid' currentMenu))  		return false;  }  else {  	Utils.DialogMsg ("Error"' "Cannot edit seasons when series has more than one TvDB link' use JMM Desktop instead");  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuTrakt,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add ("Remove Trakt Association");  	dlg.Add ("Switch Season (Current is " + season.ToString () + ")");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		JMMServerVM.Instance.clientBinaryHTTP.RemoveLinkAniDBTrakt (ser.AniDB_Anime.AnimeID);  		break;  	case 2:  		if (!ShowSeasonSelectionMenuTrakt (ser' ser.AniDB_Anime.AnimeID' traktID' currentMenu))  			return false;  		break;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuTrakt,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	JMMServerVM.Instance.clientBinaryHTTP.RemoveLinkAniDBTrakt (ser.AniDB_Anime.AnimeID);  	break;  case 2:  	if (!ShowSeasonSelectionMenuTrakt (ser' ser.AniDB_Anime.AnimeID' traktID' currentMenu))  		return false;  	break;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowSeasonSelectionMenuTvDB,The following statement contains a magic number: try {  	List<int> seasons = JMMServerVM.Instance.clientBinaryHTTP.GetSeasonNumbersForSeries (tvdbid);  	if (seasons.Count == 0) {  		GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  		if (null != dlgOK) {  			dlgOK.SetHeading ("Season Results");  			dlgOK.SetLine (1' string.Empty);  			dlgOK.SetLine (2' "No seasons found");  			dlgOK.DoModal (GUIWindowManager.ActiveWindow);  		}  		return true;  	}  	GUIDialogMenu dlg = (GUIDialogMenu)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	if (dlg == null)  		return true;  	//keep showing the dialog until the user closes it  	int selectedLabel = 0;  	string currentMenu = "Select Season";  	while (true) {  		dlg.Reset ();  		dlg.SetHeading (currentMenu);  		if (previousMenu != string.Empty)  			dlg.Add ("<<< " + previousMenu);  		foreach (int season in seasons)  			dlg.Add ("Season " + season.ToString ());  		dlg.SelectedLabel = selectedLabel;  		dlg.DoModal (GUIWindowManager.ActiveWindow);  		selectedLabel = dlg.SelectedLabel;  		int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  		if (selection == 0)  			return true;  		//previous menu  		if (selection > 0 && selection <= seasons.Count) {  			int selectedSeason = seasons [selection - 1];  			string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveLinkAniDBTvDBForAnime (animeID);  			LinkAniDBToTVDB (ser' animeID' enEpisodeType.Episode' 1' tvdbid' selectedSeason' 1);  		}  		return false;  	}  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write ("Error in ShowSeasonSelectionMenu:: {0}"' ex);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowSeasonSelectionMenuTvDB,The following statement contains a magic number: if (seasons.Count == 0) {  	GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  	if (null != dlgOK) {  		dlgOK.SetHeading ("Season Results");  		dlgOK.SetLine (1' string.Empty);  		dlgOK.SetLine (2' "No seasons found");  		dlgOK.DoModal (GUIWindowManager.ActiveWindow);  	}  	return true;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowSeasonSelectionMenuTvDB,The following statement contains a magic number: if (null != dlgOK) {  	dlgOK.SetHeading ("Season Results");  	dlgOK.SetLine (1' string.Empty);  	dlgOK.SetLine (2' "No seasons found");  	dlgOK.DoModal (GUIWindowManager.ActiveWindow);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowSeasonSelectionMenuTvDB,The following statement contains a magic number: dlgOK.SetLine (2' "No seasons found");  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowSeasonSelectionMenuTrakt,The following statement contains a magic number: try {  	List<int> seasons = JMMServerVM.Instance.clientBinaryHTTP.GetSeasonNumbersForTrakt (traktID);  	if (seasons.Count == 0) {  		GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  		if (null != dlgOK) {  			dlgOK.SetHeading ("Season Results");  			dlgOK.SetLine (1' string.Empty);  			dlgOK.SetLine (2' "No seasons found");  			dlgOK.DoModal (GUIWindowManager.ActiveWindow);  		}  		return true;  	}  	GUIDialogMenu dlg = (GUIDialogMenu)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	if (dlg == null)  		return true;  	//keep showing the dialog until the user closes it  	int selectedLabel = 0;  	string currentMenu = "Select Season";  	while (true) {  		dlg.Reset ();  		dlg.SetHeading (currentMenu);  		if (previousMenu != string.Empty)  			dlg.Add ("<<< " + previousMenu);  		foreach (int season in seasons)  			dlg.Add ("Season " + season.ToString ());  		dlg.SelectedLabel = selectedLabel;  		dlg.DoModal (GUIWindowManager.ActiveWindow);  		selectedLabel = dlg.SelectedLabel;  		int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  		if (selection == 0)  			return true;  		//previous menu  		if (selection > 0 && selection <= seasons.Count) {  			int selectedSeason = seasons [selection - 1];  			LinkAniDBToTrakt (ser' animeID' traktID' selectedSeason);  		}  		return false;  	}  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write ("Error in ShowSeasonSelectionMenu:: {0}"' ex);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowSeasonSelectionMenuTrakt,The following statement contains a magic number: if (seasons.Count == 0) {  	GUIDialogOK dlgOK = (GUIDialogOK)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_OK);  	if (null != dlgOK) {  		dlgOK.SetHeading ("Season Results");  		dlgOK.SetLine (1' string.Empty);  		dlgOK.SetLine (2' "No seasons found");  		dlgOK.DoModal (GUIWindowManager.ActiveWindow);  	}  	return true;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowSeasonSelectionMenuTrakt,The following statement contains a magic number: if (null != dlgOK) {  	dlgOK.SetHeading ("Season Results");  	dlgOK.SetLine (1' string.Empty);  	dlgOK.SetLine (2' "No seasons found");  	dlgOK.DoModal (GUIWindowManager.ActiveWindow);  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowSeasonSelectionMenuTrakt,The following statement contains a magic number: dlgOK.SetLine (2' "No seasons found");  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuSeriesEdit,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add ("Set Default Audio Language");  	dlg.Add ("Set Default Subtitle language");  	dlg.Add ("Delete This Series/Episodes");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		{  			String language = ser.DefaultAudioLanguage;  			if (Utils.DialogLanguage (ref language' false)) {  				ser.DefaultAudioLanguage = language;  				ser.Save ();  				return false;  			}  		}  		break;  	case 2:  		{  			String language = ser.DefaultSubtitleLanguage;  			if (Utils.DialogLanguage (ref language' true)) {  				ser.DefaultSubtitleLanguage = language;  				ser.Save ();  				return false;  			}  		}  		break;  	case 3:  		if (Utils.DialogConfirm ("Are you sure?")) {  			JMMServerVM.Instance.clientBinaryHTTP.DeleteAnimeSeries (ser.AnimeSeriesID.Value' false' false);  			LoadFacade ();  			return false;  		}  		break;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuSeriesEdit,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add ("Set Default Audio Language");  	dlg.Add ("Set Default Subtitle language");  	dlg.Add ("Delete This Series/Episodes");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		{  			String language = ser.DefaultAudioLanguage;  			if (Utils.DialogLanguage (ref language' false)) {  				ser.DefaultAudioLanguage = language;  				ser.Save ();  				return false;  			}  		}  		break;  	case 2:  		{  			String language = ser.DefaultSubtitleLanguage;  			if (Utils.DialogLanguage (ref language' true)) {  				ser.DefaultSubtitleLanguage = language;  				ser.Save ();  				return false;  			}  		}  		break;  	case 3:  		if (Utils.DialogConfirm ("Are you sure?")) {  			JMMServerVM.Instance.clientBinaryHTTP.DeleteAnimeSeries (ser.AnimeSeriesID.Value' false' false);  			LoadFacade ();  			return false;  		}  		break;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuSeriesEdit,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	{  		String language = ser.DefaultAudioLanguage;  		if (Utils.DialogLanguage (ref language' false)) {  			ser.DefaultAudioLanguage = language;  			ser.Save ();  			return false;  		}  	}  	break;  case 2:  	{  		String language = ser.DefaultSubtitleLanguage;  		if (Utils.DialogLanguage (ref language' true)) {  			ser.DefaultSubtitleLanguage = language;  			ser.Save ();  			return false;  		}  	}  	break;  case 3:  	if (Utils.DialogConfirm ("Are you sure?")) {  		JMMServerVM.Instance.clientBinaryHTTP.DeleteAnimeSeries (ser.AnimeSeriesID.Value' false' false);  		LoadFacade ();  		return false;  	}  	break;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuSeriesEdit,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	{  		String language = ser.DefaultAudioLanguage;  		if (Utils.DialogLanguage (ref language' false)) {  			ser.DefaultAudioLanguage = language;  			ser.Save ();  			return false;  		}  	}  	break;  case 2:  	{  		String language = ser.DefaultSubtitleLanguage;  		if (Utils.DialogLanguage (ref language' true)) {  			ser.DefaultSubtitleLanguage = language;  			ser.Save ();  			return false;  		}  	}  	break;  case 3:  	if (Utils.DialogConfirm ("Are you sure?")) {  		JMMServerVM.Instance.clientBinaryHTTP.DeleteAnimeSeries (ser.AnimeSeriesID.Value' false' false);  		LoadFacade ();  		return false;  	}  	break;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuSeries,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add ("Series Information");  	dlg.Add ("Mark all as watched");  	dlg.Add ("Mark all as unwatched");  	dlg.Add ("Databases >>>");  	dlg.Add ("Images >>>");  	dlg.Add ("Edit Series >>>");  	dlg.Add ("Random Episode");  	dlg.Add ("Post-processing >>>");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		ShowAnimeInfoWindow ();  		return false;  	case 2:// Mark ALL as Watched  	 {  		JMMServerHelper.SetWatchedStatusOnSeries (true' int.MaxValue' ser.AnimeSeriesID.Value);  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (ser.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM serTemp = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (serTemp);  		}  		LoadFacade ();  		return false;  	}  	case 3:// Mark ALL as Unwatched  	 {  		JMMServerHelper.SetWatchedStatusOnSeries (false' int.MaxValue' ser.AnimeSeriesID.Value);  		LoadFacade ();  		return false;  	}  	case 4:  		if (!ShowContextMenuDatabases (ser' currentMenu))  			return false;  		break;  	case 5:  		if (!ShowContextMenuImages (currentMenu))  			return false;  		break;  	case 6:  		if (!ShowContextMenuSeriesEdit (currentMenu))  			return false;  		break;  	case 7:  		RandomWindow_CurrentEpisode = null;  		RandomWindow_CurrentSeries = null;  		RandomWindow_LevelObject = ser;  		RandomWindow_RandomLevel = RandomSeriesEpisodeLevel.Series;  		RandomWindow_RandomType = RandomObjectType.Episode;  		GUIWindowManager.ActivateWindow (Constants.WindowIDs.RANDOM);  		return false;  	case 8:  		if (!ShowContextMenuPostProcessing (currentMenu))  			return false;  		break;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuSeries,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add ("Series Information");  	dlg.Add ("Mark all as watched");  	dlg.Add ("Mark all as unwatched");  	dlg.Add ("Databases >>>");  	dlg.Add ("Images >>>");  	dlg.Add ("Edit Series >>>");  	dlg.Add ("Random Episode");  	dlg.Add ("Post-processing >>>");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		ShowAnimeInfoWindow ();  		return false;  	case 2:// Mark ALL as Watched  	 {  		JMMServerHelper.SetWatchedStatusOnSeries (true' int.MaxValue' ser.AnimeSeriesID.Value);  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (ser.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM serTemp = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (serTemp);  		}  		LoadFacade ();  		return false;  	}  	case 3:// Mark ALL as Unwatched  	 {  		JMMServerHelper.SetWatchedStatusOnSeries (false' int.MaxValue' ser.AnimeSeriesID.Value);  		LoadFacade ();  		return false;  	}  	case 4:  		if (!ShowContextMenuDatabases (ser' currentMenu))  			return false;  		break;  	case 5:  		if (!ShowContextMenuImages (currentMenu))  			return false;  		break;  	case 6:  		if (!ShowContextMenuSeriesEdit (currentMenu))  			return false;  		break;  	case 7:  		RandomWindow_CurrentEpisode = null;  		RandomWindow_CurrentSeries = null;  		RandomWindow_LevelObject = ser;  		RandomWindow_RandomLevel = RandomSeriesEpisodeLevel.Series;  		RandomWindow_RandomType = RandomObjectType.Episode;  		GUIWindowManager.ActivateWindow (Constants.WindowIDs.RANDOM);  		return false;  	case 8:  		if (!ShowContextMenuPostProcessing (currentMenu))  			return false;  		break;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuSeries,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add ("Series Information");  	dlg.Add ("Mark all as watched");  	dlg.Add ("Mark all as unwatched");  	dlg.Add ("Databases >>>");  	dlg.Add ("Images >>>");  	dlg.Add ("Edit Series >>>");  	dlg.Add ("Random Episode");  	dlg.Add ("Post-processing >>>");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		ShowAnimeInfoWindow ();  		return false;  	case 2:// Mark ALL as Watched  	 {  		JMMServerHelper.SetWatchedStatusOnSeries (true' int.MaxValue' ser.AnimeSeriesID.Value);  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (ser.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM serTemp = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (serTemp);  		}  		LoadFacade ();  		return false;  	}  	case 3:// Mark ALL as Unwatched  	 {  		JMMServerHelper.SetWatchedStatusOnSeries (false' int.MaxValue' ser.AnimeSeriesID.Value);  		LoadFacade ();  		return false;  	}  	case 4:  		if (!ShowContextMenuDatabases (ser' currentMenu))  			return false;  		break;  	case 5:  		if (!ShowContextMenuImages (currentMenu))  			return false;  		break;  	case 6:  		if (!ShowContextMenuSeriesEdit (currentMenu))  			return false;  		break;  	case 7:  		RandomWindow_CurrentEpisode = null;  		RandomWindow_CurrentSeries = null;  		RandomWindow_LevelObject = ser;  		RandomWindow_RandomLevel = RandomSeriesEpisodeLevel.Series;  		RandomWindow_RandomType = RandomObjectType.Episode;  		GUIWindowManager.ActivateWindow (Constants.WindowIDs.RANDOM);  		return false;  	case 8:  		if (!ShowContextMenuPostProcessing (currentMenu))  			return false;  		break;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuSeries,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add ("Series Information");  	dlg.Add ("Mark all as watched");  	dlg.Add ("Mark all as unwatched");  	dlg.Add ("Databases >>>");  	dlg.Add ("Images >>>");  	dlg.Add ("Edit Series >>>");  	dlg.Add ("Random Episode");  	dlg.Add ("Post-processing >>>");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		ShowAnimeInfoWindow ();  		return false;  	case 2:// Mark ALL as Watched  	 {  		JMMServerHelper.SetWatchedStatusOnSeries (true' int.MaxValue' ser.AnimeSeriesID.Value);  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (ser.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM serTemp = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (serTemp);  		}  		LoadFacade ();  		return false;  	}  	case 3:// Mark ALL as Unwatched  	 {  		JMMServerHelper.SetWatchedStatusOnSeries (false' int.MaxValue' ser.AnimeSeriesID.Value);  		LoadFacade ();  		return false;  	}  	case 4:  		if (!ShowContextMenuDatabases (ser' currentMenu))  			return false;  		break;  	case 5:  		if (!ShowContextMenuImages (currentMenu))  			return false;  		break;  	case 6:  		if (!ShowContextMenuSeriesEdit (currentMenu))  			return false;  		break;  	case 7:  		RandomWindow_CurrentEpisode = null;  		RandomWindow_CurrentSeries = null;  		RandomWindow_LevelObject = ser;  		RandomWindow_RandomLevel = RandomSeriesEpisodeLevel.Series;  		RandomWindow_RandomType = RandomObjectType.Episode;  		GUIWindowManager.ActivateWindow (Constants.WindowIDs.RANDOM);  		return false;  	case 8:  		if (!ShowContextMenuPostProcessing (currentMenu))  			return false;  		break;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuSeries,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add ("Series Information");  	dlg.Add ("Mark all as watched");  	dlg.Add ("Mark all as unwatched");  	dlg.Add ("Databases >>>");  	dlg.Add ("Images >>>");  	dlg.Add ("Edit Series >>>");  	dlg.Add ("Random Episode");  	dlg.Add ("Post-processing >>>");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		ShowAnimeInfoWindow ();  		return false;  	case 2:// Mark ALL as Watched  	 {  		JMMServerHelper.SetWatchedStatusOnSeries (true' int.MaxValue' ser.AnimeSeriesID.Value);  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (ser.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM serTemp = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (serTemp);  		}  		LoadFacade ();  		return false;  	}  	case 3:// Mark ALL as Unwatched  	 {  		JMMServerHelper.SetWatchedStatusOnSeries (false' int.MaxValue' ser.AnimeSeriesID.Value);  		LoadFacade ();  		return false;  	}  	case 4:  		if (!ShowContextMenuDatabases (ser' currentMenu))  			return false;  		break;  	case 5:  		if (!ShowContextMenuImages (currentMenu))  			return false;  		break;  	case 6:  		if (!ShowContextMenuSeriesEdit (currentMenu))  			return false;  		break;  	case 7:  		RandomWindow_CurrentEpisode = null;  		RandomWindow_CurrentSeries = null;  		RandomWindow_LevelObject = ser;  		RandomWindow_RandomLevel = RandomSeriesEpisodeLevel.Series;  		RandomWindow_RandomType = RandomObjectType.Episode;  		GUIWindowManager.ActivateWindow (Constants.WindowIDs.RANDOM);  		return false;  	case 8:  		if (!ShowContextMenuPostProcessing (currentMenu))  			return false;  		break;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuSeries,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add ("Series Information");  	dlg.Add ("Mark all as watched");  	dlg.Add ("Mark all as unwatched");  	dlg.Add ("Databases >>>");  	dlg.Add ("Images >>>");  	dlg.Add ("Edit Series >>>");  	dlg.Add ("Random Episode");  	dlg.Add ("Post-processing >>>");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		ShowAnimeInfoWindow ();  		return false;  	case 2:// Mark ALL as Watched  	 {  		JMMServerHelper.SetWatchedStatusOnSeries (true' int.MaxValue' ser.AnimeSeriesID.Value);  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (ser.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM serTemp = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (serTemp);  		}  		LoadFacade ();  		return false;  	}  	case 3:// Mark ALL as Unwatched  	 {  		JMMServerHelper.SetWatchedStatusOnSeries (false' int.MaxValue' ser.AnimeSeriesID.Value);  		LoadFacade ();  		return false;  	}  	case 4:  		if (!ShowContextMenuDatabases (ser' currentMenu))  			return false;  		break;  	case 5:  		if (!ShowContextMenuImages (currentMenu))  			return false;  		break;  	case 6:  		if (!ShowContextMenuSeriesEdit (currentMenu))  			return false;  		break;  	case 7:  		RandomWindow_CurrentEpisode = null;  		RandomWindow_CurrentSeries = null;  		RandomWindow_LevelObject = ser;  		RandomWindow_RandomLevel = RandomSeriesEpisodeLevel.Series;  		RandomWindow_RandomType = RandomObjectType.Episode;  		GUIWindowManager.ActivateWindow (Constants.WindowIDs.RANDOM);  		return false;  	case 8:  		if (!ShowContextMenuPostProcessing (currentMenu))  			return false;  		break;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuSeries,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty)  		dlg.Add ("<<< " + previousMenu);  	dlg.Add ("Series Information");  	dlg.Add ("Mark all as watched");  	dlg.Add ("Mark all as unwatched");  	dlg.Add ("Databases >>>");  	dlg.Add ("Images >>>");  	dlg.Add ("Edit Series >>>");  	dlg.Add ("Random Episode");  	dlg.Add ("Post-processing >>>");  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	switch (selection) {  	case 0:  		//show previous  		return true;  	case 1:  		ShowAnimeInfoWindow ();  		return false;  	case 2:// Mark ALL as Watched  	 {  		JMMServerHelper.SetWatchedStatusOnSeries (true' int.MaxValue' ser.AnimeSeriesID.Value);  		JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (ser.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract != null) {  			AnimeSeriesVM serTemp = new AnimeSeriesVM (contract);  			Utils.PromptToRateSeriesOnCompletion (serTemp);  		}  		LoadFacade ();  		return false;  	}  	case 3:// Mark ALL as Unwatched  	 {  		JMMServerHelper.SetWatchedStatusOnSeries (false' int.MaxValue' ser.AnimeSeriesID.Value);  		LoadFacade ();  		return false;  	}  	case 4:  		if (!ShowContextMenuDatabases (ser' currentMenu))  			return false;  		break;  	case 5:  		if (!ShowContextMenuImages (currentMenu))  			return false;  		break;  	case 6:  		if (!ShowContextMenuSeriesEdit (currentMenu))  			return false;  		break;  	case 7:  		RandomWindow_CurrentEpisode = null;  		RandomWindow_CurrentSeries = null;  		RandomWindow_LevelObject = ser;  		RandomWindow_RandomLevel = RandomSeriesEpisodeLevel.Series;  		RandomWindow_RandomType = RandomObjectType.Episode;  		GUIWindowManager.ActivateWindow (Constants.WindowIDs.RANDOM);  		return false;  	case 8:  		if (!ShowContextMenuPostProcessing (currentMenu))  			return false;  		break;  	default:  		//close menu  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuSeries,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	ShowAnimeInfoWindow ();  	return false;  case 2:// Mark ALL as Watched   {  	JMMServerHelper.SetWatchedStatusOnSeries (true' int.MaxValue' ser.AnimeSeriesID.Value);  	JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (ser.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (contract != null) {  		AnimeSeriesVM serTemp = new AnimeSeriesVM (contract);  		Utils.PromptToRateSeriesOnCompletion (serTemp);  	}  	LoadFacade ();  	return false;  }  case 3:// Mark ALL as Unwatched   {  	JMMServerHelper.SetWatchedStatusOnSeries (false' int.MaxValue' ser.AnimeSeriesID.Value);  	LoadFacade ();  	return false;  }  case 4:  	if (!ShowContextMenuDatabases (ser' currentMenu))  		return false;  	break;  case 5:  	if (!ShowContextMenuImages (currentMenu))  		return false;  	break;  case 6:  	if (!ShowContextMenuSeriesEdit (currentMenu))  		return false;  	break;  case 7:  	RandomWindow_CurrentEpisode = null;  	RandomWindow_CurrentSeries = null;  	RandomWindow_LevelObject = ser;  	RandomWindow_RandomLevel = RandomSeriesEpisodeLevel.Series;  	RandomWindow_RandomType = RandomObjectType.Episode;  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.RANDOM);  	return false;  case 8:  	if (!ShowContextMenuPostProcessing (currentMenu))  		return false;  	break;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuSeries,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	ShowAnimeInfoWindow ();  	return false;  case 2:// Mark ALL as Watched   {  	JMMServerHelper.SetWatchedStatusOnSeries (true' int.MaxValue' ser.AnimeSeriesID.Value);  	JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (ser.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (contract != null) {  		AnimeSeriesVM serTemp = new AnimeSeriesVM (contract);  		Utils.PromptToRateSeriesOnCompletion (serTemp);  	}  	LoadFacade ();  	return false;  }  case 3:// Mark ALL as Unwatched   {  	JMMServerHelper.SetWatchedStatusOnSeries (false' int.MaxValue' ser.AnimeSeriesID.Value);  	LoadFacade ();  	return false;  }  case 4:  	if (!ShowContextMenuDatabases (ser' currentMenu))  		return false;  	break;  case 5:  	if (!ShowContextMenuImages (currentMenu))  		return false;  	break;  case 6:  	if (!ShowContextMenuSeriesEdit (currentMenu))  		return false;  	break;  case 7:  	RandomWindow_CurrentEpisode = null;  	RandomWindow_CurrentSeries = null;  	RandomWindow_LevelObject = ser;  	RandomWindow_RandomLevel = RandomSeriesEpisodeLevel.Series;  	RandomWindow_RandomType = RandomObjectType.Episode;  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.RANDOM);  	return false;  case 8:  	if (!ShowContextMenuPostProcessing (currentMenu))  		return false;  	break;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuSeries,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	ShowAnimeInfoWindow ();  	return false;  case 2:// Mark ALL as Watched   {  	JMMServerHelper.SetWatchedStatusOnSeries (true' int.MaxValue' ser.AnimeSeriesID.Value);  	JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (ser.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (contract != null) {  		AnimeSeriesVM serTemp = new AnimeSeriesVM (contract);  		Utils.PromptToRateSeriesOnCompletion (serTemp);  	}  	LoadFacade ();  	return false;  }  case 3:// Mark ALL as Unwatched   {  	JMMServerHelper.SetWatchedStatusOnSeries (false' int.MaxValue' ser.AnimeSeriesID.Value);  	LoadFacade ();  	return false;  }  case 4:  	if (!ShowContextMenuDatabases (ser' currentMenu))  		return false;  	break;  case 5:  	if (!ShowContextMenuImages (currentMenu))  		return false;  	break;  case 6:  	if (!ShowContextMenuSeriesEdit (currentMenu))  		return false;  	break;  case 7:  	RandomWindow_CurrentEpisode = null;  	RandomWindow_CurrentSeries = null;  	RandomWindow_LevelObject = ser;  	RandomWindow_RandomLevel = RandomSeriesEpisodeLevel.Series;  	RandomWindow_RandomType = RandomObjectType.Episode;  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.RANDOM);  	return false;  case 8:  	if (!ShowContextMenuPostProcessing (currentMenu))  		return false;  	break;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuSeries,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	ShowAnimeInfoWindow ();  	return false;  case 2:// Mark ALL as Watched   {  	JMMServerHelper.SetWatchedStatusOnSeries (true' int.MaxValue' ser.AnimeSeriesID.Value);  	JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (ser.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (contract != null) {  		AnimeSeriesVM serTemp = new AnimeSeriesVM (contract);  		Utils.PromptToRateSeriesOnCompletion (serTemp);  	}  	LoadFacade ();  	return false;  }  case 3:// Mark ALL as Unwatched   {  	JMMServerHelper.SetWatchedStatusOnSeries (false' int.MaxValue' ser.AnimeSeriesID.Value);  	LoadFacade ();  	return false;  }  case 4:  	if (!ShowContextMenuDatabases (ser' currentMenu))  		return false;  	break;  case 5:  	if (!ShowContextMenuImages (currentMenu))  		return false;  	break;  case 6:  	if (!ShowContextMenuSeriesEdit (currentMenu))  		return false;  	break;  case 7:  	RandomWindow_CurrentEpisode = null;  	RandomWindow_CurrentSeries = null;  	RandomWindow_LevelObject = ser;  	RandomWindow_RandomLevel = RandomSeriesEpisodeLevel.Series;  	RandomWindow_RandomType = RandomObjectType.Episode;  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.RANDOM);  	return false;  case 8:  	if (!ShowContextMenuPostProcessing (currentMenu))  		return false;  	break;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuSeries,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	ShowAnimeInfoWindow ();  	return false;  case 2:// Mark ALL as Watched   {  	JMMServerHelper.SetWatchedStatusOnSeries (true' int.MaxValue' ser.AnimeSeriesID.Value);  	JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (ser.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (contract != null) {  		AnimeSeriesVM serTemp = new AnimeSeriesVM (contract);  		Utils.PromptToRateSeriesOnCompletion (serTemp);  	}  	LoadFacade ();  	return false;  }  case 3:// Mark ALL as Unwatched   {  	JMMServerHelper.SetWatchedStatusOnSeries (false' int.MaxValue' ser.AnimeSeriesID.Value);  	LoadFacade ();  	return false;  }  case 4:  	if (!ShowContextMenuDatabases (ser' currentMenu))  		return false;  	break;  case 5:  	if (!ShowContextMenuImages (currentMenu))  		return false;  	break;  case 6:  	if (!ShowContextMenuSeriesEdit (currentMenu))  		return false;  	break;  case 7:  	RandomWindow_CurrentEpisode = null;  	RandomWindow_CurrentSeries = null;  	RandomWindow_LevelObject = ser;  	RandomWindow_RandomLevel = RandomSeriesEpisodeLevel.Series;  	RandomWindow_RandomType = RandomObjectType.Episode;  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.RANDOM);  	return false;  case 8:  	if (!ShowContextMenuPostProcessing (currentMenu))  		return false;  	break;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuSeries,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	ShowAnimeInfoWindow ();  	return false;  case 2:// Mark ALL as Watched   {  	JMMServerHelper.SetWatchedStatusOnSeries (true' int.MaxValue' ser.AnimeSeriesID.Value);  	JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (ser.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (contract != null) {  		AnimeSeriesVM serTemp = new AnimeSeriesVM (contract);  		Utils.PromptToRateSeriesOnCompletion (serTemp);  	}  	LoadFacade ();  	return false;  }  case 3:// Mark ALL as Unwatched   {  	JMMServerHelper.SetWatchedStatusOnSeries (false' int.MaxValue' ser.AnimeSeriesID.Value);  	LoadFacade ();  	return false;  }  case 4:  	if (!ShowContextMenuDatabases (ser' currentMenu))  		return false;  	break;  case 5:  	if (!ShowContextMenuImages (currentMenu))  		return false;  	break;  case 6:  	if (!ShowContextMenuSeriesEdit (currentMenu))  		return false;  	break;  case 7:  	RandomWindow_CurrentEpisode = null;  	RandomWindow_CurrentSeries = null;  	RandomWindow_LevelObject = ser;  	RandomWindow_RandomLevel = RandomSeriesEpisodeLevel.Series;  	RandomWindow_RandomType = RandomObjectType.Episode;  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.RANDOM);  	return false;  case 8:  	if (!ShowContextMenuPostProcessing (currentMenu))  		return false;  	break;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuSeries,The following statement contains a magic number: switch (selection) {  case 0:  	//show previous  	return true;  case 1:  	ShowAnimeInfoWindow ();  	return false;  case 2:// Mark ALL as Watched   {  	JMMServerHelper.SetWatchedStatusOnSeries (true' int.MaxValue' ser.AnimeSeriesID.Value);  	JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (ser.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (contract != null) {  		AnimeSeriesVM serTemp = new AnimeSeriesVM (contract);  		Utils.PromptToRateSeriesOnCompletion (serTemp);  	}  	LoadFacade ();  	return false;  }  case 3:// Mark ALL as Unwatched   {  	JMMServerHelper.SetWatchedStatusOnSeries (false' int.MaxValue' ser.AnimeSeriesID.Value);  	LoadFacade ();  	return false;  }  case 4:  	if (!ShowContextMenuDatabases (ser' currentMenu))  		return false;  	break;  case 5:  	if (!ShowContextMenuImages (currentMenu))  		return false;  	break;  case 6:  	if (!ShowContextMenuSeriesEdit (currentMenu))  		return false;  	break;  case 7:  	RandomWindow_CurrentEpisode = null;  	RandomWindow_CurrentSeries = null;  	RandomWindow_LevelObject = ser;  	RandomWindow_RandomLevel = RandomSeriesEpisodeLevel.Series;  	RandomWindow_RandomType = RandomObjectType.Episode;  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.RANDOM);  	return false;  case 8:  	if (!ShowContextMenuPostProcessing (currentMenu))  		return false;  	break;  default:  	//close menu  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuPostProcessing,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading (currentMenu);  	if (previousMenu != string.Empty) {  		dlg.Add ("<<< " + previousMenu);  		intLabel++;  	}  	dlg.Add ("Remove old preset association");  	intLabel++;  	foreach (string preset in presets) {  		dlg.Add ("Set preset: " + preset);  		// preset selected  		if (selectedPreset == preset)  			selectedLabel = intLabel;  		intLabel++;  	}  	dlg.SelectedLabel = selectedLabel;  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	selectedLabel = dlg.SelectedLabel;  	int selection = selectedLabel + ((previousMenu == string.Empty) ? 1 : 0);  	if (selection == 0) {  		//show previous  		return true;  	}  	else if (selection == -1) {  		//close menu  		return false;  	}  	else {  		string message = "";  		if (selection == 1) {  			//DB remove preset  			ffdshowHelper.deletePreset (episodes);  			message = "Old preset successfully removed.";  		}  		else {  			//DB associate serie/group with preset  			string choosenPreset = presets.ToArray () [selection - 2];  			ffdshowHelper.addPreset (episodes' choosenPreset);  			message = "Preset \"" + choosenPreset + "\" successfully added.";  		}  		Utils.DialogMsg ("Confirmation"' message);  		return false;  	}  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuPostProcessing,The following statement contains a magic number: if (selection == 0) {  	//show previous  	return true;  }  else if (selection == -1) {  	//close menu  	return false;  }  else {  	string message = "";  	if (selection == 1) {  		//DB remove preset  		ffdshowHelper.deletePreset (episodes);  		message = "Old preset successfully removed.";  	}  	else {  		//DB associate serie/group with preset  		string choosenPreset = presets.ToArray () [selection - 2];  		ffdshowHelper.addPreset (episodes' choosenPreset);  		message = "Preset \"" + choosenPreset + "\" successfully added.";  	}  	Utils.DialogMsg ("Confirmation"' message);  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuPostProcessing,The following statement contains a magic number: if (selection == -1) {  	//close menu  	return false;  }  else {  	string message = "";  	if (selection == 1) {  		//DB remove preset  		ffdshowHelper.deletePreset (episodes);  		message = "Old preset successfully removed.";  	}  	else {  		//DB associate serie/group with preset  		string choosenPreset = presets.ToArray () [selection - 2];  		ffdshowHelper.addPreset (episodes' choosenPreset);  		message = "Preset \"" + choosenPreset + "\" successfully added.";  	}  	Utils.DialogMsg ("Confirmation"' message);  	return false;  }  
Magic Number,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,ShowContextMenuPostProcessing,The following statement contains a magic number: if (selection == 1) {  	//DB remove preset  	ffdshowHelper.deletePreset (episodes);  	message = "Old preset successfully removed.";  }  else {  	//DB associate serie/group with preset  	string choosenPreset = presets.ToArray () [selection - 2];  	ffdshowHelper.addPreset (episodes' choosenPreset);  	message = "Preset \"" + choosenPreset + "\" successfully added.";  }  
Magic Number,Cornerstone.MP,AsyncImageResource,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\AsyncImageResource.cs,setFilenameWorker,The following statement contains a magic number: if (loading || threadsWaiting > 0) {  	threadsWaiting++;  	for (int i = 0; i < 5; i++) {  		Thread.Sleep (_delay / 5);  		if (localToken < pendingToken)  			return;  	}  	threadsWaiting--;  }  
Magic Number,Cornerstone.MP,AsyncImageResource,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\AsyncImageResource.cs,setFilenameWorker,The following statement contains a magic number: if (loading || threadsWaiting > 0) {  	threadsWaiting++;  	for (int i = 0; i < 5; i++) {  		Thread.Sleep (_delay / 5);  		if (localToken < pendingToken)  			return;  	}  	threadsWaiting--;  }  
Magic Number,Cornerstone.MP,AsyncImageResource,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\AsyncImageResource.cs,setFilenameWorker,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	Thread.Sleep (_delay / 5);  	if (localToken < pendingToken)  		return;  }  
Magic Number,Cornerstone.MP,AsyncImageResource,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\AsyncImageResource.cs,setFilenameWorker,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	Thread.Sleep (_delay / 5);  	if (localToken < pendingToken)  		return;  }  
Magic Number,Cornerstone.MP,AsyncImageResource,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\AsyncImageResource.cs,setFilenameWorker,The following statement contains a magic number: Thread.Sleep (_delay / 5);  
Magic Number,Cornerstone.MP,AsyncImageResource,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\AsyncImageResource.cs,setFilenameWorker,The following statement contains a magic number: Thread.Sleep (5000);  
Magic Number,MyAnimePlugin3.ConfigFiles,frmConfig,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\frmConfig.cs,cboFileFormat_SelectedIndexChanged,The following statement contains a magic number: switch (cboFileFormat.SelectedIndex) {  case 0:  	lblFileSelectionVars.Text = "Group (e.g. Datte Bayo)";  	break;  case 1:  	lblFileSelectionVars.Text = "Group Short (e.g DB)";  	break;  case 2:  	lblFileSelectionVars.Text = "Audio Codec (e.g OGG Vorbis)";  	break;  case 3:  	lblFileSelectionVars.Text = "File Codec (e.g XVid)";  	break;  case 4:  	lblFileSelectionVars.Text = "File Res (e.g 1280x720)";  	break;  case 5:  	lblFileSelectionVars.Text = "File Source (e.g DVD)";  	break;  }  
Magic Number,MyAnimePlugin3.ConfigFiles,frmConfig,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\frmConfig.cs,cboFileFormat_SelectedIndexChanged,The following statement contains a magic number: switch (cboFileFormat.SelectedIndex) {  case 0:  	lblFileSelectionVars.Text = "Group (e.g. Datte Bayo)";  	break;  case 1:  	lblFileSelectionVars.Text = "Group Short (e.g DB)";  	break;  case 2:  	lblFileSelectionVars.Text = "Audio Codec (e.g OGG Vorbis)";  	break;  case 3:  	lblFileSelectionVars.Text = "File Codec (e.g XVid)";  	break;  case 4:  	lblFileSelectionVars.Text = "File Res (e.g 1280x720)";  	break;  case 5:  	lblFileSelectionVars.Text = "File Source (e.g DVD)";  	break;  }  
Magic Number,MyAnimePlugin3.ConfigFiles,frmConfig,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\frmConfig.cs,cboFileFormat_SelectedIndexChanged,The following statement contains a magic number: switch (cboFileFormat.SelectedIndex) {  case 0:  	lblFileSelectionVars.Text = "Group (e.g. Datte Bayo)";  	break;  case 1:  	lblFileSelectionVars.Text = "Group Short (e.g DB)";  	break;  case 2:  	lblFileSelectionVars.Text = "Audio Codec (e.g OGG Vorbis)";  	break;  case 3:  	lblFileSelectionVars.Text = "File Codec (e.g XVid)";  	break;  case 4:  	lblFileSelectionVars.Text = "File Res (e.g 1280x720)";  	break;  case 5:  	lblFileSelectionVars.Text = "File Source (e.g DVD)";  	break;  }  
Magic Number,MyAnimePlugin3.ConfigFiles,frmConfig,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\frmConfig.cs,cboFileFormat_SelectedIndexChanged,The following statement contains a magic number: switch (cboFileFormat.SelectedIndex) {  case 0:  	lblFileSelectionVars.Text = "Group (e.g. Datte Bayo)";  	break;  case 1:  	lblFileSelectionVars.Text = "Group Short (e.g DB)";  	break;  case 2:  	lblFileSelectionVars.Text = "Audio Codec (e.g OGG Vorbis)";  	break;  case 3:  	lblFileSelectionVars.Text = "File Codec (e.g XVid)";  	break;  case 4:  	lblFileSelectionVars.Text = "File Res (e.g 1280x720)";  	break;  case 5:  	lblFileSelectionVars.Text = "File Source (e.g DVD)";  	break;  }  
Magic Number,MyAnimePlugin3.DataHelpers,FFDShowHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\FFDShowHelper.cs,DialogInfo,The following statement contains a magic number: if (settings.FfdshowNotificationsAutoClose) {  	dlgInfo.TimeOut = (settings.FfdshowNotificationsAutoCloseTime / 1000);  }  
Magic Number,MyAnimePlugin3.DataHelpers,FFDShowHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\FFDShowHelper.cs,DialogInfo,The following statement contains a magic number: dlgInfo.TimeOut = (settings.FfdshowNotificationsAutoCloseTime / 1000);  
Magic Number,MyAnimePlugin3.DataHelpers,MessageHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MessageHelper.cs,sendWindowsStringMessage,The following statement contains a magic number: if (hWnd > 0) {  	byte[] sarr = System.Text.Encoding.Default.GetBytes (msg);  	int len = sarr.Length;  	COPYDATASTRUCT cds;  	cds.dwData = (IntPtr)100;  	cds.lpData = msg;  	cds.cbData = len + 1;  	result = SendMessage (hWnd' WM_COPYDATA' wParam' ref cds);  }  
Magic Number,MyAnimePlugin3.DataHelpers,MessageHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MessageHelper.cs,sendWindowsStringMessage,The following statement contains a magic number: cds.dwData = (IntPtr)100;  
Magic Number,MyAnimePlugin3.DataHelpers,Crc32,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Crc32.cs,HashCore,The following statement contains a magic number: unchecked {  	while (--length >= 0) {  		crcValue = CrcTable [(crcValue ^ buffer [start++]) & 0xFF] ^ (crcValue >> 8);  	}  }  
Magic Number,MyAnimePlugin3.DataHelpers,Crc32,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Crc32.cs,HashCore,The following statement contains a magic number: while (--length >= 0) {  	crcValue = CrcTable [(crcValue ^ buffer [start++]) & 0xFF] ^ (crcValue >> 8);  }  
Magic Number,MyAnimePlugin3.DataHelpers,Crc32,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Crc32.cs,HashCore,The following statement contains a magic number: crcValue = CrcTable [(crcValue ^ buffer [start++]) & 0xFF] ^ (crcValue >> 8);  
Magic Number,MyAnimePlugin3.DataHelpers,Crc32,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Crc32.cs,HashFinal,The following statement contains a magic number: HashValue = new[] {  	(byte)((crcValue >> 24) & 0xff)'  	(byte)((crcValue >> 16) & 0xff)'  	(byte)((crcValue >> 8) & 0xff)'  	(byte)(crcValue & 0xff)  };  
Magic Number,MyAnimePlugin3.DataHelpers,Crc32,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Crc32.cs,HashFinal,The following statement contains a magic number: HashValue = new[] {  	(byte)((crcValue >> 24) & 0xff)'  	(byte)((crcValue >> 16) & 0xff)'  	(byte)((crcValue >> 8) & 0xff)'  	(byte)(crcValue & 0xff)  };  
Magic Number,MyAnimePlugin3.DataHelpers,Crc32,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Crc32.cs,HashFinal,The following statement contains a magic number: HashValue = new[] {  	(byte)((crcValue >> 24) & 0xff)'  	(byte)((crcValue >> 16) & 0xff)'  	(byte)((crcValue >> 8) & 0xff)'  	(byte)(crcValue & 0xff)  };  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (UseDll ()) {  	byte[] hash = new byte[56];  	Hashes rhash = new Hashes ();  	if (CalculateHashes_dll (strPath' ref hash' onHashProgress)) {  		rhash.ed2k = HashToString (hash' 0' 16);  		rhash.crc32 = HashToString (hash' 16' 4);  		rhash.md5 = HashToString (hash' 20' 16);  		rhash.sha1 = HashToString (hash' 36' 20);  	}  	else {  		rhash.ed2k = string.Empty;  		rhash.crc32 = string.Empty;  		rhash.md5 = string.Empty;  		rhash.sha1 = string.Empty;  	}  	return rhash;  }  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (UseDll ()) {  	byte[] hash = new byte[56];  	Hashes rhash = new Hashes ();  	if (CalculateHashes_dll (strPath' ref hash' onHashProgress)) {  		rhash.ed2k = HashToString (hash' 0' 16);  		rhash.crc32 = HashToString (hash' 16' 4);  		rhash.md5 = HashToString (hash' 20' 16);  		rhash.sha1 = HashToString (hash' 36' 20);  	}  	else {  		rhash.ed2k = string.Empty;  		rhash.crc32 = string.Empty;  		rhash.md5 = string.Empty;  		rhash.sha1 = string.Empty;  	}  	return rhash;  }  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (UseDll ()) {  	byte[] hash = new byte[56];  	Hashes rhash = new Hashes ();  	if (CalculateHashes_dll (strPath' ref hash' onHashProgress)) {  		rhash.ed2k = HashToString (hash' 0' 16);  		rhash.crc32 = HashToString (hash' 16' 4);  		rhash.md5 = HashToString (hash' 20' 16);  		rhash.sha1 = HashToString (hash' 36' 20);  	}  	else {  		rhash.ed2k = string.Empty;  		rhash.crc32 = string.Empty;  		rhash.md5 = string.Empty;  		rhash.sha1 = string.Empty;  	}  	return rhash;  }  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (UseDll ()) {  	byte[] hash = new byte[56];  	Hashes rhash = new Hashes ();  	if (CalculateHashes_dll (strPath' ref hash' onHashProgress)) {  		rhash.ed2k = HashToString (hash' 0' 16);  		rhash.crc32 = HashToString (hash' 16' 4);  		rhash.md5 = HashToString (hash' 20' 16);  		rhash.sha1 = HashToString (hash' 36' 20);  	}  	else {  		rhash.ed2k = string.Empty;  		rhash.crc32 = string.Empty;  		rhash.md5 = string.Empty;  		rhash.sha1 = string.Empty;  	}  	return rhash;  }  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (UseDll ()) {  	byte[] hash = new byte[56];  	Hashes rhash = new Hashes ();  	if (CalculateHashes_dll (strPath' ref hash' onHashProgress)) {  		rhash.ed2k = HashToString (hash' 0' 16);  		rhash.crc32 = HashToString (hash' 16' 4);  		rhash.md5 = HashToString (hash' 20' 16);  		rhash.sha1 = HashToString (hash' 36' 20);  	}  	else {  		rhash.ed2k = string.Empty;  		rhash.crc32 = string.Empty;  		rhash.md5 = string.Empty;  		rhash.sha1 = string.Empty;  	}  	return rhash;  }  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (UseDll ()) {  	byte[] hash = new byte[56];  	Hashes rhash = new Hashes ();  	if (CalculateHashes_dll (strPath' ref hash' onHashProgress)) {  		rhash.ed2k = HashToString (hash' 0' 16);  		rhash.crc32 = HashToString (hash' 16' 4);  		rhash.md5 = HashToString (hash' 20' 16);  		rhash.sha1 = HashToString (hash' 36' 20);  	}  	else {  		rhash.ed2k = string.Empty;  		rhash.crc32 = string.Empty;  		rhash.md5 = string.Empty;  		rhash.sha1 = string.Empty;  	}  	return rhash;  }  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (UseDll ()) {  	byte[] hash = new byte[56];  	Hashes rhash = new Hashes ();  	if (CalculateHashes_dll (strPath' ref hash' onHashProgress)) {  		rhash.ed2k = HashToString (hash' 0' 16);  		rhash.crc32 = HashToString (hash' 16' 4);  		rhash.md5 = HashToString (hash' 20' 16);  		rhash.sha1 = HashToString (hash' 36' 20);  	}  	else {  		rhash.ed2k = string.Empty;  		rhash.crc32 = string.Empty;  		rhash.md5 = string.Empty;  		rhash.sha1 = string.Empty;  	}  	return rhash;  }  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (UseDll ()) {  	byte[] hash = new byte[56];  	Hashes rhash = new Hashes ();  	if (CalculateHashes_dll (strPath' ref hash' onHashProgress)) {  		rhash.ed2k = HashToString (hash' 0' 16);  		rhash.crc32 = HashToString (hash' 16' 4);  		rhash.md5 = HashToString (hash' 20' 16);  		rhash.sha1 = HashToString (hash' 36' 20);  	}  	else {  		rhash.ed2k = string.Empty;  		rhash.crc32 = string.Empty;  		rhash.md5 = string.Empty;  		rhash.sha1 = string.Empty;  	}  	return rhash;  }  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (CalculateHashes_dll (strPath' ref hash' onHashProgress)) {  	rhash.ed2k = HashToString (hash' 0' 16);  	rhash.crc32 = HashToString (hash' 16' 4);  	rhash.md5 = HashToString (hash' 20' 16);  	rhash.sha1 = HashToString (hash' 36' 20);  }  else {  	rhash.ed2k = string.Empty;  	rhash.crc32 = string.Empty;  	rhash.md5 = string.Empty;  	rhash.sha1 = string.Empty;  }  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (CalculateHashes_dll (strPath' ref hash' onHashProgress)) {  	rhash.ed2k = HashToString (hash' 0' 16);  	rhash.crc32 = HashToString (hash' 16' 4);  	rhash.md5 = HashToString (hash' 20' 16);  	rhash.sha1 = HashToString (hash' 36' 20);  }  else {  	rhash.ed2k = string.Empty;  	rhash.crc32 = string.Empty;  	rhash.md5 = string.Empty;  	rhash.sha1 = string.Empty;  }  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (CalculateHashes_dll (strPath' ref hash' onHashProgress)) {  	rhash.ed2k = HashToString (hash' 0' 16);  	rhash.crc32 = HashToString (hash' 16' 4);  	rhash.md5 = HashToString (hash' 20' 16);  	rhash.sha1 = HashToString (hash' 36' 20);  }  else {  	rhash.ed2k = string.Empty;  	rhash.crc32 = string.Empty;  	rhash.md5 = string.Empty;  	rhash.sha1 = string.Empty;  }  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (CalculateHashes_dll (strPath' ref hash' onHashProgress)) {  	rhash.ed2k = HashToString (hash' 0' 16);  	rhash.crc32 = HashToString (hash' 16' 4);  	rhash.md5 = HashToString (hash' 20' 16);  	rhash.sha1 = HashToString (hash' 36' 20);  }  else {  	rhash.ed2k = string.Empty;  	rhash.crc32 = string.Empty;  	rhash.md5 = string.Empty;  	rhash.sha1 = string.Empty;  }  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (CalculateHashes_dll (strPath' ref hash' onHashProgress)) {  	rhash.ed2k = HashToString (hash' 0' 16);  	rhash.crc32 = HashToString (hash' 16' 4);  	rhash.md5 = HashToString (hash' 20' 16);  	rhash.sha1 = HashToString (hash' 36' 20);  }  else {  	rhash.ed2k = string.Empty;  	rhash.crc32 = string.Empty;  	rhash.md5 = string.Empty;  	rhash.sha1 = string.Empty;  }  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (CalculateHashes_dll (strPath' ref hash' onHashProgress)) {  	rhash.ed2k = HashToString (hash' 0' 16);  	rhash.crc32 = HashToString (hash' 16' 4);  	rhash.md5 = HashToString (hash' 20' 16);  	rhash.sha1 = HashToString (hash' 36' 20);  }  else {  	rhash.ed2k = string.Empty;  	rhash.crc32 = string.Empty;  	rhash.md5 = string.Empty;  	rhash.sha1 = string.Empty;  }  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (CalculateHashes_dll (strPath' ref hash' onHashProgress)) {  	rhash.ed2k = HashToString (hash' 0' 16);  	rhash.crc32 = HashToString (hash' 16' 4);  	rhash.md5 = HashToString (hash' 20' 16);  	rhash.sha1 = HashToString (hash' 36' 20);  }  else {  	rhash.ed2k = string.Empty;  	rhash.crc32 = string.Empty;  	rhash.md5 = string.Empty;  	rhash.sha1 = string.Empty;  }  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes,The following statement contains a magic number: rhash.ed2k = HashToString (hash' 0' 16);  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes,The following statement contains a magic number: rhash.crc32 = HashToString (hash' 16' 4);  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes,The following statement contains a magic number: rhash.crc32 = HashToString (hash' 16' 4);  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes,The following statement contains a magic number: rhash.md5 = HashToString (hash' 20' 16);  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes,The following statement contains a magic number: rhash.md5 = HashToString (hash' 20' 16);  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes,The following statement contains a magic number: rhash.sha1 = HashToString (hash' 36' 20);  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes,The following statement contains a magic number: rhash.sha1 = HashToString (hash' 36' 20);  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes_here,The following statement contains a magic number: while (nBytesRemaining > 0) {  	iChunkCount++;  	Console.WriteLine ("Hashing Chunk: " + iChunkCount.ToString ());  	int nBytesRead = fs.Read (ByteArray' 0' nBytesToRead);  	byte[] baHash = md4.ComputeHash (ByteArray' 0' nBytesRead);  	md5.TransformBlock (ByteArray' 0' nBytesRead' ByteArray' 0);  	sha1.TransformBlock (ByteArray' 0' nBytesRead' ByteArray' 0);  	crc32.TransformBlock (ByteArray' 0' nBytesRead' ByteArray' 0);  	int percentComplete = (int)((float)iChunkCount / (float)nBlocks * 100);  	if (onHashProgress != null)  		onHashProgress (strPath' percentComplete);  	int j = (int)((iChunkCount - 1) * 16);  	for (int i = 0; i < 16; i++)  		baED2KHash [j + i] = baHash [i];  	iOffSet += lChunkSize;  	nBytesRemaining = nBytes - iOffSet;  	if (nBytesRemaining < lChunkSize)  		nBytesToRead = (int)nBytesRemaining;  }  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes_here,The following statement contains a magic number: while (nBytesRemaining > 0) {  	iChunkCount++;  	Console.WriteLine ("Hashing Chunk: " + iChunkCount.ToString ());  	int nBytesRead = fs.Read (ByteArray' 0' nBytesToRead);  	byte[] baHash = md4.ComputeHash (ByteArray' 0' nBytesRead);  	md5.TransformBlock (ByteArray' 0' nBytesRead' ByteArray' 0);  	sha1.TransformBlock (ByteArray' 0' nBytesRead' ByteArray' 0);  	crc32.TransformBlock (ByteArray' 0' nBytesRead' ByteArray' 0);  	int percentComplete = (int)((float)iChunkCount / (float)nBlocks * 100);  	if (onHashProgress != null)  		onHashProgress (strPath' percentComplete);  	int j = (int)((iChunkCount - 1) * 16);  	for (int i = 0; i < 16; i++)  		baED2KHash [j + i] = baHash [i];  	iOffSet += lChunkSize;  	nBytesRemaining = nBytes - iOffSet;  	if (nBytesRemaining < lChunkSize)  		nBytesToRead = (int)nBytesRemaining;  }  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes_here,The following statement contains a magic number: while (nBytesRemaining > 0) {  	iChunkCount++;  	Console.WriteLine ("Hashing Chunk: " + iChunkCount.ToString ());  	int nBytesRead = fs.Read (ByteArray' 0' nBytesToRead);  	byte[] baHash = md4.ComputeHash (ByteArray' 0' nBytesRead);  	md5.TransformBlock (ByteArray' 0' nBytesRead' ByteArray' 0);  	sha1.TransformBlock (ByteArray' 0' nBytesRead' ByteArray' 0);  	crc32.TransformBlock (ByteArray' 0' nBytesRead' ByteArray' 0);  	int percentComplete = (int)((float)iChunkCount / (float)nBlocks * 100);  	if (onHashProgress != null)  		onHashProgress (strPath' percentComplete);  	int j = (int)((iChunkCount - 1) * 16);  	for (int i = 0; i < 16; i++)  		baED2KHash [j + i] = baHash [i];  	iOffSet += lChunkSize;  	nBytesRemaining = nBytes - iOffSet;  	if (nBytesRemaining < lChunkSize)  		nBytesToRead = (int)nBytesRemaining;  }  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes_here,The following statement contains a magic number: for (int i = 0; i < 16; i++)  	baED2KHash [j + i] = baHash [i];  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes_here,The following statement contains a magic number: if (onHashProgress != null)  	onHashProgress (strPath' 100);  
Magic Number,MyAnimePlugin3.DataHelpers,Hasher,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\Hasher.cs,CalculateHashes_here,The following statement contains a magic number: onHashProgress (strPath' 100);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4,The following statement contains a magic number: HashSizeValue = 128;  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Managed,The following statement contains a magic number: state = new uint[4];  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Managed,The following statement contains a magic number: count = new uint[2];  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Managed,The following statement contains a magic number: buffer = new byte[64];  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Managed,The following statement contains a magic number: digest = new byte[16];  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Managed,The following statement contains a magic number: x = new uint[16];  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Initialize,The following statement contains a magic number: state [2] = 0x98badcfe;  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Initialize,The following statement contains a magic number: state [3] = 0x10325476;  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Initialize,The following statement contains a magic number: Array.Clear (buffer' 0' 64);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Initialize,The following statement contains a magic number: Array.Clear (x' 0' 16);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,HashCore,The following statement contains a magic number: count [0] += (uint)(cbSize << 3);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,HashCore,The following statement contains a magic number: if (count [0] < (cbSize << 3))  	count [1]++;  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,HashCore,The following statement contains a magic number: count [1] += (uint)(cbSize >> 29);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,HashCore,The following statement contains a magic number: if (cbSize >= partLen) {  	//MD4_memcpy((POINTER)&context->buffer[index]' (POINTER)input' partLen);  	Buffer.BlockCopy (array' ibStart' buffer' index' partLen);  	MD4Transform (state' buffer' 0);  	for (i = partLen; i + 63 < cbSize; i += 64) {  		// MD4Transform (context->state' &input[i]);  		MD4Transform (state' array' i);  	}  	index = 0;  }  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,HashCore,The following statement contains a magic number: if (cbSize >= partLen) {  	//MD4_memcpy((POINTER)&context->buffer[index]' (POINTER)input' partLen);  	Buffer.BlockCopy (array' ibStart' buffer' index' partLen);  	MD4Transform (state' buffer' 0);  	for (i = partLen; i + 63 < cbSize; i += 64) {  		// MD4Transform (context->state' &input[i]);  		MD4Transform (state' array' i);  	}  	index = 0;  }  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,HashCore,The following statement contains a magic number: for (i = partLen; i + 63 < cbSize; i += 64) {  	// MD4Transform (context->state' &input[i]);  	MD4Transform (state' array' i);  }  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,HashCore,The following statement contains a magic number: for (i = partLen; i + 63 < cbSize; i += 64) {  	// MD4Transform (context->state' &input[i]);  	MD4Transform (state' array' i);  }  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,HashCore,The following statement contains a magic number: i += 64
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,HashFinal,The following statement contains a magic number: HashCore (bits' 0' 8);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,ROL,The following statement contains a magic number: return (uint)(((x) << (n)) | ((x) >> (32 - (n))));  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Encode,The following statement contains a magic number: for (int i = 0' j = 0; j < output.Length; i++' j += 4) {  	output [j] = (byte)(input [i]);  	output [j + 1] = (byte)(input [i] >> 8);  	output [j + 2] = (byte)(input [i] >> 16);  	output [j + 3] = (byte)(input [i] >> 24);  }  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Encode,The following statement contains a magic number: for (int i = 0' j = 0; j < output.Length; i++' j += 4) {  	output [j] = (byte)(input [i]);  	output [j + 1] = (byte)(input [i] >> 8);  	output [j + 2] = (byte)(input [i] >> 16);  	output [j + 3] = (byte)(input [i] >> 24);  }  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Encode,The following statement contains a magic number: for (int i = 0' j = 0; j < output.Length; i++' j += 4) {  	output [j] = (byte)(input [i]);  	output [j + 1] = (byte)(input [i] >> 8);  	output [j + 2] = (byte)(input [i] >> 16);  	output [j + 3] = (byte)(input [i] >> 24);  }  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Encode,The following statement contains a magic number: for (int i = 0' j = 0; j < output.Length; i++' j += 4) {  	output [j] = (byte)(input [i]);  	output [j + 1] = (byte)(input [i] >> 8);  	output [j + 2] = (byte)(input [i] >> 16);  	output [j + 3] = (byte)(input [i] >> 24);  }  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Encode,The following statement contains a magic number: for (int i = 0' j = 0; j < output.Length; i++' j += 4) {  	output [j] = (byte)(input [i]);  	output [j + 1] = (byte)(input [i] >> 8);  	output [j + 2] = (byte)(input [i] >> 16);  	output [j + 3] = (byte)(input [i] >> 24);  }  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Encode,The following statement contains a magic number: for (int i = 0' j = 0; j < output.Length; i++' j += 4) {  	output [j] = (byte)(input [i]);  	output [j + 1] = (byte)(input [i] >> 8);  	output [j + 2] = (byte)(input [i] >> 16);  	output [j + 3] = (byte)(input [i] >> 24);  }  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Encode,The following statement contains a magic number: j += 4
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Encode,The following statement contains a magic number: output [j + 1] = (byte)(input [i] >> 8);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Encode,The following statement contains a magic number: output [j + 2] = (byte)(input [i] >> 16);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Encode,The following statement contains a magic number: output [j + 2] = (byte)(input [i] >> 16);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Encode,The following statement contains a magic number: output [j + 3] = (byte)(input [i] >> 24);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Encode,The following statement contains a magic number: output [j + 3] = (byte)(input [i] >> 24);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Decode,The following statement contains a magic number: for (int i = 0' j = index; i < output.Length; i++' j += 4) {  	output [i] = (uint)((input [j]) | (input [j + 1] << 8) | (input [j + 2] << 16) | (input [j + 3] << 24));  }  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Decode,The following statement contains a magic number: for (int i = 0' j = index; i < output.Length; i++' j += 4) {  	output [i] = (uint)((input [j]) | (input [j + 1] << 8) | (input [j + 2] << 16) | (input [j + 3] << 24));  }  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Decode,The following statement contains a magic number: for (int i = 0' j = index; i < output.Length; i++' j += 4) {  	output [i] = (uint)((input [j]) | (input [j + 1] << 8) | (input [j + 2] << 16) | (input [j + 3] << 24));  }  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Decode,The following statement contains a magic number: for (int i = 0' j = index; i < output.Length; i++' j += 4) {  	output [i] = (uint)((input [j]) | (input [j + 1] << 8) | (input [j + 2] << 16) | (input [j + 3] << 24));  }  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Decode,The following statement contains a magic number: for (int i = 0' j = index; i < output.Length; i++' j += 4) {  	output [i] = (uint)((input [j]) | (input [j + 1] << 8) | (input [j + 2] << 16) | (input [j + 3] << 24));  }  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Decode,The following statement contains a magic number: for (int i = 0' j = index; i < output.Length; i++' j += 4) {  	output [i] = (uint)((input [j]) | (input [j + 1] << 8) | (input [j + 2] << 16) | (input [j + 3] << 24));  }  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Decode,The following statement contains a magic number: j += 4
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Decode,The following statement contains a magic number: output [i] = (uint)((input [j]) | (input [j + 1] << 8) | (input [j + 2] << 16) | (input [j + 3] << 24));  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Decode,The following statement contains a magic number: output [i] = (uint)((input [j]) | (input [j + 1] << 8) | (input [j + 2] << 16) | (input [j + 3] << 24));  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Decode,The following statement contains a magic number: output [i] = (uint)((input [j]) | (input [j + 1] << 8) | (input [j + 2] << 16) | (input [j + 3] << 24));  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Decode,The following statement contains a magic number: output [i] = (uint)((input [j]) | (input [j + 1] << 8) | (input [j + 2] << 16) | (input [j + 3] << 24));  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,Decode,The following statement contains a magic number: output [i] = (uint)((input [j]) | (input [j + 1] << 8) | (input [j + 2] << 16) | (input [j + 3] << 24));  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref c' d' a' b' x [2]' S13);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref b' c' d' a' x [3]' S14);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref a' b' c' d' x [4]' S11);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref d' a' b' c' x [5]' S12);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref c' d' a' b' x [6]' S13);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref b' c' d' a' x [7]' S14);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref a' b' c' d' x [8]' S11);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref d' a' b' c' x [9]' S12);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref c' d' a' b' x [10]' S13);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref b' c' d' a' x [11]' S14);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref a' b' c' d' x [12]' S11);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref d' a' b' c' x [13]' S12);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref c' d' a' b' x [14]' S13);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref b' c' d' a' x [15]' S14);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref d' a' b' c' x [4]' S22);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref c' d' a' b' x [8]' S23);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref b' c' d' a' x [12]' S24);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref d' a' b' c' x [5]' S22);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref c' d' a' b' x [9]' S23);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref b' c' d' a' x [13]' S24);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref a' b' c' d' x [2]' S21);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref d' a' b' c' x [6]' S22);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref c' d' a' b' x [10]' S23);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref b' c' d' a' x [14]' S24);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref a' b' c' d' x [3]' S21);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref d' a' b' c' x [7]' S22);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref c' d' a' b' x [11]' S23);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref b' c' d' a' x [15]' S24);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref d' a' b' c' x [8]' S32);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref c' d' a' b' x [4]' S33);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref b' c' d' a' x [12]' S34);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref a' b' c' d' x [2]' S31);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref d' a' b' c' x [10]' S32);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref c' d' a' b' x [6]' S33);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref b' c' d' a' x [14]' S34);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref d' a' b' c' x [9]' S32);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref c' d' a' b' x [5]' S33);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref b' c' d' a' x [13]' S34);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref a' b' c' d' x [3]' S31);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref d' a' b' c' x [11]' S32);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref c' d' a' b' x [7]' S33);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref b' c' d' a' x [15]' S34);  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: state [2] += c;  
Magic Number,MyAnimePlugin3.DataHelpers,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4Managed.cs,MD4Transform,The following statement contains a magic number: state [3] += d;  
Magic Number,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,Login,The following statement contains a magic number: try {  	CookieContainer container = new CookieContainer ();  	string formUrl = "http://animebyt.es/login.php";  	// NOTE: This is the URL the form POSTs to' not the URL of the form (you can find this in the "action" attribute of the HTML's form tag  	string formParams = string.Format ("username={0}&password={1}"' username' password);  	HttpWebRequest req = (HttpWebRequest)WebRequest.Create (formUrl);  	req.ContentType = "application/x-www-form-urlencoded";  	req.Method = "POST";  	req.CookieContainer = container;  	req.UserAgent = "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)";  	req.Headers.Add (HttpRequestHeader.AcceptEncoding' "gzip'deflate");  	req.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;  	byte[] bytes = Encoding.ASCII.GetBytes (formParams);  	req.ContentLength = bytes.Length;  	using (Stream os = req.GetRequestStream ()) {  		os.Write (bytes' 0' bytes.Length);  	}  	HttpWebResponse WebResponse = (HttpWebResponse)req.GetResponse ();  	Stream responseStream = WebResponse.GetResponseStream ();  	String enco = WebResponse.CharacterSet;  	Encoding encoding = null;  	if (!String.IsNullOrEmpty (enco))  		encoding = Encoding.GetEncoding (WebResponse.CharacterSet);  	if (encoding == null)  		encoding = Encoding.Default;  	StreamReader Reader = new StreamReader (responseStream' encoding);  	string output = Reader.ReadToEnd ();  	if (container.Count < 3)  		return "";  	//Grab the cookie we just got back for this specifc page  	return container.GetCookieHeader (new Uri ("http://animebyt.es/index.php"));  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write ("Login: " + ex.ToString ());  	return "";  }  
Magic Number,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,Login,The following statement contains a magic number: if (container.Count < 3)  	return "";  
Magic Number,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,ParseSource,The following statement contains a magic number: while (pos > 0) {  	if (pos <= 0)  		break;  	//int posnameStart = output.IndexOf(nameStart' pos + 1);  	int posnameStart2 = output.IndexOf (nameStart2' pos + nameStart.Length);  	int posnameEnd = output.IndexOf (nameEnd' posnameStart2 + nameStart2.Length + 1);  	string torName = output.Substring (posnameStart2 + nameStart2.Length' posnameEnd - posnameStart2 - nameStart2.Length);  	// remove html codes  	torName = HttpUtility.HtmlDecode (torName);  	int posTypeStart = output.IndexOf (typeStart' posnameEnd + 1);  	int posTypeEnd = output.IndexOf (typeEnd' posTypeStart + 1);  	string torType = output.Substring (posTypeStart + typeStart.Length' posTypeEnd - posTypeStart - typeStart.Length);  	// get all the torrents  	// find the section start and end  	int posTorSectionStart = output.IndexOf (torrentSectionStart' posTypeEnd + 1);  	int posTorSectionEnd = output.IndexOf (torrentSectionEnd' posTorSectionStart + 1);  	// find all the torrents  	int posTorDownloadStart = output.IndexOf (torDownloadStart' posTorSectionStart + 1);  	while (posTorDownloadStart < posTorSectionEnd && posTorDownloadStart > 0) {  		int posTorDownloadEnd = output.IndexOf (torDownloadEnd' posTorDownloadStart + 9);  		string torDownloadLink = output.Substring (posTorDownloadStart + 9' posTorDownloadEnd - posTorDownloadStart - 9);  		torDownloadLink = HttpUtility.HtmlDecode (torDownloadLink);  		int posTorInfoPreStart = output.IndexOf (torInfoPreStart' posTorDownloadEnd + 1);  		int posTorInfoStart = output.IndexOf (torInfoStart' posTorInfoPreStart + 1);  		int posTorInfoEnd = output.IndexOf (torInfoEnd' posTorInfoStart + 1);  		string torInfo = output.Substring (posTorInfoStart + 1' posTorInfoEnd - posTorInfoStart - 1);  		// TODO - extract out <img> imfomation  		// <img src="static/common/hentaic.png" alt="Hentai" title="This torrent is of censored hentai (18+) material!" />  		// <img src="static/common/flicon.png" alt="Freeleech!" title="This torrent is freeleech. Remember to seed!" />  		int posImgStart = torInfo.IndexOf ("<img src="' 0);  		if (posImgStart >= 0) {  			bool hentai = torInfo.ToUpper ().Contains (hentaiTag.ToUpper ());  			bool freeLeech = torInfo.ToUpper ().Contains (leechTag.ToUpper ());  			// remove the img alts  			torInfo = torInfo.Substring (0' posImgStart - 2);  			if (hentai)  				torInfo = torInfo + " [hentai]";  			if (freeLeech)  				torInfo = torInfo + " [FREE Leech]";  		}  		int posTorSizeStart = output.IndexOf (torSizeStart' posTorInfoEnd + 1);  		int posTorSizeEnd = output.IndexOf (torSizeEnd' posTorSizeStart + 1);  		string torSize = output.Substring (posTorSizeStart + torSizeStart.Length' posTorSizeEnd - posTorSizeStart - torSizeStart.Length);  		int posTorSeedStart = output.IndexOf (torSeedStart' posTorSizeEnd + 1);  		int posTorSeedEnd = output.IndexOf (torSeedEnd' posTorSeedStart + 1);  		string torSeed = output.Substring (posTorSeedStart + torSeedStart.Length' posTorSeedEnd - posTorSeedStart - torSeedStart.Length);  		int posTorLeechStart = output.IndexOf (torLeechStart' posTorSeedEnd + 1);  		int posTorLeechEnd = output.IndexOf (torLeechEnd' posTorLeechStart + 1);  		string torLeech = output.Substring (posTorLeechStart + torLeechStart.Length' posTorLeechEnd - posTorLeechStart - torLeechStart.Length);  		TorrentLink torrentLink = new TorrentLink ();  		torrentLink.Source = this.GetSourceName ();  		torrentLink.SourceLong = this.GetSourceLongName ();  		torrentLink.TorrentDownloadLink = string.Format (@"http://animebyt.es/{0}"' torDownloadLink);  		torrentLink.TorrentLinkURL = "";  		torrentLink.TorrentName = torName + " - " + torInfo;  		torrentLink.Size = torSize.Trim ();  		torrentLink.Seeders = torSeed.Trim ();  		torrentLink.Leechers = torLeech.Trim ();  		torLinks.Add (torrentLink);  		// find the next download link  		posTorDownloadStart = output.IndexOf (torDownloadStart' posTorLeechEnd + 1);  	}  	// find the next torrent group  	pos = output.IndexOf (nameStart' pos + 3);  }  
Magic Number,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,ParseSource,The following statement contains a magic number: while (pos > 0) {  	if (pos <= 0)  		break;  	//int posnameStart = output.IndexOf(nameStart' pos + 1);  	int posnameStart2 = output.IndexOf (nameStart2' pos + nameStart.Length);  	int posnameEnd = output.IndexOf (nameEnd' posnameStart2 + nameStart2.Length + 1);  	string torName = output.Substring (posnameStart2 + nameStart2.Length' posnameEnd - posnameStart2 - nameStart2.Length);  	// remove html codes  	torName = HttpUtility.HtmlDecode (torName);  	int posTypeStart = output.IndexOf (typeStart' posnameEnd + 1);  	int posTypeEnd = output.IndexOf (typeEnd' posTypeStart + 1);  	string torType = output.Substring (posTypeStart + typeStart.Length' posTypeEnd - posTypeStart - typeStart.Length);  	// get all the torrents  	// find the section start and end  	int posTorSectionStart = output.IndexOf (torrentSectionStart' posTypeEnd + 1);  	int posTorSectionEnd = output.IndexOf (torrentSectionEnd' posTorSectionStart + 1);  	// find all the torrents  	int posTorDownloadStart = output.IndexOf (torDownloadStart' posTorSectionStart + 1);  	while (posTorDownloadStart < posTorSectionEnd && posTorDownloadStart > 0) {  		int posTorDownloadEnd = output.IndexOf (torDownloadEnd' posTorDownloadStart + 9);  		string torDownloadLink = output.Substring (posTorDownloadStart + 9' posTorDownloadEnd - posTorDownloadStart - 9);  		torDownloadLink = HttpUtility.HtmlDecode (torDownloadLink);  		int posTorInfoPreStart = output.IndexOf (torInfoPreStart' posTorDownloadEnd + 1);  		int posTorInfoStart = output.IndexOf (torInfoStart' posTorInfoPreStart + 1);  		int posTorInfoEnd = output.IndexOf (torInfoEnd' posTorInfoStart + 1);  		string torInfo = output.Substring (posTorInfoStart + 1' posTorInfoEnd - posTorInfoStart - 1);  		// TODO - extract out <img> imfomation  		// <img src="static/common/hentaic.png" alt="Hentai" title="This torrent is of censored hentai (18+) material!" />  		// <img src="static/common/flicon.png" alt="Freeleech!" title="This torrent is freeleech. Remember to seed!" />  		int posImgStart = torInfo.IndexOf ("<img src="' 0);  		if (posImgStart >= 0) {  			bool hentai = torInfo.ToUpper ().Contains (hentaiTag.ToUpper ());  			bool freeLeech = torInfo.ToUpper ().Contains (leechTag.ToUpper ());  			// remove the img alts  			torInfo = torInfo.Substring (0' posImgStart - 2);  			if (hentai)  				torInfo = torInfo + " [hentai]";  			if (freeLeech)  				torInfo = torInfo + " [FREE Leech]";  		}  		int posTorSizeStart = output.IndexOf (torSizeStart' posTorInfoEnd + 1);  		int posTorSizeEnd = output.IndexOf (torSizeEnd' posTorSizeStart + 1);  		string torSize = output.Substring (posTorSizeStart + torSizeStart.Length' posTorSizeEnd - posTorSizeStart - torSizeStart.Length);  		int posTorSeedStart = output.IndexOf (torSeedStart' posTorSizeEnd + 1);  		int posTorSeedEnd = output.IndexOf (torSeedEnd' posTorSeedStart + 1);  		string torSeed = output.Substring (posTorSeedStart + torSeedStart.Length' posTorSeedEnd - posTorSeedStart - torSeedStart.Length);  		int posTorLeechStart = output.IndexOf (torLeechStart' posTorSeedEnd + 1);  		int posTorLeechEnd = output.IndexOf (torLeechEnd' posTorLeechStart + 1);  		string torLeech = output.Substring (posTorLeechStart + torLeechStart.Length' posTorLeechEnd - posTorLeechStart - torLeechStart.Length);  		TorrentLink torrentLink = new TorrentLink ();  		torrentLink.Source = this.GetSourceName ();  		torrentLink.SourceLong = this.GetSourceLongName ();  		torrentLink.TorrentDownloadLink = string.Format (@"http://animebyt.es/{0}"' torDownloadLink);  		torrentLink.TorrentLinkURL = "";  		torrentLink.TorrentName = torName + " - " + torInfo;  		torrentLink.Size = torSize.Trim ();  		torrentLink.Seeders = torSeed.Trim ();  		torrentLink.Leechers = torLeech.Trim ();  		torLinks.Add (torrentLink);  		// find the next download link  		posTorDownloadStart = output.IndexOf (torDownloadStart' posTorLeechEnd + 1);  	}  	// find the next torrent group  	pos = output.IndexOf (nameStart' pos + 3);  }  
Magic Number,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,ParseSource,The following statement contains a magic number: while (pos > 0) {  	if (pos <= 0)  		break;  	//int posnameStart = output.IndexOf(nameStart' pos + 1);  	int posnameStart2 = output.IndexOf (nameStart2' pos + nameStart.Length);  	int posnameEnd = output.IndexOf (nameEnd' posnameStart2 + nameStart2.Length + 1);  	string torName = output.Substring (posnameStart2 + nameStart2.Length' posnameEnd - posnameStart2 - nameStart2.Length);  	// remove html codes  	torName = HttpUtility.HtmlDecode (torName);  	int posTypeStart = output.IndexOf (typeStart' posnameEnd + 1);  	int posTypeEnd = output.IndexOf (typeEnd' posTypeStart + 1);  	string torType = output.Substring (posTypeStart + typeStart.Length' posTypeEnd - posTypeStart - typeStart.Length);  	// get all the torrents  	// find the section start and end  	int posTorSectionStart = output.IndexOf (torrentSectionStart' posTypeEnd + 1);  	int posTorSectionEnd = output.IndexOf (torrentSectionEnd' posTorSectionStart + 1);  	// find all the torrents  	int posTorDownloadStart = output.IndexOf (torDownloadStart' posTorSectionStart + 1);  	while (posTorDownloadStart < posTorSectionEnd && posTorDownloadStart > 0) {  		int posTorDownloadEnd = output.IndexOf (torDownloadEnd' posTorDownloadStart + 9);  		string torDownloadLink = output.Substring (posTorDownloadStart + 9' posTorDownloadEnd - posTorDownloadStart - 9);  		torDownloadLink = HttpUtility.HtmlDecode (torDownloadLink);  		int posTorInfoPreStart = output.IndexOf (torInfoPreStart' posTorDownloadEnd + 1);  		int posTorInfoStart = output.IndexOf (torInfoStart' posTorInfoPreStart + 1);  		int posTorInfoEnd = output.IndexOf (torInfoEnd' posTorInfoStart + 1);  		string torInfo = output.Substring (posTorInfoStart + 1' posTorInfoEnd - posTorInfoStart - 1);  		// TODO - extract out <img> imfomation  		// <img src="static/common/hentaic.png" alt="Hentai" title="This torrent is of censored hentai (18+) material!" />  		// <img src="static/common/flicon.png" alt="Freeleech!" title="This torrent is freeleech. Remember to seed!" />  		int posImgStart = torInfo.IndexOf ("<img src="' 0);  		if (posImgStart >= 0) {  			bool hentai = torInfo.ToUpper ().Contains (hentaiTag.ToUpper ());  			bool freeLeech = torInfo.ToUpper ().Contains (leechTag.ToUpper ());  			// remove the img alts  			torInfo = torInfo.Substring (0' posImgStart - 2);  			if (hentai)  				torInfo = torInfo + " [hentai]";  			if (freeLeech)  				torInfo = torInfo + " [FREE Leech]";  		}  		int posTorSizeStart = output.IndexOf (torSizeStart' posTorInfoEnd + 1);  		int posTorSizeEnd = output.IndexOf (torSizeEnd' posTorSizeStart + 1);  		string torSize = output.Substring (posTorSizeStart + torSizeStart.Length' posTorSizeEnd - posTorSizeStart - torSizeStart.Length);  		int posTorSeedStart = output.IndexOf (torSeedStart' posTorSizeEnd + 1);  		int posTorSeedEnd = output.IndexOf (torSeedEnd' posTorSeedStart + 1);  		string torSeed = output.Substring (posTorSeedStart + torSeedStart.Length' posTorSeedEnd - posTorSeedStart - torSeedStart.Length);  		int posTorLeechStart = output.IndexOf (torLeechStart' posTorSeedEnd + 1);  		int posTorLeechEnd = output.IndexOf (torLeechEnd' posTorLeechStart + 1);  		string torLeech = output.Substring (posTorLeechStart + torLeechStart.Length' posTorLeechEnd - posTorLeechStart - torLeechStart.Length);  		TorrentLink torrentLink = new TorrentLink ();  		torrentLink.Source = this.GetSourceName ();  		torrentLink.SourceLong = this.GetSourceLongName ();  		torrentLink.TorrentDownloadLink = string.Format (@"http://animebyt.es/{0}"' torDownloadLink);  		torrentLink.TorrentLinkURL = "";  		torrentLink.TorrentName = torName + " - " + torInfo;  		torrentLink.Size = torSize.Trim ();  		torrentLink.Seeders = torSeed.Trim ();  		torrentLink.Leechers = torLeech.Trim ();  		torLinks.Add (torrentLink);  		// find the next download link  		posTorDownloadStart = output.IndexOf (torDownloadStart' posTorLeechEnd + 1);  	}  	// find the next torrent group  	pos = output.IndexOf (nameStart' pos + 3);  }  
Magic Number,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,ParseSource,The following statement contains a magic number: while (pos > 0) {  	if (pos <= 0)  		break;  	//int posnameStart = output.IndexOf(nameStart' pos + 1);  	int posnameStart2 = output.IndexOf (nameStart2' pos + nameStart.Length);  	int posnameEnd = output.IndexOf (nameEnd' posnameStart2 + nameStart2.Length + 1);  	string torName = output.Substring (posnameStart2 + nameStart2.Length' posnameEnd - posnameStart2 - nameStart2.Length);  	// remove html codes  	torName = HttpUtility.HtmlDecode (torName);  	int posTypeStart = output.IndexOf (typeStart' posnameEnd + 1);  	int posTypeEnd = output.IndexOf (typeEnd' posTypeStart + 1);  	string torType = output.Substring (posTypeStart + typeStart.Length' posTypeEnd - posTypeStart - typeStart.Length);  	// get all the torrents  	// find the section start and end  	int posTorSectionStart = output.IndexOf (torrentSectionStart' posTypeEnd + 1);  	int posTorSectionEnd = output.IndexOf (torrentSectionEnd' posTorSectionStart + 1);  	// find all the torrents  	int posTorDownloadStart = output.IndexOf (torDownloadStart' posTorSectionStart + 1);  	while (posTorDownloadStart < posTorSectionEnd && posTorDownloadStart > 0) {  		int posTorDownloadEnd = output.IndexOf (torDownloadEnd' posTorDownloadStart + 9);  		string torDownloadLink = output.Substring (posTorDownloadStart + 9' posTorDownloadEnd - posTorDownloadStart - 9);  		torDownloadLink = HttpUtility.HtmlDecode (torDownloadLink);  		int posTorInfoPreStart = output.IndexOf (torInfoPreStart' posTorDownloadEnd + 1);  		int posTorInfoStart = output.IndexOf (torInfoStart' posTorInfoPreStart + 1);  		int posTorInfoEnd = output.IndexOf (torInfoEnd' posTorInfoStart + 1);  		string torInfo = output.Substring (posTorInfoStart + 1' posTorInfoEnd - posTorInfoStart - 1);  		// TODO - extract out <img> imfomation  		// <img src="static/common/hentaic.png" alt="Hentai" title="This torrent is of censored hentai (18+) material!" />  		// <img src="static/common/flicon.png" alt="Freeleech!" title="This torrent is freeleech. Remember to seed!" />  		int posImgStart = torInfo.IndexOf ("<img src="' 0);  		if (posImgStart >= 0) {  			bool hentai = torInfo.ToUpper ().Contains (hentaiTag.ToUpper ());  			bool freeLeech = torInfo.ToUpper ().Contains (leechTag.ToUpper ());  			// remove the img alts  			torInfo = torInfo.Substring (0' posImgStart - 2);  			if (hentai)  				torInfo = torInfo + " [hentai]";  			if (freeLeech)  				torInfo = torInfo + " [FREE Leech]";  		}  		int posTorSizeStart = output.IndexOf (torSizeStart' posTorInfoEnd + 1);  		int posTorSizeEnd = output.IndexOf (torSizeEnd' posTorSizeStart + 1);  		string torSize = output.Substring (posTorSizeStart + torSizeStart.Length' posTorSizeEnd - posTorSizeStart - torSizeStart.Length);  		int posTorSeedStart = output.IndexOf (torSeedStart' posTorSizeEnd + 1);  		int posTorSeedEnd = output.IndexOf (torSeedEnd' posTorSeedStart + 1);  		string torSeed = output.Substring (posTorSeedStart + torSeedStart.Length' posTorSeedEnd - posTorSeedStart - torSeedStart.Length);  		int posTorLeechStart = output.IndexOf (torLeechStart' posTorSeedEnd + 1);  		int posTorLeechEnd = output.IndexOf (torLeechEnd' posTorLeechStart + 1);  		string torLeech = output.Substring (posTorLeechStart + torLeechStart.Length' posTorLeechEnd - posTorLeechStart - torLeechStart.Length);  		TorrentLink torrentLink = new TorrentLink ();  		torrentLink.Source = this.GetSourceName ();  		torrentLink.SourceLong = this.GetSourceLongName ();  		torrentLink.TorrentDownloadLink = string.Format (@"http://animebyt.es/{0}"' torDownloadLink);  		torrentLink.TorrentLinkURL = "";  		torrentLink.TorrentName = torName + " - " + torInfo;  		torrentLink.Size = torSize.Trim ();  		torrentLink.Seeders = torSeed.Trim ();  		torrentLink.Leechers = torLeech.Trim ();  		torLinks.Add (torrentLink);  		// find the next download link  		posTorDownloadStart = output.IndexOf (torDownloadStart' posTorLeechEnd + 1);  	}  	// find the next torrent group  	pos = output.IndexOf (nameStart' pos + 3);  }  
Magic Number,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,ParseSource,The following statement contains a magic number: while (pos > 0) {  	if (pos <= 0)  		break;  	//int posnameStart = output.IndexOf(nameStart' pos + 1);  	int posnameStart2 = output.IndexOf (nameStart2' pos + nameStart.Length);  	int posnameEnd = output.IndexOf (nameEnd' posnameStart2 + nameStart2.Length + 1);  	string torName = output.Substring (posnameStart2 + nameStart2.Length' posnameEnd - posnameStart2 - nameStart2.Length);  	// remove html codes  	torName = HttpUtility.HtmlDecode (torName);  	int posTypeStart = output.IndexOf (typeStart' posnameEnd + 1);  	int posTypeEnd = output.IndexOf (typeEnd' posTypeStart + 1);  	string torType = output.Substring (posTypeStart + typeStart.Length' posTypeEnd - posTypeStart - typeStart.Length);  	// get all the torrents  	// find the section start and end  	int posTorSectionStart = output.IndexOf (torrentSectionStart' posTypeEnd + 1);  	int posTorSectionEnd = output.IndexOf (torrentSectionEnd' posTorSectionStart + 1);  	// find all the torrents  	int posTorDownloadStart = output.IndexOf (torDownloadStart' posTorSectionStart + 1);  	while (posTorDownloadStart < posTorSectionEnd && posTorDownloadStart > 0) {  		int posTorDownloadEnd = output.IndexOf (torDownloadEnd' posTorDownloadStart + 9);  		string torDownloadLink = output.Substring (posTorDownloadStart + 9' posTorDownloadEnd - posTorDownloadStart - 9);  		torDownloadLink = HttpUtility.HtmlDecode (torDownloadLink);  		int posTorInfoPreStart = output.IndexOf (torInfoPreStart' posTorDownloadEnd + 1);  		int posTorInfoStart = output.IndexOf (torInfoStart' posTorInfoPreStart + 1);  		int posTorInfoEnd = output.IndexOf (torInfoEnd' posTorInfoStart + 1);  		string torInfo = output.Substring (posTorInfoStart + 1' posTorInfoEnd - posTorInfoStart - 1);  		// TODO - extract out <img> imfomation  		// <img src="static/common/hentaic.png" alt="Hentai" title="This torrent is of censored hentai (18+) material!" />  		// <img src="static/common/flicon.png" alt="Freeleech!" title="This torrent is freeleech. Remember to seed!" />  		int posImgStart = torInfo.IndexOf ("<img src="' 0);  		if (posImgStart >= 0) {  			bool hentai = torInfo.ToUpper ().Contains (hentaiTag.ToUpper ());  			bool freeLeech = torInfo.ToUpper ().Contains (leechTag.ToUpper ());  			// remove the img alts  			torInfo = torInfo.Substring (0' posImgStart - 2);  			if (hentai)  				torInfo = torInfo + " [hentai]";  			if (freeLeech)  				torInfo = torInfo + " [FREE Leech]";  		}  		int posTorSizeStart = output.IndexOf (torSizeStart' posTorInfoEnd + 1);  		int posTorSizeEnd = output.IndexOf (torSizeEnd' posTorSizeStart + 1);  		string torSize = output.Substring (posTorSizeStart + torSizeStart.Length' posTorSizeEnd - posTorSizeStart - torSizeStart.Length);  		int posTorSeedStart = output.IndexOf (torSeedStart' posTorSizeEnd + 1);  		int posTorSeedEnd = output.IndexOf (torSeedEnd' posTorSeedStart + 1);  		string torSeed = output.Substring (posTorSeedStart + torSeedStart.Length' posTorSeedEnd - posTorSeedStart - torSeedStart.Length);  		int posTorLeechStart = output.IndexOf (torLeechStart' posTorSeedEnd + 1);  		int posTorLeechEnd = output.IndexOf (torLeechEnd' posTorLeechStart + 1);  		string torLeech = output.Substring (posTorLeechStart + torLeechStart.Length' posTorLeechEnd - posTorLeechStart - torLeechStart.Length);  		TorrentLink torrentLink = new TorrentLink ();  		torrentLink.Source = this.GetSourceName ();  		torrentLink.SourceLong = this.GetSourceLongName ();  		torrentLink.TorrentDownloadLink = string.Format (@"http://animebyt.es/{0}"' torDownloadLink);  		torrentLink.TorrentLinkURL = "";  		torrentLink.TorrentName = torName + " - " + torInfo;  		torrentLink.Size = torSize.Trim ();  		torrentLink.Seeders = torSeed.Trim ();  		torrentLink.Leechers = torLeech.Trim ();  		torLinks.Add (torrentLink);  		// find the next download link  		posTorDownloadStart = output.IndexOf (torDownloadStart' posTorLeechEnd + 1);  	}  	// find the next torrent group  	pos = output.IndexOf (nameStart' pos + 3);  }  
Magic Number,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,ParseSource,The following statement contains a magic number: while (posTorDownloadStart < posTorSectionEnd && posTorDownloadStart > 0) {  	int posTorDownloadEnd = output.IndexOf (torDownloadEnd' posTorDownloadStart + 9);  	string torDownloadLink = output.Substring (posTorDownloadStart + 9' posTorDownloadEnd - posTorDownloadStart - 9);  	torDownloadLink = HttpUtility.HtmlDecode (torDownloadLink);  	int posTorInfoPreStart = output.IndexOf (torInfoPreStart' posTorDownloadEnd + 1);  	int posTorInfoStart = output.IndexOf (torInfoStart' posTorInfoPreStart + 1);  	int posTorInfoEnd = output.IndexOf (torInfoEnd' posTorInfoStart + 1);  	string torInfo = output.Substring (posTorInfoStart + 1' posTorInfoEnd - posTorInfoStart - 1);  	// TODO - extract out <img> imfomation  	// <img src="static/common/hentaic.png" alt="Hentai" title="This torrent is of censored hentai (18+) material!" />  	// <img src="static/common/flicon.png" alt="Freeleech!" title="This torrent is freeleech. Remember to seed!" />  	int posImgStart = torInfo.IndexOf ("<img src="' 0);  	if (posImgStart >= 0) {  		bool hentai = torInfo.ToUpper ().Contains (hentaiTag.ToUpper ());  		bool freeLeech = torInfo.ToUpper ().Contains (leechTag.ToUpper ());  		// remove the img alts  		torInfo = torInfo.Substring (0' posImgStart - 2);  		if (hentai)  			torInfo = torInfo + " [hentai]";  		if (freeLeech)  			torInfo = torInfo + " [FREE Leech]";  	}  	int posTorSizeStart = output.IndexOf (torSizeStart' posTorInfoEnd + 1);  	int posTorSizeEnd = output.IndexOf (torSizeEnd' posTorSizeStart + 1);  	string torSize = output.Substring (posTorSizeStart + torSizeStart.Length' posTorSizeEnd - posTorSizeStart - torSizeStart.Length);  	int posTorSeedStart = output.IndexOf (torSeedStart' posTorSizeEnd + 1);  	int posTorSeedEnd = output.IndexOf (torSeedEnd' posTorSeedStart + 1);  	string torSeed = output.Substring (posTorSeedStart + torSeedStart.Length' posTorSeedEnd - posTorSeedStart - torSeedStart.Length);  	int posTorLeechStart = output.IndexOf (torLeechStart' posTorSeedEnd + 1);  	int posTorLeechEnd = output.IndexOf (torLeechEnd' posTorLeechStart + 1);  	string torLeech = output.Substring (posTorLeechStart + torLeechStart.Length' posTorLeechEnd - posTorLeechStart - torLeechStart.Length);  	TorrentLink torrentLink = new TorrentLink ();  	torrentLink.Source = this.GetSourceName ();  	torrentLink.SourceLong = this.GetSourceLongName ();  	torrentLink.TorrentDownloadLink = string.Format (@"http://animebyt.es/{0}"' torDownloadLink);  	torrentLink.TorrentLinkURL = "";  	torrentLink.TorrentName = torName + " - " + torInfo;  	torrentLink.Size = torSize.Trim ();  	torrentLink.Seeders = torSeed.Trim ();  	torrentLink.Leechers = torLeech.Trim ();  	torLinks.Add (torrentLink);  	// find the next download link  	posTorDownloadStart = output.IndexOf (torDownloadStart' posTorLeechEnd + 1);  }  
Magic Number,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,ParseSource,The following statement contains a magic number: while (posTorDownloadStart < posTorSectionEnd && posTorDownloadStart > 0) {  	int posTorDownloadEnd = output.IndexOf (torDownloadEnd' posTorDownloadStart + 9);  	string torDownloadLink = output.Substring (posTorDownloadStart + 9' posTorDownloadEnd - posTorDownloadStart - 9);  	torDownloadLink = HttpUtility.HtmlDecode (torDownloadLink);  	int posTorInfoPreStart = output.IndexOf (torInfoPreStart' posTorDownloadEnd + 1);  	int posTorInfoStart = output.IndexOf (torInfoStart' posTorInfoPreStart + 1);  	int posTorInfoEnd = output.IndexOf (torInfoEnd' posTorInfoStart + 1);  	string torInfo = output.Substring (posTorInfoStart + 1' posTorInfoEnd - posTorInfoStart - 1);  	// TODO - extract out <img> imfomation  	// <img src="static/common/hentaic.png" alt="Hentai" title="This torrent is of censored hentai (18+) material!" />  	// <img src="static/common/flicon.png" alt="Freeleech!" title="This torrent is freeleech. Remember to seed!" />  	int posImgStart = torInfo.IndexOf ("<img src="' 0);  	if (posImgStart >= 0) {  		bool hentai = torInfo.ToUpper ().Contains (hentaiTag.ToUpper ());  		bool freeLeech = torInfo.ToUpper ().Contains (leechTag.ToUpper ());  		// remove the img alts  		torInfo = torInfo.Substring (0' posImgStart - 2);  		if (hentai)  			torInfo = torInfo + " [hentai]";  		if (freeLeech)  			torInfo = torInfo + " [FREE Leech]";  	}  	int posTorSizeStart = output.IndexOf (torSizeStart' posTorInfoEnd + 1);  	int posTorSizeEnd = output.IndexOf (torSizeEnd' posTorSizeStart + 1);  	string torSize = output.Substring (posTorSizeStart + torSizeStart.Length' posTorSizeEnd - posTorSizeStart - torSizeStart.Length);  	int posTorSeedStart = output.IndexOf (torSeedStart' posTorSizeEnd + 1);  	int posTorSeedEnd = output.IndexOf (torSeedEnd' posTorSeedStart + 1);  	string torSeed = output.Substring (posTorSeedStart + torSeedStart.Length' posTorSeedEnd - posTorSeedStart - torSeedStart.Length);  	int posTorLeechStart = output.IndexOf (torLeechStart' posTorSeedEnd + 1);  	int posTorLeechEnd = output.IndexOf (torLeechEnd' posTorLeechStart + 1);  	string torLeech = output.Substring (posTorLeechStart + torLeechStart.Length' posTorLeechEnd - posTorLeechStart - torLeechStart.Length);  	TorrentLink torrentLink = new TorrentLink ();  	torrentLink.Source = this.GetSourceName ();  	torrentLink.SourceLong = this.GetSourceLongName ();  	torrentLink.TorrentDownloadLink = string.Format (@"http://animebyt.es/{0}"' torDownloadLink);  	torrentLink.TorrentLinkURL = "";  	torrentLink.TorrentName = torName + " - " + torInfo;  	torrentLink.Size = torSize.Trim ();  	torrentLink.Seeders = torSeed.Trim ();  	torrentLink.Leechers = torLeech.Trim ();  	torLinks.Add (torrentLink);  	// find the next download link  	posTorDownloadStart = output.IndexOf (torDownloadStart' posTorLeechEnd + 1);  }  
Magic Number,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,ParseSource,The following statement contains a magic number: while (posTorDownloadStart < posTorSectionEnd && posTorDownloadStart > 0) {  	int posTorDownloadEnd = output.IndexOf (torDownloadEnd' posTorDownloadStart + 9);  	string torDownloadLink = output.Substring (posTorDownloadStart + 9' posTorDownloadEnd - posTorDownloadStart - 9);  	torDownloadLink = HttpUtility.HtmlDecode (torDownloadLink);  	int posTorInfoPreStart = output.IndexOf (torInfoPreStart' posTorDownloadEnd + 1);  	int posTorInfoStart = output.IndexOf (torInfoStart' posTorInfoPreStart + 1);  	int posTorInfoEnd = output.IndexOf (torInfoEnd' posTorInfoStart + 1);  	string torInfo = output.Substring (posTorInfoStart + 1' posTorInfoEnd - posTorInfoStart - 1);  	// TODO - extract out <img> imfomation  	// <img src="static/common/hentaic.png" alt="Hentai" title="This torrent is of censored hentai (18+) material!" />  	// <img src="static/common/flicon.png" alt="Freeleech!" title="This torrent is freeleech. Remember to seed!" />  	int posImgStart = torInfo.IndexOf ("<img src="' 0);  	if (posImgStart >= 0) {  		bool hentai = torInfo.ToUpper ().Contains (hentaiTag.ToUpper ());  		bool freeLeech = torInfo.ToUpper ().Contains (leechTag.ToUpper ());  		// remove the img alts  		torInfo = torInfo.Substring (0' posImgStart - 2);  		if (hentai)  			torInfo = torInfo + " [hentai]";  		if (freeLeech)  			torInfo = torInfo + " [FREE Leech]";  	}  	int posTorSizeStart = output.IndexOf (torSizeStart' posTorInfoEnd + 1);  	int posTorSizeEnd = output.IndexOf (torSizeEnd' posTorSizeStart + 1);  	string torSize = output.Substring (posTorSizeStart + torSizeStart.Length' posTorSizeEnd - posTorSizeStart - torSizeStart.Length);  	int posTorSeedStart = output.IndexOf (torSeedStart' posTorSizeEnd + 1);  	int posTorSeedEnd = output.IndexOf (torSeedEnd' posTorSeedStart + 1);  	string torSeed = output.Substring (posTorSeedStart + torSeedStart.Length' posTorSeedEnd - posTorSeedStart - torSeedStart.Length);  	int posTorLeechStart = output.IndexOf (torLeechStart' posTorSeedEnd + 1);  	int posTorLeechEnd = output.IndexOf (torLeechEnd' posTorLeechStart + 1);  	string torLeech = output.Substring (posTorLeechStart + torLeechStart.Length' posTorLeechEnd - posTorLeechStart - torLeechStart.Length);  	TorrentLink torrentLink = new TorrentLink ();  	torrentLink.Source = this.GetSourceName ();  	torrentLink.SourceLong = this.GetSourceLongName ();  	torrentLink.TorrentDownloadLink = string.Format (@"http://animebyt.es/{0}"' torDownloadLink);  	torrentLink.TorrentLinkURL = "";  	torrentLink.TorrentName = torName + " - " + torInfo;  	torrentLink.Size = torSize.Trim ();  	torrentLink.Seeders = torSeed.Trim ();  	torrentLink.Leechers = torLeech.Trim ();  	torLinks.Add (torrentLink);  	// find the next download link  	posTorDownloadStart = output.IndexOf (torDownloadStart' posTorLeechEnd + 1);  }  
Magic Number,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,ParseSource,The following statement contains a magic number: while (posTorDownloadStart < posTorSectionEnd && posTorDownloadStart > 0) {  	int posTorDownloadEnd = output.IndexOf (torDownloadEnd' posTorDownloadStart + 9);  	string torDownloadLink = output.Substring (posTorDownloadStart + 9' posTorDownloadEnd - posTorDownloadStart - 9);  	torDownloadLink = HttpUtility.HtmlDecode (torDownloadLink);  	int posTorInfoPreStart = output.IndexOf (torInfoPreStart' posTorDownloadEnd + 1);  	int posTorInfoStart = output.IndexOf (torInfoStart' posTorInfoPreStart + 1);  	int posTorInfoEnd = output.IndexOf (torInfoEnd' posTorInfoStart + 1);  	string torInfo = output.Substring (posTorInfoStart + 1' posTorInfoEnd - posTorInfoStart - 1);  	// TODO - extract out <img> imfomation  	// <img src="static/common/hentaic.png" alt="Hentai" title="This torrent is of censored hentai (18+) material!" />  	// <img src="static/common/flicon.png" alt="Freeleech!" title="This torrent is freeleech. Remember to seed!" />  	int posImgStart = torInfo.IndexOf ("<img src="' 0);  	if (posImgStart >= 0) {  		bool hentai = torInfo.ToUpper ().Contains (hentaiTag.ToUpper ());  		bool freeLeech = torInfo.ToUpper ().Contains (leechTag.ToUpper ());  		// remove the img alts  		torInfo = torInfo.Substring (0' posImgStart - 2);  		if (hentai)  			torInfo = torInfo + " [hentai]";  		if (freeLeech)  			torInfo = torInfo + " [FREE Leech]";  	}  	int posTorSizeStart = output.IndexOf (torSizeStart' posTorInfoEnd + 1);  	int posTorSizeEnd = output.IndexOf (torSizeEnd' posTorSizeStart + 1);  	string torSize = output.Substring (posTorSizeStart + torSizeStart.Length' posTorSizeEnd - posTorSizeStart - torSizeStart.Length);  	int posTorSeedStart = output.IndexOf (torSeedStart' posTorSizeEnd + 1);  	int posTorSeedEnd = output.IndexOf (torSeedEnd' posTorSeedStart + 1);  	string torSeed = output.Substring (posTorSeedStart + torSeedStart.Length' posTorSeedEnd - posTorSeedStart - torSeedStart.Length);  	int posTorLeechStart = output.IndexOf (torLeechStart' posTorSeedEnd + 1);  	int posTorLeechEnd = output.IndexOf (torLeechEnd' posTorLeechStart + 1);  	string torLeech = output.Substring (posTorLeechStart + torLeechStart.Length' posTorLeechEnd - posTorLeechStart - torLeechStart.Length);  	TorrentLink torrentLink = new TorrentLink ();  	torrentLink.Source = this.GetSourceName ();  	torrentLink.SourceLong = this.GetSourceLongName ();  	torrentLink.TorrentDownloadLink = string.Format (@"http://animebyt.es/{0}"' torDownloadLink);  	torrentLink.TorrentLinkURL = "";  	torrentLink.TorrentName = torName + " - " + torInfo;  	torrentLink.Size = torSize.Trim ();  	torrentLink.Seeders = torSeed.Trim ();  	torrentLink.Leechers = torLeech.Trim ();  	torLinks.Add (torrentLink);  	// find the next download link  	posTorDownloadStart = output.IndexOf (torDownloadStart' posTorLeechEnd + 1);  }  
Magic Number,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,ParseSource,The following statement contains a magic number: if (posImgStart >= 0) {  	bool hentai = torInfo.ToUpper ().Contains (hentaiTag.ToUpper ());  	bool freeLeech = torInfo.ToUpper ().Contains (leechTag.ToUpper ());  	// remove the img alts  	torInfo = torInfo.Substring (0' posImgStart - 2);  	if (hentai)  		torInfo = torInfo + " [hentai]";  	if (freeLeech)  		torInfo = torInfo + " [FREE Leech]";  }  
Magic Number,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,ParseSource,The following statement contains a magic number: torInfo = torInfo.Substring (0' posImgStart - 2);  
Magic Number,MyAnimePlugin3.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsAnimeBytes.cs,ParseSource,The following statement contains a magic number: pos = output.IndexOf (nameStart' pos + 3);  
Magic Number,MyAnimePlugin3.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsBakaBT.cs,Login,The following statement contains a magic number: try {  	CookieContainer container = new CookieContainer ();  	string formUrl = "http://bakabt.me/login.php";  	// NOTE: This is the URL the form POSTs to' not the URL of the form (you can find this in the "action" attribute of the HTML's form tag  	string formParams = string.Format ("username={0}&password={1}"' username' password);  	HttpWebRequest req = (HttpWebRequest)WebRequest.Create (formUrl);  	req.ContentType = "application/x-www-form-urlencoded";  	req.Method = "POST";  	//req.AllowAutoRedirect = false;  	req.CookieContainer = container;  	req.UserAgent = "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)";  	req.Headers.Add (HttpRequestHeader.AcceptEncoding' "gzip'deflate");  	req.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;  	byte[] bytes = Encoding.ASCII.GetBytes (formParams);  	req.ContentLength = bytes.Length;  	using (Stream os = req.GetRequestStream ()) {  		os.Write (bytes' 0' bytes.Length);  	}  	HttpWebResponse WebResponse = (HttpWebResponse)req.GetResponse ();  	Stream responseStream = WebResponse.GetResponseStream ();  	String enco = WebResponse.CharacterSet;  	Encoding encoding = null;  	if (!String.IsNullOrEmpty (enco))  		encoding = Encoding.GetEncoding (WebResponse.CharacterSet);  	if (encoding == null)  		encoding = Encoding.Default;  	StreamReader Reader = new StreamReader (responseStream' encoding);  	string output = Reader.ReadToEnd ();  	if (container.Count < 3)  		return "";  	//Grab the cookie we just got back for this specifc page  	return container.GetCookieHeader (new Uri ("http://www.bakabt.me/index.php"));  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write ("Login: " + ex.ToString ());  	return "";  }  
Magic Number,MyAnimePlugin3.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsBakaBT.cs,Login,The following statement contains a magic number: if (container.Count < 3)  	return "";  
Magic Number,MyAnimePlugin3.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsBakaBT.cs,ParseSource,The following statement contains a magic number: while (pos > 0) {  	if (pos <= 0)  		break;  	int poscatStart = output.IndexOf (catStart' pos + 1);  	int poscatEnd = output.IndexOf (catEnd' poscatStart + catStart.Length + 1);  	string cat = output.Substring (poscatStart + catStart.Length' poscatEnd - poscatStart - catStart.Length);  	int poslinkStart = output.IndexOf (linkStart' poscatEnd + 1);  	int poslinkEnd = output.IndexOf (linkEnd' poslinkStart + linkStart.Length + 1);  	string link = output.Substring (poslinkStart + linkStart.Length' poslinkEnd - poslinkStart - linkStart.Length);  	int posnameStart = output.IndexOf (nameStart' poslinkEnd);  	int posnameStart2 = output.IndexOf (nameStart2' posnameStart + nameStart.Length);  	int posnameEnd = output.IndexOf (nameEnd' posnameStart2 + nameStart2.Length + 1);  	string torName = output.Substring (posnameStart2 + nameStart2.Length' posnameEnd - posnameStart2 - nameStart2.Length);  	torName = torName.Replace (rubbish1' "");  	torName = torName.Replace (rubbish2' "");  	// remove html codes  	torName = HttpUtility.HtmlDecode (torName);  	//Console.WriteLine("{0} - {1}"' posNameStart' posNameEnd);  	string torSize = "";  	int posSizeStart = output.IndexOf (sizeStart' posnameEnd);  	int posSizeEnd = 0;  	if (posSizeStart > 0) {  		posSizeEnd = output.IndexOf (sizeEnd' posSizeStart + sizeStart.Length + 1);  		torSize = output.Substring (posSizeStart + sizeStart.Length' posSizeEnd - posSizeStart - sizeStart.Length);  	}  	int posSeedInit = output.IndexOf (seedInit' posSizeEnd);  	string torSeed = "";  	int posSeedStart = output.IndexOf (seedStart' posSeedInit + seedInit.Length + 1);  	int posSeedEnd = 0;  	if (posSeedStart > 0) {  		posSeedEnd = output.IndexOf (seedEnd' posSeedStart + seedStart.Length + 1);  		torSeed = output.Substring (posSeedStart + seedStart.Length' posSeedEnd - posSeedStart - seedStart.Length);  	}  	string torLeech = "";  	int posLeechStart = output.IndexOf (leechStart' posSeedStart + 3);  	int posLeechEnd = 0;  	if (posLeechStart > 0) {  		posLeechEnd = output.IndexOf (leechEnd' posLeechStart + leechStart.Length + 1);  		torLeech = output.Substring (posLeechStart + leechStart.Length' posLeechEnd - posLeechStart - leechStart.Length);  	}  	TorrentLink torrentLink = new TorrentLink ();  	torrentLink.Source = this.GetSourceName ();  	torrentLink.SourceLong = this.GetSourceLongName ();  	torrentLink.TorrentDownloadLink = "";  	torrentLink.TorrentLinkURL = string.Format ("http://bakabt.me{0} "' link);  	torrentLink.TorrentName = string.Format ("[MAIN] {0} [{1}]"' torName.Trim ()' cat);  	torrentLink.Size = torSize.Trim ();  	torrentLink.Seeders = torSeed.Trim ();  	torrentLink.Leechers = torLeech.Trim ();  	torLinks.Add (torrentLink);  	// now we have the main link provided by BakaBT  	// BakaBT also provides alternative links' so lets include those as well  	int temppos = output.IndexOf (startBlock' pos + 1);  	int altpos = output.IndexOf (altBlock' pos + 1);  	while (temppos > altpos && altpos > 0) {  		string linkStartAlt = "href=" + quote;  		string linkEndAlt = quote;  		string nameStartAlt = quote + ">";  		string nameEndAlt = "</a>";  		string sizeStartAlt = "<td class=" + quote + "size" + quote + ">";  		string sizeEndAlt = "</td>";  		string seedInitAlt = "<td class=" + quote + "peers" + quote + ">";  		string seedStartAlt = quote + ">";  		string seedEndAlt = "</a>";  		string leechStartAlt = quote + ">";  		string leechEndAlt = "</a>";  		int poslinkStartAlt = output.IndexOf (linkStartAlt' altpos + 1);  		int poslinkEndAlt = output.IndexOf (linkEndAlt' poslinkStartAlt + linkStartAlt.Length + 1);  		string linkAlt = output.Substring (poslinkStartAlt + linkStartAlt.Length' poslinkEndAlt - poslinkStartAlt - linkStartAlt.Length);  		int posnameStartAlt = output.IndexOf (nameStartAlt' poslinkEndAlt);  		int posnameEndAlt = output.IndexOf (nameEndAlt' posnameStartAlt + nameStartAlt.Length + 1);  		string torNameAlt = output.Substring (posnameStartAlt + nameStartAlt.Length' posnameEndAlt - posnameStartAlt - nameStartAlt.Length);  		// remove html codes  		torNameAlt = torNameAlt.Replace (rubbish1' "");  		torNameAlt = torNameAlt.Replace (rubbish2' "");  		torNameAlt = HttpUtility.HtmlDecode (torNameAlt);  		string torSizeAlt = "";  		int posSizeStartAlt = output.IndexOf (sizeStartAlt' posnameEndAlt);  		int posSizeEndAlt = 0;  		if (posSizeStartAlt > 0) {  			posSizeEndAlt = output.IndexOf (sizeEndAlt' posSizeStartAlt + sizeStartAlt.Length + 1);  			torSizeAlt = output.Substring (posSizeStartAlt + sizeStartAlt.Length' posSizeEndAlt - posSizeStartAlt - sizeStartAlt.Length);  		}  		int posSeedInitAlt = output.IndexOf (seedInitAlt' posSizeEndAlt);  		string torSeedAlt = "";  		int posSeedStartAlt = output.IndexOf (seedStartAlt' posSeedInitAlt + seedInitAlt.Length + 1);  		int posSeedEndAlt = 0;  		if (posSeedStartAlt > 0) {  			posSeedEndAlt = output.IndexOf (seedEndAlt' posSeedStartAlt + seedStartAlt.Length + 1);  			torSeedAlt = output.Substring (posSeedStartAlt + seedStartAlt.Length' posSeedEndAlt - posSeedStartAlt - seedStartAlt.Length);  		}  		string torLeechAlt = "";  		int posLeechStartAlt = output.IndexOf (leechStartAlt' posSeedStartAlt + 3);  		int posLeechEndAlt = 0;  		if (posLeechStartAlt > 0) {  			posLeechEndAlt = output.IndexOf (leechEndAlt' posLeechStartAlt + leechStartAlt.Length + 1);  			torLeechAlt = output.Substring (posLeechStartAlt + leechStartAlt.Length' posLeechEndAlt - posLeechStartAlt - leechStartAlt.Length);  		}  		TorrentLink torrentLinkAlt = new TorrentLink ();  		torrentLinkAlt.Source = this.GetSourceName ();  		torrentLinkAlt.SourceLong = this.GetSourceLongName ();  		torrentLinkAlt.TorrentDownloadLink = "";  		torrentLinkAlt.TorrentLinkURL = string.Format ("http://bakabt.me{0} "' linkAlt);  		torrentLinkAlt.TorrentName = string.Format ("[ALT] {0} [{1}]"' torNameAlt.Trim ()' cat);  		torrentLinkAlt.Size = torSizeAlt.Trim ();  		torrentLinkAlt.Seeders = torSeedAlt.Trim ();  		torrentLinkAlt.Leechers = torLeechAlt.Trim ();  		torLinks.Add (torrentLinkAlt);  		altpos = output.IndexOf (altBlock' posLeechEndAlt + 1);  	}  	pos = output.IndexOf (startBlock' pos + 1);  	//Console.WriteLine("{0} - {1}"' torName' torLink);  }  
Magic Number,MyAnimePlugin3.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsBakaBT.cs,ParseSource,The following statement contains a magic number: while (pos > 0) {  	if (pos <= 0)  		break;  	int poscatStart = output.IndexOf (catStart' pos + 1);  	int poscatEnd = output.IndexOf (catEnd' poscatStart + catStart.Length + 1);  	string cat = output.Substring (poscatStart + catStart.Length' poscatEnd - poscatStart - catStart.Length);  	int poslinkStart = output.IndexOf (linkStart' poscatEnd + 1);  	int poslinkEnd = output.IndexOf (linkEnd' poslinkStart + linkStart.Length + 1);  	string link = output.Substring (poslinkStart + linkStart.Length' poslinkEnd - poslinkStart - linkStart.Length);  	int posnameStart = output.IndexOf (nameStart' poslinkEnd);  	int posnameStart2 = output.IndexOf (nameStart2' posnameStart + nameStart.Length);  	int posnameEnd = output.IndexOf (nameEnd' posnameStart2 + nameStart2.Length + 1);  	string torName = output.Substring (posnameStart2 + nameStart2.Length' posnameEnd - posnameStart2 - nameStart2.Length);  	torName = torName.Replace (rubbish1' "");  	torName = torName.Replace (rubbish2' "");  	// remove html codes  	torName = HttpUtility.HtmlDecode (torName);  	//Console.WriteLine("{0} - {1}"' posNameStart' posNameEnd);  	string torSize = "";  	int posSizeStart = output.IndexOf (sizeStart' posnameEnd);  	int posSizeEnd = 0;  	if (posSizeStart > 0) {  		posSizeEnd = output.IndexOf (sizeEnd' posSizeStart + sizeStart.Length + 1);  		torSize = output.Substring (posSizeStart + sizeStart.Length' posSizeEnd - posSizeStart - sizeStart.Length);  	}  	int posSeedInit = output.IndexOf (seedInit' posSizeEnd);  	string torSeed = "";  	int posSeedStart = output.IndexOf (seedStart' posSeedInit + seedInit.Length + 1);  	int posSeedEnd = 0;  	if (posSeedStart > 0) {  		posSeedEnd = output.IndexOf (seedEnd' posSeedStart + seedStart.Length + 1);  		torSeed = output.Substring (posSeedStart + seedStart.Length' posSeedEnd - posSeedStart - seedStart.Length);  	}  	string torLeech = "";  	int posLeechStart = output.IndexOf (leechStart' posSeedStart + 3);  	int posLeechEnd = 0;  	if (posLeechStart > 0) {  		posLeechEnd = output.IndexOf (leechEnd' posLeechStart + leechStart.Length + 1);  		torLeech = output.Substring (posLeechStart + leechStart.Length' posLeechEnd - posLeechStart - leechStart.Length);  	}  	TorrentLink torrentLink = new TorrentLink ();  	torrentLink.Source = this.GetSourceName ();  	torrentLink.SourceLong = this.GetSourceLongName ();  	torrentLink.TorrentDownloadLink = "";  	torrentLink.TorrentLinkURL = string.Format ("http://bakabt.me{0} "' link);  	torrentLink.TorrentName = string.Format ("[MAIN] {0} [{1}]"' torName.Trim ()' cat);  	torrentLink.Size = torSize.Trim ();  	torrentLink.Seeders = torSeed.Trim ();  	torrentLink.Leechers = torLeech.Trim ();  	torLinks.Add (torrentLink);  	// now we have the main link provided by BakaBT  	// BakaBT also provides alternative links' so lets include those as well  	int temppos = output.IndexOf (startBlock' pos + 1);  	int altpos = output.IndexOf (altBlock' pos + 1);  	while (temppos > altpos && altpos > 0) {  		string linkStartAlt = "href=" + quote;  		string linkEndAlt = quote;  		string nameStartAlt = quote + ">";  		string nameEndAlt = "</a>";  		string sizeStartAlt = "<td class=" + quote + "size" + quote + ">";  		string sizeEndAlt = "</td>";  		string seedInitAlt = "<td class=" + quote + "peers" + quote + ">";  		string seedStartAlt = quote + ">";  		string seedEndAlt = "</a>";  		string leechStartAlt = quote + ">";  		string leechEndAlt = "</a>";  		int poslinkStartAlt = output.IndexOf (linkStartAlt' altpos + 1);  		int poslinkEndAlt = output.IndexOf (linkEndAlt' poslinkStartAlt + linkStartAlt.Length + 1);  		string linkAlt = output.Substring (poslinkStartAlt + linkStartAlt.Length' poslinkEndAlt - poslinkStartAlt - linkStartAlt.Length);  		int posnameStartAlt = output.IndexOf (nameStartAlt' poslinkEndAlt);  		int posnameEndAlt = output.IndexOf (nameEndAlt' posnameStartAlt + nameStartAlt.Length + 1);  		string torNameAlt = output.Substring (posnameStartAlt + nameStartAlt.Length' posnameEndAlt - posnameStartAlt - nameStartAlt.Length);  		// remove html codes  		torNameAlt = torNameAlt.Replace (rubbish1' "");  		torNameAlt = torNameAlt.Replace (rubbish2' "");  		torNameAlt = HttpUtility.HtmlDecode (torNameAlt);  		string torSizeAlt = "";  		int posSizeStartAlt = output.IndexOf (sizeStartAlt' posnameEndAlt);  		int posSizeEndAlt = 0;  		if (posSizeStartAlt > 0) {  			posSizeEndAlt = output.IndexOf (sizeEndAlt' posSizeStartAlt + sizeStartAlt.Length + 1);  			torSizeAlt = output.Substring (posSizeStartAlt + sizeStartAlt.Length' posSizeEndAlt - posSizeStartAlt - sizeStartAlt.Length);  		}  		int posSeedInitAlt = output.IndexOf (seedInitAlt' posSizeEndAlt);  		string torSeedAlt = "";  		int posSeedStartAlt = output.IndexOf (seedStartAlt' posSeedInitAlt + seedInitAlt.Length + 1);  		int posSeedEndAlt = 0;  		if (posSeedStartAlt > 0) {  			posSeedEndAlt = output.IndexOf (seedEndAlt' posSeedStartAlt + seedStartAlt.Length + 1);  			torSeedAlt = output.Substring (posSeedStartAlt + seedStartAlt.Length' posSeedEndAlt - posSeedStartAlt - seedStartAlt.Length);  		}  		string torLeechAlt = "";  		int posLeechStartAlt = output.IndexOf (leechStartAlt' posSeedStartAlt + 3);  		int posLeechEndAlt = 0;  		if (posLeechStartAlt > 0) {  			posLeechEndAlt = output.IndexOf (leechEndAlt' posLeechStartAlt + leechStartAlt.Length + 1);  			torLeechAlt = output.Substring (posLeechStartAlt + leechStartAlt.Length' posLeechEndAlt - posLeechStartAlt - leechStartAlt.Length);  		}  		TorrentLink torrentLinkAlt = new TorrentLink ();  		torrentLinkAlt.Source = this.GetSourceName ();  		torrentLinkAlt.SourceLong = this.GetSourceLongName ();  		torrentLinkAlt.TorrentDownloadLink = "";  		torrentLinkAlt.TorrentLinkURL = string.Format ("http://bakabt.me{0} "' linkAlt);  		torrentLinkAlt.TorrentName = string.Format ("[ALT] {0} [{1}]"' torNameAlt.Trim ()' cat);  		torrentLinkAlt.Size = torSizeAlt.Trim ();  		torrentLinkAlt.Seeders = torSeedAlt.Trim ();  		torrentLinkAlt.Leechers = torLeechAlt.Trim ();  		torLinks.Add (torrentLinkAlt);  		altpos = output.IndexOf (altBlock' posLeechEndAlt + 1);  	}  	pos = output.IndexOf (startBlock' pos + 1);  	//Console.WriteLine("{0} - {1}"' torName' torLink);  }  
Magic Number,MyAnimePlugin3.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsBakaBT.cs,ParseSource,The following statement contains a magic number: while (temppos > altpos && altpos > 0) {  	string linkStartAlt = "href=" + quote;  	string linkEndAlt = quote;  	string nameStartAlt = quote + ">";  	string nameEndAlt = "</a>";  	string sizeStartAlt = "<td class=" + quote + "size" + quote + ">";  	string sizeEndAlt = "</td>";  	string seedInitAlt = "<td class=" + quote + "peers" + quote + ">";  	string seedStartAlt = quote + ">";  	string seedEndAlt = "</a>";  	string leechStartAlt = quote + ">";  	string leechEndAlt = "</a>";  	int poslinkStartAlt = output.IndexOf (linkStartAlt' altpos + 1);  	int poslinkEndAlt = output.IndexOf (linkEndAlt' poslinkStartAlt + linkStartAlt.Length + 1);  	string linkAlt = output.Substring (poslinkStartAlt + linkStartAlt.Length' poslinkEndAlt - poslinkStartAlt - linkStartAlt.Length);  	int posnameStartAlt = output.IndexOf (nameStartAlt' poslinkEndAlt);  	int posnameEndAlt = output.IndexOf (nameEndAlt' posnameStartAlt + nameStartAlt.Length + 1);  	string torNameAlt = output.Substring (posnameStartAlt + nameStartAlt.Length' posnameEndAlt - posnameStartAlt - nameStartAlt.Length);  	// remove html codes  	torNameAlt = torNameAlt.Replace (rubbish1' "");  	torNameAlt = torNameAlt.Replace (rubbish2' "");  	torNameAlt = HttpUtility.HtmlDecode (torNameAlt);  	string torSizeAlt = "";  	int posSizeStartAlt = output.IndexOf (sizeStartAlt' posnameEndAlt);  	int posSizeEndAlt = 0;  	if (posSizeStartAlt > 0) {  		posSizeEndAlt = output.IndexOf (sizeEndAlt' posSizeStartAlt + sizeStartAlt.Length + 1);  		torSizeAlt = output.Substring (posSizeStartAlt + sizeStartAlt.Length' posSizeEndAlt - posSizeStartAlt - sizeStartAlt.Length);  	}  	int posSeedInitAlt = output.IndexOf (seedInitAlt' posSizeEndAlt);  	string torSeedAlt = "";  	int posSeedStartAlt = output.IndexOf (seedStartAlt' posSeedInitAlt + seedInitAlt.Length + 1);  	int posSeedEndAlt = 0;  	if (posSeedStartAlt > 0) {  		posSeedEndAlt = output.IndexOf (seedEndAlt' posSeedStartAlt + seedStartAlt.Length + 1);  		torSeedAlt = output.Substring (posSeedStartAlt + seedStartAlt.Length' posSeedEndAlt - posSeedStartAlt - seedStartAlt.Length);  	}  	string torLeechAlt = "";  	int posLeechStartAlt = output.IndexOf (leechStartAlt' posSeedStartAlt + 3);  	int posLeechEndAlt = 0;  	if (posLeechStartAlt > 0) {  		posLeechEndAlt = output.IndexOf (leechEndAlt' posLeechStartAlt + leechStartAlt.Length + 1);  		torLeechAlt = output.Substring (posLeechStartAlt + leechStartAlt.Length' posLeechEndAlt - posLeechStartAlt - leechStartAlt.Length);  	}  	TorrentLink torrentLinkAlt = new TorrentLink ();  	torrentLinkAlt.Source = this.GetSourceName ();  	torrentLinkAlt.SourceLong = this.GetSourceLongName ();  	torrentLinkAlt.TorrentDownloadLink = "";  	torrentLinkAlt.TorrentLinkURL = string.Format ("http://bakabt.me{0} "' linkAlt);  	torrentLinkAlt.TorrentName = string.Format ("[ALT] {0} [{1}]"' torNameAlt.Trim ()' cat);  	torrentLinkAlt.Size = torSizeAlt.Trim ();  	torrentLinkAlt.Seeders = torSeedAlt.Trim ();  	torrentLinkAlt.Leechers = torLeechAlt.Trim ();  	torLinks.Add (torrentLinkAlt);  	altpos = output.IndexOf (altBlock' posLeechEndAlt + 1);  }  
Magic Number,MyAnimePlugin3.Downloads,TorrentsNyaa,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsNyaa.cs,ParseSource,The following statement contains a magic number: while (pos > 0) {  	if (pos <= 0)  		break;  	int posNameStart = output.IndexOf (nameStart' pos + 1);  	int posNameEnd = output.IndexOf (nameEnd' posNameStart + nameStart.Length + 1);  	string torName = output.Substring (posNameStart + nameStart.Length' posNameEnd - posNameStart - nameStart.Length);  	int posTorStart = output.IndexOf (torStart' posNameEnd);  	int posTorEnd = output.IndexOf (torEnd' posTorStart + torStart.Length + 1);  	//Console.WriteLine("{0} - {1}"' posTorStart' posTorEnd);  	string torLink = output.Substring (posTorStart + torStart.Length' posTorEnd - posTorStart - torStart.Length);  	torLink = DownloadHelper.FixNyaaTorrentLink (torLink);  	// remove html codes  	torLink = HttpUtility.HtmlDecode (torLink);  	//Console.WriteLine("{0} - {1}"' posNameStart' posNameEnd);  	string torSize = "";  	int posSizeStart = output.IndexOf (sizeStart' posNameEnd);  	int posSizeEnd = 0;  	if (posSizeStart > 0) {  		posSizeEnd = output.IndexOf (sizeEnd' posSizeStart + sizeStart.Length + 1);  		torSize = output.Substring (posSizeStart + sizeStart.Length' posSizeEnd - posSizeStart - sizeStart.Length);  	}  	string torSeed = "";  	int posSeedStart = output.IndexOf (seedStart' posSizeEnd);  	int posSeedEnd = 0;  	if (posSeedStart > 0) {  		posSeedEnd = output.IndexOf (seedEnd' posSeedStart + seedStart.Length + 1);  		torSeed = output.Substring (posSeedStart + seedStart.Length' posSeedEnd - posSeedStart - seedStart.Length);  	}  	string torLeech = "";  	int posLeechStart = output.IndexOf (leechStart' posSeedStart + 3);  	int posLeechEnd = 0;  	if (posLeechStart > 0) {  		posLeechEnd = output.IndexOf (leechEnd' posLeechStart + leechStart.Length + 1);  		torLeech = output.Substring (posLeechStart + leechStart.Length' posLeechEnd - posLeechStart - leechStart.Length);  	}  	TorrentLink torrentLink = new TorrentLink ();  	torrentLink.Source = this.GetSourceName ();  	torrentLink.SourceLong = this.GetSourceLongName ();  	torrentLink.TorrentDownloadLink = torLink;  	torrentLink.TorrentName = torName;  	torrentLink.Size = torSize.Trim ();  	torrentLink.Seeders = torSeed.Trim ();  	torrentLink.Leechers = torLeech.Trim ();  	torLinks.Add (torrentLink);  	pos = output.IndexOf (startBlock' pos + 1);  	//Console.WriteLine("{0} - {1}"' torName' torLink);  }  
Magic Number,MyAnimePlugin3.Downloads,TorrentsNyaa,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentsNyaa.cs,ParseSourceSingleResult,The following statement contains a magic number: while (pos > 0) {  	if (pos <= 0)  		break;  	int posNameStart = output.IndexOf (nameStart' pos + 1);  	int posNameEnd = output.IndexOf (nameEnd' posNameStart + nameStart.Length + 1);  	string torName = output.Substring (posNameStart + nameStart.Length' posNameEnd - posNameStart - nameStart.Length);  	string torSeed = "";  	int posSeedStart = output.IndexOf (seedStart' posNameEnd);  	int posSeedEnd = 0;  	if (posSeedStart > 0) {  		posSeedEnd = output.IndexOf (seedEnd' posSeedStart + seedStart.Length + 1);  		torSeed = output.Substring (posSeedStart + seedStart.Length' posSeedEnd - posSeedStart - seedStart.Length);  	}  	string torLeech = "";  	int posLeechStart = output.IndexOf (leechStart' posSeedEnd + 3);  	int posLeechEnd = 0;  	if (posLeechStart > 0) {  		posLeechEnd = output.IndexOf (leechEnd' posLeechStart + leechStart.Length + 1);  		torLeech = output.Substring (posLeechStart + leechStart.Length' posLeechEnd - posLeechStart - leechStart.Length);  	}  	string torSize = "";  	int posSizeStart = output.IndexOf (sizeStart' posLeechEnd);  	int posSizeEnd = 0;  	if (posSizeStart > 0) {  		posSizeEnd = output.IndexOf (sizeEnd' posSizeStart + sizeStart.Length + 1);  		torSize = output.Substring (posSizeStart + sizeStart.Length' posSizeEnd - posSizeStart - sizeStart.Length);  	}  	int posTorStart = output.IndexOf (torStart' posSizeEnd);  	int posTorEnd = output.IndexOf (torEnd' posTorStart + torStart.Length + 1);  	string torLink = output.Substring (posTorStart + torStart.Length' posTorEnd - posTorStart - torStart.Length);  	torLink = DownloadHelper.FixNyaaTorrentLink (torLink);  	// remove html codes  	torLink = HttpUtility.HtmlDecode (torLink);  	TorrentLink torrentLink = new TorrentLink ();  	torrentLink.Source = this.GetSourceName ();  	torrentLink.SourceLong = this.GetSourceLongName ();  	torrentLink.TorrentDownloadLink = torLink;  	torrentLink.TorrentName = torName;  	torrentLink.Size = torSize.Trim ();  	torrentLink.Seeders = torSeed.Trim ();  	torrentLink.Leechers = torLeech.Trim ();  	torLinks.Add (torrentLink);  	pos = output.IndexOf (startBlock' pos + 1);  	//Console.WriteLine("{0} - {1}"' torName' torLink);  }  
Magic Number,MyAnimePlugin3.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadHelper.cs,SearchTorrents,The following statement contains a magic number: if (BaseConfig.Settings.TorrentPreferOwnGroups && search.SearchType == DownloadSearchType.Episode) {  	AnimeEpisodeVM ep = search.SearchParameter as AnimeEpisodeVM;  	AnimeSeriesVM series = JMMServerHelper.GetSeries (ep.AnimeSeriesID);  	if (series != null && series.AniDB_Anime != null) {  		List<GroupVideoQualityVM> videoQualityRecords = new List<GroupVideoQualityVM> ();  		List<JMMServerBinary.Contract_GroupVideoQuality> summ = JMMServerVM.Instance.clientBinaryHTTP.GetGroupVideoQualitySummary (series.AniDB_Anime.AnimeID);  		foreach (JMMServerBinary.Contract_GroupVideoQuality contract in summ) {  			GroupVideoQualityVM vidQual = new GroupVideoQualityVM (contract);  			videoQualityRecords.Add (vidQual);  		}  		// apply sorting  		if (videoQualityRecords.Count > 0) {  			List<SortPropOrFieldAndDirection> sortlist = new List<SortPropOrFieldAndDirection> ();  			sortlist.Add (new SortPropOrFieldAndDirection ("FileCountNormal"' true' SortType.eInteger));  			videoQualityRecords = Sorting.MultiSort<GroupVideoQualityVM> (videoQualityRecords' sortlist);  		}  		//only use the first 2  		int i = 0;  		foreach (GroupVideoQualityVM gvq in videoQualityRecords) {  			if (i == 2)  				break;  			if (!episodeGroupParms.Contains (gvq.GroupNameShort)) {  				episodeGroupParms.Add (gvq.GroupNameShort);  				i++;  			}  		}  	}  }  
Magic Number,MyAnimePlugin3.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadHelper.cs,SearchTorrents,The following statement contains a magic number: if (series != null && series.AniDB_Anime != null) {  	List<GroupVideoQualityVM> videoQualityRecords = new List<GroupVideoQualityVM> ();  	List<JMMServerBinary.Contract_GroupVideoQuality> summ = JMMServerVM.Instance.clientBinaryHTTP.GetGroupVideoQualitySummary (series.AniDB_Anime.AnimeID);  	foreach (JMMServerBinary.Contract_GroupVideoQuality contract in summ) {  		GroupVideoQualityVM vidQual = new GroupVideoQualityVM (contract);  		videoQualityRecords.Add (vidQual);  	}  	// apply sorting  	if (videoQualityRecords.Count > 0) {  		List<SortPropOrFieldAndDirection> sortlist = new List<SortPropOrFieldAndDirection> ();  		sortlist.Add (new SortPropOrFieldAndDirection ("FileCountNormal"' true' SortType.eInteger));  		videoQualityRecords = Sorting.MultiSort<GroupVideoQualityVM> (videoQualityRecords' sortlist);  	}  	//only use the first 2  	int i = 0;  	foreach (GroupVideoQualityVM gvq in videoQualityRecords) {  		if (i == 2)  			break;  		if (!episodeGroupParms.Contains (gvq.GroupNameShort)) {  			episodeGroupParms.Add (gvq.GroupNameShort);  			i++;  		}  	}  }  
Magic Number,MyAnimePlugin3.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadHelper.cs,SearchTorrents,The following statement contains a magic number: foreach (GroupVideoQualityVM gvq in videoQualityRecords) {  	if (i == 2)  		break;  	if (!episodeGroupParms.Contains (gvq.GroupNameShort)) {  		episodeGroupParms.Add (gvq.GroupNameShort);  		i++;  	}  }  
Magic Number,MyAnimePlugin3.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadHelper.cs,SearchTorrents,The following statement contains a magic number: if (i == 2)  	break;  
Magic Number,MyAnimePlugin3.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadHelper.cs,SearchTorrents,The following statement contains a magic number: foreach (string src in BaseConfig.Settings.TorrentSources) {  	if (src == MyAnimePlugin3.Constants.TorrentSourceNames.BakaBT && !doneBakaBT) {  		TorrentsBakaBT bakbt = new TorrentsBakaBT ();  		List<TorrentLink> bakbtLinks = bakbt.GetTorrents (parms);  		links.AddRange (bakbtLinks);  	}  	if (src == MyAnimePlugin3.Constants.TorrentSourceNames.BakaBT && !doneAnimeBytes) {  		TorrentsAnimeBytes abytes = new TorrentsAnimeBytes ();  		List<TorrentLink> abytesLinks = abytes.GetTorrents (parms);  		links.AddRange (abytesLinks);  	}  	if (src == MyAnimePlugin3.Constants.TorrentSourceNames.Nyaa) {  		TorrentsNyaa nyaa = new TorrentsNyaa ();  		List<TorrentLink> ttLinks = null;  		Dictionary<string' TorrentLink> dictLinks = new Dictionary<string' TorrentLink> ();  		foreach (string grp in episodeGroupParms) {  			List<string> tempParms = new List<string> ();  			foreach (string parmTemp in parms)  				tempParms.Add (parmTemp);  			tempParms.Insert (0' grp);  			ttLinks = nyaa.GetTorrents (tempParms);  			BaseConfig.MyAnimeLog.Write ("Searching for: " + search.ToString () + "(" + grp + ")");  			// only use the first 20  			int x = 0;  			foreach (TorrentLink link in ttLinks) {  				if (x == 20)  					break;  				dictLinks [link.TorrentDownloadLink] = link;  				BaseConfig.MyAnimeLog.Write ("Adding link: " + link.ToString ());  			}  		}  		BaseConfig.MyAnimeLog.Write ("Searching for: " + search.ToString ());  		ttLinks = nyaa.GetTorrents (parms);  		foreach (TorrentLink link in ttLinks) {  			dictLinks [link.TorrentDownloadLink] = link;  			BaseConfig.MyAnimeLog.Write ("Adding link: " + link.ToString ());  		}  		links.AddRange (dictLinks.Values);  	}  	if (src == MyAnimePlugin3.Constants.TorrentSourceNames.AnimeSuki) {  		List<TorrentLink> sukiLinks = suki.GetTorrents (parms);  		links.AddRange (sukiLinks);  	}  	if (src == MyAnimePlugin3.Constants.TorrentSourceNames.TT) {  		TorrentsTokyoToshokan tt = new TorrentsTokyoToshokan ();  		List<TorrentLink> ttLinks = null;  		Dictionary<string' TorrentLink> dictLinks = new Dictionary<string' TorrentLink> ();  		foreach (string grp in episodeGroupParms) {  			List<string> tempParms = new List<string> ();  			foreach (string parmTemp in parms)  				tempParms.Add (parmTemp);  			tempParms.Insert (0' grp);  			ttLinks = tt.GetTorrents (tempParms);  			BaseConfig.MyAnimeLog.Write ("Searching for: " + search.ToString () + "(" + grp + ")");  			// only use the first 20  			int x = 0;  			foreach (TorrentLink link in ttLinks) {  				if (x == 20)  					break;  				dictLinks [link.TorrentDownloadLink] = link;  				BaseConfig.MyAnimeLog.Write ("Adding link: " + link.ToString ());  			}  		}  		BaseConfig.MyAnimeLog.Write ("Searching for: " + search.ToString ());  		ttLinks = tt.GetTorrents (parms);  		foreach (TorrentLink link in ttLinks) {  			dictLinks [link.TorrentDownloadLink] = link;  			BaseConfig.MyAnimeLog.Write ("Adding link: " + link.ToString ());  		}  		links.AddRange (dictLinks.Values);  	}  	if (src == MyAnimePlugin3.Constants.TorrentSourceNames.BakaUpdates) {  		List<TorrentLink> bakauLinks = bakau.GetTorrents (parms);  		links.AddRange (bakauLinks);  	}  }  
Magic Number,MyAnimePlugin3.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadHelper.cs,SearchTorrents,The following statement contains a magic number: foreach (string src in BaseConfig.Settings.TorrentSources) {  	if (src == MyAnimePlugin3.Constants.TorrentSourceNames.BakaBT && !doneBakaBT) {  		TorrentsBakaBT bakbt = new TorrentsBakaBT ();  		List<TorrentLink> bakbtLinks = bakbt.GetTorrents (parms);  		links.AddRange (bakbtLinks);  	}  	if (src == MyAnimePlugin3.Constants.TorrentSourceNames.BakaBT && !doneAnimeBytes) {  		TorrentsAnimeBytes abytes = new TorrentsAnimeBytes ();  		List<TorrentLink> abytesLinks = abytes.GetTorrents (parms);  		links.AddRange (abytesLinks);  	}  	if (src == MyAnimePlugin3.Constants.TorrentSourceNames.Nyaa) {  		TorrentsNyaa nyaa = new TorrentsNyaa ();  		List<TorrentLink> ttLinks = null;  		Dictionary<string' TorrentLink> dictLinks = new Dictionary<string' TorrentLink> ();  		foreach (string grp in episodeGroupParms) {  			List<string> tempParms = new List<string> ();  			foreach (string parmTemp in parms)  				tempParms.Add (parmTemp);  			tempParms.Insert (0' grp);  			ttLinks = nyaa.GetTorrents (tempParms);  			BaseConfig.MyAnimeLog.Write ("Searching for: " + search.ToString () + "(" + grp + ")");  			// only use the first 20  			int x = 0;  			foreach (TorrentLink link in ttLinks) {  				if (x == 20)  					break;  				dictLinks [link.TorrentDownloadLink] = link;  				BaseConfig.MyAnimeLog.Write ("Adding link: " + link.ToString ());  			}  		}  		BaseConfig.MyAnimeLog.Write ("Searching for: " + search.ToString ());  		ttLinks = nyaa.GetTorrents (parms);  		foreach (TorrentLink link in ttLinks) {  			dictLinks [link.TorrentDownloadLink] = link;  			BaseConfig.MyAnimeLog.Write ("Adding link: " + link.ToString ());  		}  		links.AddRange (dictLinks.Values);  	}  	if (src == MyAnimePlugin3.Constants.TorrentSourceNames.AnimeSuki) {  		List<TorrentLink> sukiLinks = suki.GetTorrents (parms);  		links.AddRange (sukiLinks);  	}  	if (src == MyAnimePlugin3.Constants.TorrentSourceNames.TT) {  		TorrentsTokyoToshokan tt = new TorrentsTokyoToshokan ();  		List<TorrentLink> ttLinks = null;  		Dictionary<string' TorrentLink> dictLinks = new Dictionary<string' TorrentLink> ();  		foreach (string grp in episodeGroupParms) {  			List<string> tempParms = new List<string> ();  			foreach (string parmTemp in parms)  				tempParms.Add (parmTemp);  			tempParms.Insert (0' grp);  			ttLinks = tt.GetTorrents (tempParms);  			BaseConfig.MyAnimeLog.Write ("Searching for: " + search.ToString () + "(" + grp + ")");  			// only use the first 20  			int x = 0;  			foreach (TorrentLink link in ttLinks) {  				if (x == 20)  					break;  				dictLinks [link.TorrentDownloadLink] = link;  				BaseConfig.MyAnimeLog.Write ("Adding link: " + link.ToString ());  			}  		}  		BaseConfig.MyAnimeLog.Write ("Searching for: " + search.ToString ());  		ttLinks = tt.GetTorrents (parms);  		foreach (TorrentLink link in ttLinks) {  			dictLinks [link.TorrentDownloadLink] = link;  			BaseConfig.MyAnimeLog.Write ("Adding link: " + link.ToString ());  		}  		links.AddRange (dictLinks.Values);  	}  	if (src == MyAnimePlugin3.Constants.TorrentSourceNames.BakaUpdates) {  		List<TorrentLink> bakauLinks = bakau.GetTorrents (parms);  		links.AddRange (bakauLinks);  	}  }  
Magic Number,MyAnimePlugin3.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadHelper.cs,SearchTorrents,The following statement contains a magic number: if (src == MyAnimePlugin3.Constants.TorrentSourceNames.Nyaa) {  	TorrentsNyaa nyaa = new TorrentsNyaa ();  	List<TorrentLink> ttLinks = null;  	Dictionary<string' TorrentLink> dictLinks = new Dictionary<string' TorrentLink> ();  	foreach (string grp in episodeGroupParms) {  		List<string> tempParms = new List<string> ();  		foreach (string parmTemp in parms)  			tempParms.Add (parmTemp);  		tempParms.Insert (0' grp);  		ttLinks = nyaa.GetTorrents (tempParms);  		BaseConfig.MyAnimeLog.Write ("Searching for: " + search.ToString () + "(" + grp + ")");  		// only use the first 20  		int x = 0;  		foreach (TorrentLink link in ttLinks) {  			if (x == 20)  				break;  			dictLinks [link.TorrentDownloadLink] = link;  			BaseConfig.MyAnimeLog.Write ("Adding link: " + link.ToString ());  		}  	}  	BaseConfig.MyAnimeLog.Write ("Searching for: " + search.ToString ());  	ttLinks = nyaa.GetTorrents (parms);  	foreach (TorrentLink link in ttLinks) {  		dictLinks [link.TorrentDownloadLink] = link;  		BaseConfig.MyAnimeLog.Write ("Adding link: " + link.ToString ());  	}  	links.AddRange (dictLinks.Values);  }  
Magic Number,MyAnimePlugin3.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadHelper.cs,SearchTorrents,The following statement contains a magic number: foreach (string grp in episodeGroupParms) {  	List<string> tempParms = new List<string> ();  	foreach (string parmTemp in parms)  		tempParms.Add (parmTemp);  	tempParms.Insert (0' grp);  	ttLinks = nyaa.GetTorrents (tempParms);  	BaseConfig.MyAnimeLog.Write ("Searching for: " + search.ToString () + "(" + grp + ")");  	// only use the first 20  	int x = 0;  	foreach (TorrentLink link in ttLinks) {  		if (x == 20)  			break;  		dictLinks [link.TorrentDownloadLink] = link;  		BaseConfig.MyAnimeLog.Write ("Adding link: " + link.ToString ());  	}  }  
Magic Number,MyAnimePlugin3.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadHelper.cs,SearchTorrents,The following statement contains a magic number: foreach (TorrentLink link in ttLinks) {  	if (x == 20)  		break;  	dictLinks [link.TorrentDownloadLink] = link;  	BaseConfig.MyAnimeLog.Write ("Adding link: " + link.ToString ());  }  
Magic Number,MyAnimePlugin3.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadHelper.cs,SearchTorrents,The following statement contains a magic number: if (x == 20)  	break;  
Magic Number,MyAnimePlugin3.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadHelper.cs,SearchTorrents,The following statement contains a magic number: if (src == MyAnimePlugin3.Constants.TorrentSourceNames.TT) {  	TorrentsTokyoToshokan tt = new TorrentsTokyoToshokan ();  	List<TorrentLink> ttLinks = null;  	Dictionary<string' TorrentLink> dictLinks = new Dictionary<string' TorrentLink> ();  	foreach (string grp in episodeGroupParms) {  		List<string> tempParms = new List<string> ();  		foreach (string parmTemp in parms)  			tempParms.Add (parmTemp);  		tempParms.Insert (0' grp);  		ttLinks = tt.GetTorrents (tempParms);  		BaseConfig.MyAnimeLog.Write ("Searching for: " + search.ToString () + "(" + grp + ")");  		// only use the first 20  		int x = 0;  		foreach (TorrentLink link in ttLinks) {  			if (x == 20)  				break;  			dictLinks [link.TorrentDownloadLink] = link;  			BaseConfig.MyAnimeLog.Write ("Adding link: " + link.ToString ());  		}  	}  	BaseConfig.MyAnimeLog.Write ("Searching for: " + search.ToString ());  	ttLinks = tt.GetTorrents (parms);  	foreach (TorrentLink link in ttLinks) {  		dictLinks [link.TorrentDownloadLink] = link;  		BaseConfig.MyAnimeLog.Write ("Adding link: " + link.ToString ());  	}  	links.AddRange (dictLinks.Values);  }  
Magic Number,MyAnimePlugin3.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadHelper.cs,SearchTorrents,The following statement contains a magic number: foreach (string grp in episodeGroupParms) {  	List<string> tempParms = new List<string> ();  	foreach (string parmTemp in parms)  		tempParms.Add (parmTemp);  	tempParms.Insert (0' grp);  	ttLinks = tt.GetTorrents (tempParms);  	BaseConfig.MyAnimeLog.Write ("Searching for: " + search.ToString () + "(" + grp + ")");  	// only use the first 20  	int x = 0;  	foreach (TorrentLink link in ttLinks) {  		if (x == 20)  			break;  		dictLinks [link.TorrentDownloadLink] = link;  		BaseConfig.MyAnimeLog.Write ("Adding link: " + link.ToString ());  	}  }  
Magic Number,MyAnimePlugin3.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadHelper.cs,SearchTorrents,The following statement contains a magic number: foreach (TorrentLink link in ttLinks) {  	if (x == 20)  		break;  	dictLinks [link.TorrentDownloadLink] = link;  	BaseConfig.MyAnimeLog.Write ("Adding link: " + link.ToString ());  }  
Magic Number,MyAnimePlugin3.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadHelper.cs,SearchTorrents,The following statement contains a magic number: if (x == 20)  	break;  
Magic Number,MyAnimePlugin3.Downloads,DownloadSearchCriteria,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadSearchCriteria.cs,GetParms,The following statement contains a magic number: if (searchType == DownloadSearchType.Episode) {  	AnimeEpisodeVM ep = searchParameter as AnimeEpisodeVM;  	AnimeSeriesVM series = JMMServerHelper.GetSeries (ep.AnimeSeriesID);  	if (series == null)  		return parms;  	AniDB_AnimeVM anime = series.AniDB_Anime;  	if (anime == null)  		return parms;  	// only use the first 2 words of the anime's title  	string[] titles = anime.MainTitle.Split (' ');  	int i = 0;  	foreach (string s in titles) {  		i++;  		parms.Add (s.Trim ());  		if (i == 2)  			break;  	}  	parms.Add (ep.EpisodeNumber.ToString ().PadLeft (2' '0'));  }  
Magic Number,MyAnimePlugin3.Downloads,DownloadSearchCriteria,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadSearchCriteria.cs,GetParms,The following statement contains a magic number: if (searchType == DownloadSearchType.Episode) {  	AnimeEpisodeVM ep = searchParameter as AnimeEpisodeVM;  	AnimeSeriesVM series = JMMServerHelper.GetSeries (ep.AnimeSeriesID);  	if (series == null)  		return parms;  	AniDB_AnimeVM anime = series.AniDB_Anime;  	if (anime == null)  		return parms;  	// only use the first 2 words of the anime's title  	string[] titles = anime.MainTitle.Split (' ');  	int i = 0;  	foreach (string s in titles) {  		i++;  		parms.Add (s.Trim ());  		if (i == 2)  			break;  	}  	parms.Add (ep.EpisodeNumber.ToString ().PadLeft (2' '0'));  }  
Magic Number,MyAnimePlugin3.Downloads,DownloadSearchCriteria,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadSearchCriteria.cs,GetParms,The following statement contains a magic number: foreach (string s in titles) {  	i++;  	parms.Add (s.Trim ());  	if (i == 2)  		break;  }  
Magic Number,MyAnimePlugin3.Downloads,DownloadSearchCriteria,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadSearchCriteria.cs,GetParms,The following statement contains a magic number: if (i == 2)  	break;  
Magic Number,MyAnimePlugin3.Downloads,DownloadSearchCriteria,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadSearchCriteria.cs,GetParms,The following statement contains a magic number: parms.Add (ep.EpisodeNumber.ToString ().PadLeft (2' '0'));  
Magic Number,MyAnimePlugin3.Downloads,DownloadSearchCriteria,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadSearchCriteria.cs,GetParms,The following statement contains a magic number: if (searchType == DownloadSearchType.Series) {  	AniDB_AnimeVM anime = searchParameter as AniDB_AnimeVM;  	// only use the first 2 words of the anime's title  	string[] titles = anime.MainTitle.Split (' ');  	int i = 0;  	foreach (string s in titles) {  		i++;  		parms.Add (s.Trim ());  		if (i == 2)  			break;  	}  }  
Magic Number,MyAnimePlugin3.Downloads,DownloadSearchCriteria,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadSearchCriteria.cs,GetParms,The following statement contains a magic number: foreach (string s in titles) {  	i++;  	parms.Add (s.Trim ());  	if (i == 2)  		break;  }  
Magic Number,MyAnimePlugin3.Downloads,DownloadSearchCriteria,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadSearchCriteria.cs,GetParms,The following statement contains a magic number: if (i == 2)  	break;  
Magic Number,MyAnimePlugin3.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.Name = row [2].ToString ();  
Magic Number,MyAnimePlugin3.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.Size = long.Parse (row [3].ToString ());  
Magic Number,MyAnimePlugin3.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.PercentProgress = long.Parse (row [4].ToString ());  
Magic Number,MyAnimePlugin3.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.Downloaded = long.Parse (row [5].ToString ());  
Magic Number,MyAnimePlugin3.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.Uploaded = long.Parse (row [6].ToString ());  
Magic Number,MyAnimePlugin3.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.Ratio = long.Parse (row [7].ToString ());  
Magic Number,MyAnimePlugin3.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.UploadSpeed = long.Parse (row [8].ToString ());  
Magic Number,MyAnimePlugin3.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.DownloadSpeed = long.Parse (row [9].ToString ());  
Magic Number,MyAnimePlugin3.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.ETA = long.Parse (row [10].ToString ());  
Magic Number,MyAnimePlugin3.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.Label = row [11].ToString ();  
Magic Number,MyAnimePlugin3.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.PeersConnected = long.Parse (row [12].ToString ());  
Magic Number,MyAnimePlugin3.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.PeersInSwarm = long.Parse (row [13].ToString ());  
Magic Number,MyAnimePlugin3.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.SeedsConnected = long.Parse (row [14].ToString ());  
Magic Number,MyAnimePlugin3.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.SeedsInSwarm = long.Parse (row [15].ToString ());  
Magic Number,MyAnimePlugin3.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.Availability = long.Parse (row [16].ToString ());  
Magic Number,MyAnimePlugin3.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.TorrentQueueOrder = long.Parse (row [17].ToString ());  
Magic Number,MyAnimePlugin3.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.Remaining = long.Parse (row [18].ToString ());  
Magic Number,MyAnimePlugin3.Downloads,TorrentFile,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentFile.cs,TorrentFile,The following statement contains a magic number: this.downloaded = long.Parse (row [2].ToString ());  
Magic Number,MyAnimePlugin3.Downloads,TorrentFile,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\TorrentFile.cs,TorrentFile,The following statement contains a magic number: this.priority = long.Parse (row [3].ToString ());  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,Init,The following statement contains a magic number: torrentsTimer.Interval = 10 * 1000;  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,Init,The following statement contains a magic number: torrentsTimer.Interval = 10 * 1000;  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,torrentsTimer_Elapsed,The following statement contains a magic number: try {  	torrentsTimer.Stop ();  	List<Torrent> torrents = new List<Torrent> ();  	//BaseConfig.MyAnimeLog.Write("Getting torrents list...");  	bool success = GetTorrentList (ref torrents);  	if (success) {  		OnListRefreshedEvent (new ListRefreshedEventArgs (torrents));  		torrentsTimer.Interval = 10 * 1000;  	}  	else  		torrentsTimer.Interval = 60 * 1000;  	torrentsTimer.Start ();  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write (ex.ToString ());  	torrentsTimer.Start ();  }  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,torrentsTimer_Elapsed,The following statement contains a magic number: try {  	torrentsTimer.Stop ();  	List<Torrent> torrents = new List<Torrent> ();  	//BaseConfig.MyAnimeLog.Write("Getting torrents list...");  	bool success = GetTorrentList (ref torrents);  	if (success) {  		OnListRefreshedEvent (new ListRefreshedEventArgs (torrents));  		torrentsTimer.Interval = 10 * 1000;  	}  	else  		torrentsTimer.Interval = 60 * 1000;  	torrentsTimer.Start ();  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write (ex.ToString ());  	torrentsTimer.Start ();  }  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,torrentsTimer_Elapsed,The following statement contains a magic number: try {  	torrentsTimer.Stop ();  	List<Torrent> torrents = new List<Torrent> ();  	//BaseConfig.MyAnimeLog.Write("Getting torrents list...");  	bool success = GetTorrentList (ref torrents);  	if (success) {  		OnListRefreshedEvent (new ListRefreshedEventArgs (torrents));  		torrentsTimer.Interval = 10 * 1000;  	}  	else  		torrentsTimer.Interval = 60 * 1000;  	torrentsTimer.Start ();  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write (ex.ToString ());  	torrentsTimer.Start ();  }  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,torrentsTimer_Elapsed,The following statement contains a magic number: try {  	torrentsTimer.Stop ();  	List<Torrent> torrents = new List<Torrent> ();  	//BaseConfig.MyAnimeLog.Write("Getting torrents list...");  	bool success = GetTorrentList (ref torrents);  	if (success) {  		OnListRefreshedEvent (new ListRefreshedEventArgs (torrents));  		torrentsTimer.Interval = 10 * 1000;  	}  	else  		torrentsTimer.Interval = 60 * 1000;  	torrentsTimer.Start ();  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write (ex.ToString ());  	torrentsTimer.Start ();  }  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,torrentsTimer_Elapsed,The following statement contains a magic number: if (success) {  	OnListRefreshedEvent (new ListRefreshedEventArgs (torrents));  	torrentsTimer.Interval = 10 * 1000;  }  else  	torrentsTimer.Interval = 60 * 1000;  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,torrentsTimer_Elapsed,The following statement contains a magic number: if (success) {  	OnListRefreshedEvent (new ListRefreshedEventArgs (torrents));  	torrentsTimer.Interval = 10 * 1000;  }  else  	torrentsTimer.Interval = 60 * 1000;  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,torrentsTimer_Elapsed,The following statement contains a magic number: if (success) {  	OnListRefreshedEvent (new ListRefreshedEventArgs (torrents));  	torrentsTimer.Interval = 10 * 1000;  }  else  	torrentsTimer.Interval = 60 * 1000;  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,torrentsTimer_Elapsed,The following statement contains a magic number: if (success) {  	OnListRefreshedEvent (new ListRefreshedEventArgs (torrents));  	torrentsTimer.Interval = 10 * 1000;  }  else  	torrentsTimer.Interval = 60 * 1000;  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,torrentsTimer_Elapsed,The following statement contains a magic number: torrentsTimer.Interval = 10 * 1000;  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,torrentsTimer_Elapsed,The following statement contains a magic number: torrentsTimer.Interval = 10 * 1000;  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,torrentsTimer_Elapsed,The following statement contains a magic number: torrentsTimer.Interval = 60 * 1000;  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,torrentsTimer_Elapsed,The following statement contains a magic number: torrentsTimer.Interval = 60 * 1000;  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,PopulateToken,The following statement contains a magic number: try {  	url = string.Format (urlTorrentTokenPage' address' port);  	BaseConfig.MyAnimeLog.Write ("token url: {0}"' url);  	HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create (url);  	webReq.Timeout = 10000;  	// 10 seconds  	webReq.Credentials = new NetworkCredential (username' password);  	webReq.CookieContainer = cookieJar;  	HttpWebResponse WebResponse = (HttpWebResponse)webReq.GetResponse ();  	Stream responseStream = WebResponse.GetResponseStream ();  	StreamReader Reader = new StreamReader (responseStream' Encoding.UTF8);  	string output = Reader.ReadToEnd ();  	BaseConfig.MyAnimeLog.Write ("token reponse: {0}"' output);  	WebResponse.Close ();  	responseStream.Close ();  	// parse and get the token  	// <html><div id='token' style='display:none;'>u3iiuDG4dwYDMzurIFif7FS-ldLPcvHk6QlB4y8LSKK5mX9GSPUZ_PpxD0s=</div></html>  	char q = (char)34;  	string quote = q.ToString ();  	string torStart = "display:none;'>";  	string torEnd = "</div>";  	int posTorStart = output.IndexOf (torStart' 0);  	if (posTorStart <= 0)  		return;  	int posTorEnd = output.IndexOf (torEnd' posTorStart + torStart.Length + 1);  	token = output.Substring (posTorStart + torStart.Length' posTorEnd - posTorStart - torStart.Length);  	//BaseConfig.MyAnimeLog.Write("token: {0}"' token);  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write ("Error in StartTorrent: {0} - {1}"' url' ex.ToString ());  	return;  }  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,PopulateToken,The following statement contains a magic number: try {  	url = string.Format (urlTorrentTokenPage' address' port);  	BaseConfig.MyAnimeLog.Write ("token url: {0}"' url);  	HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create (url);  	webReq.Timeout = 10000;  	// 10 seconds  	webReq.Credentials = new NetworkCredential (username' password);  	webReq.CookieContainer = cookieJar;  	HttpWebResponse WebResponse = (HttpWebResponse)webReq.GetResponse ();  	Stream responseStream = WebResponse.GetResponseStream ();  	StreamReader Reader = new StreamReader (responseStream' Encoding.UTF8);  	string output = Reader.ReadToEnd ();  	BaseConfig.MyAnimeLog.Write ("token reponse: {0}"' output);  	WebResponse.Close ();  	responseStream.Close ();  	// parse and get the token  	// <html><div id='token' style='display:none;'>u3iiuDG4dwYDMzurIFif7FS-ldLPcvHk6QlB4y8LSKK5mX9GSPUZ_PpxD0s=</div></html>  	char q = (char)34;  	string quote = q.ToString ();  	string torStart = "display:none;'>";  	string torEnd = "</div>";  	int posTorStart = output.IndexOf (torStart' 0);  	if (posTorStart <= 0)  		return;  	int posTorEnd = output.IndexOf (torEnd' posTorStart + torStart.Length + 1);  	token = output.Substring (posTorStart + torStart.Length' posTorEnd - posTorStart - torStart.Length);  	//BaseConfig.MyAnimeLog.Write("token: {0}"' token);  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write ("Error in StartTorrent: {0} - {1}"' url' ex.ToString ());  	return;  }  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,PopulateToken,The following statement contains a magic number: webReq.Timeout = 10000;  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,GetWebResponse,The following statement contains a magic number: webReq.Timeout = 15000;  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,GetWebResponse,The following statement contains a magic number: if (tryAgain) {  	PopulateToken ();  	// fin the token in the url and replace it with the new one  	//http://{0}:{1}/gui/?token={2}&list=1  	int iStart = url.IndexOf (@"?token="' 0);  	int iFinish = url.IndexOf (@"&"' 0);  	string prefix = url.Substring (0' iStart);  	string tokenStr = @"?token=" + token;  	string suffix = url.Substring (iFinish' url.Length - iFinish);  	BaseConfig.MyAnimeLog.Write ("prefix: {0} --- tokenStr: {1} --- suffix: {2}"' prefix' tokenStr' suffix);  	url = prefix + tokenStr + suffix;  	webReq = (HttpWebRequest)WebRequest.Create (url);  	webReq.Timeout = 15000;  	// 15 seconds  	webReq.Credentials = new NetworkCredential (username' password);  	webReq.CookieContainer = cookieJar;  	webResponse = (HttpWebResponse)webReq.GetResponse ();  }  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,GetWebResponse,The following statement contains a magic number: webReq.Timeout = 15000;  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,GetFileList,The following statement contains a magic number: try {  	string url = string.Format (urlTorrentFileList' address' port' token' hash);  	string output = GetWebResponse (url);  	if (output.Length == 0)  		return false;  	TorrentFileList fileList = JSONHelper.Deserialize<TorrentFileList> (output);  	if (fileList != null && fileList.files != null && fileList.files.Length > 1) {  		object[] actualFiles = fileList.files [1] as object[];  		if (actualFiles == null)  			return false;  		foreach (object obj in actualFiles) {  			object[] actualFile = obj as object[];  			if (actualFile == null)  				continue;  			TorrentFile tf = new TorrentFile ();  			tf.FileName = actualFile [0].ToString ();  			tf.FileSize = long.Parse (actualFile [1].ToString ());  			tf.Downloaded = long.Parse (actualFile [2].ToString ());  			tf.Priority = long.Parse (actualFile [3].ToString ());  			torFiles.Add (tf);  		}  	}  	return true;  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write ("Error in GetTorrentList: {0}"' ex.ToString ());  	return false;  }  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,GetFileList,The following statement contains a magic number: try {  	string url = string.Format (urlTorrentFileList' address' port' token' hash);  	string output = GetWebResponse (url);  	if (output.Length == 0)  		return false;  	TorrentFileList fileList = JSONHelper.Deserialize<TorrentFileList> (output);  	if (fileList != null && fileList.files != null && fileList.files.Length > 1) {  		object[] actualFiles = fileList.files [1] as object[];  		if (actualFiles == null)  			return false;  		foreach (object obj in actualFiles) {  			object[] actualFile = obj as object[];  			if (actualFile == null)  				continue;  			TorrentFile tf = new TorrentFile ();  			tf.FileName = actualFile [0].ToString ();  			tf.FileSize = long.Parse (actualFile [1].ToString ());  			tf.Downloaded = long.Parse (actualFile [2].ToString ());  			tf.Priority = long.Parse (actualFile [3].ToString ());  			torFiles.Add (tf);  		}  	}  	return true;  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write ("Error in GetTorrentList: {0}"' ex.ToString ());  	return false;  }  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,GetFileList,The following statement contains a magic number: if (fileList != null && fileList.files != null && fileList.files.Length > 1) {  	object[] actualFiles = fileList.files [1] as object[];  	if (actualFiles == null)  		return false;  	foreach (object obj in actualFiles) {  		object[] actualFile = obj as object[];  		if (actualFile == null)  			continue;  		TorrentFile tf = new TorrentFile ();  		tf.FileName = actualFile [0].ToString ();  		tf.FileSize = long.Parse (actualFile [1].ToString ());  		tf.Downloaded = long.Parse (actualFile [2].ToString ());  		tf.Priority = long.Parse (actualFile [3].ToString ());  		torFiles.Add (tf);  	}  }  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,GetFileList,The following statement contains a magic number: if (fileList != null && fileList.files != null && fileList.files.Length > 1) {  	object[] actualFiles = fileList.files [1] as object[];  	if (actualFiles == null)  		return false;  	foreach (object obj in actualFiles) {  		object[] actualFile = obj as object[];  		if (actualFile == null)  			continue;  		TorrentFile tf = new TorrentFile ();  		tf.FileName = actualFile [0].ToString ();  		tf.FileSize = long.Parse (actualFile [1].ToString ());  		tf.Downloaded = long.Parse (actualFile [2].ToString ());  		tf.Priority = long.Parse (actualFile [3].ToString ());  		torFiles.Add (tf);  	}  }  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,GetFileList,The following statement contains a magic number: foreach (object obj in actualFiles) {  	object[] actualFile = obj as object[];  	if (actualFile == null)  		continue;  	TorrentFile tf = new TorrentFile ();  	tf.FileName = actualFile [0].ToString ();  	tf.FileSize = long.Parse (actualFile [1].ToString ());  	tf.Downloaded = long.Parse (actualFile [2].ToString ());  	tf.Priority = long.Parse (actualFile [3].ToString ());  	torFiles.Add (tf);  }  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,GetFileList,The following statement contains a magic number: foreach (object obj in actualFiles) {  	object[] actualFile = obj as object[];  	if (actualFile == null)  		continue;  	TorrentFile tf = new TorrentFile ();  	tf.FileName = actualFile [0].ToString ();  	tf.FileSize = long.Parse (actualFile [1].ToString ());  	tf.Downloaded = long.Parse (actualFile [2].ToString ());  	tf.Priority = long.Parse (actualFile [3].ToString ());  	torFiles.Add (tf);  }  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,GetFileList,The following statement contains a magic number: tf.Downloaded = long.Parse (actualFile [2].ToString ());  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,GetFileList,The following statement contains a magic number: tf.Priority = long.Parse (actualFile [3].ToString ());  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,GetFileListOld,The following statement contains a magic number: try {  	string url = string.Format (urlTorrentFileList' address' port' token' hash);  	string output = GetWebResponse (url);  	if (output.Length == 0)  		return false;  	TorrentFileList fileList = JSONHelper.Deserialize<TorrentFileList> (output);  	// find the 2nd instance of the "["  	int pos = output.IndexOf ("["' 0);  	if (pos > 0)  		pos = output.IndexOf ("["' pos + 1);  	if (pos > 0) {  		string output2 = output;  		output2 = output2.Substring (pos' output2.Length - pos);  		//BaseConfig.MyAnimeLog.Write("output2: {0}"' output2);  		output2 = output2.Replace ("["' "");  		output2 = output2.Replace ("]"' "");  		output2 = output2.Replace ("{"' "");  		output2 = output2.Replace ("}"' "");  		output2 = output2.Replace ("\r"' "");  		output2 = output2.Replace ("\n"' "");  		BaseConfig.MyAnimeLog.Write ("output2: {0}"' output2);  		DataTable dtDetails = CsvParser.Parse (output2);  		// there will be 4 columns per row  		//BaseConfig.MyAnimeLog.Write("dtDetails.Columns.Count: {0}"' dtDetails.Columns.Count.ToString());  		//BaseConfig.MyAnimeLog.Write("dtDetails.Rows.Count: {0}"' dtDetails.Rows.Count.ToString());  		int i = 0;  		while (i < dtDetails.Columns.Count) {  			TorrentFile tf = new TorrentFile ();  			tf.FileName = dtDetails.Rows [0] [i].ToString ();  			tf.FileSize = long.Parse (dtDetails.Rows [0] [i + 1].ToString ());  			tf.Downloaded = long.Parse (dtDetails.Rows [0] [i + 2].ToString ());  			tf.Priority = long.Parse (dtDetails.Rows [0] [i + 3].ToString ());  			torFiles.Add (tf);  			i += 4;  		}  	}  	return true;  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write ("Error in GetTorrentList: {0}"' ex.ToString ());  	return false;  }  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,GetFileListOld,The following statement contains a magic number: try {  	string url = string.Format (urlTorrentFileList' address' port' token' hash);  	string output = GetWebResponse (url);  	if (output.Length == 0)  		return false;  	TorrentFileList fileList = JSONHelper.Deserialize<TorrentFileList> (output);  	// find the 2nd instance of the "["  	int pos = output.IndexOf ("["' 0);  	if (pos > 0)  		pos = output.IndexOf ("["' pos + 1);  	if (pos > 0) {  		string output2 = output;  		output2 = output2.Substring (pos' output2.Length - pos);  		//BaseConfig.MyAnimeLog.Write("output2: {0}"' output2);  		output2 = output2.Replace ("["' "");  		output2 = output2.Replace ("]"' "");  		output2 = output2.Replace ("{"' "");  		output2 = output2.Replace ("}"' "");  		output2 = output2.Replace ("\r"' "");  		output2 = output2.Replace ("\n"' "");  		BaseConfig.MyAnimeLog.Write ("output2: {0}"' output2);  		DataTable dtDetails = CsvParser.Parse (output2);  		// there will be 4 columns per row  		//BaseConfig.MyAnimeLog.Write("dtDetails.Columns.Count: {0}"' dtDetails.Columns.Count.ToString());  		//BaseConfig.MyAnimeLog.Write("dtDetails.Rows.Count: {0}"' dtDetails.Rows.Count.ToString());  		int i = 0;  		while (i < dtDetails.Columns.Count) {  			TorrentFile tf = new TorrentFile ();  			tf.FileName = dtDetails.Rows [0] [i].ToString ();  			tf.FileSize = long.Parse (dtDetails.Rows [0] [i + 1].ToString ());  			tf.Downloaded = long.Parse (dtDetails.Rows [0] [i + 2].ToString ());  			tf.Priority = long.Parse (dtDetails.Rows [0] [i + 3].ToString ());  			torFiles.Add (tf);  			i += 4;  		}  	}  	return true;  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write ("Error in GetTorrentList: {0}"' ex.ToString ());  	return false;  }  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,GetFileListOld,The following statement contains a magic number: try {  	string url = string.Format (urlTorrentFileList' address' port' token' hash);  	string output = GetWebResponse (url);  	if (output.Length == 0)  		return false;  	TorrentFileList fileList = JSONHelper.Deserialize<TorrentFileList> (output);  	// find the 2nd instance of the "["  	int pos = output.IndexOf ("["' 0);  	if (pos > 0)  		pos = output.IndexOf ("["' pos + 1);  	if (pos > 0) {  		string output2 = output;  		output2 = output2.Substring (pos' output2.Length - pos);  		//BaseConfig.MyAnimeLog.Write("output2: {0}"' output2);  		output2 = output2.Replace ("["' "");  		output2 = output2.Replace ("]"' "");  		output2 = output2.Replace ("{"' "");  		output2 = output2.Replace ("}"' "");  		output2 = output2.Replace ("\r"' "");  		output2 = output2.Replace ("\n"' "");  		BaseConfig.MyAnimeLog.Write ("output2: {0}"' output2);  		DataTable dtDetails = CsvParser.Parse (output2);  		// there will be 4 columns per row  		//BaseConfig.MyAnimeLog.Write("dtDetails.Columns.Count: {0}"' dtDetails.Columns.Count.ToString());  		//BaseConfig.MyAnimeLog.Write("dtDetails.Rows.Count: {0}"' dtDetails.Rows.Count.ToString());  		int i = 0;  		while (i < dtDetails.Columns.Count) {  			TorrentFile tf = new TorrentFile ();  			tf.FileName = dtDetails.Rows [0] [i].ToString ();  			tf.FileSize = long.Parse (dtDetails.Rows [0] [i + 1].ToString ());  			tf.Downloaded = long.Parse (dtDetails.Rows [0] [i + 2].ToString ());  			tf.Priority = long.Parse (dtDetails.Rows [0] [i + 3].ToString ());  			torFiles.Add (tf);  			i += 4;  		}  	}  	return true;  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write ("Error in GetTorrentList: {0}"' ex.ToString ());  	return false;  }  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,GetFileListOld,The following statement contains a magic number: if (pos > 0) {  	string output2 = output;  	output2 = output2.Substring (pos' output2.Length - pos);  	//BaseConfig.MyAnimeLog.Write("output2: {0}"' output2);  	output2 = output2.Replace ("["' "");  	output2 = output2.Replace ("]"' "");  	output2 = output2.Replace ("{"' "");  	output2 = output2.Replace ("}"' "");  	output2 = output2.Replace ("\r"' "");  	output2 = output2.Replace ("\n"' "");  	BaseConfig.MyAnimeLog.Write ("output2: {0}"' output2);  	DataTable dtDetails = CsvParser.Parse (output2);  	// there will be 4 columns per row  	//BaseConfig.MyAnimeLog.Write("dtDetails.Columns.Count: {0}"' dtDetails.Columns.Count.ToString());  	//BaseConfig.MyAnimeLog.Write("dtDetails.Rows.Count: {0}"' dtDetails.Rows.Count.ToString());  	int i = 0;  	while (i < dtDetails.Columns.Count) {  		TorrentFile tf = new TorrentFile ();  		tf.FileName = dtDetails.Rows [0] [i].ToString ();  		tf.FileSize = long.Parse (dtDetails.Rows [0] [i + 1].ToString ());  		tf.Downloaded = long.Parse (dtDetails.Rows [0] [i + 2].ToString ());  		tf.Priority = long.Parse (dtDetails.Rows [0] [i + 3].ToString ());  		torFiles.Add (tf);  		i += 4;  	}  }  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,GetFileListOld,The following statement contains a magic number: if (pos > 0) {  	string output2 = output;  	output2 = output2.Substring (pos' output2.Length - pos);  	//BaseConfig.MyAnimeLog.Write("output2: {0}"' output2);  	output2 = output2.Replace ("["' "");  	output2 = output2.Replace ("]"' "");  	output2 = output2.Replace ("{"' "");  	output2 = output2.Replace ("}"' "");  	output2 = output2.Replace ("\r"' "");  	output2 = output2.Replace ("\n"' "");  	BaseConfig.MyAnimeLog.Write ("output2: {0}"' output2);  	DataTable dtDetails = CsvParser.Parse (output2);  	// there will be 4 columns per row  	//BaseConfig.MyAnimeLog.Write("dtDetails.Columns.Count: {0}"' dtDetails.Columns.Count.ToString());  	//BaseConfig.MyAnimeLog.Write("dtDetails.Rows.Count: {0}"' dtDetails.Rows.Count.ToString());  	int i = 0;  	while (i < dtDetails.Columns.Count) {  		TorrentFile tf = new TorrentFile ();  		tf.FileName = dtDetails.Rows [0] [i].ToString ();  		tf.FileSize = long.Parse (dtDetails.Rows [0] [i + 1].ToString ());  		tf.Downloaded = long.Parse (dtDetails.Rows [0] [i + 2].ToString ());  		tf.Priority = long.Parse (dtDetails.Rows [0] [i + 3].ToString ());  		torFiles.Add (tf);  		i += 4;  	}  }  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,GetFileListOld,The following statement contains a magic number: if (pos > 0) {  	string output2 = output;  	output2 = output2.Substring (pos' output2.Length - pos);  	//BaseConfig.MyAnimeLog.Write("output2: {0}"' output2);  	output2 = output2.Replace ("["' "");  	output2 = output2.Replace ("]"' "");  	output2 = output2.Replace ("{"' "");  	output2 = output2.Replace ("}"' "");  	output2 = output2.Replace ("\r"' "");  	output2 = output2.Replace ("\n"' "");  	BaseConfig.MyAnimeLog.Write ("output2: {0}"' output2);  	DataTable dtDetails = CsvParser.Parse (output2);  	// there will be 4 columns per row  	//BaseConfig.MyAnimeLog.Write("dtDetails.Columns.Count: {0}"' dtDetails.Columns.Count.ToString());  	//BaseConfig.MyAnimeLog.Write("dtDetails.Rows.Count: {0}"' dtDetails.Rows.Count.ToString());  	int i = 0;  	while (i < dtDetails.Columns.Count) {  		TorrentFile tf = new TorrentFile ();  		tf.FileName = dtDetails.Rows [0] [i].ToString ();  		tf.FileSize = long.Parse (dtDetails.Rows [0] [i + 1].ToString ());  		tf.Downloaded = long.Parse (dtDetails.Rows [0] [i + 2].ToString ());  		tf.Priority = long.Parse (dtDetails.Rows [0] [i + 3].ToString ());  		torFiles.Add (tf);  		i += 4;  	}  }  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,GetFileListOld,The following statement contains a magic number: while (i < dtDetails.Columns.Count) {  	TorrentFile tf = new TorrentFile ();  	tf.FileName = dtDetails.Rows [0] [i].ToString ();  	tf.FileSize = long.Parse (dtDetails.Rows [0] [i + 1].ToString ());  	tf.Downloaded = long.Parse (dtDetails.Rows [0] [i + 2].ToString ());  	tf.Priority = long.Parse (dtDetails.Rows [0] [i + 3].ToString ());  	torFiles.Add (tf);  	i += 4;  }  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,GetFileListOld,The following statement contains a magic number: while (i < dtDetails.Columns.Count) {  	TorrentFile tf = new TorrentFile ();  	tf.FileName = dtDetails.Rows [0] [i].ToString ();  	tf.FileSize = long.Parse (dtDetails.Rows [0] [i + 1].ToString ());  	tf.Downloaded = long.Parse (dtDetails.Rows [0] [i + 2].ToString ());  	tf.Priority = long.Parse (dtDetails.Rows [0] [i + 3].ToString ());  	torFiles.Add (tf);  	i += 4;  }  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,GetFileListOld,The following statement contains a magic number: while (i < dtDetails.Columns.Count) {  	TorrentFile tf = new TorrentFile ();  	tf.FileName = dtDetails.Rows [0] [i].ToString ();  	tf.FileSize = long.Parse (dtDetails.Rows [0] [i + 1].ToString ());  	tf.Downloaded = long.Parse (dtDetails.Rows [0] [i + 2].ToString ());  	tf.Priority = long.Parse (dtDetails.Rows [0] [i + 3].ToString ());  	torFiles.Add (tf);  	i += 4;  }  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,GetFileListOld,The following statement contains a magic number: tf.Downloaded = long.Parse (dtDetails.Rows [0] [i + 2].ToString ());  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,GetFileListOld,The following statement contains a magic number: tf.Priority = long.Parse (dtDetails.Rows [0] [i + 3].ToString ());  
Magic Number,MyAnimePlugin3.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\UTorrentHelper.cs,GetFileListOld,The following statement contains a magic number: i += 4;  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,engineReset,The following statement contains a magic number: context [2] = 0x98BADCFE;  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,engineReset,The following statement contains a magic number: context [3] = 0x10325476;  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,engineDigest,The following statement contains a magic number: for (int i = 0; i < 8; i++)  	tail [padLen + i] = (byte)((count * 8) >> (8 * i));  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,engineDigest,The following statement contains a magic number: for (int i = 0; i < 8; i++)  	tail [padLen + i] = (byte)((count * 8) >> (8 * i));  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,engineDigest,The following statement contains a magic number: for (int i = 0; i < 8; i++)  	tail [padLen + i] = (byte)((count * 8) >> (8 * i));  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,engineDigest,The following statement contains a magic number: tail [padLen + i] = (byte)((count * 8) >> (8 * i));  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,engineDigest,The following statement contains a magic number: tail [padLen + i] = (byte)((count * 8) >> (8 * i));  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,engineDigest,The following statement contains a magic number: for (int i = 0; i < 4; i++)  	for (int j = 0; j < 4; j++)  		result [i * 4 + j] = (byte)(context [i] >> (8 * j));  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,engineDigest,The following statement contains a magic number: for (int i = 0; i < 4; i++)  	for (int j = 0; j < 4; j++)  		result [i * 4 + j] = (byte)(context [i] >> (8 * j));  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,engineDigest,The following statement contains a magic number: for (int i = 0; i < 4; i++)  	for (int j = 0; j < 4; j++)  		result [i * 4 + j] = (byte)(context [i] >> (8 * j));  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,engineDigest,The following statement contains a magic number: for (int i = 0; i < 4; i++)  	for (int j = 0; j < 4; j++)  		result [i * 4 + j] = (byte)(context [i] >> (8 * j));  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,engineDigest,The following statement contains a magic number: for (int j = 0; j < 4; j++)  	result [i * 4 + j] = (byte)(context [i] >> (8 * j));  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,engineDigest,The following statement contains a magic number: for (int j = 0; j < 4; j++)  	result [i * 4 + j] = (byte)(context [i] >> (8 * j));  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,engineDigest,The following statement contains a magic number: for (int j = 0; j < 4; j++)  	result [i * 4 + j] = (byte)(context [i] >> (8 * j));  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,engineDigest,The following statement contains a magic number: result [i * 4 + j] = (byte)(context [i] >> (8 * j));  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,engineDigest,The following statement contains a magic number: result [i * 4 + j] = (byte)(context [i] >> (8 * j));  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: for (int i = 0; i < 16; i++)  	X [i] = ((uint)block [offset++] & 0xFF) | (((uint)block [offset++] & 0xFF) << 8) | (((uint)block [offset++] & 0xFF) << 16) | (((uint)block [offset++] & 0xFF) << 24);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: for (int i = 0; i < 16; i++)  	X [i] = ((uint)block [offset++] & 0xFF) | (((uint)block [offset++] & 0xFF) << 8) | (((uint)block [offset++] & 0xFF) << 16) | (((uint)block [offset++] & 0xFF) << 24);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: for (int i = 0; i < 16; i++)  	X [i] = ((uint)block [offset++] & 0xFF) | (((uint)block [offset++] & 0xFF) << 8) | (((uint)block [offset++] & 0xFF) << 16) | (((uint)block [offset++] & 0xFF) << 24);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: for (int i = 0; i < 16; i++)  	X [i] = ((uint)block [offset++] & 0xFF) | (((uint)block [offset++] & 0xFF) << 8) | (((uint)block [offset++] & 0xFF) << 16) | (((uint)block [offset++] & 0xFF) << 24);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: X [i] = ((uint)block [offset++] & 0xFF) | (((uint)block [offset++] & 0xFF) << 8) | (((uint)block [offset++] & 0xFF) << 16) | (((uint)block [offset++] & 0xFF) << 24);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: X [i] = ((uint)block [offset++] & 0xFF) | (((uint)block [offset++] & 0xFF) << 8) | (((uint)block [offset++] & 0xFF) << 16) | (((uint)block [offset++] & 0xFF) << 24);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: X [i] = ((uint)block [offset++] & 0xFF) | (((uint)block [offset++] & 0xFF) << 8) | (((uint)block [offset++] & 0xFF) << 16) | (((uint)block [offset++] & 0xFF) << 24);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: A = FF (A' B' C' D' X [0]' 3);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: D = FF (D' A' B' C' X [1]' 7);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: C = FF (C' D' A' B' X [2]' 11);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: C = FF (C' D' A' B' X [2]' 11);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: B = FF (B' C' D' A' X [3]' 19);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: B = FF (B' C' D' A' X [3]' 19);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: A = FF (A' B' C' D' X [4]' 3);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: A = FF (A' B' C' D' X [4]' 3);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: D = FF (D' A' B' C' X [5]' 7);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: D = FF (D' A' B' C' X [5]' 7);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: C = FF (C' D' A' B' X [6]' 11);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: C = FF (C' D' A' B' X [6]' 11);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: B = FF (B' C' D' A' X [7]' 19);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: B = FF (B' C' D' A' X [7]' 19);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: A = FF (A' B' C' D' X [8]' 3);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: A = FF (A' B' C' D' X [8]' 3);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: D = FF (D' A' B' C' X [9]' 7);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: D = FF (D' A' B' C' X [9]' 7);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: C = FF (C' D' A' B' X [10]' 11);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: C = FF (C' D' A' B' X [10]' 11);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: B = FF (B' C' D' A' X [11]' 19);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: B = FF (B' C' D' A' X [11]' 19);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: A = FF (A' B' C' D' X [12]' 3);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: A = FF (A' B' C' D' X [12]' 3);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: D = FF (D' A' B' C' X [13]' 7);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: D = FF (D' A' B' C' X [13]' 7);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: C = FF (C' D' A' B' X [14]' 11);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: C = FF (C' D' A' B' X [14]' 11);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: B = FF (B' C' D' A' X [15]' 19);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: B = FF (B' C' D' A' X [15]' 19);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: A = GG (A' B' C' D' X [0]' 3);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: D = GG (D' A' B' C' X [4]' 5);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: D = GG (D' A' B' C' X [4]' 5);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: C = GG (C' D' A' B' X [8]' 9);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: C = GG (C' D' A' B' X [8]' 9);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: B = GG (B' C' D' A' X [12]' 13);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: B = GG (B' C' D' A' X [12]' 13);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: A = GG (A' B' C' D' X [1]' 3);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: D = GG (D' A' B' C' X [5]' 5);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: D = GG (D' A' B' C' X [5]' 5);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: C = GG (C' D' A' B' X [9]' 9);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: C = GG (C' D' A' B' X [9]' 9);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: B = GG (B' C' D' A' X [13]' 13);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: B = GG (B' C' D' A' X [13]' 13);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: A = GG (A' B' C' D' X [2]' 3);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: A = GG (A' B' C' D' X [2]' 3);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: D = GG (D' A' B' C' X [6]' 5);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: D = GG (D' A' B' C' X [6]' 5);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: C = GG (C' D' A' B' X [10]' 9);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: C = GG (C' D' A' B' X [10]' 9);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: B = GG (B' C' D' A' X [14]' 13);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: B = GG (B' C' D' A' X [14]' 13);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: A = GG (A' B' C' D' X [3]' 3);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: A = GG (A' B' C' D' X [3]' 3);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: D = GG (D' A' B' C' X [7]' 5);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: D = GG (D' A' B' C' X [7]' 5);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: C = GG (C' D' A' B' X [11]' 9);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: C = GG (C' D' A' B' X [11]' 9);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: B = GG (B' C' D' A' X [15]' 13);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: B = GG (B' C' D' A' X [15]' 13);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: A = HH (A' B' C' D' X [0]' 3);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: D = HH (D' A' B' C' X [8]' 9);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: D = HH (D' A' B' C' X [8]' 9);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: C = HH (C' D' A' B' X [4]' 11);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: C = HH (C' D' A' B' X [4]' 11);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: B = HH (B' C' D' A' X [12]' 15);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: B = HH (B' C' D' A' X [12]' 15);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: A = HH (A' B' C' D' X [2]' 3);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: A = HH (A' B' C' D' X [2]' 3);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: D = HH (D' A' B' C' X [10]' 9);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: D = HH (D' A' B' C' X [10]' 9);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: C = HH (C' D' A' B' X [6]' 11);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: C = HH (C' D' A' B' X [6]' 11);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: B = HH (B' C' D' A' X [14]' 15);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: B = HH (B' C' D' A' X [14]' 15);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: A = HH (A' B' C' D' X [1]' 3);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: D = HH (D' A' B' C' X [9]' 9);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: D = HH (D' A' B' C' X [9]' 9);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: C = HH (C' D' A' B' X [5]' 11);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: C = HH (C' D' A' B' X [5]' 11);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: B = HH (B' C' D' A' X [13]' 15);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: B = HH (B' C' D' A' X [13]' 15);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: A = HH (A' B' C' D' X [3]' 3);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: A = HH (A' B' C' D' X [3]' 3);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: D = HH (D' A' B' C' X [11]' 9);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: D = HH (D' A' B' C' X [11]' 9);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: C = HH (C' D' A' B' X [7]' 11);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: C = HH (C' D' A' B' X [7]' 11);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: B = HH (B' C' D' A' X [15]' 15);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: B = HH (B' C' D' A' X [15]' 15);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: context [2] += C;  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,transform,The following statement contains a magic number: context [3] += D;  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,FF,The following statement contains a magic number: return t << s | t >> (32 - s);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,GG,The following statement contains a magic number: return t << s | t >> (32 - s);  
Magic Number,AniDBHelper,MD4_Old,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\DataHelpers\MD4.cs,HH,The following statement contains a magic number: return t << s | t >> (32 - s);  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: try {  	List<List<T>> rgCopies = new List<List<T>> (1);  	rgCopies.Add (results);  	int sortByCount = rgSortBy.Count;  	// For each criterion in the list of comparison criteria' one or more lists must be sorted.   	// Each time a list is sorted' one or more sublists may be created.  Each sublist contains  	// items that were deemed to be "equivalent" according to the comparison criterion.  	// Example: After sorting addresses entries by state you may have multiple sublists'   	// each containing all of the address entries associated with a given state.  	// Note: this is not the most efficient method (especially in terms of memory!)' but it  	// is sufficient in most scenarios and is easier to understand than many other   	// methods of sorting a list using multiple criteria.  	for (int i = 0; i < sortByCount; i++) {  		SortPropOrFieldAndDirection sortBy = rgSortBy [i];  		if (string.IsNullOrEmpty (sortBy.sPropertyOrFieldName))  			throw new Exception ("MultiSort parameter rgSortBy was passed an empty field name in rgSortBy[" + i.ToString () + "]");  		// Retrieve an IComparer that contains logic for sorting this specific business object  		// type by the specified criteria  		IComparer<T> compare = sortBy.GetComparer<T> ();  		// Sort each sublist using the created IComparer<T>  		foreach (List<T> lst in rgCopies) {  			lst.Sort (compare);  		}  		if (i < sortByCount - 1) {  			// Create new sublists by searching for the sorted-by value boundaries/changes  			// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   			// from the original list.  NOT terribly efficient' but often sufficient.  			// Some advanced methods involve tracking duplicate values DURING the sort iteself  			List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  			for (int n = 0; n < rgCopies.Count; n++) {  				List<T> rgList = rgCopies [n];  				// Be conservative and set the initial sublist capacity to a small number' but  				// still honor the original list's item count.  (Example: If you are sorting a list  				// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  				// each sublist (each of which store all Address information entries with the same Zipcode)  				// with a capacity of 1000.   32'000 / 32 = 1000  				List<T> rgSublist = new List<T> (rgList.Count / 32);  				// Compare items to the item that preceeded it to determine where the "value boundaries"   				// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  				// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  				// when comparing elements during the sort routine).    				// Another alternative is to take advantage of the fact that the list is sorted and to  				// use a O(LogN) binary search rather than the (currently) linear O(N) search.  				for (int j = 0; j < rgList.Count; j++) {  					T item = rgList [j];  					if (j > 0) {  						// Compare the item to the preceeding item using the same comparison criterion  						// used during the sort  						T itemprev = rgList [j - 1];  						if (compare.Compare (item' itemprev) == 0) {  							// The item had the same property or field value as the preceeding item.    							// Add it on to the same sublist.  							rgSublist.Add (item);  						}  						else {  							// The item did NOT have the same property or field value as the preceeding item.  							// "Close up" the previous sublist and start a new one.  							rgNewCopies.Add (rgSublist);  							rgSublist = new List<T> (rgList.Count / 32);  							rgSublist.Add (item);  						}  					}  					else {  						// The first item has no predecessor - just add the item to the first sublist  						rgSublist.Add (item);  					}  				}  				// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  				// Add the last created sublist to our "master list of sublists" :P  				// It may be that this list has 0 elements in some cases' but this is not a problem  				rgNewCopies.Add (rgSublist);  			}  			// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  			// Move to the next "level" of sublists in preparation for further sorting using the next  			// sort/comparison criterion  			rgCopies = rgNewCopies;  		}  	}  	// END: for (int i = 0; i < sortByCount; i++) ... each sort by criteria:   	// reconstruct all resorted sub-sub-sub-sub-sublists into a single' final (flat) results list  	results.Clear ();  	foreach (List<T> rgList in rgCopies) {  		results.AddRange (rgList);  	}  	return results;  }  catch (Exception ex) {  	throw new Exception ("Exception in MultiSort while sorting a list of " + typeof(T).Name' ex);  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: try {  	List<List<T>> rgCopies = new List<List<T>> (1);  	rgCopies.Add (results);  	int sortByCount = rgSortBy.Count;  	// For each criterion in the list of comparison criteria' one or more lists must be sorted.   	// Each time a list is sorted' one or more sublists may be created.  Each sublist contains  	// items that were deemed to be "equivalent" according to the comparison criterion.  	// Example: After sorting addresses entries by state you may have multiple sublists'   	// each containing all of the address entries associated with a given state.  	// Note: this is not the most efficient method (especially in terms of memory!)' but it  	// is sufficient in most scenarios and is easier to understand than many other   	// methods of sorting a list using multiple criteria.  	for (int i = 0; i < sortByCount; i++) {  		SortPropOrFieldAndDirection sortBy = rgSortBy [i];  		if (string.IsNullOrEmpty (sortBy.sPropertyOrFieldName))  			throw new Exception ("MultiSort parameter rgSortBy was passed an empty field name in rgSortBy[" + i.ToString () + "]");  		// Retrieve an IComparer that contains logic for sorting this specific business object  		// type by the specified criteria  		IComparer<T> compare = sortBy.GetComparer<T> ();  		// Sort each sublist using the created IComparer<T>  		foreach (List<T> lst in rgCopies) {  			lst.Sort (compare);  		}  		if (i < sortByCount - 1) {  			// Create new sublists by searching for the sorted-by value boundaries/changes  			// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   			// from the original list.  NOT terribly efficient' but often sufficient.  			// Some advanced methods involve tracking duplicate values DURING the sort iteself  			List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  			for (int n = 0; n < rgCopies.Count; n++) {  				List<T> rgList = rgCopies [n];  				// Be conservative and set the initial sublist capacity to a small number' but  				// still honor the original list's item count.  (Example: If you are sorting a list  				// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  				// each sublist (each of which store all Address information entries with the same Zipcode)  				// with a capacity of 1000.   32'000 / 32 = 1000  				List<T> rgSublist = new List<T> (rgList.Count / 32);  				// Compare items to the item that preceeded it to determine where the "value boundaries"   				// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  				// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  				// when comparing elements during the sort routine).    				// Another alternative is to take advantage of the fact that the list is sorted and to  				// use a O(LogN) binary search rather than the (currently) linear O(N) search.  				for (int j = 0; j < rgList.Count; j++) {  					T item = rgList [j];  					if (j > 0) {  						// Compare the item to the preceeding item using the same comparison criterion  						// used during the sort  						T itemprev = rgList [j - 1];  						if (compare.Compare (item' itemprev) == 0) {  							// The item had the same property or field value as the preceeding item.    							// Add it on to the same sublist.  							rgSublist.Add (item);  						}  						else {  							// The item did NOT have the same property or field value as the preceeding item.  							// "Close up" the previous sublist and start a new one.  							rgNewCopies.Add (rgSublist);  							rgSublist = new List<T> (rgList.Count / 32);  							rgSublist.Add (item);  						}  					}  					else {  						// The first item has no predecessor - just add the item to the first sublist  						rgSublist.Add (item);  					}  				}  				// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  				// Add the last created sublist to our "master list of sublists" :P  				// It may be that this list has 0 elements in some cases' but this is not a problem  				rgNewCopies.Add (rgSublist);  			}  			// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  			// Move to the next "level" of sublists in preparation for further sorting using the next  			// sort/comparison criterion  			rgCopies = rgNewCopies;  		}  	}  	// END: for (int i = 0; i < sortByCount; i++) ... each sort by criteria:   	// reconstruct all resorted sub-sub-sub-sub-sublists into a single' final (flat) results list  	results.Clear ();  	foreach (List<T> rgList in rgCopies) {  		results.AddRange (rgList);  	}  	return results;  }  catch (Exception ex) {  	throw new Exception ("Exception in MultiSort while sorting a list of " + typeof(T).Name' ex);  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: try {  	List<List<T>> rgCopies = new List<List<T>> (1);  	rgCopies.Add (results);  	int sortByCount = rgSortBy.Count;  	// For each criterion in the list of comparison criteria' one or more lists must be sorted.   	// Each time a list is sorted' one or more sublists may be created.  Each sublist contains  	// items that were deemed to be "equivalent" according to the comparison criterion.  	// Example: After sorting addresses entries by state you may have multiple sublists'   	// each containing all of the address entries associated with a given state.  	// Note: this is not the most efficient method (especially in terms of memory!)' but it  	// is sufficient in most scenarios and is easier to understand than many other   	// methods of sorting a list using multiple criteria.  	for (int i = 0; i < sortByCount; i++) {  		SortPropOrFieldAndDirection sortBy = rgSortBy [i];  		if (string.IsNullOrEmpty (sortBy.sPropertyOrFieldName))  			throw new Exception ("MultiSort parameter rgSortBy was passed an empty field name in rgSortBy[" + i.ToString () + "]");  		// Retrieve an IComparer that contains logic for sorting this specific business object  		// type by the specified criteria  		IComparer<T> compare = sortBy.GetComparer<T> ();  		// Sort each sublist using the created IComparer<T>  		foreach (List<T> lst in rgCopies) {  			lst.Sort (compare);  		}  		if (i < sortByCount - 1) {  			// Create new sublists by searching for the sorted-by value boundaries/changes  			// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   			// from the original list.  NOT terribly efficient' but often sufficient.  			// Some advanced methods involve tracking duplicate values DURING the sort iteself  			List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  			for (int n = 0; n < rgCopies.Count; n++) {  				List<T> rgList = rgCopies [n];  				// Be conservative and set the initial sublist capacity to a small number' but  				// still honor the original list's item count.  (Example: If you are sorting a list  				// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  				// each sublist (each of which store all Address information entries with the same Zipcode)  				// with a capacity of 1000.   32'000 / 32 = 1000  				List<T> rgSublist = new List<T> (rgList.Count / 32);  				// Compare items to the item that preceeded it to determine where the "value boundaries"   				// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  				// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  				// when comparing elements during the sort routine).    				// Another alternative is to take advantage of the fact that the list is sorted and to  				// use a O(LogN) binary search rather than the (currently) linear O(N) search.  				for (int j = 0; j < rgList.Count; j++) {  					T item = rgList [j];  					if (j > 0) {  						// Compare the item to the preceeding item using the same comparison criterion  						// used during the sort  						T itemprev = rgList [j - 1];  						if (compare.Compare (item' itemprev) == 0) {  							// The item had the same property or field value as the preceeding item.    							// Add it on to the same sublist.  							rgSublist.Add (item);  						}  						else {  							// The item did NOT have the same property or field value as the preceeding item.  							// "Close up" the previous sublist and start a new one.  							rgNewCopies.Add (rgSublist);  							rgSublist = new List<T> (rgList.Count / 32);  							rgSublist.Add (item);  						}  					}  					else {  						// The first item has no predecessor - just add the item to the first sublist  						rgSublist.Add (item);  					}  				}  				// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  				// Add the last created sublist to our "master list of sublists" :P  				// It may be that this list has 0 elements in some cases' but this is not a problem  				rgNewCopies.Add (rgSublist);  			}  			// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  			// Move to the next "level" of sublists in preparation for further sorting using the next  			// sort/comparison criterion  			rgCopies = rgNewCopies;  		}  	}  	// END: for (int i = 0; i < sortByCount; i++) ... each sort by criteria:   	// reconstruct all resorted sub-sub-sub-sub-sublists into a single' final (flat) results list  	results.Clear ();  	foreach (List<T> rgList in rgCopies) {  		results.AddRange (rgList);  	}  	return results;  }  catch (Exception ex) {  	throw new Exception ("Exception in MultiSort while sorting a list of " + typeof(T).Name' ex);  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: for (int i = 0; i < sortByCount; i++) {  	SortPropOrFieldAndDirection sortBy = rgSortBy [i];  	if (string.IsNullOrEmpty (sortBy.sPropertyOrFieldName))  		throw new Exception ("MultiSort parameter rgSortBy was passed an empty field name in rgSortBy[" + i.ToString () + "]");  	// Retrieve an IComparer that contains logic for sorting this specific business object  	// type by the specified criteria  	IComparer<T> compare = sortBy.GetComparer<T> ();  	// Sort each sublist using the created IComparer<T>  	foreach (List<T> lst in rgCopies) {  		lst.Sort (compare);  	}  	if (i < sortByCount - 1) {  		// Create new sublists by searching for the sorted-by value boundaries/changes  		// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   		// from the original list.  NOT terribly efficient' but often sufficient.  		// Some advanced methods involve tracking duplicate values DURING the sort iteself  		List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  		for (int n = 0; n < rgCopies.Count; n++) {  			List<T> rgList = rgCopies [n];  			// Be conservative and set the initial sublist capacity to a small number' but  			// still honor the original list's item count.  (Example: If you are sorting a list  			// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  			// each sublist (each of which store all Address information entries with the same Zipcode)  			// with a capacity of 1000.   32'000 / 32 = 1000  			List<T> rgSublist = new List<T> (rgList.Count / 32);  			// Compare items to the item that preceeded it to determine where the "value boundaries"   			// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  			// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  			// when comparing elements during the sort routine).    			// Another alternative is to take advantage of the fact that the list is sorted and to  			// use a O(LogN) binary search rather than the (currently) linear O(N) search.  			for (int j = 0; j < rgList.Count; j++) {  				T item = rgList [j];  				if (j > 0) {  					// Compare the item to the preceeding item using the same comparison criterion  					// used during the sort  					T itemprev = rgList [j - 1];  					if (compare.Compare (item' itemprev) == 0) {  						// The item had the same property or field value as the preceeding item.    						// Add it on to the same sublist.  						rgSublist.Add (item);  					}  					else {  						// The item did NOT have the same property or field value as the preceeding item.  						// "Close up" the previous sublist and start a new one.  						rgNewCopies.Add (rgSublist);  						rgSublist = new List<T> (rgList.Count / 32);  						rgSublist.Add (item);  					}  				}  				else {  					// The first item has no predecessor - just add the item to the first sublist  					rgSublist.Add (item);  				}  			}  			// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  			// Add the last created sublist to our "master list of sublists" :P  			// It may be that this list has 0 elements in some cases' but this is not a problem  			rgNewCopies.Add (rgSublist);  		}  		// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  		// Move to the next "level" of sublists in preparation for further sorting using the next  		// sort/comparison criterion  		rgCopies = rgNewCopies;  	}  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: for (int i = 0; i < sortByCount; i++) {  	SortPropOrFieldAndDirection sortBy = rgSortBy [i];  	if (string.IsNullOrEmpty (sortBy.sPropertyOrFieldName))  		throw new Exception ("MultiSort parameter rgSortBy was passed an empty field name in rgSortBy[" + i.ToString () + "]");  	// Retrieve an IComparer that contains logic for sorting this specific business object  	// type by the specified criteria  	IComparer<T> compare = sortBy.GetComparer<T> ();  	// Sort each sublist using the created IComparer<T>  	foreach (List<T> lst in rgCopies) {  		lst.Sort (compare);  	}  	if (i < sortByCount - 1) {  		// Create new sublists by searching for the sorted-by value boundaries/changes  		// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   		// from the original list.  NOT terribly efficient' but often sufficient.  		// Some advanced methods involve tracking duplicate values DURING the sort iteself  		List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  		for (int n = 0; n < rgCopies.Count; n++) {  			List<T> rgList = rgCopies [n];  			// Be conservative and set the initial sublist capacity to a small number' but  			// still honor the original list's item count.  (Example: If you are sorting a list  			// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  			// each sublist (each of which store all Address information entries with the same Zipcode)  			// with a capacity of 1000.   32'000 / 32 = 1000  			List<T> rgSublist = new List<T> (rgList.Count / 32);  			// Compare items to the item that preceeded it to determine where the "value boundaries"   			// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  			// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  			// when comparing elements during the sort routine).    			// Another alternative is to take advantage of the fact that the list is sorted and to  			// use a O(LogN) binary search rather than the (currently) linear O(N) search.  			for (int j = 0; j < rgList.Count; j++) {  				T item = rgList [j];  				if (j > 0) {  					// Compare the item to the preceeding item using the same comparison criterion  					// used during the sort  					T itemprev = rgList [j - 1];  					if (compare.Compare (item' itemprev) == 0) {  						// The item had the same property or field value as the preceeding item.    						// Add it on to the same sublist.  						rgSublist.Add (item);  					}  					else {  						// The item did NOT have the same property or field value as the preceeding item.  						// "Close up" the previous sublist and start a new one.  						rgNewCopies.Add (rgSublist);  						rgSublist = new List<T> (rgList.Count / 32);  						rgSublist.Add (item);  					}  				}  				else {  					// The first item has no predecessor - just add the item to the first sublist  					rgSublist.Add (item);  				}  			}  			// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  			// Add the last created sublist to our "master list of sublists" :P  			// It may be that this list has 0 elements in some cases' but this is not a problem  			rgNewCopies.Add (rgSublist);  		}  		// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  		// Move to the next "level" of sublists in preparation for further sorting using the next  		// sort/comparison criterion  		rgCopies = rgNewCopies;  	}  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: for (int i = 0; i < sortByCount; i++) {  	SortPropOrFieldAndDirection sortBy = rgSortBy [i];  	if (string.IsNullOrEmpty (sortBy.sPropertyOrFieldName))  		throw new Exception ("MultiSort parameter rgSortBy was passed an empty field name in rgSortBy[" + i.ToString () + "]");  	// Retrieve an IComparer that contains logic for sorting this specific business object  	// type by the specified criteria  	IComparer<T> compare = sortBy.GetComparer<T> ();  	// Sort each sublist using the created IComparer<T>  	foreach (List<T> lst in rgCopies) {  		lst.Sort (compare);  	}  	if (i < sortByCount - 1) {  		// Create new sublists by searching for the sorted-by value boundaries/changes  		// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   		// from the original list.  NOT terribly efficient' but often sufficient.  		// Some advanced methods involve tracking duplicate values DURING the sort iteself  		List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  		for (int n = 0; n < rgCopies.Count; n++) {  			List<T> rgList = rgCopies [n];  			// Be conservative and set the initial sublist capacity to a small number' but  			// still honor the original list's item count.  (Example: If you are sorting a list  			// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  			// each sublist (each of which store all Address information entries with the same Zipcode)  			// with a capacity of 1000.   32'000 / 32 = 1000  			List<T> rgSublist = new List<T> (rgList.Count / 32);  			// Compare items to the item that preceeded it to determine where the "value boundaries"   			// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  			// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  			// when comparing elements during the sort routine).    			// Another alternative is to take advantage of the fact that the list is sorted and to  			// use a O(LogN) binary search rather than the (currently) linear O(N) search.  			for (int j = 0; j < rgList.Count; j++) {  				T item = rgList [j];  				if (j > 0) {  					// Compare the item to the preceeding item using the same comparison criterion  					// used during the sort  					T itemprev = rgList [j - 1];  					if (compare.Compare (item' itemprev) == 0) {  						// The item had the same property or field value as the preceeding item.    						// Add it on to the same sublist.  						rgSublist.Add (item);  					}  					else {  						// The item did NOT have the same property or field value as the preceeding item.  						// "Close up" the previous sublist and start a new one.  						rgNewCopies.Add (rgSublist);  						rgSublist = new List<T> (rgList.Count / 32);  						rgSublist.Add (item);  					}  				}  				else {  					// The first item has no predecessor - just add the item to the first sublist  					rgSublist.Add (item);  				}  			}  			// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  			// Add the last created sublist to our "master list of sublists" :P  			// It may be that this list has 0 elements in some cases' but this is not a problem  			rgNewCopies.Add (rgSublist);  		}  		// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  		// Move to the next "level" of sublists in preparation for further sorting using the next  		// sort/comparison criterion  		rgCopies = rgNewCopies;  	}  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: if (i < sortByCount - 1) {  	// Create new sublists by searching for the sorted-by value boundaries/changes  	// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   	// from the original list.  NOT terribly efficient' but often sufficient.  	// Some advanced methods involve tracking duplicate values DURING the sort iteself  	List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  	for (int n = 0; n < rgCopies.Count; n++) {  		List<T> rgList = rgCopies [n];  		// Be conservative and set the initial sublist capacity to a small number' but  		// still honor the original list's item count.  (Example: If you are sorting a list  		// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  		// each sublist (each of which store all Address information entries with the same Zipcode)  		// with a capacity of 1000.   32'000 / 32 = 1000  		List<T> rgSublist = new List<T> (rgList.Count / 32);  		// Compare items to the item that preceeded it to determine where the "value boundaries"   		// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  		// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  		// when comparing elements during the sort routine).    		// Another alternative is to take advantage of the fact that the list is sorted and to  		// use a O(LogN) binary search rather than the (currently) linear O(N) search.  		for (int j = 0; j < rgList.Count; j++) {  			T item = rgList [j];  			if (j > 0) {  				// Compare the item to the preceeding item using the same comparison criterion  				// used during the sort  				T itemprev = rgList [j - 1];  				if (compare.Compare (item' itemprev) == 0) {  					// The item had the same property or field value as the preceeding item.    					// Add it on to the same sublist.  					rgSublist.Add (item);  				}  				else {  					// The item did NOT have the same property or field value as the preceeding item.  					// "Close up" the previous sublist and start a new one.  					rgNewCopies.Add (rgSublist);  					rgSublist = new List<T> (rgList.Count / 32);  					rgSublist.Add (item);  				}  			}  			else {  				// The first item has no predecessor - just add the item to the first sublist  				rgSublist.Add (item);  			}  		}  		// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  		// Add the last created sublist to our "master list of sublists" :P  		// It may be that this list has 0 elements in some cases' but this is not a problem  		rgNewCopies.Add (rgSublist);  	}  	// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  	// Move to the next "level" of sublists in preparation for further sorting using the next  	// sort/comparison criterion  	rgCopies = rgNewCopies;  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: if (i < sortByCount - 1) {  	// Create new sublists by searching for the sorted-by value boundaries/changes  	// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   	// from the original list.  NOT terribly efficient' but often sufficient.  	// Some advanced methods involve tracking duplicate values DURING the sort iteself  	List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  	for (int n = 0; n < rgCopies.Count; n++) {  		List<T> rgList = rgCopies [n];  		// Be conservative and set the initial sublist capacity to a small number' but  		// still honor the original list's item count.  (Example: If you are sorting a list  		// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  		// each sublist (each of which store all Address information entries with the same Zipcode)  		// with a capacity of 1000.   32'000 / 32 = 1000  		List<T> rgSublist = new List<T> (rgList.Count / 32);  		// Compare items to the item that preceeded it to determine where the "value boundaries"   		// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  		// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  		// when comparing elements during the sort routine).    		// Another alternative is to take advantage of the fact that the list is sorted and to  		// use a O(LogN) binary search rather than the (currently) linear O(N) search.  		for (int j = 0; j < rgList.Count; j++) {  			T item = rgList [j];  			if (j > 0) {  				// Compare the item to the preceeding item using the same comparison criterion  				// used during the sort  				T itemprev = rgList [j - 1];  				if (compare.Compare (item' itemprev) == 0) {  					// The item had the same property or field value as the preceeding item.    					// Add it on to the same sublist.  					rgSublist.Add (item);  				}  				else {  					// The item did NOT have the same property or field value as the preceeding item.  					// "Close up" the previous sublist and start a new one.  					rgNewCopies.Add (rgSublist);  					rgSublist = new List<T> (rgList.Count / 32);  					rgSublist.Add (item);  				}  			}  			else {  				// The first item has no predecessor - just add the item to the first sublist  				rgSublist.Add (item);  			}  		}  		// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  		// Add the last created sublist to our "master list of sublists" :P  		// It may be that this list has 0 elements in some cases' but this is not a problem  		rgNewCopies.Add (rgSublist);  	}  	// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  	// Move to the next "level" of sublists in preparation for further sorting using the next  	// sort/comparison criterion  	rgCopies = rgNewCopies;  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: if (i < sortByCount - 1) {  	// Create new sublists by searching for the sorted-by value boundaries/changes  	// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   	// from the original list.  NOT terribly efficient' but often sufficient.  	// Some advanced methods involve tracking duplicate values DURING the sort iteself  	List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  	for (int n = 0; n < rgCopies.Count; n++) {  		List<T> rgList = rgCopies [n];  		// Be conservative and set the initial sublist capacity to a small number' but  		// still honor the original list's item count.  (Example: If you are sorting a list  		// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  		// each sublist (each of which store all Address information entries with the same Zipcode)  		// with a capacity of 1000.   32'000 / 32 = 1000  		List<T> rgSublist = new List<T> (rgList.Count / 32);  		// Compare items to the item that preceeded it to determine where the "value boundaries"   		// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  		// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  		// when comparing elements during the sort routine).    		// Another alternative is to take advantage of the fact that the list is sorted and to  		// use a O(LogN) binary search rather than the (currently) linear O(N) search.  		for (int j = 0; j < rgList.Count; j++) {  			T item = rgList [j];  			if (j > 0) {  				// Compare the item to the preceeding item using the same comparison criterion  				// used during the sort  				T itemprev = rgList [j - 1];  				if (compare.Compare (item' itemprev) == 0) {  					// The item had the same property or field value as the preceeding item.    					// Add it on to the same sublist.  					rgSublist.Add (item);  				}  				else {  					// The item did NOT have the same property or field value as the preceeding item.  					// "Close up" the previous sublist and start a new one.  					rgNewCopies.Add (rgSublist);  					rgSublist = new List<T> (rgList.Count / 32);  					rgSublist.Add (item);  				}  			}  			else {  				// The first item has no predecessor - just add the item to the first sublist  				rgSublist.Add (item);  			}  		}  		// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  		// Add the last created sublist to our "master list of sublists" :P  		// It may be that this list has 0 elements in some cases' but this is not a problem  		rgNewCopies.Add (rgSublist);  	}  	// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  	// Move to the next "level" of sublists in preparation for further sorting using the next  	// sort/comparison criterion  	rgCopies = rgNewCopies;  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: for (int n = 0; n < rgCopies.Count; n++) {  	List<T> rgList = rgCopies [n];  	// Be conservative and set the initial sublist capacity to a small number' but  	// still honor the original list's item count.  (Example: If you are sorting a list  	// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  	// each sublist (each of which store all Address information entries with the same Zipcode)  	// with a capacity of 1000.   32'000 / 32 = 1000  	List<T> rgSublist = new List<T> (rgList.Count / 32);  	// Compare items to the item that preceeded it to determine where the "value boundaries"   	// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  	// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  	// when comparing elements during the sort routine).    	// Another alternative is to take advantage of the fact that the list is sorted and to  	// use a O(LogN) binary search rather than the (currently) linear O(N) search.  	for (int j = 0; j < rgList.Count; j++) {  		T item = rgList [j];  		if (j > 0) {  			// Compare the item to the preceeding item using the same comparison criterion  			// used during the sort  			T itemprev = rgList [j - 1];  			if (compare.Compare (item' itemprev) == 0) {  				// The item had the same property or field value as the preceeding item.    				// Add it on to the same sublist.  				rgSublist.Add (item);  			}  			else {  				// The item did NOT have the same property or field value as the preceeding item.  				// "Close up" the previous sublist and start a new one.  				rgNewCopies.Add (rgSublist);  				rgSublist = new List<T> (rgList.Count / 32);  				rgSublist.Add (item);  			}  		}  		else {  			// The first item has no predecessor - just add the item to the first sublist  			rgSublist.Add (item);  		}  	}  	// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  	// Add the last created sublist to our "master list of sublists" :P  	// It may be that this list has 0 elements in some cases' but this is not a problem  	rgNewCopies.Add (rgSublist);  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: for (int n = 0; n < rgCopies.Count; n++) {  	List<T> rgList = rgCopies [n];  	// Be conservative and set the initial sublist capacity to a small number' but  	// still honor the original list's item count.  (Example: If you are sorting a list  	// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  	// each sublist (each of which store all Address information entries with the same Zipcode)  	// with a capacity of 1000.   32'000 / 32 = 1000  	List<T> rgSublist = new List<T> (rgList.Count / 32);  	// Compare items to the item that preceeded it to determine where the "value boundaries"   	// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  	// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  	// when comparing elements during the sort routine).    	// Another alternative is to take advantage of the fact that the list is sorted and to  	// use a O(LogN) binary search rather than the (currently) linear O(N) search.  	for (int j = 0; j < rgList.Count; j++) {  		T item = rgList [j];  		if (j > 0) {  			// Compare the item to the preceeding item using the same comparison criterion  			// used during the sort  			T itemprev = rgList [j - 1];  			if (compare.Compare (item' itemprev) == 0) {  				// The item had the same property or field value as the preceeding item.    				// Add it on to the same sublist.  				rgSublist.Add (item);  			}  			else {  				// The item did NOT have the same property or field value as the preceeding item.  				// "Close up" the previous sublist and start a new one.  				rgNewCopies.Add (rgSublist);  				rgSublist = new List<T> (rgList.Count / 32);  				rgSublist.Add (item);  			}  		}  		else {  			// The first item has no predecessor - just add the item to the first sublist  			rgSublist.Add (item);  		}  	}  	// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  	// Add the last created sublist to our "master list of sublists" :P  	// It may be that this list has 0 elements in some cases' but this is not a problem  	rgNewCopies.Add (rgSublist);  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: for (int j = 0; j < rgList.Count; j++) {  	T item = rgList [j];  	if (j > 0) {  		// Compare the item to the preceeding item using the same comparison criterion  		// used during the sort  		T itemprev = rgList [j - 1];  		if (compare.Compare (item' itemprev) == 0) {  			// The item had the same property or field value as the preceeding item.    			// Add it on to the same sublist.  			rgSublist.Add (item);  		}  		else {  			// The item did NOT have the same property or field value as the preceeding item.  			// "Close up" the previous sublist and start a new one.  			rgNewCopies.Add (rgSublist);  			rgSublist = new List<T> (rgList.Count / 32);  			rgSublist.Add (item);  		}  	}  	else {  		// The first item has no predecessor - just add the item to the first sublist  		rgSublist.Add (item);  	}  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: if (j > 0) {  	// Compare the item to the preceeding item using the same comparison criterion  	// used during the sort  	T itemprev = rgList [j - 1];  	if (compare.Compare (item' itemprev) == 0) {  		// The item had the same property or field value as the preceeding item.    		// Add it on to the same sublist.  		rgSublist.Add (item);  	}  	else {  		// The item did NOT have the same property or field value as the preceeding item.  		// "Close up" the previous sublist and start a new one.  		rgNewCopies.Add (rgSublist);  		rgSublist = new List<T> (rgList.Count / 32);  		rgSublist.Add (item);  	}  }  else {  	// The first item has no predecessor - just add the item to the first sublist  	rgSublist.Add (item);  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: if (compare.Compare (item' itemprev) == 0) {  	// The item had the same property or field value as the preceeding item.    	// Add it on to the same sublist.  	rgSublist.Add (item);  }  else {  	// The item did NOT have the same property or field value as the preceeding item.  	// "Close up" the previous sublist and start a new one.  	rgNewCopies.Add (rgSublist);  	rgSublist = new List<T> (rgList.Count / 32);  	rgSublist.Add (item);  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: rgSublist = new List<T> (rgList.Count / 32);  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (fFoundProperty == false) {  	fFoundProperty = true;  	if (pi == null) {  		PropertyDescriptorCollection props = TypeDescriptor.GetProperties (typeof(T));  		property = props [sPropertyName];  		pi = typeof(T).GetProperty (sPropertyName);  		if (pi == null) {  			throw new Exception ("Property name " + sPropertyName + " not found while trying to compare objects of type " + typeof(T).Name);  		}  	}  	typ = pi.PropertyType;  	// Set up the property comparison delegate to use based on the type of values we will be comparing  	if (sortType == SortType.eUsePropertyOrFieldType) {  		sortType = Sorting.GetSortTypeEnumForType (typ);  		if (typ == typeof(string)) {  			if (stringComparisonToUse == StringComparison.Ordinal)  				DoCompare = StringCompareOrdinal;  			else  				DoCompare = StringCompare;  		}  		else if (typ == typeof(int) && !fSortDescending)  			DoCompare = CompareInt;  		else if (typ == typeof(int))  			DoCompare = CompareIntDesc;  		else if (typ == typeof(DateTime))  			DoCompare = CompareDates;  		else if (typ == typeof(long))  			DoCompare = CompareTypeSensitive<long>;  		else if (typ == typeof(double))  			DoCompare = CompareTypeSensitive<double>;  		else if (typ == typeof(float))  			DoCompare = CompareTypeSensitive<float>;  		else if (typ == typeof(short))  			DoCompare = CompareTypeSensitive<short>;  		else if (typ == typeof(byte))  			DoCompare = CompareTypeSensitive<byte>;  		else if (typ == typeof(bool))  			DoCompare = CompareTypeSensitive<bool>;  		else if (typ.BaseType == typeof(Enum)) {  			FastEnumLookup = new Dictionary<int' string> (32);  			if (fSortDescending) {  				DoCompare = FastCompareEnumsDesc;  			}  			else {  				DoCompare = FastCompareEnumsAsc;  			}  		}  		else  			DoCompare = CompareUsingToString;  	}  	else {  		if (sortType == SortType.eString)  			DoCompare = CompareUsingToString;  		else if (sortType == SortType.eByte)  			DoCompare = CompareUsingToByte;  		else if (sortType == SortType.eDateTime)  			DoCompare = CompareUsingToDate;  		else if (sortType == SortType.eInteger)  			DoCompare = CompareUsingToInt;  		else if (sortType == SortType.eLong)  			DoCompare = CompareUsingToInt64;  		else if (sortType == SortType.eDoubleOrFloat)  			DoCompare = CompareUsingToDouble;  		else  			DoCompare = CompareUsingToString;  	}  }  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (sortType == SortType.eUsePropertyOrFieldType) {  	sortType = Sorting.GetSortTypeEnumForType (typ);  	if (typ == typeof(string)) {  		if (stringComparisonToUse == StringComparison.Ordinal)  			DoCompare = StringCompareOrdinal;  		else  			DoCompare = StringCompare;  	}  	else if (typ == typeof(int) && !fSortDescending)  		DoCompare = CompareInt;  	else if (typ == typeof(int))  		DoCompare = CompareIntDesc;  	else if (typ == typeof(DateTime))  		DoCompare = CompareDates;  	else if (typ == typeof(long))  		DoCompare = CompareTypeSensitive<long>;  	else if (typ == typeof(double))  		DoCompare = CompareTypeSensitive<double>;  	else if (typ == typeof(float))  		DoCompare = CompareTypeSensitive<float>;  	else if (typ == typeof(short))  		DoCompare = CompareTypeSensitive<short>;  	else if (typ == typeof(byte))  		DoCompare = CompareTypeSensitive<byte>;  	else if (typ == typeof(bool))  		DoCompare = CompareTypeSensitive<bool>;  	else if (typ.BaseType == typeof(Enum)) {  		FastEnumLookup = new Dictionary<int' string> (32);  		if (fSortDescending) {  			DoCompare = FastCompareEnumsDesc;  		}  		else {  			DoCompare = FastCompareEnumsAsc;  		}  	}  	else  		DoCompare = CompareUsingToString;  }  else {  	if (sortType == SortType.eString)  		DoCompare = CompareUsingToString;  	else if (sortType == SortType.eByte)  		DoCompare = CompareUsingToByte;  	else if (sortType == SortType.eDateTime)  		DoCompare = CompareUsingToDate;  	else if (sortType == SortType.eInteger)  		DoCompare = CompareUsingToInt;  	else if (sortType == SortType.eLong)  		DoCompare = CompareUsingToInt64;  	else if (sortType == SortType.eDoubleOrFloat)  		DoCompare = CompareUsingToDouble;  	else  		DoCompare = CompareUsingToString;  }  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(string)) {  	if (stringComparisonToUse == StringComparison.Ordinal)  		DoCompare = StringCompareOrdinal;  	else  		DoCompare = StringCompare;  }  else if (typ == typeof(int) && !fSortDescending)  	DoCompare = CompareInt;  else if (typ == typeof(int))  	DoCompare = CompareIntDesc;  else if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(int) && !fSortDescending)  	DoCompare = CompareInt;  else if (typ == typeof(int))  	DoCompare = CompareIntDesc;  else if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(int))  	DoCompare = CompareIntDesc;  else if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: FastEnumLookup = new Dictionary<int' string> (32);  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (fFoundField == false) {  	fFoundField = true;  	if (fi == null) {  		// You can play around with binding flags if you really want to access nonpublic fields' etc...   		// note that there is a significant performance hit on accessing protected and private fields'  		// since security / permissions are checked every time' from what I can tell.  It's better  		// just to go through public properties if you're not accessing public fields.  		// fi = typeof(T).GetField(sFieldName' BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);  		fi = typeof(T).GetField (sFieldName);  		if (fi == null) {  			throw new Exception ("Field name " + sFieldName + " not found while trying to compare objects of type " + typeof(T).Name);  		}  	}  	typ = fi.FieldType;  	if (sortType == SortType.eUsePropertyOrFieldType) {  		sortType = Sorting.GetSortTypeEnumForType (typ);  		if (typ == typeof(string)) {  			if (stringComparisonToUse == StringComparison.Ordinal)  				DoCompare = StringCompareOrdinal;  			else  				DoCompare = StringCompare;  		}  		else if (typ == typeof(int) && !fSortDescending)  			DoCompare = CompareInt;  		else if (typ == typeof(int))  			DoCompare = CompareIntDesc;  		else if (typ == typeof(DateTime))  			DoCompare = CompareDates;  		else if (typ == typeof(long))  			DoCompare = CompareTypeSensitive<long>;  		else if (typ == typeof(double))  			DoCompare = CompareTypeSensitive<double>;  		else if (typ == typeof(float))  			DoCompare = CompareTypeSensitive<float>;  		else if (typ == typeof(short))  			DoCompare = CompareTypeSensitive<short>;  		else if (typ == typeof(byte))  			DoCompare = CompareTypeSensitive<byte>;  		else if (typ == typeof(bool))  			DoCompare = CompareTypeSensitive<bool>;  		else if (typ.BaseType == typeof(Enum)) {  			FastEnumLookup = new Dictionary<int' string> (32);  			if (fSortDescending) {  				DoCompare = FastCompareEnumsDesc;  			}  			else {  				DoCompare = FastCompareEnumsAsc;  			}  		}  		else  			DoCompare = CompareUsingToString;  		// optimize to use the ABOVE path if the property or field type matches  		// the requested sort type (i.e. below)  	}  	else {  		if (sortType == SortType.eString)  			DoCompare = CompareUsingToString;  		else if (sortType == SortType.eByte)  			DoCompare = CompareUsingToByte;  		else if (sortType == SortType.eDateTime)  			DoCompare = CompareUsingToDate;  		else if (sortType == SortType.eInteger)  			DoCompare = CompareUsingToInt;  		else if (sortType == SortType.eLong)  			DoCompare = CompareUsingToInt64;  		else if (sortType == SortType.eDoubleOrFloat)  			DoCompare = CompareUsingToDouble;  		else  			DoCompare = CompareUsingToString;  	}  }  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (sortType == SortType.eUsePropertyOrFieldType) {  	sortType = Sorting.GetSortTypeEnumForType (typ);  	if (typ == typeof(string)) {  		if (stringComparisonToUse == StringComparison.Ordinal)  			DoCompare = StringCompareOrdinal;  		else  			DoCompare = StringCompare;  	}  	else if (typ == typeof(int) && !fSortDescending)  		DoCompare = CompareInt;  	else if (typ == typeof(int))  		DoCompare = CompareIntDesc;  	else if (typ == typeof(DateTime))  		DoCompare = CompareDates;  	else if (typ == typeof(long))  		DoCompare = CompareTypeSensitive<long>;  	else if (typ == typeof(double))  		DoCompare = CompareTypeSensitive<double>;  	else if (typ == typeof(float))  		DoCompare = CompareTypeSensitive<float>;  	else if (typ == typeof(short))  		DoCompare = CompareTypeSensitive<short>;  	else if (typ == typeof(byte))  		DoCompare = CompareTypeSensitive<byte>;  	else if (typ == typeof(bool))  		DoCompare = CompareTypeSensitive<bool>;  	else if (typ.BaseType == typeof(Enum)) {  		FastEnumLookup = new Dictionary<int' string> (32);  		if (fSortDescending) {  			DoCompare = FastCompareEnumsDesc;  		}  		else {  			DoCompare = FastCompareEnumsAsc;  		}  	}  	else  		DoCompare = CompareUsingToString;  	// optimize to use the ABOVE path if the property or field type matches  	// the requested sort type (i.e. below)  }  else {  	if (sortType == SortType.eString)  		DoCompare = CompareUsingToString;  	else if (sortType == SortType.eByte)  		DoCompare = CompareUsingToByte;  	else if (sortType == SortType.eDateTime)  		DoCompare = CompareUsingToDate;  	else if (sortType == SortType.eInteger)  		DoCompare = CompareUsingToInt;  	else if (sortType == SortType.eLong)  		DoCompare = CompareUsingToInt64;  	else if (sortType == SortType.eDoubleOrFloat)  		DoCompare = CompareUsingToDouble;  	else  		DoCompare = CompareUsingToString;  }  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(string)) {  	if (stringComparisonToUse == StringComparison.Ordinal)  		DoCompare = StringCompareOrdinal;  	else  		DoCompare = StringCompare;  }  else if (typ == typeof(int) && !fSortDescending)  	DoCompare = CompareInt;  else if (typ == typeof(int))  	DoCompare = CompareIntDesc;  else if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(int) && !fSortDescending)  	DoCompare = CompareInt;  else if (typ == typeof(int))  	DoCompare = CompareIntDesc;  else if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(int))  	DoCompare = CompareIntDesc;  else if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: FastEnumLookup = new Dictionary<int' string> (32);  
Magic Number,MyAnimePlugin3.ViewModel,AniDB_Anime_RelationVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AniDB_Anime_RelationVM.cs,Populate,The following statement contains a magic number: if (RelationType.Equals ("Sequel"' StringComparison.InvariantCultureIgnoreCase)) {  	IsSequel = true;  	SortPriority = 2;  }  
Magic Number,MyAnimePlugin3.ViewModel,AniDB_Anime_RelationVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AniDB_Anime_RelationVM.cs,Populate,The following statement contains a magic number: SortPriority = 2;  
Magic Number,MyAnimePlugin3.ViewModel,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The following statement contains a magic number: if (this.EpisodeTypeEnum == enEpisodeType.Episode) {  	if (tvSummary != null && tvSummary.CrossRefTvDBV2 != null && tvSummary.CrossRefTvDBV2.Count > 0) {  		// find the xref that is right  		// relies on the xref's being sorted by season number and then episode number (desc)  		List<SortPropOrFieldAndDirection> sortCriteria = new List<SortPropOrFieldAndDirection> ();  		sortCriteria.Add (new SortPropOrFieldAndDirection ("AniDBStartEpisodeNumber"' true' SortType.eInteger));  		List<CrossRef_AniDB_TvDBVMV2> tvDBCrossRef = Sorting.MultiSort<CrossRef_AniDB_TvDBVMV2> (tvSummary.CrossRefTvDBV2' sortCriteria);  		bool foundStartingPoint = false;  		CrossRef_AniDB_TvDBVMV2 xrefBase = null;  		foreach (CrossRef_AniDB_TvDBVMV2 xrefTV in tvDBCrossRef) {  			if (xrefTV.AniDBStartEpisodeType != (int)enEpisodeType.Episode)  				continue;  			if (this.EpisodeNumber >= xrefTV.AniDBStartEpisodeNumber) {  				foundStartingPoint = true;  				xrefBase = xrefTV;  				break;  			}  		}  		// we have found the starting epiosde numbder from AniDB  		// now let's check that the TvDB Season and Episode Number exist  		if (foundStartingPoint) {  			Dictionary<int' int> dictTvDBSeasons = null;  			Dictionary<int' TvDB_EpisodeVM> dictTvDBEpisodes = null;  			foreach (TvDBDetails det in tvSummary.TvDetails.Values) {  				if (det.TvDBID == xrefBase.TvDBID) {  					dictTvDBSeasons = det.DictTvDBSeasons;  					dictTvDBEpisodes = det.DictTvDBEpisodes;  					break;  				}  			}  			if (dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  				int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (this.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  				if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  					TvDB_EpisodeVM tvep = dictTvDBEpisodes [episodeNumber];  					if (string.IsNullOrEmpty (tvep.Overview))  						this.EpisodeOverview = "Episode Overview Not Available";  					else  						this.EpisodeOverview = tvep.Overview;  					if (string.IsNullOrEmpty (tvep.FullImagePath) || !File.Exists (tvep.FullImagePath)) {  						if (string.IsNullOrEmpty (tvep.OnlineImagePath))  							this.EpisodeImageLocation = @"/Images/EpisodeThumb_NotFound.png";  						else  							this.EpisodeImageLocation = tvep.OnlineImagePath;  					}  					else  						this.EpisodeImageLocation = tvep.FullImagePath;  					if (JMMServerVM.Instance.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  						EpisodeName = tvep.EpisodeName;  				}  			}  		}  	}  }  
Magic Number,MyAnimePlugin3.ViewModel,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The following statement contains a magic number: if (tvSummary != null && tvSummary.CrossRefTvDBV2 != null && tvSummary.CrossRefTvDBV2.Count > 0) {  	// find the xref that is right  	// relies on the xref's being sorted by season number and then episode number (desc)  	List<SortPropOrFieldAndDirection> sortCriteria = new List<SortPropOrFieldAndDirection> ();  	sortCriteria.Add (new SortPropOrFieldAndDirection ("AniDBStartEpisodeNumber"' true' SortType.eInteger));  	List<CrossRef_AniDB_TvDBVMV2> tvDBCrossRef = Sorting.MultiSort<CrossRef_AniDB_TvDBVMV2> (tvSummary.CrossRefTvDBV2' sortCriteria);  	bool foundStartingPoint = false;  	CrossRef_AniDB_TvDBVMV2 xrefBase = null;  	foreach (CrossRef_AniDB_TvDBVMV2 xrefTV in tvDBCrossRef) {  		if (xrefTV.AniDBStartEpisodeType != (int)enEpisodeType.Episode)  			continue;  		if (this.EpisodeNumber >= xrefTV.AniDBStartEpisodeNumber) {  			foundStartingPoint = true;  			xrefBase = xrefTV;  			break;  		}  	}  	// we have found the starting epiosde numbder from AniDB  	// now let's check that the TvDB Season and Episode Number exist  	if (foundStartingPoint) {  		Dictionary<int' int> dictTvDBSeasons = null;  		Dictionary<int' TvDB_EpisodeVM> dictTvDBEpisodes = null;  		foreach (TvDBDetails det in tvSummary.TvDetails.Values) {  			if (det.TvDBID == xrefBase.TvDBID) {  				dictTvDBSeasons = det.DictTvDBSeasons;  				dictTvDBEpisodes = det.DictTvDBEpisodes;  				break;  			}  		}  		if (dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  			int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (this.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  			if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  				TvDB_EpisodeVM tvep = dictTvDBEpisodes [episodeNumber];  				if (string.IsNullOrEmpty (tvep.Overview))  					this.EpisodeOverview = "Episode Overview Not Available";  				else  					this.EpisodeOverview = tvep.Overview;  				if (string.IsNullOrEmpty (tvep.FullImagePath) || !File.Exists (tvep.FullImagePath)) {  					if (string.IsNullOrEmpty (tvep.OnlineImagePath))  						this.EpisodeImageLocation = @"/Images/EpisodeThumb_NotFound.png";  					else  						this.EpisodeImageLocation = tvep.OnlineImagePath;  				}  				else  					this.EpisodeImageLocation = tvep.FullImagePath;  				if (JMMServerVM.Instance.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  					EpisodeName = tvep.EpisodeName;  			}  		}  	}  }  
Magic Number,MyAnimePlugin3.ViewModel,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The following statement contains a magic number: if (foundStartingPoint) {  	Dictionary<int' int> dictTvDBSeasons = null;  	Dictionary<int' TvDB_EpisodeVM> dictTvDBEpisodes = null;  	foreach (TvDBDetails det in tvSummary.TvDetails.Values) {  		if (det.TvDBID == xrefBase.TvDBID) {  			dictTvDBSeasons = det.DictTvDBSeasons;  			dictTvDBEpisodes = det.DictTvDBEpisodes;  			break;  		}  	}  	if (dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  		int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (this.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  		if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  			TvDB_EpisodeVM tvep = dictTvDBEpisodes [episodeNumber];  			if (string.IsNullOrEmpty (tvep.Overview))  				this.EpisodeOverview = "Episode Overview Not Available";  			else  				this.EpisodeOverview = tvep.Overview;  			if (string.IsNullOrEmpty (tvep.FullImagePath) || !File.Exists (tvep.FullImagePath)) {  				if (string.IsNullOrEmpty (tvep.OnlineImagePath))  					this.EpisodeImageLocation = @"/Images/EpisodeThumb_NotFound.png";  				else  					this.EpisodeImageLocation = tvep.OnlineImagePath;  			}  			else  				this.EpisodeImageLocation = tvep.FullImagePath;  			if (JMMServerVM.Instance.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  				EpisodeName = tvep.EpisodeName;  		}  	}  }  
Magic Number,MyAnimePlugin3.ViewModel,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The following statement contains a magic number: if (dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  	int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (this.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  	if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  		TvDB_EpisodeVM tvep = dictTvDBEpisodes [episodeNumber];  		if (string.IsNullOrEmpty (tvep.Overview))  			this.EpisodeOverview = "Episode Overview Not Available";  		else  			this.EpisodeOverview = tvep.Overview;  		if (string.IsNullOrEmpty (tvep.FullImagePath) || !File.Exists (tvep.FullImagePath)) {  			if (string.IsNullOrEmpty (tvep.OnlineImagePath))  				this.EpisodeImageLocation = @"/Images/EpisodeThumb_NotFound.png";  			else  				this.EpisodeImageLocation = tvep.OnlineImagePath;  		}  		else  			this.EpisodeImageLocation = tvep.FullImagePath;  		if (JMMServerVM.Instance.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  			EpisodeName = tvep.EpisodeName;  	}  }  
Magic Number,MyAnimePlugin3.ViewModel,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The following statement contains a magic number: if (this.EpisodeTypeEnum == enEpisodeType.Special) {  	// find the xref that is right  	// relies on the xref's being sorted by season number and then episode number (desc)  	List<SortPropOrFieldAndDirection> sortCriteria = new List<SortPropOrFieldAndDirection> ();  	sortCriteria.Add (new SortPropOrFieldAndDirection ("AniDBStartEpisodeNumber"' true' SortType.eInteger));  	List<CrossRef_AniDB_TvDBVMV2> tvDBCrossRef = Sorting.MultiSort<CrossRef_AniDB_TvDBVMV2> (tvSummary.CrossRefTvDBV2' sortCriteria);  	bool foundStartingPoint = false;  	CrossRef_AniDB_TvDBVMV2 xrefBase = null;  	foreach (CrossRef_AniDB_TvDBVMV2 xrefTV in tvDBCrossRef) {  		if (xrefTV.AniDBStartEpisodeType != (int)enEpisodeType.Special)  			continue;  		if (this.EpisodeNumber >= xrefTV.AniDBStartEpisodeNumber) {  			foundStartingPoint = true;  			xrefBase = xrefTV;  			break;  		}  	}  	if (tvSummary != null && tvSummary.CrossRefTvDBV2 != null && tvSummary.CrossRefTvDBV2.Count > 0) {  		// we have found the starting epiosde numbder from AniDB  		// now let's check that the TvDB Season and Episode Number exist  		if (foundStartingPoint) {  			Dictionary<int' int> dictTvDBSeasons = null;  			Dictionary<int' TvDB_EpisodeVM> dictTvDBEpisodes = null;  			foreach (TvDBDetails det in tvSummary.TvDetails.Values) {  				if (det.TvDBID == xrefBase.TvDBID) {  					dictTvDBSeasons = det.DictTvDBSeasons;  					dictTvDBEpisodes = det.DictTvDBEpisodes;  					break;  				}  			}  			if (dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  				int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (this.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  				if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  					TvDB_EpisodeVM tvep = dictTvDBEpisodes [episodeNumber];  					this.EpisodeOverview = tvep.Overview;  					if (string.IsNullOrEmpty (tvep.FullImagePath) || !File.Exists (tvep.FullImagePath)) {  						if (string.IsNullOrEmpty (tvep.OnlineImagePath))  							this.EpisodeImageLocation = @"/Images/EpisodeThumb_NotFound.png";  						else  							this.EpisodeImageLocation = tvep.OnlineImagePath;  					}  					else  						this.EpisodeImageLocation = tvep.FullImagePath;  					if (JMMServerVM.Instance.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  						EpisodeName = tvep.EpisodeName;  				}  			}  		}  	}  }  
Magic Number,MyAnimePlugin3.ViewModel,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The following statement contains a magic number: if (tvSummary != null && tvSummary.CrossRefTvDBV2 != null && tvSummary.CrossRefTvDBV2.Count > 0) {  	// we have found the starting epiosde numbder from AniDB  	// now let's check that the TvDB Season and Episode Number exist  	if (foundStartingPoint) {  		Dictionary<int' int> dictTvDBSeasons = null;  		Dictionary<int' TvDB_EpisodeVM> dictTvDBEpisodes = null;  		foreach (TvDBDetails det in tvSummary.TvDetails.Values) {  			if (det.TvDBID == xrefBase.TvDBID) {  				dictTvDBSeasons = det.DictTvDBSeasons;  				dictTvDBEpisodes = det.DictTvDBEpisodes;  				break;  			}  		}  		if (dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  			int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (this.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  			if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  				TvDB_EpisodeVM tvep = dictTvDBEpisodes [episodeNumber];  				this.EpisodeOverview = tvep.Overview;  				if (string.IsNullOrEmpty (tvep.FullImagePath) || !File.Exists (tvep.FullImagePath)) {  					if (string.IsNullOrEmpty (tvep.OnlineImagePath))  						this.EpisodeImageLocation = @"/Images/EpisodeThumb_NotFound.png";  					else  						this.EpisodeImageLocation = tvep.OnlineImagePath;  				}  				else  					this.EpisodeImageLocation = tvep.FullImagePath;  				if (JMMServerVM.Instance.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  					EpisodeName = tvep.EpisodeName;  			}  		}  	}  }  
Magic Number,MyAnimePlugin3.ViewModel,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The following statement contains a magic number: if (foundStartingPoint) {  	Dictionary<int' int> dictTvDBSeasons = null;  	Dictionary<int' TvDB_EpisodeVM> dictTvDBEpisodes = null;  	foreach (TvDBDetails det in tvSummary.TvDetails.Values) {  		if (det.TvDBID == xrefBase.TvDBID) {  			dictTvDBSeasons = det.DictTvDBSeasons;  			dictTvDBEpisodes = det.DictTvDBEpisodes;  			break;  		}  	}  	if (dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  		int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (this.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  		if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  			TvDB_EpisodeVM tvep = dictTvDBEpisodes [episodeNumber];  			this.EpisodeOverview = tvep.Overview;  			if (string.IsNullOrEmpty (tvep.FullImagePath) || !File.Exists (tvep.FullImagePath)) {  				if (string.IsNullOrEmpty (tvep.OnlineImagePath))  					this.EpisodeImageLocation = @"/Images/EpisodeThumb_NotFound.png";  				else  					this.EpisodeImageLocation = tvep.OnlineImagePath;  			}  			else  				this.EpisodeImageLocation = tvep.FullImagePath;  			if (JMMServerVM.Instance.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  				EpisodeName = tvep.EpisodeName;  		}  	}  }  
Magic Number,MyAnimePlugin3.ViewModel,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The following statement contains a magic number: if (dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  	int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (this.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  	if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  		TvDB_EpisodeVM tvep = dictTvDBEpisodes [episodeNumber];  		this.EpisodeOverview = tvep.Overview;  		if (string.IsNullOrEmpty (tvep.FullImagePath) || !File.Exists (tvep.FullImagePath)) {  			if (string.IsNullOrEmpty (tvep.OnlineImagePath))  				this.EpisodeImageLocation = @"/Images/EpisodeThumb_NotFound.png";  			else  				this.EpisodeImageLocation = tvep.OnlineImagePath;  		}  		else  			this.EpisodeImageLocation = tvep.FullImagePath;  		if (JMMServerVM.Instance.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  			EpisodeName = tvep.EpisodeName;  	}  }  
Magic Number,MyAnimePlugin3.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\GroupFilterHelper.cs,GetDateAsString,The following statement contains a magic number: return aDate.Year.ToString ().PadLeft (4' '0') + aDate.Month.ToString ().PadLeft (2' '0') + aDate.Day.ToString ().PadLeft (2' '0');  
Magic Number,MyAnimePlugin3.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\GroupFilterHelper.cs,GetDateAsString,The following statement contains a magic number: return aDate.Year.ToString ().PadLeft (4' '0') + aDate.Month.ToString ().PadLeft (2' '0') + aDate.Day.ToString ().PadLeft (2' '0');  
Magic Number,MyAnimePlugin3.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\GroupFilterHelper.cs,GetDateAsString,The following statement contains a magic number: return aDate.Year.ToString ().PadLeft (4' '0') + aDate.Month.ToString ().PadLeft (2' '0') + aDate.Day.ToString ().PadLeft (2' '0');  
Magic Number,MyAnimePlugin3.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\GroupFilterHelper.cs,GetDateFromString,The following statement contains a magic number: try {  	int year = int.Parse (sDate.Substring (0' 4));  	int month = int.Parse (sDate.Substring (4' 2));  	int day = int.Parse (sDate.Substring (6' 2));  	return new DateTime (year' month' day);  }  catch (Exception ex) {  	return DateTime.Today;  }  
Magic Number,MyAnimePlugin3.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\GroupFilterHelper.cs,GetDateFromString,The following statement contains a magic number: try {  	int year = int.Parse (sDate.Substring (0' 4));  	int month = int.Parse (sDate.Substring (4' 2));  	int day = int.Parse (sDate.Substring (6' 2));  	return new DateTime (year' month' day);  }  catch (Exception ex) {  	return DateTime.Today;  }  
Magic Number,MyAnimePlugin3.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\GroupFilterHelper.cs,GetDateFromString,The following statement contains a magic number: try {  	int year = int.Parse (sDate.Substring (0' 4));  	int month = int.Parse (sDate.Substring (4' 2));  	int day = int.Parse (sDate.Substring (6' 2));  	return new DateTime (year' month' day);  }  catch (Exception ex) {  	return DateTime.Today;  }  
Magic Number,MyAnimePlugin3.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\GroupFilterHelper.cs,GetDateFromString,The following statement contains a magic number: try {  	int year = int.Parse (sDate.Substring (0' 4));  	int month = int.Parse (sDate.Substring (4' 2));  	int day = int.Parse (sDate.Substring (6' 2));  	return new DateTime (year' month' day);  }  catch (Exception ex) {  	return DateTime.Today;  }  
Magic Number,MyAnimePlugin3.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\GroupFilterHelper.cs,GetDateFromString,The following statement contains a magic number: try {  	int year = int.Parse (sDate.Substring (0' 4));  	int month = int.Parse (sDate.Substring (4' 2));  	int day = int.Parse (sDate.Substring (6' 2));  	return new DateTime (year' month' day);  }  catch (Exception ex) {  	return DateTime.Today;  }  
Magic Number,MyAnimePlugin3.ViewModel,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\GroupFilterVM.cs,Populate,The following statement contains a magic number: if (!string.IsNullOrEmpty (sortCriteriaRaw)) {  	string[] scrit = sortCriteriaRaw.Split ('|');  	foreach (string sortpair in scrit) {  		string[] spair = sortpair.Split (';');  		if (spair.Length != 2)  			continue;  		int stype = 0;  		int sdir = 0;  		int.TryParse (spair [0]' out stype);  		int.TryParse (spair [1]' out sdir);  		if (stype > 0 && sdir > 0) {  			GroupFilterSortingCriteria gfsc = new GroupFilterSortingCriteria ();  			gfsc.GroupFilterID = this.GroupFilterID;  			gfsc.SortType = (GroupFilterSorting)stype;  			gfsc.SortDirection = (GroupFilterSortDirection)sdir;  			SortCriteriaList.Add (gfsc);  		}  	}  }  
Magic Number,MyAnimePlugin3.ViewModel,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\GroupFilterVM.cs,Populate,The following statement contains a magic number: foreach (string sortpair in scrit) {  	string[] spair = sortpair.Split (';');  	if (spair.Length != 2)  		continue;  	int stype = 0;  	int sdir = 0;  	int.TryParse (spair [0]' out stype);  	int.TryParse (spair [1]' out sdir);  	if (stype > 0 && sdir > 0) {  		GroupFilterSortingCriteria gfsc = new GroupFilterSortingCriteria ();  		gfsc.GroupFilterID = this.GroupFilterID;  		gfsc.SortType = (GroupFilterSorting)stype;  		gfsc.SortDirection = (GroupFilterSortDirection)sdir;  		SortCriteriaList.Add (gfsc);  	}  }  
Magic Number,MyAnimePlugin3.ViewModel,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\GroupFilterVM.cs,Populate,The following statement contains a magic number: if (spair.Length != 2)  	continue;  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,downloadRecommendedAnimeWorker_DoWork,The following statement contains a magic number: contracts = JMMServerVM.Instance.clientBinaryHTTP.GetRecommendations (20' JMMServerVM.Instance.CurrentUser.JMMUserID' 2);  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,downloadRecommendedAnimeWorker_DoWork,The following statement contains a magic number: contracts = JMMServerVM.Instance.clientBinaryHTTP.GetRecommendations (20' JMMServerVM.Instance.CurrentUser.JMMUserID' 2);  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,downloadRecommendedAnimeWorker_DoWork,The following statement contains a magic number: while (!imagesAvailable && !timeOut) {  	BaseConfig.MyAnimeLog.Write ("Checking for images...");  	bool foundAllImages = true;  	foreach (RecommendationVM rec in tempRecs) {  		if (!File.Exists (rec.Recommended_AniDB_Anime.PosterPathNoDefault)) {  			BaseConfig.MyAnimeLog.Write ("Downloading image for : " + rec.Recommended_AniDB_Anime.AnimeID.ToString ());  			MainWindow.imageHelper.DownloadAniDBCover (rec.Recommended_AniDB_Anime' false);  			foundAllImages = false;  		}  	}  	TimeSpan ts = DateTime.Now - start;  	if (ts.TotalSeconds > 15)  		timeOut = true;  	imagesAvailable = foundAllImages;  	Thread.Sleep (2000);  }  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,downloadRecommendedAnimeWorker_DoWork,The following statement contains a magic number: while (!imagesAvailable && !timeOut) {  	BaseConfig.MyAnimeLog.Write ("Checking for images...");  	bool foundAllImages = true;  	foreach (RecommendationVM rec in tempRecs) {  		if (!File.Exists (rec.Recommended_AniDB_Anime.PosterPathNoDefault)) {  			BaseConfig.MyAnimeLog.Write ("Downloading image for : " + rec.Recommended_AniDB_Anime.AnimeID.ToString ());  			MainWindow.imageHelper.DownloadAniDBCover (rec.Recommended_AniDB_Anime' false);  			foundAllImages = false;  		}  	}  	TimeSpan ts = DateTime.Now - start;  	if (ts.TotalSeconds > 15)  		timeOut = true;  	imagesAvailable = foundAllImages;  	Thread.Sleep (2000);  }  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,downloadRecommendedAnimeWorker_DoWork,The following statement contains a magic number: if (ts.TotalSeconds > 15)  	timeOut = true;  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,downloadRecommendedAnimeWorker_DoWork,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,downloadRelatedAnimeWorker_DoWork,The following statement contains a magic number: while (!imagesAvailable && !timeOut) {  	BaseConfig.MyAnimeLog.Write ("Checking for images...");  	links = GetRelatedAnime (animeID);  	bool foundAllImages = true;  	foreach (AniDB_Anime_RelationVM link in links) {  		if (link.AnimeInfoExists) {  			if (!File.Exists (link.AniDB_Anime.PosterPathNoDefault)) {  				BaseConfig.MyAnimeLog.Write ("Downloading image for : " + link.AniDB_Anime.AnimeID.ToString ());  				MainWindow.imageHelper.DownloadAniDBCover (link.AniDB_Anime' false);  				foundAllImages = false;  			}  		}  	}  	TimeSpan ts = DateTime.Now - start;  	if (ts.TotalSeconds > 15)  		timeOut = true;  	imagesAvailable = foundAllImages;  	Thread.Sleep (2000);  }  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,downloadRelatedAnimeWorker_DoWork,The following statement contains a magic number: while (!imagesAvailable && !timeOut) {  	BaseConfig.MyAnimeLog.Write ("Checking for images...");  	links = GetRelatedAnime (animeID);  	bool foundAllImages = true;  	foreach (AniDB_Anime_RelationVM link in links) {  		if (link.AnimeInfoExists) {  			if (!File.Exists (link.AniDB_Anime.PosterPathNoDefault)) {  				BaseConfig.MyAnimeLog.Write ("Downloading image for : " + link.AniDB_Anime.AnimeID.ToString ());  				MainWindow.imageHelper.DownloadAniDBCover (link.AniDB_Anime' false);  				foundAllImages = false;  			}  		}  	}  	TimeSpan ts = DateTime.Now - start;  	if (ts.TotalSeconds > 15)  		timeOut = true;  	imagesAvailable = foundAllImages;  	Thread.Sleep (2000);  }  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,downloadRelatedAnimeWorker_DoWork,The following statement contains a magic number: if (ts.TotalSeconds > 15)  	timeOut = true;  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,downloadRelatedAnimeWorker_DoWork,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,Init,The following statement contains a magic number: serverStatusTimer.Interval = 4 * 1000;  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,Init,The following statement contains a magic number: serverStatusTimer.Interval = 4 * 1000;  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,SetupImageClient,The following statement contains a magic number: try {  	AnimePluginSettings settings = new AnimePluginSettings ();  	string url = string.Format (@"http://{0}:{1}/JMMServerImage"' settings.JMMServer_Address' settings.JMMServer_Port);  	BasicHttpBinding binding = new BasicHttpBinding ();  	binding.MessageEncoding = WSMessageEncoding.Mtom;  	binding.MaxReceivedMessageSize = 2147483647;  	binding.ReaderQuotas.MaxArrayLength = 2147483647;  	EndpointAddress endpoint = new EndpointAddress (new Uri (url));  	_imageClient = new JMMImageServer.JMMServerImageClient (binding' endpoint);  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write (ex.ToString ());  }  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,SetupImageClient,The following statement contains a magic number: try {  	AnimePluginSettings settings = new AnimePluginSettings ();  	string url = string.Format (@"http://{0}:{1}/JMMServerImage"' settings.JMMServer_Address' settings.JMMServer_Port);  	BasicHttpBinding binding = new BasicHttpBinding ();  	binding.MessageEncoding = WSMessageEncoding.Mtom;  	binding.MaxReceivedMessageSize = 2147483647;  	binding.ReaderQuotas.MaxArrayLength = 2147483647;  	EndpointAddress endpoint = new EndpointAddress (new Uri (url));  	_imageClient = new JMMImageServer.JMMServerImageClient (binding' endpoint);  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write (ex.ToString ());  }  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,SetupImageClient,The following statement contains a magic number: binding.MaxReceivedMessageSize = 2147483647;  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,SetupImageClient,The following statement contains a magic number: binding.ReaderQuotas.MaxArrayLength = 2147483647;  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: try {  	AnimePluginSettings settings = new AnimePluginSettings ();  	string url = string.Format (@"http://{0}:{1}/JMMServerBinary"' settings.JMMServer_Address' settings.JMMServer_Port);  	BaseConfig.MyAnimeLog.Write ("JMM Server URL: " + url);  	BinaryMessageEncodingBindingElement encoding = new BinaryMessageEncodingBindingElement ();  	encoding.ReaderQuotas.MaxArrayLength = int.MaxValue;  	encoding.ReaderQuotas.MaxBytesPerRead = int.MaxValue;  	encoding.ReaderQuotas.MaxDepth = int.MaxValue;  	encoding.ReaderQuotas.MaxNameTableCharCount = int.MaxValue;  	encoding.ReaderQuotas.MaxStringContentLength = int.MaxValue;  	HttpTransportBindingElement transport = new HttpTransportBindingElement ();  	transport.MaxReceivedMessageSize = int.MaxValue;  	transport.MaxBufferPoolSize = int.MaxValue;  	transport.MaxBufferSize = int.MaxValue;  	transport.MaxReceivedMessageSize = int.MaxValue;  	Binding binding = new CustomBinding (encoding' transport);  	binding.SendTimeout = new TimeSpan (30' 0' 30);  	binding.ReceiveTimeout = new TimeSpan (30' 0' 30);  	binding.OpenTimeout = new TimeSpan (30' 0' 30);  	binding.CloseTimeout = new TimeSpan (30' 0' 30);  	EndpointAddress endpoint = new EndpointAddress (new Uri (url));  	var factory = new ChannelFactory<JMMServerBinary.IJMMServerChannel> (binding' endpoint);  	foreach (OperationDescription op in factory.Endpoint.Contract.Operations) {  		var dataContractBehavior = op.Behaviors.Find<DataContractSerializerOperationBehavior> ();  		if (dataContractBehavior != null) {  			dataContractBehavior.MaxItemsInObjectGraph = int.MaxValue;  		}  	}  	_clientBinaryHTTP = factory.CreateChannel ();  	// try connecting to see if the server is responding  	JMMServerBinary.Contract_ServerStatus status = JMMServerVM.Instance.clientBinaryHTTP.GetServerStatus ();  	ServerOnline = true;  	GetServerSettings ();  	RefreshImportFolders ();  	BaseConfig.MyAnimeLog.Write ("JMM Server Status: " + status.GeneralQueueState);  	return true;  }  catch (Exception ex) {  	//Utils.ShowErrorMessage(ex);  	BaseConfig.MyAnimeLog.Write (ex.ToString ());  	return false;  }  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: try {  	AnimePluginSettings settings = new AnimePluginSettings ();  	string url = string.Format (@"http://{0}:{1}/JMMServerBinary"' settings.JMMServer_Address' settings.JMMServer_Port);  	BaseConfig.MyAnimeLog.Write ("JMM Server URL: " + url);  	BinaryMessageEncodingBindingElement encoding = new BinaryMessageEncodingBindingElement ();  	encoding.ReaderQuotas.MaxArrayLength = int.MaxValue;  	encoding.ReaderQuotas.MaxBytesPerRead = int.MaxValue;  	encoding.ReaderQuotas.MaxDepth = int.MaxValue;  	encoding.ReaderQuotas.MaxNameTableCharCount = int.MaxValue;  	encoding.ReaderQuotas.MaxStringContentLength = int.MaxValue;  	HttpTransportBindingElement transport = new HttpTransportBindingElement ();  	transport.MaxReceivedMessageSize = int.MaxValue;  	transport.MaxBufferPoolSize = int.MaxValue;  	transport.MaxBufferSize = int.MaxValue;  	transport.MaxReceivedMessageSize = int.MaxValue;  	Binding binding = new CustomBinding (encoding' transport);  	binding.SendTimeout = new TimeSpan (30' 0' 30);  	binding.ReceiveTimeout = new TimeSpan (30' 0' 30);  	binding.OpenTimeout = new TimeSpan (30' 0' 30);  	binding.CloseTimeout = new TimeSpan (30' 0' 30);  	EndpointAddress endpoint = new EndpointAddress (new Uri (url));  	var factory = new ChannelFactory<JMMServerBinary.IJMMServerChannel> (binding' endpoint);  	foreach (OperationDescription op in factory.Endpoint.Contract.Operations) {  		var dataContractBehavior = op.Behaviors.Find<DataContractSerializerOperationBehavior> ();  		if (dataContractBehavior != null) {  			dataContractBehavior.MaxItemsInObjectGraph = int.MaxValue;  		}  	}  	_clientBinaryHTTP = factory.CreateChannel ();  	// try connecting to see if the server is responding  	JMMServerBinary.Contract_ServerStatus status = JMMServerVM.Instance.clientBinaryHTTP.GetServerStatus ();  	ServerOnline = true;  	GetServerSettings ();  	RefreshImportFolders ();  	BaseConfig.MyAnimeLog.Write ("JMM Server Status: " + status.GeneralQueueState);  	return true;  }  catch (Exception ex) {  	//Utils.ShowErrorMessage(ex);  	BaseConfig.MyAnimeLog.Write (ex.ToString ());  	return false;  }  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: try {  	AnimePluginSettings settings = new AnimePluginSettings ();  	string url = string.Format (@"http://{0}:{1}/JMMServerBinary"' settings.JMMServer_Address' settings.JMMServer_Port);  	BaseConfig.MyAnimeLog.Write ("JMM Server URL: " + url);  	BinaryMessageEncodingBindingElement encoding = new BinaryMessageEncodingBindingElement ();  	encoding.ReaderQuotas.MaxArrayLength = int.MaxValue;  	encoding.ReaderQuotas.MaxBytesPerRead = int.MaxValue;  	encoding.ReaderQuotas.MaxDepth = int.MaxValue;  	encoding.ReaderQuotas.MaxNameTableCharCount = int.MaxValue;  	encoding.ReaderQuotas.MaxStringContentLength = int.MaxValue;  	HttpTransportBindingElement transport = new HttpTransportBindingElement ();  	transport.MaxReceivedMessageSize = int.MaxValue;  	transport.MaxBufferPoolSize = int.MaxValue;  	transport.MaxBufferSize = int.MaxValue;  	transport.MaxReceivedMessageSize = int.MaxValue;  	Binding binding = new CustomBinding (encoding' transport);  	binding.SendTimeout = new TimeSpan (30' 0' 30);  	binding.ReceiveTimeout = new TimeSpan (30' 0' 30);  	binding.OpenTimeout = new TimeSpan (30' 0' 30);  	binding.CloseTimeout = new TimeSpan (30' 0' 30);  	EndpointAddress endpoint = new EndpointAddress (new Uri (url));  	var factory = new ChannelFactory<JMMServerBinary.IJMMServerChannel> (binding' endpoint);  	foreach (OperationDescription op in factory.Endpoint.Contract.Operations) {  		var dataContractBehavior = op.Behaviors.Find<DataContractSerializerOperationBehavior> ();  		if (dataContractBehavior != null) {  			dataContractBehavior.MaxItemsInObjectGraph = int.MaxValue;  		}  	}  	_clientBinaryHTTP = factory.CreateChannel ();  	// try connecting to see if the server is responding  	JMMServerBinary.Contract_ServerStatus status = JMMServerVM.Instance.clientBinaryHTTP.GetServerStatus ();  	ServerOnline = true;  	GetServerSettings ();  	RefreshImportFolders ();  	BaseConfig.MyAnimeLog.Write ("JMM Server Status: " + status.GeneralQueueState);  	return true;  }  catch (Exception ex) {  	//Utils.ShowErrorMessage(ex);  	BaseConfig.MyAnimeLog.Write (ex.ToString ());  	return false;  }  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: try {  	AnimePluginSettings settings = new AnimePluginSettings ();  	string url = string.Format (@"http://{0}:{1}/JMMServerBinary"' settings.JMMServer_Address' settings.JMMServer_Port);  	BaseConfig.MyAnimeLog.Write ("JMM Server URL: " + url);  	BinaryMessageEncodingBindingElement encoding = new BinaryMessageEncodingBindingElement ();  	encoding.ReaderQuotas.MaxArrayLength = int.MaxValue;  	encoding.ReaderQuotas.MaxBytesPerRead = int.MaxValue;  	encoding.ReaderQuotas.MaxDepth = int.MaxValue;  	encoding.ReaderQuotas.MaxNameTableCharCount = int.MaxValue;  	encoding.ReaderQuotas.MaxStringContentLength = int.MaxValue;  	HttpTransportBindingElement transport = new HttpTransportBindingElement ();  	transport.MaxReceivedMessageSize = int.MaxValue;  	transport.MaxBufferPoolSize = int.MaxValue;  	transport.MaxBufferSize = int.MaxValue;  	transport.MaxReceivedMessageSize = int.MaxValue;  	Binding binding = new CustomBinding (encoding' transport);  	binding.SendTimeout = new TimeSpan (30' 0' 30);  	binding.ReceiveTimeout = new TimeSpan (30' 0' 30);  	binding.OpenTimeout = new TimeSpan (30' 0' 30);  	binding.CloseTimeout = new TimeSpan (30' 0' 30);  	EndpointAddress endpoint = new EndpointAddress (new Uri (url));  	var factory = new ChannelFactory<JMMServerBinary.IJMMServerChannel> (binding' endpoint);  	foreach (OperationDescription op in factory.Endpoint.Contract.Operations) {  		var dataContractBehavior = op.Behaviors.Find<DataContractSerializerOperationBehavior> ();  		if (dataContractBehavior != null) {  			dataContractBehavior.MaxItemsInObjectGraph = int.MaxValue;  		}  	}  	_clientBinaryHTTP = factory.CreateChannel ();  	// try connecting to see if the server is responding  	JMMServerBinary.Contract_ServerStatus status = JMMServerVM.Instance.clientBinaryHTTP.GetServerStatus ();  	ServerOnline = true;  	GetServerSettings ();  	RefreshImportFolders ();  	BaseConfig.MyAnimeLog.Write ("JMM Server Status: " + status.GeneralQueueState);  	return true;  }  catch (Exception ex) {  	//Utils.ShowErrorMessage(ex);  	BaseConfig.MyAnimeLog.Write (ex.ToString ());  	return false;  }  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: try {  	AnimePluginSettings settings = new AnimePluginSettings ();  	string url = string.Format (@"http://{0}:{1}/JMMServerBinary"' settings.JMMServer_Address' settings.JMMServer_Port);  	BaseConfig.MyAnimeLog.Write ("JMM Server URL: " + url);  	BinaryMessageEncodingBindingElement encoding = new BinaryMessageEncodingBindingElement ();  	encoding.ReaderQuotas.MaxArrayLength = int.MaxValue;  	encoding.ReaderQuotas.MaxBytesPerRead = int.MaxValue;  	encoding.ReaderQuotas.MaxDepth = int.MaxValue;  	encoding.ReaderQuotas.MaxNameTableCharCount = int.MaxValue;  	encoding.ReaderQuotas.MaxStringContentLength = int.MaxValue;  	HttpTransportBindingElement transport = new HttpTransportBindingElement ();  	transport.MaxReceivedMessageSize = int.MaxValue;  	transport.MaxBufferPoolSize = int.MaxValue;  	transport.MaxBufferSize = int.MaxValue;  	transport.MaxReceivedMessageSize = int.MaxValue;  	Binding binding = new CustomBinding (encoding' transport);  	binding.SendTimeout = new TimeSpan (30' 0' 30);  	binding.ReceiveTimeout = new TimeSpan (30' 0' 30);  	binding.OpenTimeout = new TimeSpan (30' 0' 30);  	binding.CloseTimeout = new TimeSpan (30' 0' 30);  	EndpointAddress endpoint = new EndpointAddress (new Uri (url));  	var factory = new ChannelFactory<JMMServerBinary.IJMMServerChannel> (binding' endpoint);  	foreach (OperationDescription op in factory.Endpoint.Contract.Operations) {  		var dataContractBehavior = op.Behaviors.Find<DataContractSerializerOperationBehavior> ();  		if (dataContractBehavior != null) {  			dataContractBehavior.MaxItemsInObjectGraph = int.MaxValue;  		}  	}  	_clientBinaryHTTP = factory.CreateChannel ();  	// try connecting to see if the server is responding  	JMMServerBinary.Contract_ServerStatus status = JMMServerVM.Instance.clientBinaryHTTP.GetServerStatus ();  	ServerOnline = true;  	GetServerSettings ();  	RefreshImportFolders ();  	BaseConfig.MyAnimeLog.Write ("JMM Server Status: " + status.GeneralQueueState);  	return true;  }  catch (Exception ex) {  	//Utils.ShowErrorMessage(ex);  	BaseConfig.MyAnimeLog.Write (ex.ToString ());  	return false;  }  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: try {  	AnimePluginSettings settings = new AnimePluginSettings ();  	string url = string.Format (@"http://{0}:{1}/JMMServerBinary"' settings.JMMServer_Address' settings.JMMServer_Port);  	BaseConfig.MyAnimeLog.Write ("JMM Server URL: " + url);  	BinaryMessageEncodingBindingElement encoding = new BinaryMessageEncodingBindingElement ();  	encoding.ReaderQuotas.MaxArrayLength = int.MaxValue;  	encoding.ReaderQuotas.MaxBytesPerRead = int.MaxValue;  	encoding.ReaderQuotas.MaxDepth = int.MaxValue;  	encoding.ReaderQuotas.MaxNameTableCharCount = int.MaxValue;  	encoding.ReaderQuotas.MaxStringContentLength = int.MaxValue;  	HttpTransportBindingElement transport = new HttpTransportBindingElement ();  	transport.MaxReceivedMessageSize = int.MaxValue;  	transport.MaxBufferPoolSize = int.MaxValue;  	transport.MaxBufferSize = int.MaxValue;  	transport.MaxReceivedMessageSize = int.MaxValue;  	Binding binding = new CustomBinding (encoding' transport);  	binding.SendTimeout = new TimeSpan (30' 0' 30);  	binding.ReceiveTimeout = new TimeSpan (30' 0' 30);  	binding.OpenTimeout = new TimeSpan (30' 0' 30);  	binding.CloseTimeout = new TimeSpan (30' 0' 30);  	EndpointAddress endpoint = new EndpointAddress (new Uri (url));  	var factory = new ChannelFactory<JMMServerBinary.IJMMServerChannel> (binding' endpoint);  	foreach (OperationDescription op in factory.Endpoint.Contract.Operations) {  		var dataContractBehavior = op.Behaviors.Find<DataContractSerializerOperationBehavior> ();  		if (dataContractBehavior != null) {  			dataContractBehavior.MaxItemsInObjectGraph = int.MaxValue;  		}  	}  	_clientBinaryHTTP = factory.CreateChannel ();  	// try connecting to see if the server is responding  	JMMServerBinary.Contract_ServerStatus status = JMMServerVM.Instance.clientBinaryHTTP.GetServerStatus ();  	ServerOnline = true;  	GetServerSettings ();  	RefreshImportFolders ();  	BaseConfig.MyAnimeLog.Write ("JMM Server Status: " + status.GeneralQueueState);  	return true;  }  catch (Exception ex) {  	//Utils.ShowErrorMessage(ex);  	BaseConfig.MyAnimeLog.Write (ex.ToString ());  	return false;  }  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: try {  	AnimePluginSettings settings = new AnimePluginSettings ();  	string url = string.Format (@"http://{0}:{1}/JMMServerBinary"' settings.JMMServer_Address' settings.JMMServer_Port);  	BaseConfig.MyAnimeLog.Write ("JMM Server URL: " + url);  	BinaryMessageEncodingBindingElement encoding = new BinaryMessageEncodingBindingElement ();  	encoding.ReaderQuotas.MaxArrayLength = int.MaxValue;  	encoding.ReaderQuotas.MaxBytesPerRead = int.MaxValue;  	encoding.ReaderQuotas.MaxDepth = int.MaxValue;  	encoding.ReaderQuotas.MaxNameTableCharCount = int.MaxValue;  	encoding.ReaderQuotas.MaxStringContentLength = int.MaxValue;  	HttpTransportBindingElement transport = new HttpTransportBindingElement ();  	transport.MaxReceivedMessageSize = int.MaxValue;  	transport.MaxBufferPoolSize = int.MaxValue;  	transport.MaxBufferSize = int.MaxValue;  	transport.MaxReceivedMessageSize = int.MaxValue;  	Binding binding = new CustomBinding (encoding' transport);  	binding.SendTimeout = new TimeSpan (30' 0' 30);  	binding.ReceiveTimeout = new TimeSpan (30' 0' 30);  	binding.OpenTimeout = new TimeSpan (30' 0' 30);  	binding.CloseTimeout = new TimeSpan (30' 0' 30);  	EndpointAddress endpoint = new EndpointAddress (new Uri (url));  	var factory = new ChannelFactory<JMMServerBinary.IJMMServerChannel> (binding' endpoint);  	foreach (OperationDescription op in factory.Endpoint.Contract.Operations) {  		var dataContractBehavior = op.Behaviors.Find<DataContractSerializerOperationBehavior> ();  		if (dataContractBehavior != null) {  			dataContractBehavior.MaxItemsInObjectGraph = int.MaxValue;  		}  	}  	_clientBinaryHTTP = factory.CreateChannel ();  	// try connecting to see if the server is responding  	JMMServerBinary.Contract_ServerStatus status = JMMServerVM.Instance.clientBinaryHTTP.GetServerStatus ();  	ServerOnline = true;  	GetServerSettings ();  	RefreshImportFolders ();  	BaseConfig.MyAnimeLog.Write ("JMM Server Status: " + status.GeneralQueueState);  	return true;  }  catch (Exception ex) {  	//Utils.ShowErrorMessage(ex);  	BaseConfig.MyAnimeLog.Write (ex.ToString ());  	return false;  }  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: try {  	AnimePluginSettings settings = new AnimePluginSettings ();  	string url = string.Format (@"http://{0}:{1}/JMMServerBinary"' settings.JMMServer_Address' settings.JMMServer_Port);  	BaseConfig.MyAnimeLog.Write ("JMM Server URL: " + url);  	BinaryMessageEncodingBindingElement encoding = new BinaryMessageEncodingBindingElement ();  	encoding.ReaderQuotas.MaxArrayLength = int.MaxValue;  	encoding.ReaderQuotas.MaxBytesPerRead = int.MaxValue;  	encoding.ReaderQuotas.MaxDepth = int.MaxValue;  	encoding.ReaderQuotas.MaxNameTableCharCount = int.MaxValue;  	encoding.ReaderQuotas.MaxStringContentLength = int.MaxValue;  	HttpTransportBindingElement transport = new HttpTransportBindingElement ();  	transport.MaxReceivedMessageSize = int.MaxValue;  	transport.MaxBufferPoolSize = int.MaxValue;  	transport.MaxBufferSize = int.MaxValue;  	transport.MaxReceivedMessageSize = int.MaxValue;  	Binding binding = new CustomBinding (encoding' transport);  	binding.SendTimeout = new TimeSpan (30' 0' 30);  	binding.ReceiveTimeout = new TimeSpan (30' 0' 30);  	binding.OpenTimeout = new TimeSpan (30' 0' 30);  	binding.CloseTimeout = new TimeSpan (30' 0' 30);  	EndpointAddress endpoint = new EndpointAddress (new Uri (url));  	var factory = new ChannelFactory<JMMServerBinary.IJMMServerChannel> (binding' endpoint);  	foreach (OperationDescription op in factory.Endpoint.Contract.Operations) {  		var dataContractBehavior = op.Behaviors.Find<DataContractSerializerOperationBehavior> ();  		if (dataContractBehavior != null) {  			dataContractBehavior.MaxItemsInObjectGraph = int.MaxValue;  		}  	}  	_clientBinaryHTTP = factory.CreateChannel ();  	// try connecting to see if the server is responding  	JMMServerBinary.Contract_ServerStatus status = JMMServerVM.Instance.clientBinaryHTTP.GetServerStatus ();  	ServerOnline = true;  	GetServerSettings ();  	RefreshImportFolders ();  	BaseConfig.MyAnimeLog.Write ("JMM Server Status: " + status.GeneralQueueState);  	return true;  }  catch (Exception ex) {  	//Utils.ShowErrorMessage(ex);  	BaseConfig.MyAnimeLog.Write (ex.ToString ());  	return false;  }  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: binding.SendTimeout = new TimeSpan (30' 0' 30);  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: binding.SendTimeout = new TimeSpan (30' 0' 30);  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: binding.ReceiveTimeout = new TimeSpan (30' 0' 30);  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: binding.ReceiveTimeout = new TimeSpan (30' 0' 30);  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: binding.OpenTimeout = new TimeSpan (30' 0' 30);  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: binding.OpenTimeout = new TimeSpan (30' 0' 30);  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: binding.CloseTimeout = new TimeSpan (30' 0' 30);  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: binding.CloseTimeout = new TimeSpan (30' 0' 30);  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,PromptUserLogin,The following statement contains a magic number: if (CurrentUser != null)  	selectedLabel = selectedLabel - 2;  
Magic Number,MyAnimePlugin3.ViewModel,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerVM.cs,PromptUserLogin,The following statement contains a magic number: selectedLabel = selectedLabel - 2;  
Magic Number,MyAnimePlugin3.ViewModel,RecommendationVM,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\RecommendationVM.cs,Populate,The following statement contains a magic number: BasedOn_VoteValueFormatted = String.Format ("{0:0.0}"' (double)BasedOnVoteValue / (double)100);  
Magic Number,MyAnimePlugin3.Windows,ActorWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\ActorWindow.cs,OnClicked,The following statement contains a magic number: if (this.btnGetMissingInfo != null && control == this.btnGetMissingInfo) {  	MainWindow.ServerHelper.DownloadCharacterImagesForSeiyuu (seiyuu);  	setGUIProperty ("Status"' "Refreshing view...");  	this.btnGetMissingInfo.IsFocused = false;  	GUIControl.FocusControl (GetID' 50);  	return;  }  
Magic Number,MyAnimePlugin3.Windows,ActorWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\ActorWindow.cs,OnClicked,The following statement contains a magic number: GUIControl.FocusControl (GetID' 50);  
Magic Number,MyAnimePlugin3.Windows,AdminWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\AdminWindow.cs,ShowMoreOptionsMenu,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading ("Options");  	dlg.Add ("Scan Drop Folder(s)");  	dlg.Add ("Remove records without physical file");  	dlg.Add ("Sync Votes from AniDB");  	dlg.Add ("Sync MyList from AniDB");  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	BaseConfig.MyAnimeLog.Write ("dlg.SelectedLabel: {0}"' dlg.SelectedLabel.ToString ());  	switch (dlg.SelectedLabel) {  	case 0:  		JMMServerVM.Instance.clientBinaryHTTP.ScanDropFolders ();  		Utils.DialogMsg ("Done"' "Files have been queued for processing");  		m_Facade.Focus = true;  		return;  	case 1:  		JMMServerVM.Instance.clientBinaryHTTP.RemoveMissingFiles ();  		Utils.DialogMsg ("Done"' "Process is running on the server");  		m_Facade.Focus = true;  		return;  	case 2:  		JMMServerVM.Instance.clientBinaryHTTP.SyncVotes ();  		Utils.DialogMsg ("Done"' "Process is running on the server");  		m_Facade.Focus = true;  		return;  	case 3:  		JMMServerVM.Instance.clientBinaryHTTP.SyncMyList ();  		Utils.DialogMsg ("Done"' "Process is running on the server");  		m_Facade.Focus = true;  		return;  	default:  		//don't reopen dialog  		return;  	}  }  
Magic Number,MyAnimePlugin3.Windows,AdminWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\AdminWindow.cs,ShowMoreOptionsMenu,The following statement contains a magic number: while (true) {  	dlg.Reset ();  	dlg.SetHeading ("Options");  	dlg.Add ("Scan Drop Folder(s)");  	dlg.Add ("Remove records without physical file");  	dlg.Add ("Sync Votes from AniDB");  	dlg.Add ("Sync MyList from AniDB");  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	BaseConfig.MyAnimeLog.Write ("dlg.SelectedLabel: {0}"' dlg.SelectedLabel.ToString ());  	switch (dlg.SelectedLabel) {  	case 0:  		JMMServerVM.Instance.clientBinaryHTTP.ScanDropFolders ();  		Utils.DialogMsg ("Done"' "Files have been queued for processing");  		m_Facade.Focus = true;  		return;  	case 1:  		JMMServerVM.Instance.clientBinaryHTTP.RemoveMissingFiles ();  		Utils.DialogMsg ("Done"' "Process is running on the server");  		m_Facade.Focus = true;  		return;  	case 2:  		JMMServerVM.Instance.clientBinaryHTTP.SyncVotes ();  		Utils.DialogMsg ("Done"' "Process is running on the server");  		m_Facade.Focus = true;  		return;  	case 3:  		JMMServerVM.Instance.clientBinaryHTTP.SyncMyList ();  		Utils.DialogMsg ("Done"' "Process is running on the server");  		m_Facade.Focus = true;  		return;  	default:  		//don't reopen dialog  		return;  	}  }  
Magic Number,MyAnimePlugin3.Windows,AdminWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\AdminWindow.cs,ShowMoreOptionsMenu,The following statement contains a magic number: switch (dlg.SelectedLabel) {  case 0:  	JMMServerVM.Instance.clientBinaryHTTP.ScanDropFolders ();  	Utils.DialogMsg ("Done"' "Files have been queued for processing");  	m_Facade.Focus = true;  	return;  case 1:  	JMMServerVM.Instance.clientBinaryHTTP.RemoveMissingFiles ();  	Utils.DialogMsg ("Done"' "Process is running on the server");  	m_Facade.Focus = true;  	return;  case 2:  	JMMServerVM.Instance.clientBinaryHTTP.SyncVotes ();  	Utils.DialogMsg ("Done"' "Process is running on the server");  	m_Facade.Focus = true;  	return;  case 3:  	JMMServerVM.Instance.clientBinaryHTTP.SyncMyList ();  	Utils.DialogMsg ("Done"' "Process is running on the server");  	m_Facade.Focus = true;  	return;  default:  	//don't reopen dialog  	return;  }  
Magic Number,MyAnimePlugin3.Windows,AdminWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\AdminWindow.cs,ShowMoreOptionsMenu,The following statement contains a magic number: switch (dlg.SelectedLabel) {  case 0:  	JMMServerVM.Instance.clientBinaryHTTP.ScanDropFolders ();  	Utils.DialogMsg ("Done"' "Files have been queued for processing");  	m_Facade.Focus = true;  	return;  case 1:  	JMMServerVM.Instance.clientBinaryHTTP.RemoveMissingFiles ();  	Utils.DialogMsg ("Done"' "Process is running on the server");  	m_Facade.Focus = true;  	return;  case 2:  	JMMServerVM.Instance.clientBinaryHTTP.SyncVotes ();  	Utils.DialogMsg ("Done"' "Process is running on the server");  	m_Facade.Focus = true;  	return;  case 3:  	JMMServerVM.Instance.clientBinaryHTTP.SyncMyList ();  	Utils.DialogMsg ("Done"' "Process is running on the server");  	m_Facade.Focus = true;  	return;  default:  	//don't reopen dialog  	return;  }  
Magic Number,MyAnimePlugin3.Windows,AdminWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\AdminWindow.cs,OnShowContextMenu,The following statement contains a magic number: try {  	GUIListItem currentitem = this.m_Facade.SelectedListItem;  	if (currentitem == null)  		return;  	VideoLocalVM vid = currentitem.TVTag as VideoLocalVM;  	if (vid == null)  		return;  	GUIDialogMenu dlg = (GUIDialogMenu)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	dlg.Reset ();  	dlg.SetHeading ("File options");  	dlg.Add ("Play file");  	dlg.Add ("Rehash file");  	dlg.Add ("Ignore file");  	dlg.Add ("Delete file from disk");  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	if (dlg.SelectedId == 1) {  		MainWindow.vidHandler.ResumeOrPlay (vid);  		return;  	}  	if (dlg.SelectedId == 2) {  		JMMServerVM.Instance.clientBinaryHTTP.RehashFile (vid.VideoLocalID);  		Utils.DialogMsg ("Done"' "Action has been queued on server");  		return;  	}  	if (dlg.SelectedId == 3) {  		JMMServerVM.Instance.clientBinaryHTTP.SetIgnoreStatusOnFile (vid.VideoLocalID' true);  		RefreshUnlinkedFiles ();  		return;  	}  	if (dlg.SelectedId == 4) {  		if (!Utils.DialogConfirm ("Are you sure you want to delete this file?"))  			return;  		JMMServerVM.Instance.clientBinaryHTTP.DeleteVideoLocalAndFile (vid.VideoLocalID);  		RefreshUnlinkedFiles ();  	}  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write ("Error in menu: {0}"' ex);  }  
Magic Number,MyAnimePlugin3.Windows,AdminWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\AdminWindow.cs,OnShowContextMenu,The following statement contains a magic number: try {  	GUIListItem currentitem = this.m_Facade.SelectedListItem;  	if (currentitem == null)  		return;  	VideoLocalVM vid = currentitem.TVTag as VideoLocalVM;  	if (vid == null)  		return;  	GUIDialogMenu dlg = (GUIDialogMenu)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	dlg.Reset ();  	dlg.SetHeading ("File options");  	dlg.Add ("Play file");  	dlg.Add ("Rehash file");  	dlg.Add ("Ignore file");  	dlg.Add ("Delete file from disk");  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	if (dlg.SelectedId == 1) {  		MainWindow.vidHandler.ResumeOrPlay (vid);  		return;  	}  	if (dlg.SelectedId == 2) {  		JMMServerVM.Instance.clientBinaryHTTP.RehashFile (vid.VideoLocalID);  		Utils.DialogMsg ("Done"' "Action has been queued on server");  		return;  	}  	if (dlg.SelectedId == 3) {  		JMMServerVM.Instance.clientBinaryHTTP.SetIgnoreStatusOnFile (vid.VideoLocalID' true);  		RefreshUnlinkedFiles ();  		return;  	}  	if (dlg.SelectedId == 4) {  		if (!Utils.DialogConfirm ("Are you sure you want to delete this file?"))  			return;  		JMMServerVM.Instance.clientBinaryHTTP.DeleteVideoLocalAndFile (vid.VideoLocalID);  		RefreshUnlinkedFiles ();  	}  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write ("Error in menu: {0}"' ex);  }  
Magic Number,MyAnimePlugin3.Windows,AdminWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\AdminWindow.cs,OnShowContextMenu,The following statement contains a magic number: try {  	GUIListItem currentitem = this.m_Facade.SelectedListItem;  	if (currentitem == null)  		return;  	VideoLocalVM vid = currentitem.TVTag as VideoLocalVM;  	if (vid == null)  		return;  	GUIDialogMenu dlg = (GUIDialogMenu)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	dlg.Reset ();  	dlg.SetHeading ("File options");  	dlg.Add ("Play file");  	dlg.Add ("Rehash file");  	dlg.Add ("Ignore file");  	dlg.Add ("Delete file from disk");  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	if (dlg.SelectedId == 1) {  		MainWindow.vidHandler.ResumeOrPlay (vid);  		return;  	}  	if (dlg.SelectedId == 2) {  		JMMServerVM.Instance.clientBinaryHTTP.RehashFile (vid.VideoLocalID);  		Utils.DialogMsg ("Done"' "Action has been queued on server");  		return;  	}  	if (dlg.SelectedId == 3) {  		JMMServerVM.Instance.clientBinaryHTTP.SetIgnoreStatusOnFile (vid.VideoLocalID' true);  		RefreshUnlinkedFiles ();  		return;  	}  	if (dlg.SelectedId == 4) {  		if (!Utils.DialogConfirm ("Are you sure you want to delete this file?"))  			return;  		JMMServerVM.Instance.clientBinaryHTTP.DeleteVideoLocalAndFile (vid.VideoLocalID);  		RefreshUnlinkedFiles ();  	}  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write ("Error in menu: {0}"' ex);  }  
Magic Number,MyAnimePlugin3.Windows,AdminWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\AdminWindow.cs,OnShowContextMenu,The following statement contains a magic number: if (dlg.SelectedId == 2) {  	JMMServerVM.Instance.clientBinaryHTTP.RehashFile (vid.VideoLocalID);  	Utils.DialogMsg ("Done"' "Action has been queued on server");  	return;  }  
Magic Number,MyAnimePlugin3.Windows,AdminWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\AdminWindow.cs,OnShowContextMenu,The following statement contains a magic number: if (dlg.SelectedId == 3) {  	JMMServerVM.Instance.clientBinaryHTTP.SetIgnoreStatusOnFile (vid.VideoLocalID' true);  	RefreshUnlinkedFiles ();  	return;  }  
Magic Number,MyAnimePlugin3.Windows,AdminWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\AdminWindow.cs,OnShowContextMenu,The following statement contains a magic number: if (dlg.SelectedId == 4) {  	if (!Utils.DialogConfirm ("Are you sure you want to delete this file?"))  		return;  	JMMServerVM.Instance.clientBinaryHTTP.DeleteVideoLocalAndFile (vid.VideoLocalID);  	RefreshUnlinkedFiles ();  }  
Magic Number,MyAnimePlugin3.Windows,AnimeInfoWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\AnimeInfoWindow.cs,FormatTextOtherTitles,The following statement contains a magic number: foreach (string title in MainAnime.Titles) {  	if (i == 4)  		break;  	if (!string.IsNullOrEmpty (ret))  		ret += " **";  	ret += title;  	i++;  }  
Magic Number,MyAnimePlugin3.Windows,AnimeInfoWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\AnimeInfoWindow.cs,FormatTextOtherTitles,The following statement contains a magic number: if (i == 4)  	break;  
Magic Number,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,LoadData,The following statement contains a magic number: monthMinusTwo = monthNow.AddMonths (-2);  
Magic Number,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,LoadData,The following statement contains a magic number: monthMinusThree = monthNow.AddMonths (-3);  
Magic Number,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,LoadData,The following statement contains a magic number: monthPlusTwo = monthNow.AddMonths (2);  
Magic Number,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,LoadData,The following statement contains a magic number: monthPlusThree = monthNow.AddMonths (3);  
Magic Number,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,LoadData,The following statement contains a magic number: switch (MainWindow.CurrentCalendarButton) {  case 3:  	btnCurrentMinusOne.Focus = true;  	break;  case 4:  	btnCurrentPlusOne.Focus = true;  	break;  }  
Magic Number,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,LoadData,The following statement contains a magic number: switch (MainWindow.CurrentCalendarButton) {  case 3:  	btnCurrentMinusOne.Focus = true;  	break;  case 4:  	btnCurrentPlusOne.Focus = true;  	break;  }  
Magic Number,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,OnShowContextMenu,The following statement contains a magic number: try {  	GUIDialogMenu dlg = (GUIDialogMenu)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	if (dlg == null)  		return;  	dlg.Reset ();  	dlg.SetHeading ("Calendar");  	dlg.Add ("Search for Torrents");  	dlg.Add ("Bookmark this Anime");  	dlg.Add ("Create Series for Anime");  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	switch (dlg.SelectedId) {  	case 1:  		AniDB_AnimeVM anime2 = null;  		if ((anime2 = this.m_Facade.SelectedListItem.TVTag as AniDB_AnimeVM) != null) {  			DownloadHelper.SearchAnime (anime2);  		}  		break;  	case 2:  		AniDB_AnimeVM anime3 = null;  		if ((anime3 = this.m_Facade.SelectedListItem.TVTag as AniDB_AnimeVM) != null) {  			BookmarkedAnimeVM bookmark = new BookmarkedAnimeVM ();  			bookmark.AnimeID = anime3.AnimeID;  			bookmark.Downloading = 0;  			bookmark.Notes = "";  			bookmark.Priority = 1;  			if (bookmark.Save ()) {  				Utils.DialogMsg ("Success"' "Bookmark Created");  			}  		}  		break;  	case 3:  		AniDB_AnimeVM anime4 = null;  		if ((anime4 = this.m_Facade.SelectedListItem.TVTag as AniDB_AnimeVM) != null) {  			JMMServerBinary.Contract_AnimeSeries_SaveResponse resp = JMMServerVM.Instance.clientBinaryHTTP.CreateSeriesFromAnime (anime4.AnimeID' null' JMMServerVM.Instance.CurrentUser.JMMUserID);  			if (string.IsNullOrEmpty (resp.ErrorMessage))  				Utils.DialogMsg ("Success"' "Series Created");  			else  				Utils.DialogMsg ("Error"' resp.ErrorMessage);  		}  		break;  	}  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write ("Error in menu: {0}"' ex);  }  
Magic Number,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,OnShowContextMenu,The following statement contains a magic number: try {  	GUIDialogMenu dlg = (GUIDialogMenu)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	if (dlg == null)  		return;  	dlg.Reset ();  	dlg.SetHeading ("Calendar");  	dlg.Add ("Search for Torrents");  	dlg.Add ("Bookmark this Anime");  	dlg.Add ("Create Series for Anime");  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	switch (dlg.SelectedId) {  	case 1:  		AniDB_AnimeVM anime2 = null;  		if ((anime2 = this.m_Facade.SelectedListItem.TVTag as AniDB_AnimeVM) != null) {  			DownloadHelper.SearchAnime (anime2);  		}  		break;  	case 2:  		AniDB_AnimeVM anime3 = null;  		if ((anime3 = this.m_Facade.SelectedListItem.TVTag as AniDB_AnimeVM) != null) {  			BookmarkedAnimeVM bookmark = new BookmarkedAnimeVM ();  			bookmark.AnimeID = anime3.AnimeID;  			bookmark.Downloading = 0;  			bookmark.Notes = "";  			bookmark.Priority = 1;  			if (bookmark.Save ()) {  				Utils.DialogMsg ("Success"' "Bookmark Created");  			}  		}  		break;  	case 3:  		AniDB_AnimeVM anime4 = null;  		if ((anime4 = this.m_Facade.SelectedListItem.TVTag as AniDB_AnimeVM) != null) {  			JMMServerBinary.Contract_AnimeSeries_SaveResponse resp = JMMServerVM.Instance.clientBinaryHTTP.CreateSeriesFromAnime (anime4.AnimeID' null' JMMServerVM.Instance.CurrentUser.JMMUserID);  			if (string.IsNullOrEmpty (resp.ErrorMessage))  				Utils.DialogMsg ("Success"' "Series Created");  			else  				Utils.DialogMsg ("Error"' resp.ErrorMessage);  		}  		break;  	}  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write ("Error in menu: {0}"' ex);  }  
Magic Number,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	AniDB_AnimeVM anime2 = null;  	if ((anime2 = this.m_Facade.SelectedListItem.TVTag as AniDB_AnimeVM) != null) {  		DownloadHelper.SearchAnime (anime2);  	}  	break;  case 2:  	AniDB_AnimeVM anime3 = null;  	if ((anime3 = this.m_Facade.SelectedListItem.TVTag as AniDB_AnimeVM) != null) {  		BookmarkedAnimeVM bookmark = new BookmarkedAnimeVM ();  		bookmark.AnimeID = anime3.AnimeID;  		bookmark.Downloading = 0;  		bookmark.Notes = "";  		bookmark.Priority = 1;  		if (bookmark.Save ()) {  			Utils.DialogMsg ("Success"' "Bookmark Created");  		}  	}  	break;  case 3:  	AniDB_AnimeVM anime4 = null;  	if ((anime4 = this.m_Facade.SelectedListItem.TVTag as AniDB_AnimeVM) != null) {  		JMMServerBinary.Contract_AnimeSeries_SaveResponse resp = JMMServerVM.Instance.clientBinaryHTTP.CreateSeriesFromAnime (anime4.AnimeID' null' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (string.IsNullOrEmpty (resp.ErrorMessage))  			Utils.DialogMsg ("Success"' "Series Created");  		else  			Utils.DialogMsg ("Error"' resp.ErrorMessage);  	}  	break;  }  
Magic Number,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId) {  case 1:  	AniDB_AnimeVM anime2 = null;  	if ((anime2 = this.m_Facade.SelectedListItem.TVTag as AniDB_AnimeVM) != null) {  		DownloadHelper.SearchAnime (anime2);  	}  	break;  case 2:  	AniDB_AnimeVM anime3 = null;  	if ((anime3 = this.m_Facade.SelectedListItem.TVTag as AniDB_AnimeVM) != null) {  		BookmarkedAnimeVM bookmark = new BookmarkedAnimeVM ();  		bookmark.AnimeID = anime3.AnimeID;  		bookmark.Downloading = 0;  		bookmark.Notes = "";  		bookmark.Priority = 1;  		if (bookmark.Save ()) {  			Utils.DialogMsg ("Success"' "Bookmark Created");  		}  	}  	break;  case 3:  	AniDB_AnimeVM anime4 = null;  	if ((anime4 = this.m_Facade.SelectedListItem.TVTag as AniDB_AnimeVM) != null) {  		JMMServerBinary.Contract_AnimeSeries_SaveResponse resp = JMMServerVM.Instance.clientBinaryHTTP.CreateSeriesFromAnime (anime4.AnimeID' null' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (string.IsNullOrEmpty (resp.ErrorMessage))  			Utils.DialogMsg ("Success"' "Series Created");  		else  			Utils.DialogMsg ("Error"' resp.ErrorMessage);  	}  	break;  }  
Magic Number,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,OnClicked,The following statement contains a magic number: if (control == this.btnCurrentMinusOne) {  	MainWindow.CurrentCalendarMonth = monthMinusOne.Month;  	MainWindow.CurrentCalendarYear = monthMinusOne.Year;  	MainWindow.CurrentCalendarButton = 3;  	GUIWindowManager.CloseCurrentWindow ();  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.CALENDAR' false);  	btnCurrentPlusOne.Focus = false;  	btnCurrentMinusOne.Focus = false;  	return;  }  
Magic Number,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,OnClicked,The following statement contains a magic number: MainWindow.CurrentCalendarButton = 3;  
Magic Number,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,OnClicked,The following statement contains a magic number: if (control == this.btnCurrentMinusTwo) {  	MainWindow.CurrentCalendarMonth = monthMinusTwo.Month;  	MainWindow.CurrentCalendarYear = monthMinusTwo.Year;  	MainWindow.CurrentCalendarButton = 2;  	GUIWindowManager.CloseCurrentWindow ();  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.CALENDAR' false);  	return;  }  
Magic Number,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,OnClicked,The following statement contains a magic number: MainWindow.CurrentCalendarButton = 2;  
Magic Number,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,OnClicked,The following statement contains a magic number: if (control == this.btnCurrentPlusOne) {  	MainWindow.CurrentCalendarMonth = monthPlusOne.Month;  	MainWindow.CurrentCalendarYear = monthPlusOne.Year;  	MainWindow.CurrentCalendarButton = 4;  	GUIWindowManager.CloseCurrentWindow ();  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.CALENDAR' false);  	btnCurrentPlusOne.Focus = false;  	btnCurrentMinusOne.Focus = false;  	return;  }  
Magic Number,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,OnClicked,The following statement contains a magic number: MainWindow.CurrentCalendarButton = 4;  
Magic Number,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,OnClicked,The following statement contains a magic number: if (control == this.btnCurrentPlusTwo) {  	MainWindow.CurrentCalendarMonth = monthPlusTwo.Month;  	MainWindow.CurrentCalendarYear = monthPlusTwo.Year;  	MainWindow.CurrentCalendarButton = 5;  	GUIWindowManager.CloseCurrentWindow ();  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.CALENDAR' false);  	return;  }  
Magic Number,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,OnClicked,The following statement contains a magic number: MainWindow.CurrentCalendarButton = 5;  
Magic Number,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,OnClicked,The following statement contains a magic number: if (control == this.btnCurrentPlusThree) {  	MainWindow.CurrentCalendarMonth = monthPlusThree.Month;  	MainWindow.CurrentCalendarYear = monthPlusThree.Year;  	MainWindow.CurrentCalendarButton = 6;  	GUIWindowManager.CloseCurrentWindow ();  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.CALENDAR' false);  	return;  }  
Magic Number,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,OnClicked,The following statement contains a magic number: MainWindow.CurrentCalendarButton = 6;  
Magic Number,MyAnimePlugin3.Windows,CharWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CharWindow.cs,OnClicked,The following statement contains a magic number: if (this.btnGetMissingInfo != null && control == this.btnGetMissingInfo) {  	JMMServerVM.Instance.clientBinaryHTTP.UpdateAnimeData (mainAnime.AnimeID);  	setGUIProperty ("Character.Status"' "Request sent to server' please refresh view...");  	this.btnGetMissingInfo.IsFocused = false;  	GUIControl.FocusControl (GetID' 50);  	return;  }  
Magic Number,MyAnimePlugin3.Windows,CharWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CharWindow.cs,OnClicked,The following statement contains a magic number: GUIControl.FocusControl (GetID' 50);  
Magic Number,MyAnimePlugin3.Windows,CharWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CharWindow.cs,OnClicked,The following statement contains a magic number: if (this.btnRefreshView != null && control == this.btnRefreshView) {  	MainWindow.ServerHelper.DownloadCharacterCreatorImages (mainAnime);  	setGUIProperty ("Character.Status"' "Refreshing view...");  	this.btnRefreshView.IsFocused = false;  	GUIControl.FocusControl (GetID' 50);  	return;  }  
Magic Number,MyAnimePlugin3.Windows,CharWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CharWindow.cs,OnClicked,The following statement contains a magic number: GUIControl.FocusControl (GetID' 50);  
Magic Number,MyAnimePlugin3.Windows,ContinueWatchingWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\ContinueWatchingWindow.cs,OnShowContextMenu,The following statement contains a magic number: if (currentitem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  	AnimeEpisodeVM ep = currentitem.TVTag as AnimeEpisodeVM;  	if (ep != null) {  		GUIDialogMenu dlg = (GUIDialogMenu)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		if (dlg == null)  			return;  		dlg.Reset ();  		dlg.SetHeading (ep.EpisodeNumberAndName);  		dlg.Add ("Mark as Watched");  		dlg.Add ("Play Previous Episode");  		dlg.Add ("Go To Episode List");  		dlg.Add ("View Series Info");  		dlg.DoModal (GUIWindowManager.ActiveWindow);  		switch (dlg.SelectedLabel) {  		case 0:  			ep.ToggleWatchedStatus (true);  			LoadData ();  			break;  		case 1:  			if (ep.AnimeSeries == null)  				return;  			JMMServerBinary.Contract_AnimeEpisode contract = JMMServerVM.Instance.clientBinaryHTTP.GetPreviousEpisodeForUnwatched (ep.AnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  			if (contract == null) {  				Utils.DialogMsg ("Error"' "Previous episode not found");  				return;  			}  			AnimeEpisodeVM epPrev = new AnimeEpisodeVM (contract);  			MainWindow.vidHandler.ResumeOrPlay (epPrev);  			break;  		case 2:  			if (ep.AnimeSeries == null)  				return;  			MainWindow.curGroupFilter = GroupFilterHelper.AllGroupsFilter;  			// find the group for this series  			AnimeGroupVM grp = JMMServerHelper.GetGroup (ep.AnimeSeries.AnimeGroupID);  			if (grp == null) {  				BaseConfig.MyAnimeLog.Write ("Group not found");  				return;  			}  			MainWindow.curAnimeGroup = grp;  			MainWindow.curAnimeGroupViewed = grp;  			MainWindow.curAnimeSeries = ep.AnimeSeries;  			bool foundEpType = false;  			foreach (AnimeEpisodeTypeVM anEpType in ep.AnimeSeries.EpisodeTypesToDisplay) {  				if (anEpType.EpisodeType == enEpisodeType.Episode) {  					MainWindow.curAnimeEpisodeType = anEpType;  					foundEpType = true;  					break;  				}  			}  			if (!foundEpType)  				return;  			MainWindow.listLevel = Listlevel.Episode;  			GUIWindowManager.ActivateWindow (Constants.WindowIDs.MAIN' false);  			break;  		case 3:  			if (ep.AnimeSeries == null)  				return;  			MainWindow.GlobalSeriesID = ep.AnimeSeries.AnimeSeriesID.Value;  			GUIWindowManager.ActivateWindow (Constants.WindowIDs.ANIMEINFO' false);  			break;  		}  	}  }  
Magic Number,MyAnimePlugin3.Windows,ContinueWatchingWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\ContinueWatchingWindow.cs,OnShowContextMenu,The following statement contains a magic number: if (currentitem.TVTag.GetType () == typeof(AnimeEpisodeVM)) {  	AnimeEpisodeVM ep = currentitem.TVTag as AnimeEpisodeVM;  	if (ep != null) {  		GUIDialogMenu dlg = (GUIDialogMenu)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		if (dlg == null)  			return;  		dlg.Reset ();  		dlg.SetHeading (ep.EpisodeNumberAndName);  		dlg.Add ("Mark as Watched");  		dlg.Add ("Play Previous Episode");  		dlg.Add ("Go To Episode List");  		dlg.Add ("View Series Info");  		dlg.DoModal (GUIWindowManager.ActiveWindow);  		switch (dlg.SelectedLabel) {  		case 0:  			ep.ToggleWatchedStatus (true);  			LoadData ();  			break;  		case 1:  			if (ep.AnimeSeries == null)  				return;  			JMMServerBinary.Contract_AnimeEpisode contract = JMMServerVM.Instance.clientBinaryHTTP.GetPreviousEpisodeForUnwatched (ep.AnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  			if (contract == null) {  				Utils.DialogMsg ("Error"' "Previous episode not found");  				return;  			}  			AnimeEpisodeVM epPrev = new AnimeEpisodeVM (contract);  			MainWindow.vidHandler.ResumeOrPlay (epPrev);  			break;  		case 2:  			if (ep.AnimeSeries == null)  				return;  			MainWindow.curGroupFilter = GroupFilterHelper.AllGroupsFilter;  			// find the group for this series  			AnimeGroupVM grp = JMMServerHelper.GetGroup (ep.AnimeSeries.AnimeGroupID);  			if (grp == null) {  				BaseConfig.MyAnimeLog.Write ("Group not found");  				return;  			}  			MainWindow.curAnimeGroup = grp;  			MainWindow.curAnimeGroupViewed = grp;  			MainWindow.curAnimeSeries = ep.AnimeSeries;  			bool foundEpType = false;  			foreach (AnimeEpisodeTypeVM anEpType in ep.AnimeSeries.EpisodeTypesToDisplay) {  				if (anEpType.EpisodeType == enEpisodeType.Episode) {  					MainWindow.curAnimeEpisodeType = anEpType;  					foundEpType = true;  					break;  				}  			}  			if (!foundEpType)  				return;  			MainWindow.listLevel = Listlevel.Episode;  			GUIWindowManager.ActivateWindow (Constants.WindowIDs.MAIN' false);  			break;  		case 3:  			if (ep.AnimeSeries == null)  				return;  			MainWindow.GlobalSeriesID = ep.AnimeSeries.AnimeSeriesID.Value;  			GUIWindowManager.ActivateWindow (Constants.WindowIDs.ANIMEINFO' false);  			break;  		}  	}  }  
Magic Number,MyAnimePlugin3.Windows,ContinueWatchingWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\ContinueWatchingWindow.cs,OnShowContextMenu,The following statement contains a magic number: if (ep != null) {  	GUIDialogMenu dlg = (GUIDialogMenu)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	if (dlg == null)  		return;  	dlg.Reset ();  	dlg.SetHeading (ep.EpisodeNumberAndName);  	dlg.Add ("Mark as Watched");  	dlg.Add ("Play Previous Episode");  	dlg.Add ("Go To Episode List");  	dlg.Add ("View Series Info");  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	switch (dlg.SelectedLabel) {  	case 0:  		ep.ToggleWatchedStatus (true);  		LoadData ();  		break;  	case 1:  		if (ep.AnimeSeries == null)  			return;  		JMMServerBinary.Contract_AnimeEpisode contract = JMMServerVM.Instance.clientBinaryHTTP.GetPreviousEpisodeForUnwatched (ep.AnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract == null) {  			Utils.DialogMsg ("Error"' "Previous episode not found");  			return;  		}  		AnimeEpisodeVM epPrev = new AnimeEpisodeVM (contract);  		MainWindow.vidHandler.ResumeOrPlay (epPrev);  		break;  	case 2:  		if (ep.AnimeSeries == null)  			return;  		MainWindow.curGroupFilter = GroupFilterHelper.AllGroupsFilter;  		// find the group for this series  		AnimeGroupVM grp = JMMServerHelper.GetGroup (ep.AnimeSeries.AnimeGroupID);  		if (grp == null) {  			BaseConfig.MyAnimeLog.Write ("Group not found");  			return;  		}  		MainWindow.curAnimeGroup = grp;  		MainWindow.curAnimeGroupViewed = grp;  		MainWindow.curAnimeSeries = ep.AnimeSeries;  		bool foundEpType = false;  		foreach (AnimeEpisodeTypeVM anEpType in ep.AnimeSeries.EpisodeTypesToDisplay) {  			if (anEpType.EpisodeType == enEpisodeType.Episode) {  				MainWindow.curAnimeEpisodeType = anEpType;  				foundEpType = true;  				break;  			}  		}  		if (!foundEpType)  			return;  		MainWindow.listLevel = Listlevel.Episode;  		GUIWindowManager.ActivateWindow (Constants.WindowIDs.MAIN' false);  		break;  	case 3:  		if (ep.AnimeSeries == null)  			return;  		MainWindow.GlobalSeriesID = ep.AnimeSeries.AnimeSeriesID.Value;  		GUIWindowManager.ActivateWindow (Constants.WindowIDs.ANIMEINFO' false);  		break;  	}  }  
Magic Number,MyAnimePlugin3.Windows,ContinueWatchingWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\ContinueWatchingWindow.cs,OnShowContextMenu,The following statement contains a magic number: if (ep != null) {  	GUIDialogMenu dlg = (GUIDialogMenu)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	if (dlg == null)  		return;  	dlg.Reset ();  	dlg.SetHeading (ep.EpisodeNumberAndName);  	dlg.Add ("Mark as Watched");  	dlg.Add ("Play Previous Episode");  	dlg.Add ("Go To Episode List");  	dlg.Add ("View Series Info");  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	switch (dlg.SelectedLabel) {  	case 0:  		ep.ToggleWatchedStatus (true);  		LoadData ();  		break;  	case 1:  		if (ep.AnimeSeries == null)  			return;  		JMMServerBinary.Contract_AnimeEpisode contract = JMMServerVM.Instance.clientBinaryHTTP.GetPreviousEpisodeForUnwatched (ep.AnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (contract == null) {  			Utils.DialogMsg ("Error"' "Previous episode not found");  			return;  		}  		AnimeEpisodeVM epPrev = new AnimeEpisodeVM (contract);  		MainWindow.vidHandler.ResumeOrPlay (epPrev);  		break;  	case 2:  		if (ep.AnimeSeries == null)  			return;  		MainWindow.curGroupFilter = GroupFilterHelper.AllGroupsFilter;  		// find the group for this series  		AnimeGroupVM grp = JMMServerHelper.GetGroup (ep.AnimeSeries.AnimeGroupID);  		if (grp == null) {  			BaseConfig.MyAnimeLog.Write ("Group not found");  			return;  		}  		MainWindow.curAnimeGroup = grp;  		MainWindow.curAnimeGroupViewed = grp;  		MainWindow.curAnimeSeries = ep.AnimeSeries;  		bool foundEpType = false;  		foreach (AnimeEpisodeTypeVM anEpType in ep.AnimeSeries.EpisodeTypesToDisplay) {  			if (anEpType.EpisodeType == enEpisodeType.Episode) {  				MainWindow.curAnimeEpisodeType = anEpType;  				foundEpType = true;  				break;  			}  		}  		if (!foundEpType)  			return;  		MainWindow.listLevel = Listlevel.Episode;  		GUIWindowManager.ActivateWindow (Constants.WindowIDs.MAIN' false);  		break;  	case 3:  		if (ep.AnimeSeries == null)  			return;  		MainWindow.GlobalSeriesID = ep.AnimeSeries.AnimeSeriesID.Value;  		GUIWindowManager.ActivateWindow (Constants.WindowIDs.ANIMEINFO' false);  		break;  	}  }  
Magic Number,MyAnimePlugin3.Windows,ContinueWatchingWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\ContinueWatchingWindow.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedLabel) {  case 0:  	ep.ToggleWatchedStatus (true);  	LoadData ();  	break;  case 1:  	if (ep.AnimeSeries == null)  		return;  	JMMServerBinary.Contract_AnimeEpisode contract = JMMServerVM.Instance.clientBinaryHTTP.GetPreviousEpisodeForUnwatched (ep.AnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (contract == null) {  		Utils.DialogMsg ("Error"' "Previous episode not found");  		return;  	}  	AnimeEpisodeVM epPrev = new AnimeEpisodeVM (contract);  	MainWindow.vidHandler.ResumeOrPlay (epPrev);  	break;  case 2:  	if (ep.AnimeSeries == null)  		return;  	MainWindow.curGroupFilter = GroupFilterHelper.AllGroupsFilter;  	// find the group for this series  	AnimeGroupVM grp = JMMServerHelper.GetGroup (ep.AnimeSeries.AnimeGroupID);  	if (grp == null) {  		BaseConfig.MyAnimeLog.Write ("Group not found");  		return;  	}  	MainWindow.curAnimeGroup = grp;  	MainWindow.curAnimeGroupViewed = grp;  	MainWindow.curAnimeSeries = ep.AnimeSeries;  	bool foundEpType = false;  	foreach (AnimeEpisodeTypeVM anEpType in ep.AnimeSeries.EpisodeTypesToDisplay) {  		if (anEpType.EpisodeType == enEpisodeType.Episode) {  			MainWindow.curAnimeEpisodeType = anEpType;  			foundEpType = true;  			break;  		}  	}  	if (!foundEpType)  		return;  	MainWindow.listLevel = Listlevel.Episode;  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.MAIN' false);  	break;  case 3:  	if (ep.AnimeSeries == null)  		return;  	MainWindow.GlobalSeriesID = ep.AnimeSeries.AnimeSeriesID.Value;  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.ANIMEINFO' false);  	break;  }  
Magic Number,MyAnimePlugin3.Windows,ContinueWatchingWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\ContinueWatchingWindow.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedLabel) {  case 0:  	ep.ToggleWatchedStatus (true);  	LoadData ();  	break;  case 1:  	if (ep.AnimeSeries == null)  		return;  	JMMServerBinary.Contract_AnimeEpisode contract = JMMServerVM.Instance.clientBinaryHTTP.GetPreviousEpisodeForUnwatched (ep.AnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (contract == null) {  		Utils.DialogMsg ("Error"' "Previous episode not found");  		return;  	}  	AnimeEpisodeVM epPrev = new AnimeEpisodeVM (contract);  	MainWindow.vidHandler.ResumeOrPlay (epPrev);  	break;  case 2:  	if (ep.AnimeSeries == null)  		return;  	MainWindow.curGroupFilter = GroupFilterHelper.AllGroupsFilter;  	// find the group for this series  	AnimeGroupVM grp = JMMServerHelper.GetGroup (ep.AnimeSeries.AnimeGroupID);  	if (grp == null) {  		BaseConfig.MyAnimeLog.Write ("Group not found");  		return;  	}  	MainWindow.curAnimeGroup = grp;  	MainWindow.curAnimeGroupViewed = grp;  	MainWindow.curAnimeSeries = ep.AnimeSeries;  	bool foundEpType = false;  	foreach (AnimeEpisodeTypeVM anEpType in ep.AnimeSeries.EpisodeTypesToDisplay) {  		if (anEpType.EpisodeType == enEpisodeType.Episode) {  			MainWindow.curAnimeEpisodeType = anEpType;  			foundEpType = true;  			break;  		}  	}  	if (!foundEpType)  		return;  	MainWindow.listLevel = Listlevel.Episode;  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.MAIN' false);  	break;  case 3:  	if (ep.AnimeSeries == null)  		return;  	MainWindow.GlobalSeriesID = ep.AnimeSeries.AnimeSeriesID.Value;  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.ANIMEINFO' false);  	break;  }  
Magic Number,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowSearchResults,The following statement contains a magic number: foreach (TorrentLink link in results) {  	GUIListItem item = null;  	item = new GUIListItem ();  	string tname = link.TorrentName;  	if (tname.Length > 50)  		tname = tname.Substring (0' 50) + "...";  	item.Label = string.Format ("({0}) {1} ({2})"' link.Source' tname' link.Size);  	item.TVTag = link;  	m_Facade.Add (item);  	BaseConfig.MyAnimeLog.Write ("TORRENT: " + item.Label);  }  
Magic Number,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowSearchResults,The following statement contains a magic number: foreach (TorrentLink link in results) {  	GUIListItem item = null;  	item = new GUIListItem ();  	string tname = link.TorrentName;  	if (tname.Length > 50)  		tname = tname.Substring (0' 50) + "...";  	item.Label = string.Format ("({0}) {1} ({2})"' link.Source' tname' link.Size);  	item.TVTag = link;  	m_Facade.Add (item);  	BaseConfig.MyAnimeLog.Write ("TORRENT: " + item.Label);  }  
Magic Number,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowSearchResults,The following statement contains a magic number: if (tname.Length > 50)  	tname = tname.Substring (0' 50) + "...";  
Magic Number,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowSearchResults,The following statement contains a magic number: if (tname.Length > 50)  	tname = tname.Substring (0' 50) + "...";  
Magic Number,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowSearchResults,The following statement contains a magic number: tname = tname.Substring (0' 50) + "...";  
Magic Number,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowContextMenuSearch,The following statement contains a magic number: switch (dlg.SelectedLabel) {  case 0:  	if (torLink != null) {  		MainWindow.uTorrent.AddTorrentFromURL (torLink.TorrentDownloadLink);  		LoadUTorrentListAsync ();  	}  	break;  case 1:  	string criteria = "";  	if (Utils.DialogText (ref criteria' GetID)) {  		MainWindow.currentDownloadSearch = new DownloadSearchCriteria (DownloadSearchType.Manual' criteria);  		PerformTorrentSearchAsync ();  	}  	break;  case 2:  	ShowRecentSearches ();  	break;  case 3:  	MainWindow.downloadSearchHistory.Clear ();  	MainWindow.downloadSearchResultsHistory.Clear ();  	setGUIProperty ("Search.ResultDescription"' "-");  	setGUIProperty ("Search.Summary"' "-");  	if (dummyPageSearch.Visible)  		m_Facade.Clear ();  	break;  }  
Magic Number,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowContextMenuSearch,The following statement contains a magic number: switch (dlg.SelectedLabel) {  case 0:  	if (torLink != null) {  		MainWindow.uTorrent.AddTorrentFromURL (torLink.TorrentDownloadLink);  		LoadUTorrentListAsync ();  	}  	break;  case 1:  	string criteria = "";  	if (Utils.DialogText (ref criteria' GetID)) {  		MainWindow.currentDownloadSearch = new DownloadSearchCriteria (DownloadSearchType.Manual' criteria);  		PerformTorrentSearchAsync ();  	}  	break;  case 2:  	ShowRecentSearches ();  	break;  case 3:  	MainWindow.downloadSearchHistory.Clear ();  	MainWindow.downloadSearchResultsHistory.Clear ();  	setGUIProperty ("Search.ResultDescription"' "-");  	setGUIProperty ("Search.Summary"' "-");  	if (dummyPageSearch.Visible)  		m_Facade.Clear ();  	break;  }  
Magic Number,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowBrowseSources,The following statement contains a magic number: switch (dlg.SelectedLabel) {  case 0:  	ShowContextMenuBrowse (torLink);  	return;  case 1:  	curBrowseSource = TorrentSource.AnimeSuki;  	break;  case 2:  	curBrowseSource = TorrentSource.BakaUpdates;  	break;  case 3:  	curBrowseSource = TorrentSource.Nyaa;  	break;  case 4:  	curBrowseSource = TorrentSource.TokyoToshokan;  	break;  case 5:  	curBrowseSource = TorrentSource.BakaBT;  	break;  case 6:  	curBrowseSource = TorrentSource.AnimeBytes;  	break;  }  
Magic Number,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowBrowseSources,The following statement contains a magic number: switch (dlg.SelectedLabel) {  case 0:  	ShowContextMenuBrowse (torLink);  	return;  case 1:  	curBrowseSource = TorrentSource.AnimeSuki;  	break;  case 2:  	curBrowseSource = TorrentSource.BakaUpdates;  	break;  case 3:  	curBrowseSource = TorrentSource.Nyaa;  	break;  case 4:  	curBrowseSource = TorrentSource.TokyoToshokan;  	break;  case 5:  	curBrowseSource = TorrentSource.BakaBT;  	break;  case 6:  	curBrowseSource = TorrentSource.AnimeBytes;  	break;  }  
Magic Number,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowBrowseSources,The following statement contains a magic number: switch (dlg.SelectedLabel) {  case 0:  	ShowContextMenuBrowse (torLink);  	return;  case 1:  	curBrowseSource = TorrentSource.AnimeSuki;  	break;  case 2:  	curBrowseSource = TorrentSource.BakaUpdates;  	break;  case 3:  	curBrowseSource = TorrentSource.Nyaa;  	break;  case 4:  	curBrowseSource = TorrentSource.TokyoToshokan;  	break;  case 5:  	curBrowseSource = TorrentSource.BakaBT;  	break;  case 6:  	curBrowseSource = TorrentSource.AnimeBytes;  	break;  }  
Magic Number,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowBrowseSources,The following statement contains a magic number: switch (dlg.SelectedLabel) {  case 0:  	ShowContextMenuBrowse (torLink);  	return;  case 1:  	curBrowseSource = TorrentSource.AnimeSuki;  	break;  case 2:  	curBrowseSource = TorrentSource.BakaUpdates;  	break;  case 3:  	curBrowseSource = TorrentSource.Nyaa;  	break;  case 4:  	curBrowseSource = TorrentSource.TokyoToshokan;  	break;  case 5:  	curBrowseSource = TorrentSource.BakaBT;  	break;  case 6:  	curBrowseSource = TorrentSource.AnimeBytes;  	break;  }  
Magic Number,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowBrowseSources,The following statement contains a magic number: switch (dlg.SelectedLabel) {  case 0:  	ShowContextMenuBrowse (torLink);  	return;  case 1:  	curBrowseSource = TorrentSource.AnimeSuki;  	break;  case 2:  	curBrowseSource = TorrentSource.BakaUpdates;  	break;  case 3:  	curBrowseSource = TorrentSource.Nyaa;  	break;  case 4:  	curBrowseSource = TorrentSource.TokyoToshokan;  	break;  case 5:  	curBrowseSource = TorrentSource.BakaBT;  	break;  case 6:  	curBrowseSource = TorrentSource.AnimeBytes;  	break;  }  
Magic Number,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowContextMenuTorrents,The following statement contains a magic number: switch (dlg.SelectedLabel) {  case 0:  	MainWindow.uTorrent.StopTorrent (tor.Hash);  	LoadUTorrentListAsync ();  	break;  case 1:  	MainWindow.uTorrent.StartTorrent (tor.Hash);  	LoadUTorrentListAsync ();  	break;  case 2:  	MainWindow.uTorrent.PauseTorrent (tor.Hash);  	LoadUTorrentListAsync ();  	break;  case 3:  	MainWindow.uTorrent.RemoveTorrent (tor.Hash);  	LoadUTorrentListAsync ();  	break;  case 4:  	MainWindow.uTorrent.RemoveTorrentAndData (tor.Hash);  	LoadUTorrentListAsync ();  	break;  }  
Magic Number,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowContextMenuTorrents,The following statement contains a magic number: switch (dlg.SelectedLabel) {  case 0:  	MainWindow.uTorrent.StopTorrent (tor.Hash);  	LoadUTorrentListAsync ();  	break;  case 1:  	MainWindow.uTorrent.StartTorrent (tor.Hash);  	LoadUTorrentListAsync ();  	break;  case 2:  	MainWindow.uTorrent.PauseTorrent (tor.Hash);  	LoadUTorrentListAsync ();  	break;  case 3:  	MainWindow.uTorrent.RemoveTorrent (tor.Hash);  	LoadUTorrentListAsync ();  	break;  case 4:  	MainWindow.uTorrent.RemoveTorrentAndData (tor.Hash);  	LoadUTorrentListAsync ();  	break;  }  
Magic Number,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowContextMenuTorrents,The following statement contains a magic number: switch (dlg.SelectedLabel) {  case 0:  	MainWindow.uTorrent.StopTorrent (tor.Hash);  	LoadUTorrentListAsync ();  	break;  case 1:  	MainWindow.uTorrent.StartTorrent (tor.Hash);  	LoadUTorrentListAsync ();  	break;  case 2:  	MainWindow.uTorrent.PauseTorrent (tor.Hash);  	LoadUTorrentListAsync ();  	break;  case 3:  	MainWindow.uTorrent.RemoveTorrent (tor.Hash);  	LoadUTorrentListAsync ();  	break;  case 4:  	MainWindow.uTorrent.RemoveTorrentAndData (tor.Hash);  	LoadUTorrentListAsync ();  	break;  }  
Magic Number,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowContextMenuTorrentFiles,The following statement contains a magic number: switch (dlg.SelectedLabel) {  case 0:  	MainWindow.uTorrent.FileSetPriority (curTorrent.Hash' idx' TorrentFilePriority.High);  	ShowPageTorrentFiles ();  	break;  case 1:  	MainWindow.uTorrent.FileSetPriority (curTorrent.Hash' idx' TorrentFilePriority.Medium);  	ShowPageTorrentFiles ();  	break;  case 2:  	MainWindow.uTorrent.FileSetPriority (curTorrent.Hash' idx' TorrentFilePriority.Low);  	ShowPageTorrentFiles ();  	break;  case 3:  	MainWindow.uTorrent.FileSetPriority (curTorrent.Hash' idx' TorrentFilePriority.DontDownload);  	ShowPageTorrentFiles ();  	break;  }  
Magic Number,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowContextMenuTorrentFiles,The following statement contains a magic number: switch (dlg.SelectedLabel) {  case 0:  	MainWindow.uTorrent.FileSetPriority (curTorrent.Hash' idx' TorrentFilePriority.High);  	ShowPageTorrentFiles ();  	break;  case 1:  	MainWindow.uTorrent.FileSetPriority (curTorrent.Hash' idx' TorrentFilePriority.Medium);  	ShowPageTorrentFiles ();  	break;  case 2:  	MainWindow.uTorrent.FileSetPriority (curTorrent.Hash' idx' TorrentFilePriority.Low);  	ShowPageTorrentFiles ();  	break;  case 3:  	MainWindow.uTorrent.FileSetPriority (curTorrent.Hash' idx' TorrentFilePriority.DontDownload);  	ShowPageTorrentFiles ();  	break;  }  
Magic Number,MyAnimePlugin3.Windows,FanartWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\FanartWindow.cs,UpdateLayoutButton,The following statement contains a magic number: switch (view) {  case GUIFacadeControl.Layout.List:  	strLine = GUILocalizeStrings.Get (101);  	break;  case GUIFacadeControl.Layout.SmallIcons:  	strLine = GUILocalizeStrings.Get (100);  	break;  case GUIFacadeControl.Layout.LargeIcons:  	strLine = GUILocalizeStrings.Get (417);  	break;  case GUIFacadeControl.Layout.Filmstrip:  	strLine = GUILocalizeStrings.Get (733);  	break;  case GUIFacadeControl.Layout.CoverFlow:  	strLine = "CoverFlow";  	break;  case GUIFacadeControl.Layout.Playlist:  	strLine = GUILocalizeStrings.Get (101);  	break;  }  
Magic Number,MyAnimePlugin3.Windows,FanartWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\FanartWindow.cs,UpdateLayoutButton,The following statement contains a magic number: switch (view) {  case GUIFacadeControl.Layout.List:  	strLine = GUILocalizeStrings.Get (101);  	break;  case GUIFacadeControl.Layout.SmallIcons:  	strLine = GUILocalizeStrings.Get (100);  	break;  case GUIFacadeControl.Layout.LargeIcons:  	strLine = GUILocalizeStrings.Get (417);  	break;  case GUIFacadeControl.Layout.Filmstrip:  	strLine = GUILocalizeStrings.Get (733);  	break;  case GUIFacadeControl.Layout.CoverFlow:  	strLine = "CoverFlow";  	break;  case GUIFacadeControl.Layout.Playlist:  	strLine = GUILocalizeStrings.Get (101);  	break;  }  
Magic Number,MyAnimePlugin3.Windows,FanartWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\FanartWindow.cs,UpdateLayoutButton,The following statement contains a magic number: switch (view) {  case GUIFacadeControl.Layout.List:  	strLine = GUILocalizeStrings.Get (101);  	break;  case GUIFacadeControl.Layout.SmallIcons:  	strLine = GUILocalizeStrings.Get (100);  	break;  case GUIFacadeControl.Layout.LargeIcons:  	strLine = GUILocalizeStrings.Get (417);  	break;  case GUIFacadeControl.Layout.Filmstrip:  	strLine = GUILocalizeStrings.Get (733);  	break;  case GUIFacadeControl.Layout.CoverFlow:  	strLine = "CoverFlow";  	break;  case GUIFacadeControl.Layout.Playlist:  	strLine = GUILocalizeStrings.Get (101);  	break;  }  
Magic Number,MyAnimePlugin3.Windows,FanartWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\FanartWindow.cs,UpdateLayoutButton,The following statement contains a magic number: switch (view) {  case GUIFacadeControl.Layout.List:  	strLine = GUILocalizeStrings.Get (101);  	break;  case GUIFacadeControl.Layout.SmallIcons:  	strLine = GUILocalizeStrings.Get (100);  	break;  case GUIFacadeControl.Layout.LargeIcons:  	strLine = GUILocalizeStrings.Get (417);  	break;  case GUIFacadeControl.Layout.Filmstrip:  	strLine = GUILocalizeStrings.Get (733);  	break;  case GUIFacadeControl.Layout.CoverFlow:  	strLine = "CoverFlow";  	break;  case GUIFacadeControl.Layout.Playlist:  	strLine = GUILocalizeStrings.Get (101);  	break;  }  
Magic Number,MyAnimePlugin3.Windows,FanartWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\FanartWindow.cs,UpdateLayoutButton,The following statement contains a magic number: switch (view) {  case GUIFacadeControl.Layout.List:  	strLine = GUILocalizeStrings.Get (101);  	break;  case GUIFacadeControl.Layout.SmallIcons:  	strLine = GUILocalizeStrings.Get (100);  	break;  case GUIFacadeControl.Layout.LargeIcons:  	strLine = GUILocalizeStrings.Get (417);  	break;  case GUIFacadeControl.Layout.Filmstrip:  	strLine = GUILocalizeStrings.Get (733);  	break;  case GUIFacadeControl.Layout.CoverFlow:  	strLine = "CoverFlow";  	break;  case GUIFacadeControl.Layout.Playlist:  	strLine = GUILocalizeStrings.Get (101);  	break;  }  
Magic Number,MyAnimePlugin3.Windows,FanartWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\FanartWindow.cs,UpdateLayoutButton,The following statement contains a magic number: strLine = GUILocalizeStrings.Get (101);  
Magic Number,MyAnimePlugin3.Windows,FanartWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\FanartWindow.cs,UpdateLayoutButton,The following statement contains a magic number: strLine = GUILocalizeStrings.Get (100);  
Magic Number,MyAnimePlugin3.Windows,FanartWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\FanartWindow.cs,UpdateLayoutButton,The following statement contains a magic number: strLine = GUILocalizeStrings.Get (417);  
Magic Number,MyAnimePlugin3.Windows,FanartWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\FanartWindow.cs,UpdateLayoutButton,The following statement contains a magic number: strLine = GUILocalizeStrings.Get (733);  
Magic Number,MyAnimePlugin3.Windows,FanartWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\FanartWindow.cs,UpdateLayoutButton,The following statement contains a magic number: strLine = GUILocalizeStrings.Get (101);  
Magic Number,MyAnimePlugin3.Windows,FanartWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\FanartWindow.cs,ShowFanart,The following statement contains a magic number: if (m_Facade.Count > 0) {  	m_Facade.SelectedListItemIndex = 0;  	// Work around for Filmstrip not allowing to programmatically select item  	if (m_Facade.CurrentLayout == GUIFacadeControl.Layout.Filmstrip) {  	}  	FanartContainer selectedFanart = m_Facade.SelectedListItem.TVTag as FanartContainer;  	if (selectedFanart != null) {  		setFanartPreviewBackground (selectedFanart);  	}  	GUIControl.FocusControl (GetID' 50);  }  
Magic Number,MyAnimePlugin3.Windows,FanartWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\FanartWindow.cs,ShowFanart,The following statement contains a magic number: GUIControl.FocusControl (GetID' 50);  
Magic Number,MyAnimePlugin3.Windows,FanartWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\FanartWindow.cs,OnShowContextMenu,The following statement contains a magic number: try {  	GUIListItem currentitem = this.m_Facade.SelectedListItem;  	if (currentitem == null || !(currentitem.TVTag is FanartContainer))  		return;  	FanartContainer selectedFanart = currentitem.TVTag as FanartContainer;  	IDialogbox dlg = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	if (dlg == null)  		return;  	dlg.Reset ();  	dlg.SetHeading ("Fanart");  	GUIListItem pItem;  	if (!selectedFanart.IsImageEnabled) {  		pItem = new GUIListItem ("Enable");  		dlg.Add (pItem);  	}  	else {  		pItem = new GUIListItem ("Disable");  		dlg.Add (pItem);  	}  	if (selectedFanart.IsImageEnabled) {  		if (selectedFanart.IsImageDefault) {  			pItem = new GUIListItem ("Remove as Default");  			dlg.Add (pItem);  		}  		else {  			pItem = new GUIListItem ("Set as Default");  			dlg.Add (pItem);  		}  	}  	// lets show it  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	if (dlg.SelectedId == 1)// enabled/disable  	 {  		bool endis = !selectedFanart.IsImageEnabled;  		JMMServerHelper.EnableDisableFanart (endis' selectedFanart' AnimeID);  		ShowFanart ();  		return;  	}  	if (dlg.SelectedId == 2) {  		bool isdef = !selectedFanart.IsImageDefault;  		JMMServerHelper.SetDefaultFanart (isdef' selectedFanart' AnimeID);  		ShowFanart ();  		return;  	}  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write ("Exception in Fanart Chooser Context Menu: " + ex.Message + ex.StackTrace);  	return;  }  
Magic Number,MyAnimePlugin3.Windows,FanartWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\FanartWindow.cs,OnShowContextMenu,The following statement contains a magic number: if (dlg.SelectedId == 2) {  	bool isdef = !selectedFanart.IsImageDefault;  	JMMServerHelper.SetDefaultFanart (isdef' selectedFanart' AnimeID);  	ShowFanart ();  	return;  }  
Magic Number,MyAnimePlugin3.Windows,FanartWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\FanartWindow.cs,OnAction,The following statement contains a magic number: if (viewIsFullscreen) {  	if (action.m_key.KeyCode == 27) {  		// makes esc exit fullscreen  		//hide fullscreen  		dummyFullscreen.Visible = true;  		viewIsFullscreen = false;  		return;  	}  	if (action.IsUserAction ()) {  		//this stops the selection wondering around the screen  		return;  	}  }  
Magic Number,MyAnimePlugin3.Windows,FanartWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\FanartWindow.cs,OnAction,The following statement contains a magic number: if (action.m_key.KeyCode == 27) {  	// makes esc exit fullscreen  	//hide fullscreen  	dummyFullscreen.Visible = true;  	viewIsFullscreen = false;  	return;  }  
Magic Number,MyAnimePlugin3.Windows,PosterWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\PosterWindow.cs,ShowPosters,The following statement contains a magic number: if (m_Facade.Count > 0) {  	m_Facade.SelectedListItemIndex = 0;  	// Work around for Filmstrip not allowing to programmatically select item  	if (m_Facade.CurrentLayout == GUIFacadeControl.Layout.Filmstrip) {  	}  	PosterContainer selectedPoster = m_Facade.SelectedListItem.TVTag as PosterContainer;  	if (selectedPoster != null) {  		SetPosterProperties (selectedPoster);  	}  	GUIControl.FocusControl (GetID' 50);  }  
Magic Number,MyAnimePlugin3.Windows,PosterWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\PosterWindow.cs,ShowPosters,The following statement contains a magic number: GUIControl.FocusControl (GetID' 50);  
Magic Number,MyAnimePlugin3.Windows,PosterWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\PosterWindow.cs,OnAction,The following statement contains a magic number: if (viewIsLarger) {  	if (action.m_key.KeyCode == 27) {  		// makes esc exit fullscreen  		//hide fullscreen  		dummyLarger.Visible = true;  		viewIsLarger = false;  		return;  	}  	if (action.IsUserAction ()) {  		//this stops the selection wondering around the screen  		return;  	}  }  
Magic Number,MyAnimePlugin3.Windows,PosterWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\PosterWindow.cs,OnAction,The following statement contains a magic number: if (action.m_key.KeyCode == 27) {  	// makes esc exit fullscreen  	//hide fullscreen  	dummyLarger.Visible = true;  	viewIsLarger = false;  	return;  }  
Magic Number,MyAnimePlugin3.Windows,PosterWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\PosterWindow.cs,UpdateLayoutButton,The following statement contains a magic number: switch (view) {  case GUIFacadeControl.Layout.List:  	strLine = GUILocalizeStrings.Get (101);  	break;  case GUIFacadeControl.Layout.SmallIcons:  	strLine = GUILocalizeStrings.Get (100);  	break;  case GUIFacadeControl.Layout.LargeIcons:  	strLine = GUILocalizeStrings.Get (417);  	break;  case GUIFacadeControl.Layout.Filmstrip:  	strLine = GUILocalizeStrings.Get (733);  	break;  case GUIFacadeControl.Layout.Playlist:  	strLine = GUILocalizeStrings.Get (101);  	break;  }  
Magic Number,MyAnimePlugin3.Windows,PosterWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\PosterWindow.cs,UpdateLayoutButton,The following statement contains a magic number: switch (view) {  case GUIFacadeControl.Layout.List:  	strLine = GUILocalizeStrings.Get (101);  	break;  case GUIFacadeControl.Layout.SmallIcons:  	strLine = GUILocalizeStrings.Get (100);  	break;  case GUIFacadeControl.Layout.LargeIcons:  	strLine = GUILocalizeStrings.Get (417);  	break;  case GUIFacadeControl.Layout.Filmstrip:  	strLine = GUILocalizeStrings.Get (733);  	break;  case GUIFacadeControl.Layout.Playlist:  	strLine = GUILocalizeStrings.Get (101);  	break;  }  
Magic Number,MyAnimePlugin3.Windows,PosterWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\PosterWindow.cs,UpdateLayoutButton,The following statement contains a magic number: switch (view) {  case GUIFacadeControl.Layout.List:  	strLine = GUILocalizeStrings.Get (101);  	break;  case GUIFacadeControl.Layout.SmallIcons:  	strLine = GUILocalizeStrings.Get (100);  	break;  case GUIFacadeControl.Layout.LargeIcons:  	strLine = GUILocalizeStrings.Get (417);  	break;  case GUIFacadeControl.Layout.Filmstrip:  	strLine = GUILocalizeStrings.Get (733);  	break;  case GUIFacadeControl.Layout.Playlist:  	strLine = GUILocalizeStrings.Get (101);  	break;  }  
Magic Number,MyAnimePlugin3.Windows,PosterWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\PosterWindow.cs,UpdateLayoutButton,The following statement contains a magic number: switch (view) {  case GUIFacadeControl.Layout.List:  	strLine = GUILocalizeStrings.Get (101);  	break;  case GUIFacadeControl.Layout.SmallIcons:  	strLine = GUILocalizeStrings.Get (100);  	break;  case GUIFacadeControl.Layout.LargeIcons:  	strLine = GUILocalizeStrings.Get (417);  	break;  case GUIFacadeControl.Layout.Filmstrip:  	strLine = GUILocalizeStrings.Get (733);  	break;  case GUIFacadeControl.Layout.Playlist:  	strLine = GUILocalizeStrings.Get (101);  	break;  }  
Magic Number,MyAnimePlugin3.Windows,PosterWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\PosterWindow.cs,UpdateLayoutButton,The following statement contains a magic number: switch (view) {  case GUIFacadeControl.Layout.List:  	strLine = GUILocalizeStrings.Get (101);  	break;  case GUIFacadeControl.Layout.SmallIcons:  	strLine = GUILocalizeStrings.Get (100);  	break;  case GUIFacadeControl.Layout.LargeIcons:  	strLine = GUILocalizeStrings.Get (417);  	break;  case GUIFacadeControl.Layout.Filmstrip:  	strLine = GUILocalizeStrings.Get (733);  	break;  case GUIFacadeControl.Layout.Playlist:  	strLine = GUILocalizeStrings.Get (101);  	break;  }  
Magic Number,MyAnimePlugin3.Windows,PosterWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\PosterWindow.cs,UpdateLayoutButton,The following statement contains a magic number: strLine = GUILocalizeStrings.Get (101);  
Magic Number,MyAnimePlugin3.Windows,PosterWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\PosterWindow.cs,UpdateLayoutButton,The following statement contains a magic number: strLine = GUILocalizeStrings.Get (100);  
Magic Number,MyAnimePlugin3.Windows,PosterWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\PosterWindow.cs,UpdateLayoutButton,The following statement contains a magic number: strLine = GUILocalizeStrings.Get (417);  
Magic Number,MyAnimePlugin3.Windows,PosterWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\PosterWindow.cs,UpdateLayoutButton,The following statement contains a magic number: strLine = GUILocalizeStrings.Get (733);  
Magic Number,MyAnimePlugin3.Windows,PosterWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\PosterWindow.cs,UpdateLayoutButton,The following statement contains a magic number: strLine = GUILocalizeStrings.Get (101);  
Magic Number,MyAnimePlugin3.Windows,PosterWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\PosterWindow.cs,OnShowContextMenu,The following statement contains a magic number: try {  	GUIListItem currentitem = this.m_Facade.SelectedListItem;  	if (currentitem == null || !(currentitem.TVTag is PosterContainer))  		return;  	PosterContainer selectedPoster = currentitem.TVTag as PosterContainer;  	IDialogbox dlg = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	if (dlg == null)  		return;  	dlg.Reset ();  	dlg.SetHeading ("Poster");  	GUIListItem pItem;  	if (!selectedPoster.IsImageEnabled) {  		pItem = new GUIListItem ("Enable");  		dlg.Add (pItem);  	}  	else {  		pItem = new GUIListItem ("Disable");  		dlg.Add (pItem);  	}  	if (selectedPoster.IsImageEnabled) {  		if (selectedPoster.IsImageDefault) {  			pItem = new GUIListItem ("Remove as Default");  			dlg.Add (pItem);  		}  		else {  			pItem = new GUIListItem ("Set as Default");  			dlg.Add (pItem);  		}  	}  	// lets show it  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	if (dlg.SelectedId == 1)// enabled/disable  	 {  		bool endis = !selectedPoster.IsImageEnabled;  		JMMServerHelper.EnableDisablePoster (endis' selectedPoster' AnimeID);  		ShowPosters ();  		return;  	}  	if (dlg.SelectedId == 2) {  		bool isdef = !selectedPoster.IsImageDefault;  		JMMServerHelper.SetDefaultPoster (isdef' selectedPoster' AnimeID);  		ShowPosters ();  		return;  	}  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write ("Exception in Poster Chooser Context Menu: " + ex.Message + ex.StackTrace);  	return;  }  
Magic Number,MyAnimePlugin3.Windows,PosterWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\PosterWindow.cs,OnShowContextMenu,The following statement contains a magic number: if (dlg.SelectedId == 2) {  	bool isdef = !selectedPoster.IsImageDefault;  	JMMServerHelper.SetDefaultPoster (isdef' selectedPoster' AnimeID);  	ShowPosters ();  	return;  }  
Magic Number,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,SetDetails,The following statement contains a magic number: if (MainWindow.RandomWindow_RandomType == RandomObjectType.Series) {  	dummyRandomSeries.Visible = true;  	dummyRandomEpisode.Visible = false;  	if (btnRandom != null)  		btnRandom.NavigateDown = 802;  	if (btnRandom != null)  		btnRandom.NavigateUp = 810;  	if (btnRandom != null)  		btnRandom.NavigateRight = 805;  }  else {  	dummyRandomSeries.Visible = false;  	dummyRandomEpisode.Visible = true;  	if (btnRandom != null)  		btnRandom.NavigateDown = 821;  	if (btnRandom != null)  		btnRandom.NavigateUp = 825;  	if (btnRandom != null)  		btnRandom.NavigateRight = 823;  }  
Magic Number,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,SetDetails,The following statement contains a magic number: if (MainWindow.RandomWindow_RandomType == RandomObjectType.Series) {  	dummyRandomSeries.Visible = true;  	dummyRandomEpisode.Visible = false;  	if (btnRandom != null)  		btnRandom.NavigateDown = 802;  	if (btnRandom != null)  		btnRandom.NavigateUp = 810;  	if (btnRandom != null)  		btnRandom.NavigateRight = 805;  }  else {  	dummyRandomSeries.Visible = false;  	dummyRandomEpisode.Visible = true;  	if (btnRandom != null)  		btnRandom.NavigateDown = 821;  	if (btnRandom != null)  		btnRandom.NavigateUp = 825;  	if (btnRandom != null)  		btnRandom.NavigateRight = 823;  }  
Magic Number,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,SetDetails,The following statement contains a magic number: if (MainWindow.RandomWindow_RandomType == RandomObjectType.Series) {  	dummyRandomSeries.Visible = true;  	dummyRandomEpisode.Visible = false;  	if (btnRandom != null)  		btnRandom.NavigateDown = 802;  	if (btnRandom != null)  		btnRandom.NavigateUp = 810;  	if (btnRandom != null)  		btnRandom.NavigateRight = 805;  }  else {  	dummyRandomSeries.Visible = false;  	dummyRandomEpisode.Visible = true;  	if (btnRandom != null)  		btnRandom.NavigateDown = 821;  	if (btnRandom != null)  		btnRandom.NavigateUp = 825;  	if (btnRandom != null)  		btnRandom.NavigateRight = 823;  }  
Magic Number,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,SetDetails,The following statement contains a magic number: if (MainWindow.RandomWindow_RandomType == RandomObjectType.Series) {  	dummyRandomSeries.Visible = true;  	dummyRandomEpisode.Visible = false;  	if (btnRandom != null)  		btnRandom.NavigateDown = 802;  	if (btnRandom != null)  		btnRandom.NavigateUp = 810;  	if (btnRandom != null)  		btnRandom.NavigateRight = 805;  }  else {  	dummyRandomSeries.Visible = false;  	dummyRandomEpisode.Visible = true;  	if (btnRandom != null)  		btnRandom.NavigateDown = 821;  	if (btnRandom != null)  		btnRandom.NavigateUp = 825;  	if (btnRandom != null)  		btnRandom.NavigateRight = 823;  }  
Magic Number,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,SetDetails,The following statement contains a magic number: if (MainWindow.RandomWindow_RandomType == RandomObjectType.Series) {  	dummyRandomSeries.Visible = true;  	dummyRandomEpisode.Visible = false;  	if (btnRandom != null)  		btnRandom.NavigateDown = 802;  	if (btnRandom != null)  		btnRandom.NavigateUp = 810;  	if (btnRandom != null)  		btnRandom.NavigateRight = 805;  }  else {  	dummyRandomSeries.Visible = false;  	dummyRandomEpisode.Visible = true;  	if (btnRandom != null)  		btnRandom.NavigateDown = 821;  	if (btnRandom != null)  		btnRandom.NavigateUp = 825;  	if (btnRandom != null)  		btnRandom.NavigateRight = 823;  }  
Magic Number,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,SetDetails,The following statement contains a magic number: if (MainWindow.RandomWindow_RandomType == RandomObjectType.Series) {  	dummyRandomSeries.Visible = true;  	dummyRandomEpisode.Visible = false;  	if (btnRandom != null)  		btnRandom.NavigateDown = 802;  	if (btnRandom != null)  		btnRandom.NavigateUp = 810;  	if (btnRandom != null)  		btnRandom.NavigateRight = 805;  }  else {  	dummyRandomSeries.Visible = false;  	dummyRandomEpisode.Visible = true;  	if (btnRandom != null)  		btnRandom.NavigateDown = 821;  	if (btnRandom != null)  		btnRandom.NavigateUp = 825;  	if (btnRandom != null)  		btnRandom.NavigateRight = 823;  }  
Magic Number,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,SetDetails,The following statement contains a magic number: if (btnRandom != null)  	btnRandom.NavigateDown = 802;  
Magic Number,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,SetDetails,The following statement contains a magic number: btnRandom.NavigateDown = 802;  
Magic Number,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,SetDetails,The following statement contains a magic number: if (btnRandom != null)  	btnRandom.NavigateUp = 810;  
Magic Number,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,SetDetails,The following statement contains a magic number: btnRandom.NavigateUp = 810;  
Magic Number,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,SetDetails,The following statement contains a magic number: if (btnRandom != null)  	btnRandom.NavigateRight = 805;  
Magic Number,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,SetDetails,The following statement contains a magic number: btnRandom.NavigateRight = 805;  
Magic Number,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,SetDetails,The following statement contains a magic number: if (btnRandom != null)  	btnRandom.NavigateDown = 821;  
Magic Number,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,SetDetails,The following statement contains a magic number: btnRandom.NavigateDown = 821;  
Magic Number,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,SetDetails,The following statement contains a magic number: if (btnRandom != null)  	btnRandom.NavigateUp = 825;  
Magic Number,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,SetDetails,The following statement contains a magic number: btnRandom.NavigateUp = 825;  
Magic Number,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,SetDetails,The following statement contains a magic number: if (btnRandom != null)  	btnRandom.NavigateRight = 823;  
Magic Number,MyAnimePlugin3.Windows,RandomWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RandomWindow.cs,SetDetails,The following statement contains a magic number: btnRandom.NavigateRight = 823;  
Magic Number,MyAnimePlugin3.Windows,RecommendationsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RecommendationsWindow.cs,getDataWorker_DoWork,The following statement contains a magic number: if (dummyModeDownload != null && dummyModeDownload.Visible)  	recType = 2;  
Magic Number,MyAnimePlugin3.Windows,RecommendationsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RecommendationsWindow.cs,getDataWorker_DoWork,The following statement contains a magic number: recType = 2;  
Magic Number,MyAnimePlugin3.Windows,RecommendationsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RecommendationsWindow.cs,OnShowContextMenu,The following statement contains a magic number: if (currentitem.TVTag.GetType () == typeof(RecommendationVM)) {  	RecommendationVM rec = currentitem.TVTag as RecommendationVM;  	if (rec != null) {  		GUIDialogMenu dlg = (GUIDialogMenu)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		if (dlg == null)  			return;  		dlg.Reset ();  		dlg.SetHeading (rec.Recommended_DisplayName);  		dlg.Add ("Don't Show This Anime (Ignore)");  		dlg.Add ("Bookmark this Anime");  		dlg.Add ("Create Series for Anime");  		dlg.DoModal (GUIWindowManager.ActiveWindow);  		switch (dlg.SelectedLabel) {  		case 0:  			int recType = 1;  			if (dummyModeDownload != null && dummyModeDownload.Visible)  				recType = 2;  			JMMServerVM.Instance.clientBinaryHTTP.IgnoreAnime (rec.RecommendedAnimeID' recType' JMMServerVM.Instance.CurrentUser.JMMUserID);  			LoadData ();  			break;  		case 1:  			BookmarkedAnimeVM bookmark = new BookmarkedAnimeVM ();  			bookmark.AnimeID = rec.RecommendedAnimeID;  			bookmark.Downloading = 0;  			bookmark.Notes = "";  			bookmark.Priority = 1;  			if (bookmark.Save ()) {  				Utils.DialogMsg ("Success"' "Bookmark Created");  			}  			break;  		case 2:  			JMMServerBinary.Contract_AnimeSeries_SaveResponse resp = JMMServerVM.Instance.clientBinaryHTTP.CreateSeriesFromAnime (rec.RecommendedAnimeID' null' JMMServerVM.Instance.CurrentUser.JMMUserID);  			if (string.IsNullOrEmpty (resp.ErrorMessage))  				Utils.DialogMsg ("Success"' "Series Created");  			else  				Utils.DialogMsg ("Error"' resp.ErrorMessage);  			break;  		}  	}  }  
Magic Number,MyAnimePlugin3.Windows,RecommendationsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RecommendationsWindow.cs,OnShowContextMenu,The following statement contains a magic number: if (currentitem.TVTag.GetType () == typeof(RecommendationVM)) {  	RecommendationVM rec = currentitem.TVTag as RecommendationVM;  	if (rec != null) {  		GUIDialogMenu dlg = (GUIDialogMenu)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  		if (dlg == null)  			return;  		dlg.Reset ();  		dlg.SetHeading (rec.Recommended_DisplayName);  		dlg.Add ("Don't Show This Anime (Ignore)");  		dlg.Add ("Bookmark this Anime");  		dlg.Add ("Create Series for Anime");  		dlg.DoModal (GUIWindowManager.ActiveWindow);  		switch (dlg.SelectedLabel) {  		case 0:  			int recType = 1;  			if (dummyModeDownload != null && dummyModeDownload.Visible)  				recType = 2;  			JMMServerVM.Instance.clientBinaryHTTP.IgnoreAnime (rec.RecommendedAnimeID' recType' JMMServerVM.Instance.CurrentUser.JMMUserID);  			LoadData ();  			break;  		case 1:  			BookmarkedAnimeVM bookmark = new BookmarkedAnimeVM ();  			bookmark.AnimeID = rec.RecommendedAnimeID;  			bookmark.Downloading = 0;  			bookmark.Notes = "";  			bookmark.Priority = 1;  			if (bookmark.Save ()) {  				Utils.DialogMsg ("Success"' "Bookmark Created");  			}  			break;  		case 2:  			JMMServerBinary.Contract_AnimeSeries_SaveResponse resp = JMMServerVM.Instance.clientBinaryHTTP.CreateSeriesFromAnime (rec.RecommendedAnimeID' null' JMMServerVM.Instance.CurrentUser.JMMUserID);  			if (string.IsNullOrEmpty (resp.ErrorMessage))  				Utils.DialogMsg ("Success"' "Series Created");  			else  				Utils.DialogMsg ("Error"' resp.ErrorMessage);  			break;  		}  	}  }  
Magic Number,MyAnimePlugin3.Windows,RecommendationsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RecommendationsWindow.cs,OnShowContextMenu,The following statement contains a magic number: if (rec != null) {  	GUIDialogMenu dlg = (GUIDialogMenu)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	if (dlg == null)  		return;  	dlg.Reset ();  	dlg.SetHeading (rec.Recommended_DisplayName);  	dlg.Add ("Don't Show This Anime (Ignore)");  	dlg.Add ("Bookmark this Anime");  	dlg.Add ("Create Series for Anime");  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	switch (dlg.SelectedLabel) {  	case 0:  		int recType = 1;  		if (dummyModeDownload != null && dummyModeDownload.Visible)  			recType = 2;  		JMMServerVM.Instance.clientBinaryHTTP.IgnoreAnime (rec.RecommendedAnimeID' recType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		LoadData ();  		break;  	case 1:  		BookmarkedAnimeVM bookmark = new BookmarkedAnimeVM ();  		bookmark.AnimeID = rec.RecommendedAnimeID;  		bookmark.Downloading = 0;  		bookmark.Notes = "";  		bookmark.Priority = 1;  		if (bookmark.Save ()) {  			Utils.DialogMsg ("Success"' "Bookmark Created");  		}  		break;  	case 2:  		JMMServerBinary.Contract_AnimeSeries_SaveResponse resp = JMMServerVM.Instance.clientBinaryHTTP.CreateSeriesFromAnime (rec.RecommendedAnimeID' null' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (string.IsNullOrEmpty (resp.ErrorMessage))  			Utils.DialogMsg ("Success"' "Series Created");  		else  			Utils.DialogMsg ("Error"' resp.ErrorMessage);  		break;  	}  }  
Magic Number,MyAnimePlugin3.Windows,RecommendationsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RecommendationsWindow.cs,OnShowContextMenu,The following statement contains a magic number: if (rec != null) {  	GUIDialogMenu dlg = (GUIDialogMenu)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	if (dlg == null)  		return;  	dlg.Reset ();  	dlg.SetHeading (rec.Recommended_DisplayName);  	dlg.Add ("Don't Show This Anime (Ignore)");  	dlg.Add ("Bookmark this Anime");  	dlg.Add ("Create Series for Anime");  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	switch (dlg.SelectedLabel) {  	case 0:  		int recType = 1;  		if (dummyModeDownload != null && dummyModeDownload.Visible)  			recType = 2;  		JMMServerVM.Instance.clientBinaryHTTP.IgnoreAnime (rec.RecommendedAnimeID' recType' JMMServerVM.Instance.CurrentUser.JMMUserID);  		LoadData ();  		break;  	case 1:  		BookmarkedAnimeVM bookmark = new BookmarkedAnimeVM ();  		bookmark.AnimeID = rec.RecommendedAnimeID;  		bookmark.Downloading = 0;  		bookmark.Notes = "";  		bookmark.Priority = 1;  		if (bookmark.Save ()) {  			Utils.DialogMsg ("Success"' "Bookmark Created");  		}  		break;  	case 2:  		JMMServerBinary.Contract_AnimeSeries_SaveResponse resp = JMMServerVM.Instance.clientBinaryHTTP.CreateSeriesFromAnime (rec.RecommendedAnimeID' null' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (string.IsNullOrEmpty (resp.ErrorMessage))  			Utils.DialogMsg ("Success"' "Series Created");  		else  			Utils.DialogMsg ("Error"' resp.ErrorMessage);  		break;  	}  }  
Magic Number,MyAnimePlugin3.Windows,RecommendationsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RecommendationsWindow.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedLabel) {  case 0:  	int recType = 1;  	if (dummyModeDownload != null && dummyModeDownload.Visible)  		recType = 2;  	JMMServerVM.Instance.clientBinaryHTTP.IgnoreAnime (rec.RecommendedAnimeID' recType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	LoadData ();  	break;  case 1:  	BookmarkedAnimeVM bookmark = new BookmarkedAnimeVM ();  	bookmark.AnimeID = rec.RecommendedAnimeID;  	bookmark.Downloading = 0;  	bookmark.Notes = "";  	bookmark.Priority = 1;  	if (bookmark.Save ()) {  		Utils.DialogMsg ("Success"' "Bookmark Created");  	}  	break;  case 2:  	JMMServerBinary.Contract_AnimeSeries_SaveResponse resp = JMMServerVM.Instance.clientBinaryHTTP.CreateSeriesFromAnime (rec.RecommendedAnimeID' null' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (string.IsNullOrEmpty (resp.ErrorMessage))  		Utils.DialogMsg ("Success"' "Series Created");  	else  		Utils.DialogMsg ("Error"' resp.ErrorMessage);  	break;  }  
Magic Number,MyAnimePlugin3.Windows,RecommendationsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RecommendationsWindow.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedLabel) {  case 0:  	int recType = 1;  	if (dummyModeDownload != null && dummyModeDownload.Visible)  		recType = 2;  	JMMServerVM.Instance.clientBinaryHTTP.IgnoreAnime (rec.RecommendedAnimeID' recType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	LoadData ();  	break;  case 1:  	BookmarkedAnimeVM bookmark = new BookmarkedAnimeVM ();  	bookmark.AnimeID = rec.RecommendedAnimeID;  	bookmark.Downloading = 0;  	bookmark.Notes = "";  	bookmark.Priority = 1;  	if (bookmark.Save ()) {  		Utils.DialogMsg ("Success"' "Bookmark Created");  	}  	break;  case 2:  	JMMServerBinary.Contract_AnimeSeries_SaveResponse resp = JMMServerVM.Instance.clientBinaryHTTP.CreateSeriesFromAnime (rec.RecommendedAnimeID' null' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (string.IsNullOrEmpty (resp.ErrorMessage))  		Utils.DialogMsg ("Success"' "Series Created");  	else  		Utils.DialogMsg ("Error"' resp.ErrorMessage);  	break;  }  
Magic Number,MyAnimePlugin3.Windows,RecommendationsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RecommendationsWindow.cs,OnShowContextMenu,The following statement contains a magic number: if (dummyModeDownload != null && dummyModeDownload.Visible)  	recType = 2;  
Magic Number,MyAnimePlugin3.Windows,RecommendationsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RecommendationsWindow.cs,OnShowContextMenu,The following statement contains a magic number: recType = 2;  
Magic Number,MyAnimePlugin3.Windows,RecommendationsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RecommendationsWindow.cs,OnClicked,The following statement contains a magic number: if (this.btnGetMissingInfo != null && control == this.btnGetMissingInfo) {  	MainWindow.ServerHelper.DownloadRecommendedAnime ();  	setGUIProperty ("Recommendations.DownloadStatus"' "Waiting on server...");  	GUIControl.FocusControl (GetID' 50);  	return;  }  
Magic Number,MyAnimePlugin3.Windows,RecommendationsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RecommendationsWindow.cs,OnClicked,The following statement contains a magic number: GUIControl.FocusControl (GetID' 50);  
Magic Number,MyAnimePlugin3.Windows,RelationsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RelationsWindow.cs,OnClicked,The following statement contains a magic number: if (this.btnGetMissingInfo != null && control == this.btnGetMissingInfo) {  	MainWindow.ServerHelper.DownloadRelatedAnime (mainAnime.AnimeID);  	setGUIProperty ("Related.DownloadStatus"' "Waiting on server...");  	GUIControl.FocusControl (GetID' 50);  	return;  }  
Magic Number,MyAnimePlugin3.Windows,RelationsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RelationsWindow.cs,OnClicked,The following statement contains a magic number: GUIControl.FocusControl (GetID' 50);  
Magic Number,MyAnimePlugin3.Windows,WideBannerWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\WideBannerWindow.cs,ShowWideBanners,The following statement contains a magic number: if (ser != null) {  	List<TvDB_ImageWideBannerVM> tvDBWideBanners = ser.AniDB_Anime.AniDB_AnimeCrossRefs.TvDBImageWideBanners;  	GUIListItem item = null;  	foreach (TvDB_ImageWideBannerVM banner in tvDBWideBanners) {  		item = new GUIListItem ();  		item.IconImage = item.IconImageBig = banner.FullImagePath;  		item.TVTag = banner;  		item.OnItemSelected += new GUIListItem.ItemSelectedHandler (onFacadeItemSelected);  		m_Facade.Add (item);  	}  	if (m_Facade.Count > 0) {  		m_Facade.SelectedListItemIndex = 0;  		TvDB_ImageWideBannerVM selectedBanner = m_Facade.SelectedListItem.TVTag as TvDB_ImageWideBannerVM;  		if (selectedBanner != null) {  			SetWideBannerProperties (selectedBanner);  		}  		GUIControl.FocusControl (GetID' 50);  	}  }  
Magic Number,MyAnimePlugin3.Windows,WideBannerWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\WideBannerWindow.cs,ShowWideBanners,The following statement contains a magic number: if (m_Facade.Count > 0) {  	m_Facade.SelectedListItemIndex = 0;  	TvDB_ImageWideBannerVM selectedBanner = m_Facade.SelectedListItem.TVTag as TvDB_ImageWideBannerVM;  	if (selectedBanner != null) {  		SetWideBannerProperties (selectedBanner);  	}  	GUIControl.FocusControl (GetID' 50);  }  
Magic Number,MyAnimePlugin3.Windows,WideBannerWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\WideBannerWindow.cs,ShowWideBanners,The following statement contains a magic number: GUIControl.FocusControl (GetID' 50);  
Magic Number,MyAnimePlugin3.Windows,WideBannerWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\WideBannerWindow.cs,UpdateLayoutButton,The following statement contains a magic number: switch (view) {  case GUIFacadeControl.Layout.List:  	strLine = GUILocalizeStrings.Get (101);  	break;  case GUIFacadeControl.Layout.SmallIcons:  	strLine = GUILocalizeStrings.Get (100);  	break;  case GUIFacadeControl.Layout.LargeIcons:  	strLine = GUILocalizeStrings.Get (417);  	break;  case GUIFacadeControl.Layout.Filmstrip:  	strLine = GUILocalizeStrings.Get (733);  	break;  case GUIFacadeControl.Layout.Playlist:  	strLine = GUILocalizeStrings.Get (101);  	break;  }  
Magic Number,MyAnimePlugin3.Windows,WideBannerWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\WideBannerWindow.cs,UpdateLayoutButton,The following statement contains a magic number: switch (view) {  case GUIFacadeControl.Layout.List:  	strLine = GUILocalizeStrings.Get (101);  	break;  case GUIFacadeControl.Layout.SmallIcons:  	strLine = GUILocalizeStrings.Get (100);  	break;  case GUIFacadeControl.Layout.LargeIcons:  	strLine = GUILocalizeStrings.Get (417);  	break;  case GUIFacadeControl.Layout.Filmstrip:  	strLine = GUILocalizeStrings.Get (733);  	break;  case GUIFacadeControl.Layout.Playlist:  	strLine = GUILocalizeStrings.Get (101);  	break;  }  
Magic Number,MyAnimePlugin3.Windows,WideBannerWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\WideBannerWindow.cs,UpdateLayoutButton,The following statement contains a magic number: switch (view) {  case GUIFacadeControl.Layout.List:  	strLine = GUILocalizeStrings.Get (101);  	break;  case GUIFacadeControl.Layout.SmallIcons:  	strLine = GUILocalizeStrings.Get (100);  	break;  case GUIFacadeControl.Layout.LargeIcons:  	strLine = GUILocalizeStrings.Get (417);  	break;  case GUIFacadeControl.Layout.Filmstrip:  	strLine = GUILocalizeStrings.Get (733);  	break;  case GUIFacadeControl.Layout.Playlist:  	strLine = GUILocalizeStrings.Get (101);  	break;  }  
Magic Number,MyAnimePlugin3.Windows,WideBannerWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\WideBannerWindow.cs,UpdateLayoutButton,The following statement contains a magic number: switch (view) {  case GUIFacadeControl.Layout.List:  	strLine = GUILocalizeStrings.Get (101);  	break;  case GUIFacadeControl.Layout.SmallIcons:  	strLine = GUILocalizeStrings.Get (100);  	break;  case GUIFacadeControl.Layout.LargeIcons:  	strLine = GUILocalizeStrings.Get (417);  	break;  case GUIFacadeControl.Layout.Filmstrip:  	strLine = GUILocalizeStrings.Get (733);  	break;  case GUIFacadeControl.Layout.Playlist:  	strLine = GUILocalizeStrings.Get (101);  	break;  }  
Magic Number,MyAnimePlugin3.Windows,WideBannerWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\WideBannerWindow.cs,UpdateLayoutButton,The following statement contains a magic number: switch (view) {  case GUIFacadeControl.Layout.List:  	strLine = GUILocalizeStrings.Get (101);  	break;  case GUIFacadeControl.Layout.SmallIcons:  	strLine = GUILocalizeStrings.Get (100);  	break;  case GUIFacadeControl.Layout.LargeIcons:  	strLine = GUILocalizeStrings.Get (417);  	break;  case GUIFacadeControl.Layout.Filmstrip:  	strLine = GUILocalizeStrings.Get (733);  	break;  case GUIFacadeControl.Layout.Playlist:  	strLine = GUILocalizeStrings.Get (101);  	break;  }  
Magic Number,MyAnimePlugin3.Windows,WideBannerWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\WideBannerWindow.cs,UpdateLayoutButton,The following statement contains a magic number: strLine = GUILocalizeStrings.Get (101);  
Magic Number,MyAnimePlugin3.Windows,WideBannerWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\WideBannerWindow.cs,UpdateLayoutButton,The following statement contains a magic number: strLine = GUILocalizeStrings.Get (100);  
Magic Number,MyAnimePlugin3.Windows,WideBannerWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\WideBannerWindow.cs,UpdateLayoutButton,The following statement contains a magic number: strLine = GUILocalizeStrings.Get (417);  
Magic Number,MyAnimePlugin3.Windows,WideBannerWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\WideBannerWindow.cs,UpdateLayoutButton,The following statement contains a magic number: strLine = GUILocalizeStrings.Get (733);  
Magic Number,MyAnimePlugin3.Windows,WideBannerWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\WideBannerWindow.cs,UpdateLayoutButton,The following statement contains a magic number: strLine = GUILocalizeStrings.Get (101);  
Magic Number,MyAnimePlugin3.Windows,WideBannerWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\WideBannerWindow.cs,OnShowContextMenu,The following statement contains a magic number: try {  	GUIListItem currentitem = this.m_Facade.SelectedListItem;  	if (currentitem == null || !(currentitem.TVTag is TvDB_ImageWideBannerVM))  		return;  	TvDB_ImageWideBannerVM selectedBanner = currentitem.TVTag as TvDB_ImageWideBannerVM;  	IDialogbox dlg = (IDialogbox)GUIWindowManager.GetWindow ((int)GUIWindow.Window.WINDOW_DIALOG_MENU);  	if (dlg == null)  		return;  	dlg.Reset ();  	dlg.SetHeading ("Wide Banner");  	bool isDisabled = false;  	bool isDefault = false;  	isDisabled = selectedBanner.Enabled == 0 ? true : false;  	GUIListItem pItem;  	if (isDisabled) {  		pItem = new GUIListItem ("Enable");  		dlg.Add (pItem);  	}  	else {  		pItem = new GUIListItem ("Disable");  		dlg.Add (pItem);  	}  	if (!isDisabled) {  		if (!selectedBanner.IsImageDefault) {  			pItem = new GUIListItem ("Set as Default");  			dlg.Add (pItem);  		}  		if (selectedBanner.IsImageDefault) {  			pItem = new GUIListItem ("Remove as Default");  			dlg.Add (pItem);  		}  	}  	// lets show it  	dlg.DoModal (GUIWindowManager.ActiveWindow);  	if (dlg.SelectedId == 1)// enabled/disable  	 {  		bool endis = isDisabled;  		JMMServerHelper.EnableDisableWideBanner (endis' selectedBanner' AnimeID);  		ShowWideBanners ();  		return;  	}  	if (dlg.SelectedId == 2) {  		bool isdef = !selectedBanner.IsImageDefault;  		JMMServerHelper.SetDefaultWideBanner (isdef' selectedBanner' AnimeID);  		ShowWideBanners ();  		return;  	}  }  catch (Exception ex) {  	BaseConfig.MyAnimeLog.Write ("Exception in Wide Banner Chooser Context Menu: " + ex.Message);  	return;  }  
Magic Number,MyAnimePlugin3.Windows,WideBannerWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\WideBannerWindow.cs,OnShowContextMenu,The following statement contains a magic number: if (dlg.SelectedId == 2) {  	bool isdef = !selectedBanner.IsImageDefault;  	JMMServerHelper.SetDefaultWideBanner (isdef' selectedBanner' AnimeID);  	ShowWideBanners ();  	return;  }  
Duplicate Code,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,bgLoadFacade,The method contains a code clone-set at the following line numbers (starting from the method definition): ((31' 59)' (79' 107)' (127' 155))
Missing Default,MyAnimePlugin3,View,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\View.cs,ShowTypeToString,The following switch statement is missing a default case: switch (showType) {  case eShowType.show:  	return "show";  case eShowType.hide:  	return "hide";  case eShowType.ignore:  	return "-";  }  
Missing Default,MyAnimePlugin3,View,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\View.cs,NextShowType,The following switch statement is missing a default case: switch (showType) {  case eShowType.show:  	return eShowType.hide;  case eShowType.hide:  	return eShowType.ignore;  case eShowType.ignore:  	return eShowType.show;  }  
Missing Default,MyAnimePlugin3,View,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\View.cs,View,The following switch statement is missing a default case: switch (viewType) {  case eDefaultViewType.All:  	Name = "All";  	break;  case eDefaultViewType.Faves:  	Name = "Favorites";  	ShowTypeFavorite = eShowType.show;  	break;  case eDefaultViewType.FavesUnwatched:  	Name = "Unwatched Favorites";  	ShowTypeFavorite = eShowType.show;  	ShowTypeWatched = eShowType.hide;  	break;  case eDefaultViewType.CompleteSeries:  	Name = "Complete Series";  	ShowTypeCompleted = eShowType.show;  	break;  case eDefaultViewType.NewSeason:  	Name = "New Season";  	ShowTypeNewSeason = eShowType.show;  	break;  case eDefaultViewType.LastWatched:  	Name = "Last Watched";  	ShowTypeRecentlyWatched = eShowType.show;  	ShowTypeWatched = eShowType.hide;  	SortType = eSortType.WatchedDate;  	break;  case eDefaultViewType.MissingEps:  	Name = "Missing Episodes";  	ShowTypeMissingEpisodes = eShowType.show;  	break;  case eDefaultViewType.BluRay:  	Name = "Blu-Ray";  	ShowTypeBluRay = eShowType.show;  	break;  case eDefaultViewType.DVD:  	Name = "DVD";  	ShowTypeDVD = eShowType.show;  	break;  }  
Missing Default,MyAnimePlugin3,MA3WindowManager,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\MA3WindowManager.cs,HandleWindowChangeButton,The following switch statement is missing a default case: switch (controlID) {  case AnimeInfo:  	GUIWindowManager.CloseCurrentWindow ();  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.ANIMEINFO' false);  	return true;  case AnimeCharacters:  	GUIWindowManager.CloseCurrentWindow ();  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.CHARACTERS' false);  	return true;  case AnimeRelations:  	GUIWindowManager.CloseCurrentWindow ();  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.RELATIONS' false);  	return true;  case AnimeFanart:  	GUIWindowManager.CloseCurrentWindow ();  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.FANART' false);  	return true;  case AnimePosters:  	GUIWindowManager.CloseCurrentWindow ();  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.POSTERS' false);  	return true;  case AnimeWideBanners:  	GUIWindowManager.CloseCurrentWindow ();  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.WIDEBANNERS' false);  	return true;  case AnimeSimilar:  	GUIWindowManager.CloseCurrentWindow ();  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.SIMILAR' false);  	return true;  case ContinueWatching:  	GUIWindowManager.CloseCurrentWindow ();  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.WATCHING' false);  	return true;  case Utilities:  	GUIWindowManager.CloseCurrentWindow ();  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.ADMIN' false);  	return true;  case Calendar:  	GUIWindowManager.CloseCurrentWindow ();  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.CALENDAR' false);  	return true;  case Downloads:  	GUIWindowManager.CloseCurrentWindow ();  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.DOWNLOADS' false);  	return true;  case CollectionStats:  	GUIWindowManager.CloseCurrentWindow ();  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.COLLECTION' false);  	return true;  case Recommendations:  	GUIWindowManager.CloseCurrentWindow ();  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.RECOMMENDATIONS' false);  	return true;  case RandomSerEp:  	GUIWindowManager.CloseCurrentWindow ();  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.RANDOM' false);  	return true;  case Playlists:  	GUIWindowManager.CloseCurrentWindow ();  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.PLAYLISTS' false);  	return true;  }  
Missing Default,MyAnimePlugin3,ImageAllocator,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ImageAllocator.cs,GetGroupImage,The following switch statement is missing a default case: switch (viewMode) {  case GUIFacadeControl.Layout.LargeIcons:  	imgFileName = GetWideBannerAsFileName (grp);  	sz = BannerSize;  	break;  case GUIFacadeControl.Layout.List:  case GUIFacadeControl.Layout.AlbumView:  case GUIFacadeControl.Layout.Filmstrip:  case GUIFacadeControl.Layout.CoverFlow:  	imgFileName = GetPosterAsFileName (grp);  	sz = PosterSize;  	break;  }  
Missing Default,MyAnimePlugin3,ImageAllocator,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ImageAllocator.cs,GetGroupImageAsFileName,The following switch statement is missing a default case: switch (viewMode) {  case GUIFacadeControl.Layout.LargeIcons:  	imgFileName = GetWideBannerAsFileName (grp);  	break;  case GUIFacadeControl.Layout.List:  case GUIFacadeControl.Layout.AlbumView:  case GUIFacadeControl.Layout.Filmstrip:  case GUIFacadeControl.Layout.CoverFlow:  	imgFileName = GetPosterAsFileName (grp);  	break;  }  
Missing Default,MyAnimePlugin3,ImageAllocator,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ImageAllocator.cs,GetSeriesImage,The following switch statement is missing a default case: switch (viewMode) {  case GUIFacadeControl.Layout.LargeIcons:  	imgFileName = GetWideBannerAsFileName (ser.AniDB_Anime);  	sz = BannerSize;  	break;  case GUIFacadeControl.Layout.List:  case GUIFacadeControl.Layout.AlbumView:  case GUIFacadeControl.Layout.Filmstrip:  case GUIFacadeControl.Layout.CoverFlow:  	imgFileName = GetPosterAsFileName (ser.AniDB_Anime);  	sz = PosterSize;  	break;  }  
Missing Default,MyAnimePlugin3,ImageAllocator,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ImageAllocator.cs,GetSeriesImageAsFileName,The following switch statement is missing a default case: switch (viewMode) {  case GUIFacadeControl.Layout.LargeIcons:  	imgFileName = GetWideBannerAsFileName (ser.AniDB_Anime);  	break;  case GUIFacadeControl.Layout.List:  case GUIFacadeControl.Layout.AlbumView:  case GUIFacadeControl.Layout.Filmstrip:  case GUIFacadeControl.Layout.CoverFlow:  	imgFileName = GetPosterAsFileName (ser.AniDB_Anime);  	break;  }  
Missing Default,MyAnimePlugin3,ImageAllocator,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ImageAllocator.cs,GetAnimeImageAsFileName,The following switch statement is missing a default case: switch (viewMode) {  case GUIFacadeControl.Layout.LargeIcons:  	imgFileName = GetWideBannerAsFileName (anime);  	break;  case GUIFacadeControl.Layout.List:  case GUIFacadeControl.Layout.AlbumView:  case GUIFacadeControl.Layout.Filmstrip:  case GUIFacadeControl.Layout.CoverFlow:  	imgFileName = GetPosterAsFileName (anime);  	break;  }  
Missing Default,MyAnimePlugin3,Utils,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Utils.cs,PromptAniDBRating,The following switch statement is missing a default case: switch (dlg.SelectedId) {  case 1:  	selValue = (decimal)1;  	break;  case 2:  	selValue = (decimal)1.5;  	break;  case 3:  	selValue = (decimal)2;  	break;  case 4:  	selValue = (decimal)2.5;  	break;  case 5:  	selValue = (decimal)3;  	break;  case 6:  	selValue = (decimal)3.5;  	break;  case 7:  	selValue = (decimal)4;  	break;  case 8:  	selValue = (decimal)4.5;  	break;  case 9:  	selValue = (decimal)5;  	break;  case 10:  	selValue = (decimal)5.5;  	break;  case 11:  	selValue = (decimal)6;  	break;  case 12:  	selValue = (decimal)6.5;  	break;  case 13:  	selValue = (decimal)7;  	break;  case 14:  	selValue = (decimal)7.5;  	break;  case 15:  	selValue = (decimal)8;  	break;  case 16:  	selValue = (decimal)8.5;  	break;  case 17:  	selValue = (decimal)9;  	break;  case 18:  	selValue = (decimal)9.5;  	break;  case 19:  	selValue = (decimal)10;  	break;  }  
Missing Default,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,workerFacade_ProgressChanged,The following switch statement is missing a default case: switch (arg.Type) {  case BackGroundLoadingArgumentType.ListFullElement:  case BackGroundLoadingArgumentType.ListElementForDelayedImgLoading:  	List<GUIListItem> ls = arg.Argument as List<GUIListItem>;  	if (m_Facade != null && ls != null && ls.Count > 0) {  		foreach (GUIListItem gli in ls) {  			//BaseConfig.MyAnimeLog.Write("workerFacade_ProgressChanged - ListElementForDelayedImgLoading");  			// Messages are not recieved in OnMessage for Filmstrip' instead subscribe to OnItemSelected  			if (m_Facade.CurrentLayout == GUIFacadeControl.Layout.Filmstrip || m_Facade.CurrentLayout == GUIFacadeControl.Layout.CoverFlow)  				gli.OnItemSelected += new GUIListItem.ItemSelectedHandler (onFacadeItemSelected);  			AddFacadeItem (gli);  			if (arg.Type == BackGroundLoadingArgumentType.ListElementForDelayedImgLoading) {  				if (itemsForDelayedImgLoading == null)  					itemsForDelayedImgLoading = new List<GUIListItem> ();  				itemsForDelayedImgLoading.Add (gli);  			}  		}  		if (this.m_Facade.SelectedListItemIndex < 1) {  			this.m_Facade.Focus = true;  			SelectItem (arg.IndexArgument);  		}  	}  	break;  case BackGroundLoadingArgumentType.DelayedImgLoading:  	{  		if (itemsForDelayedImgLoading != null && itemsForDelayedImgLoading.Count > arg.IndexArgument) {  			string image = arg.Argument as string;  			itemsForDelayedImgLoading [arg.IndexArgument].IconImageBig = image;  		}  	}  	break;  case BackGroundLoadingArgumentType.DelayedImgInit:  	itemsForDelayedImgLoading = null;  	break;  case BackGroundLoadingArgumentType.SetFacadeMode:  	GUIFacadeControl.Layout viewMode = (GUIFacadeControl.Layout)arg.Argument;  	//setFacadeMode(viewMode);  	break;  case BackGroundLoadingArgumentType.ElementSelection:  	{  		// thread told us which element it'd like to select  		// however the user might have already started moving around  		// if that is the case' we don't select anything  		if (this.m_Facade != null && this.m_Facade.SelectedListItemIndex < 1) {  			this.m_Facade.Focus = true;  			SelectItem (arg.IndexArgument);  		}  	}  	break;  }  
Missing Default,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,bgLoadFacade,The following switch statement is missing a default case: switch (listLevel) {  #region Group Filters  case Listlevel.GroupFilter:  	{  		// List/Poster/Banner  		setGUIProperty ("SimpleCurrentView"' "Group Filters");  		if (groupViewMode != GUIFacadeControl.Layout.List) {  			// reinit the itemsList  			delayedImageLoading = true;  			ReportFacadeLoadingProgress (BackGroundLoadingArgumentType.DelayedImgInit' 0' null);  		}  		// text as usual  		ReportFacadeLoadingProgress (BackGroundLoadingArgumentType.SetFacadeMode' 0' GUIFacadeControl.Layout.List);  		if (workerFacade.CancellationPending)  			return;  		BaseConfig.MyAnimeLog.Write ("bgLoadFacde: Group Filters");  		groupFilters = FacadeHelper.GetGroupFilters ();  		type = BackGroundLoadingArgumentType.ListFullElement;  		setGUIProperty (guiProperty.GroupCount' groupFilters.Count.ToString ());  		foreach (GroupFilterVM grpFilter in groupFilters) {  			if (workerFacade.CancellationPending)  				return;  			try {  				item = null;  				SetGroupFilterListItem (ref item' grpFilter);  				if (curGroupFilter != null) {  					if (grpFilter.GroupFilterID.Value == curGroupFilter.GroupFilterID.Value) {  						selectedIndex = count;  					}  				}  				else {  					if (selectedIndex == -1)  						selectedIndex = count;  				}  				if (workerFacade.CancellationPending)  					return;  				else {  					list.Add (item);  				}  			}  			catch (Exception ex) {  				string msg = string.Format ("The 'LoadFacade' function has generated an error displaying list items: {0} - {1}"' listLevel' ex.ToString ());  				BaseConfig.MyAnimeLog.Write (msg);  			}  			count++;  		}  	}  	break;  #endregion  #region Group Filters - Sub  case Listlevel.GroupFilterSub:  	{  		// List/Poster/Banner  		setGUIProperty ("SimpleCurrentView"' curGroupFilter.GroupFilterName);  		if (groupViewMode != GUIFacadeControl.Layout.List) {  			// reinit the itemsList  			delayedImageLoading = true;  			ReportFacadeLoadingProgress (BackGroundLoadingArgumentType.DelayedImgInit' 0' null);  		}  		// text as usual  		ReportFacadeLoadingProgress (BackGroundLoadingArgumentType.SetFacadeMode' 0' GUIFacadeControl.Layout.List);  		if (workerFacade.CancellationPending)  			return;  		BaseConfig.MyAnimeLog.Write ("bgLoadFacde: Group Filters");  		groupFilters = FacadeHelper.GetGroupFilters ();  		type = BackGroundLoadingArgumentType.ListFullElement;  		setGUIProperty (guiProperty.GroupCount' "0");  		foreach (GroupFilterVM grpFilter in FacadeHelper.GetTopLevelPredefinedGroupFilters ()) {  			if (workerFacade.CancellationPending)  				return;  			try {  				item = null;  				SetGroupFilterListItem (ref item' grpFilter);  				if (curGroupFilter != null) {  					if (grpFilter.GroupFilterID.Value == curGroupFilter.GroupFilterID.Value) {  						selectedIndex = count;  					}  				}  				else {  					if (selectedIndex == -1)  						selectedIndex = count;  				}  				if (workerFacade.CancellationPending)  					return;  				else {  					list.Add (item);  				}  			}  			catch (Exception ex) {  				string msg = string.Format ("The 'LoadFacade' function has generated an error displaying list items: {0} - {1}"' listLevel' ex.ToString ());  				BaseConfig.MyAnimeLog.Write (msg);  			}  			count++;  		}  	}  	break;  #endregion  #region Group Filters - Sub2  case Listlevel.GroupFilterSub2:  	{  		// List/Poster/Banner  		setGUIProperty ("SimpleCurrentView"' curGroupFilter.GroupFilterName);  		if (groupViewMode != GUIFacadeControl.Layout.List) {  			// reinit the itemsList  			delayedImageLoading = true;  			ReportFacadeLoadingProgress (BackGroundLoadingArgumentType.DelayedImgInit' 0' null);  		}  		// text as usual  		ReportFacadeLoadingProgress (BackGroundLoadingArgumentType.SetFacadeMode' 0' GUIFacadeControl.Layout.List);  		if (workerFacade.CancellationPending)  			return;  		BaseConfig.MyAnimeLog.Write ("bgLoadFacde: Group Filters");  		groupFilters = FacadeHelper.GetGroupFilters ();  		type = BackGroundLoadingArgumentType.ListFullElement;  		setGUIProperty (guiProperty.GroupCount' "0");  		foreach (GroupFilterVM grpFilter in FacadeHelper.GetGroupFiltersForPredefined (curGroupFilterSub)) {  			if (workerFacade.CancellationPending)  				return;  			try {  				item = null;  				SetGroupFilterListItem (ref item' grpFilter);  				if (curGroupFilter != null) {  					if (grpFilter.GroupFilterID.Value == curGroupFilter.GroupFilterID.Value) {  						selectedIndex = count;  					}  				}  				else {  					if (selectedIndex == -1)  						selectedIndex = count;  				}  				if (workerFacade.CancellationPending)  					return;  				else {  					list.Add (item);  				}  			}  			catch (Exception ex) {  				string msg = string.Format ("The 'LoadFacade' function has generated an error displaying list items: {0} - {1}"' listLevel' ex.ToString ());  				BaseConfig.MyAnimeLog.Write (msg);  			}  			count++;  		}  	}  	break;  #endregion  #region Groups  case Listlevel.Group:  	{  		// List/Poster/Banner  		setGUIProperty ("SimpleCurrentView"' curGroupFilter.GroupFilterName);  		if (groupViewMode != GUIFacadeControl.Layout.List) {  			// reinit the itemsList  			delayedImageLoading = true;  			ReportFacadeLoadingProgress (BackGroundLoadingArgumentType.DelayedImgInit' 0' null);  		}  		if (groupViewMode != GUIFacadeControl.Layout.List) {  			// graphical  			ReportFacadeLoadingProgress (BackGroundLoadingArgumentType.SetFacadeMode' 0' GUIFacadeControl.Layout.AlbumView);  		}  		else {  			// text as usual  			ReportFacadeLoadingProgress (BackGroundLoadingArgumentType.SetFacadeMode' 0' GUIFacadeControl.Layout.List);  		}  		if (workerFacade.CancellationPending)  			return;  		if (curGroupFilterSub2 == null)  			groups = JMMServerHelper.GetAnimeGroupsForFilter (curGroupFilter);  		else {  			groups = new List<AnimeGroupVM> ();  			List<AnimeGroupVM> tempGroups = JMMServerHelper.GetAnimeGroupsForFilter (GroupFilterHelper.AllGroupsFilter);  			foreach (AnimeGroupVM grp in tempGroups) {  				if (curGroupFilterSub2.GroupFilterID.Value == Constants.StaticGF.Predefined_Categories_Child) {  					if (grp.Categories.Contains (curGroupFilterSub2.PredefinedCriteria))  						groups.Add (grp);  				}  				if (curGroupFilterSub2.GroupFilterID.Value == Constants.StaticGF.Predefined_Years_Child) {  					// find all the groups that qualify by this year  					int startYear = 0;  					if (!grp.Stat_AirDate_Min.HasValue)  						continue;  					startYear = grp.Stat_AirDate_Min.Value.Year;  					int endYear = int.MaxValue;  					if (grp.Stat_AirDate_Max.HasValue)  						endYear = grp.Stat_AirDate_Max.Value.Year;  					int critYear = 0;  					if (!int.TryParse (curGroupFilterSub2.PredefinedCriteria' out critYear))  						continue;  					if (critYear >= startYear && critYear <= endYear)  						groups.Add (grp);  				}  			}  		}  		// re-sort if user has set a quick sort  		if (GroupFilterQuickSorts.ContainsKey (curGroupFilter.GroupFilterID.Value)) {  			BaseConfig.MyAnimeLog.Write ("APPLYING QUICK SORT");  			GroupFilterSorting sortType = GroupFilterHelper.GetEnumForText_Sorting (GroupFilterQuickSorts [curGroupFilter.GroupFilterID.Value].SortType);  			SortPropOrFieldAndDirection sortProp = GroupFilterHelper.GetSortDescription (sortType' GroupFilterQuickSorts [curGroupFilter.GroupFilterID.Value].SortDirection);  			List<SortPropOrFieldAndDirection> sortCriteria = new List<SortPropOrFieldAndDirection> ();  			sortCriteria.Add (sortProp);  			groups = Sorting.MultiSort<AnimeGroupVM> (groups' sortCriteria);  		}  		// Update Series Count Property  		setGUIProperty (guiProperty.GroupCount' groups.Count.ToString ());  		type = (groupViewMode != GUIFacadeControl.Layout.List) ? BackGroundLoadingArgumentType.ListElementForDelayedImgLoading : BackGroundLoadingArgumentType.ListFullElement;  		int seriesCount = 0;  		double totalTime = 0;  		DateTime start = DateTime.Now;  		BaseConfig.MyAnimeLog.Write ("Building groups: " + curGroupFilter.GroupFilterName);  		foreach (AnimeGroupVM grp in groups) {  			if (workerFacade.CancellationPending)  				return;  			try {  				item = null;  				//BaseConfig.MyAnimeLog.Write(string.Format("{0} - {1}"' grp.GroupName' grp.AniDBRating));  				SetGroupListItem (ref item' grp);  				if (settings.HideWatchedFiles && grp.UnwatchedEpisodeCount <= 0) {  					//watched files should be hidden and entire group is watched  					// -> hide entire group  					continue;  				}  				seriesCount += grp.AllSeriesCount;  				if (curAnimeGroup != null) {  					if (grp.AnimeGroupID == curAnimeGroup.AnimeGroupID) {  						selectedIndex = count;  					}  				}  				else {  					if (selectedIndex == -1)  						selectedIndex = count;  				}  				if (workerFacade.CancellationPending)  					return;  				else {  					list.Add (item);  				}  			}  			catch (Exception ex) {  				string msg = string.Format ("The 'LoadFacade' function has generated an error displaying list items: {0} - {1}"' listLevel' ex.ToString ());  				BaseConfig.MyAnimeLog.Write (msg);  			}  			count++;  		}  		TimeSpan ts2 = DateTime.Now - start;  		totalTime += ts2.TotalMilliseconds;  		BaseConfig.MyAnimeLog.Write ("Total time for rendering groups: {0}-{1}"' groups.Count' totalTime);  		setGUIProperty (guiProperty.SeriesCount' seriesCount.ToString ());  	}  	break;  #endregion  #region Series  case Listlevel.Series:  	{  		// this level includes series as well as sub-groups  		if (seriesViewMode != GUIFacadeControl.Layout.List) {  			// reinit the itemsList  			delayedImageLoading = true;  			ReportFacadeLoadingProgress (BackGroundLoadingArgumentType.DelayedImgInit' 0' null);  		}  		if (workerFacade.CancellationPending)  			return;  		List<SortPropOrFieldAndDirection> sortCriteria = null;  		List<AnimeGroupVM> subGroups = curAnimeGroupViewed.SubGroups;  		if (subGroups.Count > 0) {  			sortCriteria = new List<SortPropOrFieldAndDirection> ();  			sortCriteria.Add (new SortPropOrFieldAndDirection ("SortName"' false' SortType.eString));  			subGroups = Sorting.MultiSort<AnimeGroupVM> (subGroups' sortCriteria);  		}  		// get the series for this group  		List<AnimeSeriesVM> seriesList = curAnimeGroupViewed.ChildSeries;  		if (seriesList.Count > 0) {  			sortCriteria = new List<SortPropOrFieldAndDirection> ();  			sortCriteria.Add (new SortPropOrFieldAndDirection ("AirDate"' false' SortType.eDateTime));  			seriesList = Sorting.MultiSort<AnimeSeriesVM> (seriesList' sortCriteria);  		}  		//if (seriesList.Count == 0)  		//	bFacadeEmpty = true;  		// Update Series Count Property  		setGUIProperty (guiProperty.SeriesCount' seriesList.Count.ToString ());  		// now sort the groups by air date  		type = BackGroundLoadingArgumentType.ListFullElement;  		foreach (AnimeGroupVM grp in subGroups) {  			if (workerFacade.CancellationPending)  				return;  			try {  				item = null;  				SetGroupListItem (ref item' grp);  				if (settings.HideWatchedFiles && grp.UnwatchedEpisodeCount <= 0) {  					//watched files should be hidden and entire group is watched  					// -> hide entire group  					continue;  				}  				if (workerFacade.CancellationPending)  					return;  				else {  					list.Add (item);  				}  			}  			catch (Exception ex) {  				string msg = string.Format ("The 'LoadFacade' function has generated an error displaying list items: {0} - {1}"' listLevel' ex.ToString ());  				BaseConfig.MyAnimeLog.Write (msg);  			}  		}  		foreach (AnimeSeriesVM ser in seriesList) {  			//BaseConfig.MyAnimeLog.Write("LoadFacade-Series:: {0}"' ser);  			if (workerFacade.CancellationPending)  				return;  			try {  				item = null;  				SetSeriesListItem (ref item' ser);  				if (settings.HideWatchedFiles && ser.UnwatchedEpisodeCount <= 0) {  					//watched files should be hidden and entire series is watched  					// -> hide entire series  					continue;  				}  				if (workerFacade.CancellationPending)  					return;  				else {  					list.Add (item);  				}  			}  			catch (Exception ex) {  				string msg = string.Format ("The 'LoadFacade' function has generated an error displaying list items: {0} - {1}"' listLevel' ex.ToString ());  				BaseConfig.MyAnimeLog.Write (msg);  			}  			count++;  		}  	}  	break;  #endregion  #region Episode Types  case Listlevel.EpisodeTypes:  	{  		if (workerFacade.CancellationPending)  			return;  		//List<AnimeEpisodeType> anEpTypes = AnimeSeries.GetEpisodeTypes(curAnimeSeries.AnimeSeriesID.Value);  		type = BackGroundLoadingArgumentType.ListFullElement;  		foreach (AnimeEpisodeTypeVM anEpType in curAnimeSeries.EpisodeTypesToDisplay) {  			item = null;  			SetEpisodeTypeListItem (ref item' anEpType);  			if (workerFacade.CancellationPending)  				return;  			else {  				list.Add (item);  			}  			count++;  		}  	}  	break;  #endregion  #region Episodes  case Listlevel.Episode:  	{  		if (workerFacade.CancellationPending)  			return;  		if (curAnimeSeries == null)  			return;  		// get the episodes for this series / episode types  		//BaseConfig.MyAnimeLog.Write("GetEpisodes:: {0}"' curAnimeSeries.AnimeSeriesID.Value);  		//List<AnimeEpisode> episodeList = AnimeSeries.GetEpisodes(curAnimeSeries.AnimeSeriesID.Value);  		curAnimeSeries.RefreshEpisodes ();  		List<AnimeEpisodeVM> episodeList = curAnimeSeries.GetEpisodesToDisplay (curAnimeEpisodeType.EpisodeType);  		// Update Series Count Property  		//setGUIProperty(guiProperty.SeriesCount' episodeList.Count.ToString());  		bool foundFirstUnwatched = false;  		type = BackGroundLoadingArgumentType.ListFullElement;  		foreach (AnimeEpisodeVM ep in episodeList) {  			//BaseConfig.MyAnimeLog.Write("LoadFacade-Episodes:: {0}"' ep);  			if (workerFacade.CancellationPending)  				return;  			try {  				item = null;  				bool isWatched = SetEpisodeListItem (ref item' ep);  				if (isWatched && settings.HideWatchedFiles)  					continue;  				if (!foundFirstUnwatched && !isWatched && ep.LocalFileCount > 0) {  					selectedIndex = count;  					foundFirstUnwatched = true;  				}  				if (workerFacade.CancellationPending)  					return;  				else {  					list.Add (item);  				}  			}  			catch (Exception ex) {  				string msg = string.Format ("The 'LoadFacade' function has generated an error displaying list items: {0} - {1}"' listLevel' ex.ToString ());  				BaseConfig.MyAnimeLog.Write (msg);  			}  			count++;  		}  		SetFanartForEpisodes ();  	}  	setGUIProperty (guiProperty.EpisodeCount' count.ToString ());  	break;  #endregion  }  
Missing Default,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetEpisodeTypeListItem,The following switch statement is missing a default case: switch (style) {  case View.eLabelStyleGroups.WatchedUnwatched:  	string space = " ";  	item.Label3 = space + watched.ToString ().PadLeft (3' '0');  	item.IconImage = sIconList;  	item.Label2 = unwatched.ToString ().PadLeft (3' '0');  	break;  /*case View.eLabelStyleGroups.Unwatched:  						if (unwatched > 0) 						{ 							item.IconImage = sUnWatchedFilename; 							item.Label3 = unwatched.ToString() + " New"; 							item.Label2 = "  "; 						} 						else 						{ 							item.Label2 = "  "; 							item.Label3 = "  "; 						} 						break;  					case View.eLabelStyleGroups.TotalEpisodes:  						int totalEps = unwatched + watched;  						item.IconImage = sUnWatchedFilename; 						item.Label3 = totalEps.ToString() + " Episodes"; 						item.Label2 = "  ";  						break;*/}  
Missing Default,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetSeriesListItem,The following switch statement is missing a default case: switch (style) {  case View.eLabelStyleGroups.WatchedUnwatched:  	string unwatched = ser.UnwatchedEpisodeCount.ToString ();  	string watched = ser.WatchedEpisodeCount.ToString ();  	string space = " ";  	item.Label3 = space + watched.ToString ().PadLeft (3' '0');  	item.IconImage = sIconList;  	item.Label2 = unwatched.ToString ().PadLeft (3' '0');  	break;  case View.eLabelStyleGroups.Unwatched:  	if (ser.UnwatchedEpisodeCount > 0) {  		item.IconImage = sUnWatchedFilename;  		item.Label3 = ser.UnwatchedEpisodeCount.ToString () + " New";  		item.Label2 = "  ";  	}  	else {  		item.Label2 = "  ";  		item.Label3 = "  ";  	}  	break;  case View.eLabelStyleGroups.TotalEpisodes:  	int totalEps = ser.UnwatchedEpisodeCount + ser.WatchedEpisodeCount;  	item.IconImage = sUnWatchedFilename;  	item.Label3 = totalEps.ToString () + " Episodes";  	item.Label2 = "  ";  	break;  }  
Missing Default,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,SetGroupListItem,The following switch statement is missing a default case: switch (style) {  case View.eLabelStyleGroups.WatchedUnwatched:  	// Available (Files are Local) Images  	string unwatched = grp.UnwatchedEpisodeCount.ToString ();  	string watched = grp.WatchedEpisodeCount.ToString ();  	string space = " ";  	//item.Label3 = space + watched.ToString().PadLeft(3' '0');  	item.Label3 = space + watched.ToString ().PadLeft (3' '0');  	item.IconImage = sIconList;  	item.Label2 = unwatched.ToString ().PadLeft (3' '0');  	break;  /*case View.eLabelStyleGroups.Unwatched:  						if (grp.UnwatchedEpisodeCount > 0) 						{ 							item.IconImage = sUnWatchedFilename; 							item.Label3 = grp.UnwatchedEpisodeCount.ToString() + " New"; 							item.Label2 = "  "; 						} 						else 						{ 							item.Label2 = "  "; 							item.Label3 = "  "; 						} 						break;  					case View.eLabelStyleGroups.TotalEpisodes:  						int totalEps = grp.UnwatchedEpisodeCount + grp.WatchedEpisodeCount;  						item.IconImage = sUnWatchedFilename; 						item.Label3 = totalEps.ToString() + " Eps"; 						item.Label2 = "  ";  						break;*/}  
Missing Default,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnClicked,The following switch statement is missing a default case: switch (listLevel) {  case Listlevel.GroupFilter:  	curGroupFilter = this.m_Facade.SelectedListItem.TVTag as GroupFilterVM;  	if (curGroupFilter == null)  		return;  	if (curGroupFilter.GroupFilterID.Value == Constants.StaticGF.Predefined) {  		listLevel = Listlevel.GroupFilterSub;  		curGroupFilterSub2 = null;  		curGroupFilterSub = null;  	}  	else {  		listLevel = Listlevel.Group;  		curGroupFilterSub2 = null;  		curGroupFilterSub = null;  	}  	LoadFacade ();  	this.m_Facade.Focus = true;  	break;  case Listlevel.GroupFilterSub:  	curGroupFilterSub = this.m_Facade.SelectedListItem.TVTag as GroupFilterVM;  	if (curGroupFilterSub == null)  		return;  	curGroupFilterSub2 = null;  	listLevel = Listlevel.GroupFilterSub2;  	LoadFacade ();  	this.m_Facade.Focus = true;  	break;  case Listlevel.GroupFilterSub2:  	curGroupFilterSub2 = this.m_Facade.SelectedListItem.TVTag as GroupFilterVM;  	if (curGroupFilterSub2 == null)  		return;  	listLevel = Listlevel.Group;  	LoadFacade ();  	this.m_Facade.Focus = true;  	break;  case Listlevel.Group:  	curAnimeGroup = this.m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  	if (curAnimeGroup == null)  		return;  	curAnimeGroupViewed = curAnimeGroup;  	// e.g. if there is only one series for the group' show the episode types  	// if there is only for episode type for the series show the episodes  	ShowChildrenLevelForGroup ();  	LoadFacade ();  	this.m_Facade.Focus = true;  	break;  case Listlevel.Series:  	if (this.m_Facade.SelectedListItem.TVTag == null)  		return;  	// sub groups  	if (this.m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeGroupVM)) {  		curAnimeGroup = this.m_Facade.SelectedListItem.TVTag as AnimeGroupVM;  		if (curAnimeGroup == null)  			return;  		curAnimeGroupViewed = curAnimeGroup;  		ShowChildrenLevelForGroup ();  	}  	else if (this.m_Facade.SelectedListItem.TVTag.GetType () == typeof(AnimeSeriesVM)) {  		curAnimeSeries = this.m_Facade.SelectedListItem.TVTag as AnimeSeriesVM;  		if (curAnimeSeries == null)  			return;  		ShowChildrenLevelForSeries ();  	}  	LoadFacade ();  	this.m_Facade.Focus = true;  	break;  case Listlevel.EpisodeTypes:  	curAnimeEpisodeType = this.m_Facade.SelectedListItem.TVTag as AnimeEpisodeTypeVM;  	if (curAnimeEpisodeType == null)  		return;  	listLevel = Listlevel.Episode;  	SetFanartForEpisodes ();  	LoadFacade ();  	this.m_Facade.Focus = true;  	break;  case Listlevel.Episode:  	this.curAnimeEpisode = this.m_Facade.SelectedListItem.TVTag as AnimeEpisodeVM;  	if (curAnimeEpisode == null)  		return;  	BaseConfig.MyAnimeLog.Write ("Selected to play: {0}"' curAnimeEpisode.EpisodeNumberAndName);  	vidHandler.ResumeOrPlay (curAnimeEpisode);  	break;  }  
Missing Default,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnSearchAction,The following switch statement is missing a default case: switch (action) {  case SearchAction.ToggleMode:  	search.Input = string.Empty;  	searchText = string.Empty;  	searchMatch = string.Empty;  	search.Mode = (search.Mode == SearchMode.text) ? SearchMode.t9 : SearchMode.text;  	settings.FindMode = search.Mode;  	settings.Save ();  	break;  case SearchAction.ToggleStartWord:  	search.StartWord = !search.StartWord;  	settings.FindStartWord = search.StartWord;  	settings.Save ();  	break;  case SearchAction.NextMatch:  	DoSearch (m_Facade.SelectedListItemIndex + 1);  	break;  case SearchAction.DeleteChar:  	if (search.Input.Length > 0) {  		if (settings.FindFilter)  			SaveOrRestoreFacadeItems (false);  		search.Input = search.Input.Remove (search.Input.Length - 1);  		DoSearch (m_Facade.SelectedListItemIndex);  	}  	break;  case SearchAction.EndSearch:  	UpdateSearchPanel (false);  	return;  }  
Missing Default,MyAnimePlugin3,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\MainWindow.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (listLevel) {  case Listlevel.GroupFilter:  	ShowContextMenuGroupFilter ("");  	break;  case Listlevel.Group:  	ShowContextMenuGroup ("");  	break;  case Listlevel.Series:  	ShowContextMenuSeries ("");  	break;  case Listlevel.EpisodeTypes:  	break;  case Listlevel.Episode:  	ShowContextMenuEpisode ("");  	break;  }  
Missing Default,MyAnimePlugin3.ConfigFiles,frmConfig,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\frmConfig.cs,cboEpisodeFormat_SelectedIndexChanged,The following switch statement is missing a default case: switch (cboEpisodeFormat.SelectedIndex) {  case 0:  	lblDisplayEpsDesc.Text = "Episode Number (e.g. 13)";  	break;  case 1:  	lblDisplayEpsDesc.Text = "Episode Title (e.g Destined Meeting)";  	break;  }  
Missing Default,MyAnimePlugin3.ConfigFiles,frmConfig,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ConfigFiles\frmConfig.cs,cboFileFormat_SelectedIndexChanged,The following switch statement is missing a default case: switch (cboFileFormat.SelectedIndex) {  case 0:  	lblFileSelectionVars.Text = "Group (e.g. Datte Bayo)";  	break;  case 1:  	lblFileSelectionVars.Text = "Group Short (e.g DB)";  	break;  case 2:  	lblFileSelectionVars.Text = "Audio Codec (e.g OGG Vorbis)";  	break;  case 3:  	lblFileSelectionVars.Text = "File Codec (e.g XVid)";  	break;  case 4:  	lblFileSelectionVars.Text = "File Res (e.g 1280x720)";  	break;  case 5:  	lblFileSelectionVars.Text = "File Source (e.g DVD)";  	break;  }  
Missing Default,MyAnimePlugin3.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadHelper.cs,GetTorrentSourceDescription,The following switch statement is missing a default case: switch (source) {  case TorrentSource.AnimeSuki:  	return MyAnimePlugin3.Constants.TorrentSourceNames.AnimeSuki;  case TorrentSource.BakaBT:  	return MyAnimePlugin3.Constants.TorrentSourceNames.BakaBT;  case TorrentSource.BakaUpdates:  	return MyAnimePlugin3.Constants.TorrentSourceNames.BakaUpdates;  case TorrentSource.Nyaa:  	return MyAnimePlugin3.Constants.TorrentSourceNames.Nyaa;  case TorrentSource.TokyoToshokan:  	return MyAnimePlugin3.Constants.TorrentSourceNames.TT;  case TorrentSource.AnimeBytes:  	return MyAnimePlugin3.Constants.TorrentSourceNames.AnimeBytes;  }  
Missing Default,MyAnimePlugin3.Downloads,DownloadSearchCriteria,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Downloads\DownloadSearchCriteria.cs,ToString,The following switch statement is missing a default case: switch (searchType) {  case DownloadSearchType.Episode:  	ret = "Episode";  	break;  case DownloadSearchType.Manual:  	ret = "Manual";  	break;  case DownloadSearchType.Series:  	ret = "Anime";  	break;  }  
Missing Default,MyAnimePlugin3.ViewModel,FanartContainer,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\FanartContainer.cs,FanartContainer,The following switch statement is missing a default case: switch (ImageType) {  case ImageEntityType.TvDB_FanArt:  	TvDB_ImageFanartVM tvFanart = FanartObject as TvDB_ImageFanartVM;  	IsImageEnabled = tvFanart.Enabled == 1;  	IsImageDefault = tvFanart.IsImageDefault;  	FanartSource = "TvDB";  	break;  case ImageEntityType.MovieDB_FanArt:  	MovieDB_FanartVM movieFanart = FanartObject as MovieDB_FanartVM;  	IsImageEnabled = movieFanart.Enabled == 1;  	IsImageDefault = movieFanart.IsImageDefault;  	FanartSource = "MovieDB";  	break;  case ImageEntityType.Trakt_Fanart:  	Trakt_ImageFanartVM traktFanart = FanartObject as Trakt_ImageFanartVM;  	IsImageEnabled = traktFanart.Enabled == 1;  	IsImageDefault = traktFanart.IsImageDefault;  	FanartSource = "Trakt";  	break;  }  
Missing Default,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,SetDefaultPoster,The following switch statement is missing a default case: switch (poster.ImageType) {  case ImageEntityType.TvDB_Cover:  	TvDB_ImagePosterVM tvPoster = poster.PosterObject as TvDB_ImagePosterVM;  	JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' animeID' tvPoster.TvDB_ImagePosterID' (int)ImageEntityType.TvDB_Cover' (int)ImageSizeType.Poster);  	tvPoster.IsImageDefault = isDefault;  	break;  case ImageEntityType.Trakt_Poster:  	Trakt_ImagePosterVM traktPoster = poster.PosterObject as Trakt_ImagePosterVM;  	JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' animeID' traktPoster.Trakt_ImagePosterID' (int)ImageEntityType.Trakt_Poster' (int)ImageSizeType.Poster);  	traktPoster.IsImageDefault = isDefault;  	break;  case ImageEntityType.AniDB_Cover:  	AniDB_AnimeVM anime = poster.PosterObject as AniDB_AnimeVM;  	JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' animeID' anime.AnimeID' (int)ImageEntityType.AniDB_Cover' (int)ImageSizeType.Poster);  	anime.IsImageDefault = isDefault;  	break;  case ImageEntityType.MovieDB_Poster:  	MovieDB_PosterVM moviePoster = poster.PosterObject as MovieDB_PosterVM;  	JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' animeID' moviePoster.MovieDB_PosterID' (int)ImageEntityType.MovieDB_Poster' (int)ImageSizeType.Poster);  	moviePoster.IsImageDefault = isDefault;  	break;  }  
Missing Default,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,EnableDisablePoster,The following switch statement is missing a default case: switch (poster.ImageType) {  case ImageEntityType.TvDB_Cover:  	TvDB_ImagePosterVM tvPoster = poster.PosterObject as TvDB_ImagePosterVM;  	JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' tvPoster.TvDB_ImagePosterID' (int)ImageEntityType.TvDB_Cover);  	tvPoster.Enabled = enabled ? 1 : 0;  	break;  case ImageEntityType.Trakt_Poster:  	Trakt_ImagePosterVM traktPoster = poster.PosterObject as Trakt_ImagePosterVM;  	JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' traktPoster.Trakt_ImagePosterID' (int)ImageEntityType.Trakt_Poster);  	traktPoster.Enabled = enabled ? 1 : 0;  	break;  case ImageEntityType.AniDB_Cover:  	AniDB_AnimeVM anime = poster.PosterObject as AniDB_AnimeVM;  	JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' anime.AnimeID' (int)ImageEntityType.AniDB_Cover);  	anime.ImageEnabled = enabled ? 1 : 0;  	break;  case ImageEntityType.MovieDB_Poster:  	MovieDB_PosterVM moviePoster = poster.PosterObject as MovieDB_PosterVM;  	JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' moviePoster.MovieDB_PosterID' (int)ImageEntityType.MovieDB_Poster);  	moviePoster.Enabled = enabled ? 1 : 0;  	break;  }  
Missing Default,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,SetDefaultFanart,The following switch statement is missing a default case: switch (fanart.ImageType) {  case ImageEntityType.TvDB_FanArt:  	TvDB_ImageFanartVM tvFanart = fanart.FanartObject as TvDB_ImageFanartVM;  	JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' animeID' tvFanart.TvDB_ImageFanartID' (int)ImageEntityType.TvDB_FanArt' (int)ImageSizeType.Fanart);  	tvFanart.IsImageDefault = isDefault;  	break;  case ImageEntityType.Trakt_Fanart:  	Trakt_ImageFanartVM traktFanart = fanart.FanartObject as Trakt_ImageFanartVM;  	JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' animeID' traktFanart.Trakt_ImageFanartID' (int)ImageEntityType.Trakt_Fanart' (int)ImageSizeType.Fanart);  	traktFanart.IsImageDefault = isDefault;  	break;  case ImageEntityType.MovieDB_FanArt:  	MovieDB_FanartVM movieFanart = fanart.FanartObject as MovieDB_FanartVM;  	JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' animeID' movieFanart.MovieDB_FanartID' (int)ImageEntityType.MovieDB_FanArt' (int)ImageSizeType.Fanart);  	movieFanart.IsImageDefault = isDefault;  	break;  }  
Missing Default,MyAnimePlugin3.ViewModel,JMMServerHelper,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\JMMServerHelper.cs,EnableDisableFanart,The following switch statement is missing a default case: switch (fanart.ImageType) {  case ImageEntityType.TvDB_FanArt:  	TvDB_ImageFanartVM tvFanart = fanart.FanartObject as TvDB_ImageFanartVM;  	JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' tvFanart.TvDB_ImageFanartID' (int)ImageEntityType.TvDB_FanArt);  	tvFanart.Enabled = enabled ? 1 : 0;  	break;  case ImageEntityType.Trakt_Fanart:  	Trakt_ImageFanartVM traktFanart = fanart.FanartObject as Trakt_ImageFanartVM;  	JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' traktFanart.Trakt_ImageFanartID' (int)ImageEntityType.Trakt_Fanart);  	traktFanart.Enabled = enabled ? 1 : 0;  	break;  case ImageEntityType.MovieDB_FanArt:  	MovieDB_FanartVM movieFanart = fanart.FanartObject as MovieDB_FanartVM;  	JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' movieFanart.MovieDB_FanartID' (int)ImageEntityType.MovieDB_FanArt);  	movieFanart.Enabled = enabled ? 1 : 0;  	break;  }  
Missing Default,MyAnimePlugin3.ViewModel,PosterContainer,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\ViewModel\PosterContainer.cs,PosterContainer,The following switch statement is missing a default case: switch (ImageType) {  case ImageEntityType.AniDB_Cover:  	AniDB_AnimeVM anime = PosterObject as AniDB_AnimeVM;  	IsImageEnabled = anime.ImageEnabled == 1;  	IsImageDefault = anime.IsImageDefault;  	PosterSource = "AniDB";  	break;  case ImageEntityType.TvDB_Cover:  	TvDB_ImagePosterVM tvPoster = PosterObject as TvDB_ImagePosterVM;  	IsImageEnabled = tvPoster.Enabled == 1;  	IsImageDefault = tvPoster.IsImageDefault;  	PosterSource = "TvDB";  	break;  case ImageEntityType.MovieDB_Poster:  	MovieDB_PosterVM moviePoster = PosterObject as MovieDB_PosterVM;  	IsImageEnabled = moviePoster.Enabled == 1;  	IsImageDefault = moviePoster.IsImageDefault;  	PosterSource = "MovieDB";  	break;  case ImageEntityType.Trakt_Poster:  	Trakt_ImagePosterVM traktPoster = PosterObject as Trakt_ImagePosterVM;  	IsImageEnabled = traktPoster.Enabled == 1;  	IsImageDefault = traktPoster.IsImageDefault;  	PosterSource = "Trakt";  	break;  }  
Missing Default,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,LoadData,The following switch statement is missing a default case: switch (MainWindow.CurrentCalendarButton) {  case 3:  	btnCurrentMinusOne.Focus = true;  	break;  case 4:  	btnCurrentPlusOne.Focus = true;  	break;  }  
Missing Default,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message) {  case GUIMessage.MessageType.GUI_MSG_ITEM_FOCUS_CHANGED: {  	//BaseConfig.MyAnimeLog.Write("GUI_MSG_ITEM_FOCUS_CHANGED: {0}"' message.SenderControlId.ToString());  	break;  }  case GUIMessage.MessageType.GUI_MSG_SETFOCUS: {  	//BaseConfig.MyAnimeLog.Write("GUI_MSG_SETFOCUS: {0}"' message..ToString());  	break;  }  }  
Missing Default,MyAnimePlugin3.Windows,CalendarWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\CalendarWindow.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId) {  case 1:  	AniDB_AnimeVM anime2 = null;  	if ((anime2 = this.m_Facade.SelectedListItem.TVTag as AniDB_AnimeVM) != null) {  		DownloadHelper.SearchAnime (anime2);  	}  	break;  case 2:  	AniDB_AnimeVM anime3 = null;  	if ((anime3 = this.m_Facade.SelectedListItem.TVTag as AniDB_AnimeVM) != null) {  		BookmarkedAnimeVM bookmark = new BookmarkedAnimeVM ();  		bookmark.AnimeID = anime3.AnimeID;  		bookmark.Downloading = 0;  		bookmark.Notes = "";  		bookmark.Priority = 1;  		if (bookmark.Save ()) {  			Utils.DialogMsg ("Success"' "Bookmark Created");  		}  	}  	break;  case 3:  	AniDB_AnimeVM anime4 = null;  	if ((anime4 = this.m_Facade.SelectedListItem.TVTag as AniDB_AnimeVM) != null) {  		JMMServerBinary.Contract_AnimeSeries_SaveResponse resp = JMMServerVM.Instance.clientBinaryHTTP.CreateSeriesFromAnime (anime4.AnimeID' null' JMMServerVM.Instance.CurrentUser.JMMUserID);  		if (string.IsNullOrEmpty (resp.ErrorMessage))  			Utils.DialogMsg ("Success"' "Series Created");  		else  			Utils.DialogMsg ("Error"' resp.ErrorMessage);  	}  	break;  }  
Missing Default,MyAnimePlugin3.Windows,ContinueWatchingWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\ContinueWatchingWindow.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedLabel) {  case 0:  	ep.ToggleWatchedStatus (true);  	LoadData ();  	break;  case 1:  	if (ep.AnimeSeries == null)  		return;  	JMMServerBinary.Contract_AnimeEpisode contract = JMMServerVM.Instance.clientBinaryHTTP.GetPreviousEpisodeForUnwatched (ep.AnimeSeries.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (contract == null) {  		Utils.DialogMsg ("Error"' "Previous episode not found");  		return;  	}  	AnimeEpisodeVM epPrev = new AnimeEpisodeVM (contract);  	MainWindow.vidHandler.ResumeOrPlay (epPrev);  	break;  case 2:  	if (ep.AnimeSeries == null)  		return;  	MainWindow.curGroupFilter = GroupFilterHelper.AllGroupsFilter;  	// find the group for this series  	AnimeGroupVM grp = JMMServerHelper.GetGroup (ep.AnimeSeries.AnimeGroupID);  	if (grp == null) {  		BaseConfig.MyAnimeLog.Write ("Group not found");  		return;  	}  	MainWindow.curAnimeGroup = grp;  	MainWindow.curAnimeGroupViewed = grp;  	MainWindow.curAnimeSeries = ep.AnimeSeries;  	bool foundEpType = false;  	foreach (AnimeEpisodeTypeVM anEpType in ep.AnimeSeries.EpisodeTypesToDisplay) {  		if (anEpType.EpisodeType == enEpisodeType.Episode) {  			MainWindow.curAnimeEpisodeType = anEpType;  			foundEpType = true;  			break;  		}  	}  	if (!foundEpType)  		return;  	MainWindow.listLevel = Listlevel.Episode;  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.MAIN' false);  	break;  case 3:  	if (ep.AnimeSeries == null)  		return;  	MainWindow.GlobalSeriesID = ep.AnimeSeries.AnimeSeriesID.Value;  	GUIWindowManager.ActivateWindow (Constants.WindowIDs.ANIMEINFO' false);  	break;  }  
Missing Default,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,DisplayTorrentFileDetails,The following switch statement is missing a default case: switch ((TorrentFilePriority)tor.Priority) {  case TorrentFilePriority.DontDownload:  	pri = "Don't Download";  	break;  case TorrentFilePriority.High:  	pri = "High";  	break;  case TorrentFilePriority.Low:  	pri = "Low";  	break;  case TorrentFilePriority.Medium:  	pri = "Medium";  	break;  }  
Missing Default,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowContextMenuSearch,The following switch statement is missing a default case: switch (dlg.SelectedLabel) {  case 0:  	if (torLink != null) {  		MainWindow.uTorrent.AddTorrentFromURL (torLink.TorrentDownloadLink);  		LoadUTorrentListAsync ();  	}  	break;  case 1:  	string criteria = "";  	if (Utils.DialogText (ref criteria' GetID)) {  		MainWindow.currentDownloadSearch = new DownloadSearchCriteria (DownloadSearchType.Manual' criteria);  		PerformTorrentSearchAsync ();  	}  	break;  case 2:  	ShowRecentSearches ();  	break;  case 3:  	MainWindow.downloadSearchHistory.Clear ();  	MainWindow.downloadSearchResultsHistory.Clear ();  	setGUIProperty ("Search.ResultDescription"' "-");  	setGUIProperty ("Search.Summary"' "-");  	if (dummyPageSearch.Visible)  		m_Facade.Clear ();  	break;  }  
Missing Default,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowContextMenuBrowse,The following switch statement is missing a default case: switch (dlg.SelectedLabel) {  case 0:  	if (torLink != null) {  		MainWindow.uTorrent.AddTorrentFromURL (torLink.TorrentDownloadLink);  		LoadUTorrentListAsync ();  	}  	break;  case 1:  	ShowBrowseSources (torLink);  	break;  }  
Missing Default,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowBrowseSources,The following switch statement is missing a default case: switch (dlg.SelectedLabel) {  case 0:  	ShowContextMenuBrowse (torLink);  	return;  case 1:  	curBrowseSource = TorrentSource.AnimeSuki;  	break;  case 2:  	curBrowseSource = TorrentSource.BakaUpdates;  	break;  case 3:  	curBrowseSource = TorrentSource.Nyaa;  	break;  case 4:  	curBrowseSource = TorrentSource.TokyoToshokan;  	break;  case 5:  	curBrowseSource = TorrentSource.BakaBT;  	break;  case 6:  	curBrowseSource = TorrentSource.AnimeBytes;  	break;  }  
Missing Default,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowContextMenuTorrents,The following switch statement is missing a default case: switch (dlg.SelectedLabel) {  case 0:  	MainWindow.uTorrent.StopTorrent (tor.Hash);  	LoadUTorrentListAsync ();  	break;  case 1:  	MainWindow.uTorrent.StartTorrent (tor.Hash);  	LoadUTorrentListAsync ();  	break;  case 2:  	MainWindow.uTorrent.PauseTorrent (tor.Hash);  	LoadUTorrentListAsync ();  	break;  case 3:  	MainWindow.uTorrent.RemoveTorrent (tor.Hash);  	LoadUTorrentListAsync ();  	break;  case 4:  	MainWindow.uTorrent.RemoveTorrentAndData (tor.Hash);  	LoadUTorrentListAsync ();  	break;  }  
Missing Default,MyAnimePlugin3.Windows,DownloadsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\DownloadsWindow.cs,ShowContextMenuTorrentFiles,The following switch statement is missing a default case: switch (dlg.SelectedLabel) {  case 0:  	MainWindow.uTorrent.FileSetPriority (curTorrent.Hash' idx' TorrentFilePriority.High);  	ShowPageTorrentFiles ();  	break;  case 1:  	MainWindow.uTorrent.FileSetPriority (curTorrent.Hash' idx' TorrentFilePriority.Medium);  	ShowPageTorrentFiles ();  	break;  case 2:  	MainWindow.uTorrent.FileSetPriority (curTorrent.Hash' idx' TorrentFilePriority.Low);  	ShowPageTorrentFiles ();  	break;  case 3:  	MainWindow.uTorrent.FileSetPriority (curTorrent.Hash' idx' TorrentFilePriority.DontDownload);  	ShowPageTorrentFiles ();  	break;  }  
Missing Default,MyAnimePlugin3.Windows,FanartWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\FanartWindow.cs,UpdateLayoutButton,The following switch statement is missing a default case: switch (view) {  case GUIFacadeControl.Layout.List:  	strLine = GUILocalizeStrings.Get (101);  	break;  case GUIFacadeControl.Layout.SmallIcons:  	strLine = GUILocalizeStrings.Get (100);  	break;  case GUIFacadeControl.Layout.LargeIcons:  	strLine = GUILocalizeStrings.Get (417);  	break;  case GUIFacadeControl.Layout.Filmstrip:  	strLine = GUILocalizeStrings.Get (733);  	break;  case GUIFacadeControl.Layout.CoverFlow:  	strLine = "CoverFlow";  	break;  case GUIFacadeControl.Layout.Playlist:  	strLine = GUILocalizeStrings.Get (101);  	break;  }  
Missing Default,MyAnimePlugin3.Windows,FanartWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\FanartWindow.cs,OnClicked,The following switch statement is missing a default case: switch (CurrentView) {  case GUIFacadeControl.Layout.List:  	CurrentView = GUIFacadeControl.Layout.Playlist;  	if (!AllowView (CurrentView) || m_Facade.PlayListLayout == null) {  		shouldContinue = true;  	}  	else {  		m_Facade.CurrentLayout = GUIFacadeControl.Layout.Playlist;  		BaseConfig.Settings.LastFanartViewMode = GUIFacadeControl.Layout.Playlist;  		BaseConfig.Settings.Save ();  	}  	break;  case GUIFacadeControl.Layout.Playlist:  	CurrentView = GUIFacadeControl.Layout.SmallIcons;  	if (!AllowView (CurrentView) || m_Facade.ThumbnailLayout == null) {  		shouldContinue = true;  	}  	else {  		m_Facade.CurrentLayout = GUIFacadeControl.Layout.SmallIcons;  		BaseConfig.Settings.LastFanartViewMode = GUIFacadeControl.Layout.SmallIcons;  		BaseConfig.Settings.Save ();  	}  	break;  case GUIFacadeControl.Layout.SmallIcons:  	CurrentView = GUIFacadeControl.Layout.LargeIcons;  	if (!AllowView (CurrentView) || m_Facade.ThumbnailLayout == null) {  		shouldContinue = true;  	}  	else {  		m_Facade.CurrentLayout = GUIFacadeControl.Layout.LargeIcons;  		BaseConfig.Settings.LastFanartViewMode = GUIFacadeControl.Layout.LargeIcons;  		BaseConfig.Settings.Save ();  	}  	break;  case GUIFacadeControl.Layout.LargeIcons:  	CurrentView = GUIFacadeControl.Layout.Filmstrip;  	if (!AllowView (CurrentView) || m_Facade.FilmstripLayout == null) {  		shouldContinue = true;  	}  	else {  		m_Facade.CurrentLayout = GUIFacadeControl.Layout.Filmstrip;  		BaseConfig.Settings.LastFanartViewMode = GUIFacadeControl.Layout.Filmstrip;  		BaseConfig.Settings.Save ();  	}  	break;  case GUIFacadeControl.Layout.Filmstrip:  	CurrentView = GUIFacadeControl.Layout.List;  	if (!AllowView (CurrentView) || m_Facade.ListLayout == null) {  		shouldContinue = true;  	}  	else {  		m_Facade.CurrentLayout = GUIFacadeControl.Layout.List;  		BaseConfig.Settings.LastFanartViewMode = GUIFacadeControl.Layout.List;  		BaseConfig.Settings.Save ();  	}  	break;  }  
Missing Default,MyAnimePlugin3.Windows,PosterWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\PosterWindow.cs,OnClicked,The following switch statement is missing a default case: switch (CurrentView) {  case GUIFacadeControl.Layout.LargeIcons:  	m_Facade.CurrentLayout = GUIFacadeControl.Layout.Filmstrip;  	CurrentView = GUIFacadeControl.Layout.Filmstrip;  	BaseConfig.Settings.LastPosterViewMode = GUIFacadeControl.Layout.Filmstrip;  	BaseConfig.Settings.Save ();  	break;  case GUIFacadeControl.Layout.Filmstrip:  	m_Facade.CurrentLayout = GUIFacadeControl.Layout.LargeIcons;  	CurrentView = GUIFacadeControl.Layout.LargeIcons;  	BaseConfig.Settings.LastPosterViewMode = GUIFacadeControl.Layout.LargeIcons;  	BaseConfig.Settings.Save ();  	break;  }  
Missing Default,MyAnimePlugin3.Windows,PosterWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\PosterWindow.cs,UpdateLayoutButton,The following switch statement is missing a default case: switch (view) {  case GUIFacadeControl.Layout.List:  	strLine = GUILocalizeStrings.Get (101);  	break;  case GUIFacadeControl.Layout.SmallIcons:  	strLine = GUILocalizeStrings.Get (100);  	break;  case GUIFacadeControl.Layout.LargeIcons:  	strLine = GUILocalizeStrings.Get (417);  	break;  case GUIFacadeControl.Layout.Filmstrip:  	strLine = GUILocalizeStrings.Get (733);  	break;  case GUIFacadeControl.Layout.Playlist:  	strLine = GUILocalizeStrings.Get (101);  	break;  }  
Missing Default,MyAnimePlugin3.Windows,RecommendationsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RecommendationsWindow.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedLabel) {  case 0:  	int recType = 1;  	if (dummyModeDownload != null && dummyModeDownload.Visible)  		recType = 2;  	JMMServerVM.Instance.clientBinaryHTTP.IgnoreAnime (rec.RecommendedAnimeID' recType' JMMServerVM.Instance.CurrentUser.JMMUserID);  	LoadData ();  	break;  case 1:  	BookmarkedAnimeVM bookmark = new BookmarkedAnimeVM ();  	bookmark.AnimeID = rec.RecommendedAnimeID;  	bookmark.Downloading = 0;  	bookmark.Notes = "";  	bookmark.Priority = 1;  	if (bookmark.Save ()) {  		Utils.DialogMsg ("Success"' "Bookmark Created");  	}  	break;  case 2:  	JMMServerBinary.Contract_AnimeSeries_SaveResponse resp = JMMServerVM.Instance.clientBinaryHTTP.CreateSeriesFromAnime (rec.RecommendedAnimeID' null' JMMServerVM.Instance.CurrentUser.JMMUserID);  	if (string.IsNullOrEmpty (resp.ErrorMessage))  		Utils.DialogMsg ("Success"' "Series Created");  	else  		Utils.DialogMsg ("Error"' resp.ErrorMessage);  	break;  }  
Missing Default,MyAnimePlugin3.Windows,RelationsWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\RelationsWindow.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId) {  case 1:  	DownloadHelper.SearchAnime (mainAnime);  	break;  }  
Missing Default,MyAnimePlugin3.Windows,WideBannerWindow,C:\repos\svn2github_Japanese_Media_Manager\animeplugin3\MyAnimePlugin3\Windows\WideBannerWindow.cs,UpdateLayoutButton,The following switch statement is missing a default case: switch (view) {  case GUIFacadeControl.Layout.List:  	strLine = GUILocalizeStrings.Get (101);  	break;  case GUIFacadeControl.Layout.SmallIcons:  	strLine = GUILocalizeStrings.Get (100);  	break;  case GUIFacadeControl.Layout.LargeIcons:  	strLine = GUILocalizeStrings.Get (417);  	break;  case GUIFacadeControl.Layout.Filmstrip:  	strLine = GUILocalizeStrings.Get (733);  	break;  case GUIFacadeControl.Layout.Playlist:  	strLine = GUILocalizeStrings.Get (101);  	break;  }  
