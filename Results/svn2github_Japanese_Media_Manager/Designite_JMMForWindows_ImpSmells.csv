Implementation smell,Namespace,Class,File,Method,Description
Long Method,JMMClient,Languages,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Languages.cs,GetFlagImage,The method has 147 lines of code.
Long Method,JMMClient,Languages,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Languages.cs,GetLanguageDescription,The method has 102 lines of code.
Long Method,JMMClient,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\MultiSort.cs,MultiSort,The method has 102 lines of code.
Long Method,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The method has 147 lines of code.
Long Method,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,EvaluateGroupFilter,The method has 368 lines of code.
Long Method,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,EvaluateGroupFilter,The method has 284 lines of code.
Long Method,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,GetDirectChildren,The method has 100 lines of code.
Long Method,JMMClient.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\DownloadHelper.cs,SearchTorrents,The method has 120 lines of code.
Long Method,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,ParseSource,The method has 103 lines of code.
Long Method,JMMClient.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsBakaBT.cs,ParseSource,The method has 140 lines of code.
Long Method,JMMClient.Forms,GroupFilterConditionForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,The method has 196 lines of code.
Long Method,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\MultiSort.cs,MultiSort,The method has 102 lines of code.
Long Method,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,EnableDisableImage,The method has 102 lines of code.
Long Method,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,SetDefaultImage,The method has 102 lines of code.
Long Method,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,The method has 103 lines of code.
Long Method,JMMClient.UserControls,UnrecognisedVideos,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\UnrecognisedVideos.xaml.cs,btnConfirm_Click,The method has 119 lines of code.
Long Method,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,HandleFileChangeMPC,The method has 119 lines of code.
Long Method,JMMClient.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The method has 158 lines of code.
Long Method,JMMClient.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterHelper.cs,GetAllowedOperators,The method has 128 lines of code.
Complex Method,JMMClient,BreadCrumbTemplateSelector,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\DataTemplateSelectors\BreadCrumbTemplateSelector.cs,SelectTemplate,Cyclomatic complexity of the method is 8
Complex Method,JMMClient,TraktActivityTemplateSelector,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\DataTemplateSelectors\TraktActivityTemplateSelector.cs,SelectTemplate,Cyclomatic complexity of the method is 8
Complex Method,JMMClient,Languages,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Languages.cs,GetFlagImage,Cyclomatic complexity of the method is 49
Complex Method,JMMClient,Languages,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Languages.cs,GetLanguageDescription,Cyclomatic complexity of the method is 49
Complex Method,JMMClient,MainListTemplateSelector,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\DataTemplateSelectors\MainListTemplateSelector.cs,SelectTemplate,Cyclomatic complexity of the method is 10
Complex Method,JMMClient,UnhandledExceptionManager,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UnhandledExceptionManager.cs,SysInfoToString,Cyclomatic complexity of the method is 8
Complex Method,JMMClient,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\MultiSort.cs,MultiSort,Cyclomatic complexity of the method is 12
Complex Method,JMMClient,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,Cyclomatic complexity of the method is 24
Complex Method,JMMClient,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,Cyclomatic complexity of the method is 24
Complex Method,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,Cyclomatic complexity of the method is 35
Complex Method,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,SetEpisodeNameVariants,Cyclomatic complexity of the method is 20
Complex Method,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,Populate,Cyclomatic complexity of the method is 13
Complex Method,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,ProcessImages,Cyclomatic complexity of the method is 25
Complex Method,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshRandomSeries,Cyclomatic complexity of the method is 8
Complex Method,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshTraktActivity,Cyclomatic complexity of the method is 11
Complex Method,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshData,Cyclomatic complexity of the method is 11
Complex Method,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshTraktFriends,Cyclomatic complexity of the method is 12
Complex Method,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,UpdateHeirarchy,Cyclomatic complexity of the method is 9
Complex Method,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,UpdateHeirarchy,Cyclomatic complexity of the method is 10
Complex Method,JMMClient,AnimeSeriesVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeSeriesVM.cs,Populate,Cyclomatic complexity of the method is 11
Complex Method,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,MoveUpNamingLanguage,Cyclomatic complexity of the method is 8
Complex Method,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,MoveDownNamingLanguage,Cyclomatic complexity of the method is 8
Complex Method,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,RefreshNamingLanguages,Cyclomatic complexity of the method is 9
Complex Method,JMMClient,UserSettingsVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\UserSettingsVM.cs,RefreshTorrentSources,Cyclomatic complexity of the method is 11
Complex Method,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,Cyclomatic complexity of the method is 9
Complex Method,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,EvaluateGroupFilter,Cyclomatic complexity of the method is 193
Complex Method,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,EvaluateGroupFilter,Cyclomatic complexity of the method is 175
Complex Method,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,GetDirectChildren,Cyclomatic complexity of the method is 21
Complex Method,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,Populate,Cyclomatic complexity of the method is 10
Complex Method,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,GetOSInfo,Cyclomatic complexity of the method is 31
Complex Method,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,ReparseDescription,Cyclomatic complexity of the method is 25
Complex Method,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,tabFileManager_SelectionChanged,Cyclomatic complexity of the method is 17
Complex Method,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,DisplayMainTab,Cyclomatic complexity of the method is 30
Complex Method,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,downloadImagesWorker_DoWork,Cyclomatic complexity of the method is 15
Complex Method,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,ShowDashMetroView,Cyclomatic complexity of the method is 14
Complex Method,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_CreateSeriesFromAnime,Cyclomatic complexity of the method is 8
Complex Method,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_AvdumpFile,Cyclomatic complexity of the method is 9
Complex Method,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_BookmarkAnime,Cyclomatic complexity of the method is 12
Complex Method,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_ShowTorrentSearch,Cyclomatic complexity of the method is 11
Complex Method,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_ShowPinnedSeries,Cyclomatic complexity of the method is 18
Complex Method,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_Edit,Cyclomatic complexity of the method is 9
Complex Method,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_Save,Cyclomatic complexity of the method is 10
Complex Method,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_Delete,Cyclomatic complexity of the method is 10
Complex Method,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_Cancel,Cyclomatic complexity of the method is 9
Complex Method,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_DeleteFilterCondition,Cyclomatic complexity of the method is 10
Complex Method,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,GroupFilterSortMoveUpDown,Cyclomatic complexity of the method is 9
Complex Method,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_DeleteFilterSort,Cyclomatic complexity of the method is 10
Complex Method,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,HighlightMainListItem,Cyclomatic complexity of the method is 20
Complex Method,JMMClient.Downloads,CsvStream,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\CsvStream.cs,GetNextItem,Cyclomatic complexity of the method is 10
Complex Method,JMMClient.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\DownloadHelper.cs,SearchTorrents,Cyclomatic complexity of the method is 33
Complex Method,JMMClient.Downloads,DownloadSearchCriteria,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\DownloadSearchCriteria.cs,GetParms,Cyclomatic complexity of the method is 10
Complex Method,JMMClient.Downloads,DownloadSearchCriteria,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\DownloadSearchCriteria.cs,ToString,Cyclomatic complexity of the method is 11
Complex Method,JMMClient.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsBakaBT.cs,ParseSource,Cyclomatic complexity of the method is 10
Complex Method,JMMClient.Downloads,TorrentSourceVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentSourceVM.cs,BrowseTorrents,Cyclomatic complexity of the method is 9
Complex Method,JMMClient.Forms,GroupFilterConditionForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,Cyclomatic complexity of the method is 46
Complex Method,JMMClient.Forms,GroupFilterConditionForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\GroupFilterConditionForm.xaml.cs,EvaluateConditionsAndOperators,Cyclomatic complexity of the method is 42
Complex Method,JMMClient.Forms,GroupFilterConditionForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\GroupFilterConditionForm.xaml.cs,Init,Cyclomatic complexity of the method is 29
Complex Method,JMMClient.Forms,GroupFilterSortingForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\GroupFilterSortingForm.xaml.cs,Init,Cyclomatic complexity of the method is 8
Complex Method,JMMClient.Forms,NewSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\NewSeries.xaml.cs,btnConfirm_Click,Cyclomatic complexity of the method is 12
Complex Method,JMMClient.Forms,RandomEpisodeForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\RandomEpisodeForm.xaml.cs,SetRandomEpisode,Cyclomatic complexity of the method is 18
Complex Method,JMMClient.Forms,RandomEpisodeForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\RandomEpisodeForm.xaml.cs,GetSeriesForGroupFilter,Cyclomatic complexity of the method is 16
Complex Method,JMMClient.Forms,RandomEpisodeForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\RandomEpisodeForm.xaml.cs,GetSeriesForGroup,Cyclomatic complexity of the method is 12
Complex Method,JMMClient.Forms,RandomSeriesForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\RandomSeriesForm.xaml.cs,GetSeriesForGroupFilter,Cyclomatic complexity of the method is 20
Complex Method,JMMClient.Forms,SelectTvDBSeasonForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\SelectTvDBSeasonForm.xaml.cs,Init,Cyclomatic complexity of the method is 9
Complex Method,JMMClient.ImageDownload,ImageDownloader,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ImageDownload\ImageDownloader.cs,GetFileName,Cyclomatic complexity of the method is 29
Complex Method,JMMClient.ImageDownload,ImageDownloader,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ImageDownload\ImageDownloader.cs,GetEntityID,Cyclomatic complexity of the method is 29
Complex Method,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\MultiSort.cs,MultiSort,Cyclomatic complexity of the method is 12
Complex Method,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,Cyclomatic complexity of the method is 24
Complex Method,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,Cyclomatic complexity of the method is 24
Complex Method,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,playlistMenuItem_Click,Cyclomatic complexity of the method is 12
Complex Method,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,EnableDisableImage,Cyclomatic complexity of the method is 56
Complex Method,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,SetDefaultImage,Cyclomatic complexity of the method is 50
Complex Method,JMMClient.UserControls,AvdumpBatchControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AvdumpBatchControl.xaml.cs,workerAvdump_DoWork,Cyclomatic complexity of the method is 9
Complex Method,JMMClient.UserControls,AvdumpFileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AvdumpFileControl.xaml.cs,AvdumpFileControl_DataContextChanged,Cyclomatic complexity of the method is 14
Complex Method,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,ProcessImages,Cyclomatic complexity of the method is 10
Complex Method,JMMClient.UserControls,DownloadsSearchTorrentsControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Downloads\DownloadsSearchTorrentsControl.xaml.cs,searchWorker_RunWorkerCompleted,Cyclomatic complexity of the method is 11
Complex Method,JMMClient.UserControls,DownloadsSearchTorrentsControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Downloads\DownloadsSearchTorrentsControl.xaml.cs,torrentDetailsWorker_DoWork,Cyclomatic complexity of the method is 8
Complex Method,JMMClient.UserControls,DownloadsTorrentMonitorControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Downloads\DownloadsTorrentMonitorControl.xaml.cs,Row_MouseRightButtonDown,Cyclomatic complexity of the method is 8
Complex Method,JMMClient.UserControls,EpisodeList,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\EpisodeList.xaml.cs,lbEpisodes_MouseDoubleClick,Cyclomatic complexity of the method is 9
Complex Method,JMMClient.UserControls,EpisodeList,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\EpisodeList.xaml.cs,RefreshEpisodes,Cyclomatic complexity of the method is 11
Complex Method,JMMClient.UserControls,EpisodeList,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\EpisodeList.xaml.cs,HighlightEpisode,Cyclomatic complexity of the method is 11
Complex Method,JMMClient.UserControls,FileRenameControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\FileRenameControl.xaml.cs,RefreshScripts,Cyclomatic complexity of the method is 10
Complex Method,JMMClient.UserControls,FileRenameControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\FileRenameControl.xaml.cs,btnLoadFiles_Click,Cyclomatic complexity of the method is 10
Complex Method,JMMClient.UserControls,MissingEpisodesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,Cyclomatic complexity of the method is 12
Complex Method,JMMClient.UserControls,PlaylistControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\PlaylistControl.xaml.cs,CommandBinding_PlayEpisode,Cyclomatic complexity of the method is 10
Complex Method,JMMClient.UserControls,PlaylistControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\PlaylistControl.xaml.cs,CommandBinding_ToggleWatchedStatus,Cyclomatic complexity of the method is 8
Complex Method,JMMClient.UserControls,SeriesSearchControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\SeriesSearchControl.xaml.cs,cboSearchType_SelectionChanged,Cyclomatic complexity of the method is 9
Complex Method,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,Cyclomatic complexity of the method is 56
Complex Method,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyAniDBFiles_SelectionChanged,Cyclomatic complexity of the method is 12
Complex Method,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyMyListStats_SelectionChanged,Cyclomatic complexity of the method is 12
Complex Method,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyMyList_SelectionChanged,Cyclomatic complexity of the method is 12
Complex Method,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyAnime_SelectionChanged,Cyclomatic complexity of the method is 12
Complex Method,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyCalendar_SelectionChanged,Cyclomatic complexity of the method is 12
Complex Method,JMMClient.UserControls,DisplayStyleSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\DisplayStyleSettings.xaml.cs,DisplayStyleSettings,Cyclomatic complexity of the method is 35
Complex Method,JMMClient.UserControls,DisplayStyleSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\DisplayStyleSettings.xaml.cs,cboStyleSeriesName_SelectionChanged,Cyclomatic complexity of the method is 9
Complex Method,JMMClient.UserControls,DisplayStyleSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\DisplayStyleSettings.xaml.cs,cboStyleSeriesOverview_SelectionChanged,Cyclomatic complexity of the method is 9
Complex Method,JMMClient.UserControls,DisplayStyleSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\DisplayStyleSettings.xaml.cs,cboStyleEpisodeTitle_SelectionChanged,Cyclomatic complexity of the method is 9
Complex Method,JMMClient.UserControls,DisplayStyleSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\DisplayStyleSettings.xaml.cs,cboStyleEpisodeDetail_SelectionChanged,Cyclomatic complexity of the method is 12
Complex Method,JMMClient.UserControls,DisplayStyleSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\DisplayStyleSettings.xaml.cs,cboStyleGroupList_SelectionChanged,Cyclomatic complexity of the method is 9
Complex Method,JMMClient.UserControls,MALSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\MALSettings.xaml.cs,MALSettings,Cyclomatic complexity of the method is 12
Complex Method,JMMClient.UserControls,MALSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\MALSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,Cyclomatic complexity of the method is 12
Complex Method,JMMClient.UserControls,MPCSettingsControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\MPCSettingsControl.xaml.cs,btnTestPotLocation_Click,Cyclomatic complexity of the method is 11
Complex Method,JMMClient.UserControls,MPCSettingsControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\MPCSettingsControl.xaml.cs,btnTestMPCLocation_Click,Cyclomatic complexity of the method is 8
Complex Method,JMMClient.UserControls,TraktSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TraktSettings.xaml.cs,TraktSettings,Cyclomatic complexity of the method is 23
Complex Method,JMMClient.UserControls,TraktSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TraktSettings.xaml.cs,cboSyncFrequency_SelectionChanged,Cyclomatic complexity of the method is 12
Complex Method,JMMClient.UserControls,TraktSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TraktSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,Cyclomatic complexity of the method is 12
Complex Method,JMMClient.UserControls,TvDBSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TvDBSettings.xaml.cs,TvDBSettings,Cyclomatic complexity of the method is 12
Complex Method,JMMClient.UserControls,TvDBSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TvDBSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,Cyclomatic complexity of the method is 12
Complex Method,JMMClient.UserControls,UnrecognisedVideos,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\UnrecognisedVideos.xaml.cs,btnConfirm_Click,Cyclomatic complexity of the method is 18
Complex Method,JMMClient.UserControls,UnrecognisedVideos,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\UnrecognisedVideos.xaml.cs,SetConfirmDetails,Cyclomatic complexity of the method is 11
Complex Method,JMMClient.UserControls,UserAdminControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\UserAdminControl.xaml.cs,CommandBinding_DeleteUser,Cyclomatic complexity of the method is 8
Complex Method,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,Cyclomatic complexity of the method is 17
Complex Method,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,HandleFileChangePotPlayer,Cyclomatic complexity of the method is 17
Complex Method,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,HandleFileChangeMPC,Cyclomatic complexity of the method is 23
Complex Method,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,GetAutoFileForEpisode,Cyclomatic complexity of the method is 8
Complex Method,JMMClient.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,Cyclomatic complexity of the method is 33
Complex Method,JMMClient.ViewModel,PosterContainer,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeCrossRefsVM.cs,PosterContainer,Cyclomatic complexity of the method is 32
Complex Method,JMMClient.ViewModel,FanartContainer,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeCrossRefsVM.cs,FanartContainer,Cyclomatic complexity of the method is 24
Complex Method,JMMClient.ViewModel,AniDB_Anime_DefaultImageVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_Anime_DefaultImageVM.cs,AniDB_Anime_DefaultImageVM,Cyclomatic complexity of the method is 8
Complex Method,JMMClient.ViewModel,AniDB_AnimeDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeDetailedVM.cs,Populate,Cyclomatic complexity of the method is 20
Complex Method,JMMClient.ViewModel,GroupFilterConditionVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterConditionVM.cs,SetConditionParameterString,Cyclomatic complexity of the method is 27
Complex Method,JMMClient.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterHelper.cs,GetTextForEnum_Sorting,Cyclomatic complexity of the method is 13
Complex Method,JMMClient.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterHelper.cs,GetTextForEnum_Operator,Cyclomatic complexity of the method is 12
Complex Method,JMMClient.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterHelper.cs,GetTextForEnum_ConditionType,Cyclomatic complexity of the method is 30
Complex Method,JMMClient.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterHelper.cs,GetAllowedOperators,Cyclomatic complexity of the method is 122
Complex Method,JMMClient.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterHelper.cs,GetSortDescription,Cyclomatic complexity of the method is 41
Complex Method,JMMClient.ViewModel,MissingEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MissingEpisodeVM.cs,MissingEpisodeVM,Cyclomatic complexity of the method is 19
Complex Method,JMMClient.ViewModel,MissingFileVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MissingFileVM.cs,MissingFileVM,Cyclomatic complexity of the method is 19
Complex Method,JMMClient.ViewModel,PlaylistVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\PlaylistVM.cs,Drop,Cyclomatic complexity of the method is 17
Complex Method,JMMClient.ViewModel,PlaylistVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\PlaylistVM.cs,SetNextEpisode,Cyclomatic complexity of the method is 21
Complex Method,JMMClient.ViewModel,PlaylistVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\PlaylistVM.cs,GetAllEpisodes,Cyclomatic complexity of the method is 16
Complex Method,JMMClient.ViewModel,PlaylistVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\PlaylistVM.cs,PopulatePlaylistObjects,Cyclomatic complexity of the method is 8
Long Parameter List,JMMClient,UnhandledExceptionManager,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UnhandledExceptionManager.cs,BitBlt,The method has 9 parameters.
Long Parameter List,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshData,The method has 6 parameters.
Long Parameter List,JMMClient.Forms,SearchTvDBForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\SearchTvDBForm.xaml.cs,Init,The method has 5 parameters.
Long Parameter List,JMMClient.Forms,SelectMALStartForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\SelectMALStartForm.xaml.cs,Init,The method has 6 parameters.
Long Parameter List,JMMClient.Forms,SelectTraktSeasonForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\SelectTraktSeasonForm.xaml.cs,Init,The method has 5 parameters.
Long Parameter List,JMMClient.Forms,SelectTvDBSeasonForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\SelectTvDBSeasonForm.xaml.cs,Init,The method has 10 parameters.
Long Parameter List,JMMClient.JMMServerBinary,IJMMServer,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Service References\JMMServerBinary\Reference.cs,LinkAniDBMAL,The method has 5 parameters.
Long Parameter List,JMMClient.JMMServerBinary,IJMMServer,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Service References\JMMServerBinary\Reference.cs,LinkAniDBMALUpdated,The method has 7 parameters.
Long Parameter List,JMMClient.JMMServerBinary,IJMMServer,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Service References\JMMServerBinary\Reference.cs,SetDefaultImage,The method has 5 parameters.
Long Parameter List,JMMClient.JMMServerBinary,IJMMServer,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Service References\JMMServerBinary\Reference.cs,SetWatchedStatusOnSeries,The method has 5 parameters.
Long Parameter List,JMMClient.JMMServerBinary,IJMMServer,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Service References\JMMServerBinary\Reference.cs,GetFilesByGroupAndResolution,The method has 6 parameters.
Long Parameter List,JMMClient.JMMServerBinary,IJMMServer,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Service References\JMMServerBinary\Reference.cs,LinkAniDBTvDB,The method has 7 parameters.
Long Parameter List,JMMClient.JMMServerBinary,IJMMServer,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Service References\JMMServerBinary\Reference.cs,RemoveLinkAniDBTvDB,The method has 6 parameters.
Long Parameter List,JMMClient.JMMServerBinary,JMMServerClient,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Service References\JMMServerBinary\Reference.cs,LinkAniDBMAL,The method has 5 parameters.
Long Parameter List,JMMClient.JMMServerBinary,JMMServerClient,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Service References\JMMServerBinary\Reference.cs,LinkAniDBMALUpdated,The method has 7 parameters.
Long Parameter List,JMMClient.JMMServerBinary,JMMServerClient,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Service References\JMMServerBinary\Reference.cs,SetDefaultImage,The method has 5 parameters.
Long Parameter List,JMMClient.JMMServerBinary,JMMServerClient,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Service References\JMMServerBinary\Reference.cs,SetWatchedStatusOnSeries,The method has 5 parameters.
Long Parameter List,JMMClient.JMMServerBinary,JMMServerClient,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Service References\JMMServerBinary\Reference.cs,GetFilesByGroupAndResolution,The method has 6 parameters.
Long Parameter List,JMMClient.JMMServerBinary,JMMServerClient,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Service References\JMMServerBinary\Reference.cs,LinkAniDBTvDB,The method has 7 parameters.
Long Parameter List,JMMClient.JMMServerBinary,JMMServerClient,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Service References\JMMServerBinary\Reference.cs,RemoveLinkAniDBTvDB,The method has 6 parameters.
Long Statement,JMMClient,WatchedStatusContainer,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Enums.cs,GetAll,The length of the statement  "	statuses.Add (new WatchedStatusContainer (WatchedStatus.Unwatched' JMMClient.Properties.Resources.Episodes_Watched_Unwatched)); " is 127.
Long Statement,JMMClient,WatchedStatusContainer,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Enums.cs,GetAll,The length of the statement  "	statuses.Add (new WatchedStatusContainer (WatchedStatus.Watched' JMMClient.Properties.Resources.Episodes_Watched_Watched)); " is 123.
Long Statement,JMMClient,AvailableEpisodeTypeContainer,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Enums.cs,GetAll,The length of the statement  "	eptypes.Add (new AvailableEpisodeTypeContainer (AvailableEpisodeType.All' JMMClient.Properties.Resources.Episodes_AvAll)); " is 122.
Long Statement,JMMClient,AvailableEpisodeTypeContainer,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Enums.cs,GetAll,The length of the statement  "	eptypes.Add (new AvailableEpisodeTypeContainer (AvailableEpisodeType.Available' JMMClient.Properties.Resources.Episodes_AvOnly)); " is 129.
Long Statement,JMMClient,AvailableEpisodeTypeContainer,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Enums.cs,GetAll,The length of the statement  "	eptypes.Add (new AvailableEpisodeTypeContainer (AvailableEpisodeType.NoFiles' JMMClient.Properties.Resources.Episodes_AvMissing)); " is 130.
Long Statement,JMMClient,UnhandledExceptionManager,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UnhandledExceptionManager.cs,AssemblyBuildDate,The length of the statement  "		dtBuild = Convert.ToDateTime ("01/01/2000").AddDays ((double)objVersion.Build).AddSeconds ((double)(objVersion.Revision * 2)); " is 126.
Long Statement,JMMClient,UnhandledExceptionManager,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UnhandledExceptionManager.cs,ExceptionToUI,The length of the statement  "	const string _strWhatUserCanDo = "Restart (app)' and try repeating your last action. Try alternative methods of performing the same action."; " is 141.
Long Statement,JMMClient,UnhandledExceptionManager,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UnhandledExceptionManager.cs,ExceptionToEventLog,The length of the statement  "		System.Diagnostics.EventLog.WriteEntry (System.AppDomain.CurrentDomain.FriendlyName' Environment.NewLine + _strException' EventLogEntryType.Error); " is 147.
Long Statement,JMMClient,UnhandledExceptionManager,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UnhandledExceptionManager.cs,BitmapToJPEG,The length of the statement  "	objEncoderParameters.Param [0] = new System.Drawing.Imaging.EncoderParameter (System.Drawing.Imaging.Encoder.Quality' lngCompression); " is 134.
Long Statement,JMMClient,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\MultiSort.cs,SortInPlace,The length of the statement  "		throw new Exception ("Error trying to sort list of " + typeof(T).Name + " using " + (sortBy.NameIsPropertyName ? "property " : "field ") + sortBy.sPropertyOrFieldName' ex); " is 172.
Long Statement,JMMClient,RenameHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\RenameHelper.cs,GetAllTags,The length of the statement  "	allTags.Add (new RenameTag (Constants.FileRenameTag_Name.AnimeNameEnglish' Constants.FileRenameTag_Tag.AnimeNameEnglish)); " is 122.
Long Statement,JMMClient,RenameHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\RenameHelper.cs,GetAllTags,The length of the statement  "	allTags.Add (new RenameTag (Constants.FileRenameTag_Name.AnimeNameRomaji' Constants.FileRenameTag_Tag.AnimeNameRomaji)); " is 120.
Long Statement,JMMClient,RenameHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\RenameHelper.cs,GetAllTags,The length of the statement  "	allTags.Add (new RenameTag (Constants.FileRenameTag_Name.EpisodeNameEnglish' Constants.FileRenameTag_Tag.EpisodeNameEnglish)); " is 126.
Long Statement,JMMClient,RenameHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\RenameHelper.cs,GetAllTags,The length of the statement  "	allTags.Add (new RenameTag (Constants.FileRenameTag_Name.EpisodeNameRomaji' Constants.FileRenameTag_Tag.EpisodeNameRomaji)); " is 124.
Long Statement,JMMClient,RenameHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\RenameHelper.cs,GetAllTags,The length of the statement  "	allTags.Add (new RenameTag (Constants.FileRenameTag_Name.OriginalFileName' Constants.FileRenameTag_Tag.OriginalFileName)); " is 122.
Long Statement,JMMClient,RenameHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\RenameHelper.cs,GetAllTests,The length of the statement  "	allTests.Add (new RenameTest (Constants.FileRenameTest_Name.EpisodeNumber' Constants.FileRenameTest_Test.EpisodeNumber)); " is 121.
Long Statement,JMMClient,RenameHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\RenameHelper.cs,GetAllTests,The length of the statement  "	allTests.Add (new RenameTest (Constants.FileRenameTest_Name.VideoBitDepth' Constants.FileRenameTest_Test.VideoBitDepth)); " is 121.
Long Statement,JMMClient,RenameHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\RenameHelper.cs,GetAllTests,The length of the statement  "	allTests.Add (new RenameTest (Constants.FileRenameTest_Name.VideoResolutionWidth' Constants.FileRenameTest_Test.VideoResolutionWidth)); " is 135.
Long Statement,JMMClient,RenameHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\RenameHelper.cs,GetAllTests,The length of the statement  "	allTests.Add (new RenameTest (Constants.FileRenameTest_Name.VideoResolutionHeight' Constants.FileRenameTest_Test.VideoResolutionHeight)); " is 137.
Long Statement,JMMClient,RenameHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\RenameHelper.cs,GetAllTests,The length of the statement  "	allTests.Add (new RenameTest (Constants.FileRenameTest_Name.ManuallyLinked' Constants.FileRenameTest_Test.ManuallyLinked)); " is 123.
Long Statement,JMMClient,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The length of the statement  "				throw new Exception ("Property name " + sPropertyName + " not found while trying to compare objects of type " + typeof(T).Name); " is 128.
Long Statement,JMMClient,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The length of the statement  "				throw new Exception ("Field name " + sFieldName + " not found while trying to compare objects of type " + typeof(T).Name); " is 122.
Long Statement,JMMClient,AniDB_AnimeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeVM.cs,RefreshAnimeCrossRefs,The length of the statement  "		JMMServerBinary.Contract_AniDB_AnimeCrossRefs xrefDetails = JMMServerVM.Instance.clientBinaryHTTP.GetCrossRefDetails (this.AnimeID); " is 132.
Long Statement,JMMClient,AniDB_AnimeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeVM.cs,GetFanartFilenames,The length of the statement  "		if (!string.IsNullOrEmpty (DefaultFanart.FullImagePathOnlyExisting) && File.Exists (DefaultFanart.FullImagePathOnlyExisting)) { " is 127.
Long Statement,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,SetLastWatchedDescription,The length of the statement  "		if (WatchedDate.Value.Day == today.Day && WatchedDate.Value.Month == today.Month && WatchedDate.Value.Year == today.Year) { " is 123.
Long Statement,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,SetLastWatchedDescription,The length of the statement  "		if (WatchedDate.Value.Day == yesterday.Day && WatchedDate.Value.Month == yesterday.Month && WatchedDate.Value.Year == yesterday.Year) { " is 135.
Long Statement,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The length of the statement  "			List<CrossRef_AniDB_TvDBVMV2> tvDBCrossRef = Sorting.MultiSort<CrossRef_AniDB_TvDBVMV2> (tvSummary.CrossRefTvDBV2' sortCriteria); " is 129.
Long Statement,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The length of the statement  "					int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (this.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1); " is 166.
Long Statement,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The length of the statement  "		List<CrossRef_AniDB_TvDBVMV2> tvDBCrossRef = Sorting.MultiSort<CrossRef_AniDB_TvDBVMV2> (tvSummary.CrossRefTvDBV2' sortCriteria); " is 129.
Long Statement,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The length of the statement  "					int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (this.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1); " is 166.
Long Statement,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,Populate,The length of the statement  "		AniDBRatingFormatted = string.Format ("{0}: {1} ({2} {3})"' JMMClient.Properties.Resources.Rating' AniDB_Rating' AniDB_Votes' JMMClient.Properties.Resources.Votes); " is 164.
Long Statement,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,Populate,The length of the statement  "			if (UserSettingsVM.Instance.EpisodeImageOverviewStyle == (int)EpisodeDisplayStyle.Always || UserSettingsVM.Instance.EpisodeImageOverviewStyle == (int)EpisodeDisplayStyle.InExpanded) { " is 183.
Long Statement,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,GetAllVideoLocals,The length of the statement  "		List<JMMServerBinary.Contract_VideoLocal> contracts = JMMServerVM.Instance.clientBinaryHTTP.GetVideoLocalsForEpisode (AnimeEpisodeID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 184.
Long Statement,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,RefreshFilesForEpisode,The length of the statement  "		List<JMMServerBinary.Contract_VideoDetailed> contracts = JMMServerVM.Instance.clientBinaryHTTP.GetFilesForEpisode (AnimeEpisodeID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 181.
Long Statement,JMMClient,AnimeGroupVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeGroupVM.cs,GetPosterFilenames,The length of the statement  "		if (!string.IsNullOrEmpty (DefaultSeries.AniDB_Anime.DefaultPosterPathNoBlanks) && File.Exists (DefaultSeries.AniDB_Anime.DefaultPosterPathNoBlanks)) { " is 151.
Long Statement,JMMClient,AnimeGroupVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeGroupVM.cs,GetPosterFilenames,The length of the statement  "		if (!string.IsNullOrEmpty (ser.AniDB_Anime.DefaultPosterPathNoBlanks) && File.Exists (ser.AniDB_Anime.DefaultPosterPathNoBlanks)) " is 129.
Long Statement,JMMClient,AnimeGroupVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeGroupVM.cs,GetFanartFilenames,The length of the statement  "		if (DefaultSeries.AniDB_Anime.DefaultFanart != null && !string.IsNullOrEmpty (DefaultSeries.AniDB_Anime.DefaultFanart.FullImagePathOnlyExisting) && File.Exists (DefaultSeries.AniDB_Anime.DefaultFanart.FullImagePathOnlyExisting)) { " is 230.
Long Statement,JMMClient,AnimeGroupVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeGroupVM.cs,GetDirectChildren,The length of the statement  "	if (MainListHelperVM.Instance.CurrentGroupFilter != null && MainListHelperVM.Instance.CurrentGroupFilter.IsApplyToSeries) { " is 123.
Long Statement,JMMClient,AnimeGroupVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeGroupVM.cs,Save,The length of the statement  "		JMMServerBinary.Contract_AnimeGroup_SaveResponse response = JMMServerVM.Instance.clientBinaryHTTP.SaveGroup (this.ToContract ()' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 179.
Long Statement,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,NavigateBack,The length of the statement  "		mainWdw.ShowDashMetroView (NavigationHistory [NavigationHistory.Count - 1].NavView' NavigationHistory [NavigationHistory.Count - 1].NavContent); " is 144.
Long Statement,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,rotateShoutsTimer_Elapsed,The length of the statement  "			System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshContinueWatching,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshContinueWatching,The length of the statement  "		List<JMMServerBinary.Contract_AnimeEpisode> epContracts = JMMServerVM.Instance.clientBinaryHTTP.GetContinueWatchingFilter (JMMServerVM.Instance.CurrentUser.JMMUserID.Value' UserSettingsVM.Instance.DashMetro_WatchNext_Items); " is 224.
Long Statement,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshContinueWatching,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshRandomSeries,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshRandomSeries,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshTraktActivity,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshTraktActivity,The length of the statement  "		JMMServerBinary.Contract_Trakt_Activity traktActivity = JMMServerVM.Instance.clientBinaryHTTP.GetTraktFriendInfo (20' false' true' false); " is 138.
Long Statement,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshTraktActivity,The length of the statement  "				System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshTraktActivity,The length of the statement  "			traktActivity = JMMServerVM.Instance.clientBinaryHTTP.GetTraktFriendInfo (AppSettings.DashMetro_TraktActivity_Items + 1' false' false' true); " is 141.
Long Statement,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshTraktActivity,The length of the statement  "					System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshTraktActivity,The length of the statement  "			System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshNewEpisodes,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshNewEpisodes,The length of the statement  "		List<JMMServerBinary.Contract_AnimeEpisode> epContracts = JMMServerVM.Instance.clientBinaryHTTP.GetEpisodesRecentlyAddedSummary (UserSettingsVM.Instance.DashMetro_NewEpisodes_Items' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 232.
Long Statement,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshNewEpisodes,The length of the statement  "				System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshData,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshRecentAdditions,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshRecentAdditions,The length of the statement  "			List<JMMServerBinary.Contract_AnimeEpisode> epContracts = JMMServerVM.Instance.clientBinaryHTTP.GetEpisodesRecentlyAdded (UserSettingsVM.Instance.Dash_RecentAdditions_Items' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 224.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshRecentAdditions,The length of the statement  "			System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshRecentAdditions,The length of the statement  "			List<JMMServerBinary.Contract_AnimeSeries> serContracts = JMMServerVM.Instance.clientBinaryHTTP.GetSeriesRecentlyAdded (UserSettingsVM.Instance.Dash_RecentAdditions_Items' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 222.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshRecentAdditions,The length of the statement  "			System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshTraktFriends,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshTraktFriends,The length of the statement  "		JMMServerBinary.Contract_Trakt_Activity traktActivity = JMMServerVM.Instance.clientBinaryHTTP.GetTraktFriendInfo (AppSettings.Dash_TraktFriends_Items' AppSettings.Dash_TraktFriends_AnimeOnly' traktShouts' traktScrobbles); " is 221.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshTraktFriends,The length of the statement  "							System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshTraktFriends,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshRecommendationsWatch,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshRecommendationsWatch,The length of the statement  "		List<JMMServerBinary.Contract_Recommendation> contracts = JMMServerVM.Instance.clientBinaryHTTP.GetRecommendations (UserSettingsVM.Instance.Dash_RecWatch_Items' JMMServerVM.Instance.CurrentUser.JMMUserID.Value' (int)RecommendationType.Watch); " is 242.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshRecommendationsWatch,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshRecommendationsDownload,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshRecommendationsDownload,The length of the statement  "		List<JMMServerBinary.Contract_Recommendation> contracts = JMMServerVM.Instance.clientBinaryHTTP.GetRecommendations (UserSettingsVM.Instance.Dash_RecDownload_Items' JMMServerVM.Instance.CurrentUser.JMMUserID.Value' (int)RecommendationType.Download); " is 248.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshRecommendationsDownload,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,GetMissingRecommendationsDownload,The length of the statement  "					JMMServerBinary.Contract_AniDBAnime animeContract = JMMServerVM.Instance.clientBinaryHTTP.GetAnime (rec.RecommendedAnimeID); " is 124.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,GetMissingRecommendationsDownload,The length of the statement  "					System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Send' (Action)delegate () { " is 125.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshSeriesMissingEps,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshSeriesMissingEps,The length of the statement  "		List<JMMServerBinary.Contract_AnimeSeries> epSeries = JMMServerVM.Instance.clientBinaryHTTP.GetSeriesWithMissingEpisodes (UserSettingsVM.Instance.Dash_MissingEps_Items' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 219.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshSeriesMissingEps,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshEpsWatchNext_Recent,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshEpsWatchNext_Recent,The length of the statement  "		List<JMMServerBinary.Contract_AnimeEpisode> epContracts = JMMServerVM.Instance.clientBinaryHTTP.GetContinueWatchingFilter (JMMServerVM.Instance.CurrentUser.JMMUserID.Value' UserSettingsVM.Instance.Dash_WatchNext_Items); " is 219.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshEpsWatchNext_Recent,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshEpsWatchNext_Recent_Old,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshEpsWatchNext_Recent_Old,The length of the statement  "		List<JMMServerBinary.Contract_AnimeEpisode> epContracts = JMMServerVM.Instance.clientBinaryHTTP.GetEpisodesToWatch_RecentlyWatched (UserSettingsVM.Instance.Dash_WatchNext_Items' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 228.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshEpsWatchNext_Recent_Old,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshRecentlyWatchedEps,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshRecentlyWatchedEps,The length of the statement  "		List<JMMServerBinary.Contract_AnimeEpisode> epContracts = JMMServerVM.Instance.clientBinaryHTTP.GetEpisodesRecentlyWatched (UserSettingsVM.Instance.Dash_RecentlyWatchedEp_Items' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 228.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshRecentlyWatchedEps,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshMiniCalendar,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshMiniCalendar,The length of the statement  "		List<JMMServerBinary.Contract_AniDBAnime> contracts = JMMServerVM.Instance.clientBinaryHTTP.GetMiniCalendar (JMMServerVM.Instance.CurrentUser.JMMUserID.Value' UserSettingsVM.Instance.Dash_MiniCalendarDays); " is 206.
Long Statement,JMMClient,DashboardVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardVM.cs,RefreshMiniCalendar,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,searchTimer_Elapsed,The length of the statement  "	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,SeriesSearchFilter,The length of the statement  "	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,ShowChildWrappers,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,LoadTestData,The length of the statement  "	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,RefreshBookmarkedAnime,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,RefreshGroupsSeriesData,The length of the statement  "		List<JMMServerBinary.Contract_AnimeGroup> grpsRaw = JMMServerVM.Instance.clientBinaryHTTP.GetAllGroups (JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 154.
Long Statement,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,RefreshGroupsSeriesData,The length of the statement  "		List<JMMServerBinary.Contract_AnimeSeries> seriesRaw = JMMServerVM.Instance.clientBinaryHTTP.GetAllSeries (JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 157.
Long Statement,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,RefreshGroupsSeriesData,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,InitGroupsSeriesData,The length of the statement  "		List<JMMServerBinary.Contract_AnimeGroup> grpsRaw = JMMServerVM.Instance.clientBinaryHTTP.GetAllGroups (JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 154.
Long Statement,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,InitGroupsSeriesData,The length of the statement  "		List<JMMServerBinary.Contract_AnimeSeries> seriesRaw = JMMServerVM.Instance.clientBinaryHTTP.GetAllSeries (JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 157.
Long Statement,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,GetSeriesForVideo,The length of the statement  "		List<JMMServerBinary.Contract_AnimeEpisode> eps = JMMServerVM.Instance.clientBinaryHTTP.GetEpisodesForFile (videoLocalID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 172.
Long Statement,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,GetEpisodeForVideo,The length of the statement  "		List<JMMServerBinary.Contract_AnimeEpisode> eps = JMMServerVM.Instance.clientBinaryHTTP.GetEpisodesForFile (vid.VideoLocalID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 176.
Long Statement,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,UpdateHeirarchy,The length of the statement  "		JMMServerBinary.Contract_AnimeEpisode contract = JMMServerVM.Instance.clientBinaryHTTP.GetEpisode (ep.AnimeEpisodeID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 168.
Long Statement,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,UpdateHeirarchy,The length of the statement  "						List<JMMServerBinary.Contract_VideoDetailed> contracts = JMMServerVM.Instance.clientBinaryHTTP.GetFilesForEpisode (ep.AnimeEpisodeID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 184.
Long Statement,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,UpdateHeirarchy,The length of the statement  "		/*if (CurrentSeries != null && CurrentSeries.AnimeSeriesID.HasValue && CurrentSeries.AnimeSeriesID.Value == epcontract.AnimeSeriesID)" is 133.
Long Statement,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,UpdateHeirarchy,The length of the statement  "							List<JMMServerBinary.Contract_VideoDetailed> contracts = JMMServerVM.Instance.clientBinaryHTTP.GetFilesForEpisode(ep.AnimeEpisodeID);" is 133.
Long Statement,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,UpdateHeirarchy,The length of the statement  "		List<JMMServerBinary.Contract_AnimeEpisode> eps = JMMServerVM.Instance.clientBinaryHTTP.GetEpisodesForFile (vid.VideoLocalID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 176.
Long Statement,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,UpdateHeirarchy,The length of the statement  "			if (thisSeries != null && thisSeries.AnimeSeriesID.HasValue && thisSeries.AnimeSeriesID.Value == epcontract.AnimeSeriesID) { " is 124.
Long Statement,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,UpdateHeirarchy,The length of the statement  "						List<JMMServerBinary.Contract_VideoDetailed> contracts = JMMServerVM.Instance.clientBinaryHTTP.GetFilesForEpisode (ep.AnimeEpisodeID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 184.
Long Statement,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,UpdateGroupAndSeriesForEpisode,The length of the statement  "		JMMServerBinary.Contract_AnimeSeries serContract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (ep.AnimeSeriesID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 168.
Long Statement,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,UpdateGroupAndSeriesForEpisode,The length of the statement  "		List<JMMServerBinary.Contract_AnimeGroup> grps = JMMServerVM.Instance.clientBinaryHTTP.GetAllGroupsAboveSeries (ep.AnimeSeriesID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 180.
Long Statement,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,UpdateHeirarchy,The length of the statement  "		List<JMMServerBinary.Contract_AnimeGroup> grps = JMMServerVM.Instance.clientBinaryHTTP.GetAllGroupsAboveSeries (ser.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 187.
Long Statement,JMMClient,AnimeSeriesVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeSeriesVM.cs,SetSeriesNames,The length of the statement  "			if (TvDBSeriesV2 != null && TvDBSeriesV2.Count > 0 && !string.IsNullOrEmpty (TvDBSeriesV2 [0].SeriesName) && !TvDBSeriesV2 [0].SeriesName.ToUpper ().Contains ("**DUPLICATE")) " is 174.
Long Statement,JMMClient,AnimeSeriesVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeSeriesVM.cs,RefreshEpisodes,The length of the statement  "		List<JMMServerBinary.Contract_AnimeEpisode> eps = JMMServerVM.Instance.clientBinaryHTTP.GetEpisodesForSeries (AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 181.
Long Statement,JMMClient,AnimeSeriesVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeSeriesVM.cs,RefreshBase,The length of the statement  "	JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 168.
Long Statement,JMMClient,AnimeSeriesVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeSeriesVM.cs,Save,The length of the statement  "		JMMServerBinary.Contract_AnimeSeries_SaveResponse response = JMMServerVM.Instance.clientBinaryHTTP.SaveSeries (this.ToContract ()' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 181.
Long Statement,JMMClient,AppSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\AppSettings.cs,DebugSettingsToLog,The length of the statement  "	string screenSize = System.Windows.Forms.Screen.PrimaryScreen.Bounds.Width.ToString () + "x" + System.Windows.Forms.Screen.PrimaryScreen.Bounds.Height.ToString (); " is 163.
Long Statement,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,SetupImageClient,The length of the statement  "		string url = string.Format (@"http://{0}:{1}/JMMServerImage"' AppSettings.JMMServer_Address' AppSettings.JMMServer_Port); " is 121.
Long Statement,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,SetupStreamingClient,The length of the statement  "		string url = string.Format (@"net.tcp://{0}:{1}/JMMServerStreaming"' AppSettings.JMMServer_Address' AppSettings.JMMServer_FilePort); " is 132.
Long Statement,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,SetupBinaryClient,The length of the statement  "		string url = string.Format (@"http://{0}:{1}/JMMServerBinary"' AppSettings.JMMServer_Address' AppSettings.JMMServer_Port); " is 122.
Long Statement,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,LoginAsLastUser,The length of the statement  "	JMMServerBinary.Contract_JMMUser retUser = JMMServerVM.Instance.clientBinaryHTTP.AuthenticateUser (AppSettings.LastLoginUsername' ""); " is 134.
Long Statement,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,serverStatusTimer_Elapsed,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,PlaylistHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\PlaylistHelperVM.cs,RefreshData,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,UTorrentHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\UTorrentHelperVM.cs,uTorrent_ListRefreshedEvent,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,UTorrentHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\UTorrentHelperVM.cs,uTorrent_ListRefreshedEvent,The length of the statement  "			System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,UTorrentHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\UTorrentHelperVM.cs,uTorrent_ListRefreshedEvent,The length of the statement  "	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,SetLastWatchedDescription,The length of the statement  "		if (WatchedDate.Value.Day == today.Day && WatchedDate.Value.Month == today.Month && WatchedDate.Value.Year == today.Year) { " is 123.
Long Statement,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,SetLastWatchedDescription,The length of the statement  "		if (WatchedDate.Value.Day == yesterday.Day && WatchedDate.Value.Month == yesterday.Month && WatchedDate.Value.Year == yesterday.Year) { " is 135.
Long Statement,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,EvaluateGroupFilter,The length of the statement  "		if (this.GroupFilterID.Value == Constants.StaticGF.Predefined || this.GroupFilterID.Value == Constants.StaticGF.Predefined_Categories || this.GroupFilterID.Value == Constants.StaticGF.Predefined_Years) " is 201.
Long Statement,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,EvaluateGroupFilter,The length of the statement  "			if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) { " is 129.
Long Statement,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,EvaluateGroupFilter,The length of the statement  "			if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) { " is 129.
Long Statement,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,EvaluateGroupFilter,The length of the statement  "			if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) { " is 129.
Long Statement,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,EvaluateGroupFilter,The length of the statement  "			if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) { " is 129.
Long Statement,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,EvaluateGroupFilter,The length of the statement  "			if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && !tvDBInfoMissing2 && ser.CrossRef_AniDB_MovieDB != null) " is 120.
Long Statement,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,EvaluateGroupFilter,The length of the statement  "			if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) " is 127.
Long Statement,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,EvaluateGroupFilter,The length of the statement  "			if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) " is 127.
Long Statement,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,EvaluateGroupFilter,The length of the statement  "			if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) { " is 129.
Long Statement,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,EvaluateGroupFilter,The length of the statement  "			if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) { " is 129.
Long Statement,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,GetDirectChildren,The length of the statement  "	if (this.GroupFilterID.Value == Constants.StaticGF.All || this.GroupFilterID.Value == Constants.StaticGF.Predefined_Categories_Child || this.GroupFilterID.Value == Constants.StaticGF.Predefined_Years_Child || this.GroupFilterID.Value >= 0) { " is 241.
Long Statement,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,Populate,The length of the statement  "	//SortCriteriaList = new ObservableCollection<GroupFilterSortingCriteria>(SortCriteriaList.OrderBy(p => p.GroupFilterSortingString)); " is 133.
Long Statement,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,Populate,The length of the statement  "	FilterConditions = new ObservableCollection<GroupFilterConditionVM> (FilterConditions.OrderBy (p => p.ConditionTypeString)); " is 124.
Long Statement,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,Save,The length of the statement  "		JMMServerBinary.Contract_GroupFilter_SaveResponse response = JMMServerVM.Instance.clientBinaryHTTP.SaveGroupFilter (this.ToContract ()); " is 136.
Long Statement,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,DownloadWebPage,The length of the statement  "		string msg = "---------- ERROR IN DOWNLOAD WEB PAGE ---------" + Environment.NewLine + url + Environment.NewLine + ex.ToString () + Environment.NewLine + "------------------------------------"; " is 193.
Long Statement,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,DownloadFile,The length of the statement  "				client.Headers.Add ("user-agent"' "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"); " is 132.
Long Statement,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,DownloadFile,The length of the statement  "		string msg = "---------- ERROR IN DOWNLOAD WEB PAGE ---------" + Environment.NewLine + url + Environment.NewLine + ex.ToString () + Environment.NewLine + "------------------------------------"; " is 193.
Long Statement,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,FormatSecondsToDisplayTime,The length of the statement  "		return string.Format ("{0}:{1}:{2}"' t.Hours' t.Minutes.ToString ().PadLeft (2' '0')' t.Seconds.ToString ().PadLeft (2' '0')); " is 126.
Long Statement,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,ReparseDescription,The length of the statement  "	val = val.Replace ("<br />"' Environment.NewLine).Replace ("<br/>"' Environment.NewLine).Replace ("<i>"' "").Replace ("</i>"' "").Replace ("<b>"' "").Replace ("</b>"' "").Replace ("[i]"' "").Replace ("[/i]"' "").Replace ("[b]"' "").Replace ("[/b]"' ""); " is 253.
Long Statement,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,ReparseDescription,The length of the statement  "	val = val.Replace ("<BR />"' Environment.NewLine).Replace ("<BR/>"' Environment.NewLine).Replace ("<I>"' "").Replace ("</I>"' "").Replace ("<B>"' "").Replace ("</B>"' "").Replace ("[I]"' "").Replace ("[/I]"' "").Replace ("[B]"' "").Replace ("[/B]"' ""); " is 253.
Long Statement,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,AniDBVoteRecommendation,The length of the statement  "	string url = string.Format (@"http://anidb.net/perl-bin/animedb.pl?show=addsimilaranime&do.vote={0}&aid={1}&sid={2}&redirect=anime"' isVoteUp ? "up" : "down"' animeID' similarAnimeID); " is 184.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,postStartTimer_Elapsed,The length of the statement  "	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,showDashboardWorker_DoWork,The length of the statement  "	DashboardVM.Instance.RefreshData (opt.TraktScrobbles' opt.TraktShouts' opt.RefreshContinueWatching' opt.RefreshRecentAdditions' opt.RefreshOtherWidgets' opt.RecentAdditionType); " is 177.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,DisplayMainTab,The length of the statement  "				if (DashboardVM.Instance.EpsWatchNext_Recent.Count == 0 && DashboardVM.Instance.SeriesMissingEps.Count == 0 && DashboardVM.Instance.MiniCalendar.Count == 0 && DashboardVM.Instance.RecommendationsWatch.Count == 0 && DashboardVM.Instance.RecommendationsDownload.Count == 0) { " is 273.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,DisplayMainTab,The length of the statement  "			if (UserSettingsVM.Instance.SelectedTorrentSources.Count == 0 || UserSettingsVM.Instance.UnselectedTorrentSources.Count == 0) " is 125.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,btnToolbarSort_Click,The length of the statement  "	MainListHelperVM.Instance.ViewGroups.SortDescriptions.Add (GroupFilterHelper.GetSortDescription (sortType' GroupFilterSortDirection.Asc)); " is 138.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,toggleStatusWorker_DoWork,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnVideo (vid.VideoLocalID' newStatus' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 145.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,toggleStatusWorker_DoWork,The length of the statement  "			JMMServerBinary.Contract_ToggleWatchedStatusOnEpisode_Response response = JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnEpisode (ep.AnimeEpisodeID' newStatus' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 222.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,moveSeriesWorker_DoWork,The length of the statement  "		JMMServerBinary.Contract_AnimeSeries_SaveResponse response = JMMServerVM.Instance.clientBinaryHTTP.MoveSeries (request.UpdatedSeries.AnimeSeriesID.Value' request.UpdatedSeries.AnimeGroupID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 240.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,moveSeriesWorker_DoWork,The length of the statement  "		/*Dictionary<int' JMMServerBinary.Contract_AnimeGroup> grpsDict = new Dictionary<int' JMMServerBinary.Contract_AnimeGroup>();" is 125.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,moveSeriesWorker_DoWork,The length of the statement  "				List<JMMServerBinary.Contract_AnimeGroup> grps = JMMServerVM.Instance.clientBinaryHTTP.GetAllGroupsAboveGroupInclusive(request.UpdatedSeries.AnimeGroupID'" is 154.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,moveSeriesWorker_DoWork,The length of the statement  "				List<JMMServerBinary.Contract_AnimeGroup> grpsOld = JMMServerVM.Instance.clientBinaryHTTP.GetAllGroupsAboveGroupInclusive(request.OldAnimeGroupID'" is 146.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,downloadImagesWorker_DoWork,The length of the statement  "	List<JMMServerBinary.Contract_TvDB_ImagePoster> posters = JMMServerVM.Instance.clientBinaryHTTP.GetAllTvDBPosters (null); " is 121.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,downloadImagesWorker_DoWork,The length of the statement  "	List<JMMServerBinary.Contract_MovieDB_Poster> moviePosters = JMMServerVM.Instance.clientBinaryHTTP.GetAllMovieDBPosters (null); " is 127.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,downloadImagesWorker_DoWork,The length of the statement  "	List<JMMServerBinary.Contract_TvDB_ImageWideBanner> banners = JMMServerVM.Instance.clientBinaryHTTP.GetAllTvDBWideBanners (null); " is 129.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,downloadImagesWorker_DoWork,The length of the statement  "	List<JMMServerBinary.Contract_TvDB_ImageFanart> fanarts = JMMServerVM.Instance.clientBinaryHTTP.GetAllTvDBFanart (null); " is 120.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,downloadImagesWorker_DoWork,The length of the statement  "	List<JMMServerBinary.Contract_MovieDB_Fanart> movieFanarts = JMMServerVM.Instance.clientBinaryHTTP.GetAllMovieDBFanart (null); " is 126.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,downloadImagesWorker_DoWork,The length of the statement  "	List<JMMServerBinary.Contract_Trakt_ImagePoster> traktPosters = JMMServerVM.Instance.clientBinaryHTTP.GetAllTraktPosters (null); " is 128.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,downloadImagesWorker_DoWork,The length of the statement  "	List<JMMServerBinary.Contract_Trakt_ImageFanart> traktFanarts = JMMServerVM.Instance.clientBinaryHTTP.GetAllTraktFanart (null); " is 127.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,downloadImagesWorker_DoWork,The length of the statement  "	List<JMMServerBinary.Contract_Trakt_Episode> traktEpisodes = JMMServerVM.Instance.clientBinaryHTTP.GetAllTraktEpisodes (null); " is 126.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_ShowTorrentSearch,The length of the statement  "			JMMServerBinary.Contract_AnimeEpisode contract = JMMServerVM.Instance.clientBinaryHTTP.GetEpisodeByAniDBEpisodeID (rec.EpisodeID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 180.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_ShowPinnedSeries,The length of the statement  "			JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (scrobble.Episode.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 185.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_ShowPinnedSeries,The length of the statement  "			JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (shoutEpisode.Shout.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 187.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_ShowPinnedSeries,The length of the statement  "			JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (shoutShow.Shout.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 184.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_ShowPinnedSeries,The length of the statement  "			JMMServerBinary.Contract_AnimeSeries contract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (search.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 175.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_Delete,The length of the statement  "			MessageBoxResult res = MessageBox.Show (string.Format ("Are you sure you want to delete the Group Filter: {0}"' gf.FilterName)' "Confirm"' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 189.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_DeleteFilterCondition,The length of the statement  "			MessageBoxResult res = MessageBox.Show (string.Format ("Are you sure you want to delete the Filter Condition: {0}"' gfc.NiceDescription)' "Confirm"' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 199.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_DeleteFilterCondition,The length of the statement  "							if (gfc.ConditionOperator == gf.FilterConditions [i].ConditionOperator && gfc.ConditionParameter == gf.FilterConditions [i].ConditionParameter && gfc.ConditionType == gf.FilterConditions [i].ConditionType) { " is 207.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_DeleteFilterSort,The length of the statement  "			MessageBoxResult res = MessageBox.Show (string.Format ("Are you sure you want to delete the sorting?")' "Confirm"' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 165.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_DeletePlaylist,The length of the statement  "		MessageBoxResult res = MessageBox.Show (string.Format ("Are you sure you want to delete the playlist: {0}"' pl.PlaylistName)' "Confirm"' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 187.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_RemoveMissingFiles,The length of the statement  "		MessageBoxResult res = MessageBox.Show (string.Format ("Are you sure you want run this process?")' "Confirm"' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 160.
Long Statement,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,HighlightMainListItem,The length of the statement  "				if (MainListHelperVM.Instance.LastGroupFilterID != 0 && MainListHelperVM.Instance.LastGroupForGF.ContainsKey (MainListHelperVM.Instance.LastGroupFilterID)) { " is 157.
Long Statement,JMMClient.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\DownloadHelper.cs,SearchTorrents,The length of the statement  "		if (UserSettingsVM.Instance.BakaBTOnlyUseForSeriesSearches && !string.IsNullOrEmpty (UserSettingsVM.Instance.BakaBTUsername) && !string.IsNullOrEmpty (UserSettingsVM.Instance.BakaBTPassword)) { " is 193.
Long Statement,JMMClient.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\DownloadHelper.cs,SearchTorrents,The length of the statement  "		if (UserSettingsVM.Instance.AnimeBytesOnlyUseForSeriesSearches && !string.IsNullOrEmpty (UserSettingsVM.Instance.AnimeBytesUsername) && !string.IsNullOrEmpty (UserSettingsVM.Instance.AnimeBytesPassword)) { " is 205.
Long Statement,JMMClient.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\DownloadHelper.cs,SearchTorrents,The length of the statement  "		if (src.TorrentSource == TorrentSourceType.TokyoToshokanAll || src.TorrentSource == TorrentSourceType.TokyoToshokanAnime) { " is 123.
Long Statement,JMMClient.Downloads,JSONHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\JSONHelper.cs,Serialize,The length of the statement  "	System.Runtime.Serialization.Json.DataContractJsonSerializer serializer = new System.Runtime.Serialization.Json.DataContractJsonSerializer (obj.GetType ()); " is 156.
Long Statement,JMMClient.Downloads,JSONHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\JSONHelper.cs,Deserialize,The length of the statement  "	System.Runtime.Serialization.Json.DataContractJsonSerializer serializer = new System.Runtime.Serialization.Json.DataContractJsonSerializer (obj.GetType ()); " is 156.
Long Statement,JMMClient.Downloads,TorrentLinkVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentLink.cs,ToString,The length of the statement  "	return string.Format ("Torrent:   ({0}) {1}({2}) - {3} "' Source.TorrentSourceName' TorrentName' RawTorrentName' TorrentDownloadLink); " is 134.
Long Statement,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,Login,The length of the statement  "		// NOTE: This is the URL the form POSTs to' not the URL of the form (you can find this in the "action" attribute of the HTML's form tag " is 135.
Long Statement,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,ParseSource,The length of the statement  "	string torSeedStart = "<td class=" + quote + "torrent_seeders" + quote + " title=" + quote + "Seeders" + quote + "><span>"; " is 123.
Long Statement,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,ParseSource,The length of the statement  "	string torLeechStart = "<td class=" + quote + "torrent_leechers" + quote + " title=" + quote + "Leechers" + quote + "><span>"; " is 126.
Long Statement,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,ParseSource,The length of the statement  "			string torSize = output.Substring (posTorSizeStart + torSizeStart.Length' posTorSizeEnd - posTorSizeStart - torSizeStart.Length); " is 129.
Long Statement,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,ParseSource,The length of the statement  "			string torSeed = output.Substring (posTorSeedStart + torSeedStart.Length' posTorSeedEnd - posTorSeedStart - torSeedStart.Length); " is 129.
Long Statement,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,ParseSource,The length of the statement  "			string torLeech = output.Substring (posTorLeechStart + torLeechStart.Length' posTorLeechEnd - posTorLeechStart - torLeechStart.Length); " is 135.
Long Statement,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,GetTorrents,The length of the statement  "		if (string.IsNullOrEmpty (UserSettingsVM.Instance.AnimeBytesUsername) || string.IsNullOrEmpty (UserSettingsVM.Instance.AnimeBytesPassword)) " is 139.
Long Statement,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,GetTorrents,The length of the statement  "		string urlBase = "http://animebyt.es/torrents.php?filter_cat%5B1%5D=1&searchstr={0}&action=advanced&search_type=title&year=&year2=&tags=&tags_type=0&sort=time_added&way=desc&hentai=2&releasegroup=&epcount=&epcount2=&artbooktitle="; " is 231.
Long Statement,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,BrowseTorrents,The length of the statement  "		if (string.IsNullOrEmpty (UserSettingsVM.Instance.AnimeBytesUsername) || string.IsNullOrEmpty (UserSettingsVM.Instance.AnimeBytesPassword)) " is 139.
Long Statement,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,GetAllCookies,The length of the statement  "	Hashtable table = (Hashtable)cc.GetType ().InvokeMember ("m_domainTable"' System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.GetField | System.Reflection.BindingFlags.Instance' null' cc' new object[] { " is 224.
Long Statement,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,GetAllCookies,The length of the statement  "		SortedList lstCookieCol = (SortedList)pathList.GetType ().InvokeMember ("m_list"' System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.GetField | System.Reflection.BindingFlags.Instance' null' pathList' new object[] { " is 238.
Long Statement,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,ShowAllCookies,The length of the statement  "		sb.AppendLine ("#" + cpt++ + "> Name: " + c.Name + "\tValue: " + c.Value + "\tDomain: " + c.Domain + "\tPath: " + c.Path + "\tExp: " + c.Expires.ToString ()); " is 158.
Long Statement,JMMClient.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsBakaBT.cs,Login,The length of the statement  "		// NOTE: This is the URL the form POSTs to' not the URL of the form (you can find this in the "action" attribute of the HTML's form tag " is 135.
Long Statement,JMMClient.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsBakaBT.cs,ParseSource,The length of the statement  "			string linkAlt = output.Substring (poslinkStartAlt + linkStartAlt.Length' poslinkEndAlt - poslinkStartAlt - linkStartAlt.Length); " is 129.
Long Statement,JMMClient.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsBakaBT.cs,ParseSource,The length of the statement  "			string torNameAlt = output.Substring (posnameStartAlt + nameStartAlt.Length' posnameEndAlt - posnameStartAlt - nameStartAlt.Length); " is 132.
Long Statement,JMMClient.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsBakaBT.cs,ParseSource,The length of the statement  "				torSizeAlt = output.Substring (posSizeStartAlt + sizeStartAlt.Length' posSizeEndAlt - posSizeStartAlt - sizeStartAlt.Length); " is 125.
Long Statement,JMMClient.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsBakaBT.cs,ParseSource,The length of the statement  "				torSeedAlt = output.Substring (posSeedStartAlt + seedStartAlt.Length' posSeedEndAlt - posSeedStartAlt - seedStartAlt.Length); " is 125.
Long Statement,JMMClient.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsBakaBT.cs,ParseSource,The length of the statement  "				torLeechAlt = output.Substring (posLeechStartAlt + leechStartAlt.Length' posLeechEndAlt - posLeechStartAlt - leechStartAlt.Length); " is 131.
Long Statement,JMMClient.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsBakaBT.cs,GetTorrents,The length of the statement  "		if (string.IsNullOrEmpty (UserSettingsVM.Instance.BakaBTUsername) || string.IsNullOrEmpty (UserSettingsVM.Instance.BakaBTPassword)) " is 131.
Long Statement,JMMClient.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsBakaBT.cs,GetTorrents,The length of the statement  "		string urlBase = "http://bakabt.me/browse.php?only=0&hentai=1&incomplete=1&lossless=1&hd=1&multiaudio=1&bonus=1&c1=1&c2=1&c5=1&reorder=1&q={0}"; " is 144.
Long Statement,JMMClient.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsBakaBT.cs,BrowseTorrents,The length of the statement  "		if (string.IsNullOrEmpty (UserSettingsVM.Instance.BakaBTUsername) || string.IsNullOrEmpty (UserSettingsVM.Instance.BakaBTPassword)) " is 131.
Long Statement,JMMClient.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsBakaBT.cs,BrowseTorrents,The length of the statement  "		string url = "http://bakabt.me/browse.php?only=0&hentai=1&incomplete=1&lossless=1&hd=1&multiaudio=1&bonus=1&c1=1&c2=1&c5=1&reorder=1&q="; " is 137.
Long Statement,JMMClient.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsBakaBT.cs,PopulateTorrentLink,The length of the statement  "		if (string.IsNullOrEmpty (UserSettingsVM.Instance.BakaBTUsername) || string.IsNullOrEmpty (UserSettingsVM.Instance.BakaBTPassword)) " is 131.
Long Statement,JMMClient.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsBakaBT.cs,GetAllCookies,The length of the statement  "	Hashtable table = (Hashtable)cc.GetType ().InvokeMember ("m_domainTable"' System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.GetField | System.Reflection.BindingFlags.Instance' null' cc' new object[] { " is 224.
Long Statement,JMMClient.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsBakaBT.cs,GetAllCookies,The length of the statement  "		SortedList lstCookieCol = (SortedList)pathList.GetType ().InvokeMember ("m_list"' System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.GetField | System.Reflection.BindingFlags.Instance' null' pathList' new object[] { " is 238.
Long Statement,JMMClient.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsBakaBT.cs,ShowAllCookies,The length of the statement  "		sb.AppendLine ("#" + cpt++ + "> Name: " + c.Name + "\tValue: " + c.Value + "\tDomain: " + c.Domain + "\tPath: " + c.Path + "\tExp: " + c.Expires.ToString ()); " is 158.
Long Statement,JMMClient.Downloads,TorrentsNyaa,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsNyaa.cs,ParseSourceSingleResult,The length of the statement  "	// class="thead">Name:</td><td class="tinfotorrentname">[Hadena] Koi to Senkyo to Chocolate - 03 [720p] [9CD64623].mkv</td> " is 123.
Long Statement,JMMClient.Downloads,TorrentsNyaa,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsNyaa.cs,ParseSourceSingleResult,The length of the statement  "	string seedStart = "Seeders:</td><td class=" + quote + "vtop" + quote + "><span class=" + quote + "tinfosn" + quote + ">"; " is 122.
Long Statement,JMMClient.Downloads,TorrentsNyaa,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsNyaa.cs,ParseSourceSingleResult,The length of the statement  "	string leechStart = "Leechers:</td><td class=" + quote + "vtop" + quote + "><span class=" + quote + "tinfoln" + quote + ">"; " is 124.
Long Statement,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,PopulateToken,The length of the statement  "		// <html><div id='token' style='display:none;'>u3iiuDG4dwYDMzurIFif7FS-ldLPcvHk6QlB4y8LSKK5mX9GSPUZ_PpxD0s=</div></html> " is 120.
Long Statement,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,AddTorrentFromURL,The length of the statement  "		string url = string.Format (urlTorrentAddURL' AppSettings.UTorrentAddress' AppSettings.UTorrentPort' token' encodedURL); " is 120.
Long Statement,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,FileSetPriority,The length of the statement  "		string url = string.Format (urlTorrentFilePriority' AppSettings.UTorrentAddress' AppSettings.UTorrentPort' token' hash' (int)priority' idx); " is 140.
Long Statement,JMMClient.Forms,DeleteFilesForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\DeleteFilesForm.xaml.cs,DeleteFilesForm_Closing,The length of the statement  "		MessageBox.Show ("Please wait until the process is complete"' "Stop"' MessageBoxButton.OK' MessageBoxImage.Information); " is 120.
Long Statement,JMMClient.Forms,DeleteFilesForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\DeleteFilesForm.xaml.cs,btnOK_Click,The length of the statement  "	string msg = string.Format ("Are you sure you want to delete these {0} file/s' the physical video files will also be deleted"' vids.Count); " is 139.
Long Statement,JMMClient.Forms,DeleteFilesForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\DeleteFilesForm.xaml.cs,Init,The length of the statement  "		List<JMMServerBinary.Contract_VideoDetailed> vidContracts = JMMServerVM.Instance.clientBinaryHTTP.GetFilesByGroupAndResolution (AnimeID' GroupVideoQuality.GroupName' GroupVideoQuality.Resolution' GroupVideoQuality.VideoSource' GroupVideoQuality.VideoBitDepth' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 310.
Long Statement,JMMClient.Forms,DeleteFilesForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\DeleteFilesForm.xaml.cs,Init,The length of the statement  "		List<JMMServerBinary.Contract_VideoDetailed> vidContracts = JMMServerVM.Instance.clientBinaryHTTP.GetFilesByGroup (AnimeID' GroupFileSummary.GroupName' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 202.
Long Statement,JMMClient.Forms,GroupFilterConditionForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,The length of the statement  "	groupFilterCondition.ConditionType = (int)GroupFilterHelper.GetEnumForText_ConditionType (cboConditionType.SelectedItem.ToString ()); " is 133.
Long Statement,JMMClient.Forms,GroupFilterConditionForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,The length of the statement  "	groupFilterCondition.ConditionOperator = (int)GroupFilterHelper.GetEnumForText_Operator (cboConditionOperator.SelectedItem.ToString ()); " is 136.
Long Statement,JMMClient.Forms,GroupFilterConditionForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,The length of the statement  "			MessageBox.Show (Properties.Resources.MSG_ERR_GroupSelectionRequired' "Error"' MessageBoxButton.OK' MessageBoxImage.Error); " is 123.
Long Statement,JMMClient.Forms,GroupFilterConditionForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\GroupFilterConditionForm.xaml.cs,EvaluateConditionsAndOperators,The length of the statement  "	GroupFilterConditionType conditionType = GroupFilterHelper.GetEnumForText_ConditionType (cboConditionType.SelectedItem.ToString ()); " is 132.
Long Statement,JMMClient.Forms,GroupFilterConditionForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\GroupFilterConditionForm.xaml.cs,cboConditionType_SelectionChanged,The length of the statement  "	GroupFilterConditionType conditionType = GroupFilterHelper.GetEnumForText_ConditionType (cboConditionType.SelectedItem.ToString ()); " is 132.
Long Statement,JMMClient.Forms,GroupFilterConditionForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\GroupFilterConditionForm.xaml.cs,PopulateAnimeGroups,The length of the statement  "	List<JMMServerBinary.Contract_AnimeGroup> grpsRaw = JMMServerVM.Instance.clientBinaryHTTP.GetAllGroups (JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 154.
Long Statement,JMMClient.Forms,GroupFilterConditionForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\GroupFilterConditionForm.xaml.cs,Init,The length of the statement  "			GroupFilterConditionType conditionTypeTemp = GroupFilterHelper.GetEnumForText_ConditionType (cboConditionType.Items [i].ToString ()); " is 133.
Long Statement,JMMClient.Forms,GroupFilterConditionForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\GroupFilterConditionForm.xaml.cs,Init,The length of the statement  "		GroupFilterConditionType conditionType = GroupFilterHelper.GetEnumForText_ConditionType (cboConditionType.SelectedItem.ToString ()); " is 132.
Long Statement,JMMClient.Forms,GroupFilterConditionForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\GroupFilterConditionForm.xaml.cs,Init,The length of the statement  "			GroupFilterOperator opTypeTemp = GroupFilterHelper.GetEnumForText_Operator (cboConditionOperator.Items [i].ToString ()); " is 120.
Long Statement,JMMClient.Forms,GroupFilterSortingForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\GroupFilterSortingForm.xaml.cs,btnConfirm_Click,The length of the statement  "	groupFilterSortingCriteria.SortDirection = GroupFilterHelper.GetEnumForText_SortDirection (cboDirection.SelectedItem.ToString ()); " is 130.
Long Statement,JMMClient.Forms,ImportFolder,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\ImportFolder.xaml.cs,btnSave_Click,The length of the statement  "		if (chkDropDestination.IsChecked.HasValue && chkDropSource.IsChecked.HasValue && chkDropDestination.IsChecked.Value && chkDropSource.IsChecked.Value) { " is 151.
Long Statement,JMMClient.Forms,ImportFolder,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\ImportFolder.xaml.cs,btnSave_Click,The length of the statement  "			MessageBox.Show (Properties.Resources.MSG_ERR_DropSourceDestCheck' "Error"' MessageBoxButton.OK' MessageBoxImage.Error); " is 120.
Long Statement,JMMClient.Forms,ImportFolder,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\ImportFolder.xaml.cs,btnSave_Click,The length of the statement  "			MessageBox.Show (Properties.Resources.MSG_ERR_ImportFolderLocationCheck' "Error"' MessageBoxButton.OK' MessageBoxImage.Error); " is 126.
Long Statement,JMMClient.Forms,LoginForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\LoginForm.xaml.cs,btnLogin_Click,The length of the statement  "		JMMServerBinary.Contract_JMMUser retUser = JMMServerVM.Instance.clientBinaryHTTP.AuthenticateUser (user.Username' txtPassword.Password.Trim ()); " is 144.
Long Statement,JMMClient.Forms,MoveSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\MoveSeries.xaml.cs,btnOK_Click,The length of the statement  "			MessageBox.Show (Properties.Resources.MSG_ERR_GroupSelectionRequired' "Error"' MessageBoxButton.OK' MessageBoxImage.Error); " is 123.
Long Statement,JMMClient.Forms,NewSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\NewSeries.xaml.cs,btnAnimeSearch_Click,The length of the statement  "		List<JMMServerBinary.Contract_AnimeSearch> searchResults = JMMServerVM.Instance.clientBinaryHTTP.OnlineAnimeTitleSearch (txtAnimeSearch.Text.Trim ()); " is 150.
Long Statement,JMMClient.Forms,NewSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\NewSeries.xaml.cs,btnConfirm_Click,The length of the statement  "				MessageBox.Show (Properties.Resources.MSG_ERR_GroupSelectionRequired' "Error"' MessageBoxButton.OK' MessageBoxImage.Error); " is 123.
Long Statement,JMMClient.Forms,NewSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\NewSeries.xaml.cs,btnConfirm_Click,The length of the statement  "		JMMServerBinary.Contract_AnimeSeries_SaveResponse response = JMMServerVM.Instance.clientBinaryHTTP.CreateSeriesFromAnime (animeID' groupID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 190.
Long Statement,JMMClient.Forms,NewSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\NewSeries.xaml.cs,Init,The length of the statement  "		List<JMMServerBinary.Contract_AnimeGroup> grpsRaw = JMMServerVM.Instance.clientBinaryHTTP.GetAllGroups (JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 154.
Long Statement,JMMClient.Forms,NewSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\NewSeries.xaml.cs,Init,The length of the statement  "		List<JMMServerBinary.Contract_AnimeGroup> grpsRaw = JMMServerVM.Instance.clientBinaryHTTP.GetAllGroups (JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 154.
Long Statement,JMMClient.Forms,RandomEpisodeForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\RandomEpisodeForm.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnVideo (vid.VideoLocalID' newStatus' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 145.
Long Statement,JMMClient.Forms,RandomEpisodeForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\RandomEpisodeForm.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "			JMMServerBinary.Contract_ToggleWatchedStatusOnEpisode_Response response = JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnEpisode (ep.AnimeEpisodeID' newStatus' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 222.
Long Statement,JMMClient.Forms,RateSeriesForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\RateSeriesForm.xaml.cs,RateSeriesForm_DataContextChanged,The length of the statement  "	TraktLinkExists = ser.AniDB_Anime != null && ser.AniDB_Anime.AniDB_AnimeCrossRefs != null && ser.AniDB_Anime.AniDB_AnimeCrossRefs.TraktCrossRefExists; " is 150.
Long Statement,JMMClient.Forms,SearchMALForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\SearchMALForm.xaml.cs,btnSearch_Click,The length of the statement  "		List<JMMServerBinary.Contract_CrossRef_AniDB_MALResult> xrefs = JMMServerVM.Instance.clientBinaryHTTP.GetMALCrossRefWebCache (AnimeID); " is 135.
Long Statement,JMMClient.Forms,SearchMALForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\SearchMALForm.xaml.cs,btnSearch_Click,The length of the statement  "		List<JMMServerBinary.Contract_MALAnimeResponse> malResults = JMMServerVM.Instance.clientBinaryHTTP.SearchMAL (txtSearch.Text.Trim ()); " is 134.
Long Statement,JMMClient.Forms,SearchMovieDBForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\SearchMovieDBForm.xaml.cs,btnSearch_Click,The length of the statement  "		JMMServerBinary.Contract_CrossRef_AniDB_OtherResult xref = JMMServerVM.Instance.clientBinaryHTTP.GetOtherAnimeCrossRefWebCache (AnimeID' (int)CrossRefType.MovieDB); " is 164.
Long Statement,JMMClient.Forms,SearchMovieDBForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\SearchMovieDBForm.xaml.cs,btnSearch_Click,The length of the statement  "		List<JMMServerBinary.Contract_MovieDBMovieSearchResult> movieResults = JMMServerVM.Instance.clientBinaryHTTP.SearchTheMovieDB (txtSearch.Text.Trim ()); " is 151.
Long Statement,JMMClient.Forms,SearchTraktForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\SearchTraktForm.xaml.cs,btnSearch_Click,The length of the statement  "		JMMServerBinary.Contract_CrossRef_AniDB_TraktResult xref = JMMServerVM.Instance.clientBinaryHTTP.GetTraktCrossRefWebCache (AnimeID); " is 132.
Long Statement,JMMClient.Forms,SearchTraktForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\SearchTraktForm.xaml.cs,btnSearch_Click,The length of the statement  "		List<JMMServerBinary.Contract_TraktTVShowResponse> traktResults = JMMServerVM.Instance.clientBinaryHTTP.SearchTrakt (txtSearch.Text.Trim ()); " is 141.
Long Statement,JMMClient.Forms,SearchTvDBForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\SearchTvDBForm.xaml.cs,btnUseThis_Click,The length of the statement  "			res = JMMServerVM.Instance.clientBinaryHTTP.LinkAniDBTvDB (xref.AnimeID' xref.AniDBStartEpisodeType' xref.AniDBStartEpisodeNumber' xref.TvDBID' xref.TvDBSeasonNumber' xref.TvDBStartEpisodeNumber' null); " is 202.
Long Statement,JMMClient.Forms,SearchTvDBForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\SearchTvDBForm.xaml.cs,CommandBinding_UseThis,The length of the statement  "			frm.Init (AnimeID' AnimeName' EpisodeType.Episode' 1' searchResult.SeriesID' 1' 1' searchResult.SeriesName' Anime' null); " is 121.
Long Statement,JMMClient.Forms,SearchTvDBForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\SearchTvDBForm.xaml.cs,btnSearch_Click,The length of the statement  "		List<JMMServerBinary.Contract_Azure_CrossRef_AniDB_TvDB> xrefs = JMMServerVM.Instance.clientBinaryHTTP.GetTVDBCrossRefWebCache (AnimeID); " is 137.
Long Statement,JMMClient.Forms,SearchTvDBForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\SearchTvDBForm.xaml.cs,btnSearch_Click,The length of the statement  "		List<JMMServerBinary.Contract_TVDBSeriesSearchResult> tvResults = JMMServerVM.Instance.clientBinaryHTTP.SearchTheTvDB (txtSearch.Text.Trim ()); " is 143.
Long Statement,JMMClient.Forms,SelectGroupSeriesForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\SelectGroupSeriesForm.xaml.cs,Init,The length of the statement  "		List<JMMServerBinary.Contract_AnimeGroup> grpsRaw = JMMServerVM.Instance.clientBinaryHTTP.GetAllGroups (JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 154.
Long Statement,JMMClient.Forms,SelectGroupSeriesForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\SelectGroupSeriesForm.xaml.cs,Init,The length of the statement  "		List<JMMServerBinary.Contract_AnimeSeries> sersRaw = JMMServerVM.Instance.clientBinaryHTTP.GetAllSeries (JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 155.
Long Statement,JMMClient.Forms,SelectMALStartForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\SelectMALStartForm.xaml.cs,btnUpdate_Click,The length of the statement  "			res = JMMServerVM.Instance.clientBinaryHTTP.LinkAniDBMALUpdated (AnimeID' MALID' MALTitle' OldEpType.Value' OldEpNumber.Value' epType' epNumber); " is 145.
Long Statement,JMMClient.Forms,SelectTraktSeasonForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\SelectTraktSeasonForm.xaml.cs,btnUpdate_Click,The length of the statement  "			MessageBox.Show ("No seasons available' check the Trakt ID again"' "Error"' MessageBoxButton.OK' MessageBoxImage.Error); " is 120.
Long Statement,JMMClient.Forms,SelectTvDBEpisodeForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\SelectTvDBEpisodeForm.xaml.cs,CommandBinding_UseThis,The length of the statement  "			string res = JMMServerVM.Instance.clientBinaryHTTP.LinkAniDBTvDBEpisode (AnimeEpisode.AniDB_EpisodeID' tvEp.Id' AnimeID); " is 121.
Long Statement,JMMClient.Forms,SelectTvDBSeasonForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\SelectTvDBSeasonForm.xaml.cs,btnUpdate_Click,The length of the statement  "		string res = JMMServerVM.Instance.clientBinaryHTTP.LinkAniDBTvDB (AnimeID' AnimeEpisodeType' AnimeEpisodeNumber' TvDBID' TvDBSeason' TvDBEpisodeNumber' CrossRef_AniDB_TvDBV2ID); " is 177.
Long Statement,JMMClient.Forms,SelectTvDBSeasonForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\SelectTvDBSeasonForm.xaml.cs,Init,The length of the statement  "	List<JMMClient.JMMServerBinary.Contract_AniDB_Episode> contracts = JMMServerVM.Instance.clientBinaryHTTP.GetAniDBEpisodesForAnime (AnimeID); " is 140.
Long Statement,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\MultiSort.cs,SortInPlace,The length of the statement  "		throw new Exception ("Error trying to sort list of " + typeof(T).Name + " using " + (sortBy.NameIsPropertyName ? "property " : "field ") + sortBy.sPropertyOrFieldName' ex); " is 172.
Long Statement,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The length of the statement  "				throw new Exception ("Property name " + sPropertyName + " not found while trying to compare objects of type " + typeof(T).Name); " is 128.
Long Statement,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The length of the statement  "				throw new Exception ("Field name " + sFieldName + " not found while trying to compare objects of type " + typeof(T).Name); " is 122.
Long Statement,JMMClient.JMMServerBinary,JMMServerClient,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Service References\JMMServerBinary\Reference.cs,GetFilesByGroupAndResolution,The length of the statement  "	return base.Channel.GetFilesByGroupAndResolution (animeID' relGroupName' resolution' videoSource' videoBitDepth' userID); " is 121.
Long Statement,JMMClient.JMMServerBinary,JMMServerClient,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Service References\JMMServerBinary\Reference.cs,LinkAniDBTvDB,The length of the statement  "	return base.Channel.LinkAniDBTvDB (animeID' aniEpType' aniEpNumber' tvDBID' tvSeasonNumber' tvEpNumber' crossRef_AniDB_TvDBV2ID); " is 129.
Long Statement,JMMClient.UserControls,AnimeFileSummaryControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeFileSummaryControl.xaml.cs,RefreshRecords,The length of the statement  "			List<JMMServerBinary.Contract_GroupVideoQuality> summ = JMMServerVM.Instance.clientBinaryHTTP.GetGroupVideoQualitySummary (anime.AnimeID); " is 138.
Long Statement,JMMClient.UserControls,AnimeFileSummaryControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeFileSummaryControl.xaml.cs,RefreshRecords,The length of the statement  "			List<JMMServerBinary.Contract_GroupFileSummary> summ = JMMServerVM.Instance.clientBinaryHTTP.GetGroupFileSummary (anime.AnimeID); " is 129.
Long Statement,JMMClient.UserControls,AnimeGroupControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeGroupControl.xaml.cs,ShowNextEpisode,The length of the statement  "	JMMServerBinary.Contract_AnimeEpisode ep = JMMServerVM.Instance.clientBinaryHTTP.GetNextUnwatchedEpisodeForGroup (grp.AnimeGroupID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 188.
Long Statement,JMMClient.UserControls,AnimeGroupControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeGroupControl.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnVideo (vid.VideoLocalID' newStatus' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 145.
Long Statement,JMMClient.UserControls,AnimeGroupControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeGroupControl.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "			JMMServerBinary.Contract_ToggleWatchedStatusOnEpisode_Response response = JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnEpisode (ep.AnimeEpisodeID' newStatus' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 222.
Long Statement,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,videoHandler_VideoWatchedEvent,The length of the statement  "	if (MainWindow.CurrentMainTabIndex == MainWindow.TAB_MAIN_Collection || MainWindow.CurrentMainTabIndex == MainWindow.TAB_MAIN_Pinned) " is 133.
Long Statement,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,btnEditSeriesFinish_Click,The length of the statement  "		MessageBoxResult res = MessageBox.Show ("Do you also want to rename the parent group?"' "Confirm"' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 149.
Long Statement,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,EnableDisableImage,The length of the statement  "				res = JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' tvPoster.TvDB_ImagePosterID' (int)ImageEntityType.TvDB_Cover); " is 135.
Long Statement,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,EnableDisableImage,The length of the statement  "				res = JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' traktPoster.Trakt_ImagePosterID' (int)ImageEntityType.Trakt_Poster); " is 141.
Long Statement,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,EnableDisableImage,The length of the statement  "				res = JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' anime.AnimeID' (int)ImageEntityType.AniDB_Cover); " is 122.
Long Statement,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,EnableDisableImage,The length of the statement  "				res = JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' moviePoster.MovieDB_PosterID' (int)ImageEntityType.MovieDB_Poster); " is 140.
Long Statement,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,EnableDisableImage,The length of the statement  "				res = JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' tvFanart.TvDB_ImageFanartID' (int)ImageEntityType.TvDB_FanArt); " is 136.
Long Statement,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,EnableDisableImage,The length of the statement  "				res = JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' traktFanart.Trakt_ImageFanartID' (int)ImageEntityType.Trakt_Fanart); " is 141.
Long Statement,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,EnableDisableImage,The length of the statement  "				res = JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' movieFanart.MovieDB_FanartID' (int)ImageEntityType.MovieDB_FanArt); " is 140.
Long Statement,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,EnableDisableImage,The length of the statement  "			res = JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' banner.TvDB_ImageWideBannerID' (int)ImageEntityType.TvDB_Banner); " is 138.
Long Statement,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,SetDefaultImage,The length of the statement  "				res = JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' ser.AniDB_ID' tvPoster.TvDB_ImagePosterID' (int)ImageEntityType.TvDB_Cover' (int)ImageSizeType.Poster); " is 175.
Long Statement,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,SetDefaultImage,The length of the statement  "				res = JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' ser.AniDB_ID' traktPoster.Trakt_ImagePosterID' (int)ImageEntityType.Trakt_Poster' (int)ImageSizeType.Poster); " is 181.
Long Statement,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,SetDefaultImage,The length of the statement  "				res = JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' ser.AniDB_ID' anime.AnimeID' (int)ImageEntityType.AniDB_Cover' (int)ImageSizeType.Poster); " is 162.
Long Statement,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,SetDefaultImage,The length of the statement  "				res = JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' ser.AniDB_ID' moviePoster.MovieDB_PosterID' (int)ImageEntityType.MovieDB_Poster' (int)ImageSizeType.Poster); " is 180.
Long Statement,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,SetDefaultImage,The length of the statement  "				res = JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' ser.AniDB_ID' tvFanart.TvDB_ImageFanartID' (int)ImageEntityType.TvDB_FanArt' (int)ImageSizeType.Fanart); " is 176.
Long Statement,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,SetDefaultImage,The length of the statement  "				res = JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' ser.AniDB_ID' traktFanart.Trakt_ImageFanartID' (int)ImageEntityType.Trakt_Fanart' (int)ImageSizeType.Fanart); " is 181.
Long Statement,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,SetDefaultImage,The length of the statement  "				res = JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' ser.AniDB_ID' movieFanart.MovieDB_FanartID' (int)ImageEntityType.MovieDB_FanArt' (int)ImageSizeType.Fanart); " is 180.
Long Statement,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,SetDefaultImage,The length of the statement  "			res = JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' ser.AniDB_ID' banner.TvDB_ImageWideBannerID' (int)ImageEntityType.TvDB_Banner' (int)ImageSizeType.WideBanner); " is 182.
Long Statement,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,RefreshImagesData,The length of the statement  "		JMMServerBinary.Contract_AniDB_AnimeCrossRefs xrefDetails = JMMServerVM.Instance.clientBinaryHTTP.GetCrossRefDetails (ser.AniDB_ID); " is 132.
Long Statement,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,ShowNextEpisode,The length of the statement  "	JMMServerBinary.Contract_AnimeEpisode ep = JMMServerVM.Instance.clientBinaryHTTP.GetNextUnwatchedEpisode (ser.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 181.
Long Statement,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnVideo (vid.VideoLocalID' newStatus' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 145.
Long Statement,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "			JMMServerBinary.Contract_ToggleWatchedStatusOnEpisode_Response response = JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnEpisode (ep.AnimeEpisodeID' newStatus' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 222.
Long Statement,JMMClient.UserControls,AnimeSeries_Hulu,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries_Hulu.xaml.cs,ShowNextEpisode,The length of the statement  "	JMMServerBinary.Contract_AnimeEpisode ep = JMMServerVM.Instance.clientBinaryHTTP.GetNextUnwatchedEpisode (ser.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 181.
Long Statement,JMMClient.UserControls,AvdumpBatchControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AvdumpBatchControl.xaml.cs,workerAvdump_DoWork,The length of the statement  "			pProcess.StartInfo.Arguments = string.Format (@" --Auth={0}:{1} --LPort={2} --PrintEd2kLink -t {3}"' JMMServerVM.Instance.AniDB_Username' JMMServerVM.Instance.AniDB_AVDumpKey' JMMServerVM.Instance.AniDB_AVDumpClientPort' fileName); " is 231.
Long Statement,JMMClient.UserControls,AvdumpFileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AvdumpFileControl.xaml.cs,AvdumpFileControl_DataContextChanged,The length of the statement  "				foreach (AniDB_AnimeVM anime in AniDB_AnimeVM.BestLevenshteinDistanceMatches (dump.VideoLocal.ClosestAnimeMatchString' 10)) { " is 125.
Long Statement,JMMClient.UserControls,AvdumpFileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AvdumpFileControl.xaml.cs,AvdumpFileControl_DataContextChanged,The length of the statement  "					ed2kDump += string.Format (@"ed2k://|file|{0}|{1}|{2}|/"' dump.FileName' dump.FileSize' dump.VideoLocal.Hash) + Environment.NewLine; " is 132.
Long Statement,JMMClient.UserControls,AvdumpFileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AvdumpFileControl.xaml.cs,AvdumpFileControl_DataContextChanged,The length of the statement  "			foreach (AniDB_AnimeVM anime in AniDB_AnimeVM.BestLevenshteinDistanceMatches (dumpList.AVDumps [0].VideoLocal.ClosestAnimeMatchString' 10)) " is 139.
Long Statement,JMMClient.UserControls,AvdumpFileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AvdumpFileControl.xaml.cs,AvdumpFileControl_DataContextChanged,The length of the statement  "						ed2kDump += string.Format (@"ed2k://|file|{0}|{1}|{2}|/"' dump.FileName' dump.FileSize' dump.VideoLocal.Hash) + Environment.NewLine; " is 132.
Long Statement,JMMClient.UserControls,AvdumpFileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AvdumpFileControl.xaml.cs,workerAvdump_DoWork,The length of the statement  "	pProcess.StartInfo.Arguments = string.Format (@" --Auth={0}:{1} --LPort={2} --PrintEd2kLink -t {3}"' JMMServerVM.Instance.AniDB_Username' JMMServerVM.Instance.AniDB_AVDumpKey' JMMServerVM.Instance.AniDB_AVDumpClientPort' fileName); " is 231.
Long Statement,JMMClient.UserControls,BookmarksControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\BookmarksControl.xaml.cs,CommandBinding_DeleteBookmark,The length of the statement  "		MessageBoxResult res = MessageBox.Show (string.Format ("Are you sure you want to delete this bookmark: {0}"' ba.AniDB_Anime.FormattedTitle)' "Confirm"' MessageBoxButton.YesNo' MessageBoxImage.Warning); " is 201.
Long Statement,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,videoHandler_VideoWatchedEvent,The length of the statement  "		if (MainWindow.CurrentMainTabIndex == MainWindow.TAB_MAIN_Dashboard && mainwdw.tileContinueWatching.Visibility == System.Windows.Visibility.Visible) " is 148.
Long Statement,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,episodesWorker_DoWork,The length of the statement  "		List<JMMServerBinary.Contract_AnimeEpisode> rawEps = JMMServerVM.Instance.clientBinaryHTTP.GetAllUnwatchedEpisodes (ser.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 191.
Long Statement,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,episodesWorker_DoWork,The length of the statement  "			System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,recsWorker_DoWork,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,recsWorker_DoWork,The length of the statement  "		List<JMMServerBinary.Contract_AniDB_Anime_Similar> links = JMMServerVM.Instance.clientBinaryHTTP.GetSimilarAnimeLinks (ser.AniDB_ID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 183.
Long Statement,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,recsWorker_DoWork,The length of the statement  "					JMMServerBinary.Contract_AniDBAnime animeContract = JMMServerVM.Instance.clientBinaryHTTP.GetAnime (sim.SimilarAnimeID); " is 120.
Long Statement,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,recsWorker_DoWork,The length of the statement  "			System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,shoutsWorker_DoWork,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,shoutsWorker_DoWork,The length of the statement  "		List<JMMServerBinary.Contract_Trakt_ShoutUser> rawShouts = JMMServerVM.Instance.clientBinaryHTTP.GetTraktShoutsForAnime (ser.AniDB_ID); " is 135.
Long Statement,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,shoutsWorker_DoWork,The length of the statement  "			System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,shoutsWorker_DoWork,The length of the statement  "		List<JMMServerBinary.Contract_AniDB_Recommendation> rawRecs = JMMServerVM.Instance.clientBinaryHTTP.GetAniDBRecommendations (ser.AniDB_ID); " is 139.
Long Statement,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,shoutsWorker_DoWork,The length of the statement  "			System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnVideo (vid.VideoLocalID' newStatus' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 145.
Long Statement,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "			JMMServerBinary.Contract_ToggleWatchedStatusOnEpisode_Response response = JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnEpisode (ep.AnimeEpisodeID' newStatus' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 222.
Long Statement,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,videoHandler_VideoWatchedEvent,The length of the statement  "		if (MainWindow.CurrentMainTabIndex == MainWindow.TAB_MAIN_Dashboard && mainwdw.dash.Visibility == System.Windows.Visibility.Visible) " is 132.
Long Statement,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,btnExpandRecDownload_Click,The length of the statement  "	if (UserSettingsVM.Instance.DashRecommendationsDownloadCollapsed && DashboardVM.Instance.RecommendationsDownload.Count == 0) " is 124.
Long Statement,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,btnExpandRecDownload_Click,The length of the statement  "	UserSettingsVM.Instance.DashRecommendationsDownloadExpanded = !UserSettingsVM.Instance.DashRecommendationsDownloadExpanded; " is 123.
Long Statement,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,refreshDataWorker_DoWork,The length of the statement  "		DashboardVM.Instance.RefreshData (opt.TraktScrobbles' opt.TraktShouts' opt.RefreshContinueWatching' opt.RefreshRecentAdditions' opt.RefreshOtherWidgets' opt.RecentAdditionType); " is 177.
Long Statement,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,RefreshData,The length of the statement  "	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,btnForceTraktRefresh_Click,The length of the statement  "	MessageBox.Show ("Process is running on server' please try refreshing in a few seconds"' "Running"' MessageBoxButton.OK' MessageBoxImage.Information); " is 150.
Long Statement,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnVideo (vid.VideoLocalID' newStatus' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 145.
Long Statement,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "			JMMServerBinary.Contract_ToggleWatchedStatusOnEpisode_Response response = JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnEpisode (ep.AnimeEpisodeID' newStatus' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 222.
Long Statement,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,CommandBinding_IgnoreAnimeWatch,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.IgnoreAnime (rec.RecommendedAnimeID' (int)RecommendationType.Watch' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 156.
Long Statement,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,CommandBinding_IgnoreAnimeDownload,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.IgnoreAnime (rec.RecommendedAnimeID' (int)RecommendationType.Download' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 159.
Long Statement,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,CommandBinding_JoinTrakt,The length of the statement  "			bool success = JMMServerVM.Instance.clientBinaryHTTP.CreateTraktAccount (signup.Username' signup.Password' signup.Email' ref retMessage); " is 137.
Long Statement,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,CommandBinding_SyncVotes,The length of the statement  "			MessageBox.Show ("Process is Running on server' please try refreshing when it has finished"' "Success"' MessageBoxButton.OK' MessageBoxImage.Information); " is 154.
Long Statement,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,SetWidgetOrder,The length of the statement  "	DashPos_SeriesMissingEpisodes = UserSettingsVM.Instance.GetDashboardWidgetPosition (DashboardWidgets.SeriesMissingEpisodes); " is 124.
Long Statement,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,SetWidgetOrder,The length of the statement  "	DashPos_RecentlyWatchedEpisode = UserSettingsVM.Instance.GetDashboardWidgetPosition (DashboardWidgets.RecentlyWatchedEpisode); " is 126.
Long Statement,JMMClient.UserControls,DashboardMetroDXControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardMetroDXControl.xaml.cs,SetSectionOrder,The length of the statement  "	Visibility visTrakt = System.Windows.Visibility.Visible' visCont = System.Windows.Visibility.Visible' visRSeries = System.Windows.Visibility.Visible' visNewEps = System.Windows.Visibility.Visible; " is 196.
Long Statement,JMMClient.UserControls,DashboardMetroDXControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardMetroDXControl.xaml.cs,SetSectionOrder,The length of the statement  "	UserSettingsVM.Instance.GetDashboardMetroSectionPosition (DashboardMetroProcessType.TraktActivity' ref posTrakt' ref visTrakt); " is 127.
Long Statement,JMMClient.UserControls,DashboardMetroDXControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardMetroDXControl.xaml.cs,SetSectionOrder,The length of the statement  "	UserSettingsVM.Instance.GetDashboardMetroSectionPosition (DashboardMetroProcessType.ContinueWatching' ref posCont' ref visCont); " is 128.
Long Statement,JMMClient.UserControls,DashboardMetroDXControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardMetroDXControl.xaml.cs,SetSectionOrder,The length of the statement  "	UserSettingsVM.Instance.GetDashboardMetroSectionPosition (DashboardMetroProcessType.RandomSeries' ref posRSeries' ref visRSeries); " is 130.
Long Statement,JMMClient.UserControls,DashboardMetroDXControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardMetroDXControl.xaml.cs,SetSectionOrder,The length of the statement  "	UserSettingsVM.Instance.GetDashboardMetroSectionPosition (DashboardMetroProcessType.NewEpisodes' ref posNewEps' ref visNewEps); " is 127.
Long Statement,JMMClient.UserControls,DashboardMetroDXControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardMetroDXControl.xaml.cs,Instance_OnFinishedProcessEvent,The length of the statement  "	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient.UserControls,DashboardEpisodeOverview,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardEpisodeOverview.xaml.cs,ImageBorder_Loaded,The length of the statement  "	if (border.ActualWidth <= borderThickness.Left + borderThickness.Right || border.ActualHeight <= borderThickness.Top + borderThickness.Bottom) { " is 144.
Long Statement,JMMClient.UserControls,DownloadRecommendationsControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Downloads\DownloadRecommendationsControl.xaml.cs,CommandBinding_IgnoreAnimeDownload,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.IgnoreAnime (rec.RecommendedAnimeID' (int)RecommendationType.Download' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 159.
Long Statement,JMMClient.UserControls,DownloadRecommendationsControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Downloads\DownloadRecommendationsControl.xaml.cs,RefreshData,The length of the statement  "		List<JMMServerBinary.Contract_Recommendation> contracts = JMMServerVM.Instance.clientBinaryHTTP.GetRecommendations (UserSettingsVM.Instance.DownloadsRecItems' JMMServerVM.Instance.CurrentUser.JMMUserID.Value' (int)RecommendationType.Download); " is 243.
Long Statement,JMMClient.UserControls,DownloadsBrowseTorrentsControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Downloads\DownloadsBrowseTorrentsControl.xaml.cs,torrentDetailsWorker_DoWork,The length of the statement  "	foreach (AniDB_AnimeVM anime in AniDB_AnimeVM.BestLevenshteinDistanceMatchesCache (torLink.ClosestAnimeMatchString' 10)) { " is 122.
Long Statement,JMMClient.UserControls,DownloadSettingsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Downloads\DownloadSettingsAnimeBytes.xaml.cs,btnTest_Click,The length of the statement  "	UserSettingsVM.Instance.AnimeBytesCookieHeader = AnimeBytes.Login (UserSettingsVM.Instance.AnimeBytesUsername' UserSettingsVM.Instance.AnimeBytesPassword); " is 155.
Long Statement,JMMClient.UserControls,DownloadSettingsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Downloads\DownloadSettingsBakaBT.xaml.cs,btnTest_Click,The length of the statement  "	UserSettingsVM.Instance.BakaBTCookieHeader = bakaBT.Login (UserSettingsVM.Instance.BakaBTUsername' UserSettingsVM.Instance.BakaBTPassword); " is 139.
Long Statement,JMMClient.UserControls,DownloadsSearchTorrentsControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Downloads\DownloadsSearchTorrentsControl.xaml.cs,searchWorker_RunWorkerCompleted,The length of the statement  "				List<JMMServerBinary.Contract_GroupVideoQuality> summ = JMMServerVM.Instance.clientBinaryHTTP.GetGroupVideoQualitySummary (ep.AniDB_Anime.AnimeID); " is 147.
Long Statement,JMMClient.UserControls,DownloadsSearchTorrentsControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Downloads\DownloadsSearchTorrentsControl.xaml.cs,searchWorker_RunWorkerCompleted,The length of the statement  "				List<JMMServerBinary.Contract_GroupVideoQuality> summ = JMMServerVM.Instance.clientBinaryHTTP.GetGroupVideoQualitySummary (anime.AnimeID); " is 138.
Long Statement,JMMClient.UserControls,DownloadsSearchTorrentsControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Downloads\DownloadsSearchTorrentsControl.xaml.cs,torrentDetailsWorker_DoWork,The length of the statement  "	foreach (AniDB_AnimeVM anime in AniDB_AnimeVM.BestLevenshteinDistanceMatchesCache (details.TorLink.ClosestAnimeMatchString' 10)) { " is 130.
Long Statement,JMMClient.UserControls,DownloadsTorrentMonitorControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Downloads\DownloadsTorrentMonitorControl.xaml.cs,torrentRemoveData,The length of the statement  "				msg = string.Format ("Are you sure you want to remove this torrent and delete associated files: {0}"' selectedTorrents [0].Name); " is 129.
Long Statement,JMMClient.UserControls,DownloadsTorrentMonitorControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Downloads\DownloadsTorrentMonitorControl.xaml.cs,torrentRemoveData,The length of the statement  "				msg = string.Format ("Are you sure you want to remove these {0} torrents and delete associated files?"' selectedTorrents.Count); " is 128.
Long Statement,JMMClient.UserControls,DownloadsTorrentMonitorControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Downloads\DownloadsTorrentMonitorControl.xaml.cs,btnRefresh_Click,The length of the statement  "		MessageBox.Show ("Only use when auto refresh is disabled"' "Warning"' MessageBoxButton.OK' MessageBoxImage.Information); " is 120.
Long Statement,JMMClient.UserControls,DuplicateFilesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DuplicateFilesControl.xaml.cs,CommandBinding_DeleteFile1,The length of the statement  "			MessageBoxResult res = MessageBox.Show (string.Format ("Are you sure you want to delete this file' the physical video file will also be deleted")' "Confirm"' MessageBoxButton.YesNo' MessageBoxImage.Warning); " is 207.
Long Statement,JMMClient.UserControls,DuplicateFilesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DuplicateFilesControl.xaml.cs,CommandBinding_DeleteFile2,The length of the statement  "			MessageBoxResult res = MessageBox.Show (string.Format ("Are you sure you want to delete this file' the physical video file will also be deleted")' "Confirm"' MessageBoxButton.YesNo' MessageBoxImage.Warning); " is 207.
Long Statement,JMMClient.UserControls,DuplicateFilesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DuplicateFilesControl.xaml.cs,CommandBinding_DeleteFileDB,The length of the statement  "			MessageBoxResult res = MessageBox.Show (string.Format ("Are you sure you want to delete this entry?")' "Confirm"' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 164.
Long Statement,JMMClient.UserControls,EpisodeDetail,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\EpisodeDetail.xaml.cs,btnTvDBLinkRemove_Click,The length of the statement  "		JMMServerBinary.Contract_AnimeEpisode contract = JMMServerVM.Instance.clientBinaryHTTP.GetEpisode (ep.AnimeEpisodeID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 168.
Long Statement,JMMClient.UserControls,EpisodeDetail,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\EpisodeDetail.xaml.cs,btnTvDBLinkAdd_Click,The length of the statement  "		if (ep.AniDB_Anime == null || ep.AniDB_Anime.TvSummary == null || ep.AniDB_Anime.TvSummary.CrossRefTvDBV2 == null || ep.AniDB_Anime.TvSummary.CrossRefTvDBV2.Count == 0) { " is 170.
Long Statement,JMMClient.UserControls,EpisodeDetail,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\EpisodeDetail.xaml.cs,btnTvDBLinkAdd_Click,The length of the statement  "			JMMServerBinary.Contract_AnimeEpisode contract = JMMServerVM.Instance.clientBinaryHTTP.GetEpisode (ep.AnimeEpisodeID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 168.
Long Statement,JMMClient.UserControls,EpisodeDetail,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\EpisodeDetail.xaml.cs,CommandBinding_DeleteFile,The length of the statement  "			MessageBoxResult res = MessageBox.Show (string.Format ("Are you sure you want to delete this file' the physical video file will also be deleted")' "Confirm"' MessageBoxButton.YesNo' MessageBoxImage.Warning); " is 207.
Long Statement,JMMClient.UserControls,EpisodeDetail,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\EpisodeDetail.xaml.cs,CommandBinding_RehashFile,The length of the statement  "		MessageBox.Show (Properties.Resources.MSG_INFO_AddedQueueCmds' "Done"' MessageBoxButton.OK' MessageBoxImage.Information); " is 121.
Long Statement,JMMClient.UserControls,EpisodeDetail,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\EpisodeDetail.xaml.cs,CommandBinding_ForceAddMyList,The length of the statement  "			MessageBox.Show ("Command has been queued for processing on the server"' "Error"' MessageBoxButton.OK' MessageBoxImage.Information); " is 132.
Long Statement,JMMClient.UserControls,EpisodeDetail,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\EpisodeDetail.xaml.cs,CommandBinding_ForceUpdate,The length of the statement  "			MessageBox.Show ("Command has been queued for processing on the server"' "Error"' MessageBoxButton.OK' MessageBoxImage.Information); " is 132.
Long Statement,JMMClient.UserControls,EpisodeList,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\EpisodeList.xaml.cs,SetWatchedStatusOnSeries,The length of the statement  "		JMMServerVM.Instance.clientBinaryHTTP.SetWatchedStatusOnSeries (animeSeries.AnimeSeriesID.Value' watchedStatus' maxEpisodeNumber' (int)epType.EpisodeType' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 205.
Long Statement,JMMClient.UserControls,FileRenameControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\FileRenameControl.xaml.cs,btnNewScript_Click,The length of the statement  "			JMMServerBinary.Contract_RenameScript_SaveResponse resp = JMMServerVM.Instance.clientBinaryHTTP.SaveRenameScript (script); " is 122.
Long Statement,JMMClient.UserControls,FileRenameControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\FileRenameControl.xaml.cs,renameWorker_DoWork,The length of the statement  "		JMMServerBinary.Contract_VideoLocalRenamed raw = JMMServerVM.Instance.clientBinaryHTTP.RenameFile (ren.VideoLocalID' job.RenameScript); " is 135.
Long Statement,JMMClient.UserControls,FileRenameControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\FileRenameControl.xaml.cs,previewWorker_DoWork,The length of the statement  "		JMMServerBinary.Contract_VideoLocalRenamed raw = JMMServerVM.Instance.clientBinaryHTTP.RenameFilePreview (ren.VideoLocalID' job.RenameScript); " is 142.
Long Statement,JMMClient.UserControls,FileRenameControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\FileRenameControl.xaml.cs,btnLoadFiles_Click,The length of the statement  "			rawVids = JMMServerVM.Instance.clientBinaryHTTP.RandomFileRenamePreview (udRandomFiles.Value.Value' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 150.
Long Statement,JMMClient.UserControls,FileRenameControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\FileRenameControl.xaml.cs,btnLoadFiles_Click,The length of the statement  "			rawVids = JMMServerVM.Instance.clientBinaryHTTP.RandomFileRenamePreview (int.MaxValue' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 137.
Long Statement,JMMClient.UserControls,FileRenameControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\FileRenameControl.xaml.cs,btnLoadFiles_Click,The length of the statement  "						List<JMMServerBinary.Contract_VideoLocal> raws = JMMServerVM.Instance.clientBinaryHTTP.GetVideoLocalsForAnime (ser.AniDB_ID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 175.
Long Statement,JMMClient.UserControls,FileRenameControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\FileRenameControl.xaml.cs,btnLoadFiles_Click,The length of the statement  "					List<JMMServerBinary.Contract_VideoLocal> raws = JMMServerVM.Instance.clientBinaryHTTP.GetVideoLocalsForAnime (ser.AniDB_ID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 175.
Long Statement,JMMClient.UserControls,FileSearchControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\FileSearchControl.xaml.cs,lbVideos_SelectionChanged,The length of the statement  "		List<JMMServerBinary.Contract_AnimeEpisode> rawEps = JMMServerVM.Instance.clientBinaryHTTP.GetEpisodesForFile (vid.VideoLocalID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 179.
Long Statement,JMMClient.UserControls,FileSearchControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\FileSearchControl.xaml.cs,btnSearch_Click,The length of the statement  "		List<JMMServerBinary.Contract_VideoLocal> rawVids = JMMServerVM.Instance.clientBinaryHTTP.SearchForFiles ((int)searchType' txtFileSearch.Text' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 193.
Long Statement,JMMClient.UserControls,FileSearchControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\FileSearchControl.xaml.cs,CommandBinding_RehashFile,The length of the statement  "		MessageBox.Show (Properties.Resources.MSG_INFO_AddedQueueCmds' "Done"' MessageBoxButton.OK' MessageBoxImage.Information); " is 121.
Long Statement,JMMClient.UserControls,FileSearchControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\FileSearchControl.xaml.cs,CommandBinding_RescanFile,The length of the statement  "		MessageBox.Show (Properties.Resources.MSG_INFO_AddedQueueCmds' "Done"' MessageBoxButton.OK' MessageBoxImage.Information); " is 121.
Long Statement,JMMClient.UserControls,IgnoredAnimeControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\IgnoredAnimeControl.xaml.cs,workerFiles_DoWork,The length of the statement  "		List<JMMServerBinary.Contract_IgnoreAnime> contractsTemp = JMMServerVM.Instance.clientBinaryHTTP.GetIgnoredAnime (JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 164.
Long Statement,JMMClient.UserControls,IgnoredAnimeControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\IgnoredAnimeControl.xaml.cs,CommandBinding_DeleteIgnoredAnime,The length of the statement  "		if (MessageBox.Show ("Are you sure you want to delete this?"' "Confirm"' MessageBoxButton.YesNo' MessageBoxImage.Question) == MessageBoxResult.Yes) { " is 149.
Long Statement,JMMClient.UserControls,IgnoredFiles,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\IgnoredFiles.xaml.cs,RefreshIgnoredFiles,The length of the statement  "		List<JMMServerBinary.Contract_VideoLocal> vids = JMMServerVM.Instance.clientBinaryHTTP.GetIgnoredFiles (JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 154.
Long Statement,JMMClient.UserControls,ImportFolderAdmin,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ImportFolderAdmin.xaml.cs,btnDeleteImportFolder_Click,The length of the statement  "			MessageBoxResult res = MessageBox.Show (string.Format ("Are you sure you want to delete the Import Folder: {0}\nAny files in this folder will also be removed from the database"' ns.ImportFolderLocation)' "Confirm"' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 265.
Long Statement,JMMClient.UserControls,ImportFolderAdmin,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ImportFolderAdmin.xaml.cs,btnDeleteImportFolder_Click,The length of the statement  "				MessageBox.Show ("Process is running on the server' and may take a while to complete"' "Running"' MessageBoxButton.OK' MessageBoxImage.Information); " is 148.
Long Statement,JMMClient.UserControls,ManuallyLinkedFilesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ManuallyLinkedFilesControl.xaml.cs,RefreshLinkedFiles,The length of the statement  "		List<JMMServerBinary.Contract_VideoLocal> vids = JMMServerVM.Instance.clientBinaryHTTP.GetAllManuallyLinkedFiles (JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 164.
Long Statement,JMMClient.UserControls,ManuallyLinkedFilesDetailControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ManuallyLinkedFilesDetailControl.xaml.cs,CommandBinding_RescanFile,The length of the statement  "		MessageBox.Show (Properties.Resources.MSG_INFO_AddedQueueCmds' "Done"' MessageBoxButton.OK' MessageBoxImage.Information); " is 121.
Long Statement,JMMClient.UserControls,MissingEpisodesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingEpisodesControl.xaml.cs,workerFiles_DoWork,The length of the statement  "		List<JMMServerBinary.Contract_MissingEpisode> contractsTemp = JMMServerVM.Instance.clientBinaryHTTP.GetMissingEpisodes (JMMServerVM.Instance.CurrentUser.JMMUserID.Value' wr.MyGroupsOnly' wr.RegularEpisodesOnly' (int)wr.AiringFilter); " is 233.
Long Statement,JMMClient.UserControls,MissingMyListFilesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingMyListFilesControl.xaml.cs,workerFiles_DoWork,The length of the statement  "		List<JMMServerBinary.Contract_MissingFile> contractsTemp = JMMServerVM.Instance.clientBinaryHTTP.GetMyListFilesForRemoval (JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 173.
Long Statement,JMMClient.UserControls,MissingMyListFilesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingMyListFilesControl.xaml.cs,btnDelete_Click,The length of the statement  "	MessageBoxResult res = MessageBox.Show (string.Format ("Are you sure you want to delete all these files from your AniDB list?")' "Confirm"' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 190.
Long Statement,JMMClient.UserControls,MultipleFilesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MultipleFilesControl.xaml.cs,workerFiles_DoWork,The length of the statement  "		List<JMMServerBinary.Contract_AnimeEpisode> eps = JMMServerVM.Instance.clientBinaryHTTP.GetAllEpisodesWithMultipleFiles (JMMServerVM.Instance.CurrentUser.JMMUserID.Value' opt.OnlyFinishedSeries' opt.IgnoreVariations); " is 217.
Long Statement,JMMClient.UserControls,MultipleFilesDetailControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MultipleFilesDetailControl.xaml.cs,CommandBinding_DeleteFile,The length of the statement  "			MessageBoxResult res = MessageBox.Show (string.Format ("Are you sure you want to delete this file' the physical video file will also be deleted")' "Confirm"' MessageBoxButton.YesNo' MessageBoxImage.Warning); " is 207.
Long Statement,JMMClient.UserControls,PlaylistControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\PlaylistControl.xaml.cs,CommandBinding_PlayEpisode,The length of the statement  "				JMMServerBinary.Contract_AnimeEpisode contract = JMMServerVM.Instance.clientBinaryHTTP.GetNextUnwatchedEpisode (ser.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 187.
Long Statement,JMMClient.UserControls,PlaylistControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\PlaylistControl.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "			JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnVideo (vid.VideoLocalID' newStatus' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 145.
Long Statement,JMMClient.UserControls,PlaylistControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\PlaylistControl.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "			JMMServerBinary.Contract_ToggleWatchedStatusOnEpisode_Response response = JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnEpisode (ep.AnimeEpisodeID' newStatus' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 222.
Long Statement,JMMClient.UserControls,PlaylistControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\PlaylistControl.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "			JMMServerBinary.Contract_ToggleWatchedStatusOnEpisode_Response response = JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnEpisode (ep.AnimeEpisodeID' newStatus' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 222.
Long Statement,JMMClient.UserControls,RankingsControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\RankingsControl.xaml.cs,workerFiles_DoWork,The length of the statement  "		List<JMMServerBinary.Contract_AnimeRating> rawRatings = JMMServerVM.Instance.clientBinaryHTTP.GetAnimeRatings ((int)opt.CollectionState' (int)opt.WatchedState' (int)opt.VotedState' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 231.
Long Statement,JMMClient.UserControls,RelatedAnimeControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\RelatedAnimeControl.xaml.cs,missingDataWorker_DoWork,The length of the statement  "					JMMServerBinary.Contract_AniDBAnime animeContract = JMMServerVM.Instance.clientBinaryHTTP.GetAnime (rel.RelatedAnimeID); " is 120.
Long Statement,JMMClient.UserControls,RelatedAnimeControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\RelatedAnimeControl.xaml.cs,missingDataWorker_DoWork,The length of the statement  "					System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Send' (Action)delegate () { " is 125.
Long Statement,JMMClient.UserControls,RelatedAnimeControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\RelatedAnimeControl.xaml.cs,RefreshData,The length of the statement  "		List<JMMServerBinary.Contract_AniDB_Anime_Relation> links = JMMServerVM.Instance.clientBinaryHTTP.GetRelatedAnimeLinks (anime.AnimeID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 185.
Long Statement,JMMClient.UserControls,SeriesWithoutFilesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\SeriesWithoutFilesControl.xaml.cs,workerFiles_DoWork,The length of the statement  "		List<JMMServerBinary.Contract_AnimeSeries> contractsTemp = JMMServerVM.Instance.clientBinaryHTTP.GetSeriesWithoutAnyFiles (JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 173.
Long Statement,JMMClient.UserControls,MPCSettingsControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\MPCSettingsControl.xaml.cs,btnTestPotLocation_Click,The length of the statement  "			if (foundSectionStart && lines [i].Trim ().ToLower ().StartsWith ("[") && !lines [i].ToLower ().Contains ("[rememberfiles]")) " is 125.
Long Statement,JMMClient.UserControls,MPCSettingsControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\MPCSettingsControl.xaml.cs,btnTestPotLocation_Click,The length of the statement  "			MessageBox.Show ("INI file found' but no history found for previous watched files"' "Error"' MessageBoxButton.OK' MessageBoxImage.Warning); " is 139.
Long Statement,JMMClient.UserControls,MPCSettingsControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\MPCSettingsControl.xaml.cs,btnTestPotLocation_Click,The length of the statement  "			MessageBox.Show ("INI file found. Sample of recently watched file..." + Environment.NewLine + lastHistoryLine' "Error"' MessageBoxButton.OK' MessageBoxImage.Information); " is 170.
Long Statement,JMMClient.UserControls,MPCSettingsControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\MPCSettingsControl.xaml.cs,btnTestMPCLocation_Click,The length of the statement  "			MessageBox.Show ("INI file found' but no history found for previous watched files"' "Error"' MessageBoxButton.OK' MessageBoxImage.Warning); " is 139.
Long Statement,JMMClient.UserControls,MPCSettingsControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\MPCSettingsControl.xaml.cs,btnTestMPCLocation_Click,The length of the statement  "			MessageBox.Show ("INI file found. Sample of recently watched file..." + Environment.NewLine + lastHistoryLine' "Error"' MessageBoxButton.OK' MessageBoxImage.Information); " is 170.
Long Statement,JMMClient.UserControls,TraktSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TraktSettings.xaml.cs,btnJoinTrakt_Click,The length of the statement  "		bool success = JMMServerVM.Instance.clientBinaryHTTP.CreateTraktAccount (txtUsernameSignup.Text.Trim ()' txtPasswordSignup.Password.Trim ()' txtEmail.Text.Trim ()' ref retMessage); " is 180.
Long Statement,JMMClient.UserControls,SimilarAnimeControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\SimilarAnimeControl.xaml.cs,missingDataWorker_DoWork,The length of the statement  "					JMMServerBinary.Contract_AniDBAnime animeContract = JMMServerVM.Instance.clientBinaryHTTP.GetAnime (sim.SimilarAnimeID); " is 120.
Long Statement,JMMClient.UserControls,SimilarAnimeControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\SimilarAnimeControl.xaml.cs,missingDataWorker_DoWork,The length of the statement  "					System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Send' (Action)delegate () { " is 125.
Long Statement,JMMClient.UserControls,SimilarAnimeControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\SimilarAnimeControl.xaml.cs,RefreshData,The length of the statement  "		List<JMMServerBinary.Contract_AniDB_Anime_Similar> links = JMMServerVM.Instance.clientBinaryHTTP.GetSimilarAnimeLinks (anime.AnimeID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 184.
Long Statement,JMMClient.UserControls,SmartImage,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\SmartImage.xaml.cs,SetImage,The length of the statement  "				string packUriBlank = string.Format ("pack://application:'''/{0};component/Images/blankposter.png"' Constants.AssemblyName); " is 124.
Long Statement,JMMClient.UserControls,TraktShoutsShowControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\TraktShoutsShowControl.xaml.cs,refreshDataWorker_DoWork,The length of the statement  "		List<JMMServerBinary.Contract_Trakt_ShoutUser> rawShouts = JMMServerVM.Instance.clientBinaryHTTP.GetTraktShoutsForAnime (animeSeries.AniDB_ID); " is 143.
Long Statement,JMMClient.UserControls,TvDBAndOtherLinks,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\TvDBAndOtherLinks.xaml.cs,CommandBinding_EditMALLink,The length of the statement  "			frm.Init (malLink.AnimeID' anime.FormattedTitle' malLink.MALTitle' malLink.MALID' malLink.StartEpisodeType' malLink.StartEpisodeNumber); " is 136.
Long Statement,JMMClient.UserControls,TvDBAndOtherLinks,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\TvDBAndOtherLinks.xaml.cs,CommandBinding_DeleteMALLink,The length of the statement  "				string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveLinkAniDBMAL (anime.AnimeID' malLink.StartEpisodeType' malLink.StartEpisodeNumber); " is 140.
Long Statement,JMMClient.UserControls,TvDBAndOtherLinks,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\TvDBAndOtherLinks.xaml.cs,CommandBinding_EditTvDBLink,The length of the statement  "			frm.Init (anime.AnimeID' anime.FormattedTitle' (EpisodeType)link.AniDBStartEpisodeType' link.AniDBStartEpisodeNumber' link.TvDBID' link.TvDBSeasonNumber' link.TvDBStartEpisodeNumber' link.TvDBTitle' anime' link.CrossRef_AniDB_TvDBV2ID); " is 236.
Long Statement,JMMClient.UserControls,TvDBAndOtherLinks,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\TvDBAndOtherLinks.xaml.cs,CommandBinding_DeleteTvDBLink,The length of the statement  "				string res = JMMServerVM.Instance.clientBinaryHTTP.RemoveLinkAniDBTvDB (link.AnimeID' link.AniDBStartEpisodeType' link.AniDBStartEpisodeNumber' link.TvDBID' link.TvDBSeasonNumber' link.TvDBStartEpisodeNumber); " is 209.
Long Statement,JMMClient.UserControls,TvDBAndOtherLinks,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\TvDBAndOtherLinks.xaml.cs,btnSwitchTraktSeason_Click,The length of the statement  "		frm.Init (anime.AnimeID' anime.FormattedTitle' AniDB_AnimeCrossRefs.CrossRef_AniDB_Trakt.TraktID' AniDB_AnimeCrossRefs.CrossRef_AniDB_Trakt.TraktSeasonNumber' AniDB_AnimeCrossRefs.TraktShow.Title); " is 197.
Long Statement,JMMClient.UserControls,TvDBAndOtherLinks,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\TvDBAndOtherLinks.xaml.cs,RefreshData,The length of the statement  "		JMMServerBinary.Contract_AniDB_AnimeCrossRefs xrefDetails = JMMServerVM.Instance.clientBinaryHTTP.GetCrossRefDetails (anime.AnimeID); " is 133.
Long Statement,JMMClient.UserControls,UnrecognisedVideos,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\UnrecognisedVideos.xaml.cs,btnConfirm_Click,The length of the statement  "					MessageBoxResult res = MessageBox.Show (Properties.Resources.MSG_ERR_InvalidEpGetAnime' "Error"' MessageBoxButton.YesNo' MessageBoxImage.Exclamation); " is 150.
Long Statement,JMMClient.UserControls,UnrecognisedVideos,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\UnrecognisedVideos.xaml.cs,btnConfirm_Click,The length of the statement  "				result = JMMServerVM.Instance.clientBinaryHTTP.AssociateSingleFileWithMultipleEpisodes (vid.VideoLocalID' series.AnimeSeriesID.Value' startEpNum' endEpNum); " is 156.
Long Statement,JMMClient.UserControls,UnrecognisedVideos,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\UnrecognisedVideos.xaml.cs,btnConfirm_Click,The length of the statement  "				MessageBoxResult res = MessageBox.Show (Properties.Resources.MSG_ERR_InvalidEpGetAnime' "Error"' MessageBoxButton.YesNo' MessageBoxImage.Exclamation); " is 150.
Long Statement,JMMClient.UserControls,UnrecognisedVideos,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\UnrecognisedVideos.xaml.cs,btnConfirm_Click,The length of the statement  "			string msg = JMMServerVM.Instance.clientBinaryHTTP.AssociateMultipleFiles (vidIDs' series.AnimeSeriesID.Value' startEpNum' MultipleTypeSingle); " is 143.
Long Statement,JMMClient.UserControls,UnrecognisedVideos,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\UnrecognisedVideos.xaml.cs,CommandBinding_DeleteFile,The length of the statement  "			MessageBoxResult res = MessageBox.Show (string.Format ("Are you sure you want to delete this file: {0}"' vid.FullPath)' "Confirm"' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 181.
Long Statement,JMMClient.UserControls,UnrecognisedVideos,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\UnrecognisedVideos.xaml.cs,CommandBinding_RehashFile,The length of the statement  "		MessageBox.Show (Properties.Resources.MSG_INFO_AddedQueueCmds' "Done"' MessageBoxButton.OK' MessageBoxImage.Information); " is 121.
Long Statement,JMMClient.UserControls,UnrecognisedVideos,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\UnrecognisedVideos.xaml.cs,CommandBinding_RescanFile,The length of the statement  "		MessageBox.Show (Properties.Resources.MSG_INFO_AddedQueueCmds' "Done"' MessageBoxButton.OK' MessageBoxImage.Information); " is 121.
Long Statement,JMMClient.UserControls,UnrecognisedVideos,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\UnrecognisedVideos.xaml.cs,RefreshUnrecognisedFiles,The length of the statement  "		List<JMMServerBinary.Contract_VideoLocal> vids = JMMServerVM.Instance.clientBinaryHTTP.GetUnrecognisedFiles (JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 159.
Long Statement,JMMClient.UserControls,UnrecognisedVideos,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\UnrecognisedVideos.xaml.cs,RefreshSeries,The length of the statement  "		foreach (JMMServerBinary.Contract_AnimeSeries ser in JMMServerVM.Instance.clientBinaryHTTP.GetAllSeries (JMMServerVM.Instance.CurrentUser.JMMUserID.Value)) { " is 157.
Long Statement,JMMClient.UserControls,UpdateAniDBDataControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\UpdateAniDBDataControl.xaml.cs,btnEstimate_Click,The length of the statement  "		int filesQueued = JMMServerVM.Instance.clientBinaryHTTP.UpdateAniDBFileData (chkMissingInfo.IsChecked.Value' chkOutofDate.IsChecked.Value' true); " is 145.
Long Statement,JMMClient.UserControls,UpdateAniDBDataControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\UpdateAniDBDataControl.xaml.cs,btnEstimate_Click,The length of the statement  "		MessageBox.Show (string.Format ("{0} Files will be queued for processing"' filesQueued)' "Done"' MessageBoxButton.OK' MessageBoxImage.Information); " is 147.
Long Statement,JMMClient.UserControls,UpdateAniDBDataControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\UpdateAniDBDataControl.xaml.cs,btnQueueCommands_Click,The length of the statement  "		int filesQueued = JMMServerVM.Instance.clientBinaryHTTP.UpdateAniDBFileData (chkMissingInfo.IsChecked.Value' chkOutofDate.IsChecked.Value' false); " is 146.
Long Statement,JMMClient.UserControls,UpdateAniDBDataControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\UpdateAniDBDataControl.xaml.cs,btnQueueCommands_Click,The length of the statement  "		MessageBox.Show (string.Format ("{0} Files queued for processing"' filesQueued)' "Done"' MessageBoxButton.OK' MessageBoxImage.Information); " is 139.
Long Statement,JMMClient.UserControls,UserAdminControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\UserAdminControl.xaml.cs,CommandBinding_DeleteUser,The length of the statement  "			MessageBoxResult res = MessageBox.Show (string.Format ("Are you sure you want to delete the User: {0}"' user.Username)' "Confirm"' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 181.
Long Statement,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The length of the statement  "		string packUriFullStar = string.Format ("pack://application:'''/{0};component/Images/star_48.png"' Constants.AssemblyName); " is 123.
Long Statement,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The length of the statement  "		string packUriHalfStar = string.Format ("pack://application:'''/{0};component/Images/star_half_48.png"' Constants.AssemblyName); " is 128.
Long Statement,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The length of the statement  "		string packUriStarOff = string.Format ("pack://application:'''/{0};component/Images/star_off_48.png"' Constants.AssemblyName); " is 126.
Long Statement,JMMClient.Utilities,ShowSelectedInExplorer,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ShowSelectedInExplorer.cs,PathToFileSystemInfo,The length of the statement  "		if (fixedPath.EndsWith (Path.DirectorySeparatorChar.ToString ()) || fixedPath.EndsWith (Path.AltDirectorySeparatorChar.ToString ())) { " is 134.
Long Statement,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,handleTimer_Elapsed,The length of the statement  "	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,HandleFileChangePotPlayer,The length of the statement  "						JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnVideo (vid.VideoLocalID' true' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 140.
Long Statement,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,HandleFileChangeMPC,The length of the statement  "		// File Name 1=M:\[ Anime to Watch - New ]\Hentai Ouji to Warawanai Neko\[gg]_Hentai_Ouji_to_Warawanai_Neko_-_04_[62E1DBF8].mkv " is 127.
Long Statement,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,HandleFileChangeMPC,The length of the statement  "		// File Name 1=M:\[ Anime to Watch - New ]\Hentai Ouji to Warawanai Neko\[gg]_Hentai_Ouji_to_Warawanai_Neko_-_04_[62E1DBF8].mkv " is 127.
Long Statement,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,HandleFileChangeMPC,The length of the statement  "						JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnVideo (vid.VideoLocalID' true' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 140.
Long Statement,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,PlayAllUnwatchedEpisodes,The length of the statement  "		List<JMMServerBinary.Contract_AnimeEpisode> rawEps = JMMServerVM.Instance.clientBinaryHTTP.GetAllUnwatchedEpisodes (animeSeriesID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 181.
Long Statement,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,GetAutoFileForEpisode,The length of the statement  "		JMMServerBinary.Contract_AnimeEpisode raw = JMMServerVM.Instance.clientBinaryHTTP.GetPreviousEpisodeForUnwatched (ep.AnimeSeriesID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 182.
Long Statement,JMMClient.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The length of the statement  "		if (anime != null && anime.DefaultFanart != null && anime.DefaultFanart.ImageParentType == (int)ImageEntityType.Trakt_Fanart && anime.DefaultFanart.ImageParentID == TraktImageFanart.Trakt_ImageFanartID) { " is 204.
Long Statement,JMMClient.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The length of the statement  "		if (anime != null && anime.DefaultPoster != null && anime.DefaultPoster.ImageParentType == (int)ImageEntityType.Trakt_Poster && anime.DefaultPoster.ImageParentID == TraktImagePoster.Trakt_ImagePosterID) { " is 204.
Long Statement,JMMClient.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The length of the statement  "		if (anime != null && anime.DefaultFanart != null && anime.DefaultFanart.ImageParentType == (int)ImageEntityType.TvDB_FanArt && anime.DefaultFanart.ImageParentID == contract.TvDB_ImageFanartID) { " is 194.
Long Statement,JMMClient.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The length of the statement  "		if (anime != null && anime.DefaultPoster != null && anime.DefaultPoster.ImageParentType == (int)ImageEntityType.TvDB_Cover && anime.DefaultPoster.ImageParentID == contract.TvDB_ImagePosterID) { " is 193.
Long Statement,JMMClient.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The length of the statement  "		if (anime != null && anime.DefaultWideBanner != null && anime.DefaultWideBanner.ImageParentType == (int)ImageEntityType.TvDB_Banner && anime.DefaultWideBanner.ImageParentID == contract.TvDB_ImageWideBannerID) { " is 210.
Long Statement,JMMClient.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The length of the statement  "		if (anime != null && anime.DefaultFanart != null && anime.DefaultFanart.ImageParentType == (int)ImageEntityType.MovieDB_FanArt && anime.DefaultFanart.ImageParentID == contract.MovieDB_FanartID) { " is 195.
Long Statement,JMMClient.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The length of the statement  "		if (anime != null && anime.DefaultPoster != null && anime.DefaultPoster.ImageParentType == (int)ImageEntityType.MovieDB_Poster && anime.DefaultPoster.ImageParentID == contract.MovieDB_PosterID) { " is 195.
Long Statement,JMMClient.ViewModel,AniDB_AnimeDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeDetailedVM.cs,RefreshBase,The length of the statement  "	JMMServerBinary.Contract_AniDB_AnimeDetailed contract = JMMServerVM.Instance.clientBinaryHTTP.GetAnimeDetailed (AnimeID); " is 121.
Long Statement,JMMClient.ViewModel,BookmarkedAnimeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\BookmarkedAnimeVM.cs,Save,The length of the statement  "	JMMServerBinary.Contract_BookmarkedAnime_SaveResponse resp = JMMServerVM.Instance.clientBinaryHTTP.SaveBookmarkedAnime (ba); " is 124.
Long Statement,JMMClient.ViewModel,CrossRef_AniDB_TvDBVMV2,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\CrossRef_AniDB_TvDBVMV2.cs,ToString,The length of the statement  "	return string.Format ("{0} = {1}   AniDB # {2}:{3}   TvDB {4}:{5}"' AnimeID' TvDBID' AniDBStartEpisodeType' AniDBStartEpisodeNumber' TvDBSeasonNumber' TvDBStartEpisodeNumber); " is 175.
Long Statement,JMMClient.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterHelper.cs,GetDateAsString,The length of the statement  "	return aDate.Year.ToString ().PadLeft (4' '0') + aDate.Month.ToString ().PadLeft (2' '0') + aDate.Day.ToString ().PadLeft (2' '0'); " is 131.
Long Statement,JMMClient.ViewModel,GroupVideoQualityVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupVideoQualityVM.cs,ToString,The length of the statement  "	return string.Format ("{0} - {1}/{2} - {3}/{4} Files"' GroupNameShort' Resolution' VideoSource' FileCountNormal' FileCountSpecials); " is 132.
Long Statement,JMMClient.ViewModel,ImportFolderVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\ImportFolderVM.cs,Save,The length of the statement  "		JMMServerBinary.Contract_ImportFolder_SaveResponse response = JMMServerVM.Instance.clientBinaryHTTP.SaveImportFolder (this.ToContract ()); " is 138.
Long Statement,JMMClient.ViewModel,PlaylistVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\PlaylistVM.cs,PopulatePlaylistObjects,The length of the statement  "			JMMServerBinary.Contract_AnimeSeries serContract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (objID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 157.
Long Statement,JMMClient.ViewModel,PlaylistVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\PlaylistVM.cs,PopulatePlaylistObjects,The length of the statement  "			JMMServerBinary.Contract_AnimeEpisode epContract = JMMServerVM.Instance.clientBinaryHTTP.GetEpisode (objID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 158.
Long Statement,JMMClient.ViewModel,RecommendationVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\RecommendationVM.cs,EvaluateProperties,The length of the statement  "		Recommended_PosterPath = string.Format ("pack://application:'''/{0};component/Images/blankposter.png"' Constants.AssemblyName); " is 127.
Long Statement,JMMClient.ViewModel,RenameScriptVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\RenameScriptVM.cs,Save,The length of the statement  "		JMMServerBinary.Contract_RenameScript_SaveResponse response = JMMServerVM.Instance.clientBinaryHTTP.SaveRenameScript (this.ToContract ()); " is 138.
Long Statement,JMMClient.ViewModel,TvDBSummary,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\TvDBSummary.cs,PopulateCrossRefs,The length of the statement  "		List<JMMServerBinary.Contract_CrossRef_AniDB_TvDBV2> contract = JMMServerVM.Instance.clientBinaryHTTP.GetTVDBCrossRefV2 (this.AnimeID); " is 135.
Long Statement,JMMClient.ViewModel,TvDBSummary,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\TvDBSummary.cs,PopulateCrossRefsEpisodes,The length of the statement  "		List<JMMServerBinary.Contract_CrossRef_AniDB_TvDB_Episode> contracts = JMMServerVM.Instance.clientBinaryHTTP.GetTVDBCrossRefEpisode (this.AnimeID); " is 147.
Long Statement,JMMClient.ViewModel,VideoLocalVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoLocalVM.cs,GetEpisodes,The length of the statement  "		List<JMMServerBinary.Contract_AnimeEpisode> epContracts = JMMServerVM.Instance.clientBinaryHTTP.GetEpisodesForFile (this.VideoLocalID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value); " is 185.
Complex Conditional,JMMClient,AnimeSeriesVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeSeriesVM.cs,SetSeriesNames,The conditional expression  "TvDBSeriesV2 != null && TvDBSeriesV2.Count > 0 && !string.IsNullOrEmpty (TvDBSeriesV2 [0].SeriesName) && !TvDBSeriesV2 [0].SeriesName.ToUpper ().Contains ("**DUPLICATE")"  is complex.
Complex Conditional,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,GetDirectChildren,The conditional expression  "this.GroupFilterID.Value == Constants.StaticGF.All || this.GroupFilterID.Value == Constants.StaticGF.Predefined_Categories_Child || this.GroupFilterID.Value == Constants.StaticGF.Predefined_Years_Child || this.GroupFilterID.Value >= 0"  is complex.
Complex Conditional,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,DisplayMainTab,The conditional expression  "DashboardVM.Instance.EpsWatchNext_Recent.Count == 0 && DashboardVM.Instance.SeriesMissingEps.Count == 0 && DashboardVM.Instance.MiniCalendar.Count == 0 && DashboardVM.Instance.RecommendationsWatch.Count == 0 && DashboardVM.Instance.RecommendationsDownload.Count == 0"  is complex.
Complex Conditional,JMMClient.Downloads,CsvStream,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\CsvStream.cs,GetNextItem,The conditional expression  "(predata || postdata || !quoted) && (c == '\x0A' || c == '\x0D')"  is complex.
Complex Conditional,JMMClient.Forms,ImportFolder,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\ImportFolder.xaml.cs,btnSave_Click,The conditional expression  "chkDropDestination.IsChecked.HasValue && chkDropSource.IsChecked.HasValue && chkDropDestination.IsChecked.Value && chkDropSource.IsChecked.Value"  is complex.
Complex Conditional,JMMClient.UserControls,EpisodeDetail,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\EpisodeDetail.xaml.cs,btnTvDBLinkAdd_Click,The conditional expression  "ep.AniDB_Anime == null || ep.AniDB_Anime.TvSummary == null || ep.AniDB_Anime.TvSummary.CrossRefTvDBV2 == null || ep.AniDB_Anime.TvSummary.CrossRefTvDBV2.Count == 0"  is complex.
Complex Conditional,JMMClient.UserControls,UnrecognisedVideos,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\UnrecognisedVideos.xaml.cs,btnConfirm_Click,The conditional expression  "series.LatestRegularEpisodeNumber < endEpNum || startEpNum <= 0 && endEpNum <= 0 && endEpNum <= startEpNum"  is complex.
Complex Conditional,JMMClient.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The conditional expression  "anime != null && anime.DefaultFanart != null && anime.DefaultFanart.ImageParentType == (int)ImageEntityType.Trakt_Fanart && anime.DefaultFanart.ImageParentID == TraktImageFanart.Trakt_ImageFanartID"  is complex.
Complex Conditional,JMMClient.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The conditional expression  "anime != null && anime.DefaultPoster != null && anime.DefaultPoster.ImageParentType == (int)ImageEntityType.Trakt_Poster && anime.DefaultPoster.ImageParentID == TraktImagePoster.Trakt_ImagePosterID"  is complex.
Complex Conditional,JMMClient.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The conditional expression  "anime != null && anime.DefaultFanart != null && anime.DefaultFanart.ImageParentType == (int)ImageEntityType.TvDB_FanArt && anime.DefaultFanart.ImageParentID == contract.TvDB_ImageFanartID"  is complex.
Complex Conditional,JMMClient.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The conditional expression  "anime != null && anime.DefaultPoster != null && anime.DefaultPoster.ImageParentType == (int)ImageEntityType.TvDB_Cover && anime.DefaultPoster.ImageParentID == contract.TvDB_ImagePosterID"  is complex.
Complex Conditional,JMMClient.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The conditional expression  "anime != null && anime.DefaultWideBanner != null && anime.DefaultWideBanner.ImageParentType == (int)ImageEntityType.TvDB_Banner && anime.DefaultWideBanner.ImageParentID == contract.TvDB_ImageWideBannerID"  is complex.
Complex Conditional,JMMClient.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The conditional expression  "anime != null && anime.DefaultFanart != null && anime.DefaultFanart.ImageParentType == (int)ImageEntityType.MovieDB_FanArt && anime.DefaultFanart.ImageParentID == contract.MovieDB_FanartID"  is complex.
Complex Conditional,JMMClient.ViewModel,AniDB_AnimeCrossRefsVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeCrossRefsVM.cs,Populate,The conditional expression  "anime != null && anime.DefaultPoster != null && anime.DefaultPoster.ImageParentType == (int)ImageEntityType.MovieDB_Poster && anime.DefaultPoster.ImageParentID == contract.MovieDB_PosterID"  is complex.
Empty Catch Block,JMMClient,UnhandledExceptionManager,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UnhandledExceptionManager.cs,GenericExceptionHandler,The method has an empty catch block.
Empty Catch Block,JMMClient,Cloner,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Cloner.cs,Clone,The method has an empty catch block.
Empty Catch Block,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,Init,The method has an empty catch block.
Empty Catch Block,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,serverStatusTimer_Elapsed,The method has an empty catch block.
Empty Catch Block,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,ExecuteCommandSync,The method has an empty catch block.
Empty Catch Block,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,DeleteAvatarImages,The method has an empty catch block.
Empty Catch Block,JMMClient.Forms,NewSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\NewSeries.xaml.cs,SetAnimeDisplay,The method has an empty catch block.
Empty Catch Block,JMMClient.ImageDownload,ImageDownloader,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ImageDownload\ImageDownloader.cs,DownloadImage,The method has an empty catch block.
Empty Catch Block,JMMClient.ImageDownload,ImageDownloader,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ImageDownload\ImageDownloader.cs,DownloadImage,The method has an empty catch block.
Empty Catch Block,JMMClient.UserControls,AvdumpBatchControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AvdumpBatchControl.xaml.cs,workerAvdump_DoWork,The method has an empty catch block.
Empty Catch Block,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,lbShouts_PreviewMouseWheel,The method has an empty catch block.
Empty Catch Block,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,lbEpisodes_PreviewMouseWheel,The method has an empty catch block.
Empty Catch Block,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,grdMain_PreviewMouseWheel,The method has an empty catch block.
Empty Catch Block,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,videoHandler_VideoWatchedEvent,The method has an empty catch block.
Empty Catch Block,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,videoHandler_VideoWatchedEvent,The method has an empty catch block.
Empty Catch Block,JMMClient.UserControls,DashboardMetroDXControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardMetroDXControl.xaml.cs,ScrollerDashMetroDX_PreviewMouseWheel,The method has an empty catch block.
Empty Catch Block,JMMClient.UserControls,DashboardMetroDXControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardMetroDXControl.xaml.cs,LayoutRoot_PreviewMouseWheel,The method has an empty catch block.
Empty Catch Block,JMMClient.UserControls,DownloadsSearchTorrentsControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Downloads\DownloadsSearchTorrentsControl.xaml.cs,searchWorker_DoWork,The method has an empty catch block.
Empty Catch Block,JMMClient.UserControls,FileRenameControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\FileRenameControl.xaml.cs,btnAddTag_Click,The method has an empty catch block.
Empty Catch Block,JMMClient.UserControls,FileRenameControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\FileRenameControl.xaml.cs,btnAddTest_Click,The method has an empty catch block.
Empty Catch Block,JMMClient.UserControls,HyperLinkStandard,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\HyperLinkStandard.xaml.cs,hlURL_Click,The method has an empty catch block.
Magic Number,JMMClient,MainListTemplateSelector,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\DataTemplateSelectors\MainListTemplateSelector.cs,SelectTemplate,The following statement contains a magic number: if (element != null && item != null) {  	if (item.GetType () == typeof(GroupFilterVM)) {  		return element.FindResource ("MainList_GroupFilterTemplate") as DataTemplate;  	}  	if (item.GetType () == typeof(AnimeGroupVM)) {  		switch (AppSettings.DisplayStyle_GroupList) {  		case 1:  			return element.FindResource ("MainList_AnimeGroupTemplate") as DataTemplate;  		case 2:  			return element.FindResource ("MainList_AnimeGroupSimpleTemplate") as DataTemplate;  		default:  			return element.FindResource ("MainList_AnimeGroupTemplate") as DataTemplate;  		}  	}  	if (item.GetType () == typeof(AnimeSeriesVM)) {  		return element.FindResource ("MainList_AnimeSeriesTemplate") as DataTemplate;  	}  	if (item.GetType () == typeof(AnimeEpisodeTypeVM)) {  		return element.FindResource ("MainList_AnimeEpisodeTypeTemplate") as DataTemplate;  	}  	if (item.GetType () == typeof(AnimeEpisodeVM)) {  		return element.FindResource ("MainList_AnimeEpisodeTemplate") as DataTemplate;  	}  	if (item.GetType () == typeof(VideoDetailedVM)) {  		return element.FindResource ("MainList_VideoDetailedTemplate") as DataTemplate;  	}  }  
Magic Number,JMMClient,MainListTemplateSelector,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\DataTemplateSelectors\MainListTemplateSelector.cs,SelectTemplate,The following statement contains a magic number: if (item.GetType () == typeof(AnimeGroupVM)) {  	switch (AppSettings.DisplayStyle_GroupList) {  	case 1:  		return element.FindResource ("MainList_AnimeGroupTemplate") as DataTemplate;  	case 2:  		return element.FindResource ("MainList_AnimeGroupSimpleTemplate") as DataTemplate;  	default:  		return element.FindResource ("MainList_AnimeGroupTemplate") as DataTemplate;  	}  }  
Magic Number,JMMClient,MainListTemplateSelector,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\DataTemplateSelectors\MainListTemplateSelector.cs,SelectTemplate,The following statement contains a magic number: switch (AppSettings.DisplayStyle_GroupList) {  case 1:  	return element.FindResource ("MainList_AnimeGroupTemplate") as DataTemplate;  case 2:  	return element.FindResource ("MainList_AnimeGroupSimpleTemplate") as DataTemplate;  default:  	return element.FindResource ("MainList_AnimeGroupTemplate") as DataTemplate;  }  
Magic Number,JMMClient,UnhandledExceptionManager,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UnhandledExceptionManager.cs,AssemblyBuildDate,The following statement contains a magic number: if (blnForceFileDate) {  	dtBuild = AssemblyFileTime (objAssembly);  }  else {  	//dtBuild = ((DateTime)"01/01/2000").AddDays(objVersion.Build).AddSeconds(objVersion.Revision * 2);  	dtBuild = Convert.ToDateTime ("01/01/2000").AddDays ((double)objVersion.Build).AddSeconds ((double)(objVersion.Revision * 2));  	if (TimeZone.IsDaylightSavingTime (DateTime.Now' TimeZone.CurrentTimeZone.GetDaylightChanges (DateTime.Now.Year))) {  		dtBuild = dtBuild.AddHours (1);  	}  	if (dtBuild > DateTime.Now | objVersion.Build < 730 | objVersion.Revision == 0) {  		dtBuild = AssemblyFileTime (objAssembly);  	}  }  
Magic Number,JMMClient,UnhandledExceptionManager,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UnhandledExceptionManager.cs,AssemblyBuildDate,The following statement contains a magic number: if (blnForceFileDate) {  	dtBuild = AssemblyFileTime (objAssembly);  }  else {  	//dtBuild = ((DateTime)"01/01/2000").AddDays(objVersion.Build).AddSeconds(objVersion.Revision * 2);  	dtBuild = Convert.ToDateTime ("01/01/2000").AddDays ((double)objVersion.Build).AddSeconds ((double)(objVersion.Revision * 2));  	if (TimeZone.IsDaylightSavingTime (DateTime.Now' TimeZone.CurrentTimeZone.GetDaylightChanges (DateTime.Now.Year))) {  		dtBuild = dtBuild.AddHours (1);  	}  	if (dtBuild > DateTime.Now | objVersion.Build < 730 | objVersion.Revision == 0) {  		dtBuild = AssemblyFileTime (objAssembly);  	}  }  
Magic Number,JMMClient,UnhandledExceptionManager,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UnhandledExceptionManager.cs,AssemblyBuildDate,The following statement contains a magic number: dtBuild = Convert.ToDateTime ("01/01/2000").AddDays ((double)objVersion.Build).AddSeconds ((double)(objVersion.Revision * 2));  
Magic Number,JMMClient,UnhandledExceptionManager,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UnhandledExceptionManager.cs,AssemblyBuildDate,The following statement contains a magic number: if (dtBuild > DateTime.Now | objVersion.Build < 730 | objVersion.Revision == 0) {  	dtBuild = AssemblyFileTime (objAssembly);  }  
Magic Number,JMMClient,UnhandledExceptionManager,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UnhandledExceptionManager.cs,TakeScreenshotPrivate,The following statement contains a magic number: switch (strFormatExtension) {  case "jpeg":  	BitmapToJPEG (objBitmap' strFilename' 80);  	break;  default:  	objBitmap.Save (strFilename' _ScreenshotImageFormat);  	break;  }  
Magic Number,JMMClient,UnhandledExceptionManager,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UnhandledExceptionManager.cs,TakeScreenshotPrivate,The following statement contains a magic number: BitmapToJPEG (objBitmap' strFilename' 80);  
Magic Number,JMMClient,UriToImageConverter,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UriToImageConverter.cs,Convert,The following statement contains a magic number: if (value is Uri) {  	BitmapImage bi = new BitmapImage ();  	bi.BeginInit ();  	bi.DecodePixelWidth = 200;  	//bi.DecodePixelHeight = 60;                  	bi.UriSource = (Uri)value;  	bi.EndInit ();  	return bi;  }  
Magic Number,JMMClient,UriToImageConverter,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UriToImageConverter.cs,Convert,The following statement contains a magic number: bi.DecodePixelWidth = 200;  
Magic Number,JMMClient,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\MultiSort.cs,MultiSort,The following statement contains a magic number: try {  	List<List<T>> rgCopies = new List<List<T>> (1);  	rgCopies.Add (results);  	int sortByCount = rgSortBy.Count;  	// For each criterion in the list of comparison criteria' one or more lists must be sorted.   	// Each time a list is sorted' one or more sublists may be created.  Each sublist contains  	// items that were deemed to be "equivalent" according to the comparison criterion.  	// Example: After sorting addresses entries by state you may have multiple sublists'   	// each containing all of the address entries associated with a given state.  	// Note: this is not the most efficient method (especially in terms of memory!)' but it  	// is sufficient in most scenarios and is easier to understand than many other   	// methods of sorting a list using multiple criteria.  	for (int i = 0; i < sortByCount; i++) {  		SortPropOrFieldAndDirection sortBy = rgSortBy [i];  		if (string.IsNullOrEmpty (sortBy.sPropertyOrFieldName))  			throw new Exception ("MultiSort parameter rgSortBy was passed an empty field name in rgSortBy[" + i.ToString () + "]");  		// Retrieve an IComparer that contains logic for sorting this specific business object  		// type by the specified criteria  		IComparer<T> compare = sortBy.GetComparer<T> ();  		// Sort each sublist using the created IComparer<T>  		foreach (List<T> lst in rgCopies) {  			lst.Sort (compare);  		}  		if (i < sortByCount - 1) {  			// Create new sublists by searching for the sorted-by value boundaries/changes  			// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   			// from the original list.  NOT terribly efficient' but often sufficient.  			// Some advanced methods involve tracking duplicate values DURING the sort iteself  			List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  			for (int n = 0; n < rgCopies.Count; n++) {  				List<T> rgList = rgCopies [n];  				// Be conservative and set the initial sublist capacity to a small number' but  				// still honor the original list's item count.  (Example: If you are sorting a list  				// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  				// each sublist (each of which store all Address information entries with the same Zipcode)  				// with a capacity of 1000.   32'000 / 32 = 1000  				List<T> rgSublist = new List<T> (rgList.Count / 32);  				// Compare items to the item that preceeded it to determine where the "value boundaries"   				// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  				// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  				// when comparing elements during the sort routine).    				// Another alternative is to take advantage of the fact that the list is sorted and to  				// use a O(LogN) binary search rather than the (currently) linear O(N) search.  				for (int j = 0; j < rgList.Count; j++) {  					T item = rgList [j];  					if (j > 0) {  						// Compare the item to the preceeding item using the same comparison criterion  						// used during the sort  						T itemprev = rgList [j - 1];  						if (compare.Compare (item' itemprev) == 0) {  							// The item had the same property or field value as the preceeding item.    							// Add it on to the same sublist.  							rgSublist.Add (item);  						}  						else {  							// The item did NOT have the same property or field value as the preceeding item.  							// "Close up" the previous sublist and start a new one.  							rgNewCopies.Add (rgSublist);  							rgSublist = new List<T> (rgList.Count / 32);  							rgSublist.Add (item);  						}  					}  					else {  						// The first item has no predecessor - just add the item to the first sublist  						rgSublist.Add (item);  					}  				}  				// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  				// Add the last created sublist to our "master list of sublists" :P  				// It may be that this list has 0 elements in some cases' but this is not a problem  				rgNewCopies.Add (rgSublist);  			}  			// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  			// Move to the next "level" of sublists in preparation for further sorting using the next  			// sort/comparison criterion  			rgCopies = rgNewCopies;  		}  	}  	// END: for (int i = 0; i < sortByCount; i++) ... each sort by criteria:   	// reconstruct all resorted sub-sub-sub-sub-sublists into a single' final (flat) results list  	results.Clear ();  	foreach (List<T> rgList in rgCopies) {  		results.AddRange (rgList);  	}  	return results;  }  catch (Exception ex) {  	throw new Exception ("Exception in MultiSort while sorting a list of " + typeof(T).Name' ex);  }  
Magic Number,JMMClient,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\MultiSort.cs,MultiSort,The following statement contains a magic number: try {  	List<List<T>> rgCopies = new List<List<T>> (1);  	rgCopies.Add (results);  	int sortByCount = rgSortBy.Count;  	// For each criterion in the list of comparison criteria' one or more lists must be sorted.   	// Each time a list is sorted' one or more sublists may be created.  Each sublist contains  	// items that were deemed to be "equivalent" according to the comparison criterion.  	// Example: After sorting addresses entries by state you may have multiple sublists'   	// each containing all of the address entries associated with a given state.  	// Note: this is not the most efficient method (especially in terms of memory!)' but it  	// is sufficient in most scenarios and is easier to understand than many other   	// methods of sorting a list using multiple criteria.  	for (int i = 0; i < sortByCount; i++) {  		SortPropOrFieldAndDirection sortBy = rgSortBy [i];  		if (string.IsNullOrEmpty (sortBy.sPropertyOrFieldName))  			throw new Exception ("MultiSort parameter rgSortBy was passed an empty field name in rgSortBy[" + i.ToString () + "]");  		// Retrieve an IComparer that contains logic for sorting this specific business object  		// type by the specified criteria  		IComparer<T> compare = sortBy.GetComparer<T> ();  		// Sort each sublist using the created IComparer<T>  		foreach (List<T> lst in rgCopies) {  			lst.Sort (compare);  		}  		if (i < sortByCount - 1) {  			// Create new sublists by searching for the sorted-by value boundaries/changes  			// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   			// from the original list.  NOT terribly efficient' but often sufficient.  			// Some advanced methods involve tracking duplicate values DURING the sort iteself  			List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  			for (int n = 0; n < rgCopies.Count; n++) {  				List<T> rgList = rgCopies [n];  				// Be conservative and set the initial sublist capacity to a small number' but  				// still honor the original list's item count.  (Example: If you are sorting a list  				// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  				// each sublist (each of which store all Address information entries with the same Zipcode)  				// with a capacity of 1000.   32'000 / 32 = 1000  				List<T> rgSublist = new List<T> (rgList.Count / 32);  				// Compare items to the item that preceeded it to determine where the "value boundaries"   				// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  				// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  				// when comparing elements during the sort routine).    				// Another alternative is to take advantage of the fact that the list is sorted and to  				// use a O(LogN) binary search rather than the (currently) linear O(N) search.  				for (int j = 0; j < rgList.Count; j++) {  					T item = rgList [j];  					if (j > 0) {  						// Compare the item to the preceeding item using the same comparison criterion  						// used during the sort  						T itemprev = rgList [j - 1];  						if (compare.Compare (item' itemprev) == 0) {  							// The item had the same property or field value as the preceeding item.    							// Add it on to the same sublist.  							rgSublist.Add (item);  						}  						else {  							// The item did NOT have the same property or field value as the preceeding item.  							// "Close up" the previous sublist and start a new one.  							rgNewCopies.Add (rgSublist);  							rgSublist = new List<T> (rgList.Count / 32);  							rgSublist.Add (item);  						}  					}  					else {  						// The first item has no predecessor - just add the item to the first sublist  						rgSublist.Add (item);  					}  				}  				// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  				// Add the last created sublist to our "master list of sublists" :P  				// It may be that this list has 0 elements in some cases' but this is not a problem  				rgNewCopies.Add (rgSublist);  			}  			// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  			// Move to the next "level" of sublists in preparation for further sorting using the next  			// sort/comparison criterion  			rgCopies = rgNewCopies;  		}  	}  	// END: for (int i = 0; i < sortByCount; i++) ... each sort by criteria:   	// reconstruct all resorted sub-sub-sub-sub-sublists into a single' final (flat) results list  	results.Clear ();  	foreach (List<T> rgList in rgCopies) {  		results.AddRange (rgList);  	}  	return results;  }  catch (Exception ex) {  	throw new Exception ("Exception in MultiSort while sorting a list of " + typeof(T).Name' ex);  }  
Magic Number,JMMClient,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\MultiSort.cs,MultiSort,The following statement contains a magic number: try {  	List<List<T>> rgCopies = new List<List<T>> (1);  	rgCopies.Add (results);  	int sortByCount = rgSortBy.Count;  	// For each criterion in the list of comparison criteria' one or more lists must be sorted.   	// Each time a list is sorted' one or more sublists may be created.  Each sublist contains  	// items that were deemed to be "equivalent" according to the comparison criterion.  	// Example: After sorting addresses entries by state you may have multiple sublists'   	// each containing all of the address entries associated with a given state.  	// Note: this is not the most efficient method (especially in terms of memory!)' but it  	// is sufficient in most scenarios and is easier to understand than many other   	// methods of sorting a list using multiple criteria.  	for (int i = 0; i < sortByCount; i++) {  		SortPropOrFieldAndDirection sortBy = rgSortBy [i];  		if (string.IsNullOrEmpty (sortBy.sPropertyOrFieldName))  			throw new Exception ("MultiSort parameter rgSortBy was passed an empty field name in rgSortBy[" + i.ToString () + "]");  		// Retrieve an IComparer that contains logic for sorting this specific business object  		// type by the specified criteria  		IComparer<T> compare = sortBy.GetComparer<T> ();  		// Sort each sublist using the created IComparer<T>  		foreach (List<T> lst in rgCopies) {  			lst.Sort (compare);  		}  		if (i < sortByCount - 1) {  			// Create new sublists by searching for the sorted-by value boundaries/changes  			// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   			// from the original list.  NOT terribly efficient' but often sufficient.  			// Some advanced methods involve tracking duplicate values DURING the sort iteself  			List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  			for (int n = 0; n < rgCopies.Count; n++) {  				List<T> rgList = rgCopies [n];  				// Be conservative and set the initial sublist capacity to a small number' but  				// still honor the original list's item count.  (Example: If you are sorting a list  				// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  				// each sublist (each of which store all Address information entries with the same Zipcode)  				// with a capacity of 1000.   32'000 / 32 = 1000  				List<T> rgSublist = new List<T> (rgList.Count / 32);  				// Compare items to the item that preceeded it to determine where the "value boundaries"   				// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  				// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  				// when comparing elements during the sort routine).    				// Another alternative is to take advantage of the fact that the list is sorted and to  				// use a O(LogN) binary search rather than the (currently) linear O(N) search.  				for (int j = 0; j < rgList.Count; j++) {  					T item = rgList [j];  					if (j > 0) {  						// Compare the item to the preceeding item using the same comparison criterion  						// used during the sort  						T itemprev = rgList [j - 1];  						if (compare.Compare (item' itemprev) == 0) {  							// The item had the same property or field value as the preceeding item.    							// Add it on to the same sublist.  							rgSublist.Add (item);  						}  						else {  							// The item did NOT have the same property or field value as the preceeding item.  							// "Close up" the previous sublist and start a new one.  							rgNewCopies.Add (rgSublist);  							rgSublist = new List<T> (rgList.Count / 32);  							rgSublist.Add (item);  						}  					}  					else {  						// The first item has no predecessor - just add the item to the first sublist  						rgSublist.Add (item);  					}  				}  				// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  				// Add the last created sublist to our "master list of sublists" :P  				// It may be that this list has 0 elements in some cases' but this is not a problem  				rgNewCopies.Add (rgSublist);  			}  			// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  			// Move to the next "level" of sublists in preparation for further sorting using the next  			// sort/comparison criterion  			rgCopies = rgNewCopies;  		}  	}  	// END: for (int i = 0; i < sortByCount; i++) ... each sort by criteria:   	// reconstruct all resorted sub-sub-sub-sub-sublists into a single' final (flat) results list  	results.Clear ();  	foreach (List<T> rgList in rgCopies) {  		results.AddRange (rgList);  	}  	return results;  }  catch (Exception ex) {  	throw new Exception ("Exception in MultiSort while sorting a list of " + typeof(T).Name' ex);  }  
Magic Number,JMMClient,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\MultiSort.cs,MultiSort,The following statement contains a magic number: for (int i = 0; i < sortByCount; i++) {  	SortPropOrFieldAndDirection sortBy = rgSortBy [i];  	if (string.IsNullOrEmpty (sortBy.sPropertyOrFieldName))  		throw new Exception ("MultiSort parameter rgSortBy was passed an empty field name in rgSortBy[" + i.ToString () + "]");  	// Retrieve an IComparer that contains logic for sorting this specific business object  	// type by the specified criteria  	IComparer<T> compare = sortBy.GetComparer<T> ();  	// Sort each sublist using the created IComparer<T>  	foreach (List<T> lst in rgCopies) {  		lst.Sort (compare);  	}  	if (i < sortByCount - 1) {  		// Create new sublists by searching for the sorted-by value boundaries/changes  		// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   		// from the original list.  NOT terribly efficient' but often sufficient.  		// Some advanced methods involve tracking duplicate values DURING the sort iteself  		List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  		for (int n = 0; n < rgCopies.Count; n++) {  			List<T> rgList = rgCopies [n];  			// Be conservative and set the initial sublist capacity to a small number' but  			// still honor the original list's item count.  (Example: If you are sorting a list  			// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  			// each sublist (each of which store all Address information entries with the same Zipcode)  			// with a capacity of 1000.   32'000 / 32 = 1000  			List<T> rgSublist = new List<T> (rgList.Count / 32);  			// Compare items to the item that preceeded it to determine where the "value boundaries"   			// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  			// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  			// when comparing elements during the sort routine).    			// Another alternative is to take advantage of the fact that the list is sorted and to  			// use a O(LogN) binary search rather than the (currently) linear O(N) search.  			for (int j = 0; j < rgList.Count; j++) {  				T item = rgList [j];  				if (j > 0) {  					// Compare the item to the preceeding item using the same comparison criterion  					// used during the sort  					T itemprev = rgList [j - 1];  					if (compare.Compare (item' itemprev) == 0) {  						// The item had the same property or field value as the preceeding item.    						// Add it on to the same sublist.  						rgSublist.Add (item);  					}  					else {  						// The item did NOT have the same property or field value as the preceeding item.  						// "Close up" the previous sublist and start a new one.  						rgNewCopies.Add (rgSublist);  						rgSublist = new List<T> (rgList.Count / 32);  						rgSublist.Add (item);  					}  				}  				else {  					// The first item has no predecessor - just add the item to the first sublist  					rgSublist.Add (item);  				}  			}  			// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  			// Add the last created sublist to our "master list of sublists" :P  			// It may be that this list has 0 elements in some cases' but this is not a problem  			rgNewCopies.Add (rgSublist);  		}  		// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  		// Move to the next "level" of sublists in preparation for further sorting using the next  		// sort/comparison criterion  		rgCopies = rgNewCopies;  	}  }  
Magic Number,JMMClient,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\MultiSort.cs,MultiSort,The following statement contains a magic number: for (int i = 0; i < sortByCount; i++) {  	SortPropOrFieldAndDirection sortBy = rgSortBy [i];  	if (string.IsNullOrEmpty (sortBy.sPropertyOrFieldName))  		throw new Exception ("MultiSort parameter rgSortBy was passed an empty field name in rgSortBy[" + i.ToString () + "]");  	// Retrieve an IComparer that contains logic for sorting this specific business object  	// type by the specified criteria  	IComparer<T> compare = sortBy.GetComparer<T> ();  	// Sort each sublist using the created IComparer<T>  	foreach (List<T> lst in rgCopies) {  		lst.Sort (compare);  	}  	if (i < sortByCount - 1) {  		// Create new sublists by searching for the sorted-by value boundaries/changes  		// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   		// from the original list.  NOT terribly efficient' but often sufficient.  		// Some advanced methods involve tracking duplicate values DURING the sort iteself  		List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  		for (int n = 0; n < rgCopies.Count; n++) {  			List<T> rgList = rgCopies [n];  			// Be conservative and set the initial sublist capacity to a small number' but  			// still honor the original list's item count.  (Example: If you are sorting a list  			// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  			// each sublist (each of which store all Address information entries with the same Zipcode)  			// with a capacity of 1000.   32'000 / 32 = 1000  			List<T> rgSublist = new List<T> (rgList.Count / 32);  			// Compare items to the item that preceeded it to determine where the "value boundaries"   			// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  			// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  			// when comparing elements during the sort routine).    			// Another alternative is to take advantage of the fact that the list is sorted and to  			// use a O(LogN) binary search rather than the (currently) linear O(N) search.  			for (int j = 0; j < rgList.Count; j++) {  				T item = rgList [j];  				if (j > 0) {  					// Compare the item to the preceeding item using the same comparison criterion  					// used during the sort  					T itemprev = rgList [j - 1];  					if (compare.Compare (item' itemprev) == 0) {  						// The item had the same property or field value as the preceeding item.    						// Add it on to the same sublist.  						rgSublist.Add (item);  					}  					else {  						// The item did NOT have the same property or field value as the preceeding item.  						// "Close up" the previous sublist and start a new one.  						rgNewCopies.Add (rgSublist);  						rgSublist = new List<T> (rgList.Count / 32);  						rgSublist.Add (item);  					}  				}  				else {  					// The first item has no predecessor - just add the item to the first sublist  					rgSublist.Add (item);  				}  			}  			// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  			// Add the last created sublist to our "master list of sublists" :P  			// It may be that this list has 0 elements in some cases' but this is not a problem  			rgNewCopies.Add (rgSublist);  		}  		// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  		// Move to the next "level" of sublists in preparation for further sorting using the next  		// sort/comparison criterion  		rgCopies = rgNewCopies;  	}  }  
Magic Number,JMMClient,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\MultiSort.cs,MultiSort,The following statement contains a magic number: for (int i = 0; i < sortByCount; i++) {  	SortPropOrFieldAndDirection sortBy = rgSortBy [i];  	if (string.IsNullOrEmpty (sortBy.sPropertyOrFieldName))  		throw new Exception ("MultiSort parameter rgSortBy was passed an empty field name in rgSortBy[" + i.ToString () + "]");  	// Retrieve an IComparer that contains logic for sorting this specific business object  	// type by the specified criteria  	IComparer<T> compare = sortBy.GetComparer<T> ();  	// Sort each sublist using the created IComparer<T>  	foreach (List<T> lst in rgCopies) {  		lst.Sort (compare);  	}  	if (i < sortByCount - 1) {  		// Create new sublists by searching for the sorted-by value boundaries/changes  		// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   		// from the original list.  NOT terribly efficient' but often sufficient.  		// Some advanced methods involve tracking duplicate values DURING the sort iteself  		List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  		for (int n = 0; n < rgCopies.Count; n++) {  			List<T> rgList = rgCopies [n];  			// Be conservative and set the initial sublist capacity to a small number' but  			// still honor the original list's item count.  (Example: If you are sorting a list  			// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  			// each sublist (each of which store all Address information entries with the same Zipcode)  			// with a capacity of 1000.   32'000 / 32 = 1000  			List<T> rgSublist = new List<T> (rgList.Count / 32);  			// Compare items to the item that preceeded it to determine where the "value boundaries"   			// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  			// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  			// when comparing elements during the sort routine).    			// Another alternative is to take advantage of the fact that the list is sorted and to  			// use a O(LogN) binary search rather than the (currently) linear O(N) search.  			for (int j = 0; j < rgList.Count; j++) {  				T item = rgList [j];  				if (j > 0) {  					// Compare the item to the preceeding item using the same comparison criterion  					// used during the sort  					T itemprev = rgList [j - 1];  					if (compare.Compare (item' itemprev) == 0) {  						// The item had the same property or field value as the preceeding item.    						// Add it on to the same sublist.  						rgSublist.Add (item);  					}  					else {  						// The item did NOT have the same property or field value as the preceeding item.  						// "Close up" the previous sublist and start a new one.  						rgNewCopies.Add (rgSublist);  						rgSublist = new List<T> (rgList.Count / 32);  						rgSublist.Add (item);  					}  				}  				else {  					// The first item has no predecessor - just add the item to the first sublist  					rgSublist.Add (item);  				}  			}  			// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  			// Add the last created sublist to our "master list of sublists" :P  			// It may be that this list has 0 elements in some cases' but this is not a problem  			rgNewCopies.Add (rgSublist);  		}  		// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  		// Move to the next "level" of sublists in preparation for further sorting using the next  		// sort/comparison criterion  		rgCopies = rgNewCopies;  	}  }  
Magic Number,JMMClient,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\MultiSort.cs,MultiSort,The following statement contains a magic number: if (i < sortByCount - 1) {  	// Create new sublists by searching for the sorted-by value boundaries/changes  	// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   	// from the original list.  NOT terribly efficient' but often sufficient.  	// Some advanced methods involve tracking duplicate values DURING the sort iteself  	List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  	for (int n = 0; n < rgCopies.Count; n++) {  		List<T> rgList = rgCopies [n];  		// Be conservative and set the initial sublist capacity to a small number' but  		// still honor the original list's item count.  (Example: If you are sorting a list  		// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  		// each sublist (each of which store all Address information entries with the same Zipcode)  		// with a capacity of 1000.   32'000 / 32 = 1000  		List<T> rgSublist = new List<T> (rgList.Count / 32);  		// Compare items to the item that preceeded it to determine where the "value boundaries"   		// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  		// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  		// when comparing elements during the sort routine).    		// Another alternative is to take advantage of the fact that the list is sorted and to  		// use a O(LogN) binary search rather than the (currently) linear O(N) search.  		for (int j = 0; j < rgList.Count; j++) {  			T item = rgList [j];  			if (j > 0) {  				// Compare the item to the preceeding item using the same comparison criterion  				// used during the sort  				T itemprev = rgList [j - 1];  				if (compare.Compare (item' itemprev) == 0) {  					// The item had the same property or field value as the preceeding item.    					// Add it on to the same sublist.  					rgSublist.Add (item);  				}  				else {  					// The item did NOT have the same property or field value as the preceeding item.  					// "Close up" the previous sublist and start a new one.  					rgNewCopies.Add (rgSublist);  					rgSublist = new List<T> (rgList.Count / 32);  					rgSublist.Add (item);  				}  			}  			else {  				// The first item has no predecessor - just add the item to the first sublist  				rgSublist.Add (item);  			}  		}  		// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  		// Add the last created sublist to our "master list of sublists" :P  		// It may be that this list has 0 elements in some cases' but this is not a problem  		rgNewCopies.Add (rgSublist);  	}  	// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  	// Move to the next "level" of sublists in preparation for further sorting using the next  	// sort/comparison criterion  	rgCopies = rgNewCopies;  }  
Magic Number,JMMClient,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\MultiSort.cs,MultiSort,The following statement contains a magic number: if (i < sortByCount - 1) {  	// Create new sublists by searching for the sorted-by value boundaries/changes  	// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   	// from the original list.  NOT terribly efficient' but often sufficient.  	// Some advanced methods involve tracking duplicate values DURING the sort iteself  	List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  	for (int n = 0; n < rgCopies.Count; n++) {  		List<T> rgList = rgCopies [n];  		// Be conservative and set the initial sublist capacity to a small number' but  		// still honor the original list's item count.  (Example: If you are sorting a list  		// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  		// each sublist (each of which store all Address information entries with the same Zipcode)  		// with a capacity of 1000.   32'000 / 32 = 1000  		List<T> rgSublist = new List<T> (rgList.Count / 32);  		// Compare items to the item that preceeded it to determine where the "value boundaries"   		// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  		// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  		// when comparing elements during the sort routine).    		// Another alternative is to take advantage of the fact that the list is sorted and to  		// use a O(LogN) binary search rather than the (currently) linear O(N) search.  		for (int j = 0; j < rgList.Count; j++) {  			T item = rgList [j];  			if (j > 0) {  				// Compare the item to the preceeding item using the same comparison criterion  				// used during the sort  				T itemprev = rgList [j - 1];  				if (compare.Compare (item' itemprev) == 0) {  					// The item had the same property or field value as the preceeding item.    					// Add it on to the same sublist.  					rgSublist.Add (item);  				}  				else {  					// The item did NOT have the same property or field value as the preceeding item.  					// "Close up" the previous sublist and start a new one.  					rgNewCopies.Add (rgSublist);  					rgSublist = new List<T> (rgList.Count / 32);  					rgSublist.Add (item);  				}  			}  			else {  				// The first item has no predecessor - just add the item to the first sublist  				rgSublist.Add (item);  			}  		}  		// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  		// Add the last created sublist to our "master list of sublists" :P  		// It may be that this list has 0 elements in some cases' but this is not a problem  		rgNewCopies.Add (rgSublist);  	}  	// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  	// Move to the next "level" of sublists in preparation for further sorting using the next  	// sort/comparison criterion  	rgCopies = rgNewCopies;  }  
Magic Number,JMMClient,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\MultiSort.cs,MultiSort,The following statement contains a magic number: if (i < sortByCount - 1) {  	// Create new sublists by searching for the sorted-by value boundaries/changes  	// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   	// from the original list.  NOT terribly efficient' but often sufficient.  	// Some advanced methods involve tracking duplicate values DURING the sort iteself  	List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  	for (int n = 0; n < rgCopies.Count; n++) {  		List<T> rgList = rgCopies [n];  		// Be conservative and set the initial sublist capacity to a small number' but  		// still honor the original list's item count.  (Example: If you are sorting a list  		// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  		// each sublist (each of which store all Address information entries with the same Zipcode)  		// with a capacity of 1000.   32'000 / 32 = 1000  		List<T> rgSublist = new List<T> (rgList.Count / 32);  		// Compare items to the item that preceeded it to determine where the "value boundaries"   		// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  		// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  		// when comparing elements during the sort routine).    		// Another alternative is to take advantage of the fact that the list is sorted and to  		// use a O(LogN) binary search rather than the (currently) linear O(N) search.  		for (int j = 0; j < rgList.Count; j++) {  			T item = rgList [j];  			if (j > 0) {  				// Compare the item to the preceeding item using the same comparison criterion  				// used during the sort  				T itemprev = rgList [j - 1];  				if (compare.Compare (item' itemprev) == 0) {  					// The item had the same property or field value as the preceeding item.    					// Add it on to the same sublist.  					rgSublist.Add (item);  				}  				else {  					// The item did NOT have the same property or field value as the preceeding item.  					// "Close up" the previous sublist and start a new one.  					rgNewCopies.Add (rgSublist);  					rgSublist = new List<T> (rgList.Count / 32);  					rgSublist.Add (item);  				}  			}  			else {  				// The first item has no predecessor - just add the item to the first sublist  				rgSublist.Add (item);  			}  		}  		// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  		// Add the last created sublist to our "master list of sublists" :P  		// It may be that this list has 0 elements in some cases' but this is not a problem  		rgNewCopies.Add (rgSublist);  	}  	// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  	// Move to the next "level" of sublists in preparation for further sorting using the next  	// sort/comparison criterion  	rgCopies = rgNewCopies;  }  
Magic Number,JMMClient,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\MultiSort.cs,MultiSort,The following statement contains a magic number: for (int n = 0; n < rgCopies.Count; n++) {  	List<T> rgList = rgCopies [n];  	// Be conservative and set the initial sublist capacity to a small number' but  	// still honor the original list's item count.  (Example: If you are sorting a list  	// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  	// each sublist (each of which store all Address information entries with the same Zipcode)  	// with a capacity of 1000.   32'000 / 32 = 1000  	List<T> rgSublist = new List<T> (rgList.Count / 32);  	// Compare items to the item that preceeded it to determine where the "value boundaries"   	// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  	// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  	// when comparing elements during the sort routine).    	// Another alternative is to take advantage of the fact that the list is sorted and to  	// use a O(LogN) binary search rather than the (currently) linear O(N) search.  	for (int j = 0; j < rgList.Count; j++) {  		T item = rgList [j];  		if (j > 0) {  			// Compare the item to the preceeding item using the same comparison criterion  			// used during the sort  			T itemprev = rgList [j - 1];  			if (compare.Compare (item' itemprev) == 0) {  				// The item had the same property or field value as the preceeding item.    				// Add it on to the same sublist.  				rgSublist.Add (item);  			}  			else {  				// The item did NOT have the same property or field value as the preceeding item.  				// "Close up" the previous sublist and start a new one.  				rgNewCopies.Add (rgSublist);  				rgSublist = new List<T> (rgList.Count / 32);  				rgSublist.Add (item);  			}  		}  		else {  			// The first item has no predecessor - just add the item to the first sublist  			rgSublist.Add (item);  		}  	}  	// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  	// Add the last created sublist to our "master list of sublists" :P  	// It may be that this list has 0 elements in some cases' but this is not a problem  	rgNewCopies.Add (rgSublist);  }  
Magic Number,JMMClient,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\MultiSort.cs,MultiSort,The following statement contains a magic number: for (int n = 0; n < rgCopies.Count; n++) {  	List<T> rgList = rgCopies [n];  	// Be conservative and set the initial sublist capacity to a small number' but  	// still honor the original list's item count.  (Example: If you are sorting a list  	// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  	// each sublist (each of which store all Address information entries with the same Zipcode)  	// with a capacity of 1000.   32'000 / 32 = 1000  	List<T> rgSublist = new List<T> (rgList.Count / 32);  	// Compare items to the item that preceeded it to determine where the "value boundaries"   	// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  	// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  	// when comparing elements during the sort routine).    	// Another alternative is to take advantage of the fact that the list is sorted and to  	// use a O(LogN) binary search rather than the (currently) linear O(N) search.  	for (int j = 0; j < rgList.Count; j++) {  		T item = rgList [j];  		if (j > 0) {  			// Compare the item to the preceeding item using the same comparison criterion  			// used during the sort  			T itemprev = rgList [j - 1];  			if (compare.Compare (item' itemprev) == 0) {  				// The item had the same property or field value as the preceeding item.    				// Add it on to the same sublist.  				rgSublist.Add (item);  			}  			else {  				// The item did NOT have the same property or field value as the preceeding item.  				// "Close up" the previous sublist and start a new one.  				rgNewCopies.Add (rgSublist);  				rgSublist = new List<T> (rgList.Count / 32);  				rgSublist.Add (item);  			}  		}  		else {  			// The first item has no predecessor - just add the item to the first sublist  			rgSublist.Add (item);  		}  	}  	// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  	// Add the last created sublist to our "master list of sublists" :P  	// It may be that this list has 0 elements in some cases' but this is not a problem  	rgNewCopies.Add (rgSublist);  }  
Magic Number,JMMClient,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\MultiSort.cs,MultiSort,The following statement contains a magic number: for (int j = 0; j < rgList.Count; j++) {  	T item = rgList [j];  	if (j > 0) {  		// Compare the item to the preceeding item using the same comparison criterion  		// used during the sort  		T itemprev = rgList [j - 1];  		if (compare.Compare (item' itemprev) == 0) {  			// The item had the same property or field value as the preceeding item.    			// Add it on to the same sublist.  			rgSublist.Add (item);  		}  		else {  			// The item did NOT have the same property or field value as the preceeding item.  			// "Close up" the previous sublist and start a new one.  			rgNewCopies.Add (rgSublist);  			rgSublist = new List<T> (rgList.Count / 32);  			rgSublist.Add (item);  		}  	}  	else {  		// The first item has no predecessor - just add the item to the first sublist  		rgSublist.Add (item);  	}  }  
Magic Number,JMMClient,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\MultiSort.cs,MultiSort,The following statement contains a magic number: if (j > 0) {  	// Compare the item to the preceeding item using the same comparison criterion  	// used during the sort  	T itemprev = rgList [j - 1];  	if (compare.Compare (item' itemprev) == 0) {  		// The item had the same property or field value as the preceeding item.    		// Add it on to the same sublist.  		rgSublist.Add (item);  	}  	else {  		// The item did NOT have the same property or field value as the preceeding item.  		// "Close up" the previous sublist and start a new one.  		rgNewCopies.Add (rgSublist);  		rgSublist = new List<T> (rgList.Count / 32);  		rgSublist.Add (item);  	}  }  else {  	// The first item has no predecessor - just add the item to the first sublist  	rgSublist.Add (item);  }  
Magic Number,JMMClient,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\MultiSort.cs,MultiSort,The following statement contains a magic number: if (compare.Compare (item' itemprev) == 0) {  	// The item had the same property or field value as the preceeding item.    	// Add it on to the same sublist.  	rgSublist.Add (item);  }  else {  	// The item did NOT have the same property or field value as the preceeding item.  	// "Close up" the previous sublist and start a new one.  	rgNewCopies.Add (rgSublist);  	rgSublist = new List<T> (rgList.Count / 32);  	rgSublist.Add (item);  }  
Magic Number,JMMClient,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\MultiSort.cs,MultiSort,The following statement contains a magic number: rgSublist = new List<T> (rgList.Count / 32);  
Magic Number,JMMClient,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: if (fFoundProperty == false) {  	fFoundProperty = true;  	if (pi == null) {  		PropertyDescriptorCollection props = TypeDescriptor.GetProperties (typeof(T));  		property = props [sPropertyName];  		pi = typeof(T).GetProperty (sPropertyName);  		if (pi == null) {  			throw new Exception ("Property name " + sPropertyName + " not found while trying to compare objects of type " + typeof(T).Name);  		}  	}  	typ = pi.PropertyType;  	// Set up the property comparison delegate to use based on the type of values we will be comparing  	if (sortType == SortType.eUsePropertyOrFieldType) {  		sortType = Sorting.GetSortTypeEnumForType (typ);  		if (typ == typeof(string)) {  			if (stringComparisonToUse == StringComparison.Ordinal)  				DoCompare = StringCompareOrdinal;  			else  				DoCompare = StringCompare;  		}  		else if (typ == typeof(int) && !fSortDescending)  			DoCompare = CompareInt;  		else if (typ == typeof(int))  			DoCompare = CompareIntDesc;  		else if (typ == typeof(DateTime))  			DoCompare = CompareDates;  		else if (typ == typeof(long))  			DoCompare = CompareTypeSensitive<long>;  		else if (typ == typeof(double))  			DoCompare = CompareTypeSensitive<double>;  		else if (typ == typeof(float))  			DoCompare = CompareTypeSensitive<float>;  		else if (typ == typeof(short))  			DoCompare = CompareTypeSensitive<short>;  		else if (typ == typeof(byte))  			DoCompare = CompareTypeSensitive<byte>;  		else if (typ == typeof(bool))  			DoCompare = CompareTypeSensitive<bool>;  		else if (typ.BaseType == typeof(Enum)) {  			FastEnumLookup = new Dictionary<int' string> (32);  			if (fSortDescending) {  				DoCompare = FastCompareEnumsDesc;  			}  			else {  				DoCompare = FastCompareEnumsAsc;  			}  		}  		else  			DoCompare = CompareUsingToString;  	}  	else {  		if (sortType == SortType.eString)  			DoCompare = CompareUsingToString;  		else if (sortType == SortType.eByte)  			DoCompare = CompareUsingToByte;  		else if (sortType == SortType.eDateTime)  			DoCompare = CompareUsingToDate;  		else if (sortType == SortType.eInteger)  			DoCompare = CompareUsingToInt;  		else if (sortType == SortType.eLong)  			DoCompare = CompareUsingToInt64;  		else if (sortType == SortType.eDoubleOrFloat)  			DoCompare = CompareUsingToDouble;  		else  			DoCompare = CompareUsingToString;  	}  }  
Magic Number,JMMClient,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: if (sortType == SortType.eUsePropertyOrFieldType) {  	sortType = Sorting.GetSortTypeEnumForType (typ);  	if (typ == typeof(string)) {  		if (stringComparisonToUse == StringComparison.Ordinal)  			DoCompare = StringCompareOrdinal;  		else  			DoCompare = StringCompare;  	}  	else if (typ == typeof(int) && !fSortDescending)  		DoCompare = CompareInt;  	else if (typ == typeof(int))  		DoCompare = CompareIntDesc;  	else if (typ == typeof(DateTime))  		DoCompare = CompareDates;  	else if (typ == typeof(long))  		DoCompare = CompareTypeSensitive<long>;  	else if (typ == typeof(double))  		DoCompare = CompareTypeSensitive<double>;  	else if (typ == typeof(float))  		DoCompare = CompareTypeSensitive<float>;  	else if (typ == typeof(short))  		DoCompare = CompareTypeSensitive<short>;  	else if (typ == typeof(byte))  		DoCompare = CompareTypeSensitive<byte>;  	else if (typ == typeof(bool))  		DoCompare = CompareTypeSensitive<bool>;  	else if (typ.BaseType == typeof(Enum)) {  		FastEnumLookup = new Dictionary<int' string> (32);  		if (fSortDescending) {  			DoCompare = FastCompareEnumsDesc;  		}  		else {  			DoCompare = FastCompareEnumsAsc;  		}  	}  	else  		DoCompare = CompareUsingToString;  }  else {  	if (sortType == SortType.eString)  		DoCompare = CompareUsingToString;  	else if (sortType == SortType.eByte)  		DoCompare = CompareUsingToByte;  	else if (sortType == SortType.eDateTime)  		DoCompare = CompareUsingToDate;  	else if (sortType == SortType.eInteger)  		DoCompare = CompareUsingToInt;  	else if (sortType == SortType.eLong)  		DoCompare = CompareUsingToInt64;  	else if (sortType == SortType.eDoubleOrFloat)  		DoCompare = CompareUsingToDouble;  	else  		DoCompare = CompareUsingToString;  }  
Magic Number,JMMClient,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(string)) {  	if (stringComparisonToUse == StringComparison.Ordinal)  		DoCompare = StringCompareOrdinal;  	else  		DoCompare = StringCompare;  }  else if (typ == typeof(int) && !fSortDescending)  	DoCompare = CompareInt;  else if (typ == typeof(int))  	DoCompare = CompareIntDesc;  else if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,JMMClient,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(int) && !fSortDescending)  	DoCompare = CompareInt;  else if (typ == typeof(int))  	DoCompare = CompareIntDesc;  else if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,JMMClient,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(int))  	DoCompare = CompareIntDesc;  else if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,JMMClient,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,JMMClient,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,JMMClient,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,JMMClient,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,JMMClient,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,JMMClient,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,JMMClient,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,JMMClient,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,JMMClient,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: FastEnumLookup = new Dictionary<int' string> (32);  
Magic Number,JMMClient,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: if (fFoundField == false) {  	fFoundField = true;  	if (fi == null) {  		// You can play around with binding flags if you really want to access nonpublic fields' etc...   		// note that there is a significant performance hit on accessing protected and private fields'  		// since security / permissions are checked every time' from what I can tell.  It's better  		// just to go through public properties if you're not accessing public fields.  		// fi = typeof(T).GetField(sFieldName' BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);  		fi = typeof(T).GetField (sFieldName);  		if (fi == null) {  			throw new Exception ("Field name " + sFieldName + " not found while trying to compare objects of type " + typeof(T).Name);  		}  	}  	typ = fi.FieldType;  	if (sortType == SortType.eUsePropertyOrFieldType) {  		sortType = Sorting.GetSortTypeEnumForType (typ);  		if (typ == typeof(string)) {  			if (stringComparisonToUse == StringComparison.Ordinal)  				DoCompare = StringCompareOrdinal;  			else  				DoCompare = StringCompare;  		}  		else if (typ == typeof(int) && !fSortDescending)  			DoCompare = CompareInt;  		else if (typ == typeof(int))  			DoCompare = CompareIntDesc;  		else if (typ == typeof(DateTime))  			DoCompare = CompareDates;  		else if (typ == typeof(long))  			DoCompare = CompareTypeSensitive<long>;  		else if (typ == typeof(double))  			DoCompare = CompareTypeSensitive<double>;  		else if (typ == typeof(float))  			DoCompare = CompareTypeSensitive<float>;  		else if (typ == typeof(short))  			DoCompare = CompareTypeSensitive<short>;  		else if (typ == typeof(byte))  			DoCompare = CompareTypeSensitive<byte>;  		else if (typ == typeof(bool))  			DoCompare = CompareTypeSensitive<bool>;  		else if (typ.BaseType == typeof(Enum)) {  			FastEnumLookup = new Dictionary<int' string> (32);  			if (fSortDescending) {  				DoCompare = FastCompareEnumsDesc;  			}  			else {  				DoCompare = FastCompareEnumsAsc;  			}  		}  		else  			DoCompare = CompareUsingToString;  		// optimize to use the ABOVE path if the property or field type matches  		// the requested sort type (i.e. below)  	}  	else {  		if (sortType == SortType.eString)  			DoCompare = CompareUsingToString;  		else if (sortType == SortType.eByte)  			DoCompare = CompareUsingToByte;  		else if (sortType == SortType.eDateTime)  			DoCompare = CompareUsingToDate;  		else if (sortType == SortType.eInteger)  			DoCompare = CompareUsingToInt;  		else if (sortType == SortType.eLong)  			DoCompare = CompareUsingToInt64;  		else if (sortType == SortType.eDoubleOrFloat)  			DoCompare = CompareUsingToDouble;  		else  			DoCompare = CompareUsingToString;  	}  }  
Magic Number,JMMClient,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: if (sortType == SortType.eUsePropertyOrFieldType) {  	sortType = Sorting.GetSortTypeEnumForType (typ);  	if (typ == typeof(string)) {  		if (stringComparisonToUse == StringComparison.Ordinal)  			DoCompare = StringCompareOrdinal;  		else  			DoCompare = StringCompare;  	}  	else if (typ == typeof(int) && !fSortDescending)  		DoCompare = CompareInt;  	else if (typ == typeof(int))  		DoCompare = CompareIntDesc;  	else if (typ == typeof(DateTime))  		DoCompare = CompareDates;  	else if (typ == typeof(long))  		DoCompare = CompareTypeSensitive<long>;  	else if (typ == typeof(double))  		DoCompare = CompareTypeSensitive<double>;  	else if (typ == typeof(float))  		DoCompare = CompareTypeSensitive<float>;  	else if (typ == typeof(short))  		DoCompare = CompareTypeSensitive<short>;  	else if (typ == typeof(byte))  		DoCompare = CompareTypeSensitive<byte>;  	else if (typ == typeof(bool))  		DoCompare = CompareTypeSensitive<bool>;  	else if (typ.BaseType == typeof(Enum)) {  		FastEnumLookup = new Dictionary<int' string> (32);  		if (fSortDescending) {  			DoCompare = FastCompareEnumsDesc;  		}  		else {  			DoCompare = FastCompareEnumsAsc;  		}  	}  	else  		DoCompare = CompareUsingToString;  	// optimize to use the ABOVE path if the property or field type matches  	// the requested sort type (i.e. below)  }  else {  	if (sortType == SortType.eString)  		DoCompare = CompareUsingToString;  	else if (sortType == SortType.eByte)  		DoCompare = CompareUsingToByte;  	else if (sortType == SortType.eDateTime)  		DoCompare = CompareUsingToDate;  	else if (sortType == SortType.eInteger)  		DoCompare = CompareUsingToInt;  	else if (sortType == SortType.eLong)  		DoCompare = CompareUsingToInt64;  	else if (sortType == SortType.eDoubleOrFloat)  		DoCompare = CompareUsingToDouble;  	else  		DoCompare = CompareUsingToString;  }  
Magic Number,JMMClient,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(string)) {  	if (stringComparisonToUse == StringComparison.Ordinal)  		DoCompare = StringCompareOrdinal;  	else  		DoCompare = StringCompare;  }  else if (typ == typeof(int) && !fSortDescending)  	DoCompare = CompareInt;  else if (typ == typeof(int))  	DoCompare = CompareIntDesc;  else if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,JMMClient,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(int) && !fSortDescending)  	DoCompare = CompareInt;  else if (typ == typeof(int))  	DoCompare = CompareIntDesc;  else if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,JMMClient,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(int))  	DoCompare = CompareIntDesc;  else if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,JMMClient,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,JMMClient,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,JMMClient,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,JMMClient,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,JMMClient,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,JMMClient,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,JMMClient,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,JMMClient,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,JMMClient,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\ValueComparison.cs,Initialize,The following statement contains a magic number: FastEnumLookup = new Dictionary<int' string> (32);  
Magic Number,JMMClient,AniDB_AnimeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeVM.cs,AniDB_AnimeVM,The following statement contains a magic number: if (AnimeID == 8150) {  	Console.Write ("");  }  
Magic Number,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The following statement contains a magic number: if (this.EpisodeTypeEnum == JMMClient.EpisodeType.Episode) {  	if (tvSummary != null && tvSummary.CrossRefTvDBV2 != null && tvSummary.CrossRefTvDBV2.Count > 0) {  		// find the xref that is right  		// relies on the xref's being sorted by season number and then episode number (desc)  		List<SortPropOrFieldAndDirection> sortCriteria = new List<SortPropOrFieldAndDirection> ();  		sortCriteria.Add (new SortPropOrFieldAndDirection ("AniDBStartEpisodeNumber"' true' JMMClient.SortType.eInteger));  		List<CrossRef_AniDB_TvDBVMV2> tvDBCrossRef = Sorting.MultiSort<CrossRef_AniDB_TvDBVMV2> (tvSummary.CrossRefTvDBV2' sortCriteria);  		bool foundStartingPoint = false;  		CrossRef_AniDB_TvDBVMV2 xrefBase = null;  		foreach (CrossRef_AniDB_TvDBVMV2 xrefTV in tvDBCrossRef) {  			if (xrefTV.AniDBStartEpisodeType != (int)JMMClient.EpisodeType.Episode)  				continue;  			if (this.EpisodeNumber >= xrefTV.AniDBStartEpisodeNumber) {  				foundStartingPoint = true;  				xrefBase = xrefTV;  				break;  			}  		}  		// we have found the starting epiosde numbder from AniDB  		// now let's check that the TvDB Season and Episode Number exist  		if (foundStartingPoint) {  			Dictionary<int' int> dictTvDBSeasons = null;  			Dictionary<int' TvDB_EpisodeVM> dictTvDBEpisodes = null;  			foreach (TvDBDetails det in tvSummary.TvDetails.Values) {  				if (det.TvDBID == xrefBase.TvDBID) {  					dictTvDBSeasons = det.DictTvDBSeasons;  					dictTvDBEpisodes = det.DictTvDBEpisodes;  					break;  				}  			}  			if (dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  				int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (this.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  				if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  					TvDB_EpisodeVM tvep = dictTvDBEpisodes [episodeNumber];  					if (string.IsNullOrEmpty (tvep.Overview))  						this.EpisodeOverviewLoading = "Episode Overview Not Available";  					else  						this.EpisodeOverviewLoading = tvep.Overview;  					if (string.IsNullOrEmpty (tvep.FullImagePath) || !File.Exists (tvep.FullImagePath)) {  						if (string.IsNullOrEmpty (tvep.OnlineImagePath)) {  							this.EpisodeImageLoading = @"/Images/EpisodeThumb_NotFound.png";  							// if there is no proper image to show' we will hide it on the dashboard  							ShowEpisodeImageInDashboard = false;  						}  						else  							this.EpisodeImageLoading = tvep.OnlineImagePath;  					}  					else  						this.EpisodeImageLoading = tvep.FullImagePath;  					if (JMMServerVM.Instance.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  						EpisodeName = tvep.EpisodeName;  				}  			}  		}  	}  }  
Magic Number,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The following statement contains a magic number: if (tvSummary != null && tvSummary.CrossRefTvDBV2 != null && tvSummary.CrossRefTvDBV2.Count > 0) {  	// find the xref that is right  	// relies on the xref's being sorted by season number and then episode number (desc)  	List<SortPropOrFieldAndDirection> sortCriteria = new List<SortPropOrFieldAndDirection> ();  	sortCriteria.Add (new SortPropOrFieldAndDirection ("AniDBStartEpisodeNumber"' true' JMMClient.SortType.eInteger));  	List<CrossRef_AniDB_TvDBVMV2> tvDBCrossRef = Sorting.MultiSort<CrossRef_AniDB_TvDBVMV2> (tvSummary.CrossRefTvDBV2' sortCriteria);  	bool foundStartingPoint = false;  	CrossRef_AniDB_TvDBVMV2 xrefBase = null;  	foreach (CrossRef_AniDB_TvDBVMV2 xrefTV in tvDBCrossRef) {  		if (xrefTV.AniDBStartEpisodeType != (int)JMMClient.EpisodeType.Episode)  			continue;  		if (this.EpisodeNumber >= xrefTV.AniDBStartEpisodeNumber) {  			foundStartingPoint = true;  			xrefBase = xrefTV;  			break;  		}  	}  	// we have found the starting epiosde numbder from AniDB  	// now let's check that the TvDB Season and Episode Number exist  	if (foundStartingPoint) {  		Dictionary<int' int> dictTvDBSeasons = null;  		Dictionary<int' TvDB_EpisodeVM> dictTvDBEpisodes = null;  		foreach (TvDBDetails det in tvSummary.TvDetails.Values) {  			if (det.TvDBID == xrefBase.TvDBID) {  				dictTvDBSeasons = det.DictTvDBSeasons;  				dictTvDBEpisodes = det.DictTvDBEpisodes;  				break;  			}  		}  		if (dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  			int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (this.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  			if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  				TvDB_EpisodeVM tvep = dictTvDBEpisodes [episodeNumber];  				if (string.IsNullOrEmpty (tvep.Overview))  					this.EpisodeOverviewLoading = "Episode Overview Not Available";  				else  					this.EpisodeOverviewLoading = tvep.Overview;  				if (string.IsNullOrEmpty (tvep.FullImagePath) || !File.Exists (tvep.FullImagePath)) {  					if (string.IsNullOrEmpty (tvep.OnlineImagePath)) {  						this.EpisodeImageLoading = @"/Images/EpisodeThumb_NotFound.png";  						// if there is no proper image to show' we will hide it on the dashboard  						ShowEpisodeImageInDashboard = false;  					}  					else  						this.EpisodeImageLoading = tvep.OnlineImagePath;  				}  				else  					this.EpisodeImageLoading = tvep.FullImagePath;  				if (JMMServerVM.Instance.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  					EpisodeName = tvep.EpisodeName;  			}  		}  	}  }  
Magic Number,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The following statement contains a magic number: if (foundStartingPoint) {  	Dictionary<int' int> dictTvDBSeasons = null;  	Dictionary<int' TvDB_EpisodeVM> dictTvDBEpisodes = null;  	foreach (TvDBDetails det in tvSummary.TvDetails.Values) {  		if (det.TvDBID == xrefBase.TvDBID) {  			dictTvDBSeasons = det.DictTvDBSeasons;  			dictTvDBEpisodes = det.DictTvDBEpisodes;  			break;  		}  	}  	if (dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  		int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (this.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  		if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  			TvDB_EpisodeVM tvep = dictTvDBEpisodes [episodeNumber];  			if (string.IsNullOrEmpty (tvep.Overview))  				this.EpisodeOverviewLoading = "Episode Overview Not Available";  			else  				this.EpisodeOverviewLoading = tvep.Overview;  			if (string.IsNullOrEmpty (tvep.FullImagePath) || !File.Exists (tvep.FullImagePath)) {  				if (string.IsNullOrEmpty (tvep.OnlineImagePath)) {  					this.EpisodeImageLoading = @"/Images/EpisodeThumb_NotFound.png";  					// if there is no proper image to show' we will hide it on the dashboard  					ShowEpisodeImageInDashboard = false;  				}  				else  					this.EpisodeImageLoading = tvep.OnlineImagePath;  			}  			else  				this.EpisodeImageLoading = tvep.FullImagePath;  			if (JMMServerVM.Instance.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  				EpisodeName = tvep.EpisodeName;  		}  	}  }  
Magic Number,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The following statement contains a magic number: if (dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  	int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (this.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  	if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  		TvDB_EpisodeVM tvep = dictTvDBEpisodes [episodeNumber];  		if (string.IsNullOrEmpty (tvep.Overview))  			this.EpisodeOverviewLoading = "Episode Overview Not Available";  		else  			this.EpisodeOverviewLoading = tvep.Overview;  		if (string.IsNullOrEmpty (tvep.FullImagePath) || !File.Exists (tvep.FullImagePath)) {  			if (string.IsNullOrEmpty (tvep.OnlineImagePath)) {  				this.EpisodeImageLoading = @"/Images/EpisodeThumb_NotFound.png";  				// if there is no proper image to show' we will hide it on the dashboard  				ShowEpisodeImageInDashboard = false;  			}  			else  				this.EpisodeImageLoading = tvep.OnlineImagePath;  		}  		else  			this.EpisodeImageLoading = tvep.FullImagePath;  		if (JMMServerVM.Instance.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  			EpisodeName = tvep.EpisodeName;  	}  }  
Magic Number,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The following statement contains a magic number: if (this.EpisodeTypeEnum == JMMClient.EpisodeType.Special) {  	// find the xref that is right  	// relies on the xref's being sorted by season number and then episode number (desc)  	List<SortPropOrFieldAndDirection> sortCriteria = new List<SortPropOrFieldAndDirection> ();  	sortCriteria.Add (new SortPropOrFieldAndDirection ("AniDBStartEpisodeNumber"' true' JMMClient.SortType.eInteger));  	List<CrossRef_AniDB_TvDBVMV2> tvDBCrossRef = Sorting.MultiSort<CrossRef_AniDB_TvDBVMV2> (tvSummary.CrossRefTvDBV2' sortCriteria);  	bool foundStartingPoint = false;  	CrossRef_AniDB_TvDBVMV2 xrefBase = null;  	foreach (CrossRef_AniDB_TvDBVMV2 xrefTV in tvDBCrossRef) {  		if (xrefTV.AniDBStartEpisodeType != (int)JMMClient.EpisodeType.Special)  			continue;  		if (this.EpisodeNumber >= xrefTV.AniDBStartEpisodeNumber) {  			foundStartingPoint = true;  			xrefBase = xrefTV;  			break;  		}  	}  	if (tvSummary != null && tvSummary.CrossRefTvDBV2 != null && tvSummary.CrossRefTvDBV2.Count > 0) {  		// we have found the starting epiosde numbder from AniDB  		// now let's check that the TvDB Season and Episode Number exist  		if (foundStartingPoint) {  			Dictionary<int' int> dictTvDBSeasons = null;  			Dictionary<int' TvDB_EpisodeVM> dictTvDBEpisodes = null;  			foreach (TvDBDetails det in tvSummary.TvDetails.Values) {  				if (det.TvDBID == xrefBase.TvDBID) {  					dictTvDBSeasons = det.DictTvDBSeasons;  					dictTvDBEpisodes = det.DictTvDBEpisodes;  					break;  				}  			}  			if (dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  				int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (this.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  				if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  					TvDB_EpisodeVM tvep = dictTvDBEpisodes [episodeNumber];  					this.EpisodeOverviewLoading = tvep.Overview;  					if (string.IsNullOrEmpty (tvep.FullImagePath) || !File.Exists (tvep.FullImagePath)) {  						if (string.IsNullOrEmpty (tvep.OnlineImagePath)) {  							this.EpisodeImageLoading = @"/Images/EpisodeThumb_NotFound.png";  							// if there is no proper image to show' we will hide it on the dashboard  							ShowEpisodeImageInDashboard = false;  						}  						else  							this.EpisodeImageLoading = tvep.OnlineImagePath;  					}  					else  						this.EpisodeImageLoading = tvep.FullImagePath;  					if (JMMServerVM.Instance.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  						EpisodeName = tvep.EpisodeName;  				}  			}  		}  	}  }  
Magic Number,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The following statement contains a magic number: if (tvSummary != null && tvSummary.CrossRefTvDBV2 != null && tvSummary.CrossRefTvDBV2.Count > 0) {  	// we have found the starting epiosde numbder from AniDB  	// now let's check that the TvDB Season and Episode Number exist  	if (foundStartingPoint) {  		Dictionary<int' int> dictTvDBSeasons = null;  		Dictionary<int' TvDB_EpisodeVM> dictTvDBEpisodes = null;  		foreach (TvDBDetails det in tvSummary.TvDetails.Values) {  			if (det.TvDBID == xrefBase.TvDBID) {  				dictTvDBSeasons = det.DictTvDBSeasons;  				dictTvDBEpisodes = det.DictTvDBEpisodes;  				break;  			}  		}  		if (dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  			int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (this.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  			if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  				TvDB_EpisodeVM tvep = dictTvDBEpisodes [episodeNumber];  				this.EpisodeOverviewLoading = tvep.Overview;  				if (string.IsNullOrEmpty (tvep.FullImagePath) || !File.Exists (tvep.FullImagePath)) {  					if (string.IsNullOrEmpty (tvep.OnlineImagePath)) {  						this.EpisodeImageLoading = @"/Images/EpisodeThumb_NotFound.png";  						// if there is no proper image to show' we will hide it on the dashboard  						ShowEpisodeImageInDashboard = false;  					}  					else  						this.EpisodeImageLoading = tvep.OnlineImagePath;  				}  				else  					this.EpisodeImageLoading = tvep.FullImagePath;  				if (JMMServerVM.Instance.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  					EpisodeName = tvep.EpisodeName;  			}  		}  	}  }  
Magic Number,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The following statement contains a magic number: if (foundStartingPoint) {  	Dictionary<int' int> dictTvDBSeasons = null;  	Dictionary<int' TvDB_EpisodeVM> dictTvDBEpisodes = null;  	foreach (TvDBDetails det in tvSummary.TvDetails.Values) {  		if (det.TvDBID == xrefBase.TvDBID) {  			dictTvDBSeasons = det.DictTvDBSeasons;  			dictTvDBEpisodes = det.DictTvDBEpisodes;  			break;  		}  	}  	if (dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  		int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (this.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  		if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  			TvDB_EpisodeVM tvep = dictTvDBEpisodes [episodeNumber];  			this.EpisodeOverviewLoading = tvep.Overview;  			if (string.IsNullOrEmpty (tvep.FullImagePath) || !File.Exists (tvep.FullImagePath)) {  				if (string.IsNullOrEmpty (tvep.OnlineImagePath)) {  					this.EpisodeImageLoading = @"/Images/EpisodeThumb_NotFound.png";  					// if there is no proper image to show' we will hide it on the dashboard  					ShowEpisodeImageInDashboard = false;  				}  				else  					this.EpisodeImageLoading = tvep.OnlineImagePath;  			}  			else  				this.EpisodeImageLoading = tvep.FullImagePath;  			if (JMMServerVM.Instance.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  				EpisodeName = tvep.EpisodeName;  		}  	}  }  
Magic Number,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The following statement contains a magic number: if (dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  	int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (this.EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  	if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  		TvDB_EpisodeVM tvep = dictTvDBEpisodes [episodeNumber];  		this.EpisodeOverviewLoading = tvep.Overview;  		if (string.IsNullOrEmpty (tvep.FullImagePath) || !File.Exists (tvep.FullImagePath)) {  			if (string.IsNullOrEmpty (tvep.OnlineImagePath)) {  				this.EpisodeImageLoading = @"/Images/EpisodeThumb_NotFound.png";  				// if there is no proper image to show' we will hide it on the dashboard  				ShowEpisodeImageInDashboard = false;  			}  			else  				this.EpisodeImageLoading = tvep.OnlineImagePath;  		}  		else  			this.EpisodeImageLoading = tvep.FullImagePath;  		if (JMMServerVM.Instance.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  			EpisodeName = tvep.EpisodeName;  	}  }  
Magic Number,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,SetEpisodeNameVariants,The following statement contains a magic number: EpisodeTypeAndNumberAbsolute = string.Format ("{0}{1}"' shortType' EpisodeNumber.ToString ().PadLeft (5' '0'));  
Magic Number,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,SetEpisodeNameVariants,The following statement contains a magic number: if (EpisodeNumberAndName.Length > 60)  	EpisodeNumberAndNameTruncated = EpisodeNumberAndName.Substring (0' 60) + "...";  
Magic Number,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,SetEpisodeNameVariants,The following statement contains a magic number: if (EpisodeNumberAndName.Length > 60)  	EpisodeNumberAndNameTruncated = EpisodeNumberAndName.Substring (0' 60) + "...";  
Magic Number,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,SetEpisodeNameVariants,The following statement contains a magic number: EpisodeNumberAndNameTruncated = EpisodeNumberAndName.Substring (0' 60) + "...";  
Magic Number,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,SetEpisodeNameVariants,The following statement contains a magic number: if (EpisodeNumberAndNameWithTypeTruncated.Length > 60)  	EpisodeNumberAndNameWithTypeTruncated = EpisodeNumberAndNameWithType.Substring (0' 60) + "...";  
Magic Number,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,SetEpisodeNameVariants,The following statement contains a magic number: if (EpisodeNumberAndNameWithTypeTruncated.Length > 60)  	EpisodeNumberAndNameWithTypeTruncated = EpisodeNumberAndNameWithType.Substring (0' 60) + "...";  
Magic Number,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,SetEpisodeNameVariants,The following statement contains a magic number: EpisodeNumberAndNameWithTypeTruncated = EpisodeNumberAndNameWithType.Substring (0' 60) + "...";  
Magic Number,JMMClient,AnimeGroupVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeGroupVM.cs,Populate,The following statement contains a magic number: if (contract.AnimeGroupID == 189) {  	Debug.Print ("");  }  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,DashboardMetroVM,The following statement contains a magic number: rotateShoutsTimer.Interval = 15 * 1000;  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,DashboardMetroVM,The following statement contains a magic number: rotateShoutsTimer.Interval = 15 * 1000;  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshContinueWatching,The following statement contains a magic number: try {  	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  		ContinueWatching.Clear ();  	});  	DateTime start = DateTime.Now;  	List<JMMServerBinary.Contract_AnimeEpisode> epContracts = JMMServerVM.Instance.clientBinaryHTTP.GetContinueWatchingFilter (JMMServerVM.Instance.CurrentUser.JMMUserID.Value' UserSettingsVM.Instance.DashMetro_WatchNext_Items);  	TimeSpan ts = DateTime.Now - start;  	logger.Trace ("Dashboard Time: RefreshEpsWatchNext_Recent: contracts: {0}"' ts.TotalMilliseconds);  	start = DateTime.Now;  	List<AnimeEpisodeVM> epList = new List<AnimeEpisodeVM> ();  	foreach (JMMServerBinary.Contract_AnimeEpisode contract in epContracts) {  		AnimeEpisodeVM ep = new AnimeEpisodeVM (contract);  		string animename = ep.AnimeName;  		// just do this to force anidb anime detail record to be loaded  		ep.RefreshAnime ();  		//ep.SetTvDBInfo();  		epList.Add (ep);  	}  	ts = DateTime.Now - start;  	logger.Trace ("Dashboard Time: RefreshEpsWatchNext_Recent: episode details: {0}"' ts.TotalMilliseconds);  	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  		foreach (AnimeEpisodeVM ep in epList) {  			string imageName = "";  			if (AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart)  				imageName = ep.AniDB_Anime.FanartPathPreferThumb;  			else  				imageName = ep.AniDB_Anime.DefaultPosterPath;  			ContinueWatching.Add (new ContinueWatchingTile () {  				EpisodeDetails = ep.EpisodeNumberAndName'  				AnimeName = ep.AnimeSeries.SeriesName'  				Picture = imageName'  				AnimeSeries = ep.AnimeSeries'  				UnwatchedEpisodes = ep.AnimeSeries.UnwatchedEpisodeCount'  				TileSize = "Large"'  				Height = 100  			});  		}  		ViewContinueWatching.Refresh ();  	});  	OnFinishedProcess (new FinishedProcessEventArgs (DashboardMetroProcessType.ContinueWatching));  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  finally {  }  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshContinueWatching,The following statement contains a magic number: System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  	foreach (AnimeEpisodeVM ep in epList) {  		string imageName = "";  		if (AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart)  			imageName = ep.AniDB_Anime.FanartPathPreferThumb;  		else  			imageName = ep.AniDB_Anime.DefaultPosterPath;  		ContinueWatching.Add (new ContinueWatchingTile () {  			EpisodeDetails = ep.EpisodeNumberAndName'  			AnimeName = ep.AnimeSeries.SeriesName'  			Picture = imageName'  			AnimeSeries = ep.AnimeSeries'  			UnwatchedEpisodes = ep.AnimeSeries.UnwatchedEpisodeCount'  			TileSize = "Large"'  			Height = 100  		});  	}  	ViewContinueWatching.Refresh ();  });  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshContinueWatching,The following statement contains a magic number: foreach (AnimeEpisodeVM ep in epList) {  	string imageName = "";  	if (AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart)  		imageName = ep.AniDB_Anime.FanartPathPreferThumb;  	else  		imageName = ep.AniDB_Anime.DefaultPosterPath;  	ContinueWatching.Add (new ContinueWatchingTile () {  		EpisodeDetails = ep.EpisodeNumberAndName'  		AnimeName = ep.AnimeSeries.SeriesName'  		Picture = imageName'  		AnimeSeries = ep.AnimeSeries'  		UnwatchedEpisodes = ep.AnimeSeries.UnwatchedEpisodeCount'  		TileSize = "Large"'  		Height = 100  	});  }  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshContinueWatching,The following statement contains a magic number: ContinueWatching.Add (new ContinueWatchingTile () {  	EpisodeDetails = ep.EpisodeNumberAndName'  	AnimeName = ep.AnimeSeries.SeriesName'  	Picture = imageName'  	AnimeSeries = ep.AnimeSeries'  	UnwatchedEpisodes = ep.AnimeSeries.UnwatchedEpisodeCount'  	TileSize = "Large"'  	Height = 100  });  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshRandomSeries,The following statement contains a magic number: try {  	logger.Trace ("XXX1 RefreshRandomSeries");  	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  		RandomSeries.Clear ();  	});  	logger.Trace ("XXX2 RefreshRandomSeries");  	List<AnimeSeriesVM> serList = new List<AnimeSeriesVM> ();  	List<AnimeGroupVM> grps = new List<AnimeGroupVM> (MainListHelperVM.Instance.AllGroups);  	logger.Trace ("XXX3 RefreshRandomSeries");  	foreach (AnimeGroupVM grp in grps) {  		// ignore sub groups  		if (grp.AnimeGroupParentID.HasValue)  			continue;  		foreach (AnimeSeriesVM ser in grp.AllAnimeSeries) {  			if (!ser.IsComplete)  				continue;  			if (ser.AllFilesWatched)  				continue;  			if (!JMMServerVM.Instance.CurrentUser.EvaluateSeries (ser))  				continue;  			serList.Add (ser);  		}  	}  	DateTime start = DateTime.Now;  	logger.Trace ("XXX4 RefreshRandomSeries");  	var serShuffledList = serList.OrderBy (a => Guid.NewGuid ());  	//serList.Shuffle();  	TimeSpan ts = DateTime.Now - start;  	logger.Trace (string.Format ("XXX5 Shuffled {0} series list in {1} ms"' serList.Count' ts.TotalMilliseconds));  	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  		foreach (AnimeSeriesVM ser in serShuffledList.Take (AppSettings.DashMetro_RandomSeries_Items)) {  			string imageName = "";  			if (AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart)  				imageName = ser.AniDB_Anime.FanartPath;  			else  				imageName = ser.AniDB_Anime.DefaultPosterPath;  			RandomSeries.Add (new RandomSeriesTile () {  				Details = ""'  				AnimeName = ser.SeriesName'  				Picture = imageName'  				AnimeSeries = ser'  				TileSize = "Large"'  				Height = 100  			});  		}  		ViewRandomSeries.Refresh ();  	});  	OnFinishedProcess (new FinishedProcessEventArgs (DashboardMetroProcessType.RandomSeries));  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  finally {  }  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshRandomSeries,The following statement contains a magic number: System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  	foreach (AnimeSeriesVM ser in serShuffledList.Take (AppSettings.DashMetro_RandomSeries_Items)) {  		string imageName = "";  		if (AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart)  			imageName = ser.AniDB_Anime.FanartPath;  		else  			imageName = ser.AniDB_Anime.DefaultPosterPath;  		RandomSeries.Add (new RandomSeriesTile () {  			Details = ""'  			AnimeName = ser.SeriesName'  			Picture = imageName'  			AnimeSeries = ser'  			TileSize = "Large"'  			Height = 100  		});  	}  	ViewRandomSeries.Refresh ();  });  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshRandomSeries,The following statement contains a magic number: foreach (AnimeSeriesVM ser in serShuffledList.Take (AppSettings.DashMetro_RandomSeries_Items)) {  	string imageName = "";  	if (AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart)  		imageName = ser.AniDB_Anime.FanartPath;  	else  		imageName = ser.AniDB_Anime.DefaultPosterPath;  	RandomSeries.Add (new RandomSeriesTile () {  		Details = ""'  		AnimeName = ser.SeriesName'  		Picture = imageName'  		AnimeSeries = ser'  		TileSize = "Large"'  		Height = 100  	});  }  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshRandomSeries,The following statement contains a magic number: RandomSeries.Add (new RandomSeriesTile () {  	Details = ""'  	AnimeName = ser.SeriesName'  	Picture = imageName'  	AnimeSeries = ser'  	TileSize = "Large"'  	Height = 100  });  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshTraktActivity,The following statement contains a magic number: try {  	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  		TraktActivity.Clear ();  		TraktShouts.Clear ();  	});  	JMMServerBinary.Contract_Trakt_Activity traktActivity = JMMServerVM.Instance.clientBinaryHTTP.GetTraktFriendInfo (20' false' true' false);  	if (traktActivity.HasTraktAccount) {  		string blankImageName = @"/Images/blankposter.png";  		if (AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart)  			blankImageName = @"/Images/blankfanart.png";  		int numItems = 0;  		// first get all the shouts  		foreach (JMMServerBinary.Contract_Trakt_FriendActivity contractAct in traktActivity.TraktFriendActivity) {  			if (contractAct.ActivityAction == (int)TraktActivityAction.Shout) {  				if (contractAct.ActivityType == (int)TraktActivityType.Episode) {  					Trakt_ActivityShoutEpisodeVM shoutEp = new Trakt_ActivityShoutEpisodeVM (contractAct);  					TraktShoutTile tile = new TraktShoutTile () {  						ShowName = shoutEp.Shout.ShowTitle'  						ShowPicture = blankImageName'  						Details = shoutEp.Shout.EpisodeDescription + Environment.NewLine + shoutEp.Shout.Text'  						ShoutDateString = shoutEp.ActivityDateString'  						FriendName = shoutEp.User.Username'  						FriendPicture = blankImageName'  						OnlineShowPicture = shoutEp.Shout.OnlineImagePath'  						OnlineFriendPicture = shoutEp.User.Avatar'  						URL = shoutEp.Shout.Episode_Url'  						TileSize = "Large"'  						Height = 100  					};  					TraktShouts.Add (tile);  					imagesToDownload.Add (tile);  					numItems = 1;  				}  				else {  					Trakt_ActivityShoutShowVM shoutShow = new Trakt_ActivityShoutShowVM (contractAct);  					TraktShoutTile tile = new TraktShoutTile () {  						ShowName = shoutShow.Shout.ShowTitle'  						ShowPicture = blankImageName'  						Details = shoutShow.Shout.Text'  						ShoutDateString = shoutShow.ActivityDateString'  						FriendName = shoutShow.User.Username'  						FriendPicture = blankImageName'  						URL = shoutShow.Shout.TraktShow.url'  						OnlineShowPicture = shoutShow.Shout.OnlineImagePath'  						OnlineFriendPicture = shoutShow.User.Avatar'  						TileSize = "Large"'  						Height = 100  					};  					TraktShouts.Add (tile);  					imagesToDownload.Add (tile);  					numItems = 1;  				}  			}  		}  		if (TraktShouts.Count > 0) {  			System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  				TraktActivity.Add (TraktShouts [0]);  			});  		}  		traktActivity = JMMServerVM.Instance.clientBinaryHTTP.GetTraktFriendInfo (AppSettings.DashMetro_TraktActivity_Items + 1' false' false' true);  		foreach (JMMServerBinary.Contract_Trakt_FriendActivity contractAct in traktActivity.TraktFriendActivity) {  			if (numItems == AppSettings.DashMetro_TraktActivity_Items)  				break;  			if (contractAct.ActivityAction == (int)TraktActivityAction.Scrobble) {  				Trakt_ActivityScrobbleVM scrobble = new Trakt_ActivityScrobbleVM (contractAct);  				TraktActivityTile tile = new TraktActivityTile () {  					Scrobble = scrobble'  					ShowName = scrobble.Episode.ShowTitle'  					ShowPicture = blankImageName'  					EpisodeDetails = scrobble.Episode.EpisodeDescription'  					URL = scrobble.Episode.Episode_Url'  					FriendName = scrobble.User.Username'  					FriendPicture = blankImageName'  					TileSize = "Large"'  					Height = 100  				};  				numItems++;  				System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  					TraktActivity.Add (tile);  				});  				imagesToDownload.Add (tile);  			}  		}  	}  	else {  		Trakt_SignupVM signup = new Trakt_SignupVM ();  		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  			TraktActivity.Add (signup);  		});  	}  	OnFinishedProcess (new FinishedProcessEventArgs (DashboardMetroProcessType.TraktActivity));  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  finally {  }  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshTraktActivity,The following statement contains a magic number: try {  	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  		TraktActivity.Clear ();  		TraktShouts.Clear ();  	});  	JMMServerBinary.Contract_Trakt_Activity traktActivity = JMMServerVM.Instance.clientBinaryHTTP.GetTraktFriendInfo (20' false' true' false);  	if (traktActivity.HasTraktAccount) {  		string blankImageName = @"/Images/blankposter.png";  		if (AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart)  			blankImageName = @"/Images/blankfanart.png";  		int numItems = 0;  		// first get all the shouts  		foreach (JMMServerBinary.Contract_Trakt_FriendActivity contractAct in traktActivity.TraktFriendActivity) {  			if (contractAct.ActivityAction == (int)TraktActivityAction.Shout) {  				if (contractAct.ActivityType == (int)TraktActivityType.Episode) {  					Trakt_ActivityShoutEpisodeVM shoutEp = new Trakt_ActivityShoutEpisodeVM (contractAct);  					TraktShoutTile tile = new TraktShoutTile () {  						ShowName = shoutEp.Shout.ShowTitle'  						ShowPicture = blankImageName'  						Details = shoutEp.Shout.EpisodeDescription + Environment.NewLine + shoutEp.Shout.Text'  						ShoutDateString = shoutEp.ActivityDateString'  						FriendName = shoutEp.User.Username'  						FriendPicture = blankImageName'  						OnlineShowPicture = shoutEp.Shout.OnlineImagePath'  						OnlineFriendPicture = shoutEp.User.Avatar'  						URL = shoutEp.Shout.Episode_Url'  						TileSize = "Large"'  						Height = 100  					};  					TraktShouts.Add (tile);  					imagesToDownload.Add (tile);  					numItems = 1;  				}  				else {  					Trakt_ActivityShoutShowVM shoutShow = new Trakt_ActivityShoutShowVM (contractAct);  					TraktShoutTile tile = new TraktShoutTile () {  						ShowName = shoutShow.Shout.ShowTitle'  						ShowPicture = blankImageName'  						Details = shoutShow.Shout.Text'  						ShoutDateString = shoutShow.ActivityDateString'  						FriendName = shoutShow.User.Username'  						FriendPicture = blankImageName'  						URL = shoutShow.Shout.TraktShow.url'  						OnlineShowPicture = shoutShow.Shout.OnlineImagePath'  						OnlineFriendPicture = shoutShow.User.Avatar'  						TileSize = "Large"'  						Height = 100  					};  					TraktShouts.Add (tile);  					imagesToDownload.Add (tile);  					numItems = 1;  				}  			}  		}  		if (TraktShouts.Count > 0) {  			System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  				TraktActivity.Add (TraktShouts [0]);  			});  		}  		traktActivity = JMMServerVM.Instance.clientBinaryHTTP.GetTraktFriendInfo (AppSettings.DashMetro_TraktActivity_Items + 1' false' false' true);  		foreach (JMMServerBinary.Contract_Trakt_FriendActivity contractAct in traktActivity.TraktFriendActivity) {  			if (numItems == AppSettings.DashMetro_TraktActivity_Items)  				break;  			if (contractAct.ActivityAction == (int)TraktActivityAction.Scrobble) {  				Trakt_ActivityScrobbleVM scrobble = new Trakt_ActivityScrobbleVM (contractAct);  				TraktActivityTile tile = new TraktActivityTile () {  					Scrobble = scrobble'  					ShowName = scrobble.Episode.ShowTitle'  					ShowPicture = blankImageName'  					EpisodeDetails = scrobble.Episode.EpisodeDescription'  					URL = scrobble.Episode.Episode_Url'  					FriendName = scrobble.User.Username'  					FriendPicture = blankImageName'  					TileSize = "Large"'  					Height = 100  				};  				numItems++;  				System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  					TraktActivity.Add (tile);  				});  				imagesToDownload.Add (tile);  			}  		}  	}  	else {  		Trakt_SignupVM signup = new Trakt_SignupVM ();  		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  			TraktActivity.Add (signup);  		});  	}  	OnFinishedProcess (new FinishedProcessEventArgs (DashboardMetroProcessType.TraktActivity));  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  finally {  }  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshTraktActivity,The following statement contains a magic number: try {  	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  		TraktActivity.Clear ();  		TraktShouts.Clear ();  	});  	JMMServerBinary.Contract_Trakt_Activity traktActivity = JMMServerVM.Instance.clientBinaryHTTP.GetTraktFriendInfo (20' false' true' false);  	if (traktActivity.HasTraktAccount) {  		string blankImageName = @"/Images/blankposter.png";  		if (AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart)  			blankImageName = @"/Images/blankfanart.png";  		int numItems = 0;  		// first get all the shouts  		foreach (JMMServerBinary.Contract_Trakt_FriendActivity contractAct in traktActivity.TraktFriendActivity) {  			if (contractAct.ActivityAction == (int)TraktActivityAction.Shout) {  				if (contractAct.ActivityType == (int)TraktActivityType.Episode) {  					Trakt_ActivityShoutEpisodeVM shoutEp = new Trakt_ActivityShoutEpisodeVM (contractAct);  					TraktShoutTile tile = new TraktShoutTile () {  						ShowName = shoutEp.Shout.ShowTitle'  						ShowPicture = blankImageName'  						Details = shoutEp.Shout.EpisodeDescription + Environment.NewLine + shoutEp.Shout.Text'  						ShoutDateString = shoutEp.ActivityDateString'  						FriendName = shoutEp.User.Username'  						FriendPicture = blankImageName'  						OnlineShowPicture = shoutEp.Shout.OnlineImagePath'  						OnlineFriendPicture = shoutEp.User.Avatar'  						URL = shoutEp.Shout.Episode_Url'  						TileSize = "Large"'  						Height = 100  					};  					TraktShouts.Add (tile);  					imagesToDownload.Add (tile);  					numItems = 1;  				}  				else {  					Trakt_ActivityShoutShowVM shoutShow = new Trakt_ActivityShoutShowVM (contractAct);  					TraktShoutTile tile = new TraktShoutTile () {  						ShowName = shoutShow.Shout.ShowTitle'  						ShowPicture = blankImageName'  						Details = shoutShow.Shout.Text'  						ShoutDateString = shoutShow.ActivityDateString'  						FriendName = shoutShow.User.Username'  						FriendPicture = blankImageName'  						URL = shoutShow.Shout.TraktShow.url'  						OnlineShowPicture = shoutShow.Shout.OnlineImagePath'  						OnlineFriendPicture = shoutShow.User.Avatar'  						TileSize = "Large"'  						Height = 100  					};  					TraktShouts.Add (tile);  					imagesToDownload.Add (tile);  					numItems = 1;  				}  			}  		}  		if (TraktShouts.Count > 0) {  			System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  				TraktActivity.Add (TraktShouts [0]);  			});  		}  		traktActivity = JMMServerVM.Instance.clientBinaryHTTP.GetTraktFriendInfo (AppSettings.DashMetro_TraktActivity_Items + 1' false' false' true);  		foreach (JMMServerBinary.Contract_Trakt_FriendActivity contractAct in traktActivity.TraktFriendActivity) {  			if (numItems == AppSettings.DashMetro_TraktActivity_Items)  				break;  			if (contractAct.ActivityAction == (int)TraktActivityAction.Scrobble) {  				Trakt_ActivityScrobbleVM scrobble = new Trakt_ActivityScrobbleVM (contractAct);  				TraktActivityTile tile = new TraktActivityTile () {  					Scrobble = scrobble'  					ShowName = scrobble.Episode.ShowTitle'  					ShowPicture = blankImageName'  					EpisodeDetails = scrobble.Episode.EpisodeDescription'  					URL = scrobble.Episode.Episode_Url'  					FriendName = scrobble.User.Username'  					FriendPicture = blankImageName'  					TileSize = "Large"'  					Height = 100  				};  				numItems++;  				System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  					TraktActivity.Add (tile);  				});  				imagesToDownload.Add (tile);  			}  		}  	}  	else {  		Trakt_SignupVM signup = new Trakt_SignupVM ();  		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  			TraktActivity.Add (signup);  		});  	}  	OnFinishedProcess (new FinishedProcessEventArgs (DashboardMetroProcessType.TraktActivity));  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  finally {  }  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshTraktActivity,The following statement contains a magic number: try {  	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  		TraktActivity.Clear ();  		TraktShouts.Clear ();  	});  	JMMServerBinary.Contract_Trakt_Activity traktActivity = JMMServerVM.Instance.clientBinaryHTTP.GetTraktFriendInfo (20' false' true' false);  	if (traktActivity.HasTraktAccount) {  		string blankImageName = @"/Images/blankposter.png";  		if (AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart)  			blankImageName = @"/Images/blankfanart.png";  		int numItems = 0;  		// first get all the shouts  		foreach (JMMServerBinary.Contract_Trakt_FriendActivity contractAct in traktActivity.TraktFriendActivity) {  			if (contractAct.ActivityAction == (int)TraktActivityAction.Shout) {  				if (contractAct.ActivityType == (int)TraktActivityType.Episode) {  					Trakt_ActivityShoutEpisodeVM shoutEp = new Trakt_ActivityShoutEpisodeVM (contractAct);  					TraktShoutTile tile = new TraktShoutTile () {  						ShowName = shoutEp.Shout.ShowTitle'  						ShowPicture = blankImageName'  						Details = shoutEp.Shout.EpisodeDescription + Environment.NewLine + shoutEp.Shout.Text'  						ShoutDateString = shoutEp.ActivityDateString'  						FriendName = shoutEp.User.Username'  						FriendPicture = blankImageName'  						OnlineShowPicture = shoutEp.Shout.OnlineImagePath'  						OnlineFriendPicture = shoutEp.User.Avatar'  						URL = shoutEp.Shout.Episode_Url'  						TileSize = "Large"'  						Height = 100  					};  					TraktShouts.Add (tile);  					imagesToDownload.Add (tile);  					numItems = 1;  				}  				else {  					Trakt_ActivityShoutShowVM shoutShow = new Trakt_ActivityShoutShowVM (contractAct);  					TraktShoutTile tile = new TraktShoutTile () {  						ShowName = shoutShow.Shout.ShowTitle'  						ShowPicture = blankImageName'  						Details = shoutShow.Shout.Text'  						ShoutDateString = shoutShow.ActivityDateString'  						FriendName = shoutShow.User.Username'  						FriendPicture = blankImageName'  						URL = shoutShow.Shout.TraktShow.url'  						OnlineShowPicture = shoutShow.Shout.OnlineImagePath'  						OnlineFriendPicture = shoutShow.User.Avatar'  						TileSize = "Large"'  						Height = 100  					};  					TraktShouts.Add (tile);  					imagesToDownload.Add (tile);  					numItems = 1;  				}  			}  		}  		if (TraktShouts.Count > 0) {  			System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  				TraktActivity.Add (TraktShouts [0]);  			});  		}  		traktActivity = JMMServerVM.Instance.clientBinaryHTTP.GetTraktFriendInfo (AppSettings.DashMetro_TraktActivity_Items + 1' false' false' true);  		foreach (JMMServerBinary.Contract_Trakt_FriendActivity contractAct in traktActivity.TraktFriendActivity) {  			if (numItems == AppSettings.DashMetro_TraktActivity_Items)  				break;  			if (contractAct.ActivityAction == (int)TraktActivityAction.Scrobble) {  				Trakt_ActivityScrobbleVM scrobble = new Trakt_ActivityScrobbleVM (contractAct);  				TraktActivityTile tile = new TraktActivityTile () {  					Scrobble = scrobble'  					ShowName = scrobble.Episode.ShowTitle'  					ShowPicture = blankImageName'  					EpisodeDetails = scrobble.Episode.EpisodeDescription'  					URL = scrobble.Episode.Episode_Url'  					FriendName = scrobble.User.Username'  					FriendPicture = blankImageName'  					TileSize = "Large"'  					Height = 100  				};  				numItems++;  				System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  					TraktActivity.Add (tile);  				});  				imagesToDownload.Add (tile);  			}  		}  	}  	else {  		Trakt_SignupVM signup = new Trakt_SignupVM ();  		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  			TraktActivity.Add (signup);  		});  	}  	OnFinishedProcess (new FinishedProcessEventArgs (DashboardMetroProcessType.TraktActivity));  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  finally {  }  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshTraktActivity,The following statement contains a magic number: if (traktActivity.HasTraktAccount) {  	string blankImageName = @"/Images/blankposter.png";  	if (AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart)  		blankImageName = @"/Images/blankfanart.png";  	int numItems = 0;  	// first get all the shouts  	foreach (JMMServerBinary.Contract_Trakt_FriendActivity contractAct in traktActivity.TraktFriendActivity) {  		if (contractAct.ActivityAction == (int)TraktActivityAction.Shout) {  			if (contractAct.ActivityType == (int)TraktActivityType.Episode) {  				Trakt_ActivityShoutEpisodeVM shoutEp = new Trakt_ActivityShoutEpisodeVM (contractAct);  				TraktShoutTile tile = new TraktShoutTile () {  					ShowName = shoutEp.Shout.ShowTitle'  					ShowPicture = blankImageName'  					Details = shoutEp.Shout.EpisodeDescription + Environment.NewLine + shoutEp.Shout.Text'  					ShoutDateString = shoutEp.ActivityDateString'  					FriendName = shoutEp.User.Username'  					FriendPicture = blankImageName'  					OnlineShowPicture = shoutEp.Shout.OnlineImagePath'  					OnlineFriendPicture = shoutEp.User.Avatar'  					URL = shoutEp.Shout.Episode_Url'  					TileSize = "Large"'  					Height = 100  				};  				TraktShouts.Add (tile);  				imagesToDownload.Add (tile);  				numItems = 1;  			}  			else {  				Trakt_ActivityShoutShowVM shoutShow = new Trakt_ActivityShoutShowVM (contractAct);  				TraktShoutTile tile = new TraktShoutTile () {  					ShowName = shoutShow.Shout.ShowTitle'  					ShowPicture = blankImageName'  					Details = shoutShow.Shout.Text'  					ShoutDateString = shoutShow.ActivityDateString'  					FriendName = shoutShow.User.Username'  					FriendPicture = blankImageName'  					URL = shoutShow.Shout.TraktShow.url'  					OnlineShowPicture = shoutShow.Shout.OnlineImagePath'  					OnlineFriendPicture = shoutShow.User.Avatar'  					TileSize = "Large"'  					Height = 100  				};  				TraktShouts.Add (tile);  				imagesToDownload.Add (tile);  				numItems = 1;  			}  		}  	}  	if (TraktShouts.Count > 0) {  		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  			TraktActivity.Add (TraktShouts [0]);  		});  	}  	traktActivity = JMMServerVM.Instance.clientBinaryHTTP.GetTraktFriendInfo (AppSettings.DashMetro_TraktActivity_Items + 1' false' false' true);  	foreach (JMMServerBinary.Contract_Trakt_FriendActivity contractAct in traktActivity.TraktFriendActivity) {  		if (numItems == AppSettings.DashMetro_TraktActivity_Items)  			break;  		if (contractAct.ActivityAction == (int)TraktActivityAction.Scrobble) {  			Trakt_ActivityScrobbleVM scrobble = new Trakt_ActivityScrobbleVM (contractAct);  			TraktActivityTile tile = new TraktActivityTile () {  				Scrobble = scrobble'  				ShowName = scrobble.Episode.ShowTitle'  				ShowPicture = blankImageName'  				EpisodeDetails = scrobble.Episode.EpisodeDescription'  				URL = scrobble.Episode.Episode_Url'  				FriendName = scrobble.User.Username'  				FriendPicture = blankImageName'  				TileSize = "Large"'  				Height = 100  			};  			numItems++;  			System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  				TraktActivity.Add (tile);  			});  			imagesToDownload.Add (tile);  		}  	}  }  else {  	Trakt_SignupVM signup = new Trakt_SignupVM ();  	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  		TraktActivity.Add (signup);  	});  }  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshTraktActivity,The following statement contains a magic number: if (traktActivity.HasTraktAccount) {  	string blankImageName = @"/Images/blankposter.png";  	if (AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart)  		blankImageName = @"/Images/blankfanart.png";  	int numItems = 0;  	// first get all the shouts  	foreach (JMMServerBinary.Contract_Trakt_FriendActivity contractAct in traktActivity.TraktFriendActivity) {  		if (contractAct.ActivityAction == (int)TraktActivityAction.Shout) {  			if (contractAct.ActivityType == (int)TraktActivityType.Episode) {  				Trakt_ActivityShoutEpisodeVM shoutEp = new Trakt_ActivityShoutEpisodeVM (contractAct);  				TraktShoutTile tile = new TraktShoutTile () {  					ShowName = shoutEp.Shout.ShowTitle'  					ShowPicture = blankImageName'  					Details = shoutEp.Shout.EpisodeDescription + Environment.NewLine + shoutEp.Shout.Text'  					ShoutDateString = shoutEp.ActivityDateString'  					FriendName = shoutEp.User.Username'  					FriendPicture = blankImageName'  					OnlineShowPicture = shoutEp.Shout.OnlineImagePath'  					OnlineFriendPicture = shoutEp.User.Avatar'  					URL = shoutEp.Shout.Episode_Url'  					TileSize = "Large"'  					Height = 100  				};  				TraktShouts.Add (tile);  				imagesToDownload.Add (tile);  				numItems = 1;  			}  			else {  				Trakt_ActivityShoutShowVM shoutShow = new Trakt_ActivityShoutShowVM (contractAct);  				TraktShoutTile tile = new TraktShoutTile () {  					ShowName = shoutShow.Shout.ShowTitle'  					ShowPicture = blankImageName'  					Details = shoutShow.Shout.Text'  					ShoutDateString = shoutShow.ActivityDateString'  					FriendName = shoutShow.User.Username'  					FriendPicture = blankImageName'  					URL = shoutShow.Shout.TraktShow.url'  					OnlineShowPicture = shoutShow.Shout.OnlineImagePath'  					OnlineFriendPicture = shoutShow.User.Avatar'  					TileSize = "Large"'  					Height = 100  				};  				TraktShouts.Add (tile);  				imagesToDownload.Add (tile);  				numItems = 1;  			}  		}  	}  	if (TraktShouts.Count > 0) {  		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  			TraktActivity.Add (TraktShouts [0]);  		});  	}  	traktActivity = JMMServerVM.Instance.clientBinaryHTTP.GetTraktFriendInfo (AppSettings.DashMetro_TraktActivity_Items + 1' false' false' true);  	foreach (JMMServerBinary.Contract_Trakt_FriendActivity contractAct in traktActivity.TraktFriendActivity) {  		if (numItems == AppSettings.DashMetro_TraktActivity_Items)  			break;  		if (contractAct.ActivityAction == (int)TraktActivityAction.Scrobble) {  			Trakt_ActivityScrobbleVM scrobble = new Trakt_ActivityScrobbleVM (contractAct);  			TraktActivityTile tile = new TraktActivityTile () {  				Scrobble = scrobble'  				ShowName = scrobble.Episode.ShowTitle'  				ShowPicture = blankImageName'  				EpisodeDetails = scrobble.Episode.EpisodeDescription'  				URL = scrobble.Episode.Episode_Url'  				FriendName = scrobble.User.Username'  				FriendPicture = blankImageName'  				TileSize = "Large"'  				Height = 100  			};  			numItems++;  			System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  				TraktActivity.Add (tile);  			});  			imagesToDownload.Add (tile);  		}  	}  }  else {  	Trakt_SignupVM signup = new Trakt_SignupVM ();  	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  		TraktActivity.Add (signup);  	});  }  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshTraktActivity,The following statement contains a magic number: if (traktActivity.HasTraktAccount) {  	string blankImageName = @"/Images/blankposter.png";  	if (AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart)  		blankImageName = @"/Images/blankfanart.png";  	int numItems = 0;  	// first get all the shouts  	foreach (JMMServerBinary.Contract_Trakt_FriendActivity contractAct in traktActivity.TraktFriendActivity) {  		if (contractAct.ActivityAction == (int)TraktActivityAction.Shout) {  			if (contractAct.ActivityType == (int)TraktActivityType.Episode) {  				Trakt_ActivityShoutEpisodeVM shoutEp = new Trakt_ActivityShoutEpisodeVM (contractAct);  				TraktShoutTile tile = new TraktShoutTile () {  					ShowName = shoutEp.Shout.ShowTitle'  					ShowPicture = blankImageName'  					Details = shoutEp.Shout.EpisodeDescription + Environment.NewLine + shoutEp.Shout.Text'  					ShoutDateString = shoutEp.ActivityDateString'  					FriendName = shoutEp.User.Username'  					FriendPicture = blankImageName'  					OnlineShowPicture = shoutEp.Shout.OnlineImagePath'  					OnlineFriendPicture = shoutEp.User.Avatar'  					URL = shoutEp.Shout.Episode_Url'  					TileSize = "Large"'  					Height = 100  				};  				TraktShouts.Add (tile);  				imagesToDownload.Add (tile);  				numItems = 1;  			}  			else {  				Trakt_ActivityShoutShowVM shoutShow = new Trakt_ActivityShoutShowVM (contractAct);  				TraktShoutTile tile = new TraktShoutTile () {  					ShowName = shoutShow.Shout.ShowTitle'  					ShowPicture = blankImageName'  					Details = shoutShow.Shout.Text'  					ShoutDateString = shoutShow.ActivityDateString'  					FriendName = shoutShow.User.Username'  					FriendPicture = blankImageName'  					URL = shoutShow.Shout.TraktShow.url'  					OnlineShowPicture = shoutShow.Shout.OnlineImagePath'  					OnlineFriendPicture = shoutShow.User.Avatar'  					TileSize = "Large"'  					Height = 100  				};  				TraktShouts.Add (tile);  				imagesToDownload.Add (tile);  				numItems = 1;  			}  		}  	}  	if (TraktShouts.Count > 0) {  		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  			TraktActivity.Add (TraktShouts [0]);  		});  	}  	traktActivity = JMMServerVM.Instance.clientBinaryHTTP.GetTraktFriendInfo (AppSettings.DashMetro_TraktActivity_Items + 1' false' false' true);  	foreach (JMMServerBinary.Contract_Trakt_FriendActivity contractAct in traktActivity.TraktFriendActivity) {  		if (numItems == AppSettings.DashMetro_TraktActivity_Items)  			break;  		if (contractAct.ActivityAction == (int)TraktActivityAction.Scrobble) {  			Trakt_ActivityScrobbleVM scrobble = new Trakt_ActivityScrobbleVM (contractAct);  			TraktActivityTile tile = new TraktActivityTile () {  				Scrobble = scrobble'  				ShowName = scrobble.Episode.ShowTitle'  				ShowPicture = blankImageName'  				EpisodeDetails = scrobble.Episode.EpisodeDescription'  				URL = scrobble.Episode.Episode_Url'  				FriendName = scrobble.User.Username'  				FriendPicture = blankImageName'  				TileSize = "Large"'  				Height = 100  			};  			numItems++;  			System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  				TraktActivity.Add (tile);  			});  			imagesToDownload.Add (tile);  		}  	}  }  else {  	Trakt_SignupVM signup = new Trakt_SignupVM ();  	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  		TraktActivity.Add (signup);  	});  }  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshTraktActivity,The following statement contains a magic number: foreach (JMMServerBinary.Contract_Trakt_FriendActivity contractAct in traktActivity.TraktFriendActivity) {  	if (contractAct.ActivityAction == (int)TraktActivityAction.Shout) {  		if (contractAct.ActivityType == (int)TraktActivityType.Episode) {  			Trakt_ActivityShoutEpisodeVM shoutEp = new Trakt_ActivityShoutEpisodeVM (contractAct);  			TraktShoutTile tile = new TraktShoutTile () {  				ShowName = shoutEp.Shout.ShowTitle'  				ShowPicture = blankImageName'  				Details = shoutEp.Shout.EpisodeDescription + Environment.NewLine + shoutEp.Shout.Text'  				ShoutDateString = shoutEp.ActivityDateString'  				FriendName = shoutEp.User.Username'  				FriendPicture = blankImageName'  				OnlineShowPicture = shoutEp.Shout.OnlineImagePath'  				OnlineFriendPicture = shoutEp.User.Avatar'  				URL = shoutEp.Shout.Episode_Url'  				TileSize = "Large"'  				Height = 100  			};  			TraktShouts.Add (tile);  			imagesToDownload.Add (tile);  			numItems = 1;  		}  		else {  			Trakt_ActivityShoutShowVM shoutShow = new Trakt_ActivityShoutShowVM (contractAct);  			TraktShoutTile tile = new TraktShoutTile () {  				ShowName = shoutShow.Shout.ShowTitle'  				ShowPicture = blankImageName'  				Details = shoutShow.Shout.Text'  				ShoutDateString = shoutShow.ActivityDateString'  				FriendName = shoutShow.User.Username'  				FriendPicture = blankImageName'  				URL = shoutShow.Shout.TraktShow.url'  				OnlineShowPicture = shoutShow.Shout.OnlineImagePath'  				OnlineFriendPicture = shoutShow.User.Avatar'  				TileSize = "Large"'  				Height = 100  			};  			TraktShouts.Add (tile);  			imagesToDownload.Add (tile);  			numItems = 1;  		}  	}  }  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshTraktActivity,The following statement contains a magic number: foreach (JMMServerBinary.Contract_Trakt_FriendActivity contractAct in traktActivity.TraktFriendActivity) {  	if (contractAct.ActivityAction == (int)TraktActivityAction.Shout) {  		if (contractAct.ActivityType == (int)TraktActivityType.Episode) {  			Trakt_ActivityShoutEpisodeVM shoutEp = new Trakt_ActivityShoutEpisodeVM (contractAct);  			TraktShoutTile tile = new TraktShoutTile () {  				ShowName = shoutEp.Shout.ShowTitle'  				ShowPicture = blankImageName'  				Details = shoutEp.Shout.EpisodeDescription + Environment.NewLine + shoutEp.Shout.Text'  				ShoutDateString = shoutEp.ActivityDateString'  				FriendName = shoutEp.User.Username'  				FriendPicture = blankImageName'  				OnlineShowPicture = shoutEp.Shout.OnlineImagePath'  				OnlineFriendPicture = shoutEp.User.Avatar'  				URL = shoutEp.Shout.Episode_Url'  				TileSize = "Large"'  				Height = 100  			};  			TraktShouts.Add (tile);  			imagesToDownload.Add (tile);  			numItems = 1;  		}  		else {  			Trakt_ActivityShoutShowVM shoutShow = new Trakt_ActivityShoutShowVM (contractAct);  			TraktShoutTile tile = new TraktShoutTile () {  				ShowName = shoutShow.Shout.ShowTitle'  				ShowPicture = blankImageName'  				Details = shoutShow.Shout.Text'  				ShoutDateString = shoutShow.ActivityDateString'  				FriendName = shoutShow.User.Username'  				FriendPicture = blankImageName'  				URL = shoutShow.Shout.TraktShow.url'  				OnlineShowPicture = shoutShow.Shout.OnlineImagePath'  				OnlineFriendPicture = shoutShow.User.Avatar'  				TileSize = "Large"'  				Height = 100  			};  			TraktShouts.Add (tile);  			imagesToDownload.Add (tile);  			numItems = 1;  		}  	}  }  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshTraktActivity,The following statement contains a magic number: if (contractAct.ActivityAction == (int)TraktActivityAction.Shout) {  	if (contractAct.ActivityType == (int)TraktActivityType.Episode) {  		Trakt_ActivityShoutEpisodeVM shoutEp = new Trakt_ActivityShoutEpisodeVM (contractAct);  		TraktShoutTile tile = new TraktShoutTile () {  			ShowName = shoutEp.Shout.ShowTitle'  			ShowPicture = blankImageName'  			Details = shoutEp.Shout.EpisodeDescription + Environment.NewLine + shoutEp.Shout.Text'  			ShoutDateString = shoutEp.ActivityDateString'  			FriendName = shoutEp.User.Username'  			FriendPicture = blankImageName'  			OnlineShowPicture = shoutEp.Shout.OnlineImagePath'  			OnlineFriendPicture = shoutEp.User.Avatar'  			URL = shoutEp.Shout.Episode_Url'  			TileSize = "Large"'  			Height = 100  		};  		TraktShouts.Add (tile);  		imagesToDownload.Add (tile);  		numItems = 1;  	}  	else {  		Trakt_ActivityShoutShowVM shoutShow = new Trakt_ActivityShoutShowVM (contractAct);  		TraktShoutTile tile = new TraktShoutTile () {  			ShowName = shoutShow.Shout.ShowTitle'  			ShowPicture = blankImageName'  			Details = shoutShow.Shout.Text'  			ShoutDateString = shoutShow.ActivityDateString'  			FriendName = shoutShow.User.Username'  			FriendPicture = blankImageName'  			URL = shoutShow.Shout.TraktShow.url'  			OnlineShowPicture = shoutShow.Shout.OnlineImagePath'  			OnlineFriendPicture = shoutShow.User.Avatar'  			TileSize = "Large"'  			Height = 100  		};  		TraktShouts.Add (tile);  		imagesToDownload.Add (tile);  		numItems = 1;  	}  }  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshTraktActivity,The following statement contains a magic number: if (contractAct.ActivityAction == (int)TraktActivityAction.Shout) {  	if (contractAct.ActivityType == (int)TraktActivityType.Episode) {  		Trakt_ActivityShoutEpisodeVM shoutEp = new Trakt_ActivityShoutEpisodeVM (contractAct);  		TraktShoutTile tile = new TraktShoutTile () {  			ShowName = shoutEp.Shout.ShowTitle'  			ShowPicture = blankImageName'  			Details = shoutEp.Shout.EpisodeDescription + Environment.NewLine + shoutEp.Shout.Text'  			ShoutDateString = shoutEp.ActivityDateString'  			FriendName = shoutEp.User.Username'  			FriendPicture = blankImageName'  			OnlineShowPicture = shoutEp.Shout.OnlineImagePath'  			OnlineFriendPicture = shoutEp.User.Avatar'  			URL = shoutEp.Shout.Episode_Url'  			TileSize = "Large"'  			Height = 100  		};  		TraktShouts.Add (tile);  		imagesToDownload.Add (tile);  		numItems = 1;  	}  	else {  		Trakt_ActivityShoutShowVM shoutShow = new Trakt_ActivityShoutShowVM (contractAct);  		TraktShoutTile tile = new TraktShoutTile () {  			ShowName = shoutShow.Shout.ShowTitle'  			ShowPicture = blankImageName'  			Details = shoutShow.Shout.Text'  			ShoutDateString = shoutShow.ActivityDateString'  			FriendName = shoutShow.User.Username'  			FriendPicture = blankImageName'  			URL = shoutShow.Shout.TraktShow.url'  			OnlineShowPicture = shoutShow.Shout.OnlineImagePath'  			OnlineFriendPicture = shoutShow.User.Avatar'  			TileSize = "Large"'  			Height = 100  		};  		TraktShouts.Add (tile);  		imagesToDownload.Add (tile);  		numItems = 1;  	}  }  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshTraktActivity,The following statement contains a magic number: if (contractAct.ActivityType == (int)TraktActivityType.Episode) {  	Trakt_ActivityShoutEpisodeVM shoutEp = new Trakt_ActivityShoutEpisodeVM (contractAct);  	TraktShoutTile tile = new TraktShoutTile () {  		ShowName = shoutEp.Shout.ShowTitle'  		ShowPicture = blankImageName'  		Details = shoutEp.Shout.EpisodeDescription + Environment.NewLine + shoutEp.Shout.Text'  		ShoutDateString = shoutEp.ActivityDateString'  		FriendName = shoutEp.User.Username'  		FriendPicture = blankImageName'  		OnlineShowPicture = shoutEp.Shout.OnlineImagePath'  		OnlineFriendPicture = shoutEp.User.Avatar'  		URL = shoutEp.Shout.Episode_Url'  		TileSize = "Large"'  		Height = 100  	};  	TraktShouts.Add (tile);  	imagesToDownload.Add (tile);  	numItems = 1;  }  else {  	Trakt_ActivityShoutShowVM shoutShow = new Trakt_ActivityShoutShowVM (contractAct);  	TraktShoutTile tile = new TraktShoutTile () {  		ShowName = shoutShow.Shout.ShowTitle'  		ShowPicture = blankImageName'  		Details = shoutShow.Shout.Text'  		ShoutDateString = shoutShow.ActivityDateString'  		FriendName = shoutShow.User.Username'  		FriendPicture = blankImageName'  		URL = shoutShow.Shout.TraktShow.url'  		OnlineShowPicture = shoutShow.Shout.OnlineImagePath'  		OnlineFriendPicture = shoutShow.User.Avatar'  		TileSize = "Large"'  		Height = 100  	};  	TraktShouts.Add (tile);  	imagesToDownload.Add (tile);  	numItems = 1;  }  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshTraktActivity,The following statement contains a magic number: if (contractAct.ActivityType == (int)TraktActivityType.Episode) {  	Trakt_ActivityShoutEpisodeVM shoutEp = new Trakt_ActivityShoutEpisodeVM (contractAct);  	TraktShoutTile tile = new TraktShoutTile () {  		ShowName = shoutEp.Shout.ShowTitle'  		ShowPicture = blankImageName'  		Details = shoutEp.Shout.EpisodeDescription + Environment.NewLine + shoutEp.Shout.Text'  		ShoutDateString = shoutEp.ActivityDateString'  		FriendName = shoutEp.User.Username'  		FriendPicture = blankImageName'  		OnlineShowPicture = shoutEp.Shout.OnlineImagePath'  		OnlineFriendPicture = shoutEp.User.Avatar'  		URL = shoutEp.Shout.Episode_Url'  		TileSize = "Large"'  		Height = 100  	};  	TraktShouts.Add (tile);  	imagesToDownload.Add (tile);  	numItems = 1;  }  else {  	Trakt_ActivityShoutShowVM shoutShow = new Trakt_ActivityShoutShowVM (contractAct);  	TraktShoutTile tile = new TraktShoutTile () {  		ShowName = shoutShow.Shout.ShowTitle'  		ShowPicture = blankImageName'  		Details = shoutShow.Shout.Text'  		ShoutDateString = shoutShow.ActivityDateString'  		FriendName = shoutShow.User.Username'  		FriendPicture = blankImageName'  		URL = shoutShow.Shout.TraktShow.url'  		OnlineShowPicture = shoutShow.Shout.OnlineImagePath'  		OnlineFriendPicture = shoutShow.User.Avatar'  		TileSize = "Large"'  		Height = 100  	};  	TraktShouts.Add (tile);  	imagesToDownload.Add (tile);  	numItems = 1;  }  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshTraktActivity,The following statement contains a magic number: foreach (JMMServerBinary.Contract_Trakt_FriendActivity contractAct in traktActivity.TraktFriendActivity) {  	if (numItems == AppSettings.DashMetro_TraktActivity_Items)  		break;  	if (contractAct.ActivityAction == (int)TraktActivityAction.Scrobble) {  		Trakt_ActivityScrobbleVM scrobble = new Trakt_ActivityScrobbleVM (contractAct);  		TraktActivityTile tile = new TraktActivityTile () {  			Scrobble = scrobble'  			ShowName = scrobble.Episode.ShowTitle'  			ShowPicture = blankImageName'  			EpisodeDetails = scrobble.Episode.EpisodeDescription'  			URL = scrobble.Episode.Episode_Url'  			FriendName = scrobble.User.Username'  			FriendPicture = blankImageName'  			TileSize = "Large"'  			Height = 100  		};  		numItems++;  		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  			TraktActivity.Add (tile);  		});  		imagesToDownload.Add (tile);  	}  }  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshTraktActivity,The following statement contains a magic number: if (contractAct.ActivityAction == (int)TraktActivityAction.Scrobble) {  	Trakt_ActivityScrobbleVM scrobble = new Trakt_ActivityScrobbleVM (contractAct);  	TraktActivityTile tile = new TraktActivityTile () {  		Scrobble = scrobble'  		ShowName = scrobble.Episode.ShowTitle'  		ShowPicture = blankImageName'  		EpisodeDetails = scrobble.Episode.EpisodeDescription'  		URL = scrobble.Episode.Episode_Url'  		FriendName = scrobble.User.Username'  		FriendPicture = blankImageName'  		TileSize = "Large"'  		Height = 100  	};  	numItems++;  	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  		TraktActivity.Add (tile);  	});  	imagesToDownload.Add (tile);  }  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshNewEpisodes,The following statement contains a magic number: try {  	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  		NewEpisodes.Clear ();  	});  	List<JMMServerBinary.Contract_AnimeEpisode> epContracts = JMMServerVM.Instance.clientBinaryHTTP.GetEpisodesRecentlyAddedSummary (UserSettingsVM.Instance.DashMetro_NewEpisodes_Items' JMMServerVM.Instance.CurrentUser.JMMUserID.Value);  	foreach (JMMServerBinary.Contract_AnimeEpisode contract in epContracts) {  		AnimeEpisodeVM ep = new AnimeEpisodeVM (contract);  		ep.RefreshAnime ();  		if (ep.AniDB_Anime != null) {  			//ep.SetTvDBInfo();  			string imageName = "";  			if (AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart)  				imageName = ep.AnimeSeries.AniDB_Anime.FanartPath;  			else  				imageName = ep.AnimeSeries.AniDB_Anime.DefaultPosterPath;  			NewEpisodeTile tile = new NewEpisodeTile () {  				EpisodeDetails = ep.EpisodeNumberAndName'  				AnimeName = ep.AnimeSeries.SeriesName'  				Picture = imageName'  				AnimeSeries = ep.AnimeSeries'  				TileSize = "Large"'  				Height = 100  			};  			System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  				NewEpisodes.Add (tile);  			});  		}  	}  	OnFinishedProcess (new FinishedProcessEventArgs (DashboardMetroProcessType.NewEpisodes));  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  finally {  }  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshNewEpisodes,The following statement contains a magic number: foreach (JMMServerBinary.Contract_AnimeEpisode contract in epContracts) {  	AnimeEpisodeVM ep = new AnimeEpisodeVM (contract);  	ep.RefreshAnime ();  	if (ep.AniDB_Anime != null) {  		//ep.SetTvDBInfo();  		string imageName = "";  		if (AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart)  			imageName = ep.AnimeSeries.AniDB_Anime.FanartPath;  		else  			imageName = ep.AnimeSeries.AniDB_Anime.DefaultPosterPath;  		NewEpisodeTile tile = new NewEpisodeTile () {  			EpisodeDetails = ep.EpisodeNumberAndName'  			AnimeName = ep.AnimeSeries.SeriesName'  			Picture = imageName'  			AnimeSeries = ep.AnimeSeries'  			TileSize = "Large"'  			Height = 100  		};  		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  			NewEpisodes.Add (tile);  		});  	}  }  
Magic Number,JMMClient,DashboardMetroVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\DashboardMetroVM.cs,RefreshNewEpisodes,The following statement contains a magic number: if (ep.AniDB_Anime != null) {  	//ep.SetTvDBInfo();  	string imageName = "";  	if (AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart)  		imageName = ep.AnimeSeries.AniDB_Anime.FanartPath;  	else  		imageName = ep.AnimeSeries.AniDB_Anime.DefaultPosterPath;  	NewEpisodeTile tile = new NewEpisodeTile () {  		EpisodeDetails = ep.EpisodeNumberAndName'  		AnimeName = ep.AnimeSeries.SeriesName'  		Picture = imageName'  		AnimeSeries = ep.AnimeSeries'  		TileSize = "Large"'  		Height = 100  	};  	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  		NewEpisodes.Add (tile);  	});  }  
Magic Number,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,SearchTextBox_TextChanged,The following statement contains a magic number: searchTimer.Interval = 500;  
Magic Number,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,SeriesSearchFilter,The following statement contains a magic number: if (SearchResultCount > 100)  	return false;  
Magic Number,JMMClient,MainListHelperVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MainListHelperVM.cs,MoveBackUpHeirarchy,The following statement contains a magic number: try {  	// get the second last child wrapper  	MainListWrapper wrapper = BreadCrumbs [BreadCrumbs.Count - 2];  	ShowChildWrappers (wrapper);  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient,AnimeSeriesVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeSeriesVM.cs,SetSeriesNames,The following statement contains a magic number: if (ret.Length > 30)  	ret = ret.Substring (0' 28) + "...";  
Magic Number,JMMClient,AnimeSeriesVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeSeriesVM.cs,SetSeriesNames,The following statement contains a magic number: if (ret.Length > 30)  	ret = ret.Substring (0' 28) + "...";  
Magic Number,JMMClient,AnimeSeriesVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeSeriesVM.cs,SetSeriesNames,The following statement contains a magic number: ret = ret.Substring (0' 28) + "...";  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,SetupImageClient,The following statement contains a magic number: try {  	string url = string.Format (@"http://{0}:{1}/JMMServerImage"' AppSettings.JMMServer_Address' AppSettings.JMMServer_Port);  	BasicHttpBinding binding = new BasicHttpBinding ();  	binding.MessageEncoding = WSMessageEncoding.Mtom;  	binding.MaxReceivedMessageSize = 2147483647;  	binding.ReaderQuotas.MaxArrayLength = 2147483647;  	EndpointAddress endpoint = new EndpointAddress (new Uri (url));  	_imageClient = new JMMImageServer.JMMServerImageClient (binding' endpoint);  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,SetupImageClient,The following statement contains a magic number: try {  	string url = string.Format (@"http://{0}:{1}/JMMServerImage"' AppSettings.JMMServer_Address' AppSettings.JMMServer_Port);  	BasicHttpBinding binding = new BasicHttpBinding ();  	binding.MessageEncoding = WSMessageEncoding.Mtom;  	binding.MaxReceivedMessageSize = 2147483647;  	binding.ReaderQuotas.MaxArrayLength = 2147483647;  	EndpointAddress endpoint = new EndpointAddress (new Uri (url));  	_imageClient = new JMMImageServer.JMMServerImageClient (binding' endpoint);  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,SetupImageClient,The following statement contains a magic number: binding.MaxReceivedMessageSize = 2147483647;  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,SetupImageClient,The following statement contains a magic number: binding.ReaderQuotas.MaxArrayLength = 2147483647;  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: try {  	string url = string.Format (@"http://{0}:{1}/JMMServerBinary"' AppSettings.JMMServer_Address' AppSettings.JMMServer_Port);  	BinaryMessageEncodingBindingElement encoding = new BinaryMessageEncodingBindingElement ();  	encoding.ReaderQuotas.MaxArrayLength = int.MaxValue;  	encoding.ReaderQuotas.MaxBytesPerRead = int.MaxValue;  	encoding.ReaderQuotas.MaxDepth = int.MaxValue;  	encoding.ReaderQuotas.MaxNameTableCharCount = int.MaxValue;  	encoding.ReaderQuotas.MaxStringContentLength = int.MaxValue;  	HttpTransportBindingElement transport = new HttpTransportBindingElement ();  	transport.MaxReceivedMessageSize = int.MaxValue;  	transport.MaxBufferPoolSize = int.MaxValue;  	transport.MaxBufferSize = int.MaxValue;  	transport.MaxReceivedMessageSize = int.MaxValue;  	Binding binding = new CustomBinding (encoding' transport);  	binding.SendTimeout = new TimeSpan (30' 0' 30);  	binding.ReceiveTimeout = new TimeSpan (30' 0' 30);  	binding.OpenTimeout = new TimeSpan (30' 0' 30);  	binding.CloseTimeout = new TimeSpan (30' 0' 30);  	EndpointAddress endpoint = new EndpointAddress (new Uri (url));  	var factory = new ChannelFactory<JMMServerBinary.IJMMServerChannel> (binding' endpoint);  	foreach (OperationDescription op in factory.Endpoint.Contract.Operations) {  		var dataContractBehavior = op.Behaviors.Find<DataContractSerializerOperationBehavior> ();  		if (dataContractBehavior != null) {  			dataContractBehavior.MaxItemsInObjectGraph = int.MaxValue;  		}  	}  	_clientBinaryHTTP = factory.CreateChannel ();  	// try connecting to see if the server is responding  	JMMServerBinary.Contract_ServerStatus status = JMMServerVM.Instance.clientBinaryHTTP.GetServerStatus ();  	ServerOnline = true;  	GetServerSettings ();  	return true;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  	return false;  }  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: try {  	string url = string.Format (@"http://{0}:{1}/JMMServerBinary"' AppSettings.JMMServer_Address' AppSettings.JMMServer_Port);  	BinaryMessageEncodingBindingElement encoding = new BinaryMessageEncodingBindingElement ();  	encoding.ReaderQuotas.MaxArrayLength = int.MaxValue;  	encoding.ReaderQuotas.MaxBytesPerRead = int.MaxValue;  	encoding.ReaderQuotas.MaxDepth = int.MaxValue;  	encoding.ReaderQuotas.MaxNameTableCharCount = int.MaxValue;  	encoding.ReaderQuotas.MaxStringContentLength = int.MaxValue;  	HttpTransportBindingElement transport = new HttpTransportBindingElement ();  	transport.MaxReceivedMessageSize = int.MaxValue;  	transport.MaxBufferPoolSize = int.MaxValue;  	transport.MaxBufferSize = int.MaxValue;  	transport.MaxReceivedMessageSize = int.MaxValue;  	Binding binding = new CustomBinding (encoding' transport);  	binding.SendTimeout = new TimeSpan (30' 0' 30);  	binding.ReceiveTimeout = new TimeSpan (30' 0' 30);  	binding.OpenTimeout = new TimeSpan (30' 0' 30);  	binding.CloseTimeout = new TimeSpan (30' 0' 30);  	EndpointAddress endpoint = new EndpointAddress (new Uri (url));  	var factory = new ChannelFactory<JMMServerBinary.IJMMServerChannel> (binding' endpoint);  	foreach (OperationDescription op in factory.Endpoint.Contract.Operations) {  		var dataContractBehavior = op.Behaviors.Find<DataContractSerializerOperationBehavior> ();  		if (dataContractBehavior != null) {  			dataContractBehavior.MaxItemsInObjectGraph = int.MaxValue;  		}  	}  	_clientBinaryHTTP = factory.CreateChannel ();  	// try connecting to see if the server is responding  	JMMServerBinary.Contract_ServerStatus status = JMMServerVM.Instance.clientBinaryHTTP.GetServerStatus ();  	ServerOnline = true;  	GetServerSettings ();  	return true;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  	return false;  }  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: try {  	string url = string.Format (@"http://{0}:{1}/JMMServerBinary"' AppSettings.JMMServer_Address' AppSettings.JMMServer_Port);  	BinaryMessageEncodingBindingElement encoding = new BinaryMessageEncodingBindingElement ();  	encoding.ReaderQuotas.MaxArrayLength = int.MaxValue;  	encoding.ReaderQuotas.MaxBytesPerRead = int.MaxValue;  	encoding.ReaderQuotas.MaxDepth = int.MaxValue;  	encoding.ReaderQuotas.MaxNameTableCharCount = int.MaxValue;  	encoding.ReaderQuotas.MaxStringContentLength = int.MaxValue;  	HttpTransportBindingElement transport = new HttpTransportBindingElement ();  	transport.MaxReceivedMessageSize = int.MaxValue;  	transport.MaxBufferPoolSize = int.MaxValue;  	transport.MaxBufferSize = int.MaxValue;  	transport.MaxReceivedMessageSize = int.MaxValue;  	Binding binding = new CustomBinding (encoding' transport);  	binding.SendTimeout = new TimeSpan (30' 0' 30);  	binding.ReceiveTimeout = new TimeSpan (30' 0' 30);  	binding.OpenTimeout = new TimeSpan (30' 0' 30);  	binding.CloseTimeout = new TimeSpan (30' 0' 30);  	EndpointAddress endpoint = new EndpointAddress (new Uri (url));  	var factory = new ChannelFactory<JMMServerBinary.IJMMServerChannel> (binding' endpoint);  	foreach (OperationDescription op in factory.Endpoint.Contract.Operations) {  		var dataContractBehavior = op.Behaviors.Find<DataContractSerializerOperationBehavior> ();  		if (dataContractBehavior != null) {  			dataContractBehavior.MaxItemsInObjectGraph = int.MaxValue;  		}  	}  	_clientBinaryHTTP = factory.CreateChannel ();  	// try connecting to see if the server is responding  	JMMServerBinary.Contract_ServerStatus status = JMMServerVM.Instance.clientBinaryHTTP.GetServerStatus ();  	ServerOnline = true;  	GetServerSettings ();  	return true;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  	return false;  }  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: try {  	string url = string.Format (@"http://{0}:{1}/JMMServerBinary"' AppSettings.JMMServer_Address' AppSettings.JMMServer_Port);  	BinaryMessageEncodingBindingElement encoding = new BinaryMessageEncodingBindingElement ();  	encoding.ReaderQuotas.MaxArrayLength = int.MaxValue;  	encoding.ReaderQuotas.MaxBytesPerRead = int.MaxValue;  	encoding.ReaderQuotas.MaxDepth = int.MaxValue;  	encoding.ReaderQuotas.MaxNameTableCharCount = int.MaxValue;  	encoding.ReaderQuotas.MaxStringContentLength = int.MaxValue;  	HttpTransportBindingElement transport = new HttpTransportBindingElement ();  	transport.MaxReceivedMessageSize = int.MaxValue;  	transport.MaxBufferPoolSize = int.MaxValue;  	transport.MaxBufferSize = int.MaxValue;  	transport.MaxReceivedMessageSize = int.MaxValue;  	Binding binding = new CustomBinding (encoding' transport);  	binding.SendTimeout = new TimeSpan (30' 0' 30);  	binding.ReceiveTimeout = new TimeSpan (30' 0' 30);  	binding.OpenTimeout = new TimeSpan (30' 0' 30);  	binding.CloseTimeout = new TimeSpan (30' 0' 30);  	EndpointAddress endpoint = new EndpointAddress (new Uri (url));  	var factory = new ChannelFactory<JMMServerBinary.IJMMServerChannel> (binding' endpoint);  	foreach (OperationDescription op in factory.Endpoint.Contract.Operations) {  		var dataContractBehavior = op.Behaviors.Find<DataContractSerializerOperationBehavior> ();  		if (dataContractBehavior != null) {  			dataContractBehavior.MaxItemsInObjectGraph = int.MaxValue;  		}  	}  	_clientBinaryHTTP = factory.CreateChannel ();  	// try connecting to see if the server is responding  	JMMServerBinary.Contract_ServerStatus status = JMMServerVM.Instance.clientBinaryHTTP.GetServerStatus ();  	ServerOnline = true;  	GetServerSettings ();  	return true;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  	return false;  }  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: try {  	string url = string.Format (@"http://{0}:{1}/JMMServerBinary"' AppSettings.JMMServer_Address' AppSettings.JMMServer_Port);  	BinaryMessageEncodingBindingElement encoding = new BinaryMessageEncodingBindingElement ();  	encoding.ReaderQuotas.MaxArrayLength = int.MaxValue;  	encoding.ReaderQuotas.MaxBytesPerRead = int.MaxValue;  	encoding.ReaderQuotas.MaxDepth = int.MaxValue;  	encoding.ReaderQuotas.MaxNameTableCharCount = int.MaxValue;  	encoding.ReaderQuotas.MaxStringContentLength = int.MaxValue;  	HttpTransportBindingElement transport = new HttpTransportBindingElement ();  	transport.MaxReceivedMessageSize = int.MaxValue;  	transport.MaxBufferPoolSize = int.MaxValue;  	transport.MaxBufferSize = int.MaxValue;  	transport.MaxReceivedMessageSize = int.MaxValue;  	Binding binding = new CustomBinding (encoding' transport);  	binding.SendTimeout = new TimeSpan (30' 0' 30);  	binding.ReceiveTimeout = new TimeSpan (30' 0' 30);  	binding.OpenTimeout = new TimeSpan (30' 0' 30);  	binding.CloseTimeout = new TimeSpan (30' 0' 30);  	EndpointAddress endpoint = new EndpointAddress (new Uri (url));  	var factory = new ChannelFactory<JMMServerBinary.IJMMServerChannel> (binding' endpoint);  	foreach (OperationDescription op in factory.Endpoint.Contract.Operations) {  		var dataContractBehavior = op.Behaviors.Find<DataContractSerializerOperationBehavior> ();  		if (dataContractBehavior != null) {  			dataContractBehavior.MaxItemsInObjectGraph = int.MaxValue;  		}  	}  	_clientBinaryHTTP = factory.CreateChannel ();  	// try connecting to see if the server is responding  	JMMServerBinary.Contract_ServerStatus status = JMMServerVM.Instance.clientBinaryHTTP.GetServerStatus ();  	ServerOnline = true;  	GetServerSettings ();  	return true;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  	return false;  }  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: try {  	string url = string.Format (@"http://{0}:{1}/JMMServerBinary"' AppSettings.JMMServer_Address' AppSettings.JMMServer_Port);  	BinaryMessageEncodingBindingElement encoding = new BinaryMessageEncodingBindingElement ();  	encoding.ReaderQuotas.MaxArrayLength = int.MaxValue;  	encoding.ReaderQuotas.MaxBytesPerRead = int.MaxValue;  	encoding.ReaderQuotas.MaxDepth = int.MaxValue;  	encoding.ReaderQuotas.MaxNameTableCharCount = int.MaxValue;  	encoding.ReaderQuotas.MaxStringContentLength = int.MaxValue;  	HttpTransportBindingElement transport = new HttpTransportBindingElement ();  	transport.MaxReceivedMessageSize = int.MaxValue;  	transport.MaxBufferPoolSize = int.MaxValue;  	transport.MaxBufferSize = int.MaxValue;  	transport.MaxReceivedMessageSize = int.MaxValue;  	Binding binding = new CustomBinding (encoding' transport);  	binding.SendTimeout = new TimeSpan (30' 0' 30);  	binding.ReceiveTimeout = new TimeSpan (30' 0' 30);  	binding.OpenTimeout = new TimeSpan (30' 0' 30);  	binding.CloseTimeout = new TimeSpan (30' 0' 30);  	EndpointAddress endpoint = new EndpointAddress (new Uri (url));  	var factory = new ChannelFactory<JMMServerBinary.IJMMServerChannel> (binding' endpoint);  	foreach (OperationDescription op in factory.Endpoint.Contract.Operations) {  		var dataContractBehavior = op.Behaviors.Find<DataContractSerializerOperationBehavior> ();  		if (dataContractBehavior != null) {  			dataContractBehavior.MaxItemsInObjectGraph = int.MaxValue;  		}  	}  	_clientBinaryHTTP = factory.CreateChannel ();  	// try connecting to see if the server is responding  	JMMServerBinary.Contract_ServerStatus status = JMMServerVM.Instance.clientBinaryHTTP.GetServerStatus ();  	ServerOnline = true;  	GetServerSettings ();  	return true;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  	return false;  }  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: try {  	string url = string.Format (@"http://{0}:{1}/JMMServerBinary"' AppSettings.JMMServer_Address' AppSettings.JMMServer_Port);  	BinaryMessageEncodingBindingElement encoding = new BinaryMessageEncodingBindingElement ();  	encoding.ReaderQuotas.MaxArrayLength = int.MaxValue;  	encoding.ReaderQuotas.MaxBytesPerRead = int.MaxValue;  	encoding.ReaderQuotas.MaxDepth = int.MaxValue;  	encoding.ReaderQuotas.MaxNameTableCharCount = int.MaxValue;  	encoding.ReaderQuotas.MaxStringContentLength = int.MaxValue;  	HttpTransportBindingElement transport = new HttpTransportBindingElement ();  	transport.MaxReceivedMessageSize = int.MaxValue;  	transport.MaxBufferPoolSize = int.MaxValue;  	transport.MaxBufferSize = int.MaxValue;  	transport.MaxReceivedMessageSize = int.MaxValue;  	Binding binding = new CustomBinding (encoding' transport);  	binding.SendTimeout = new TimeSpan (30' 0' 30);  	binding.ReceiveTimeout = new TimeSpan (30' 0' 30);  	binding.OpenTimeout = new TimeSpan (30' 0' 30);  	binding.CloseTimeout = new TimeSpan (30' 0' 30);  	EndpointAddress endpoint = new EndpointAddress (new Uri (url));  	var factory = new ChannelFactory<JMMServerBinary.IJMMServerChannel> (binding' endpoint);  	foreach (OperationDescription op in factory.Endpoint.Contract.Operations) {  		var dataContractBehavior = op.Behaviors.Find<DataContractSerializerOperationBehavior> ();  		if (dataContractBehavior != null) {  			dataContractBehavior.MaxItemsInObjectGraph = int.MaxValue;  		}  	}  	_clientBinaryHTTP = factory.CreateChannel ();  	// try connecting to see if the server is responding  	JMMServerBinary.Contract_ServerStatus status = JMMServerVM.Instance.clientBinaryHTTP.GetServerStatus ();  	ServerOnline = true;  	GetServerSettings ();  	return true;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  	return false;  }  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: try {  	string url = string.Format (@"http://{0}:{1}/JMMServerBinary"' AppSettings.JMMServer_Address' AppSettings.JMMServer_Port);  	BinaryMessageEncodingBindingElement encoding = new BinaryMessageEncodingBindingElement ();  	encoding.ReaderQuotas.MaxArrayLength = int.MaxValue;  	encoding.ReaderQuotas.MaxBytesPerRead = int.MaxValue;  	encoding.ReaderQuotas.MaxDepth = int.MaxValue;  	encoding.ReaderQuotas.MaxNameTableCharCount = int.MaxValue;  	encoding.ReaderQuotas.MaxStringContentLength = int.MaxValue;  	HttpTransportBindingElement transport = new HttpTransportBindingElement ();  	transport.MaxReceivedMessageSize = int.MaxValue;  	transport.MaxBufferPoolSize = int.MaxValue;  	transport.MaxBufferSize = int.MaxValue;  	transport.MaxReceivedMessageSize = int.MaxValue;  	Binding binding = new CustomBinding (encoding' transport);  	binding.SendTimeout = new TimeSpan (30' 0' 30);  	binding.ReceiveTimeout = new TimeSpan (30' 0' 30);  	binding.OpenTimeout = new TimeSpan (30' 0' 30);  	binding.CloseTimeout = new TimeSpan (30' 0' 30);  	EndpointAddress endpoint = new EndpointAddress (new Uri (url));  	var factory = new ChannelFactory<JMMServerBinary.IJMMServerChannel> (binding' endpoint);  	foreach (OperationDescription op in factory.Endpoint.Contract.Operations) {  		var dataContractBehavior = op.Behaviors.Find<DataContractSerializerOperationBehavior> ();  		if (dataContractBehavior != null) {  			dataContractBehavior.MaxItemsInObjectGraph = int.MaxValue;  		}  	}  	_clientBinaryHTTP = factory.CreateChannel ();  	// try connecting to see if the server is responding  	JMMServerBinary.Contract_ServerStatus status = JMMServerVM.Instance.clientBinaryHTTP.GetServerStatus ();  	ServerOnline = true;  	GetServerSettings ();  	return true;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  	return false;  }  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: binding.SendTimeout = new TimeSpan (30' 0' 30);  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: binding.SendTimeout = new TimeSpan (30' 0' 30);  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: binding.ReceiveTimeout = new TimeSpan (30' 0' 30);  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: binding.ReceiveTimeout = new TimeSpan (30' 0' 30);  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: binding.OpenTimeout = new TimeSpan (30' 0' 30);  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: binding.OpenTimeout = new TimeSpan (30' 0' 30);  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: binding.CloseTimeout = new TimeSpan (30' 0' 30);  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,SetupBinaryClient,The following statement contains a magic number: binding.CloseTimeout = new TimeSpan (30' 0' 30);  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,SaveServerSettingsAsync,The following statement contains a magic number: saveTimer.Interval = 1 * 1000;  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,Init,The following statement contains a magic number: serverStatusTimer.Interval = 4 * 1000;  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,Init,The following statement contains a magic number: serverStatusTimer.Interval = 4 * 1000;  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,serverStatusTimer_Elapsed,The following statement contains a magic number: try {  	if (!ServerOnline) {  		serverStatusTimer.Start ();  		return;  	}  	TimeSpan ts = DateTime.Now - lastVersionCheck;  	lastVersionCheck = DateTime.Now;  	JMMServerBinary.Contract_ServerStatus status = JMMServerVM.Instance.clientBinaryHTTP.GetServerStatus ();  	JMMServerBinary.Contract_AppVersions appv = null;  	if (ts.TotalMinutes > 180)  		appv = JMMServerVM.Instance.clientBinaryHTTP.GetAppVersions ();  	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  		HasherQueueCount = status.HashQueueCount;  		GeneralQueueCount = status.GeneralQueueCount;  		ServerImageQueueCount = status.ImagesQueueCount;  		HasherQueueState = status.HashQueueState;  		GeneralQueueState = status.GeneralQueueState;  		ServerImageQueueState = status.ImagesQueueState;  		IsBanned = status.IsBanned;  		BanReason = status.BanReason;  		BanOrigin = status.BanOrigin;  		HasherQueuePaused = HasherQueueState.ToLower ().Contains ("pause");  		HasherQueueRunning = !HasherQueueState.ToLower ().Contains ("pause");  		GeneralQueuePaused = GeneralQueueState.ToLower ().Contains ("pause");  		GeneralQueueRunning = !GeneralQueueState.ToLower ().Contains ("pause");  		ServerImageQueuePaused = ServerImageQueueState.ToLower ().Contains ("pause");  		ServerImageQueueRunning = !ServerImageQueueState.ToLower ().Contains ("pause");  		if (appv != null) {  			string curVersion = Utils.GetApplicationVersion (System.Reflection.Assembly.GetExecutingAssembly ());  			string[] latestNumbers = appv.JMMDesktopVersion.Split ('.');  			string[] curNumbers = curVersion.Split ('.');  			string latestMajor = string.Format ("{0}.{1}"' latestNumbers [0]' latestNumbers [1]);  			string curMajor = string.Format ("{0}.{1}"' curNumbers [0]' curNumbers [1]);  			decimal lmajor = decimal.Parse (latestMajor);  			decimal cmajor = decimal.Parse (curMajor);  			NewVersionAvailable = false;  			if (lmajor > cmajor) {  				NewVersionAvailable = true;  				NewVersionDownloadLink = appv.JMMDesktopDownload;  				NewVersionNumber = appv.JMMDesktopVersion;  			}  			else if (lmajor == cmajor) {  				if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  					NewVersionAvailable = true;  					NewVersionDownloadLink = appv.JMMDesktopDownload;  					NewVersionNumber = appv.JMMDesktopVersion;  				}  			}  		}  	});  }  catch {  }  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,serverStatusTimer_Elapsed,The following statement contains a magic number: try {  	if (!ServerOnline) {  		serverStatusTimer.Start ();  		return;  	}  	TimeSpan ts = DateTime.Now - lastVersionCheck;  	lastVersionCheck = DateTime.Now;  	JMMServerBinary.Contract_ServerStatus status = JMMServerVM.Instance.clientBinaryHTTP.GetServerStatus ();  	JMMServerBinary.Contract_AppVersions appv = null;  	if (ts.TotalMinutes > 180)  		appv = JMMServerVM.Instance.clientBinaryHTTP.GetAppVersions ();  	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  		HasherQueueCount = status.HashQueueCount;  		GeneralQueueCount = status.GeneralQueueCount;  		ServerImageQueueCount = status.ImagesQueueCount;  		HasherQueueState = status.HashQueueState;  		GeneralQueueState = status.GeneralQueueState;  		ServerImageQueueState = status.ImagesQueueState;  		IsBanned = status.IsBanned;  		BanReason = status.BanReason;  		BanOrigin = status.BanOrigin;  		HasherQueuePaused = HasherQueueState.ToLower ().Contains ("pause");  		HasherQueueRunning = !HasherQueueState.ToLower ().Contains ("pause");  		GeneralQueuePaused = GeneralQueueState.ToLower ().Contains ("pause");  		GeneralQueueRunning = !GeneralQueueState.ToLower ().Contains ("pause");  		ServerImageQueuePaused = ServerImageQueueState.ToLower ().Contains ("pause");  		ServerImageQueueRunning = !ServerImageQueueState.ToLower ().Contains ("pause");  		if (appv != null) {  			string curVersion = Utils.GetApplicationVersion (System.Reflection.Assembly.GetExecutingAssembly ());  			string[] latestNumbers = appv.JMMDesktopVersion.Split ('.');  			string[] curNumbers = curVersion.Split ('.');  			string latestMajor = string.Format ("{0}.{1}"' latestNumbers [0]' latestNumbers [1]);  			string curMajor = string.Format ("{0}.{1}"' curNumbers [0]' curNumbers [1]);  			decimal lmajor = decimal.Parse (latestMajor);  			decimal cmajor = decimal.Parse (curMajor);  			NewVersionAvailable = false;  			if (lmajor > cmajor) {  				NewVersionAvailable = true;  				NewVersionDownloadLink = appv.JMMDesktopDownload;  				NewVersionNumber = appv.JMMDesktopVersion;  			}  			else if (lmajor == cmajor) {  				if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  					NewVersionAvailable = true;  					NewVersionDownloadLink = appv.JMMDesktopDownload;  					NewVersionNumber = appv.JMMDesktopVersion;  				}  			}  		}  	});  }  catch {  }  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,serverStatusTimer_Elapsed,The following statement contains a magic number: try {  	if (!ServerOnline) {  		serverStatusTimer.Start ();  		return;  	}  	TimeSpan ts = DateTime.Now - lastVersionCheck;  	lastVersionCheck = DateTime.Now;  	JMMServerBinary.Contract_ServerStatus status = JMMServerVM.Instance.clientBinaryHTTP.GetServerStatus ();  	JMMServerBinary.Contract_AppVersions appv = null;  	if (ts.TotalMinutes > 180)  		appv = JMMServerVM.Instance.clientBinaryHTTP.GetAppVersions ();  	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  		HasherQueueCount = status.HashQueueCount;  		GeneralQueueCount = status.GeneralQueueCount;  		ServerImageQueueCount = status.ImagesQueueCount;  		HasherQueueState = status.HashQueueState;  		GeneralQueueState = status.GeneralQueueState;  		ServerImageQueueState = status.ImagesQueueState;  		IsBanned = status.IsBanned;  		BanReason = status.BanReason;  		BanOrigin = status.BanOrigin;  		HasherQueuePaused = HasherQueueState.ToLower ().Contains ("pause");  		HasherQueueRunning = !HasherQueueState.ToLower ().Contains ("pause");  		GeneralQueuePaused = GeneralQueueState.ToLower ().Contains ("pause");  		GeneralQueueRunning = !GeneralQueueState.ToLower ().Contains ("pause");  		ServerImageQueuePaused = ServerImageQueueState.ToLower ().Contains ("pause");  		ServerImageQueueRunning = !ServerImageQueueState.ToLower ().Contains ("pause");  		if (appv != null) {  			string curVersion = Utils.GetApplicationVersion (System.Reflection.Assembly.GetExecutingAssembly ());  			string[] latestNumbers = appv.JMMDesktopVersion.Split ('.');  			string[] curNumbers = curVersion.Split ('.');  			string latestMajor = string.Format ("{0}.{1}"' latestNumbers [0]' latestNumbers [1]);  			string curMajor = string.Format ("{0}.{1}"' curNumbers [0]' curNumbers [1]);  			decimal lmajor = decimal.Parse (latestMajor);  			decimal cmajor = decimal.Parse (curMajor);  			NewVersionAvailable = false;  			if (lmajor > cmajor) {  				NewVersionAvailable = true;  				NewVersionDownloadLink = appv.JMMDesktopDownload;  				NewVersionNumber = appv.JMMDesktopVersion;  			}  			else if (lmajor == cmajor) {  				if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  					NewVersionAvailable = true;  					NewVersionDownloadLink = appv.JMMDesktopDownload;  					NewVersionNumber = appv.JMMDesktopVersion;  				}  			}  		}  	});  }  catch {  }  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,serverStatusTimer_Elapsed,The following statement contains a magic number: if (ts.TotalMinutes > 180)  	appv = JMMServerVM.Instance.clientBinaryHTTP.GetAppVersions ();  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,serverStatusTimer_Elapsed,The following statement contains a magic number: System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  	HasherQueueCount = status.HashQueueCount;  	GeneralQueueCount = status.GeneralQueueCount;  	ServerImageQueueCount = status.ImagesQueueCount;  	HasherQueueState = status.HashQueueState;  	GeneralQueueState = status.GeneralQueueState;  	ServerImageQueueState = status.ImagesQueueState;  	IsBanned = status.IsBanned;  	BanReason = status.BanReason;  	BanOrigin = status.BanOrigin;  	HasherQueuePaused = HasherQueueState.ToLower ().Contains ("pause");  	HasherQueueRunning = !HasherQueueState.ToLower ().Contains ("pause");  	GeneralQueuePaused = GeneralQueueState.ToLower ().Contains ("pause");  	GeneralQueueRunning = !GeneralQueueState.ToLower ().Contains ("pause");  	ServerImageQueuePaused = ServerImageQueueState.ToLower ().Contains ("pause");  	ServerImageQueueRunning = !ServerImageQueueState.ToLower ().Contains ("pause");  	if (appv != null) {  		string curVersion = Utils.GetApplicationVersion (System.Reflection.Assembly.GetExecutingAssembly ());  		string[] latestNumbers = appv.JMMDesktopVersion.Split ('.');  		string[] curNumbers = curVersion.Split ('.');  		string latestMajor = string.Format ("{0}.{1}"' latestNumbers [0]' latestNumbers [1]);  		string curMajor = string.Format ("{0}.{1}"' curNumbers [0]' curNumbers [1]);  		decimal lmajor = decimal.Parse (latestMajor);  		decimal cmajor = decimal.Parse (curMajor);  		NewVersionAvailable = false;  		if (lmajor > cmajor) {  			NewVersionAvailable = true;  			NewVersionDownloadLink = appv.JMMDesktopDownload;  			NewVersionNumber = appv.JMMDesktopVersion;  		}  		else if (lmajor == cmajor) {  			if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  				NewVersionAvailable = true;  				NewVersionDownloadLink = appv.JMMDesktopDownload;  				NewVersionNumber = appv.JMMDesktopVersion;  			}  		}  	}  });  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,serverStatusTimer_Elapsed,The following statement contains a magic number: System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  	HasherQueueCount = status.HashQueueCount;  	GeneralQueueCount = status.GeneralQueueCount;  	ServerImageQueueCount = status.ImagesQueueCount;  	HasherQueueState = status.HashQueueState;  	GeneralQueueState = status.GeneralQueueState;  	ServerImageQueueState = status.ImagesQueueState;  	IsBanned = status.IsBanned;  	BanReason = status.BanReason;  	BanOrigin = status.BanOrigin;  	HasherQueuePaused = HasherQueueState.ToLower ().Contains ("pause");  	HasherQueueRunning = !HasherQueueState.ToLower ().Contains ("pause");  	GeneralQueuePaused = GeneralQueueState.ToLower ().Contains ("pause");  	GeneralQueueRunning = !GeneralQueueState.ToLower ().Contains ("pause");  	ServerImageQueuePaused = ServerImageQueueState.ToLower ().Contains ("pause");  	ServerImageQueueRunning = !ServerImageQueueState.ToLower ().Contains ("pause");  	if (appv != null) {  		string curVersion = Utils.GetApplicationVersion (System.Reflection.Assembly.GetExecutingAssembly ());  		string[] latestNumbers = appv.JMMDesktopVersion.Split ('.');  		string[] curNumbers = curVersion.Split ('.');  		string latestMajor = string.Format ("{0}.{1}"' latestNumbers [0]' latestNumbers [1]);  		string curMajor = string.Format ("{0}.{1}"' curNumbers [0]' curNumbers [1]);  		decimal lmajor = decimal.Parse (latestMajor);  		decimal cmajor = decimal.Parse (curMajor);  		NewVersionAvailable = false;  		if (lmajor > cmajor) {  			NewVersionAvailable = true;  			NewVersionDownloadLink = appv.JMMDesktopDownload;  			NewVersionNumber = appv.JMMDesktopVersion;  		}  		else if (lmajor == cmajor) {  			if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  				NewVersionAvailable = true;  				NewVersionDownloadLink = appv.JMMDesktopDownload;  				NewVersionNumber = appv.JMMDesktopVersion;  			}  		}  	}  });  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,serverStatusTimer_Elapsed,The following statement contains a magic number: if (appv != null) {  	string curVersion = Utils.GetApplicationVersion (System.Reflection.Assembly.GetExecutingAssembly ());  	string[] latestNumbers = appv.JMMDesktopVersion.Split ('.');  	string[] curNumbers = curVersion.Split ('.');  	string latestMajor = string.Format ("{0}.{1}"' latestNumbers [0]' latestNumbers [1]);  	string curMajor = string.Format ("{0}.{1}"' curNumbers [0]' curNumbers [1]);  	decimal lmajor = decimal.Parse (latestMajor);  	decimal cmajor = decimal.Parse (curMajor);  	NewVersionAvailable = false;  	if (lmajor > cmajor) {  		NewVersionAvailable = true;  		NewVersionDownloadLink = appv.JMMDesktopDownload;  		NewVersionNumber = appv.JMMDesktopVersion;  	}  	else if (lmajor == cmajor) {  		if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  			NewVersionAvailable = true;  			NewVersionDownloadLink = appv.JMMDesktopDownload;  			NewVersionNumber = appv.JMMDesktopVersion;  		}  	}  }  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,serverStatusTimer_Elapsed,The following statement contains a magic number: if (appv != null) {  	string curVersion = Utils.GetApplicationVersion (System.Reflection.Assembly.GetExecutingAssembly ());  	string[] latestNumbers = appv.JMMDesktopVersion.Split ('.');  	string[] curNumbers = curVersion.Split ('.');  	string latestMajor = string.Format ("{0}.{1}"' latestNumbers [0]' latestNumbers [1]);  	string curMajor = string.Format ("{0}.{1}"' curNumbers [0]' curNumbers [1]);  	decimal lmajor = decimal.Parse (latestMajor);  	decimal cmajor = decimal.Parse (curMajor);  	NewVersionAvailable = false;  	if (lmajor > cmajor) {  		NewVersionAvailable = true;  		NewVersionDownloadLink = appv.JMMDesktopDownload;  		NewVersionNumber = appv.JMMDesktopVersion;  	}  	else if (lmajor == cmajor) {  		if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  			NewVersionAvailable = true;  			NewVersionDownloadLink = appv.JMMDesktopDownload;  			NewVersionNumber = appv.JMMDesktopVersion;  		}  	}  }  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,serverStatusTimer_Elapsed,The following statement contains a magic number: if (lmajor > cmajor) {  	NewVersionAvailable = true;  	NewVersionDownloadLink = appv.JMMDesktopDownload;  	NewVersionNumber = appv.JMMDesktopVersion;  }  else if (lmajor == cmajor) {  	if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  		NewVersionAvailable = true;  		NewVersionDownloadLink = appv.JMMDesktopDownload;  		NewVersionNumber = appv.JMMDesktopVersion;  	}  }  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,serverStatusTimer_Elapsed,The following statement contains a magic number: if (lmajor > cmajor) {  	NewVersionAvailable = true;  	NewVersionDownloadLink = appv.JMMDesktopDownload;  	NewVersionNumber = appv.JMMDesktopVersion;  }  else if (lmajor == cmajor) {  	if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  		NewVersionAvailable = true;  		NewVersionDownloadLink = appv.JMMDesktopDownload;  		NewVersionNumber = appv.JMMDesktopVersion;  	}  }  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,serverStatusTimer_Elapsed,The following statement contains a magic number: if (lmajor == cmajor) {  	if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  		NewVersionAvailable = true;  		NewVersionDownloadLink = appv.JMMDesktopDownload;  		NewVersionNumber = appv.JMMDesktopVersion;  	}  }  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,serverStatusTimer_Elapsed,The following statement contains a magic number: if (lmajor == cmajor) {  	if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  		NewVersionAvailable = true;  		NewVersionDownloadLink = appv.JMMDesktopDownload;  		NewVersionNumber = appv.JMMDesktopVersion;  	}  }  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,serverStatusTimer_Elapsed,The following statement contains a magic number: if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  	NewVersionAvailable = true;  	NewVersionDownloadLink = appv.JMMDesktopDownload;  	NewVersionNumber = appv.JMMDesktopVersion;  }  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,serverStatusTimer_Elapsed,The following statement contains a magic number: if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  	NewVersionAvailable = true;  	NewVersionDownloadLink = appv.JMMDesktopDownload;  	NewVersionNumber = appv.JMMDesktopVersion;  }  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,RemoveNamingLanguage,The following statement contains a magic number: foreach (string lan in lans) {  	if (string.IsNullOrEmpty (lan))  		continue;  	if (lan.Trim ().Length < 2)  		continue;  	if (lan.Trim ().ToUpper () == oldLan.Trim ().ToUpper ())  		continue;  	if (!string.IsNullOrEmpty (LanguagePreference))  		LanguagePreference += "'";  	LanguagePreference += lan;  }  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,RemoveNamingLanguage,The following statement contains a magic number: if (lan.Trim ().Length < 2)  	continue;  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,MoveUpNamingLanguage,The following statement contains a magic number: foreach (string lan in lans) {  	if (string.IsNullOrEmpty (lan))  		continue;  	if (lan.Trim ().Length < 2)  		continue;  	languages.Add (lan);  }  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,MoveUpNamingLanguage,The following statement contains a magic number: if (lan.Trim ().Length < 2)  	continue;  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,MoveDownNamingLanguage,The following statement contains a magic number: foreach (string lan in lans) {  	if (string.IsNullOrEmpty (lan))  		continue;  	if (lan.Trim ().Length < 2)  		continue;  	languages.Add (lan);  }  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,MoveDownNamingLanguage,The following statement contains a magic number: if (lan.Trim ().Length < 2)  	continue;  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,RefreshNamingLanguages,The following statement contains a magic number: try {  	string[] lans = LanguagePreference.Split (''');  	foreach (string lan in lans) {  		if (string.IsNullOrEmpty (lan))  			continue;  		if (lan.Trim ().Length < 2)  			continue;  		NamingLanguage selLan = new NamingLanguage (lan);  		SelectedLanguages.Add (selLan);  	}  	foreach (NamingLanguage nlan in Languages.AllNamingLanguages) {  		bool inSelected = false;  		foreach (NamingLanguage selLan in SelectedLanguages) {  			if (nlan.Language.Trim ().ToUpper () == selLan.Language.Trim ().ToUpper ()) {  				inSelected = true;  				break;  			}  		}  		if (!inSelected)  			UnselectedLanguages.Add (nlan);  	}  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,RefreshNamingLanguages,The following statement contains a magic number: foreach (string lan in lans) {  	if (string.IsNullOrEmpty (lan))  		continue;  	if (lan.Trim ().Length < 2)  		continue;  	NamingLanguage selLan = new NamingLanguage (lan);  	SelectedLanguages.Add (selLan);  }  
Magic Number,JMMClient,JMMServerVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\JMMServerVM.cs,RefreshNamingLanguages,The following statement contains a magic number: if (lan.Trim ().Length < 2)  	continue;  
Magic Number,JMMClient,UserSettingsVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\UserSettingsVM.cs,SetDashMetro_Image_Width,The following statement contains a magic number: if (AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart) {  	DashMetro_Image_Width = (int)((double)DashMetro_Image_Height * 1.777777777777778);  	DashMetro_Image_WidthTrakt = (int)((double)DashMetro_Image_Height * 1.777777777777778);  }  else {  	DashMetro_Image_Width = (int)((double)DashMetro_Image_Height * 0.68);  	DashMetro_Image_WidthTrakt = (int)((double)DashMetro_Image_Height * 1.777777777777778);  }  
Magic Number,JMMClient,UserSettingsVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\UserSettingsVM.cs,SetDashMetro_Image_Width,The following statement contains a magic number: if (AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart) {  	DashMetro_Image_Width = (int)((double)DashMetro_Image_Height * 1.777777777777778);  	DashMetro_Image_WidthTrakt = (int)((double)DashMetro_Image_Height * 1.777777777777778);  }  else {  	DashMetro_Image_Width = (int)((double)DashMetro_Image_Height * 0.68);  	DashMetro_Image_WidthTrakt = (int)((double)DashMetro_Image_Height * 1.777777777777778);  }  
Magic Number,JMMClient,UserSettingsVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\UserSettingsVM.cs,SetDashMetro_Image_Width,The following statement contains a magic number: if (AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart) {  	DashMetro_Image_Width = (int)((double)DashMetro_Image_Height * 1.777777777777778);  	DashMetro_Image_WidthTrakt = (int)((double)DashMetro_Image_Height * 1.777777777777778);  }  else {  	DashMetro_Image_Width = (int)((double)DashMetro_Image_Height * 0.68);  	DashMetro_Image_WidthTrakt = (int)((double)DashMetro_Image_Height * 1.777777777777778);  }  
Magic Number,JMMClient,UserSettingsVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\UserSettingsVM.cs,SetDashMetro_Image_Width,The following statement contains a magic number: if (AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart) {  	DashMetro_Image_Width = (int)((double)DashMetro_Image_Height * 1.777777777777778);  	DashMetro_Image_WidthTrakt = (int)((double)DashMetro_Image_Height * 1.777777777777778);  }  else {  	DashMetro_Image_Width = (int)((double)DashMetro_Image_Height * 0.68);  	DashMetro_Image_WidthTrakt = (int)((double)DashMetro_Image_Height * 1.777777777777778);  }  
Magic Number,JMMClient,UserSettingsVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\UserSettingsVM.cs,SetDashMetro_Image_Width,The following statement contains a magic number: DashMetro_Image_Width = (int)((double)DashMetro_Image_Height * 1.777777777777778);  
Magic Number,JMMClient,UserSettingsVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\UserSettingsVM.cs,SetDashMetro_Image_Width,The following statement contains a magic number: DashMetro_Image_WidthTrakt = (int)((double)DashMetro_Image_Height * 1.777777777777778);  
Magic Number,JMMClient,UserSettingsVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\UserSettingsVM.cs,SetDashMetro_Image_Width,The following statement contains a magic number: DashMetro_Image_Width = (int)((double)DashMetro_Image_Height * 0.68);  
Magic Number,JMMClient,UserSettingsVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\UserSettingsVM.cs,SetDashMetro_Image_Width,The following statement contains a magic number: DashMetro_Image_WidthTrakt = (int)((double)DashMetro_Image_Height * 1.777777777777778);  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1900)  	score += 100;  else if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: score += 100;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 50;  else if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: score += 50;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1100)  	score += 25;  else if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: score += 25;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 800)  	score += 10;  else if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: score += 10;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 700)  	score += 8;  else if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: score += 8;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 500)  	score += 7;  else if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: score += 7;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 400)  	score += 6;  else if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: score += 6;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: if (vidWidth > 1300)  	score += 5;  else  	score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: score += 5;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetOverallVideoSourceRanking,The following statement contains a magic number: score += 2;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetVideoSourceRanking,The following statement contains a magic number: if (AniDB_File_Source.ToUpper ().Contains ("BLU"))  	return 100;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetVideoSourceRanking,The following statement contains a magic number: return 100;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetVideoSourceRanking,The following statement contains a magic number: if (AniDB_File_Source.ToUpper ().Contains ("DVD"))  	return 75;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetVideoSourceRanking,The following statement contains a magic number: return 75;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetVideoSourceRanking,The following statement contains a magic number: if (AniDB_File_Source.ToUpper ().Contains ("HDTV"))  	return 50;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetVideoSourceRanking,The following statement contains a magic number: return 50;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetVideoSourceRanking,The following statement contains a magic number: if (AniDB_File_Source.ToUpper ().Contains ("DTV"))  	return 40;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetVideoSourceRanking,The following statement contains a magic number: return 40;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetVideoSourceRanking,The following statement contains a magic number: if (AniDB_File_Source.ToUpper ().Trim () == "TV")  	return 30;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetVideoSourceRanking,The following statement contains a magic number: return 30;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetVideoSourceRanking,The following statement contains a magic number: if (AniDB_File_Source.ToUpper ().Contains ("VHS"))  	return 20;  
Magic Number,JMMClient,VideoDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\VideoDetailedVM.cs,GetVideoSourceRanking,The following statement contains a magic number: return 20;  
Magic Number,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,EvaluateGroupFilter,The following statement contains a magic number: foreach (GroupFilterConditionVM gfc in FilterConditions) {  	switch (gfc.ConditionTypeEnum) {  	case GroupFilterConditionType.Favourite:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.IsFave == 0)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.IsFave == 1)  			return false;  		break;  	case GroupFilterConditionType.MissingEpisodes:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.HasMissingEpisodesAny == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.HasMissingEpisodesAny == true)  			return false;  		break;  	case GroupFilterConditionType.MissingEpisodesCollecting:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.HasMissingEpisodesGroups == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.HasMissingEpisodesGroups == true)  			return false;  		break;  	case GroupFilterConditionType.HasWatchedEpisodes:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.AnyFilesWatched == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.AnyFilesWatched == true)  			return false;  		break;  	case GroupFilterConditionType.HasUnwatchedEpisodes:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.HasUnwatchedFiles == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.HasUnwatchedFiles == true)  			return false;  		break;  	case GroupFilterConditionType.AssignedTvDBInfo:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_HasTvDBLink == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_HasTvDBLink == true)  			return false;  		break;  	case GroupFilterConditionType.AssignedMALInfo:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_HasMALLink == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_HasMALLink == true)  			return false;  		break;  	case GroupFilterConditionType.AssignedMovieDBInfo:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_HasMovieDBLink == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_HasMovieDBLink == true)  			return false;  		break;  	case GroupFilterConditionType.AssignedTvDBOrMovieDBInfo:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_HasMovieDBOrTvDBLink == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_HasMovieDBOrTvDBLink == true)  			return false;  		break;  	case GroupFilterConditionType.CompletedSeries:  		/*if (grp.IsComplete != grp.Stat_IsComplete) 						{ 							Debug.Print("IsComplete DIFF  {0}"' grp.GroupName); 						}*/if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_IsComplete == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_IsComplete == true)  			return false;  		break;  	case GroupFilterConditionType.FinishedAiring:  		if (grp.GroupName.Contains ("Bleach"))  			Debug.Write ("Test");  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_HasFinishedAiring == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_IsCurrentlyAiring == false)  			return false;  		break;  	case GroupFilterConditionType.UserVoted:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.UserHasVoted == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.UserHasVoted == true)  			return false;  		break;  	case GroupFilterConditionType.UserVotedAny:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.UserHasVotedAny == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.UserHasVotedAny == true)  			return false;  		break;  	case GroupFilterConditionType.AirDate:  		DateTime filterDate;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  			int days = 0;  			int.TryParse (gfc.ConditionParameter' out days);  			filterDate = DateTime.Today.AddDays (0 - days);  		}  		else  			filterDate = GroupFilterHelper.GetDateFromString (gfc.ConditionParameter);  		if (grp.AnimeGroupID.Value == 250)  			Console.Write ("");  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  			if (!grp.Stat_AirDate_Min.HasValue || !grp.Stat_AirDate_Max.HasValue)  				return false;  			if (grp.Stat_AirDate_Max.Value < filterDate)  				return false;  		}  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  			if (!grp.Stat_AirDate_Min.HasValue || !grp.Stat_AirDate_Max.HasValue)  				return false;  			if (grp.Stat_AirDate_Min.Value > filterDate)  				return false;  		}  		break;  	case GroupFilterConditionType.SeriesCreatedDate:  		DateTime filterDateSeries;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  			int days = 0;  			int.TryParse (gfc.ConditionParameter' out days);  			filterDateSeries = DateTime.Today.AddDays (0 - days);  		}  		else  			filterDateSeries = GroupFilterHelper.GetDateFromString (gfc.ConditionParameter);  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  			if (!grp.Stat_SeriesCreatedDate.HasValue)  				return false;  			if (grp.Stat_SeriesCreatedDate.Value < filterDateSeries)  				return false;  		}  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  			if (!grp.Stat_SeriesCreatedDate.HasValue)  				return false;  			if (grp.Stat_SeriesCreatedDate.Value > filterDateSeries)  				return false;  		}  		break;  	case GroupFilterConditionType.EpisodeWatchedDate:  		DateTime filterDateEpsiodeWatched;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  			int days = 0;  			int.TryParse (gfc.ConditionParameter' out days);  			filterDateEpsiodeWatched = DateTime.Today.AddDays (0 - days);  		}  		else  			filterDateEpsiodeWatched = GroupFilterHelper.GetDateFromString (gfc.ConditionParameter);  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  			if (!grp.WatchedDate.HasValue)  				return false;  			if (grp.WatchedDate.Value < filterDateEpsiodeWatched)  				return false;  		}  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  			if (!grp.WatchedDate.HasValue)  				return false;  			if (grp.WatchedDate.Value > filterDateEpsiodeWatched)  				return false;  		}  		break;  	case GroupFilterConditionType.EpisodeAddedDate:  		DateTime filterDateEpisodeAdded;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  			int days = 0;  			int.TryParse (gfc.ConditionParameter' out days);  			filterDateEpisodeAdded = DateTime.Today.AddDays (0 - days);  		}  		else  			filterDateEpisodeAdded = GroupFilterHelper.GetDateFromString (gfc.ConditionParameter);  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  			if (!grp.EpisodeAddedDate.HasValue)  				return false;  			if (grp.EpisodeAddedDate.Value < filterDateEpisodeAdded)  				return false;  		}  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  			if (!grp.EpisodeAddedDate.HasValue)  				return false;  			if (grp.EpisodeAddedDate.Value > filterDateEpisodeAdded)  				return false;  		}  		break;  	case GroupFilterConditionType.AniDBRating:  		decimal dRating = -1;  		decimal.TryParse (gfc.ConditionParameter' style' culture' out dRating);  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && grp.AniDBRating < dRating)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && grp.AniDBRating > dRating)  			return false;  		break;  	case GroupFilterConditionType.UserRating:  		if (!grp.Stat_UserVoteOverall.HasValue)  			return false;  		decimal dUserRating = -1;  		decimal.TryParse (gfc.ConditionParameter' style' culture' out dUserRating);  		if (grp.AnimeGroupID.Value == 122) {  			Debug.Write ("");  		}  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && grp.Stat_UserVoteOverall.Value < dUserRating)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && grp.Stat_UserVoteOverall.Value > dUserRating)  			return false;  		break;  	case GroupFilterConditionType.EpisodeCount:  		int epCount = -1;  		int.TryParse (gfc.ConditionParameter' out epCount);  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && grp.Stat_EpisodeCount < epCount)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && grp.Stat_EpisodeCount > epCount)  			return false;  		break;  	case GroupFilterConditionType.Category:  		string filterParm = gfc.ConditionParameter.Trim ();  		string[] cats = filterParm.Split (''');  		bool foundCat = false;  		int index = 0;  		foreach (string cat in cats) {  			if (cat.Trim ().Length == 0)  				continue;  			if (cat.Trim () == "'")  				continue;  			index = grp.Stat_AllCategories.IndexOf (cat' 0' StringComparison.InvariantCultureIgnoreCase);  			if (index > -1) {  				foundCat = true;  				break;  			}  		}  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  			if (!foundCat)  				return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  			if (foundCat)  				return false;  		break;  	case GroupFilterConditionType.AnimeType:  		filterParm = gfc.ConditionParameter.Trim ();  		List<string> grpTypeList = grp.AnimeTypesList;  		string[] atypes = filterParm.Split (''');  		bool foundAnimeType = false;  		index = 0;  		foreach (string atype in atypes) {  			if (atype.Trim ().Length == 0)  				continue;  			if (atype.Trim () == "'")  				continue;  			foreach (string thisAType in grpTypeList) {  				if (string.Equals (thisAType' atype' StringComparison.InvariantCultureIgnoreCase)) {  					foundAnimeType = true;  					break;  				}  			}  		}  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  			if (!foundAnimeType)  				return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  			if (foundAnimeType)  				return false;  		break;  	case GroupFilterConditionType.VideoQuality:  		filterParm = gfc.ConditionParameter.Trim ();  		string[] vidQuals = filterParm.Split (''');  		bool foundVid = false;  		bool foundVidAllEps = false;  		index = 0;  		foreach (string vidq in vidQuals) {  			if (vidq.Trim ().Length == 0)  				continue;  			if (vidq.Trim () == "'")  				continue;  			index = grp.Stat_AllVideoQuality.IndexOf (vidq' 0' StringComparison.InvariantCultureIgnoreCase);  			if (index > -1)  				foundVid = true;  			index = grp.Stat_AllVideoQualityEpisodes.IndexOf (vidq' 0' StringComparison.InvariantCultureIgnoreCase);  			if (index > -1)  				foundVidAllEps = true;  		}  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  			if (!foundVid)  				return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  			if (foundVid)  				return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.InAllEpisodes)  			if (!foundVidAllEps)  				return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotInAllEpisodes)  			if (foundVidAllEps)  				return false;  		break;  	case GroupFilterConditionType.AudioLanguage:  	case GroupFilterConditionType.SubtitleLanguage:  		filterParm = gfc.ConditionParameter.Trim ();  		string[] languages = filterParm.Split (''');  		bool foundLan = false;  		index = 0;  		foreach (string lanName in languages) {  			if (lanName.Trim ().Length == 0)  				continue;  			if (lanName.Trim () == "'")  				continue;  			if (gfc.ConditionTypeEnum == GroupFilterConditionType.AudioLanguage)  				index = grp.Stat_AudioLanguages.IndexOf (lanName' 0' StringComparison.InvariantCultureIgnoreCase);  			if (gfc.ConditionTypeEnum == GroupFilterConditionType.SubtitleLanguage)  				index = grp.Stat_SubtitleLanguages.IndexOf (lanName' 0' StringComparison.InvariantCultureIgnoreCase);  			if (index > -1)  				foundLan = true;  		}  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  			if (!foundLan)  				return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  			if (foundLan)  				return false;  		break;  	}  }  
Magic Number,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,EvaluateGroupFilter,The following statement contains a magic number: foreach (GroupFilterConditionVM gfc in FilterConditions) {  	switch (gfc.ConditionTypeEnum) {  	case GroupFilterConditionType.Favourite:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.IsFave == 0)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.IsFave == 1)  			return false;  		break;  	case GroupFilterConditionType.MissingEpisodes:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.HasMissingEpisodesAny == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.HasMissingEpisodesAny == true)  			return false;  		break;  	case GroupFilterConditionType.MissingEpisodesCollecting:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.HasMissingEpisodesGroups == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.HasMissingEpisodesGroups == true)  			return false;  		break;  	case GroupFilterConditionType.HasWatchedEpisodes:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.AnyFilesWatched == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.AnyFilesWatched == true)  			return false;  		break;  	case GroupFilterConditionType.HasUnwatchedEpisodes:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.HasUnwatchedFiles == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.HasUnwatchedFiles == true)  			return false;  		break;  	case GroupFilterConditionType.AssignedTvDBInfo:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_HasTvDBLink == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_HasTvDBLink == true)  			return false;  		break;  	case GroupFilterConditionType.AssignedMALInfo:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_HasMALLink == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_HasMALLink == true)  			return false;  		break;  	case GroupFilterConditionType.AssignedMovieDBInfo:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_HasMovieDBLink == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_HasMovieDBLink == true)  			return false;  		break;  	case GroupFilterConditionType.AssignedTvDBOrMovieDBInfo:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_HasMovieDBOrTvDBLink == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_HasMovieDBOrTvDBLink == true)  			return false;  		break;  	case GroupFilterConditionType.CompletedSeries:  		/*if (grp.IsComplete != grp.Stat_IsComplete) 						{ 							Debug.Print("IsComplete DIFF  {0}"' grp.GroupName); 						}*/if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_IsComplete == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_IsComplete == true)  			return false;  		break;  	case GroupFilterConditionType.FinishedAiring:  		if (grp.GroupName.Contains ("Bleach"))  			Debug.Write ("Test");  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_HasFinishedAiring == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_IsCurrentlyAiring == false)  			return false;  		break;  	case GroupFilterConditionType.UserVoted:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.UserHasVoted == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.UserHasVoted == true)  			return false;  		break;  	case GroupFilterConditionType.UserVotedAny:  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.UserHasVotedAny == false)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.UserHasVotedAny == true)  			return false;  		break;  	case GroupFilterConditionType.AirDate:  		DateTime filterDate;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  			int days = 0;  			int.TryParse (gfc.ConditionParameter' out days);  			filterDate = DateTime.Today.AddDays (0 - days);  		}  		else  			filterDate = GroupFilterHelper.GetDateFromString (gfc.ConditionParameter);  		if (grp.AnimeGroupID.Value == 250)  			Console.Write ("");  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  			if (!grp.Stat_AirDate_Min.HasValue || !grp.Stat_AirDate_Max.HasValue)  				return false;  			if (grp.Stat_AirDate_Max.Value < filterDate)  				return false;  		}  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  			if (!grp.Stat_AirDate_Min.HasValue || !grp.Stat_AirDate_Max.HasValue)  				return false;  			if (grp.Stat_AirDate_Min.Value > filterDate)  				return false;  		}  		break;  	case GroupFilterConditionType.SeriesCreatedDate:  		DateTime filterDateSeries;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  			int days = 0;  			int.TryParse (gfc.ConditionParameter' out days);  			filterDateSeries = DateTime.Today.AddDays (0 - days);  		}  		else  			filterDateSeries = GroupFilterHelper.GetDateFromString (gfc.ConditionParameter);  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  			if (!grp.Stat_SeriesCreatedDate.HasValue)  				return false;  			if (grp.Stat_SeriesCreatedDate.Value < filterDateSeries)  				return false;  		}  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  			if (!grp.Stat_SeriesCreatedDate.HasValue)  				return false;  			if (grp.Stat_SeriesCreatedDate.Value > filterDateSeries)  				return false;  		}  		break;  	case GroupFilterConditionType.EpisodeWatchedDate:  		DateTime filterDateEpsiodeWatched;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  			int days = 0;  			int.TryParse (gfc.ConditionParameter' out days);  			filterDateEpsiodeWatched = DateTime.Today.AddDays (0 - days);  		}  		else  			filterDateEpsiodeWatched = GroupFilterHelper.GetDateFromString (gfc.ConditionParameter);  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  			if (!grp.WatchedDate.HasValue)  				return false;  			if (grp.WatchedDate.Value < filterDateEpsiodeWatched)  				return false;  		}  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  			if (!grp.WatchedDate.HasValue)  				return false;  			if (grp.WatchedDate.Value > filterDateEpsiodeWatched)  				return false;  		}  		break;  	case GroupFilterConditionType.EpisodeAddedDate:  		DateTime filterDateEpisodeAdded;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  			int days = 0;  			int.TryParse (gfc.ConditionParameter' out days);  			filterDateEpisodeAdded = DateTime.Today.AddDays (0 - days);  		}  		else  			filterDateEpisodeAdded = GroupFilterHelper.GetDateFromString (gfc.ConditionParameter);  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  			if (!grp.EpisodeAddedDate.HasValue)  				return false;  			if (grp.EpisodeAddedDate.Value < filterDateEpisodeAdded)  				return false;  		}  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  			if (!grp.EpisodeAddedDate.HasValue)  				return false;  			if (grp.EpisodeAddedDate.Value > filterDateEpisodeAdded)  				return false;  		}  		break;  	case GroupFilterConditionType.AniDBRating:  		decimal dRating = -1;  		decimal.TryParse (gfc.ConditionParameter' style' culture' out dRating);  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && grp.AniDBRating < dRating)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && grp.AniDBRating > dRating)  			return false;  		break;  	case GroupFilterConditionType.UserRating:  		if (!grp.Stat_UserVoteOverall.HasValue)  			return false;  		decimal dUserRating = -1;  		decimal.TryParse (gfc.ConditionParameter' style' culture' out dUserRating);  		if (grp.AnimeGroupID.Value == 122) {  			Debug.Write ("");  		}  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && grp.Stat_UserVoteOverall.Value < dUserRating)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && grp.Stat_UserVoteOverall.Value > dUserRating)  			return false;  		break;  	case GroupFilterConditionType.EpisodeCount:  		int epCount = -1;  		int.TryParse (gfc.ConditionParameter' out epCount);  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && grp.Stat_EpisodeCount < epCount)  			return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && grp.Stat_EpisodeCount > epCount)  			return false;  		break;  	case GroupFilterConditionType.Category:  		string filterParm = gfc.ConditionParameter.Trim ();  		string[] cats = filterParm.Split (''');  		bool foundCat = false;  		int index = 0;  		foreach (string cat in cats) {  			if (cat.Trim ().Length == 0)  				continue;  			if (cat.Trim () == "'")  				continue;  			index = grp.Stat_AllCategories.IndexOf (cat' 0' StringComparison.InvariantCultureIgnoreCase);  			if (index > -1) {  				foundCat = true;  				break;  			}  		}  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  			if (!foundCat)  				return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  			if (foundCat)  				return false;  		break;  	case GroupFilterConditionType.AnimeType:  		filterParm = gfc.ConditionParameter.Trim ();  		List<string> grpTypeList = grp.AnimeTypesList;  		string[] atypes = filterParm.Split (''');  		bool foundAnimeType = false;  		index = 0;  		foreach (string atype in atypes) {  			if (atype.Trim ().Length == 0)  				continue;  			if (atype.Trim () == "'")  				continue;  			foreach (string thisAType in grpTypeList) {  				if (string.Equals (thisAType' atype' StringComparison.InvariantCultureIgnoreCase)) {  					foundAnimeType = true;  					break;  				}  			}  		}  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  			if (!foundAnimeType)  				return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  			if (foundAnimeType)  				return false;  		break;  	case GroupFilterConditionType.VideoQuality:  		filterParm = gfc.ConditionParameter.Trim ();  		string[] vidQuals = filterParm.Split (''');  		bool foundVid = false;  		bool foundVidAllEps = false;  		index = 0;  		foreach (string vidq in vidQuals) {  			if (vidq.Trim ().Length == 0)  				continue;  			if (vidq.Trim () == "'")  				continue;  			index = grp.Stat_AllVideoQuality.IndexOf (vidq' 0' StringComparison.InvariantCultureIgnoreCase);  			if (index > -1)  				foundVid = true;  			index = grp.Stat_AllVideoQualityEpisodes.IndexOf (vidq' 0' StringComparison.InvariantCultureIgnoreCase);  			if (index > -1)  				foundVidAllEps = true;  		}  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  			if (!foundVid)  				return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  			if (foundVid)  				return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.InAllEpisodes)  			if (!foundVidAllEps)  				return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotInAllEpisodes)  			if (foundVidAllEps)  				return false;  		break;  	case GroupFilterConditionType.AudioLanguage:  	case GroupFilterConditionType.SubtitleLanguage:  		filterParm = gfc.ConditionParameter.Trim ();  		string[] languages = filterParm.Split (''');  		bool foundLan = false;  		index = 0;  		foreach (string lanName in languages) {  			if (lanName.Trim ().Length == 0)  				continue;  			if (lanName.Trim () == "'")  				continue;  			if (gfc.ConditionTypeEnum == GroupFilterConditionType.AudioLanguage)  				index = grp.Stat_AudioLanguages.IndexOf (lanName' 0' StringComparison.InvariantCultureIgnoreCase);  			if (gfc.ConditionTypeEnum == GroupFilterConditionType.SubtitleLanguage)  				index = grp.Stat_SubtitleLanguages.IndexOf (lanName' 0' StringComparison.InvariantCultureIgnoreCase);  			if (index > -1)  				foundLan = true;  		}  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  			if (!foundLan)  				return false;  		if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  			if (foundLan)  				return false;  		break;  	}  }  
Magic Number,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,EvaluateGroupFilter,The following statement contains a magic number: switch (gfc.ConditionTypeEnum) {  case GroupFilterConditionType.Favourite:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.IsFave == 0)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.IsFave == 1)  		return false;  	break;  case GroupFilterConditionType.MissingEpisodes:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.HasMissingEpisodesAny == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.HasMissingEpisodesAny == true)  		return false;  	break;  case GroupFilterConditionType.MissingEpisodesCollecting:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.HasMissingEpisodesGroups == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.HasMissingEpisodesGroups == true)  		return false;  	break;  case GroupFilterConditionType.HasWatchedEpisodes:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.AnyFilesWatched == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.AnyFilesWatched == true)  		return false;  	break;  case GroupFilterConditionType.HasUnwatchedEpisodes:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.HasUnwatchedFiles == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.HasUnwatchedFiles == true)  		return false;  	break;  case GroupFilterConditionType.AssignedTvDBInfo:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_HasTvDBLink == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_HasTvDBLink == true)  		return false;  	break;  case GroupFilterConditionType.AssignedMALInfo:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_HasMALLink == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_HasMALLink == true)  		return false;  	break;  case GroupFilterConditionType.AssignedMovieDBInfo:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_HasMovieDBLink == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_HasMovieDBLink == true)  		return false;  	break;  case GroupFilterConditionType.AssignedTvDBOrMovieDBInfo:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_HasMovieDBOrTvDBLink == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_HasMovieDBOrTvDBLink == true)  		return false;  	break;  case GroupFilterConditionType.CompletedSeries:  	/*if (grp.IsComplete != grp.Stat_IsComplete) 						{ 							Debug.Print("IsComplete DIFF  {0}"' grp.GroupName); 						}*/if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_IsComplete == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_IsComplete == true)  		return false;  	break;  case GroupFilterConditionType.FinishedAiring:  	if (grp.GroupName.Contains ("Bleach"))  		Debug.Write ("Test");  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_HasFinishedAiring == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_IsCurrentlyAiring == false)  		return false;  	break;  case GroupFilterConditionType.UserVoted:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.UserHasVoted == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.UserHasVoted == true)  		return false;  	break;  case GroupFilterConditionType.UserVotedAny:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.UserHasVotedAny == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.UserHasVotedAny == true)  		return false;  	break;  case GroupFilterConditionType.AirDate:  	DateTime filterDate;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		int days = 0;  		int.TryParse (gfc.ConditionParameter' out days);  		filterDate = DateTime.Today.AddDays (0 - days);  	}  	else  		filterDate = GroupFilterHelper.GetDateFromString (gfc.ConditionParameter);  	if (grp.AnimeGroupID.Value == 250)  		Console.Write ("");  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		if (!grp.Stat_AirDate_Min.HasValue || !grp.Stat_AirDate_Max.HasValue)  			return false;  		if (grp.Stat_AirDate_Max.Value < filterDate)  			return false;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  		if (!grp.Stat_AirDate_Min.HasValue || !grp.Stat_AirDate_Max.HasValue)  			return false;  		if (grp.Stat_AirDate_Min.Value > filterDate)  			return false;  	}  	break;  case GroupFilterConditionType.SeriesCreatedDate:  	DateTime filterDateSeries;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		int days = 0;  		int.TryParse (gfc.ConditionParameter' out days);  		filterDateSeries = DateTime.Today.AddDays (0 - days);  	}  	else  		filterDateSeries = GroupFilterHelper.GetDateFromString (gfc.ConditionParameter);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		if (!grp.Stat_SeriesCreatedDate.HasValue)  			return false;  		if (grp.Stat_SeriesCreatedDate.Value < filterDateSeries)  			return false;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  		if (!grp.Stat_SeriesCreatedDate.HasValue)  			return false;  		if (grp.Stat_SeriesCreatedDate.Value > filterDateSeries)  			return false;  	}  	break;  case GroupFilterConditionType.EpisodeWatchedDate:  	DateTime filterDateEpsiodeWatched;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		int days = 0;  		int.TryParse (gfc.ConditionParameter' out days);  		filterDateEpsiodeWatched = DateTime.Today.AddDays (0 - days);  	}  	else  		filterDateEpsiodeWatched = GroupFilterHelper.GetDateFromString (gfc.ConditionParameter);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		if (!grp.WatchedDate.HasValue)  			return false;  		if (grp.WatchedDate.Value < filterDateEpsiodeWatched)  			return false;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  		if (!grp.WatchedDate.HasValue)  			return false;  		if (grp.WatchedDate.Value > filterDateEpsiodeWatched)  			return false;  	}  	break;  case GroupFilterConditionType.EpisodeAddedDate:  	DateTime filterDateEpisodeAdded;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		int days = 0;  		int.TryParse (gfc.ConditionParameter' out days);  		filterDateEpisodeAdded = DateTime.Today.AddDays (0 - days);  	}  	else  		filterDateEpisodeAdded = GroupFilterHelper.GetDateFromString (gfc.ConditionParameter);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		if (!grp.EpisodeAddedDate.HasValue)  			return false;  		if (grp.EpisodeAddedDate.Value < filterDateEpisodeAdded)  			return false;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  		if (!grp.EpisodeAddedDate.HasValue)  			return false;  		if (grp.EpisodeAddedDate.Value > filterDateEpisodeAdded)  			return false;  	}  	break;  case GroupFilterConditionType.AniDBRating:  	decimal dRating = -1;  	decimal.TryParse (gfc.ConditionParameter' style' culture' out dRating);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && grp.AniDBRating < dRating)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && grp.AniDBRating > dRating)  		return false;  	break;  case GroupFilterConditionType.UserRating:  	if (!grp.Stat_UserVoteOverall.HasValue)  		return false;  	decimal dUserRating = -1;  	decimal.TryParse (gfc.ConditionParameter' style' culture' out dUserRating);  	if (grp.AnimeGroupID.Value == 122) {  		Debug.Write ("");  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && grp.Stat_UserVoteOverall.Value < dUserRating)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && grp.Stat_UserVoteOverall.Value > dUserRating)  		return false;  	break;  case GroupFilterConditionType.EpisodeCount:  	int epCount = -1;  	int.TryParse (gfc.ConditionParameter' out epCount);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && grp.Stat_EpisodeCount < epCount)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && grp.Stat_EpisodeCount > epCount)  		return false;  	break;  case GroupFilterConditionType.Category:  	string filterParm = gfc.ConditionParameter.Trim ();  	string[] cats = filterParm.Split (''');  	bool foundCat = false;  	int index = 0;  	foreach (string cat in cats) {  		if (cat.Trim ().Length == 0)  			continue;  		if (cat.Trim () == "'")  			continue;  		index = grp.Stat_AllCategories.IndexOf (cat' 0' StringComparison.InvariantCultureIgnoreCase);  		if (index > -1) {  			foundCat = true;  			break;  		}  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  		if (!foundCat)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  		if (foundCat)  			return false;  	break;  case GroupFilterConditionType.AnimeType:  	filterParm = gfc.ConditionParameter.Trim ();  	List<string> grpTypeList = grp.AnimeTypesList;  	string[] atypes = filterParm.Split (''');  	bool foundAnimeType = false;  	index = 0;  	foreach (string atype in atypes) {  		if (atype.Trim ().Length == 0)  			continue;  		if (atype.Trim () == "'")  			continue;  		foreach (string thisAType in grpTypeList) {  			if (string.Equals (thisAType' atype' StringComparison.InvariantCultureIgnoreCase)) {  				foundAnimeType = true;  				break;  			}  		}  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  		if (!foundAnimeType)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  		if (foundAnimeType)  			return false;  	break;  case GroupFilterConditionType.VideoQuality:  	filterParm = gfc.ConditionParameter.Trim ();  	string[] vidQuals = filterParm.Split (''');  	bool foundVid = false;  	bool foundVidAllEps = false;  	index = 0;  	foreach (string vidq in vidQuals) {  		if (vidq.Trim ().Length == 0)  			continue;  		if (vidq.Trim () == "'")  			continue;  		index = grp.Stat_AllVideoQuality.IndexOf (vidq' 0' StringComparison.InvariantCultureIgnoreCase);  		if (index > -1)  			foundVid = true;  		index = grp.Stat_AllVideoQualityEpisodes.IndexOf (vidq' 0' StringComparison.InvariantCultureIgnoreCase);  		if (index > -1)  			foundVidAllEps = true;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  		if (!foundVid)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  		if (foundVid)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.InAllEpisodes)  		if (!foundVidAllEps)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotInAllEpisodes)  		if (foundVidAllEps)  			return false;  	break;  case GroupFilterConditionType.AudioLanguage:  case GroupFilterConditionType.SubtitleLanguage:  	filterParm = gfc.ConditionParameter.Trim ();  	string[] languages = filterParm.Split (''');  	bool foundLan = false;  	index = 0;  	foreach (string lanName in languages) {  		if (lanName.Trim ().Length == 0)  			continue;  		if (lanName.Trim () == "'")  			continue;  		if (gfc.ConditionTypeEnum == GroupFilterConditionType.AudioLanguage)  			index = grp.Stat_AudioLanguages.IndexOf (lanName' 0' StringComparison.InvariantCultureIgnoreCase);  		if (gfc.ConditionTypeEnum == GroupFilterConditionType.SubtitleLanguage)  			index = grp.Stat_SubtitleLanguages.IndexOf (lanName' 0' StringComparison.InvariantCultureIgnoreCase);  		if (index > -1)  			foundLan = true;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  		if (!foundLan)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  		if (foundLan)  			return false;  	break;  }  
Magic Number,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,EvaluateGroupFilter,The following statement contains a magic number: switch (gfc.ConditionTypeEnum) {  case GroupFilterConditionType.Favourite:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.IsFave == 0)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.IsFave == 1)  		return false;  	break;  case GroupFilterConditionType.MissingEpisodes:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.HasMissingEpisodesAny == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.HasMissingEpisodesAny == true)  		return false;  	break;  case GroupFilterConditionType.MissingEpisodesCollecting:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.HasMissingEpisodesGroups == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.HasMissingEpisodesGroups == true)  		return false;  	break;  case GroupFilterConditionType.HasWatchedEpisodes:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.AnyFilesWatched == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.AnyFilesWatched == true)  		return false;  	break;  case GroupFilterConditionType.HasUnwatchedEpisodes:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.HasUnwatchedFiles == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.HasUnwatchedFiles == true)  		return false;  	break;  case GroupFilterConditionType.AssignedTvDBInfo:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_HasTvDBLink == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_HasTvDBLink == true)  		return false;  	break;  case GroupFilterConditionType.AssignedMALInfo:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_HasMALLink == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_HasMALLink == true)  		return false;  	break;  case GroupFilterConditionType.AssignedMovieDBInfo:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_HasMovieDBLink == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_HasMovieDBLink == true)  		return false;  	break;  case GroupFilterConditionType.AssignedTvDBOrMovieDBInfo:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_HasMovieDBOrTvDBLink == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_HasMovieDBOrTvDBLink == true)  		return false;  	break;  case GroupFilterConditionType.CompletedSeries:  	/*if (grp.IsComplete != grp.Stat_IsComplete) 						{ 							Debug.Print("IsComplete DIFF  {0}"' grp.GroupName); 						}*/if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_IsComplete == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_IsComplete == true)  		return false;  	break;  case GroupFilterConditionType.FinishedAiring:  	if (grp.GroupName.Contains ("Bleach"))  		Debug.Write ("Test");  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_HasFinishedAiring == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_IsCurrentlyAiring == false)  		return false;  	break;  case GroupFilterConditionType.UserVoted:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.UserHasVoted == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.UserHasVoted == true)  		return false;  	break;  case GroupFilterConditionType.UserVotedAny:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.UserHasVotedAny == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.UserHasVotedAny == true)  		return false;  	break;  case GroupFilterConditionType.AirDate:  	DateTime filterDate;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		int days = 0;  		int.TryParse (gfc.ConditionParameter' out days);  		filterDate = DateTime.Today.AddDays (0 - days);  	}  	else  		filterDate = GroupFilterHelper.GetDateFromString (gfc.ConditionParameter);  	if (grp.AnimeGroupID.Value == 250)  		Console.Write ("");  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		if (!grp.Stat_AirDate_Min.HasValue || !grp.Stat_AirDate_Max.HasValue)  			return false;  		if (grp.Stat_AirDate_Max.Value < filterDate)  			return false;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  		if (!grp.Stat_AirDate_Min.HasValue || !grp.Stat_AirDate_Max.HasValue)  			return false;  		if (grp.Stat_AirDate_Min.Value > filterDate)  			return false;  	}  	break;  case GroupFilterConditionType.SeriesCreatedDate:  	DateTime filterDateSeries;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		int days = 0;  		int.TryParse (gfc.ConditionParameter' out days);  		filterDateSeries = DateTime.Today.AddDays (0 - days);  	}  	else  		filterDateSeries = GroupFilterHelper.GetDateFromString (gfc.ConditionParameter);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		if (!grp.Stat_SeriesCreatedDate.HasValue)  			return false;  		if (grp.Stat_SeriesCreatedDate.Value < filterDateSeries)  			return false;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  		if (!grp.Stat_SeriesCreatedDate.HasValue)  			return false;  		if (grp.Stat_SeriesCreatedDate.Value > filterDateSeries)  			return false;  	}  	break;  case GroupFilterConditionType.EpisodeWatchedDate:  	DateTime filterDateEpsiodeWatched;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		int days = 0;  		int.TryParse (gfc.ConditionParameter' out days);  		filterDateEpsiodeWatched = DateTime.Today.AddDays (0 - days);  	}  	else  		filterDateEpsiodeWatched = GroupFilterHelper.GetDateFromString (gfc.ConditionParameter);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		if (!grp.WatchedDate.HasValue)  			return false;  		if (grp.WatchedDate.Value < filterDateEpsiodeWatched)  			return false;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  		if (!grp.WatchedDate.HasValue)  			return false;  		if (grp.WatchedDate.Value > filterDateEpsiodeWatched)  			return false;  	}  	break;  case GroupFilterConditionType.EpisodeAddedDate:  	DateTime filterDateEpisodeAdded;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		int days = 0;  		int.TryParse (gfc.ConditionParameter' out days);  		filterDateEpisodeAdded = DateTime.Today.AddDays (0 - days);  	}  	else  		filterDateEpisodeAdded = GroupFilterHelper.GetDateFromString (gfc.ConditionParameter);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		if (!grp.EpisodeAddedDate.HasValue)  			return false;  		if (grp.EpisodeAddedDate.Value < filterDateEpisodeAdded)  			return false;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  		if (!grp.EpisodeAddedDate.HasValue)  			return false;  		if (grp.EpisodeAddedDate.Value > filterDateEpisodeAdded)  			return false;  	}  	break;  case GroupFilterConditionType.AniDBRating:  	decimal dRating = -1;  	decimal.TryParse (gfc.ConditionParameter' style' culture' out dRating);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && grp.AniDBRating < dRating)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && grp.AniDBRating > dRating)  		return false;  	break;  case GroupFilterConditionType.UserRating:  	if (!grp.Stat_UserVoteOverall.HasValue)  		return false;  	decimal dUserRating = -1;  	decimal.TryParse (gfc.ConditionParameter' style' culture' out dUserRating);  	if (grp.AnimeGroupID.Value == 122) {  		Debug.Write ("");  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && grp.Stat_UserVoteOverall.Value < dUserRating)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && grp.Stat_UserVoteOverall.Value > dUserRating)  		return false;  	break;  case GroupFilterConditionType.EpisodeCount:  	int epCount = -1;  	int.TryParse (gfc.ConditionParameter' out epCount);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && grp.Stat_EpisodeCount < epCount)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && grp.Stat_EpisodeCount > epCount)  		return false;  	break;  case GroupFilterConditionType.Category:  	string filterParm = gfc.ConditionParameter.Trim ();  	string[] cats = filterParm.Split (''');  	bool foundCat = false;  	int index = 0;  	foreach (string cat in cats) {  		if (cat.Trim ().Length == 0)  			continue;  		if (cat.Trim () == "'")  			continue;  		index = grp.Stat_AllCategories.IndexOf (cat' 0' StringComparison.InvariantCultureIgnoreCase);  		if (index > -1) {  			foundCat = true;  			break;  		}  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  		if (!foundCat)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  		if (foundCat)  			return false;  	break;  case GroupFilterConditionType.AnimeType:  	filterParm = gfc.ConditionParameter.Trim ();  	List<string> grpTypeList = grp.AnimeTypesList;  	string[] atypes = filterParm.Split (''');  	bool foundAnimeType = false;  	index = 0;  	foreach (string atype in atypes) {  		if (atype.Trim ().Length == 0)  			continue;  		if (atype.Trim () == "'")  			continue;  		foreach (string thisAType in grpTypeList) {  			if (string.Equals (thisAType' atype' StringComparison.InvariantCultureIgnoreCase)) {  				foundAnimeType = true;  				break;  			}  		}  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  		if (!foundAnimeType)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  		if (foundAnimeType)  			return false;  	break;  case GroupFilterConditionType.VideoQuality:  	filterParm = gfc.ConditionParameter.Trim ();  	string[] vidQuals = filterParm.Split (''');  	bool foundVid = false;  	bool foundVidAllEps = false;  	index = 0;  	foreach (string vidq in vidQuals) {  		if (vidq.Trim ().Length == 0)  			continue;  		if (vidq.Trim () == "'")  			continue;  		index = grp.Stat_AllVideoQuality.IndexOf (vidq' 0' StringComparison.InvariantCultureIgnoreCase);  		if (index > -1)  			foundVid = true;  		index = grp.Stat_AllVideoQualityEpisodes.IndexOf (vidq' 0' StringComparison.InvariantCultureIgnoreCase);  		if (index > -1)  			foundVidAllEps = true;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  		if (!foundVid)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  		if (foundVid)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.InAllEpisodes)  		if (!foundVidAllEps)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotInAllEpisodes)  		if (foundVidAllEps)  			return false;  	break;  case GroupFilterConditionType.AudioLanguage:  case GroupFilterConditionType.SubtitleLanguage:  	filterParm = gfc.ConditionParameter.Trim ();  	string[] languages = filterParm.Split (''');  	bool foundLan = false;  	index = 0;  	foreach (string lanName in languages) {  		if (lanName.Trim ().Length == 0)  			continue;  		if (lanName.Trim () == "'")  			continue;  		if (gfc.ConditionTypeEnum == GroupFilterConditionType.AudioLanguage)  			index = grp.Stat_AudioLanguages.IndexOf (lanName' 0' StringComparison.InvariantCultureIgnoreCase);  		if (gfc.ConditionTypeEnum == GroupFilterConditionType.SubtitleLanguage)  			index = grp.Stat_SubtitleLanguages.IndexOf (lanName' 0' StringComparison.InvariantCultureIgnoreCase);  		if (index > -1)  			foundLan = true;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  		if (!foundLan)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  		if (foundLan)  			return false;  	break;  }  
Magic Number,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,EvaluateGroupFilter,The following statement contains a magic number: if (grp.AnimeGroupID.Value == 250)  	Console.Write ("");  
Magic Number,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,EvaluateGroupFilter,The following statement contains a magic number: if (grp.AnimeGroupID.Value == 122) {  	Debug.Write ("");  }  
Magic Number,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,Populate,The following statement contains a magic number: if (!string.IsNullOrEmpty (sortCriteriaRaw)) {  	string[] scrit = sortCriteriaRaw.Split ('|');  	foreach (string sortpair in scrit) {  		string[] spair = sortpair.Split (';');  		if (spair.Length != 2)  			continue;  		int stype = 0;  		int sdir = 0;  		int.TryParse (spair [0]' out stype);  		int.TryParse (spair [1]' out sdir);  		if (stype > 0 && sdir > 0) {  			GroupFilterSortingCriteria gfsc = new GroupFilterSortingCriteria ();  			gfsc.GroupFilterID = this.GroupFilterID;  			gfsc.SortType = (GroupFilterSorting)stype;  			gfsc.SortDirection = (GroupFilterSortDirection)sdir;  			SortCriteriaList.Add (gfsc);  		}  	}  }  
Magic Number,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,Populate,The following statement contains a magic number: foreach (string sortpair in scrit) {  	string[] spair = sortpair.Split (';');  	if (spair.Length != 2)  		continue;  	int stype = 0;  	int sdir = 0;  	int.TryParse (spair [0]' out stype);  	int.TryParse (spair [1]' out sdir);  	if (stype > 0 && sdir > 0) {  		GroupFilterSortingCriteria gfsc = new GroupFilterSortingCriteria ();  		gfsc.GroupFilterID = this.GroupFilterID;  		gfsc.SortType = (GroupFilterSorting)stype;  		gfsc.SortDirection = (GroupFilterSortDirection)sdir;  		SortCriteriaList.Add (gfsc);  	}  }  
Magic Number,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,Populate,The following statement contains a magic number: if (spair.Length != 2)  	continue;  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,FormatByteSize,The following statement contains a magic number: StrFormatByteSize (fileSize' sbBuffer' 20);  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,DownloadWebPage,The following statement contains a magic number: try {  	logger.Trace ("DownloadWebPage: {0}"' url);  	HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create (url);  	webReq.Timeout = 30000;  	// 30 seconds  	webReq.Proxy = null;  	webReq.Headers.Add (HttpRequestHeader.AcceptEncoding' "gzip'deflate");  	if (!string.IsNullOrEmpty (cookieHeader))  		webReq.Headers.Add ("Cookie"' cookieHeader);  	if (setUserAgent)  		webReq.UserAgent = "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)";  	webReq.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;  	HttpWebResponse WebResponse = (HttpWebResponse)webReq.GetResponse ();  	Stream responseStream = WebResponse.GetResponseStream ();  	String enco = WebResponse.CharacterSet;  	Encoding encoding = null;  	if (!String.IsNullOrEmpty (enco))  		encoding = Encoding.GetEncoding (WebResponse.CharacterSet);  	if (encoding == null)  		encoding = Encoding.Default;  	StreamReader Reader = new StreamReader (responseStream' encoding);  	string output = Reader.ReadToEnd ();  	WebResponse.Close ();  	responseStream.Close ();  	//logger.Trace("DownloadWebPage Response: {0}"' output);  	return output;  }  catch (Exception ex) {  	string msg = "---------- ERROR IN DOWNLOAD WEB PAGE ---------" + Environment.NewLine + url + Environment.NewLine + ex.ToString () + Environment.NewLine + "------------------------------------";  	logger.Error (msg);  	// if the error is a 404 error it may mean that there is a bad series association  	// so lets log it to the web cache so we can investigate  	if (ex.ToString ().Contains ("(404) Not Found")) {  	}  	return "";  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,DownloadWebPage,The following statement contains a magic number: webReq.Timeout = 30000;  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,FormatSecondsToDisplayTime,The following statement contains a magic number: if (t.Hours > 0)  	return string.Format ("{0}:{1}:{2}"' t.Hours' t.Minutes.ToString ().PadLeft (2' '0')' t.Seconds.ToString ().PadLeft (2' '0'));  else  	return string.Format ("{0}:{1}"' t.Minutes' t.Seconds.ToString ().PadLeft (2' '0'));  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,FormatSecondsToDisplayTime,The following statement contains a magic number: if (t.Hours > 0)  	return string.Format ("{0}:{1}:{2}"' t.Hours' t.Minutes.ToString ().PadLeft (2' '0')' t.Seconds.ToString ().PadLeft (2' '0'));  else  	return string.Format ("{0}:{1}"' t.Minutes' t.Seconds.ToString ().PadLeft (2' '0'));  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,FormatSecondsToDisplayTime,The following statement contains a magic number: if (t.Hours > 0)  	return string.Format ("{0}:{1}:{2}"' t.Hours' t.Minutes.ToString ().PadLeft (2' '0')' t.Seconds.ToString ().PadLeft (2' '0'));  else  	return string.Format ("{0}:{1}"' t.Minutes' t.Seconds.ToString ().PadLeft (2' '0'));  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,FormatSecondsToDisplayTime,The following statement contains a magic number: return string.Format ("{0}:{1}:{2}"' t.Hours' t.Minutes.ToString ().PadLeft (2' '0')' t.Seconds.ToString ().PadLeft (2' '0'));  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,FormatSecondsToDisplayTime,The following statement contains a magic number: return string.Format ("{0}:{1}:{2}"' t.Hours' t.Minutes.ToString ().PadLeft (2' '0')' t.Seconds.ToString ().PadLeft (2' '0'));  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,FormatSecondsToDisplayTime,The following statement contains a magic number: return string.Format ("{0}:{1}"' t.Minutes' t.Seconds.ToString ().PadLeft (2' '0'));  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,GetAniDBImagePath,The following statement contains a magic number: if (sid.Length == 1)  	subFolder = sid;  else  	subFolder = sid.Substring (0' 2);  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,GetAniDBImagePath,The following statement contains a magic number: subFolder = sid.Substring (0' 2);  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32Windows) {  	//This is a pre-NT version of Windows  	switch (vs.Minor) {  	case 0:  		operatingSystem = "95";  		break;  	case 10:  		if (vs.Revision.ToString () == "2222A")  			operatingSystem = "98SE";  		else  			operatingSystem = "98";  		break;  	case 90:  		operatingSystem = "Me";  		break;  	default:  		break;  	}  }  else if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32Windows) {  	//This is a pre-NT version of Windows  	switch (vs.Minor) {  	case 0:  		operatingSystem = "95";  		break;  	case 10:  		if (vs.Revision.ToString () == "2222A")  			operatingSystem = "98SE";  		else  			operatingSystem = "98";  		break;  	case 90:  		operatingSystem = "Me";  		break;  	default:  		break;  	}  }  else if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32Windows) {  	//This is a pre-NT version of Windows  	switch (vs.Minor) {  	case 0:  		operatingSystem = "95";  		break;  	case 10:  		if (vs.Revision.ToString () == "2222A")  			operatingSystem = "98SE";  		else  			operatingSystem = "98";  		break;  	case 90:  		operatingSystem = "Me";  		break;  	default:  		break;  	}  }  else if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32Windows) {  	//This is a pre-NT version of Windows  	switch (vs.Minor) {  	case 0:  		operatingSystem = "95";  		break;  	case 10:  		if (vs.Revision.ToString () == "2222A")  			operatingSystem = "98SE";  		else  			operatingSystem = "98";  		break;  	case 90:  		operatingSystem = "Me";  		break;  	default:  		break;  	}  }  else if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32Windows) {  	//This is a pre-NT version of Windows  	switch (vs.Minor) {  	case 0:  		operatingSystem = "95";  		break;  	case 10:  		if (vs.Revision.ToString () == "2222A")  			operatingSystem = "98SE";  		else  			operatingSystem = "98";  		break;  	case 90:  		operatingSystem = "Me";  		break;  	default:  		break;  	}  }  else if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32Windows) {  	//This is a pre-NT version of Windows  	switch (vs.Minor) {  	case 0:  		operatingSystem = "95";  		break;  	case 10:  		if (vs.Revision.ToString () == "2222A")  			operatingSystem = "98SE";  		else  			operatingSystem = "98";  		break;  	case 90:  		operatingSystem = "Me";  		break;  	default:  		break;  	}  }  else if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,GetOSInfo,The following statement contains a magic number: switch (vs.Minor) {  case 0:  	operatingSystem = "95";  	break;  case 10:  	if (vs.Revision.ToString () == "2222A")  		operatingSystem = "98SE";  	else  		operatingSystem = "98";  	break;  case 90:  	operatingSystem = "Me";  	break;  default:  	break;  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,GetOSInfo,The following statement contains a magic number: switch (vs.Minor) {  case 0:  	operatingSystem = "95";  	break;  case 10:  	if (vs.Revision.ToString () == "2222A")  		operatingSystem = "98SE";  	else  		operatingSystem = "98";  	break;  case 90:  	operatingSystem = "Me";  	break;  default:  	break;  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,GetOSInfo,The following statement contains a magic number: if (os.Platform == PlatformID.Win32NT) {  	switch (vs.Major) {  	case 3:  		operatingSystem = "NT 3.51";  		break;  	case 4:  		operatingSystem = "NT 4.0";  		break;  	case 5:  		if (vs.Minor == 0)  			operatingSystem = "2000";  		else  			operatingSystem = "XP";  		break;  	case 6:  		if (vs.Minor == 0)  			operatingSystem = "Vista";  		else  			operatingSystem = "7";  		break;  	default:  		break;  	}  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,GetOSInfo,The following statement contains a magic number: switch (vs.Major) {  case 3:  	operatingSystem = "NT 3.51";  	break;  case 4:  	operatingSystem = "NT 4.0";  	break;  case 5:  	if (vs.Minor == 0)  		operatingSystem = "2000";  	else  		operatingSystem = "XP";  	break;  case 6:  	if (vs.Minor == 0)  		operatingSystem = "Vista";  	else  		operatingSystem = "7";  	break;  default:  	break;  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,GetOSInfo,The following statement contains a magic number: switch (vs.Major) {  case 3:  	operatingSystem = "NT 3.51";  	break;  case 4:  	operatingSystem = "NT 4.0";  	break;  case 5:  	if (vs.Minor == 0)  		operatingSystem = "2000";  	else  		operatingSystem = "XP";  	break;  case 6:  	if (vs.Minor == 0)  		operatingSystem = "Vista";  	else  		operatingSystem = "7";  	break;  default:  	break;  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,GetOSInfo,The following statement contains a magic number: switch (vs.Major) {  case 3:  	operatingSystem = "NT 3.51";  	break;  case 4:  	operatingSystem = "NT 4.0";  	break;  case 5:  	if (vs.Minor == 0)  		operatingSystem = "2000";  	else  		operatingSystem = "XP";  	break;  case 6:  	if (vs.Minor == 0)  		operatingSystem = "Vista";  	else  		operatingSystem = "7";  	break;  default:  	break;  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,GetOSInfo,The following statement contains a magic number: switch (vs.Major) {  case 3:  	operatingSystem = "NT 3.51";  	break;  case 4:  	operatingSystem = "NT 4.0";  	break;  case 5:  	if (vs.Minor == 0)  		operatingSystem = "2000";  	else  		operatingSystem = "XP";  	break;  case 6:  	if (vs.Minor == 0)  		operatingSystem = "Vista";  	else  		operatingSystem = "7";  	break;  default:  	break;  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,getOSArchitecture,The following statement contains a magic number: if (Is64BitOperatingSystem)  	return 64;  else  	return 32;  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,getOSArchitecture,The following statement contains a magic number: if (Is64BitOperatingSystem)  	return 64;  else  	return 32;  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,getOSArchitecture,The following statement contains a magic number: return 64;  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,getOSArchitecture,The following statement contains a magic number: return 32;  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,ReparseDescription,The following statement contains a magic number: while ((vup.Contains ("[URL")) || (vup.Contains ("[/URL]"))) {  	int a = vup.IndexOf ("[URL");  	if (a >= 0) {  		int b = vup.IndexOf ("]"' a + 1);  		if (b >= 0) {  			val = val.Substring (0' a) + val.Substring (b + 1);  			vup = val.ToUpper ();  		}  	}  	a = vup.IndexOf ("[/URL]");  	if (a >= 0) {  		val = val.Substring (0' a) + val.Substring (a + 6);  		vup = val.ToUpper ();  	}  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,ReparseDescription,The following statement contains a magic number: if (a >= 0) {  	val = val.Substring (0' a) + val.Substring (a + 6);  	vup = val.ToUpper ();  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,ReparseDescription,The following statement contains a magic number: val = val.Substring (0' a) + val.Substring (a + 6);  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,ReparseDescription,The following statement contains a magic number: while (vup.Contains ("HTTP:")) {  	int a = vup.IndexOf ("HTTP:");  	if (a >= 0) {  		int b = vup.IndexOf (" "' a + 1);  		if (b >= 0) {  			if (vup [b + 1] == '[') {  				int c = vup.IndexOf ("]"' b + 1);  				val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  			}  			else {  				val = val.Substring (0' a) + val.Substring (b);  			}  			vup = val.ToUpper ();  		}  		else {  			break;  		}  	}  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,ReparseDescription,The following statement contains a magic number: while (vup.Contains ("HTTP:")) {  	int a = vup.IndexOf ("HTTP:");  	if (a >= 0) {  		int b = vup.IndexOf (" "' a + 1);  		if (b >= 0) {  			if (vup [b + 1] == '[') {  				int c = vup.IndexOf ("]"' b + 1);  				val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  			}  			else {  				val = val.Substring (0' a) + val.Substring (b);  			}  			vup = val.ToUpper ();  		}  		else {  			break;  		}  	}  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,ReparseDescription,The following statement contains a magic number: if (a >= 0) {  	int b = vup.IndexOf (" "' a + 1);  	if (b >= 0) {  		if (vup [b + 1] == '[') {  			int c = vup.IndexOf ("]"' b + 1);  			val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  		}  		else {  			val = val.Substring (0' a) + val.Substring (b);  		}  		vup = val.ToUpper ();  	}  	else {  		break;  	}  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,ReparseDescription,The following statement contains a magic number: if (a >= 0) {  	int b = vup.IndexOf (" "' a + 1);  	if (b >= 0) {  		if (vup [b + 1] == '[') {  			int c = vup.IndexOf ("]"' b + 1);  			val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  		}  		else {  			val = val.Substring (0' a) + val.Substring (b);  		}  		vup = val.ToUpper ();  	}  	else {  		break;  	}  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,ReparseDescription,The following statement contains a magic number: if (b >= 0) {  	if (vup [b + 1] == '[') {  		int c = vup.IndexOf ("]"' b + 1);  		val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  	}  	else {  		val = val.Substring (0' a) + val.Substring (b);  	}  	vup = val.ToUpper ();  }  else {  	break;  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,ReparseDescription,The following statement contains a magic number: if (b >= 0) {  	if (vup [b + 1] == '[') {  		int c = vup.IndexOf ("]"' b + 1);  		val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  	}  	else {  		val = val.Substring (0' a) + val.Substring (b);  	}  	vup = val.ToUpper ();  }  else {  	break;  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,ReparseDescription,The following statement contains a magic number: if (vup [b + 1] == '[') {  	int c = vup.IndexOf ("]"' b + 1);  	val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  }  else {  	val = val.Substring (0' a) + val.Substring (b);  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,ReparseDescription,The following statement contains a magic number: if (vup [b + 1] == '[') {  	int c = vup.IndexOf ("]"' b + 1);  	val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  }  else {  	val = val.Substring (0' a) + val.Substring (b);  }  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,ReparseDescription,The following statement contains a magic number: val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  
Magic Number,JMMClient,Utils,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utils.cs,ReparseDescription,The following statement contains a magic number: val = val.Substring (0' a) + " " + val.Substring (b + 2' c - b - 2) + val.Substring (c + 1);  
Magic Number,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: try {  	UnhandledExceptionManager.AddHandler ();  	//AppSettings.DebugSettingsToLog();  	lbGroupsSeries.MouseDoubleClick += new MouseButtonEventHandler (lbGroupsSeries_MouseDoubleClick);  	lbGroupsSeries.SelectionChanged += new SelectionChangedEventHandler (lbGroupsSeries_SelectionChanged);  	this.grdMain.LayoutUpdated += new EventHandler (grdMain_LayoutUpdated);  	this.LayoutUpdated += new EventHandler (MainWindow_LayoutUpdated);  	lbPlaylists.SelectionChanged += new SelectionChangedEventHandler (lbPlaylists_SelectionChanged);  	showChildWrappersWorker.DoWork += new DoWorkEventHandler (showChildWrappersWorker_DoWork);  	showChildWrappersWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler (showChildWrappersWorker_RunWorkerCompleted);  	downloadImagesWorker.DoWork += new DoWorkEventHandler (downloadImagesWorker_DoWork);  	refreshGroupsWorker.DoWork += new DoWorkEventHandler (refreshGroupsWorker_DoWork);  	refreshGroupsWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler (refreshGroupsWorker_RunWorkerCompleted);  	toggleStatusWorker.DoWork += new DoWorkEventHandler (toggleStatusWorker_DoWork);  	toggleStatusWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler (toggleStatusWorker_RunWorkerCompleted);  	moveSeriesWorker.DoWork += new DoWorkEventHandler (moveSeriesWorker_DoWork);  	moveSeriesWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler (moveSeriesWorker_RunWorkerCompleted);  	txtGroupSearch.TextChanged += new TextChangedEventHandler (txtGroupSearch_TextChanged);  	showDashboardWorker.DoWork += new DoWorkEventHandler (showDashboardWorker_DoWork);  	showDashboardWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler (showDashboardWorker_RunWorkerCompleted);  	MainListHelperVM.Instance.ViewGroups.Filter = GroupSearchFilter;  	cboLanguages.SelectionChanged += new SelectionChangedEventHandler (cboLanguages_SelectionChanged);  	if (MainListHelperVM.Instance.SeriesSearchTextBox == null)  		MainListHelperVM.Instance.SeriesSearchTextBox = seriesSearch.txtSeriesSearch;  	//grdSplitEps.DragCompleted += new System.Windows.Controls.Primitives.DragCompletedEventHandler(grdSplitEps_DragCompleted);  	imageHelper = new ImageDownloader ();  	imageHelper.Init ();  	videoHandler.Init ();  	//videoHandler.HandleFileChange(AppSettings.MPCFolder + "\\mpc-hc.ini");  	InitCulture ();  	imageHelper.QueueUpdateEvent += new ImageDownloader.QueueUpdateEventHandler (imageHelper_QueueUpdateEvent);  	cboGroupSort.Items.Clear ();  	foreach (string sType in GroupFilterHelper.GetAllSortTypes ())  		cboGroupSort.Items.Add (sType);  	cboGroupSort.SelectedIndex = 0;  	btnToolbarSort.Click += new RoutedEventHandler (btnToolbarSort_Click);  	tabControl1.SelectionChanged += new SelectionChangedEventHandler (tabControl1_SelectionChanged);  	tabFileManager.SelectionChanged += new SelectionChangedEventHandler (tabFileManager_SelectionChanged);  	tabSettingsChild.SelectionChanged += new SelectionChangedEventHandler (tabSettingsChild_SelectionChanged);  	this.Loaded += new RoutedEventHandler (MainWindow_Loaded);  	this.StateChanged += new EventHandler (MainWindow_StateChanged);  	// Have commented this out because it is no good when Desktop and Server are sharing  	// the same base image path  	//DeleteAvatarImages();  	this.AddHandler (CloseableTabItem.CloseTabEvent' new RoutedEventHandler (this.CloseTab));  	btnUpdateMediaInfo.Click += new RoutedEventHandler (btnUpdateMediaInfo_Click);  	btnAbout.Click += new RoutedEventHandler (btnAbout_Click);  	btnClearHasherQueue.Click += new RoutedEventHandler (btnClearHasherQueue_Click);  	btnClearGeneralQueue.Click += new RoutedEventHandler (btnClearGeneralQueue_Click);  	btnClearServerImageQueue.Click += new RoutedEventHandler (btnClearServerImageQueue_Click);  	JMMServerVM.Instance.BaseImagePath = Utils.GetBaseImagesPath ();  	// timer for automatic updates  	postStartTimer = new System.Timers.Timer ();  	postStartTimer.AutoReset = false;  	postStartTimer.Interval = 5 * 1000;  	// 15 seconds  	postStartTimer.Elapsed += new System.Timers.ElapsedEventHandler (postStartTimer_Elapsed);  	btnSwitchUser.Click += new RoutedEventHandler (btnSwitchUser_Click);  	//videoHandler.HandleFileChange(@"C:\Program Files (x86)\Combined Community Codec Pack\MPC\mpc-hc.ini");  	MainWindow.videoHandler.VideoWatchedEvent += new VideoHandler.VideoWatchedEventHandler (videoHandler_VideoWatchedEvent);  	if (AppSettings.DashboardType == DashboardType.Normal)  		dash.Visibility = System.Windows.Visibility.Visible;  	else  		dashMetro.Visibility = System.Windows.Visibility.Visible;  	UserSettingsVM.Instance.SetDashMetro_Image_Width ();  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: try {  	UnhandledExceptionManager.AddHandler ();  	//AppSettings.DebugSettingsToLog();  	lbGroupsSeries.MouseDoubleClick += new MouseButtonEventHandler (lbGroupsSeries_MouseDoubleClick);  	lbGroupsSeries.SelectionChanged += new SelectionChangedEventHandler (lbGroupsSeries_SelectionChanged);  	this.grdMain.LayoutUpdated += new EventHandler (grdMain_LayoutUpdated);  	this.LayoutUpdated += new EventHandler (MainWindow_LayoutUpdated);  	lbPlaylists.SelectionChanged += new SelectionChangedEventHandler (lbPlaylists_SelectionChanged);  	showChildWrappersWorker.DoWork += new DoWorkEventHandler (showChildWrappersWorker_DoWork);  	showChildWrappersWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler (showChildWrappersWorker_RunWorkerCompleted);  	downloadImagesWorker.DoWork += new DoWorkEventHandler (downloadImagesWorker_DoWork);  	refreshGroupsWorker.DoWork += new DoWorkEventHandler (refreshGroupsWorker_DoWork);  	refreshGroupsWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler (refreshGroupsWorker_RunWorkerCompleted);  	toggleStatusWorker.DoWork += new DoWorkEventHandler (toggleStatusWorker_DoWork);  	toggleStatusWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler (toggleStatusWorker_RunWorkerCompleted);  	moveSeriesWorker.DoWork += new DoWorkEventHandler (moveSeriesWorker_DoWork);  	moveSeriesWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler (moveSeriesWorker_RunWorkerCompleted);  	txtGroupSearch.TextChanged += new TextChangedEventHandler (txtGroupSearch_TextChanged);  	showDashboardWorker.DoWork += new DoWorkEventHandler (showDashboardWorker_DoWork);  	showDashboardWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler (showDashboardWorker_RunWorkerCompleted);  	MainListHelperVM.Instance.ViewGroups.Filter = GroupSearchFilter;  	cboLanguages.SelectionChanged += new SelectionChangedEventHandler (cboLanguages_SelectionChanged);  	if (MainListHelperVM.Instance.SeriesSearchTextBox == null)  		MainListHelperVM.Instance.SeriesSearchTextBox = seriesSearch.txtSeriesSearch;  	//grdSplitEps.DragCompleted += new System.Windows.Controls.Primitives.DragCompletedEventHandler(grdSplitEps_DragCompleted);  	imageHelper = new ImageDownloader ();  	imageHelper.Init ();  	videoHandler.Init ();  	//videoHandler.HandleFileChange(AppSettings.MPCFolder + "\\mpc-hc.ini");  	InitCulture ();  	imageHelper.QueueUpdateEvent += new ImageDownloader.QueueUpdateEventHandler (imageHelper_QueueUpdateEvent);  	cboGroupSort.Items.Clear ();  	foreach (string sType in GroupFilterHelper.GetAllSortTypes ())  		cboGroupSort.Items.Add (sType);  	cboGroupSort.SelectedIndex = 0;  	btnToolbarSort.Click += new RoutedEventHandler (btnToolbarSort_Click);  	tabControl1.SelectionChanged += new SelectionChangedEventHandler (tabControl1_SelectionChanged);  	tabFileManager.SelectionChanged += new SelectionChangedEventHandler (tabFileManager_SelectionChanged);  	tabSettingsChild.SelectionChanged += new SelectionChangedEventHandler (tabSettingsChild_SelectionChanged);  	this.Loaded += new RoutedEventHandler (MainWindow_Loaded);  	this.StateChanged += new EventHandler (MainWindow_StateChanged);  	// Have commented this out because it is no good when Desktop and Server are sharing  	// the same base image path  	//DeleteAvatarImages();  	this.AddHandler (CloseableTabItem.CloseTabEvent' new RoutedEventHandler (this.CloseTab));  	btnUpdateMediaInfo.Click += new RoutedEventHandler (btnUpdateMediaInfo_Click);  	btnAbout.Click += new RoutedEventHandler (btnAbout_Click);  	btnClearHasherQueue.Click += new RoutedEventHandler (btnClearHasherQueue_Click);  	btnClearGeneralQueue.Click += new RoutedEventHandler (btnClearGeneralQueue_Click);  	btnClearServerImageQueue.Click += new RoutedEventHandler (btnClearServerImageQueue_Click);  	JMMServerVM.Instance.BaseImagePath = Utils.GetBaseImagesPath ();  	// timer for automatic updates  	postStartTimer = new System.Timers.Timer ();  	postStartTimer.AutoReset = false;  	postStartTimer.Interval = 5 * 1000;  	// 15 seconds  	postStartTimer.Elapsed += new System.Timers.ElapsedEventHandler (postStartTimer_Elapsed);  	btnSwitchUser.Click += new RoutedEventHandler (btnSwitchUser_Click);  	//videoHandler.HandleFileChange(@"C:\Program Files (x86)\Combined Community Codec Pack\MPC\mpc-hc.ini");  	MainWindow.videoHandler.VideoWatchedEvent += new VideoHandler.VideoWatchedEventHandler (videoHandler_VideoWatchedEvent);  	if (AppSettings.DashboardType == DashboardType.Normal)  		dash.Visibility = System.Windows.Visibility.Visible;  	else  		dashMetro.Visibility = System.Windows.Visibility.Visible;  	UserSettingsVM.Instance.SetDashMetro_Image_Width ();  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: postStartTimer.Interval = 5 * 1000;  
Magic Number,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: postStartTimer.Interval = 5 * 1000;  
Magic Number,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,MainWindow_LayoutUpdated,The following statement contains a magic number: try {  	//Debug.Print("Scroller width = {0}"' Scroller.ActualWidth);  	//Debug.Print("Scroller ViewportWidth = {0}"' Scroller.ViewportWidth);  	double tempWidth = ccDetail.ActualWidth - 8;  	double tempHeight = ccDetail.ActualHeight - 8;  	if (tempWidth > 0) {  		MainListHelperVM.Instance.MainScrollerWidth = tempWidth;  	}  	tempWidth = tabControl1.ActualWidth - 20;  	//tempWidth = tabControl1.ActualWidth - 300;  	if (tempWidth > 0)  		MainListHelperVM.Instance.FullScrollerWidth = tempWidth;  	tempHeight = tabControl1.ActualHeight - 50;  	if (tempHeight > 0)  		MainListHelperVM.Instance.FullScrollerHeight = tempHeight;  	tempWidth = ScrollerPlaylist.ViewportWidth - 8;  	if (tempWidth > 0)  		MainListHelperVM.Instance.PlaylistScrollerWidth = tempWidth;  	tempWidth = tabcDownloads.ActualWidth - 130;  	if (tempWidth > 0)  		MainListHelperVM.Instance.DownloadRecScrollerWidth = tempWidth;  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,MainWindow_LayoutUpdated,The following statement contains a magic number: try {  	//Debug.Print("Scroller width = {0}"' Scroller.ActualWidth);  	//Debug.Print("Scroller ViewportWidth = {0}"' Scroller.ViewportWidth);  	double tempWidth = ccDetail.ActualWidth - 8;  	double tempHeight = ccDetail.ActualHeight - 8;  	if (tempWidth > 0) {  		MainListHelperVM.Instance.MainScrollerWidth = tempWidth;  	}  	tempWidth = tabControl1.ActualWidth - 20;  	//tempWidth = tabControl1.ActualWidth - 300;  	if (tempWidth > 0)  		MainListHelperVM.Instance.FullScrollerWidth = tempWidth;  	tempHeight = tabControl1.ActualHeight - 50;  	if (tempHeight > 0)  		MainListHelperVM.Instance.FullScrollerHeight = tempHeight;  	tempWidth = ScrollerPlaylist.ViewportWidth - 8;  	if (tempWidth > 0)  		MainListHelperVM.Instance.PlaylistScrollerWidth = tempWidth;  	tempWidth = tabcDownloads.ActualWidth - 130;  	if (tempWidth > 0)  		MainListHelperVM.Instance.DownloadRecScrollerWidth = tempWidth;  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,MainWindow_LayoutUpdated,The following statement contains a magic number: try {  	//Debug.Print("Scroller width = {0}"' Scroller.ActualWidth);  	//Debug.Print("Scroller ViewportWidth = {0}"' Scroller.ViewportWidth);  	double tempWidth = ccDetail.ActualWidth - 8;  	double tempHeight = ccDetail.ActualHeight - 8;  	if (tempWidth > 0) {  		MainListHelperVM.Instance.MainScrollerWidth = tempWidth;  	}  	tempWidth = tabControl1.ActualWidth - 20;  	//tempWidth = tabControl1.ActualWidth - 300;  	if (tempWidth > 0)  		MainListHelperVM.Instance.FullScrollerWidth = tempWidth;  	tempHeight = tabControl1.ActualHeight - 50;  	if (tempHeight > 0)  		MainListHelperVM.Instance.FullScrollerHeight = tempHeight;  	tempWidth = ScrollerPlaylist.ViewportWidth - 8;  	if (tempWidth > 0)  		MainListHelperVM.Instance.PlaylistScrollerWidth = tempWidth;  	tempWidth = tabcDownloads.ActualWidth - 130;  	if (tempWidth > 0)  		MainListHelperVM.Instance.DownloadRecScrollerWidth = tempWidth;  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,MainWindow_LayoutUpdated,The following statement contains a magic number: try {  	//Debug.Print("Scroller width = {0}"' Scroller.ActualWidth);  	//Debug.Print("Scroller ViewportWidth = {0}"' Scroller.ViewportWidth);  	double tempWidth = ccDetail.ActualWidth - 8;  	double tempHeight = ccDetail.ActualHeight - 8;  	if (tempWidth > 0) {  		MainListHelperVM.Instance.MainScrollerWidth = tempWidth;  	}  	tempWidth = tabControl1.ActualWidth - 20;  	//tempWidth = tabControl1.ActualWidth - 300;  	if (tempWidth > 0)  		MainListHelperVM.Instance.FullScrollerWidth = tempWidth;  	tempHeight = tabControl1.ActualHeight - 50;  	if (tempHeight > 0)  		MainListHelperVM.Instance.FullScrollerHeight = tempHeight;  	tempWidth = ScrollerPlaylist.ViewportWidth - 8;  	if (tempWidth > 0)  		MainListHelperVM.Instance.PlaylistScrollerWidth = tempWidth;  	tempWidth = tabcDownloads.ActualWidth - 130;  	if (tempWidth > 0)  		MainListHelperVM.Instance.DownloadRecScrollerWidth = tempWidth;  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,MainWindow_LayoutUpdated,The following statement contains a magic number: try {  	//Debug.Print("Scroller width = {0}"' Scroller.ActualWidth);  	//Debug.Print("Scroller ViewportWidth = {0}"' Scroller.ViewportWidth);  	double tempWidth = ccDetail.ActualWidth - 8;  	double tempHeight = ccDetail.ActualHeight - 8;  	if (tempWidth > 0) {  		MainListHelperVM.Instance.MainScrollerWidth = tempWidth;  	}  	tempWidth = tabControl1.ActualWidth - 20;  	//tempWidth = tabControl1.ActualWidth - 300;  	if (tempWidth > 0)  		MainListHelperVM.Instance.FullScrollerWidth = tempWidth;  	tempHeight = tabControl1.ActualHeight - 50;  	if (tempHeight > 0)  		MainListHelperVM.Instance.FullScrollerHeight = tempHeight;  	tempWidth = ScrollerPlaylist.ViewportWidth - 8;  	if (tempWidth > 0)  		MainListHelperVM.Instance.PlaylistScrollerWidth = tempWidth;  	tempWidth = tabcDownloads.ActualWidth - 130;  	if (tempWidth > 0)  		MainListHelperVM.Instance.DownloadRecScrollerWidth = tempWidth;  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,MainWindow_LayoutUpdated,The following statement contains a magic number: try {  	//Debug.Print("Scroller width = {0}"' Scroller.ActualWidth);  	//Debug.Print("Scroller ViewportWidth = {0}"' Scroller.ViewportWidth);  	double tempWidth = ccDetail.ActualWidth - 8;  	double tempHeight = ccDetail.ActualHeight - 8;  	if (tempWidth > 0) {  		MainListHelperVM.Instance.MainScrollerWidth = tempWidth;  	}  	tempWidth = tabControl1.ActualWidth - 20;  	//tempWidth = tabControl1.ActualWidth - 300;  	if (tempWidth > 0)  		MainListHelperVM.Instance.FullScrollerWidth = tempWidth;  	tempHeight = tabControl1.ActualHeight - 50;  	if (tempHeight > 0)  		MainListHelperVM.Instance.FullScrollerHeight = tempHeight;  	tempWidth = ScrollerPlaylist.ViewportWidth - 8;  	if (tempWidth > 0)  		MainListHelperVM.Instance.PlaylistScrollerWidth = tempWidth;  	tempWidth = tabcDownloads.ActualWidth - 130;  	if (tempWidth > 0)  		MainListHelperVM.Instance.DownloadRecScrollerWidth = tempWidth;  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,MainWindow_LayoutUpdated,The following statement contains a magic number: tempWidth = tabControl1.ActualWidth - 20;  
Magic Number,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,MainWindow_LayoutUpdated,The following statement contains a magic number: tempHeight = tabControl1.ActualHeight - 50;  
Magic Number,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,MainWindow_LayoutUpdated,The following statement contains a magic number: tempWidth = ScrollerPlaylist.ViewportWidth - 8;  
Magic Number,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,MainWindow_LayoutUpdated,The following statement contains a magic number: tempWidth = tabcDownloads.ActualWidth - 130;  
Magic Number,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_MoveDownFilterSort,The following statement contains a magic number: try {  	if (obj.GetType () == typeof(GroupFilterSortingCriteria)) {  		GroupFilterSortingCriteria gfsc = (GroupFilterSortingCriteria)obj;  		GroupFilterSortMoveUpDown (gfsc' 2);  	}  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_MoveDownFilterSort,The following statement contains a magic number: if (obj.GetType () == typeof(GroupFilterSortingCriteria)) {  	GroupFilterSortingCriteria gfsc = (GroupFilterSortingCriteria)obj;  	GroupFilterSortMoveUpDown (gfsc' 2);  }  
Magic Number,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_MoveDownFilterSort,The following statement contains a magic number: GroupFilterSortMoveUpDown (gfsc' 2);  
Magic Number,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_IncrementSeriesImageSize,The following statement contains a magic number: UserSettingsVM.Instance.SeriesGroup_Image_Height = UserSettingsVM.Instance.SeriesGroup_Image_Height + 10;  
Magic Number,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,CommandBinding_DecrementSeriesImageSize,The following statement contains a magic number: UserSettingsVM.Instance.SeriesGroup_Image_Height = UserSettingsVM.Instance.SeriesGroup_Image_Height - 10;  
Magic Number,JMMClient.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\DownloadHelper.cs,SearchTorrents,The following statement contains a magic number: foreach (TorrentSourceVM src in orderedSources) {  	if (src.IsDisabled)  		continue;  	if (src.TorrentSource == TorrentSourceType.Nyaa) {  		TorrentsNyaa nyaa = new TorrentsNyaa ();  		List<TorrentLinkVM> ttLinks = null;  		Dictionary<string' TorrentLinkVM> dictLinks = new Dictionary<string' TorrentLinkVM> ();  		foreach (string grp in episodeGroupParms) {  			List<string> tempParms = new List<string> ();  			foreach (string parmTemp in parms)  				tempParms.Add (parmTemp);  			tempParms.Insert (0' grp);  			ttLinks = nyaa.GetTorrents (tempParms);  			logger.Trace ("Searching for: " + search.ToString () + "(" + grp + ")");  			// only use the first 10  			int x = 0;  			foreach (TorrentLinkVM link in ttLinks) {  				if (x == 10)  					break;  				dictLinks [link.TorrentDownloadLink] = link;  				logger.Trace ("Adding link: " + link.ToString ());  			}  		}  		logger.Trace ("Searching for: " + search.ToString ());  		ttLinks = nyaa.GetTorrents (parms);  		foreach (TorrentLinkVM link in ttLinks) {  			dictLinks [link.TorrentDownloadLink] = link;  			//logger.Trace("Adding link: " + link.ToString());  		}  		links.AddRange (dictLinks.Values);  	}  	if (src.TorrentSource == TorrentSourceType.AnimeSuki) {  		TorrentsAnimeSuki suki = new TorrentsAnimeSuki ();  		List<TorrentLinkVM> sukiLinks = suki.GetTorrents (parms);  		links.AddRange (sukiLinks);  	}  	if (src.TorrentSource == TorrentSourceType.BakaBT) {  		TorrentsBakaBT bakaBT = new TorrentsBakaBT ();  		List<TorrentLinkVM> bbLinks = bakaBT.GetTorrents (parms);  		links.AddRange (bbLinks);  	}  	if (src.TorrentSource == TorrentSourceType.AnimeBytes) {  		TorrentsAnimeBytes abytes = new TorrentsAnimeBytes ();  		List<TorrentLinkVM> abytesLinks = abytes.GetTorrents (parms);  		links.AddRange (abytesLinks);  	}  	if (src.TorrentSource == TorrentSourceType.TokyoToshokanAll || src.TorrentSource == TorrentSourceType.TokyoToshokanAnime) {  		TorrentsTokyoToshokan tt = new TorrentsTokyoToshokan (src.TorrentSource);  		List<TorrentLinkVM> ttLinks = null;  		Dictionary<string' TorrentLinkVM> dictLinks = new Dictionary<string' TorrentLinkVM> ();  		foreach (string grp in episodeGroupParms) {  			List<string> tempParms = new List<string> ();  			foreach (string parmTemp in parms)  				tempParms.Add (parmTemp);  			tempParms.Insert (0' grp);  			ttLinks = tt.GetTorrents (tempParms);  			logger.Trace ("Searching for: " + search.ToString () + "(" + grp + ")");  			// only use the first 10  			int x = 0;  			foreach (TorrentLinkVM link in ttLinks) {  				if (x == 0)  					break;  				dictLinks [link.TorrentDownloadLink] = link;  				//logger.Trace("Adding link: " + link.ToString());  			}  		}  		logger.Trace ("Searching for: " + search.ToString ());  		ttLinks = tt.GetTorrents (parms);  		foreach (TorrentLinkVM link in ttLinks) {  			dictLinks [link.TorrentDownloadLink] = link;  			//logger.Trace("Adding link: " + link.ToString());  		}  		links.AddRange (dictLinks.Values);  	}  }  
Magic Number,JMMClient.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\DownloadHelper.cs,SearchTorrents,The following statement contains a magic number: if (src.TorrentSource == TorrentSourceType.Nyaa) {  	TorrentsNyaa nyaa = new TorrentsNyaa ();  	List<TorrentLinkVM> ttLinks = null;  	Dictionary<string' TorrentLinkVM> dictLinks = new Dictionary<string' TorrentLinkVM> ();  	foreach (string grp in episodeGroupParms) {  		List<string> tempParms = new List<string> ();  		foreach (string parmTemp in parms)  			tempParms.Add (parmTemp);  		tempParms.Insert (0' grp);  		ttLinks = nyaa.GetTorrents (tempParms);  		logger.Trace ("Searching for: " + search.ToString () + "(" + grp + ")");  		// only use the first 10  		int x = 0;  		foreach (TorrentLinkVM link in ttLinks) {  			if (x == 10)  				break;  			dictLinks [link.TorrentDownloadLink] = link;  			logger.Trace ("Adding link: " + link.ToString ());  		}  	}  	logger.Trace ("Searching for: " + search.ToString ());  	ttLinks = nyaa.GetTorrents (parms);  	foreach (TorrentLinkVM link in ttLinks) {  		dictLinks [link.TorrentDownloadLink] = link;  		//logger.Trace("Adding link: " + link.ToString());  	}  	links.AddRange (dictLinks.Values);  }  
Magic Number,JMMClient.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\DownloadHelper.cs,SearchTorrents,The following statement contains a magic number: foreach (string grp in episodeGroupParms) {  	List<string> tempParms = new List<string> ();  	foreach (string parmTemp in parms)  		tempParms.Add (parmTemp);  	tempParms.Insert (0' grp);  	ttLinks = nyaa.GetTorrents (tempParms);  	logger.Trace ("Searching for: " + search.ToString () + "(" + grp + ")");  	// only use the first 10  	int x = 0;  	foreach (TorrentLinkVM link in ttLinks) {  		if (x == 10)  			break;  		dictLinks [link.TorrentDownloadLink] = link;  		logger.Trace ("Adding link: " + link.ToString ());  	}  }  
Magic Number,JMMClient.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\DownloadHelper.cs,SearchTorrents,The following statement contains a magic number: foreach (TorrentLinkVM link in ttLinks) {  	if (x == 10)  		break;  	dictLinks [link.TorrentDownloadLink] = link;  	logger.Trace ("Adding link: " + link.ToString ());  }  
Magic Number,JMMClient.Downloads,DownloadHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\DownloadHelper.cs,SearchTorrents,The following statement contains a magic number: if (x == 10)  	break;  
Magic Number,JMMClient.Downloads,DownloadSearchCriteria,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\DownloadSearchCriteria.cs,GetParms,The following statement contains a magic number: if (searchType == DownloadSearchType.Episode) {  	AnimeEpisodeVM ep = searchParameter as AnimeEpisodeVM;  	if (ep.AniDB_Anime == null)  		ep.RefreshAnime ();  	AniDB_AnimeVM anime = ep.AniDB_Anime;  	if (anime == null)  		return parms;  	// only use the first 2 words of the anime's title  	string[] titles = anime.MainTitle.Split (' ');  	int i = 0;  	foreach (string s in titles) {  		i++;  		parms.Add (s.Trim ());  		if (i == 2)  			break;  	}  	parms.Add (ep.EpisodeNumber.ToString ().PadLeft (2' '0'));  }  
Magic Number,JMMClient.Downloads,DownloadSearchCriteria,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\DownloadSearchCriteria.cs,GetParms,The following statement contains a magic number: if (searchType == DownloadSearchType.Episode) {  	AnimeEpisodeVM ep = searchParameter as AnimeEpisodeVM;  	if (ep.AniDB_Anime == null)  		ep.RefreshAnime ();  	AniDB_AnimeVM anime = ep.AniDB_Anime;  	if (anime == null)  		return parms;  	// only use the first 2 words of the anime's title  	string[] titles = anime.MainTitle.Split (' ');  	int i = 0;  	foreach (string s in titles) {  		i++;  		parms.Add (s.Trim ());  		if (i == 2)  			break;  	}  	parms.Add (ep.EpisodeNumber.ToString ().PadLeft (2' '0'));  }  
Magic Number,JMMClient.Downloads,DownloadSearchCriteria,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\DownloadSearchCriteria.cs,GetParms,The following statement contains a magic number: foreach (string s in titles) {  	i++;  	parms.Add (s.Trim ());  	if (i == 2)  		break;  }  
Magic Number,JMMClient.Downloads,DownloadSearchCriteria,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\DownloadSearchCriteria.cs,GetParms,The following statement contains a magic number: if (i == 2)  	break;  
Magic Number,JMMClient.Downloads,DownloadSearchCriteria,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\DownloadSearchCriteria.cs,GetParms,The following statement contains a magic number: parms.Add (ep.EpisodeNumber.ToString ().PadLeft (2' '0'));  
Magic Number,JMMClient.Downloads,DownloadSearchCriteria,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\DownloadSearchCriteria.cs,GetParms,The following statement contains a magic number: if (searchType == DownloadSearchType.Series) {  	AniDB_AnimeVM anime = searchParameter as AniDB_AnimeVM;  	// only use the first 2 words of the anime's title  	string[] titles = anime.MainTitle.Split (' ');  	int i = 0;  	foreach (string s in titles) {  		i++;  		parms.Add (s.Trim ());  		if (i == 2)  			break;  	}  }  
Magic Number,JMMClient.Downloads,DownloadSearchCriteria,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\DownloadSearchCriteria.cs,GetParms,The following statement contains a magic number: foreach (string s in titles) {  	i++;  	parms.Add (s.Trim ());  	if (i == 2)  		break;  }  
Magic Number,JMMClient.Downloads,DownloadSearchCriteria,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\DownloadSearchCriteria.cs,GetParms,The following statement contains a magic number: if (i == 2)  	break;  
Magic Number,JMMClient.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.Name = row [2].ToString ();  
Magic Number,JMMClient.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.Size = long.Parse (row [3].ToString ());  
Magic Number,JMMClient.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.PercentProgress = long.Parse (row [4].ToString ());  
Magic Number,JMMClient.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.Downloaded = long.Parse (row [5].ToString ());  
Magic Number,JMMClient.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.Uploaded = long.Parse (row [6].ToString ());  
Magic Number,JMMClient.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.Ratio = long.Parse (row [7].ToString ());  
Magic Number,JMMClient.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.UploadSpeed = long.Parse (row [8].ToString ());  
Magic Number,JMMClient.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.DownloadSpeed = long.Parse (row [9].ToString ());  
Magic Number,JMMClient.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.ETA = long.Parse (row [10].ToString ());  
Magic Number,JMMClient.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.Label = row [11].ToString ();  
Magic Number,JMMClient.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.PeersConnected = long.Parse (row [12].ToString ());  
Magic Number,JMMClient.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.PeersInSwarm = long.Parse (row [13].ToString ());  
Magic Number,JMMClient.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.SeedsConnected = long.Parse (row [14].ToString ());  
Magic Number,JMMClient.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.SeedsInSwarm = long.Parse (row [15].ToString ());  
Magic Number,JMMClient.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.Availability = long.Parse (row [16].ToString ());  
Magic Number,JMMClient.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.TorrentQueueOrder = long.Parse (row [17].ToString ());  
Magic Number,JMMClient.Downloads,Torrent,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\Torrent.cs,Torrent,The following statement contains a magic number: this.Remaining = long.Parse (row [18].ToString ());  
Magic Number,JMMClient.Downloads,TorrentFile,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentFile.cs,TorrentFile,The following statement contains a magic number: this.downloaded = long.Parse (row [2].ToString ());  
Magic Number,JMMClient.Downloads,TorrentFile,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentFile.cs,TorrentFile,The following statement contains a magic number: this.priority = long.Parse (row [3].ToString ());  
Magic Number,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,Login,The following statement contains a magic number: try {  	CookieContainer container = new CookieContainer ();  	string formUrl = "http://animebyt.es/login.php";  	// NOTE: This is the URL the form POSTs to' not the URL of the form (you can find this in the "action" attribute of the HTML's form tag  	string formParams = string.Format ("username={0}&password={1}"' username' password);  	HttpWebRequest req = (HttpWebRequest)WebRequest.Create (formUrl);  	req.ContentType = "application/x-www-form-urlencoded";  	req.Method = "POST";  	req.CookieContainer = container;  	req.UserAgent = "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)";  	req.Headers.Add (HttpRequestHeader.AcceptEncoding' "gzip'deflate");  	req.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;  	byte[] bytes = Encoding.ASCII.GetBytes (formParams);  	req.ContentLength = bytes.Length;  	using (Stream os = req.GetRequestStream ()) {  		os.Write (bytes' 0' bytes.Length);  	}  	HttpWebResponse WebResponse = (HttpWebResponse)req.GetResponse ();  	Stream responseStream = WebResponse.GetResponseStream ();  	String enco = WebResponse.CharacterSet;  	Encoding encoding = null;  	if (!String.IsNullOrEmpty (enco))  		encoding = Encoding.GetEncoding (WebResponse.CharacterSet);  	if (encoding == null)  		encoding = Encoding.Default;  	StreamReader Reader = new StreamReader (responseStream' encoding);  	string output = Reader.ReadToEnd ();  	logger.Trace (ShowAllCookies (container));  	if (container.Count < 3)  		return "";  	//Grab the cookie we just got back for this specifc page  	return container.GetCookieHeader (new Uri ("http://animebyt.es/index.php"));  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	return "";  }  
Magic Number,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,Login,The following statement contains a magic number: if (container.Count < 3)  	return "";  
Magic Number,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,ParseSource,The following statement contains a magic number: while (pos > 0) {  	if (pos <= 0)  		break;  	//int posnameStart = output.IndexOf(nameStart' pos + 1);  	int posnameStart2 = output.IndexOf (nameStart2' pos + nameStart.Length);  	int posnameEnd = output.IndexOf (nameEnd' posnameStart2 + nameStart2.Length + 1);  	string torName = output.Substring (posnameStart2 + nameStart2.Length' posnameEnd - posnameStart2 - nameStart2.Length);  	// remove html codes  	torName = HttpUtility.HtmlDecode (torName);  	int posTypeStart = output.IndexOf (typeStart' posnameEnd + 1);  	int posTypeEnd = output.IndexOf (typeEnd' posTypeStart + 1);  	string torType = output.Substring (posTypeStart + typeStart.Length' posTypeEnd - posTypeStart - typeStart.Length);  	// get all the torrents  	// find the section start and end  	int posTorSectionStart = output.IndexOf (torrentSectionStart' posTypeEnd + 1);  	int posTorSectionEnd = output.IndexOf (torrentSectionEnd' posTorSectionStart + 1);  	// find all the torrents  	int posTorDownloadStart = output.IndexOf (torDownloadStart' posTorSectionStart + 1);  	while (posTorDownloadStart < posTorSectionEnd && posTorDownloadStart > 0) {  		int posTorDownloadEnd = output.IndexOf (torDownloadEnd' posTorDownloadStart + 9);  		string torDownloadLink = output.Substring (posTorDownloadStart + 9' posTorDownloadEnd - posTorDownloadStart - 9);  		torDownloadLink = HttpUtility.HtmlDecode (torDownloadLink);  		int posTorInfoPreStart = output.IndexOf (torInfoPreStart' posTorDownloadEnd + 1);  		int posTorInfoStart = output.IndexOf (torInfoStart' posTorInfoPreStart + 1);  		int posTorInfoEnd = output.IndexOf (torInfoEnd' posTorInfoStart + 1);  		string torInfo = output.Substring (posTorInfoStart + 1' posTorInfoEnd - posTorInfoStart - 1);  		// TODO - extract out <img> imfomation  		// <img src="static/common/hentaic.png" alt="Hentai" title="This torrent is of censored hentai (18+) material!" />  		// <img src="static/common/flicon.png" alt="Freeleech!" title="This torrent is freeleech. Remember to seed!" />  		int posImgStart = torInfo.IndexOf ("<img src="' 0);  		if (posImgStart >= 0) {  			bool hentai = torInfo.ToUpper ().Contains (hentaiTag.ToUpper ());  			bool freeLeech = torInfo.ToUpper ().Contains (leechTag.ToUpper ());  			// remove the img alts  			torInfo = torInfo.Substring (0' posImgStart - 2);  			if (hentai)  				torInfo = torInfo + " [hentai]";  			if (freeLeech)  				torInfo = torInfo + " [FREE Leech]";  		}  		int posTorSizeStart = output.IndexOf (torSizeStart' posTorInfoEnd + 1);  		int posTorSizeEnd = output.IndexOf (torSizeEnd' posTorSizeStart + 1);  		string torSize = output.Substring (posTorSizeStart + torSizeStart.Length' posTorSizeEnd - posTorSizeStart - torSizeStart.Length);  		int posTorSeedStart = output.IndexOf (torSeedStart' posTorSizeEnd + 1);  		int posTorSeedEnd = output.IndexOf (torSeedEnd' posTorSeedStart + 1);  		string torSeed = output.Substring (posTorSeedStart + torSeedStart.Length' posTorSeedEnd - posTorSeedStart - torSeedStart.Length);  		int posTorLeechStart = output.IndexOf (torLeechStart' posTorSeedEnd + 1);  		int posTorLeechEnd = output.IndexOf (torLeechEnd' posTorLeechStart + 1);  		string torLeech = output.Substring (posTorLeechStart + torLeechStart.Length' posTorLeechEnd - posTorLeechStart - torLeechStart.Length);  		TorrentLinkVM torrentLink = new TorrentLinkVM (TorrentSourceType.AnimeBytes);  		torrentLink.TorrentDownloadLink = string.Format (@"http://animebyt.es/{0}"' torDownloadLink);  		torrentLink.TorrentLink = "";  		torrentLink.AnimeType = torType;  		torrentLink.TorrentName = torName + " - " + torInfo;  		torrentLink.Size = torSize.Trim ();  		torrentLink.Seeders = torSeed.Trim ();  		torrentLink.Leechers = torLeech.Trim ();  		torLinks.Add (torrentLink);  		// find the next download link  		posTorDownloadStart = output.IndexOf (torDownloadStart' posTorLeechEnd + 1);  	}  	// find the next torrent group  	pos = output.IndexOf (nameStart' pos + 3);  }  
Magic Number,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,ParseSource,The following statement contains a magic number: while (pos > 0) {  	if (pos <= 0)  		break;  	//int posnameStart = output.IndexOf(nameStart' pos + 1);  	int posnameStart2 = output.IndexOf (nameStart2' pos + nameStart.Length);  	int posnameEnd = output.IndexOf (nameEnd' posnameStart2 + nameStart2.Length + 1);  	string torName = output.Substring (posnameStart2 + nameStart2.Length' posnameEnd - posnameStart2 - nameStart2.Length);  	// remove html codes  	torName = HttpUtility.HtmlDecode (torName);  	int posTypeStart = output.IndexOf (typeStart' posnameEnd + 1);  	int posTypeEnd = output.IndexOf (typeEnd' posTypeStart + 1);  	string torType = output.Substring (posTypeStart + typeStart.Length' posTypeEnd - posTypeStart - typeStart.Length);  	// get all the torrents  	// find the section start and end  	int posTorSectionStart = output.IndexOf (torrentSectionStart' posTypeEnd + 1);  	int posTorSectionEnd = output.IndexOf (torrentSectionEnd' posTorSectionStart + 1);  	// find all the torrents  	int posTorDownloadStart = output.IndexOf (torDownloadStart' posTorSectionStart + 1);  	while (posTorDownloadStart < posTorSectionEnd && posTorDownloadStart > 0) {  		int posTorDownloadEnd = output.IndexOf (torDownloadEnd' posTorDownloadStart + 9);  		string torDownloadLink = output.Substring (posTorDownloadStart + 9' posTorDownloadEnd - posTorDownloadStart - 9);  		torDownloadLink = HttpUtility.HtmlDecode (torDownloadLink);  		int posTorInfoPreStart = output.IndexOf (torInfoPreStart' posTorDownloadEnd + 1);  		int posTorInfoStart = output.IndexOf (torInfoStart' posTorInfoPreStart + 1);  		int posTorInfoEnd = output.IndexOf (torInfoEnd' posTorInfoStart + 1);  		string torInfo = output.Substring (posTorInfoStart + 1' posTorInfoEnd - posTorInfoStart - 1);  		// TODO - extract out <img> imfomation  		// <img src="static/common/hentaic.png" alt="Hentai" title="This torrent is of censored hentai (18+) material!" />  		// <img src="static/common/flicon.png" alt="Freeleech!" title="This torrent is freeleech. Remember to seed!" />  		int posImgStart = torInfo.IndexOf ("<img src="' 0);  		if (posImgStart >= 0) {  			bool hentai = torInfo.ToUpper ().Contains (hentaiTag.ToUpper ());  			bool freeLeech = torInfo.ToUpper ().Contains (leechTag.ToUpper ());  			// remove the img alts  			torInfo = torInfo.Substring (0' posImgStart - 2);  			if (hentai)  				torInfo = torInfo + " [hentai]";  			if (freeLeech)  				torInfo = torInfo + " [FREE Leech]";  		}  		int posTorSizeStart = output.IndexOf (torSizeStart' posTorInfoEnd + 1);  		int posTorSizeEnd = output.IndexOf (torSizeEnd' posTorSizeStart + 1);  		string torSize = output.Substring (posTorSizeStart + torSizeStart.Length' posTorSizeEnd - posTorSizeStart - torSizeStart.Length);  		int posTorSeedStart = output.IndexOf (torSeedStart' posTorSizeEnd + 1);  		int posTorSeedEnd = output.IndexOf (torSeedEnd' posTorSeedStart + 1);  		string torSeed = output.Substring (posTorSeedStart + torSeedStart.Length' posTorSeedEnd - posTorSeedStart - torSeedStart.Length);  		int posTorLeechStart = output.IndexOf (torLeechStart' posTorSeedEnd + 1);  		int posTorLeechEnd = output.IndexOf (torLeechEnd' posTorLeechStart + 1);  		string torLeech = output.Substring (posTorLeechStart + torLeechStart.Length' posTorLeechEnd - posTorLeechStart - torLeechStart.Length);  		TorrentLinkVM torrentLink = new TorrentLinkVM (TorrentSourceType.AnimeBytes);  		torrentLink.TorrentDownloadLink = string.Format (@"http://animebyt.es/{0}"' torDownloadLink);  		torrentLink.TorrentLink = "";  		torrentLink.AnimeType = torType;  		torrentLink.TorrentName = torName + " - " + torInfo;  		torrentLink.Size = torSize.Trim ();  		torrentLink.Seeders = torSeed.Trim ();  		torrentLink.Leechers = torLeech.Trim ();  		torLinks.Add (torrentLink);  		// find the next download link  		posTorDownloadStart = output.IndexOf (torDownloadStart' posTorLeechEnd + 1);  	}  	// find the next torrent group  	pos = output.IndexOf (nameStart' pos + 3);  }  
Magic Number,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,ParseSource,The following statement contains a magic number: while (pos > 0) {  	if (pos <= 0)  		break;  	//int posnameStart = output.IndexOf(nameStart' pos + 1);  	int posnameStart2 = output.IndexOf (nameStart2' pos + nameStart.Length);  	int posnameEnd = output.IndexOf (nameEnd' posnameStart2 + nameStart2.Length + 1);  	string torName = output.Substring (posnameStart2 + nameStart2.Length' posnameEnd - posnameStart2 - nameStart2.Length);  	// remove html codes  	torName = HttpUtility.HtmlDecode (torName);  	int posTypeStart = output.IndexOf (typeStart' posnameEnd + 1);  	int posTypeEnd = output.IndexOf (typeEnd' posTypeStart + 1);  	string torType = output.Substring (posTypeStart + typeStart.Length' posTypeEnd - posTypeStart - typeStart.Length);  	// get all the torrents  	// find the section start and end  	int posTorSectionStart = output.IndexOf (torrentSectionStart' posTypeEnd + 1);  	int posTorSectionEnd = output.IndexOf (torrentSectionEnd' posTorSectionStart + 1);  	// find all the torrents  	int posTorDownloadStart = output.IndexOf (torDownloadStart' posTorSectionStart + 1);  	while (posTorDownloadStart < posTorSectionEnd && posTorDownloadStart > 0) {  		int posTorDownloadEnd = output.IndexOf (torDownloadEnd' posTorDownloadStart + 9);  		string torDownloadLink = output.Substring (posTorDownloadStart + 9' posTorDownloadEnd - posTorDownloadStart - 9);  		torDownloadLink = HttpUtility.HtmlDecode (torDownloadLink);  		int posTorInfoPreStart = output.IndexOf (torInfoPreStart' posTorDownloadEnd + 1);  		int posTorInfoStart = output.IndexOf (torInfoStart' posTorInfoPreStart + 1);  		int posTorInfoEnd = output.IndexOf (torInfoEnd' posTorInfoStart + 1);  		string torInfo = output.Substring (posTorInfoStart + 1' posTorInfoEnd - posTorInfoStart - 1);  		// TODO - extract out <img> imfomation  		// <img src="static/common/hentaic.png" alt="Hentai" title="This torrent is of censored hentai (18+) material!" />  		// <img src="static/common/flicon.png" alt="Freeleech!" title="This torrent is freeleech. Remember to seed!" />  		int posImgStart = torInfo.IndexOf ("<img src="' 0);  		if (posImgStart >= 0) {  			bool hentai = torInfo.ToUpper ().Contains (hentaiTag.ToUpper ());  			bool freeLeech = torInfo.ToUpper ().Contains (leechTag.ToUpper ());  			// remove the img alts  			torInfo = torInfo.Substring (0' posImgStart - 2);  			if (hentai)  				torInfo = torInfo + " [hentai]";  			if (freeLeech)  				torInfo = torInfo + " [FREE Leech]";  		}  		int posTorSizeStart = output.IndexOf (torSizeStart' posTorInfoEnd + 1);  		int posTorSizeEnd = output.IndexOf (torSizeEnd' posTorSizeStart + 1);  		string torSize = output.Substring (posTorSizeStart + torSizeStart.Length' posTorSizeEnd - posTorSizeStart - torSizeStart.Length);  		int posTorSeedStart = output.IndexOf (torSeedStart' posTorSizeEnd + 1);  		int posTorSeedEnd = output.IndexOf (torSeedEnd' posTorSeedStart + 1);  		string torSeed = output.Substring (posTorSeedStart + torSeedStart.Length' posTorSeedEnd - posTorSeedStart - torSeedStart.Length);  		int posTorLeechStart = output.IndexOf (torLeechStart' posTorSeedEnd + 1);  		int posTorLeechEnd = output.IndexOf (torLeechEnd' posTorLeechStart + 1);  		string torLeech = output.Substring (posTorLeechStart + torLeechStart.Length' posTorLeechEnd - posTorLeechStart - torLeechStart.Length);  		TorrentLinkVM torrentLink = new TorrentLinkVM (TorrentSourceType.AnimeBytes);  		torrentLink.TorrentDownloadLink = string.Format (@"http://animebyt.es/{0}"' torDownloadLink);  		torrentLink.TorrentLink = "";  		torrentLink.AnimeType = torType;  		torrentLink.TorrentName = torName + " - " + torInfo;  		torrentLink.Size = torSize.Trim ();  		torrentLink.Seeders = torSeed.Trim ();  		torrentLink.Leechers = torLeech.Trim ();  		torLinks.Add (torrentLink);  		// find the next download link  		posTorDownloadStart = output.IndexOf (torDownloadStart' posTorLeechEnd + 1);  	}  	// find the next torrent group  	pos = output.IndexOf (nameStart' pos + 3);  }  
Magic Number,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,ParseSource,The following statement contains a magic number: while (pos > 0) {  	if (pos <= 0)  		break;  	//int posnameStart = output.IndexOf(nameStart' pos + 1);  	int posnameStart2 = output.IndexOf (nameStart2' pos + nameStart.Length);  	int posnameEnd = output.IndexOf (nameEnd' posnameStart2 + nameStart2.Length + 1);  	string torName = output.Substring (posnameStart2 + nameStart2.Length' posnameEnd - posnameStart2 - nameStart2.Length);  	// remove html codes  	torName = HttpUtility.HtmlDecode (torName);  	int posTypeStart = output.IndexOf (typeStart' posnameEnd + 1);  	int posTypeEnd = output.IndexOf (typeEnd' posTypeStart + 1);  	string torType = output.Substring (posTypeStart + typeStart.Length' posTypeEnd - posTypeStart - typeStart.Length);  	// get all the torrents  	// find the section start and end  	int posTorSectionStart = output.IndexOf (torrentSectionStart' posTypeEnd + 1);  	int posTorSectionEnd = output.IndexOf (torrentSectionEnd' posTorSectionStart + 1);  	// find all the torrents  	int posTorDownloadStart = output.IndexOf (torDownloadStart' posTorSectionStart + 1);  	while (posTorDownloadStart < posTorSectionEnd && posTorDownloadStart > 0) {  		int posTorDownloadEnd = output.IndexOf (torDownloadEnd' posTorDownloadStart + 9);  		string torDownloadLink = output.Substring (posTorDownloadStart + 9' posTorDownloadEnd - posTorDownloadStart - 9);  		torDownloadLink = HttpUtility.HtmlDecode (torDownloadLink);  		int posTorInfoPreStart = output.IndexOf (torInfoPreStart' posTorDownloadEnd + 1);  		int posTorInfoStart = output.IndexOf (torInfoStart' posTorInfoPreStart + 1);  		int posTorInfoEnd = output.IndexOf (torInfoEnd' posTorInfoStart + 1);  		string torInfo = output.Substring (posTorInfoStart + 1' posTorInfoEnd - posTorInfoStart - 1);  		// TODO - extract out <img> imfomation  		// <img src="static/common/hentaic.png" alt="Hentai" title="This torrent is of censored hentai (18+) material!" />  		// <img src="static/common/flicon.png" alt="Freeleech!" title="This torrent is freeleech. Remember to seed!" />  		int posImgStart = torInfo.IndexOf ("<img src="' 0);  		if (posImgStart >= 0) {  			bool hentai = torInfo.ToUpper ().Contains (hentaiTag.ToUpper ());  			bool freeLeech = torInfo.ToUpper ().Contains (leechTag.ToUpper ());  			// remove the img alts  			torInfo = torInfo.Substring (0' posImgStart - 2);  			if (hentai)  				torInfo = torInfo + " [hentai]";  			if (freeLeech)  				torInfo = torInfo + " [FREE Leech]";  		}  		int posTorSizeStart = output.IndexOf (torSizeStart' posTorInfoEnd + 1);  		int posTorSizeEnd = output.IndexOf (torSizeEnd' posTorSizeStart + 1);  		string torSize = output.Substring (posTorSizeStart + torSizeStart.Length' posTorSizeEnd - posTorSizeStart - torSizeStart.Length);  		int posTorSeedStart = output.IndexOf (torSeedStart' posTorSizeEnd + 1);  		int posTorSeedEnd = output.IndexOf (torSeedEnd' posTorSeedStart + 1);  		string torSeed = output.Substring (posTorSeedStart + torSeedStart.Length' posTorSeedEnd - posTorSeedStart - torSeedStart.Length);  		int posTorLeechStart = output.IndexOf (torLeechStart' posTorSeedEnd + 1);  		int posTorLeechEnd = output.IndexOf (torLeechEnd' posTorLeechStart + 1);  		string torLeech = output.Substring (posTorLeechStart + torLeechStart.Length' posTorLeechEnd - posTorLeechStart - torLeechStart.Length);  		TorrentLinkVM torrentLink = new TorrentLinkVM (TorrentSourceType.AnimeBytes);  		torrentLink.TorrentDownloadLink = string.Format (@"http://animebyt.es/{0}"' torDownloadLink);  		torrentLink.TorrentLink = "";  		torrentLink.AnimeType = torType;  		torrentLink.TorrentName = torName + " - " + torInfo;  		torrentLink.Size = torSize.Trim ();  		torrentLink.Seeders = torSeed.Trim ();  		torrentLink.Leechers = torLeech.Trim ();  		torLinks.Add (torrentLink);  		// find the next download link  		posTorDownloadStart = output.IndexOf (torDownloadStart' posTorLeechEnd + 1);  	}  	// find the next torrent group  	pos = output.IndexOf (nameStart' pos + 3);  }  
Magic Number,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,ParseSource,The following statement contains a magic number: while (pos > 0) {  	if (pos <= 0)  		break;  	//int posnameStart = output.IndexOf(nameStart' pos + 1);  	int posnameStart2 = output.IndexOf (nameStart2' pos + nameStart.Length);  	int posnameEnd = output.IndexOf (nameEnd' posnameStart2 + nameStart2.Length + 1);  	string torName = output.Substring (posnameStart2 + nameStart2.Length' posnameEnd - posnameStart2 - nameStart2.Length);  	// remove html codes  	torName = HttpUtility.HtmlDecode (torName);  	int posTypeStart = output.IndexOf (typeStart' posnameEnd + 1);  	int posTypeEnd = output.IndexOf (typeEnd' posTypeStart + 1);  	string torType = output.Substring (posTypeStart + typeStart.Length' posTypeEnd - posTypeStart - typeStart.Length);  	// get all the torrents  	// find the section start and end  	int posTorSectionStart = output.IndexOf (torrentSectionStart' posTypeEnd + 1);  	int posTorSectionEnd = output.IndexOf (torrentSectionEnd' posTorSectionStart + 1);  	// find all the torrents  	int posTorDownloadStart = output.IndexOf (torDownloadStart' posTorSectionStart + 1);  	while (posTorDownloadStart < posTorSectionEnd && posTorDownloadStart > 0) {  		int posTorDownloadEnd = output.IndexOf (torDownloadEnd' posTorDownloadStart + 9);  		string torDownloadLink = output.Substring (posTorDownloadStart + 9' posTorDownloadEnd - posTorDownloadStart - 9);  		torDownloadLink = HttpUtility.HtmlDecode (torDownloadLink);  		int posTorInfoPreStart = output.IndexOf (torInfoPreStart' posTorDownloadEnd + 1);  		int posTorInfoStart = output.IndexOf (torInfoStart' posTorInfoPreStart + 1);  		int posTorInfoEnd = output.IndexOf (torInfoEnd' posTorInfoStart + 1);  		string torInfo = output.Substring (posTorInfoStart + 1' posTorInfoEnd - posTorInfoStart - 1);  		// TODO - extract out <img> imfomation  		// <img src="static/common/hentaic.png" alt="Hentai" title="This torrent is of censored hentai (18+) material!" />  		// <img src="static/common/flicon.png" alt="Freeleech!" title="This torrent is freeleech. Remember to seed!" />  		int posImgStart = torInfo.IndexOf ("<img src="' 0);  		if (posImgStart >= 0) {  			bool hentai = torInfo.ToUpper ().Contains (hentaiTag.ToUpper ());  			bool freeLeech = torInfo.ToUpper ().Contains (leechTag.ToUpper ());  			// remove the img alts  			torInfo = torInfo.Substring (0' posImgStart - 2);  			if (hentai)  				torInfo = torInfo + " [hentai]";  			if (freeLeech)  				torInfo = torInfo + " [FREE Leech]";  		}  		int posTorSizeStart = output.IndexOf (torSizeStart' posTorInfoEnd + 1);  		int posTorSizeEnd = output.IndexOf (torSizeEnd' posTorSizeStart + 1);  		string torSize = output.Substring (posTorSizeStart + torSizeStart.Length' posTorSizeEnd - posTorSizeStart - torSizeStart.Length);  		int posTorSeedStart = output.IndexOf (torSeedStart' posTorSizeEnd + 1);  		int posTorSeedEnd = output.IndexOf (torSeedEnd' posTorSeedStart + 1);  		string torSeed = output.Substring (posTorSeedStart + torSeedStart.Length' posTorSeedEnd - posTorSeedStart - torSeedStart.Length);  		int posTorLeechStart = output.IndexOf (torLeechStart' posTorSeedEnd + 1);  		int posTorLeechEnd = output.IndexOf (torLeechEnd' posTorLeechStart + 1);  		string torLeech = output.Substring (posTorLeechStart + torLeechStart.Length' posTorLeechEnd - posTorLeechStart - torLeechStart.Length);  		TorrentLinkVM torrentLink = new TorrentLinkVM (TorrentSourceType.AnimeBytes);  		torrentLink.TorrentDownloadLink = string.Format (@"http://animebyt.es/{0}"' torDownloadLink);  		torrentLink.TorrentLink = "";  		torrentLink.AnimeType = torType;  		torrentLink.TorrentName = torName + " - " + torInfo;  		torrentLink.Size = torSize.Trim ();  		torrentLink.Seeders = torSeed.Trim ();  		torrentLink.Leechers = torLeech.Trim ();  		torLinks.Add (torrentLink);  		// find the next download link  		posTorDownloadStart = output.IndexOf (torDownloadStart' posTorLeechEnd + 1);  	}  	// find the next torrent group  	pos = output.IndexOf (nameStart' pos + 3);  }  
Magic Number,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,ParseSource,The following statement contains a magic number: while (posTorDownloadStart < posTorSectionEnd && posTorDownloadStart > 0) {  	int posTorDownloadEnd = output.IndexOf (torDownloadEnd' posTorDownloadStart + 9);  	string torDownloadLink = output.Substring (posTorDownloadStart + 9' posTorDownloadEnd - posTorDownloadStart - 9);  	torDownloadLink = HttpUtility.HtmlDecode (torDownloadLink);  	int posTorInfoPreStart = output.IndexOf (torInfoPreStart' posTorDownloadEnd + 1);  	int posTorInfoStart = output.IndexOf (torInfoStart' posTorInfoPreStart + 1);  	int posTorInfoEnd = output.IndexOf (torInfoEnd' posTorInfoStart + 1);  	string torInfo = output.Substring (posTorInfoStart + 1' posTorInfoEnd - posTorInfoStart - 1);  	// TODO - extract out <img> imfomation  	// <img src="static/common/hentaic.png" alt="Hentai" title="This torrent is of censored hentai (18+) material!" />  	// <img src="static/common/flicon.png" alt="Freeleech!" title="This torrent is freeleech. Remember to seed!" />  	int posImgStart = torInfo.IndexOf ("<img src="' 0);  	if (posImgStart >= 0) {  		bool hentai = torInfo.ToUpper ().Contains (hentaiTag.ToUpper ());  		bool freeLeech = torInfo.ToUpper ().Contains (leechTag.ToUpper ());  		// remove the img alts  		torInfo = torInfo.Substring (0' posImgStart - 2);  		if (hentai)  			torInfo = torInfo + " [hentai]";  		if (freeLeech)  			torInfo = torInfo + " [FREE Leech]";  	}  	int posTorSizeStart = output.IndexOf (torSizeStart' posTorInfoEnd + 1);  	int posTorSizeEnd = output.IndexOf (torSizeEnd' posTorSizeStart + 1);  	string torSize = output.Substring (posTorSizeStart + torSizeStart.Length' posTorSizeEnd - posTorSizeStart - torSizeStart.Length);  	int posTorSeedStart = output.IndexOf (torSeedStart' posTorSizeEnd + 1);  	int posTorSeedEnd = output.IndexOf (torSeedEnd' posTorSeedStart + 1);  	string torSeed = output.Substring (posTorSeedStart + torSeedStart.Length' posTorSeedEnd - posTorSeedStart - torSeedStart.Length);  	int posTorLeechStart = output.IndexOf (torLeechStart' posTorSeedEnd + 1);  	int posTorLeechEnd = output.IndexOf (torLeechEnd' posTorLeechStart + 1);  	string torLeech = output.Substring (posTorLeechStart + torLeechStart.Length' posTorLeechEnd - posTorLeechStart - torLeechStart.Length);  	TorrentLinkVM torrentLink = new TorrentLinkVM (TorrentSourceType.AnimeBytes);  	torrentLink.TorrentDownloadLink = string.Format (@"http://animebyt.es/{0}"' torDownloadLink);  	torrentLink.TorrentLink = "";  	torrentLink.AnimeType = torType;  	torrentLink.TorrentName = torName + " - " + torInfo;  	torrentLink.Size = torSize.Trim ();  	torrentLink.Seeders = torSeed.Trim ();  	torrentLink.Leechers = torLeech.Trim ();  	torLinks.Add (torrentLink);  	// find the next download link  	posTorDownloadStart = output.IndexOf (torDownloadStart' posTorLeechEnd + 1);  }  
Magic Number,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,ParseSource,The following statement contains a magic number: while (posTorDownloadStart < posTorSectionEnd && posTorDownloadStart > 0) {  	int posTorDownloadEnd = output.IndexOf (torDownloadEnd' posTorDownloadStart + 9);  	string torDownloadLink = output.Substring (posTorDownloadStart + 9' posTorDownloadEnd - posTorDownloadStart - 9);  	torDownloadLink = HttpUtility.HtmlDecode (torDownloadLink);  	int posTorInfoPreStart = output.IndexOf (torInfoPreStart' posTorDownloadEnd + 1);  	int posTorInfoStart = output.IndexOf (torInfoStart' posTorInfoPreStart + 1);  	int posTorInfoEnd = output.IndexOf (torInfoEnd' posTorInfoStart + 1);  	string torInfo = output.Substring (posTorInfoStart + 1' posTorInfoEnd - posTorInfoStart - 1);  	// TODO - extract out <img> imfomation  	// <img src="static/common/hentaic.png" alt="Hentai" title="This torrent is of censored hentai (18+) material!" />  	// <img src="static/common/flicon.png" alt="Freeleech!" title="This torrent is freeleech. Remember to seed!" />  	int posImgStart = torInfo.IndexOf ("<img src="' 0);  	if (posImgStart >= 0) {  		bool hentai = torInfo.ToUpper ().Contains (hentaiTag.ToUpper ());  		bool freeLeech = torInfo.ToUpper ().Contains (leechTag.ToUpper ());  		// remove the img alts  		torInfo = torInfo.Substring (0' posImgStart - 2);  		if (hentai)  			torInfo = torInfo + " [hentai]";  		if (freeLeech)  			torInfo = torInfo + " [FREE Leech]";  	}  	int posTorSizeStart = output.IndexOf (torSizeStart' posTorInfoEnd + 1);  	int posTorSizeEnd = output.IndexOf (torSizeEnd' posTorSizeStart + 1);  	string torSize = output.Substring (posTorSizeStart + torSizeStart.Length' posTorSizeEnd - posTorSizeStart - torSizeStart.Length);  	int posTorSeedStart = output.IndexOf (torSeedStart' posTorSizeEnd + 1);  	int posTorSeedEnd = output.IndexOf (torSeedEnd' posTorSeedStart + 1);  	string torSeed = output.Substring (posTorSeedStart + torSeedStart.Length' posTorSeedEnd - posTorSeedStart - torSeedStart.Length);  	int posTorLeechStart = output.IndexOf (torLeechStart' posTorSeedEnd + 1);  	int posTorLeechEnd = output.IndexOf (torLeechEnd' posTorLeechStart + 1);  	string torLeech = output.Substring (posTorLeechStart + torLeechStart.Length' posTorLeechEnd - posTorLeechStart - torLeechStart.Length);  	TorrentLinkVM torrentLink = new TorrentLinkVM (TorrentSourceType.AnimeBytes);  	torrentLink.TorrentDownloadLink = string.Format (@"http://animebyt.es/{0}"' torDownloadLink);  	torrentLink.TorrentLink = "";  	torrentLink.AnimeType = torType;  	torrentLink.TorrentName = torName + " - " + torInfo;  	torrentLink.Size = torSize.Trim ();  	torrentLink.Seeders = torSeed.Trim ();  	torrentLink.Leechers = torLeech.Trim ();  	torLinks.Add (torrentLink);  	// find the next download link  	posTorDownloadStart = output.IndexOf (torDownloadStart' posTorLeechEnd + 1);  }  
Magic Number,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,ParseSource,The following statement contains a magic number: while (posTorDownloadStart < posTorSectionEnd && posTorDownloadStart > 0) {  	int posTorDownloadEnd = output.IndexOf (torDownloadEnd' posTorDownloadStart + 9);  	string torDownloadLink = output.Substring (posTorDownloadStart + 9' posTorDownloadEnd - posTorDownloadStart - 9);  	torDownloadLink = HttpUtility.HtmlDecode (torDownloadLink);  	int posTorInfoPreStart = output.IndexOf (torInfoPreStart' posTorDownloadEnd + 1);  	int posTorInfoStart = output.IndexOf (torInfoStart' posTorInfoPreStart + 1);  	int posTorInfoEnd = output.IndexOf (torInfoEnd' posTorInfoStart + 1);  	string torInfo = output.Substring (posTorInfoStart + 1' posTorInfoEnd - posTorInfoStart - 1);  	// TODO - extract out <img> imfomation  	// <img src="static/common/hentaic.png" alt="Hentai" title="This torrent is of censored hentai (18+) material!" />  	// <img src="static/common/flicon.png" alt="Freeleech!" title="This torrent is freeleech. Remember to seed!" />  	int posImgStart = torInfo.IndexOf ("<img src="' 0);  	if (posImgStart >= 0) {  		bool hentai = torInfo.ToUpper ().Contains (hentaiTag.ToUpper ());  		bool freeLeech = torInfo.ToUpper ().Contains (leechTag.ToUpper ());  		// remove the img alts  		torInfo = torInfo.Substring (0' posImgStart - 2);  		if (hentai)  			torInfo = torInfo + " [hentai]";  		if (freeLeech)  			torInfo = torInfo + " [FREE Leech]";  	}  	int posTorSizeStart = output.IndexOf (torSizeStart' posTorInfoEnd + 1);  	int posTorSizeEnd = output.IndexOf (torSizeEnd' posTorSizeStart + 1);  	string torSize = output.Substring (posTorSizeStart + torSizeStart.Length' posTorSizeEnd - posTorSizeStart - torSizeStart.Length);  	int posTorSeedStart = output.IndexOf (torSeedStart' posTorSizeEnd + 1);  	int posTorSeedEnd = output.IndexOf (torSeedEnd' posTorSeedStart + 1);  	string torSeed = output.Substring (posTorSeedStart + torSeedStart.Length' posTorSeedEnd - posTorSeedStart - torSeedStart.Length);  	int posTorLeechStart = output.IndexOf (torLeechStart' posTorSeedEnd + 1);  	int posTorLeechEnd = output.IndexOf (torLeechEnd' posTorLeechStart + 1);  	string torLeech = output.Substring (posTorLeechStart + torLeechStart.Length' posTorLeechEnd - posTorLeechStart - torLeechStart.Length);  	TorrentLinkVM torrentLink = new TorrentLinkVM (TorrentSourceType.AnimeBytes);  	torrentLink.TorrentDownloadLink = string.Format (@"http://animebyt.es/{0}"' torDownloadLink);  	torrentLink.TorrentLink = "";  	torrentLink.AnimeType = torType;  	torrentLink.TorrentName = torName + " - " + torInfo;  	torrentLink.Size = torSize.Trim ();  	torrentLink.Seeders = torSeed.Trim ();  	torrentLink.Leechers = torLeech.Trim ();  	torLinks.Add (torrentLink);  	// find the next download link  	posTorDownloadStart = output.IndexOf (torDownloadStart' posTorLeechEnd + 1);  }  
Magic Number,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,ParseSource,The following statement contains a magic number: while (posTorDownloadStart < posTorSectionEnd && posTorDownloadStart > 0) {  	int posTorDownloadEnd = output.IndexOf (torDownloadEnd' posTorDownloadStart + 9);  	string torDownloadLink = output.Substring (posTorDownloadStart + 9' posTorDownloadEnd - posTorDownloadStart - 9);  	torDownloadLink = HttpUtility.HtmlDecode (torDownloadLink);  	int posTorInfoPreStart = output.IndexOf (torInfoPreStart' posTorDownloadEnd + 1);  	int posTorInfoStart = output.IndexOf (torInfoStart' posTorInfoPreStart + 1);  	int posTorInfoEnd = output.IndexOf (torInfoEnd' posTorInfoStart + 1);  	string torInfo = output.Substring (posTorInfoStart + 1' posTorInfoEnd - posTorInfoStart - 1);  	// TODO - extract out <img> imfomation  	// <img src="static/common/hentaic.png" alt="Hentai" title="This torrent is of censored hentai (18+) material!" />  	// <img src="static/common/flicon.png" alt="Freeleech!" title="This torrent is freeleech. Remember to seed!" />  	int posImgStart = torInfo.IndexOf ("<img src="' 0);  	if (posImgStart >= 0) {  		bool hentai = torInfo.ToUpper ().Contains (hentaiTag.ToUpper ());  		bool freeLeech = torInfo.ToUpper ().Contains (leechTag.ToUpper ());  		// remove the img alts  		torInfo = torInfo.Substring (0' posImgStart - 2);  		if (hentai)  			torInfo = torInfo + " [hentai]";  		if (freeLeech)  			torInfo = torInfo + " [FREE Leech]";  	}  	int posTorSizeStart = output.IndexOf (torSizeStart' posTorInfoEnd + 1);  	int posTorSizeEnd = output.IndexOf (torSizeEnd' posTorSizeStart + 1);  	string torSize = output.Substring (posTorSizeStart + torSizeStart.Length' posTorSizeEnd - posTorSizeStart - torSizeStart.Length);  	int posTorSeedStart = output.IndexOf (torSeedStart' posTorSizeEnd + 1);  	int posTorSeedEnd = output.IndexOf (torSeedEnd' posTorSeedStart + 1);  	string torSeed = output.Substring (posTorSeedStart + torSeedStart.Length' posTorSeedEnd - posTorSeedStart - torSeedStart.Length);  	int posTorLeechStart = output.IndexOf (torLeechStart' posTorSeedEnd + 1);  	int posTorLeechEnd = output.IndexOf (torLeechEnd' posTorLeechStart + 1);  	string torLeech = output.Substring (posTorLeechStart + torLeechStart.Length' posTorLeechEnd - posTorLeechStart - torLeechStart.Length);  	TorrentLinkVM torrentLink = new TorrentLinkVM (TorrentSourceType.AnimeBytes);  	torrentLink.TorrentDownloadLink = string.Format (@"http://animebyt.es/{0}"' torDownloadLink);  	torrentLink.TorrentLink = "";  	torrentLink.AnimeType = torType;  	torrentLink.TorrentName = torName + " - " + torInfo;  	torrentLink.Size = torSize.Trim ();  	torrentLink.Seeders = torSeed.Trim ();  	torrentLink.Leechers = torLeech.Trim ();  	torLinks.Add (torrentLink);  	// find the next download link  	posTorDownloadStart = output.IndexOf (torDownloadStart' posTorLeechEnd + 1);  }  
Magic Number,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,ParseSource,The following statement contains a magic number: if (posImgStart >= 0) {  	bool hentai = torInfo.ToUpper ().Contains (hentaiTag.ToUpper ());  	bool freeLeech = torInfo.ToUpper ().Contains (leechTag.ToUpper ());  	// remove the img alts  	torInfo = torInfo.Substring (0' posImgStart - 2);  	if (hentai)  		torInfo = torInfo + " [hentai]";  	if (freeLeech)  		torInfo = torInfo + " [FREE Leech]";  }  
Magic Number,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,ParseSource,The following statement contains a magic number: torInfo = torInfo.Substring (0' posImgStart - 2);  
Magic Number,JMMClient.Downloads,TorrentsAnimeBytes,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsAnimeBytes.cs,ParseSource,The following statement contains a magic number: pos = output.IndexOf (nameStart' pos + 3);  
Magic Number,JMMClient.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsBakaBT.cs,Login,The following statement contains a magic number: try {  	CookieContainer container = new CookieContainer ();  	string formUrl = "http://bakabt.me/login.php";  	// NOTE: This is the URL the form POSTs to' not the URL of the form (you can find this in the "action" attribute of the HTML's form tag  	string formParams = string.Format ("username={0}&password={1}"' username' password);  	HttpWebRequest req = (HttpWebRequest)WebRequest.Create (formUrl);  	req.ContentType = "application/x-www-form-urlencoded";  	req.Method = "POST";  	//req.AllowAutoRedirect = false;  	req.CookieContainer = container;  	req.UserAgent = "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)";  	req.Headers.Add (HttpRequestHeader.AcceptEncoding' "gzip'deflate");  	req.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;  	byte[] bytes = Encoding.ASCII.GetBytes (formParams);  	req.ContentLength = bytes.Length;  	using (Stream os = req.GetRequestStream ()) {  		os.Write (bytes' 0' bytes.Length);  	}  	HttpWebResponse WebResponse = (HttpWebResponse)req.GetResponse ();  	Stream responseStream = WebResponse.GetResponseStream ();  	String enco = WebResponse.CharacterSet;  	Encoding encoding = null;  	if (!String.IsNullOrEmpty (enco))  		encoding = Encoding.GetEncoding (WebResponse.CharacterSet);  	if (encoding == null)  		encoding = Encoding.Default;  	StreamReader Reader = new StreamReader (responseStream' encoding);  	string output = Reader.ReadToEnd ();  	logger.Trace (ShowAllCookies (container));  	if (container.Count < 3)  		return "";  	//Grab the cookie we just got back for this specifc page  	return container.GetCookieHeader (new Uri ("http://www.bakabt.me/index.php"));  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	return "";  }  
Magic Number,JMMClient.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsBakaBT.cs,Login,The following statement contains a magic number: if (container.Count < 3)  	return "";  
Magic Number,JMMClient.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsBakaBT.cs,ParseSource,The following statement contains a magic number: while (pos > 0) {  	if (pos <= 0)  		break;  	int poscatStart = output.IndexOf (catStart' pos + 1);  	int poscatEnd = output.IndexOf (catEnd' poscatStart + catStart.Length + 1);  	string cat = output.Substring (poscatStart + catStart.Length' poscatEnd - poscatStart - catStart.Length);  	int poslinkStart = output.IndexOf (linkStart' poscatEnd + 1);  	int poslinkEnd = output.IndexOf (linkEnd' poslinkStart + linkStart.Length + 1);  	string link = output.Substring (poslinkStart + linkStart.Length' poslinkEnd - poslinkStart - linkStart.Length);  	int posnameStart = output.IndexOf (nameStart' poslinkEnd);  	int posnameStart2 = output.IndexOf (nameStart2' posnameStart + nameStart.Length);  	int posnameEnd = output.IndexOf (nameEnd' posnameStart2 + nameStart2.Length + 1);  	string torName = output.Substring (posnameStart2 + nameStart2.Length' posnameEnd - posnameStart2 - nameStart2.Length);  	torName = torName.Replace (rubbish1' "");  	torName = torName.Replace (rubbish2' "");  	// remove html codes  	torName = HttpUtility.HtmlDecode (torName);  	//Console.WriteLine("{0} - {1}"' posNameStart' posNameEnd);  	string torSize = "";  	int posSizeStart = output.IndexOf (sizeStart' posnameEnd);  	int posSizeEnd = 0;  	if (posSizeStart > 0) {  		posSizeEnd = output.IndexOf (sizeEnd' posSizeStart + sizeStart.Length + 1);  		torSize = output.Substring (posSizeStart + sizeStart.Length' posSizeEnd - posSizeStart - sizeStart.Length);  	}  	int posSeedInit = output.IndexOf (seedInit' posSizeEnd);  	string torSeed = "";  	int posSeedStart = output.IndexOf (seedStart' posSeedInit + seedInit.Length + 1);  	int posSeedEnd = 0;  	if (posSeedStart > 0) {  		posSeedEnd = output.IndexOf (seedEnd' posSeedStart + seedStart.Length + 1);  		torSeed = output.Substring (posSeedStart + seedStart.Length' posSeedEnd - posSeedStart - seedStart.Length);  	}  	string torLeech = "";  	int posLeechStart = output.IndexOf (leechStart' posSeedStart + 3);  	int posLeechEnd = 0;  	if (posLeechStart > 0) {  		posLeechEnd = output.IndexOf (leechEnd' posLeechStart + leechStart.Length + 1);  		torLeech = output.Substring (posLeechStart + leechStart.Length' posLeechEnd - posLeechStart - leechStart.Length);  	}  	TorrentLinkVM torrentLink = new TorrentLinkVM (TorrentSourceType.BakaBT);  	torrentLink.TorrentDownloadLink = "";  	torrentLink.TorrentLink = link;  	torrentLink.AnimeType = cat;  	torrentLink.TorrentName = string.Format ("[MAIN] {0}"' torName.Trim ());  	torrentLink.Size = torSize.Trim ();  	torrentLink.Seeders = torSeed.Trim ();  	torrentLink.Leechers = torLeech.Trim ();  	torLinks.Add (torrentLink);  	// now we have the main link provided by BakaBT  	// BakaBT also provides alternative links' so lets include those as well  	int temppos = output.IndexOf (startBlock' pos + 1);  	int altpos = output.IndexOf (altBlock' pos + 1);  	while (temppos > altpos && altpos > 0) {  		string linkStartAlt = "href=" + quote;  		string linkEndAlt = quote;  		string nameStartAlt = quote + ">";  		string nameEndAlt = "</a>";  		string sizeStartAlt = "<td class=" + quote + "size" + quote + ">";  		string sizeEndAlt = "</td>";  		string seedInitAlt = "<td class=" + quote + "peers" + quote + ">";  		string seedStartAlt = quote + ">";  		string seedEndAlt = "</a>";  		string leechStartAlt = quote + ">";  		string leechEndAlt = "</a>";  		int poslinkStartAlt = output.IndexOf (linkStartAlt' altpos + 1);  		int poslinkEndAlt = output.IndexOf (linkEndAlt' poslinkStartAlt + linkStartAlt.Length + 1);  		string linkAlt = output.Substring (poslinkStartAlt + linkStartAlt.Length' poslinkEndAlt - poslinkStartAlt - linkStartAlt.Length);  		int posnameStartAlt = output.IndexOf (nameStartAlt' poslinkEndAlt);  		int posnameEndAlt = output.IndexOf (nameEndAlt' posnameStartAlt + nameStartAlt.Length + 1);  		string torNameAlt = output.Substring (posnameStartAlt + nameStartAlt.Length' posnameEndAlt - posnameStartAlt - nameStartAlt.Length);  		// remove html codes  		torNameAlt = torNameAlt.Replace (rubbish1' "");  		torNameAlt = torNameAlt.Replace (rubbish2' "");  		torNameAlt = HttpUtility.HtmlDecode (torNameAlt);  		string torSizeAlt = "";  		int posSizeStartAlt = output.IndexOf (sizeStartAlt' posnameEndAlt);  		int posSizeEndAlt = 0;  		if (posSizeStartAlt > 0) {  			posSizeEndAlt = output.IndexOf (sizeEndAlt' posSizeStartAlt + sizeStartAlt.Length + 1);  			torSizeAlt = output.Substring (posSizeStartAlt + sizeStartAlt.Length' posSizeEndAlt - posSizeStartAlt - sizeStartAlt.Length);  		}  		int posSeedInitAlt = output.IndexOf (seedInitAlt' posSizeEndAlt);  		string torSeedAlt = "";  		int posSeedStartAlt = output.IndexOf (seedStartAlt' posSeedInitAlt + seedInitAlt.Length + 1);  		int posSeedEndAlt = 0;  		if (posSeedStartAlt > 0) {  			posSeedEndAlt = output.IndexOf (seedEndAlt' posSeedStartAlt + seedStartAlt.Length + 1);  			torSeedAlt = output.Substring (posSeedStartAlt + seedStartAlt.Length' posSeedEndAlt - posSeedStartAlt - seedStartAlt.Length);  		}  		string torLeechAlt = "";  		int posLeechStartAlt = output.IndexOf (leechStartAlt' posSeedStartAlt + 3);  		int posLeechEndAlt = 0;  		if (posLeechStartAlt > 0) {  			posLeechEndAlt = output.IndexOf (leechEndAlt' posLeechStartAlt + leechStartAlt.Length + 1);  			torLeechAlt = output.Substring (posLeechStartAlt + leechStartAlt.Length' posLeechEndAlt - posLeechStartAlt - leechStartAlt.Length);  		}  		TorrentLinkVM torrentLinkAlt = new TorrentLinkVM (TorrentSourceType.BakaBT);  		torrentLinkAlt.TorrentDownloadLink = "";  		torrentLinkAlt.TorrentLink = linkAlt;  		torrentLinkAlt.AnimeType = cat;  		torrentLinkAlt.TorrentName = string.Format ("[ALT] {0}"' torNameAlt.Trim ());  		torrentLinkAlt.Size = torSizeAlt.Trim ();  		torrentLinkAlt.Seeders = torSeedAlt.Trim ();  		torrentLinkAlt.Leechers = torLeechAlt.Trim ();  		torLinks.Add (torrentLinkAlt);  		altpos = output.IndexOf (altBlock' posLeechEndAlt + 1);  	}  	pos = output.IndexOf (startBlock' pos + 1);  	//Console.WriteLine("{0} - {1}"' torName' torLink);  }  
Magic Number,JMMClient.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsBakaBT.cs,ParseSource,The following statement contains a magic number: while (pos > 0) {  	if (pos <= 0)  		break;  	int poscatStart = output.IndexOf (catStart' pos + 1);  	int poscatEnd = output.IndexOf (catEnd' poscatStart + catStart.Length + 1);  	string cat = output.Substring (poscatStart + catStart.Length' poscatEnd - poscatStart - catStart.Length);  	int poslinkStart = output.IndexOf (linkStart' poscatEnd + 1);  	int poslinkEnd = output.IndexOf (linkEnd' poslinkStart + linkStart.Length + 1);  	string link = output.Substring (poslinkStart + linkStart.Length' poslinkEnd - poslinkStart - linkStart.Length);  	int posnameStart = output.IndexOf (nameStart' poslinkEnd);  	int posnameStart2 = output.IndexOf (nameStart2' posnameStart + nameStart.Length);  	int posnameEnd = output.IndexOf (nameEnd' posnameStart2 + nameStart2.Length + 1);  	string torName = output.Substring (posnameStart2 + nameStart2.Length' posnameEnd - posnameStart2 - nameStart2.Length);  	torName = torName.Replace (rubbish1' "");  	torName = torName.Replace (rubbish2' "");  	// remove html codes  	torName = HttpUtility.HtmlDecode (torName);  	//Console.WriteLine("{0} - {1}"' posNameStart' posNameEnd);  	string torSize = "";  	int posSizeStart = output.IndexOf (sizeStart' posnameEnd);  	int posSizeEnd = 0;  	if (posSizeStart > 0) {  		posSizeEnd = output.IndexOf (sizeEnd' posSizeStart + sizeStart.Length + 1);  		torSize = output.Substring (posSizeStart + sizeStart.Length' posSizeEnd - posSizeStart - sizeStart.Length);  	}  	int posSeedInit = output.IndexOf (seedInit' posSizeEnd);  	string torSeed = "";  	int posSeedStart = output.IndexOf (seedStart' posSeedInit + seedInit.Length + 1);  	int posSeedEnd = 0;  	if (posSeedStart > 0) {  		posSeedEnd = output.IndexOf (seedEnd' posSeedStart + seedStart.Length + 1);  		torSeed = output.Substring (posSeedStart + seedStart.Length' posSeedEnd - posSeedStart - seedStart.Length);  	}  	string torLeech = "";  	int posLeechStart = output.IndexOf (leechStart' posSeedStart + 3);  	int posLeechEnd = 0;  	if (posLeechStart > 0) {  		posLeechEnd = output.IndexOf (leechEnd' posLeechStart + leechStart.Length + 1);  		torLeech = output.Substring (posLeechStart + leechStart.Length' posLeechEnd - posLeechStart - leechStart.Length);  	}  	TorrentLinkVM torrentLink = new TorrentLinkVM (TorrentSourceType.BakaBT);  	torrentLink.TorrentDownloadLink = "";  	torrentLink.TorrentLink = link;  	torrentLink.AnimeType = cat;  	torrentLink.TorrentName = string.Format ("[MAIN] {0}"' torName.Trim ());  	torrentLink.Size = torSize.Trim ();  	torrentLink.Seeders = torSeed.Trim ();  	torrentLink.Leechers = torLeech.Trim ();  	torLinks.Add (torrentLink);  	// now we have the main link provided by BakaBT  	// BakaBT also provides alternative links' so lets include those as well  	int temppos = output.IndexOf (startBlock' pos + 1);  	int altpos = output.IndexOf (altBlock' pos + 1);  	while (temppos > altpos && altpos > 0) {  		string linkStartAlt = "href=" + quote;  		string linkEndAlt = quote;  		string nameStartAlt = quote + ">";  		string nameEndAlt = "</a>";  		string sizeStartAlt = "<td class=" + quote + "size" + quote + ">";  		string sizeEndAlt = "</td>";  		string seedInitAlt = "<td class=" + quote + "peers" + quote + ">";  		string seedStartAlt = quote + ">";  		string seedEndAlt = "</a>";  		string leechStartAlt = quote + ">";  		string leechEndAlt = "</a>";  		int poslinkStartAlt = output.IndexOf (linkStartAlt' altpos + 1);  		int poslinkEndAlt = output.IndexOf (linkEndAlt' poslinkStartAlt + linkStartAlt.Length + 1);  		string linkAlt = output.Substring (poslinkStartAlt + linkStartAlt.Length' poslinkEndAlt - poslinkStartAlt - linkStartAlt.Length);  		int posnameStartAlt = output.IndexOf (nameStartAlt' poslinkEndAlt);  		int posnameEndAlt = output.IndexOf (nameEndAlt' posnameStartAlt + nameStartAlt.Length + 1);  		string torNameAlt = output.Substring (posnameStartAlt + nameStartAlt.Length' posnameEndAlt - posnameStartAlt - nameStartAlt.Length);  		// remove html codes  		torNameAlt = torNameAlt.Replace (rubbish1' "");  		torNameAlt = torNameAlt.Replace (rubbish2' "");  		torNameAlt = HttpUtility.HtmlDecode (torNameAlt);  		string torSizeAlt = "";  		int posSizeStartAlt = output.IndexOf (sizeStartAlt' posnameEndAlt);  		int posSizeEndAlt = 0;  		if (posSizeStartAlt > 0) {  			posSizeEndAlt = output.IndexOf (sizeEndAlt' posSizeStartAlt + sizeStartAlt.Length + 1);  			torSizeAlt = output.Substring (posSizeStartAlt + sizeStartAlt.Length' posSizeEndAlt - posSizeStartAlt - sizeStartAlt.Length);  		}  		int posSeedInitAlt = output.IndexOf (seedInitAlt' posSizeEndAlt);  		string torSeedAlt = "";  		int posSeedStartAlt = output.IndexOf (seedStartAlt' posSeedInitAlt + seedInitAlt.Length + 1);  		int posSeedEndAlt = 0;  		if (posSeedStartAlt > 0) {  			posSeedEndAlt = output.IndexOf (seedEndAlt' posSeedStartAlt + seedStartAlt.Length + 1);  			torSeedAlt = output.Substring (posSeedStartAlt + seedStartAlt.Length' posSeedEndAlt - posSeedStartAlt - seedStartAlt.Length);  		}  		string torLeechAlt = "";  		int posLeechStartAlt = output.IndexOf (leechStartAlt' posSeedStartAlt + 3);  		int posLeechEndAlt = 0;  		if (posLeechStartAlt > 0) {  			posLeechEndAlt = output.IndexOf (leechEndAlt' posLeechStartAlt + leechStartAlt.Length + 1);  			torLeechAlt = output.Substring (posLeechStartAlt + leechStartAlt.Length' posLeechEndAlt - posLeechStartAlt - leechStartAlt.Length);  		}  		TorrentLinkVM torrentLinkAlt = new TorrentLinkVM (TorrentSourceType.BakaBT);  		torrentLinkAlt.TorrentDownloadLink = "";  		torrentLinkAlt.TorrentLink = linkAlt;  		torrentLinkAlt.AnimeType = cat;  		torrentLinkAlt.TorrentName = string.Format ("[ALT] {0}"' torNameAlt.Trim ());  		torrentLinkAlt.Size = torSizeAlt.Trim ();  		torrentLinkAlt.Seeders = torSeedAlt.Trim ();  		torrentLinkAlt.Leechers = torLeechAlt.Trim ();  		torLinks.Add (torrentLinkAlt);  		altpos = output.IndexOf (altBlock' posLeechEndAlt + 1);  	}  	pos = output.IndexOf (startBlock' pos + 1);  	//Console.WriteLine("{0} - {1}"' torName' torLink);  }  
Magic Number,JMMClient.Downloads,TorrentsBakaBT,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsBakaBT.cs,ParseSource,The following statement contains a magic number: while (temppos > altpos && altpos > 0) {  	string linkStartAlt = "href=" + quote;  	string linkEndAlt = quote;  	string nameStartAlt = quote + ">";  	string nameEndAlt = "</a>";  	string sizeStartAlt = "<td class=" + quote + "size" + quote + ">";  	string sizeEndAlt = "</td>";  	string seedInitAlt = "<td class=" + quote + "peers" + quote + ">";  	string seedStartAlt = quote + ">";  	string seedEndAlt = "</a>";  	string leechStartAlt = quote + ">";  	string leechEndAlt = "</a>";  	int poslinkStartAlt = output.IndexOf (linkStartAlt' altpos + 1);  	int poslinkEndAlt = output.IndexOf (linkEndAlt' poslinkStartAlt + linkStartAlt.Length + 1);  	string linkAlt = output.Substring (poslinkStartAlt + linkStartAlt.Length' poslinkEndAlt - poslinkStartAlt - linkStartAlt.Length);  	int posnameStartAlt = output.IndexOf (nameStartAlt' poslinkEndAlt);  	int posnameEndAlt = output.IndexOf (nameEndAlt' posnameStartAlt + nameStartAlt.Length + 1);  	string torNameAlt = output.Substring (posnameStartAlt + nameStartAlt.Length' posnameEndAlt - posnameStartAlt - nameStartAlt.Length);  	// remove html codes  	torNameAlt = torNameAlt.Replace (rubbish1' "");  	torNameAlt = torNameAlt.Replace (rubbish2' "");  	torNameAlt = HttpUtility.HtmlDecode (torNameAlt);  	string torSizeAlt = "";  	int posSizeStartAlt = output.IndexOf (sizeStartAlt' posnameEndAlt);  	int posSizeEndAlt = 0;  	if (posSizeStartAlt > 0) {  		posSizeEndAlt = output.IndexOf (sizeEndAlt' posSizeStartAlt + sizeStartAlt.Length + 1);  		torSizeAlt = output.Substring (posSizeStartAlt + sizeStartAlt.Length' posSizeEndAlt - posSizeStartAlt - sizeStartAlt.Length);  	}  	int posSeedInitAlt = output.IndexOf (seedInitAlt' posSizeEndAlt);  	string torSeedAlt = "";  	int posSeedStartAlt = output.IndexOf (seedStartAlt' posSeedInitAlt + seedInitAlt.Length + 1);  	int posSeedEndAlt = 0;  	if (posSeedStartAlt > 0) {  		posSeedEndAlt = output.IndexOf (seedEndAlt' posSeedStartAlt + seedStartAlt.Length + 1);  		torSeedAlt = output.Substring (posSeedStartAlt + seedStartAlt.Length' posSeedEndAlt - posSeedStartAlt - seedStartAlt.Length);  	}  	string torLeechAlt = "";  	int posLeechStartAlt = output.IndexOf (leechStartAlt' posSeedStartAlt + 3);  	int posLeechEndAlt = 0;  	if (posLeechStartAlt > 0) {  		posLeechEndAlt = output.IndexOf (leechEndAlt' posLeechStartAlt + leechStartAlt.Length + 1);  		torLeechAlt = output.Substring (posLeechStartAlt + leechStartAlt.Length' posLeechEndAlt - posLeechStartAlt - leechStartAlt.Length);  	}  	TorrentLinkVM torrentLinkAlt = new TorrentLinkVM (TorrentSourceType.BakaBT);  	torrentLinkAlt.TorrentDownloadLink = "";  	torrentLinkAlt.TorrentLink = linkAlt;  	torrentLinkAlt.AnimeType = cat;  	torrentLinkAlt.TorrentName = string.Format ("[ALT] {0}"' torNameAlt.Trim ());  	torrentLinkAlt.Size = torSizeAlt.Trim ();  	torrentLinkAlt.Seeders = torSeedAlt.Trim ();  	torrentLinkAlt.Leechers = torLeechAlt.Trim ();  	torLinks.Add (torrentLinkAlt);  	altpos = output.IndexOf (altBlock' posLeechEndAlt + 1);  }  
Magic Number,JMMClient.Downloads,TorrentsNyaa,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsNyaa.cs,ParseSource,The following statement contains a magic number: while (pos > 0) {  	if (pos <= 0)  		break;  	// find the start of the torrent  	int posBegin = output.IndexOf (nameStart1' pos + 1);  	if (posBegin <= 0)  		break;  	int posNameStart = output.IndexOf (nameStart2' posBegin + nameStart1.Length + 1);  	int posNameEnd = output.IndexOf (nameEnd2' posNameStart + nameStart2.Length + 1);  	string torName = output.Substring (posNameStart + nameStart2.Length' posNameEnd - posNameStart - nameStart2.Length);  	int posTorStart = output.IndexOf (torStart' posNameEnd);  	int posTorEnd = output.IndexOf (torEnd' posTorStart + torStart.Length + 1);  	string torLink = output.Substring (posTorStart + torStart.Length' posTorEnd - posTorStart - torStart.Length);  	torLink = DownloadHelper.FixNyaaTorrentLink (torLink);  	// remove html codes  	torLink = HttpUtility.HtmlDecode (torLink);  	string torSize = "";  	int posSizeStart = output.IndexOf (sizeStart' posNameEnd);  	int posSizeEnd = 0;  	if (posSizeStart > 0) {  		posSizeEnd = output.IndexOf (sizeEnd' posSizeStart + sizeStart.Length + 1);  		torSize = output.Substring (posSizeStart + sizeStart.Length' posSizeEnd - posSizeStart - sizeStart.Length);  	}  	string torSeed = "";  	int posSeedStart = output.IndexOf (seedStart' posSizeEnd);  	int posSeedEnd = 0;  	if (posSeedStart > 0) {  		posSeedEnd = output.IndexOf (seedEnd' posSeedStart + seedStart.Length + 1);  		torSeed = output.Substring (posSeedStart + seedStart.Length' posSeedEnd - posSeedStart - seedStart.Length);  	}  	string torLeech = "";  	int posLeechStart = output.IndexOf (leechStart' posSeedStart + 3);  	int posLeechEnd = 0;  	if (posLeechStart > 0) {  		posLeechEnd = output.IndexOf (leechEnd' posLeechStart + leechStart.Length + 1);  		torLeech = output.Substring (posLeechStart + leechStart.Length' posLeechEnd - posLeechStart - leechStart.Length);  	}  	TorrentLinkVM torrentLink = new TorrentLinkVM (SourceType);  	torrentLink.TorrentDownloadLink = torLink;  	torrentLink.TorrentName = torName;  	torrentLink.Size = torSize.Trim ();  	torrentLink.Seeders = torSeed.Trim ();  	torrentLink.Leechers = torLeech.Trim ();  	torLinks.Add (torrentLink);  	pos = output.IndexOf (nameStart1' pos + 1);  }  
Magic Number,JMMClient.Downloads,TorrentsNyaa,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\TorrentsNyaa.cs,ParseSourceSingleResult,The following statement contains a magic number: while (pos > 0) {  	if (pos <= 0)  		break;  	int posNameStart = output.IndexOf (nameStart' pos + 1);  	int posNameEnd = output.IndexOf (nameEnd' posNameStart + nameStart.Length + 1);  	string torName = output.Substring (posNameStart + nameStart.Length' posNameEnd - posNameStart - nameStart.Length);  	string torSeed = "";  	int posSeedStart = output.IndexOf (seedStart' posNameEnd);  	int posSeedEnd = 0;  	if (posSeedStart > 0) {  		posSeedEnd = output.IndexOf (seedEnd' posSeedStart + seedStart.Length + 1);  		torSeed = output.Substring (posSeedStart + seedStart.Length' posSeedEnd - posSeedStart - seedStart.Length);  	}  	string torLeech = "";  	int posLeechStart = output.IndexOf (leechStart' posSeedEnd + 3);  	int posLeechEnd = 0;  	if (posLeechStart > 0) {  		posLeechEnd = output.IndexOf (leechEnd' posLeechStart + leechStart.Length + 1);  		torLeech = output.Substring (posLeechStart + leechStart.Length' posLeechEnd - posLeechStart - leechStart.Length);  	}  	string torSize = "";  	int posSizeStart = output.IndexOf (sizeStart' posLeechEnd);  	int posSizeEnd = 0;  	if (posSizeStart > 0) {  		posSizeEnd = output.IndexOf (sizeEnd' posSizeStart + sizeStart.Length + 1);  		torSize = output.Substring (posSizeStart + sizeStart.Length' posSizeEnd - posSizeStart - sizeStart.Length);  	}  	int posTorStart = output.IndexOf (torStart' posSizeEnd);  	int posTorEnd = output.IndexOf (torEnd' posTorStart + torStart.Length + 1);  	string torLink = output.Substring (posTorStart + torStart.Length' posTorEnd - posTorStart - torStart.Length);  	torLink = DownloadHelper.FixNyaaTorrentLink (torLink);  	// remove html codes  	torLink = HttpUtility.HtmlDecode (torLink);  	TorrentLinkVM torrentLink = new TorrentLinkVM (SourceType);  	torrentLink.TorrentDownloadLink = torLink;  	torrentLink.TorrentName = torName;  	torrentLink.Size = torSize.Trim ();  	torrentLink.Seeders = torSeed.Trim ();  	torrentLink.Leechers = torLeech.Trim ();  	torLinks.Add (torrentLink);  	pos = output.IndexOf (startBlock' pos + 1);  }  
Magic Number,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,Init,The following statement contains a magic number: torrentsTimer.Interval = UserSettingsVM.Instance.UTorrentRefreshInterval * 1000;  
Magic Number,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,torrentsTimer_Elapsed,The following statement contains a magic number: try {  	if (!UserSettingsVM.Instance.UTorrentAutoRefresh)  		return;  	torrentsTimer.Stop ();  	List<Torrent> torrents = new List<Torrent> ();  	bool success = GetTorrentList (ref torrents);  	if (success) {  		//OnListRefreshedEvent(new ListRefreshedEventArgs(torrents));  		torrentsTimer.Interval = UserSettingsVM.Instance.UTorrentRefreshInterval * 1000;  	}  	else  		torrentsTimer.Interval = 60 * 1000;  	torrentsTimer.Start ();  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	torrentsTimer.Start ();  }  
Magic Number,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,torrentsTimer_Elapsed,The following statement contains a magic number: try {  	if (!UserSettingsVM.Instance.UTorrentAutoRefresh)  		return;  	torrentsTimer.Stop ();  	List<Torrent> torrents = new List<Torrent> ();  	bool success = GetTorrentList (ref torrents);  	if (success) {  		//OnListRefreshedEvent(new ListRefreshedEventArgs(torrents));  		torrentsTimer.Interval = UserSettingsVM.Instance.UTorrentRefreshInterval * 1000;  	}  	else  		torrentsTimer.Interval = 60 * 1000;  	torrentsTimer.Start ();  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	torrentsTimer.Start ();  }  
Magic Number,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,torrentsTimer_Elapsed,The following statement contains a magic number: try {  	if (!UserSettingsVM.Instance.UTorrentAutoRefresh)  		return;  	torrentsTimer.Stop ();  	List<Torrent> torrents = new List<Torrent> ();  	bool success = GetTorrentList (ref torrents);  	if (success) {  		//OnListRefreshedEvent(new ListRefreshedEventArgs(torrents));  		torrentsTimer.Interval = UserSettingsVM.Instance.UTorrentRefreshInterval * 1000;  	}  	else  		torrentsTimer.Interval = 60 * 1000;  	torrentsTimer.Start ();  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  	torrentsTimer.Start ();  }  
Magic Number,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,torrentsTimer_Elapsed,The following statement contains a magic number: if (success) {  	//OnListRefreshedEvent(new ListRefreshedEventArgs(torrents));  	torrentsTimer.Interval = UserSettingsVM.Instance.UTorrentRefreshInterval * 1000;  }  else  	torrentsTimer.Interval = 60 * 1000;  
Magic Number,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,torrentsTimer_Elapsed,The following statement contains a magic number: if (success) {  	//OnListRefreshedEvent(new ListRefreshedEventArgs(torrents));  	torrentsTimer.Interval = UserSettingsVM.Instance.UTorrentRefreshInterval * 1000;  }  else  	torrentsTimer.Interval = 60 * 1000;  
Magic Number,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,torrentsTimer_Elapsed,The following statement contains a magic number: if (success) {  	//OnListRefreshedEvent(new ListRefreshedEventArgs(torrents));  	torrentsTimer.Interval = UserSettingsVM.Instance.UTorrentRefreshInterval * 1000;  }  else  	torrentsTimer.Interval = 60 * 1000;  
Magic Number,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,torrentsTimer_Elapsed,The following statement contains a magic number: torrentsTimer.Interval = UserSettingsVM.Instance.UTorrentRefreshInterval * 1000;  
Magic Number,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,torrentsTimer_Elapsed,The following statement contains a magic number: torrentsTimer.Interval = 60 * 1000;  
Magic Number,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,torrentsTimer_Elapsed,The following statement contains a magic number: torrentsTimer.Interval = 60 * 1000;  
Magic Number,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,PopulateToken,The following statement contains a magic number: try {  	url = string.Format (urlTorrentTokenPage' AppSettings.UTorrentAddress' AppSettings.UTorrentPort);  	logger.Trace ("token url: {0}"' url);  	HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create (url);  	webReq.Timeout = 10000;  	// 10 seconds  	webReq.Credentials = new NetworkCredential (AppSettings.UTorrentUsername' AppSettings.UTorrentPassword);  	webReq.CookieContainer = cookieJar;  	HttpWebResponse WebResponse = (HttpWebResponse)webReq.GetResponse ();  	Stream responseStream = WebResponse.GetResponseStream ();  	StreamReader Reader = new StreamReader (responseStream' Encoding.UTF8);  	string output = Reader.ReadToEnd ();  	logger.Trace ("token reponse: {0}"' output);  	WebResponse.Close ();  	responseStream.Close ();  	// parse and get the token  	// <html><div id='token' style='display:none;'>u3iiuDG4dwYDMzurIFif7FS-ldLPcvHk6QlB4y8LSKK5mX9GSPUZ_PpxD0s=</div></html>  	char q = (char)34;  	string quote = q.ToString ();  	string torStart = "display:none;'>";  	string torEnd = "</div>";  	int posTorStart = output.IndexOf (torStart' 0);  	if (posTorStart <= 0)  		return;  	int posTorEnd = output.IndexOf (torEnd' posTorStart + torStart.Length + 1);  	token = output.Substring (posTorStart + torStart.Length' posTorEnd - posTorStart - torStart.Length);  	//BaseConfig.MyAnimeLog.Write("token: {0}"' token);  }  catch (Exception ex) {  	logger.Error ("Error in StartTorrent: {0} - {1}"' url' ex.ToString ());  	return;  }  
Magic Number,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,PopulateToken,The following statement contains a magic number: try {  	url = string.Format (urlTorrentTokenPage' AppSettings.UTorrentAddress' AppSettings.UTorrentPort);  	logger.Trace ("token url: {0}"' url);  	HttpWebRequest webReq = (HttpWebRequest)WebRequest.Create (url);  	webReq.Timeout = 10000;  	// 10 seconds  	webReq.Credentials = new NetworkCredential (AppSettings.UTorrentUsername' AppSettings.UTorrentPassword);  	webReq.CookieContainer = cookieJar;  	HttpWebResponse WebResponse = (HttpWebResponse)webReq.GetResponse ();  	Stream responseStream = WebResponse.GetResponseStream ();  	StreamReader Reader = new StreamReader (responseStream' Encoding.UTF8);  	string output = Reader.ReadToEnd ();  	logger.Trace ("token reponse: {0}"' output);  	WebResponse.Close ();  	responseStream.Close ();  	// parse and get the token  	// <html><div id='token' style='display:none;'>u3iiuDG4dwYDMzurIFif7FS-ldLPcvHk6QlB4y8LSKK5mX9GSPUZ_PpxD0s=</div></html>  	char q = (char)34;  	string quote = q.ToString ();  	string torStart = "display:none;'>";  	string torEnd = "</div>";  	int posTorStart = output.IndexOf (torStart' 0);  	if (posTorStart <= 0)  		return;  	int posTorEnd = output.IndexOf (torEnd' posTorStart + torStart.Length + 1);  	token = output.Substring (posTorStart + torStart.Length' posTorEnd - posTorStart - torStart.Length);  	//BaseConfig.MyAnimeLog.Write("token: {0}"' token);  }  catch (Exception ex) {  	logger.Error ("Error in StartTorrent: {0} - {1}"' url' ex.ToString ());  	return;  }  
Magic Number,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,PopulateToken,The following statement contains a magic number: webReq.Timeout = 10000;  
Magic Number,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,GetWebResponse,The following statement contains a magic number: webReq.Timeout = 15000;  
Magic Number,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,GetWebResponse,The following statement contains a magic number: if (tryAgain) {  	PopulateToken ();  	// fin the token in the url and replace it with the new one  	//http://{0}:{1}/gui/?token={2}&list=1  	int iStart = url.IndexOf (@"?token="' 0);  	int iFinish = url.IndexOf (@"&"' 0);  	string prefix = url.Substring (0' iStart);  	string tokenStr = @"?token=" + token;  	string suffix = url.Substring (iFinish' url.Length - iFinish);  	logger.Trace ("prefix: {0} --- tokenStr: {1} --- suffix: {2}"' prefix' tokenStr' suffix);  	url = prefix + tokenStr + suffix;  	webReq = (HttpWebRequest)WebRequest.Create (url);  	webReq.Timeout = 15000;  	// 15 seconds  	webReq.Credentials = new NetworkCredential (AppSettings.UTorrentUsername' AppSettings.UTorrentPassword);  	webReq.CookieContainer = cookieJar;  	webResponse = (HttpWebResponse)webReq.GetResponse ();  }  
Magic Number,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,GetWebResponse,The following statement contains a magic number: webReq.Timeout = 15000;  
Magic Number,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,GetFileList,The following statement contains a magic number: try {  	string url = string.Format (urlTorrentFileList' AppSettings.UTorrentAddress' AppSettings.UTorrentPort' token' hash);  	string output = GetWebResponse (url);  	if (output.Length == 0)  		return false;  	TorrentFileList fileList = JSONHelper.Deserialize<TorrentFileList> (output);  	if (fileList != null && fileList.files != null && fileList.files.Length > 1) {  		object[] actualFiles = fileList.files [1] as object[];  		if (actualFiles == null)  			return false;  		foreach (object obj in actualFiles) {  			object[] actualFile = obj as object[];  			if (actualFile == null)  				continue;  			TorrentFile tf = new TorrentFile ();  			tf.FileName = actualFile [0].ToString ();  			tf.FileSize = long.Parse (actualFile [1].ToString ());  			tf.Downloaded = long.Parse (actualFile [2].ToString ());  			tf.Priority = long.Parse (actualFile [3].ToString ());  			torFiles.Add (tf);  		}  	}  	return true;  }  catch (Exception ex) {  	logger.Error ("Error in GetTorrentList: {0}"' ex.ToString ());  	return false;  }  
Magic Number,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,GetFileList,The following statement contains a magic number: try {  	string url = string.Format (urlTorrentFileList' AppSettings.UTorrentAddress' AppSettings.UTorrentPort' token' hash);  	string output = GetWebResponse (url);  	if (output.Length == 0)  		return false;  	TorrentFileList fileList = JSONHelper.Deserialize<TorrentFileList> (output);  	if (fileList != null && fileList.files != null && fileList.files.Length > 1) {  		object[] actualFiles = fileList.files [1] as object[];  		if (actualFiles == null)  			return false;  		foreach (object obj in actualFiles) {  			object[] actualFile = obj as object[];  			if (actualFile == null)  				continue;  			TorrentFile tf = new TorrentFile ();  			tf.FileName = actualFile [0].ToString ();  			tf.FileSize = long.Parse (actualFile [1].ToString ());  			tf.Downloaded = long.Parse (actualFile [2].ToString ());  			tf.Priority = long.Parse (actualFile [3].ToString ());  			torFiles.Add (tf);  		}  	}  	return true;  }  catch (Exception ex) {  	logger.Error ("Error in GetTorrentList: {0}"' ex.ToString ());  	return false;  }  
Magic Number,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,GetFileList,The following statement contains a magic number: if (fileList != null && fileList.files != null && fileList.files.Length > 1) {  	object[] actualFiles = fileList.files [1] as object[];  	if (actualFiles == null)  		return false;  	foreach (object obj in actualFiles) {  		object[] actualFile = obj as object[];  		if (actualFile == null)  			continue;  		TorrentFile tf = new TorrentFile ();  		tf.FileName = actualFile [0].ToString ();  		tf.FileSize = long.Parse (actualFile [1].ToString ());  		tf.Downloaded = long.Parse (actualFile [2].ToString ());  		tf.Priority = long.Parse (actualFile [3].ToString ());  		torFiles.Add (tf);  	}  }  
Magic Number,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,GetFileList,The following statement contains a magic number: if (fileList != null && fileList.files != null && fileList.files.Length > 1) {  	object[] actualFiles = fileList.files [1] as object[];  	if (actualFiles == null)  		return false;  	foreach (object obj in actualFiles) {  		object[] actualFile = obj as object[];  		if (actualFile == null)  			continue;  		TorrentFile tf = new TorrentFile ();  		tf.FileName = actualFile [0].ToString ();  		tf.FileSize = long.Parse (actualFile [1].ToString ());  		tf.Downloaded = long.Parse (actualFile [2].ToString ());  		tf.Priority = long.Parse (actualFile [3].ToString ());  		torFiles.Add (tf);  	}  }  
Magic Number,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,GetFileList,The following statement contains a magic number: foreach (object obj in actualFiles) {  	object[] actualFile = obj as object[];  	if (actualFile == null)  		continue;  	TorrentFile tf = new TorrentFile ();  	tf.FileName = actualFile [0].ToString ();  	tf.FileSize = long.Parse (actualFile [1].ToString ());  	tf.Downloaded = long.Parse (actualFile [2].ToString ());  	tf.Priority = long.Parse (actualFile [3].ToString ());  	torFiles.Add (tf);  }  
Magic Number,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,GetFileList,The following statement contains a magic number: foreach (object obj in actualFiles) {  	object[] actualFile = obj as object[];  	if (actualFile == null)  		continue;  	TorrentFile tf = new TorrentFile ();  	tf.FileName = actualFile [0].ToString ();  	tf.FileSize = long.Parse (actualFile [1].ToString ());  	tf.Downloaded = long.Parse (actualFile [2].ToString ());  	tf.Priority = long.Parse (actualFile [3].ToString ());  	torFiles.Add (tf);  }  
Magic Number,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,GetFileList,The following statement contains a magic number: tf.Downloaded = long.Parse (actualFile [2].ToString ());  
Magic Number,JMMClient.Downloads,UTorrentHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\UTorrentHelper.cs,GetFileList,The following statement contains a magic number: tf.Priority = long.Parse (actualFile [3].ToString ());  
Magic Number,JMMClient.Forms,DeleteFilesForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\DeleteFilesForm.xaml.cs,deleteFilesWorker_DoWork,The following statement contains a magic number: deleteFilesWorker.ReportProgress (100' "Done!");  
Magic Number,JMMClient.Forms,GroupFilterConditionForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,The following statement contains a magic number: if (IsParameterRating) {  	if (txtParameter.Text.Trim ().Length == 0) {  		MessageBox.Show (Properties.Resources.MSG_ERR_EnterValue' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  		txtParameter.Focus ();  		return;  	}  	else {  		decimal dRating = -1;  		decimal.TryParse (txtParameter.Text' style' culture' out dRating);  		if (dRating <= 0 || dRating > 10) {  			MessageBox.Show (Properties.Resources.MSG_ERR_RatingValue' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  			txtParameter.Focus ();  			return;  		}  		groupFilterCondition.ConditionParameter = txtParameter.Text.Trim ();  	}  }  
Magic Number,JMMClient.Forms,GroupFilterConditionForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,The following statement contains a magic number: if (txtParameter.Text.Trim ().Length == 0) {  	MessageBox.Show (Properties.Resources.MSG_ERR_EnterValue' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  	txtParameter.Focus ();  	return;  }  else {  	decimal dRating = -1;  	decimal.TryParse (txtParameter.Text' style' culture' out dRating);  	if (dRating <= 0 || dRating > 10) {  		MessageBox.Show (Properties.Resources.MSG_ERR_RatingValue' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  		txtParameter.Focus ();  		return;  	}  	groupFilterCondition.ConditionParameter = txtParameter.Text.Trim ();  }  
Magic Number,JMMClient.Forms,GroupFilterConditionForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,The following statement contains a magic number: if (dRating <= 0 || dRating > 10) {  	MessageBox.Show (Properties.Resources.MSG_ERR_RatingValue' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  	txtParameter.Focus ();  	return;  }  
Magic Number,JMMClient.Forms,MissingEpsColumnsForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\MissingEpsColumnsForm.xaml.cs,MissingEpsColumnsForm,The following statement contains a magic number: if (columns.Length != 8)  	return;  
Magic Number,JMMClient.Forms,MissingEpsColumnsForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\MissingEpsColumnsForm.xaml.cs,MissingEpsColumnsForm,The following statement contains a magic number: chkEpisodeNumber.IsChecked = columns [2] == "1";  
Magic Number,JMMClient.Forms,MissingEpsColumnsForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\MissingEpsColumnsForm.xaml.cs,MissingEpsColumnsForm,The following statement contains a magic number: chkEpisodeID.IsChecked = columns [3] == "1";  
Magic Number,JMMClient.Forms,MissingEpsColumnsForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\MissingEpsColumnsForm.xaml.cs,MissingEpsColumnsForm,The following statement contains a magic number: chkFileSummary.IsChecked = columns [4] == "1";  
Magic Number,JMMClient.Forms,MissingEpsColumnsForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\MissingEpsColumnsForm.xaml.cs,MissingEpsColumnsForm,The following statement contains a magic number: chkGroupSummary.IsChecked = columns [5] == "1";  
Magic Number,JMMClient.Forms,MissingEpsColumnsForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\MissingEpsColumnsForm.xaml.cs,MissingEpsColumnsForm,The following statement contains a magic number: chkLinktoAnime.IsChecked = columns [6] == "1";  
Magic Number,JMMClient.Forms,MissingEpsColumnsForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\MissingEpsColumnsForm.xaml.cs,MissingEpsColumnsForm,The following statement contains a magic number: chkLinktoEpisode.IsChecked = columns [7] == "1";  
Magic Number,JMMClient.Forms,RateSeriesForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\RateSeriesForm.xaml.cs,cRating_OnRatingValueChangedEvent,The following statement contains a magic number: try {  	decimal rating = (decimal)ev.RatingValue;  	int voteType = 1;  	if (cboVoteType.SelectedItem.ToString () == Properties.Resources.VoteTypeAnimeTemporary)  		voteType = 2;  	if (cboVoteType.SelectedItem.ToString () == Properties.Resources.VoteTypeAnimePermanent)  		voteType = 1;  	JMMServerVM.Instance.VoteAnime (ser.AniDB_ID' rating' voteType);  	// refresh the data  	MainListHelperVM.Instance.UpdateHeirarchy (ser);  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.Forms,RateSeriesForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\RateSeriesForm.xaml.cs,cRating_OnRatingValueChangedEvent,The following statement contains a magic number: if (cboVoteType.SelectedItem.ToString () == Properties.Resources.VoteTypeAnimeTemporary)  	voteType = 2;  
Magic Number,JMMClient.Forms,RateSeriesForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\RateSeriesForm.xaml.cs,cRating_OnRatingValueChangedEvent,The following statement contains a magic number: voteType = 2;  
Magic Number,JMMClient.Forms,SelectMALStartForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\SelectMALStartForm.xaml.cs,btnUpdate_Click,The following statement contains a magic number: try {  	this.Cursor = Cursors.Wait;  	string selType = cboEpisodeType.SelectedItem.ToString ();  	int epType = (int)EnumTranslator.EpisodeTypeTranslatedReverse (selType);  	int epNumber = 0;  	int.TryParse (txtEpNumber.Text' out epNumber);  	if (epNumber <= 0 || epNumber > 2500) {  		MessageBox.Show ("Please enter a valid episode number"' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  		txtEpNumber.Focus ();  		return;  	}  	string res = "";  	if (OldEpType.HasValue && OldEpNumber.HasValue)  		res = JMMServerVM.Instance.clientBinaryHTTP.LinkAniDBMALUpdated (AnimeID' MALID' MALTitle' OldEpType.Value' OldEpNumber.Value' epType' epNumber);  	else  		res = JMMServerVM.Instance.clientBinaryHTTP.LinkAniDBMAL (AnimeID' MALID' MALTitle' epType' epNumber);  	if (res.Length > 0)  		MessageBox.Show (res' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  	else {  		this.DialogResult = true;  		this.Close ();  	}  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  finally {  	this.Cursor = Cursors.Arrow;  }  
Magic Number,JMMClient.Forms,SelectMALStartForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\SelectMALStartForm.xaml.cs,btnUpdate_Click,The following statement contains a magic number: if (epNumber <= 0 || epNumber > 2500) {  	MessageBox.Show ("Please enter a valid episode number"' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  	txtEpNumber.Focus ();  	return;  }  
Magic Number,JMMClient.ImageDownload,ImageDownloader,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ImageDownload\ImageDownloader.cs,DownloadAniDBCover,The following statement contains a magic number: try {  	if (anime.AnimeID == 8580)  		Console.Write ("");  	string url = string.Format (Constants.URLS.AniDB_Images' anime.Picname);  	string filename = anime.PosterPathNoDefault;  	ImageDownloadRequest req = new ImageDownloadRequest (ImageEntityType.AniDB_Cover' anime' forceDownload);  	// check if this file has already been downloaded and exists  	if (!req.ForceDownload) {  		// check to make sure the file actually exists  		if (!File.Exists (anime.PosterPath)) {  			this.imagesToDownload.Add (req);  			OnQueueUpdateEvent (new QueueUpdateEventArgs (this.QueueCount));  			return;  		}  		// the file exists so don't download it again  		return;  	}  	this.imagesToDownload.Add (req);  	OnQueueUpdateEvent (new QueueUpdateEventArgs (this.QueueCount));  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.ImageDownload,ImageDownloader,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ImageDownload\ImageDownloader.cs,DownloadAniDBCover,The following statement contains a magic number: if (anime.AnimeID == 8580)  	Console.Write ("");  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: try {  	List<List<T>> rgCopies = new List<List<T>> (1);  	rgCopies.Add (results);  	int sortByCount = rgSortBy.Count;  	// For each criterion in the list of comparison criteria' one or more lists must be sorted.   	// Each time a list is sorted' one or more sublists may be created.  Each sublist contains  	// items that were deemed to be "equivalent" according to the comparison criterion.  	// Example: After sorting addresses entries by state you may have multiple sublists'   	// each containing all of the address entries associated with a given state.  	// Note: this is not the most efficient method (especially in terms of memory!)' but it  	// is sufficient in most scenarios and is easier to understand than many other   	// methods of sorting a list using multiple criteria.  	for (int i = 0; i < sortByCount; i++) {  		SortPropOrFieldAndDirection sortBy = rgSortBy [i];  		if (string.IsNullOrEmpty (sortBy.sPropertyOrFieldName))  			throw new Exception ("MultiSort parameter rgSortBy was passed an empty field name in rgSortBy[" + i.ToString () + "]");  		// Retrieve an IComparer that contains logic for sorting this specific business object  		// type by the specified criteria  		IComparer<T> compare = sortBy.GetComparer<T> ();  		// Sort each sublist using the created IComparer<T>  		foreach (List<T> lst in rgCopies) {  			lst.Sort (compare);  		}  		if (i < sortByCount - 1) {  			// Create new sublists by searching for the sorted-by value boundaries/changes  			// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   			// from the original list.  NOT terribly efficient' but often sufficient.  			// Some advanced methods involve tracking duplicate values DURING the sort iteself  			List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  			for (int n = 0; n < rgCopies.Count; n++) {  				List<T> rgList = rgCopies [n];  				// Be conservative and set the initial sublist capacity to a small number' but  				// still honor the original list's item count.  (Example: If you are sorting a list  				// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  				// each sublist (each of which store all Address information entries with the same Zipcode)  				// with a capacity of 1000.   32'000 / 32 = 1000  				List<T> rgSublist = new List<T> (rgList.Count / 32);  				// Compare items to the item that preceeded it to determine where the "value boundaries"   				// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  				// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  				// when comparing elements during the sort routine).    				// Another alternative is to take advantage of the fact that the list is sorted and to  				// use a O(LogN) binary search rather than the (currently) linear O(N) search.  				for (int j = 0; j < rgList.Count; j++) {  					T item = rgList [j];  					if (j > 0) {  						// Compare the item to the preceeding item using the same comparison criterion  						// used during the sort  						T itemprev = rgList [j - 1];  						if (compare.Compare (item' itemprev) == 0) {  							// The item had the same property or field value as the preceeding item.    							// Add it on to the same sublist.  							rgSublist.Add (item);  						}  						else {  							// The item did NOT have the same property or field value as the preceeding item.  							// "Close up" the previous sublist and start a new one.  							rgNewCopies.Add (rgSublist);  							rgSublist = new List<T> (rgList.Count / 32);  							rgSublist.Add (item);  						}  					}  					else {  						// The first item has no predecessor - just add the item to the first sublist  						rgSublist.Add (item);  					}  				}  				// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  				// Add the last created sublist to our "master list of sublists" :P  				// It may be that this list has 0 elements in some cases' but this is not a problem  				rgNewCopies.Add (rgSublist);  			}  			// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  			// Move to the next "level" of sublists in preparation for further sorting using the next  			// sort/comparison criterion  			rgCopies = rgNewCopies;  		}  	}  	// END: for (int i = 0; i < sortByCount; i++) ... each sort by criteria:   	// reconstruct all resorted sub-sub-sub-sub-sublists into a single' final (flat) results list  	results.Clear ();  	foreach (List<T> rgList in rgCopies) {  		results.AddRange (rgList);  	}  	return results;  }  catch (Exception ex) {  	throw new Exception ("Exception in MultiSort while sorting a list of " + typeof(T).Name' ex);  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: try {  	List<List<T>> rgCopies = new List<List<T>> (1);  	rgCopies.Add (results);  	int sortByCount = rgSortBy.Count;  	// For each criterion in the list of comparison criteria' one or more lists must be sorted.   	// Each time a list is sorted' one or more sublists may be created.  Each sublist contains  	// items that were deemed to be "equivalent" according to the comparison criterion.  	// Example: After sorting addresses entries by state you may have multiple sublists'   	// each containing all of the address entries associated with a given state.  	// Note: this is not the most efficient method (especially in terms of memory!)' but it  	// is sufficient in most scenarios and is easier to understand than many other   	// methods of sorting a list using multiple criteria.  	for (int i = 0; i < sortByCount; i++) {  		SortPropOrFieldAndDirection sortBy = rgSortBy [i];  		if (string.IsNullOrEmpty (sortBy.sPropertyOrFieldName))  			throw new Exception ("MultiSort parameter rgSortBy was passed an empty field name in rgSortBy[" + i.ToString () + "]");  		// Retrieve an IComparer that contains logic for sorting this specific business object  		// type by the specified criteria  		IComparer<T> compare = sortBy.GetComparer<T> ();  		// Sort each sublist using the created IComparer<T>  		foreach (List<T> lst in rgCopies) {  			lst.Sort (compare);  		}  		if (i < sortByCount - 1) {  			// Create new sublists by searching for the sorted-by value boundaries/changes  			// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   			// from the original list.  NOT terribly efficient' but often sufficient.  			// Some advanced methods involve tracking duplicate values DURING the sort iteself  			List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  			for (int n = 0; n < rgCopies.Count; n++) {  				List<T> rgList = rgCopies [n];  				// Be conservative and set the initial sublist capacity to a small number' but  				// still honor the original list's item count.  (Example: If you are sorting a list  				// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  				// each sublist (each of which store all Address information entries with the same Zipcode)  				// with a capacity of 1000.   32'000 / 32 = 1000  				List<T> rgSublist = new List<T> (rgList.Count / 32);  				// Compare items to the item that preceeded it to determine where the "value boundaries"   				// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  				// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  				// when comparing elements during the sort routine).    				// Another alternative is to take advantage of the fact that the list is sorted and to  				// use a O(LogN) binary search rather than the (currently) linear O(N) search.  				for (int j = 0; j < rgList.Count; j++) {  					T item = rgList [j];  					if (j > 0) {  						// Compare the item to the preceeding item using the same comparison criterion  						// used during the sort  						T itemprev = rgList [j - 1];  						if (compare.Compare (item' itemprev) == 0) {  							// The item had the same property or field value as the preceeding item.    							// Add it on to the same sublist.  							rgSublist.Add (item);  						}  						else {  							// The item did NOT have the same property or field value as the preceeding item.  							// "Close up" the previous sublist and start a new one.  							rgNewCopies.Add (rgSublist);  							rgSublist = new List<T> (rgList.Count / 32);  							rgSublist.Add (item);  						}  					}  					else {  						// The first item has no predecessor - just add the item to the first sublist  						rgSublist.Add (item);  					}  				}  				// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  				// Add the last created sublist to our "master list of sublists" :P  				// It may be that this list has 0 elements in some cases' but this is not a problem  				rgNewCopies.Add (rgSublist);  			}  			// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  			// Move to the next "level" of sublists in preparation for further sorting using the next  			// sort/comparison criterion  			rgCopies = rgNewCopies;  		}  	}  	// END: for (int i = 0; i < sortByCount; i++) ... each sort by criteria:   	// reconstruct all resorted sub-sub-sub-sub-sublists into a single' final (flat) results list  	results.Clear ();  	foreach (List<T> rgList in rgCopies) {  		results.AddRange (rgList);  	}  	return results;  }  catch (Exception ex) {  	throw new Exception ("Exception in MultiSort while sorting a list of " + typeof(T).Name' ex);  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: try {  	List<List<T>> rgCopies = new List<List<T>> (1);  	rgCopies.Add (results);  	int sortByCount = rgSortBy.Count;  	// For each criterion in the list of comparison criteria' one or more lists must be sorted.   	// Each time a list is sorted' one or more sublists may be created.  Each sublist contains  	// items that were deemed to be "equivalent" according to the comparison criterion.  	// Example: After sorting addresses entries by state you may have multiple sublists'   	// each containing all of the address entries associated with a given state.  	// Note: this is not the most efficient method (especially in terms of memory!)' but it  	// is sufficient in most scenarios and is easier to understand than many other   	// methods of sorting a list using multiple criteria.  	for (int i = 0; i < sortByCount; i++) {  		SortPropOrFieldAndDirection sortBy = rgSortBy [i];  		if (string.IsNullOrEmpty (sortBy.sPropertyOrFieldName))  			throw new Exception ("MultiSort parameter rgSortBy was passed an empty field name in rgSortBy[" + i.ToString () + "]");  		// Retrieve an IComparer that contains logic for sorting this specific business object  		// type by the specified criteria  		IComparer<T> compare = sortBy.GetComparer<T> ();  		// Sort each sublist using the created IComparer<T>  		foreach (List<T> lst in rgCopies) {  			lst.Sort (compare);  		}  		if (i < sortByCount - 1) {  			// Create new sublists by searching for the sorted-by value boundaries/changes  			// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   			// from the original list.  NOT terribly efficient' but often sufficient.  			// Some advanced methods involve tracking duplicate values DURING the sort iteself  			List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  			for (int n = 0; n < rgCopies.Count; n++) {  				List<T> rgList = rgCopies [n];  				// Be conservative and set the initial sublist capacity to a small number' but  				// still honor the original list's item count.  (Example: If you are sorting a list  				// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  				// each sublist (each of which store all Address information entries with the same Zipcode)  				// with a capacity of 1000.   32'000 / 32 = 1000  				List<T> rgSublist = new List<T> (rgList.Count / 32);  				// Compare items to the item that preceeded it to determine where the "value boundaries"   				// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  				// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  				// when comparing elements during the sort routine).    				// Another alternative is to take advantage of the fact that the list is sorted and to  				// use a O(LogN) binary search rather than the (currently) linear O(N) search.  				for (int j = 0; j < rgList.Count; j++) {  					T item = rgList [j];  					if (j > 0) {  						// Compare the item to the preceeding item using the same comparison criterion  						// used during the sort  						T itemprev = rgList [j - 1];  						if (compare.Compare (item' itemprev) == 0) {  							// The item had the same property or field value as the preceeding item.    							// Add it on to the same sublist.  							rgSublist.Add (item);  						}  						else {  							// The item did NOT have the same property or field value as the preceeding item.  							// "Close up" the previous sublist and start a new one.  							rgNewCopies.Add (rgSublist);  							rgSublist = new List<T> (rgList.Count / 32);  							rgSublist.Add (item);  						}  					}  					else {  						// The first item has no predecessor - just add the item to the first sublist  						rgSublist.Add (item);  					}  				}  				// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  				// Add the last created sublist to our "master list of sublists" :P  				// It may be that this list has 0 elements in some cases' but this is not a problem  				rgNewCopies.Add (rgSublist);  			}  			// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  			// Move to the next "level" of sublists in preparation for further sorting using the next  			// sort/comparison criterion  			rgCopies = rgNewCopies;  		}  	}  	// END: for (int i = 0; i < sortByCount; i++) ... each sort by criteria:   	// reconstruct all resorted sub-sub-sub-sub-sublists into a single' final (flat) results list  	results.Clear ();  	foreach (List<T> rgList in rgCopies) {  		results.AddRange (rgList);  	}  	return results;  }  catch (Exception ex) {  	throw new Exception ("Exception in MultiSort while sorting a list of " + typeof(T).Name' ex);  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: for (int i = 0; i < sortByCount; i++) {  	SortPropOrFieldAndDirection sortBy = rgSortBy [i];  	if (string.IsNullOrEmpty (sortBy.sPropertyOrFieldName))  		throw new Exception ("MultiSort parameter rgSortBy was passed an empty field name in rgSortBy[" + i.ToString () + "]");  	// Retrieve an IComparer that contains logic for sorting this specific business object  	// type by the specified criteria  	IComparer<T> compare = sortBy.GetComparer<T> ();  	// Sort each sublist using the created IComparer<T>  	foreach (List<T> lst in rgCopies) {  		lst.Sort (compare);  	}  	if (i < sortByCount - 1) {  		// Create new sublists by searching for the sorted-by value boundaries/changes  		// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   		// from the original list.  NOT terribly efficient' but often sufficient.  		// Some advanced methods involve tracking duplicate values DURING the sort iteself  		List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  		for (int n = 0; n < rgCopies.Count; n++) {  			List<T> rgList = rgCopies [n];  			// Be conservative and set the initial sublist capacity to a small number' but  			// still honor the original list's item count.  (Example: If you are sorting a list  			// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  			// each sublist (each of which store all Address information entries with the same Zipcode)  			// with a capacity of 1000.   32'000 / 32 = 1000  			List<T> rgSublist = new List<T> (rgList.Count / 32);  			// Compare items to the item that preceeded it to determine where the "value boundaries"   			// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  			// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  			// when comparing elements during the sort routine).    			// Another alternative is to take advantage of the fact that the list is sorted and to  			// use a O(LogN) binary search rather than the (currently) linear O(N) search.  			for (int j = 0; j < rgList.Count; j++) {  				T item = rgList [j];  				if (j > 0) {  					// Compare the item to the preceeding item using the same comparison criterion  					// used during the sort  					T itemprev = rgList [j - 1];  					if (compare.Compare (item' itemprev) == 0) {  						// The item had the same property or field value as the preceeding item.    						// Add it on to the same sublist.  						rgSublist.Add (item);  					}  					else {  						// The item did NOT have the same property or field value as the preceeding item.  						// "Close up" the previous sublist and start a new one.  						rgNewCopies.Add (rgSublist);  						rgSublist = new List<T> (rgList.Count / 32);  						rgSublist.Add (item);  					}  				}  				else {  					// The first item has no predecessor - just add the item to the first sublist  					rgSublist.Add (item);  				}  			}  			// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  			// Add the last created sublist to our "master list of sublists" :P  			// It may be that this list has 0 elements in some cases' but this is not a problem  			rgNewCopies.Add (rgSublist);  		}  		// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  		// Move to the next "level" of sublists in preparation for further sorting using the next  		// sort/comparison criterion  		rgCopies = rgNewCopies;  	}  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: for (int i = 0; i < sortByCount; i++) {  	SortPropOrFieldAndDirection sortBy = rgSortBy [i];  	if (string.IsNullOrEmpty (sortBy.sPropertyOrFieldName))  		throw new Exception ("MultiSort parameter rgSortBy was passed an empty field name in rgSortBy[" + i.ToString () + "]");  	// Retrieve an IComparer that contains logic for sorting this specific business object  	// type by the specified criteria  	IComparer<T> compare = sortBy.GetComparer<T> ();  	// Sort each sublist using the created IComparer<T>  	foreach (List<T> lst in rgCopies) {  		lst.Sort (compare);  	}  	if (i < sortByCount - 1) {  		// Create new sublists by searching for the sorted-by value boundaries/changes  		// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   		// from the original list.  NOT terribly efficient' but often sufficient.  		// Some advanced methods involve tracking duplicate values DURING the sort iteself  		List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  		for (int n = 0; n < rgCopies.Count; n++) {  			List<T> rgList = rgCopies [n];  			// Be conservative and set the initial sublist capacity to a small number' but  			// still honor the original list's item count.  (Example: If you are sorting a list  			// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  			// each sublist (each of which store all Address information entries with the same Zipcode)  			// with a capacity of 1000.   32'000 / 32 = 1000  			List<T> rgSublist = new List<T> (rgList.Count / 32);  			// Compare items to the item that preceeded it to determine where the "value boundaries"   			// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  			// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  			// when comparing elements during the sort routine).    			// Another alternative is to take advantage of the fact that the list is sorted and to  			// use a O(LogN) binary search rather than the (currently) linear O(N) search.  			for (int j = 0; j < rgList.Count; j++) {  				T item = rgList [j];  				if (j > 0) {  					// Compare the item to the preceeding item using the same comparison criterion  					// used during the sort  					T itemprev = rgList [j - 1];  					if (compare.Compare (item' itemprev) == 0) {  						// The item had the same property or field value as the preceeding item.    						// Add it on to the same sublist.  						rgSublist.Add (item);  					}  					else {  						// The item did NOT have the same property or field value as the preceeding item.  						// "Close up" the previous sublist and start a new one.  						rgNewCopies.Add (rgSublist);  						rgSublist = new List<T> (rgList.Count / 32);  						rgSublist.Add (item);  					}  				}  				else {  					// The first item has no predecessor - just add the item to the first sublist  					rgSublist.Add (item);  				}  			}  			// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  			// Add the last created sublist to our "master list of sublists" :P  			// It may be that this list has 0 elements in some cases' but this is not a problem  			rgNewCopies.Add (rgSublist);  		}  		// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  		// Move to the next "level" of sublists in preparation for further sorting using the next  		// sort/comparison criterion  		rgCopies = rgNewCopies;  	}  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: for (int i = 0; i < sortByCount; i++) {  	SortPropOrFieldAndDirection sortBy = rgSortBy [i];  	if (string.IsNullOrEmpty (sortBy.sPropertyOrFieldName))  		throw new Exception ("MultiSort parameter rgSortBy was passed an empty field name in rgSortBy[" + i.ToString () + "]");  	// Retrieve an IComparer that contains logic for sorting this specific business object  	// type by the specified criteria  	IComparer<T> compare = sortBy.GetComparer<T> ();  	// Sort each sublist using the created IComparer<T>  	foreach (List<T> lst in rgCopies) {  		lst.Sort (compare);  	}  	if (i < sortByCount - 1) {  		// Create new sublists by searching for the sorted-by value boundaries/changes  		// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   		// from the original list.  NOT terribly efficient' but often sufficient.  		// Some advanced methods involve tracking duplicate values DURING the sort iteself  		List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  		for (int n = 0; n < rgCopies.Count; n++) {  			List<T> rgList = rgCopies [n];  			// Be conservative and set the initial sublist capacity to a small number' but  			// still honor the original list's item count.  (Example: If you are sorting a list  			// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  			// each sublist (each of which store all Address information entries with the same Zipcode)  			// with a capacity of 1000.   32'000 / 32 = 1000  			List<T> rgSublist = new List<T> (rgList.Count / 32);  			// Compare items to the item that preceeded it to determine where the "value boundaries"   			// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  			// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  			// when comparing elements during the sort routine).    			// Another alternative is to take advantage of the fact that the list is sorted and to  			// use a O(LogN) binary search rather than the (currently) linear O(N) search.  			for (int j = 0; j < rgList.Count; j++) {  				T item = rgList [j];  				if (j > 0) {  					// Compare the item to the preceeding item using the same comparison criterion  					// used during the sort  					T itemprev = rgList [j - 1];  					if (compare.Compare (item' itemprev) == 0) {  						// The item had the same property or field value as the preceeding item.    						// Add it on to the same sublist.  						rgSublist.Add (item);  					}  					else {  						// The item did NOT have the same property or field value as the preceeding item.  						// "Close up" the previous sublist and start a new one.  						rgNewCopies.Add (rgSublist);  						rgSublist = new List<T> (rgList.Count / 32);  						rgSublist.Add (item);  					}  				}  				else {  					// The first item has no predecessor - just add the item to the first sublist  					rgSublist.Add (item);  				}  			}  			// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  			// Add the last created sublist to our "master list of sublists" :P  			// It may be that this list has 0 elements in some cases' but this is not a problem  			rgNewCopies.Add (rgSublist);  		}  		// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  		// Move to the next "level" of sublists in preparation for further sorting using the next  		// sort/comparison criterion  		rgCopies = rgNewCopies;  	}  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: if (i < sortByCount - 1) {  	// Create new sublists by searching for the sorted-by value boundaries/changes  	// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   	// from the original list.  NOT terribly efficient' but often sufficient.  	// Some advanced methods involve tracking duplicate values DURING the sort iteself  	List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  	for (int n = 0; n < rgCopies.Count; n++) {  		List<T> rgList = rgCopies [n];  		// Be conservative and set the initial sublist capacity to a small number' but  		// still honor the original list's item count.  (Example: If you are sorting a list  		// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  		// each sublist (each of which store all Address information entries with the same Zipcode)  		// with a capacity of 1000.   32'000 / 32 = 1000  		List<T> rgSublist = new List<T> (rgList.Count / 32);  		// Compare items to the item that preceeded it to determine where the "value boundaries"   		// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  		// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  		// when comparing elements during the sort routine).    		// Another alternative is to take advantage of the fact that the list is sorted and to  		// use a O(LogN) binary search rather than the (currently) linear O(N) search.  		for (int j = 0; j < rgList.Count; j++) {  			T item = rgList [j];  			if (j > 0) {  				// Compare the item to the preceeding item using the same comparison criterion  				// used during the sort  				T itemprev = rgList [j - 1];  				if (compare.Compare (item' itemprev) == 0) {  					// The item had the same property or field value as the preceeding item.    					// Add it on to the same sublist.  					rgSublist.Add (item);  				}  				else {  					// The item did NOT have the same property or field value as the preceeding item.  					// "Close up" the previous sublist and start a new one.  					rgNewCopies.Add (rgSublist);  					rgSublist = new List<T> (rgList.Count / 32);  					rgSublist.Add (item);  				}  			}  			else {  				// The first item has no predecessor - just add the item to the first sublist  				rgSublist.Add (item);  			}  		}  		// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  		// Add the last created sublist to our "master list of sublists" :P  		// It may be that this list has 0 elements in some cases' but this is not a problem  		rgNewCopies.Add (rgSublist);  	}  	// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  	// Move to the next "level" of sublists in preparation for further sorting using the next  	// sort/comparison criterion  	rgCopies = rgNewCopies;  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: if (i < sortByCount - 1) {  	// Create new sublists by searching for the sorted-by value boundaries/changes  	// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   	// from the original list.  NOT terribly efficient' but often sufficient.  	// Some advanced methods involve tracking duplicate values DURING the sort iteself  	List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  	for (int n = 0; n < rgCopies.Count; n++) {  		List<T> rgList = rgCopies [n];  		// Be conservative and set the initial sublist capacity to a small number' but  		// still honor the original list's item count.  (Example: If you are sorting a list  		// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  		// each sublist (each of which store all Address information entries with the same Zipcode)  		// with a capacity of 1000.   32'000 / 32 = 1000  		List<T> rgSublist = new List<T> (rgList.Count / 32);  		// Compare items to the item that preceeded it to determine where the "value boundaries"   		// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  		// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  		// when comparing elements during the sort routine).    		// Another alternative is to take advantage of the fact that the list is sorted and to  		// use a O(LogN) binary search rather than the (currently) linear O(N) search.  		for (int j = 0; j < rgList.Count; j++) {  			T item = rgList [j];  			if (j > 0) {  				// Compare the item to the preceeding item using the same comparison criterion  				// used during the sort  				T itemprev = rgList [j - 1];  				if (compare.Compare (item' itemprev) == 0) {  					// The item had the same property or field value as the preceeding item.    					// Add it on to the same sublist.  					rgSublist.Add (item);  				}  				else {  					// The item did NOT have the same property or field value as the preceeding item.  					// "Close up" the previous sublist and start a new one.  					rgNewCopies.Add (rgSublist);  					rgSublist = new List<T> (rgList.Count / 32);  					rgSublist.Add (item);  				}  			}  			else {  				// The first item has no predecessor - just add the item to the first sublist  				rgSublist.Add (item);  			}  		}  		// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  		// Add the last created sublist to our "master list of sublists" :P  		// It may be that this list has 0 elements in some cases' but this is not a problem  		rgNewCopies.Add (rgSublist);  	}  	// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  	// Move to the next "level" of sublists in preparation for further sorting using the next  	// sort/comparison criterion  	rgCopies = rgNewCopies;  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: if (i < sortByCount - 1) {  	// Create new sublists by searching for the sorted-by value boundaries/changes  	// Our "best guess" (i.e. shot in the dark) is that we will create at least 8 sublists   	// from the original list.  NOT terribly efficient' but often sufficient.  	// Some advanced methods involve tracking duplicate values DURING the sort iteself  	List<List<T>> rgNewCopies = new List<List<T>> (rgCopies.Count * 8);  	for (int n = 0; n < rgCopies.Count; n++) {  		List<T> rgList = rgCopies [n];  		// Be conservative and set the initial sublist capacity to a small number' but  		// still honor the original list's item count.  (Example: If you are sorting a list  		// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  		// each sublist (each of which store all Address information entries with the same Zipcode)  		// with a capacity of 1000.   32'000 / 32 = 1000  		List<T> rgSublist = new List<T> (rgList.Count / 32);  		// Compare items to the item that preceeded it to determine where the "value boundaries"   		// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  		// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  		// when comparing elements during the sort routine).    		// Another alternative is to take advantage of the fact that the list is sorted and to  		// use a O(LogN) binary search rather than the (currently) linear O(N) search.  		for (int j = 0; j < rgList.Count; j++) {  			T item = rgList [j];  			if (j > 0) {  				// Compare the item to the preceeding item using the same comparison criterion  				// used during the sort  				T itemprev = rgList [j - 1];  				if (compare.Compare (item' itemprev) == 0) {  					// The item had the same property or field value as the preceeding item.    					// Add it on to the same sublist.  					rgSublist.Add (item);  				}  				else {  					// The item did NOT have the same property or field value as the preceeding item.  					// "Close up" the previous sublist and start a new one.  					rgNewCopies.Add (rgSublist);  					rgSublist = new List<T> (rgList.Count / 32);  					rgSublist.Add (item);  				}  			}  			else {  				// The first item has no predecessor - just add the item to the first sublist  				rgSublist.Add (item);  			}  		}  		// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  		// Add the last created sublist to our "master list of sublists" :P  		// It may be that this list has 0 elements in some cases' but this is not a problem  		rgNewCopies.Add (rgSublist);  	}  	// END: for (int n = 0; n < rgCopies.Count; n++) ... each sublist in rgCopies  	// Move to the next "level" of sublists in preparation for further sorting using the next  	// sort/comparison criterion  	rgCopies = rgNewCopies;  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: for (int n = 0; n < rgCopies.Count; n++) {  	List<T> rgList = rgCopies [n];  	// Be conservative and set the initial sublist capacity to a small number' but  	// still honor the original list's item count.  (Example: If you are sorting a list  	// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  	// each sublist (each of which store all Address information entries with the same Zipcode)  	// with a capacity of 1000.   32'000 / 32 = 1000  	List<T> rgSublist = new List<T> (rgList.Count / 32);  	// Compare items to the item that preceeded it to determine where the "value boundaries"   	// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  	// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  	// when comparing elements during the sort routine).    	// Another alternative is to take advantage of the fact that the list is sorted and to  	// use a O(LogN) binary search rather than the (currently) linear O(N) search.  	for (int j = 0; j < rgList.Count; j++) {  		T item = rgList [j];  		if (j > 0) {  			// Compare the item to the preceeding item using the same comparison criterion  			// used during the sort  			T itemprev = rgList [j - 1];  			if (compare.Compare (item' itemprev) == 0) {  				// The item had the same property or field value as the preceeding item.    				// Add it on to the same sublist.  				rgSublist.Add (item);  			}  			else {  				// The item did NOT have the same property or field value as the preceeding item.  				// "Close up" the previous sublist and start a new one.  				rgNewCopies.Add (rgSublist);  				rgSublist = new List<T> (rgList.Count / 32);  				rgSublist.Add (item);  			}  		}  		else {  			// The first item has no predecessor - just add the item to the first sublist  			rgSublist.Add (item);  		}  	}  	// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  	// Add the last created sublist to our "master list of sublists" :P  	// It may be that this list has 0 elements in some cases' but this is not a problem  	rgNewCopies.Add (rgSublist);  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: for (int n = 0; n < rgCopies.Count; n++) {  	List<T> rgList = rgCopies [n];  	// Be conservative and set the initial sublist capacity to a small number' but  	// still honor the original list's item count.  (Example: If you are sorting a list  	// of "Address information" by Zipcode and the list has 32'000 entries' then initialize  	// each sublist (each of which store all Address information entries with the same Zipcode)  	// with a capacity of 1000.   32'000 / 32 = 1000  	List<T> rgSublist = new List<T> (rgList.Count / 32);  	// Compare items to the item that preceeded it to determine where the "value boundaries"   	// are located.  If you will be sorting frequently and do not have cpu cycles to burn :)'  	// a smarter boundary-finding algorithm should be used.  (e.g. determine boundary locations  	// when comparing elements during the sort routine).    	// Another alternative is to take advantage of the fact that the list is sorted and to  	// use a O(LogN) binary search rather than the (currently) linear O(N) search.  	for (int j = 0; j < rgList.Count; j++) {  		T item = rgList [j];  		if (j > 0) {  			// Compare the item to the preceeding item using the same comparison criterion  			// used during the sort  			T itemprev = rgList [j - 1];  			if (compare.Compare (item' itemprev) == 0) {  				// The item had the same property or field value as the preceeding item.    				// Add it on to the same sublist.  				rgSublist.Add (item);  			}  			else {  				// The item did NOT have the same property or field value as the preceeding item.  				// "Close up" the previous sublist and start a new one.  				rgNewCopies.Add (rgSublist);  				rgSublist = new List<T> (rgList.Count / 32);  				rgSublist.Add (item);  			}  		}  		else {  			// The first item has no predecessor - just add the item to the first sublist  			rgSublist.Add (item);  		}  	}  	// END: for (int j = 0; j < rgList.Count; j++) ... each item in a sublist  	// Add the last created sublist to our "master list of sublists" :P  	// It may be that this list has 0 elements in some cases' but this is not a problem  	rgNewCopies.Add (rgSublist);  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: for (int j = 0; j < rgList.Count; j++) {  	T item = rgList [j];  	if (j > 0) {  		// Compare the item to the preceeding item using the same comparison criterion  		// used during the sort  		T itemprev = rgList [j - 1];  		if (compare.Compare (item' itemprev) == 0) {  			// The item had the same property or field value as the preceeding item.    			// Add it on to the same sublist.  			rgSublist.Add (item);  		}  		else {  			// The item did NOT have the same property or field value as the preceeding item.  			// "Close up" the previous sublist and start a new one.  			rgNewCopies.Add (rgSublist);  			rgSublist = new List<T> (rgList.Count / 32);  			rgSublist.Add (item);  		}  	}  	else {  		// The first item has no predecessor - just add the item to the first sublist  		rgSublist.Add (item);  	}  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: if (j > 0) {  	// Compare the item to the preceeding item using the same comparison criterion  	// used during the sort  	T itemprev = rgList [j - 1];  	if (compare.Compare (item' itemprev) == 0) {  		// The item had the same property or field value as the preceeding item.    		// Add it on to the same sublist.  		rgSublist.Add (item);  	}  	else {  		// The item did NOT have the same property or field value as the preceeding item.  		// "Close up" the previous sublist and start a new one.  		rgNewCopies.Add (rgSublist);  		rgSublist = new List<T> (rgList.Count / 32);  		rgSublist.Add (item);  	}  }  else {  	// The first item has no predecessor - just add the item to the first sublist  	rgSublist.Add (item);  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: if (compare.Compare (item' itemprev) == 0) {  	// The item had the same property or field value as the preceeding item.    	// Add it on to the same sublist.  	rgSublist.Add (item);  }  else {  	// The item did NOT have the same property or field value as the preceeding item.  	// "Close up" the previous sublist and start a new one.  	rgNewCopies.Add (rgSublist);  	rgSublist = new List<T> (rgList.Count / 32);  	rgSublist.Add (item);  }  
Magic Number,BinaryNorthwest,Sorting,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\MultiSort.cs,MultiSort,The following statement contains a magic number: rgSublist = new List<T> (rgList.Count / 32);  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (fFoundProperty == false) {  	fFoundProperty = true;  	if (pi == null) {  		PropertyDescriptorCollection props = TypeDescriptor.GetProperties (typeof(T));  		property = props [sPropertyName];  		pi = typeof(T).GetProperty (sPropertyName);  		if (pi == null) {  			throw new Exception ("Property name " + sPropertyName + " not found while trying to compare objects of type " + typeof(T).Name);  		}  	}  	typ = pi.PropertyType;  	// Set up the property comparison delegate to use based on the type of values we will be comparing  	if (sortType == SortType.eUsePropertyOrFieldType) {  		sortType = Sorting.GetSortTypeEnumForType (typ);  		if (typ == typeof(string)) {  			if (stringComparisonToUse == StringComparison.Ordinal)  				DoCompare = StringCompareOrdinal;  			else  				DoCompare = StringCompare;  		}  		else if (typ == typeof(int) && !fSortDescending)  			DoCompare = CompareInt;  		else if (typ == typeof(int))  			DoCompare = CompareIntDesc;  		else if (typ == typeof(DateTime))  			DoCompare = CompareDates;  		else if (typ == typeof(long))  			DoCompare = CompareTypeSensitive<long>;  		else if (typ == typeof(double))  			DoCompare = CompareTypeSensitive<double>;  		else if (typ == typeof(float))  			DoCompare = CompareTypeSensitive<float>;  		else if (typ == typeof(short))  			DoCompare = CompareTypeSensitive<short>;  		else if (typ == typeof(byte))  			DoCompare = CompareTypeSensitive<byte>;  		else if (typ == typeof(bool))  			DoCompare = CompareTypeSensitive<bool>;  		else if (typ.BaseType == typeof(Enum)) {  			FastEnumLookup = new Dictionary<int' string> (32);  			if (fSortDescending) {  				DoCompare = FastCompareEnumsDesc;  			}  			else {  				DoCompare = FastCompareEnumsAsc;  			}  		}  		else  			DoCompare = CompareUsingToString;  	}  	else {  		if (sortType == SortType.eString)  			DoCompare = CompareUsingToString;  		else if (sortType == SortType.eByte)  			DoCompare = CompareUsingToByte;  		else if (sortType == SortType.eDateTime)  			DoCompare = CompareUsingToDate;  		else if (sortType == SortType.eInteger)  			DoCompare = CompareUsingToInt;  		else if (sortType == SortType.eLong)  			DoCompare = CompareUsingToInt64;  		else if (sortType == SortType.eDoubleOrFloat)  			DoCompare = CompareUsingToDouble;  		else  			DoCompare = CompareUsingToString;  	}  }  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (sortType == SortType.eUsePropertyOrFieldType) {  	sortType = Sorting.GetSortTypeEnumForType (typ);  	if (typ == typeof(string)) {  		if (stringComparisonToUse == StringComparison.Ordinal)  			DoCompare = StringCompareOrdinal;  		else  			DoCompare = StringCompare;  	}  	else if (typ == typeof(int) && !fSortDescending)  		DoCompare = CompareInt;  	else if (typ == typeof(int))  		DoCompare = CompareIntDesc;  	else if (typ == typeof(DateTime))  		DoCompare = CompareDates;  	else if (typ == typeof(long))  		DoCompare = CompareTypeSensitive<long>;  	else if (typ == typeof(double))  		DoCompare = CompareTypeSensitive<double>;  	else if (typ == typeof(float))  		DoCompare = CompareTypeSensitive<float>;  	else if (typ == typeof(short))  		DoCompare = CompareTypeSensitive<short>;  	else if (typ == typeof(byte))  		DoCompare = CompareTypeSensitive<byte>;  	else if (typ == typeof(bool))  		DoCompare = CompareTypeSensitive<bool>;  	else if (typ.BaseType == typeof(Enum)) {  		FastEnumLookup = new Dictionary<int' string> (32);  		if (fSortDescending) {  			DoCompare = FastCompareEnumsDesc;  		}  		else {  			DoCompare = FastCompareEnumsAsc;  		}  	}  	else  		DoCompare = CompareUsingToString;  }  else {  	if (sortType == SortType.eString)  		DoCompare = CompareUsingToString;  	else if (sortType == SortType.eByte)  		DoCompare = CompareUsingToByte;  	else if (sortType == SortType.eDateTime)  		DoCompare = CompareUsingToDate;  	else if (sortType == SortType.eInteger)  		DoCompare = CompareUsingToInt;  	else if (sortType == SortType.eLong)  		DoCompare = CompareUsingToInt64;  	else if (sortType == SortType.eDoubleOrFloat)  		DoCompare = CompareUsingToDouble;  	else  		DoCompare = CompareUsingToString;  }  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(string)) {  	if (stringComparisonToUse == StringComparison.Ordinal)  		DoCompare = StringCompareOrdinal;  	else  		DoCompare = StringCompare;  }  else if (typ == typeof(int) && !fSortDescending)  	DoCompare = CompareInt;  else if (typ == typeof(int))  	DoCompare = CompareIntDesc;  else if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(int) && !fSortDescending)  	DoCompare = CompareInt;  else if (typ == typeof(int))  	DoCompare = CompareIntDesc;  else if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(int))  	DoCompare = CompareIntDesc;  else if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareProperties,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: FastEnumLookup = new Dictionary<int' string> (32);  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (fFoundField == false) {  	fFoundField = true;  	if (fi == null) {  		// You can play around with binding flags if you really want to access nonpublic fields' etc...   		// note that there is a significant performance hit on accessing protected and private fields'  		// since security / permissions are checked every time' from what I can tell.  It's better  		// just to go through public properties if you're not accessing public fields.  		// fi = typeof(T).GetField(sFieldName' BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);  		fi = typeof(T).GetField (sFieldName);  		if (fi == null) {  			throw new Exception ("Field name " + sFieldName + " not found while trying to compare objects of type " + typeof(T).Name);  		}  	}  	typ = fi.FieldType;  	if (sortType == SortType.eUsePropertyOrFieldType) {  		sortType = Sorting.GetSortTypeEnumForType (typ);  		if (typ == typeof(string)) {  			if (stringComparisonToUse == StringComparison.Ordinal)  				DoCompare = StringCompareOrdinal;  			else  				DoCompare = StringCompare;  		}  		else if (typ == typeof(int) && !fSortDescending)  			DoCompare = CompareInt;  		else if (typ == typeof(int))  			DoCompare = CompareIntDesc;  		else if (typ == typeof(DateTime))  			DoCompare = CompareDates;  		else if (typ == typeof(long))  			DoCompare = CompareTypeSensitive<long>;  		else if (typ == typeof(double))  			DoCompare = CompareTypeSensitive<double>;  		else if (typ == typeof(float))  			DoCompare = CompareTypeSensitive<float>;  		else if (typ == typeof(short))  			DoCompare = CompareTypeSensitive<short>;  		else if (typ == typeof(byte))  			DoCompare = CompareTypeSensitive<byte>;  		else if (typ == typeof(bool))  			DoCompare = CompareTypeSensitive<bool>;  		else if (typ.BaseType == typeof(Enum)) {  			FastEnumLookup = new Dictionary<int' string> (32);  			if (fSortDescending) {  				DoCompare = FastCompareEnumsDesc;  			}  			else {  				DoCompare = FastCompareEnumsAsc;  			}  		}  		else  			DoCompare = CompareUsingToString;  		// optimize to use the ABOVE path if the property or field type matches  		// the requested sort type (i.e. below)  	}  	else {  		if (sortType == SortType.eString)  			DoCompare = CompareUsingToString;  		else if (sortType == SortType.eByte)  			DoCompare = CompareUsingToByte;  		else if (sortType == SortType.eDateTime)  			DoCompare = CompareUsingToDate;  		else if (sortType == SortType.eInteger)  			DoCompare = CompareUsingToInt;  		else if (sortType == SortType.eLong)  			DoCompare = CompareUsingToInt64;  		else if (sortType == SortType.eDoubleOrFloat)  			DoCompare = CompareUsingToDouble;  		else  			DoCompare = CompareUsingToString;  	}  }  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (sortType == SortType.eUsePropertyOrFieldType) {  	sortType = Sorting.GetSortTypeEnumForType (typ);  	if (typ == typeof(string)) {  		if (stringComparisonToUse == StringComparison.Ordinal)  			DoCompare = StringCompareOrdinal;  		else  			DoCompare = StringCompare;  	}  	else if (typ == typeof(int) && !fSortDescending)  		DoCompare = CompareInt;  	else if (typ == typeof(int))  		DoCompare = CompareIntDesc;  	else if (typ == typeof(DateTime))  		DoCompare = CompareDates;  	else if (typ == typeof(long))  		DoCompare = CompareTypeSensitive<long>;  	else if (typ == typeof(double))  		DoCompare = CompareTypeSensitive<double>;  	else if (typ == typeof(float))  		DoCompare = CompareTypeSensitive<float>;  	else if (typ == typeof(short))  		DoCompare = CompareTypeSensitive<short>;  	else if (typ == typeof(byte))  		DoCompare = CompareTypeSensitive<byte>;  	else if (typ == typeof(bool))  		DoCompare = CompareTypeSensitive<bool>;  	else if (typ.BaseType == typeof(Enum)) {  		FastEnumLookup = new Dictionary<int' string> (32);  		if (fSortDescending) {  			DoCompare = FastCompareEnumsDesc;  		}  		else {  			DoCompare = FastCompareEnumsAsc;  		}  	}  	else  		DoCompare = CompareUsingToString;  	// optimize to use the ABOVE path if the property or field type matches  	// the requested sort type (i.e. below)  }  else {  	if (sortType == SortType.eString)  		DoCompare = CompareUsingToString;  	else if (sortType == SortType.eByte)  		DoCompare = CompareUsingToByte;  	else if (sortType == SortType.eDateTime)  		DoCompare = CompareUsingToDate;  	else if (sortType == SortType.eInteger)  		DoCompare = CompareUsingToInt;  	else if (sortType == SortType.eLong)  		DoCompare = CompareUsingToInt64;  	else if (sortType == SortType.eDoubleOrFloat)  		DoCompare = CompareUsingToDouble;  	else  		DoCompare = CompareUsingToString;  }  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(string)) {  	if (stringComparisonToUse == StringComparison.Ordinal)  		DoCompare = StringCompareOrdinal;  	else  		DoCompare = StringCompare;  }  else if (typ == typeof(int) && !fSortDescending)  	DoCompare = CompareInt;  else if (typ == typeof(int))  	DoCompare = CompareIntDesc;  else if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(int) && !fSortDescending)  	DoCompare = CompareInt;  else if (typ == typeof(int))  	DoCompare = CompareIntDesc;  else if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(int))  	DoCompare = CompareIntDesc;  else if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(DateTime))  	DoCompare = CompareDates;  else if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(long))  	DoCompare = CompareTypeSensitive<long>;  else if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(double))  	DoCompare = CompareTypeSensitive<double>;  else if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(float))  	DoCompare = CompareTypeSensitive<float>;  else if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(short))  	DoCompare = CompareTypeSensitive<short>;  else if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(byte))  	DoCompare = CompareTypeSensitive<byte>;  else if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ == typeof(bool))  	DoCompare = CompareTypeSensitive<bool>;  else if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: if (typ.BaseType == typeof(Enum)) {  	FastEnumLookup = new Dictionary<int' string> (32);  	if (fSortDescending) {  		DoCompare = FastCompareEnumsDesc;  	}  	else {  		DoCompare = FastCompareEnumsAsc;  	}  }  else  	DoCompare = CompareUsingToString;  
Magic Number,BinaryNorthwest,CompareFields,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MultiSortLib\ValueComparison.cs,Initialize,The following statement contains a magic number: FastEnumLookup = new Dictionary<int' string> (32);  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,SetSeriesWidgetOrder,The following statement contains a magic number: SeriesPos_PlayNextEpisode = UserSettingsVM.Instance.GetSeriesWidgetPosition (SeriesWidgets.PlayNextEpisode) + 4;  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,SetSeriesWidgetOrder,The following statement contains a magic number: SeriesPos_TvDBLinks = UserSettingsVM.Instance.GetSeriesWidgetPosition (SeriesWidgets.TvDBLinks) + 4;  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,SetSeriesWidgetOrder,The following statement contains a magic number: SeriesPos_FileSummary = UserSettingsVM.Instance.GetSeriesWidgetPosition (SeriesWidgets.FileSummary) + 4;  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,SetSeriesWidgetOrder,The following statement contains a magic number: SeriesPos_Categories = UserSettingsVM.Instance.GetSeriesWidgetPosition (SeriesWidgets.Categories) + 4;  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,SetSeriesWidgetOrder,The following statement contains a magic number: SeriesPos_Titles = UserSettingsVM.Instance.GetSeriesWidgetPosition (SeriesWidgets.Titles) + 4;  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,SetSeriesWidgetOrder,The following statement contains a magic number: SeriesPos_Tags = UserSettingsVM.Instance.GetSeriesWidgetPosition (SeriesWidgets.Tags) + 4;  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (e.Source is TabControl) {  	TabControl tab = e.Source as TabControl;  	if (tab.SelectedIndex == 1)// episodes  	 {  		this.Cursor = Cursors.Wait;  		epListMain.PopulateToolbars ();  		this.Cursor = Cursors.Arrow;  	}  	else if (tab.SelectedIndex == 2)// images  	 {  		RefreshImagesData ();  	}  	else if (tab.SelectedIndex == 3)// related and similar  	 {  		this.Cursor = Cursors.Wait;  		ucSimilarAnime.RefreshData ();  		ucRelatedAnime.RefreshData ();  		this.Cursor = Cursors.Arrow;  	}  	else if (tab.SelectedIndex == 4)// trakt shouts  	 {  		this.Cursor = Cursors.Wait;  		ucTraktShouts.RefreshShouts ();  		this.Cursor = Cursors.Arrow;  	}  }  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (e.Source is TabControl) {  	TabControl tab = e.Source as TabControl;  	if (tab.SelectedIndex == 1)// episodes  	 {  		this.Cursor = Cursors.Wait;  		epListMain.PopulateToolbars ();  		this.Cursor = Cursors.Arrow;  	}  	else if (tab.SelectedIndex == 2)// images  	 {  		RefreshImagesData ();  	}  	else if (tab.SelectedIndex == 3)// related and similar  	 {  		this.Cursor = Cursors.Wait;  		ucSimilarAnime.RefreshData ();  		ucRelatedAnime.RefreshData ();  		this.Cursor = Cursors.Arrow;  	}  	else if (tab.SelectedIndex == 4)// trakt shouts  	 {  		this.Cursor = Cursors.Wait;  		ucTraktShouts.RefreshShouts ();  		this.Cursor = Cursors.Arrow;  	}  }  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (e.Source is TabControl) {  	TabControl tab = e.Source as TabControl;  	if (tab.SelectedIndex == 1)// episodes  	 {  		this.Cursor = Cursors.Wait;  		epListMain.PopulateToolbars ();  		this.Cursor = Cursors.Arrow;  	}  	else if (tab.SelectedIndex == 2)// images  	 {  		RefreshImagesData ();  	}  	else if (tab.SelectedIndex == 3)// related and similar  	 {  		this.Cursor = Cursors.Wait;  		ucSimilarAnime.RefreshData ();  		ucRelatedAnime.RefreshData ();  		this.Cursor = Cursors.Arrow;  	}  	else if (tab.SelectedIndex == 4)// trakt shouts  	 {  		this.Cursor = Cursors.Wait;  		ucTraktShouts.RefreshShouts ();  		this.Cursor = Cursors.Arrow;  	}  }  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (tab.SelectedIndex == 1)// episodes   {  	this.Cursor = Cursors.Wait;  	epListMain.PopulateToolbars ();  	this.Cursor = Cursors.Arrow;  }  else if (tab.SelectedIndex == 2)// images   {  	RefreshImagesData ();  }  else if (tab.SelectedIndex == 3)// related and similar   {  	this.Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	this.Cursor = Cursors.Arrow;  }  else if (tab.SelectedIndex == 4)// trakt shouts   {  	this.Cursor = Cursors.Wait;  	ucTraktShouts.RefreshShouts ();  	this.Cursor = Cursors.Arrow;  }  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (tab.SelectedIndex == 1)// episodes   {  	this.Cursor = Cursors.Wait;  	epListMain.PopulateToolbars ();  	this.Cursor = Cursors.Arrow;  }  else if (tab.SelectedIndex == 2)// images   {  	RefreshImagesData ();  }  else if (tab.SelectedIndex == 3)// related and similar   {  	this.Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	this.Cursor = Cursors.Arrow;  }  else if (tab.SelectedIndex == 4)// trakt shouts   {  	this.Cursor = Cursors.Wait;  	ucTraktShouts.RefreshShouts ();  	this.Cursor = Cursors.Arrow;  }  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (tab.SelectedIndex == 1)// episodes   {  	this.Cursor = Cursors.Wait;  	epListMain.PopulateToolbars ();  	this.Cursor = Cursors.Arrow;  }  else if (tab.SelectedIndex == 2)// images   {  	RefreshImagesData ();  }  else if (tab.SelectedIndex == 3)// related and similar   {  	this.Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	this.Cursor = Cursors.Arrow;  }  else if (tab.SelectedIndex == 4)// trakt shouts   {  	this.Cursor = Cursors.Wait;  	ucTraktShouts.RefreshShouts ();  	this.Cursor = Cursors.Arrow;  }  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (tab.SelectedIndex == 2)// images   {  	RefreshImagesData ();  }  else if (tab.SelectedIndex == 3)// related and similar   {  	this.Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	this.Cursor = Cursors.Arrow;  }  else if (tab.SelectedIndex == 4)// trakt shouts   {  	this.Cursor = Cursors.Wait;  	ucTraktShouts.RefreshShouts ();  	this.Cursor = Cursors.Arrow;  }  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (tab.SelectedIndex == 2)// images   {  	RefreshImagesData ();  }  else if (tab.SelectedIndex == 3)// related and similar   {  	this.Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	this.Cursor = Cursors.Arrow;  }  else if (tab.SelectedIndex == 4)// trakt shouts   {  	this.Cursor = Cursors.Wait;  	ucTraktShouts.RefreshShouts ();  	this.Cursor = Cursors.Arrow;  }  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (tab.SelectedIndex == 2)// images   {  	RefreshImagesData ();  }  else if (tab.SelectedIndex == 3)// related and similar   {  	this.Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	this.Cursor = Cursors.Arrow;  }  else if (tab.SelectedIndex == 4)// trakt shouts   {  	this.Cursor = Cursors.Wait;  	ucTraktShouts.RefreshShouts ();  	this.Cursor = Cursors.Arrow;  }  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (tab.SelectedIndex == 3)// related and similar   {  	this.Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	this.Cursor = Cursors.Arrow;  }  else if (tab.SelectedIndex == 4)// trakt shouts   {  	this.Cursor = Cursors.Wait;  	ucTraktShouts.RefreshShouts ();  	this.Cursor = Cursors.Arrow;  }  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (tab.SelectedIndex == 3)// related and similar   {  	this.Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	this.Cursor = Cursors.Arrow;  }  else if (tab.SelectedIndex == 4)// trakt shouts   {  	this.Cursor = Cursors.Wait;  	ucTraktShouts.RefreshShouts ();  	this.Cursor = Cursors.Arrow;  }  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (tab.SelectedIndex == 4)// trakt shouts   {  	this.Cursor = Cursors.Wait;  	ucTraktShouts.RefreshShouts ();  	this.Cursor = Cursors.Arrow;  }  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,LoadSeries,The following statement contains a magic number: if (tabContainer.SelectedIndex == 1)// episodes   {  	epListMain.PopulateToolbars ();  }  else if (tabContainer.SelectedIndex == 2)// images   {  	RefreshImagesData ();  }  else if (tabContainer.SelectedIndex == 3)// related and similar   {  	this.Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	this.Cursor = Cursors.Arrow;  }  else if (tabContainer.SelectedIndex == 4)// trakt shouts   {  	this.Cursor = Cursors.Wait;  	ucTraktShouts.RefreshShouts ();  	this.Cursor = Cursors.Arrow;  }  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,LoadSeries,The following statement contains a magic number: if (tabContainer.SelectedIndex == 1)// episodes   {  	epListMain.PopulateToolbars ();  }  else if (tabContainer.SelectedIndex == 2)// images   {  	RefreshImagesData ();  }  else if (tabContainer.SelectedIndex == 3)// related and similar   {  	this.Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	this.Cursor = Cursors.Arrow;  }  else if (tabContainer.SelectedIndex == 4)// trakt shouts   {  	this.Cursor = Cursors.Wait;  	ucTraktShouts.RefreshShouts ();  	this.Cursor = Cursors.Arrow;  }  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,LoadSeries,The following statement contains a magic number: if (tabContainer.SelectedIndex == 1)// episodes   {  	epListMain.PopulateToolbars ();  }  else if (tabContainer.SelectedIndex == 2)// images   {  	RefreshImagesData ();  }  else if (tabContainer.SelectedIndex == 3)// related and similar   {  	this.Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	this.Cursor = Cursors.Arrow;  }  else if (tabContainer.SelectedIndex == 4)// trakt shouts   {  	this.Cursor = Cursors.Wait;  	ucTraktShouts.RefreshShouts ();  	this.Cursor = Cursors.Arrow;  }  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,LoadSeries,The following statement contains a magic number: if (tabContainer.SelectedIndex == 2)// images   {  	RefreshImagesData ();  }  else if (tabContainer.SelectedIndex == 3)// related and similar   {  	this.Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	this.Cursor = Cursors.Arrow;  }  else if (tabContainer.SelectedIndex == 4)// trakt shouts   {  	this.Cursor = Cursors.Wait;  	ucTraktShouts.RefreshShouts ();  	this.Cursor = Cursors.Arrow;  }  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,LoadSeries,The following statement contains a magic number: if (tabContainer.SelectedIndex == 2)// images   {  	RefreshImagesData ();  }  else if (tabContainer.SelectedIndex == 3)// related and similar   {  	this.Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	this.Cursor = Cursors.Arrow;  }  else if (tabContainer.SelectedIndex == 4)// trakt shouts   {  	this.Cursor = Cursors.Wait;  	ucTraktShouts.RefreshShouts ();  	this.Cursor = Cursors.Arrow;  }  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,LoadSeries,The following statement contains a magic number: if (tabContainer.SelectedIndex == 2)// images   {  	RefreshImagesData ();  }  else if (tabContainer.SelectedIndex == 3)// related and similar   {  	this.Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	this.Cursor = Cursors.Arrow;  }  else if (tabContainer.SelectedIndex == 4)// trakt shouts   {  	this.Cursor = Cursors.Wait;  	ucTraktShouts.RefreshShouts ();  	this.Cursor = Cursors.Arrow;  }  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,LoadSeries,The following statement contains a magic number: if (tabContainer.SelectedIndex == 3)// related and similar   {  	this.Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	this.Cursor = Cursors.Arrow;  }  else if (tabContainer.SelectedIndex == 4)// trakt shouts   {  	this.Cursor = Cursors.Wait;  	ucTraktShouts.RefreshShouts ();  	this.Cursor = Cursors.Arrow;  }  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,LoadSeries,The following statement contains a magic number: if (tabContainer.SelectedIndex == 3)// related and similar   {  	this.Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	this.Cursor = Cursors.Arrow;  }  else if (tabContainer.SelectedIndex == 4)// trakt shouts   {  	this.Cursor = Cursors.Wait;  	ucTraktShouts.RefreshShouts ();  	this.Cursor = Cursors.Arrow;  }  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,LoadSeries,The following statement contains a magic number: if (tabContainer.SelectedIndex == 4)// trakt shouts   {  	this.Cursor = Cursors.Wait;  	ucTraktShouts.RefreshShouts ();  	this.Cursor = Cursors.Arrow;  }  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,cRating_OnRatingValueChangedEvent,The following statement contains a magic number: try {  	decimal rating = (decimal)ev.RatingValue;  	int voteType = 1;  	if (cboVoteType.SelectedItem.ToString () == Properties.Resources.VoteTypeAnimeTemporary)  		voteType = 2;  	if (cboVoteType.SelectedItem.ToString () == Properties.Resources.VoteTypeAnimePermanent)  		voteType = 1;  	JMMServerVM.Instance.VoteAnime (ser.AniDB_ID' rating' voteType);  	// refresh the data  	//ser.RefreshBase();  	//ser.AniDB_Anime.Detail.RefreshBase();  	MainListHelperVM.Instance.UpdateHeirarchy (ser);  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,cRating_OnRatingValueChangedEvent,The following statement contains a magic number: if (cboVoteType.SelectedItem.ToString () == Properties.Resources.VoteTypeAnimeTemporary)  	voteType = 2;  
Magic Number,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,cRating_OnRatingValueChangedEvent,The following statement contains a magic number: voteType = 2;  
Magic Number,JMMClient.UserControls,AvdumpBatchControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AvdumpBatchControl.xaml.cs,workerAvdump_DoWork,The following statement contains a magic number: try {  	foreach (AVDumpVM dump in filesToDump) {  		if (stopDump)  			return;  		// get the record from main VM  		AVDumpVM tempDump = null;  		foreach (AVDumpVM dm in MainListHelperVM.Instance.AVDumpFiles) {  			if (dm.FullPath == dump.FullPath) {  				tempDump = dm;  				break;  			}  		}  		if (tempDump == null)  			continue;  		tempDump.IsBeingDumped = true;  		tempDump.DumpStatus = "Processing...";  		//Create process  		System.Diagnostics.Process pProcess = new System.Diagnostics.Process ();  		//strCommand is path and file name of command to run  		string appPath = System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  		string filePath = System.IO.Path.Combine (appPath' "AVDump2CL.exe");  		if (!File.Exists (filePath)) {  			tempDump.AVDumpFullResult = "Could not find AvDump2 CLI: " + filePath;  			tempDump.ED2KDump = Utils.GetED2KDump (tempDump.AVDumpFullResult);  			tempDump.IsBeingDumped = false;  			tempDump.DumpStatus = "Error!";  			tempDump.HasBeenDumped = false;  			continue;  		}  		if (!File.Exists (dump.VideoLocal.FullPath)) {  			tempDump.AVDumpFullResult = "Could not find Video File: " + dump.VideoLocal.FullPath;  			tempDump.ED2KDump = Utils.GetED2KDump (tempDump.AVDumpFullResult);  			tempDump.IsBeingDumped = false;  			tempDump.DumpStatus = "Error!";  			tempDump.HasBeenDumped = false;  			return;  		}  		pProcess.StartInfo.FileName = filePath;  		//strCommandParameters are parameters to pass to program  		string fileName = (char)34 + dump.VideoLocal.FullPath + (char)34;  		pProcess.StartInfo.Arguments = string.Format (@" --Auth={0}:{1} --LPort={2} --PrintEd2kLink -t {3}"' JMMServerVM.Instance.AniDB_Username' JMMServerVM.Instance.AniDB_AVDumpKey' JMMServerVM.Instance.AniDB_AVDumpClientPort' fileName);  		pProcess.StartInfo.UseShellExecute = false;  		pProcess.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;  		pProcess.StartInfo.RedirectStandardOutput = true;  		pProcess.StartInfo.CreateNoWindow = true;  		pProcess.Start ();  		string strOutput = pProcess.StandardOutput.ReadToEnd ();  		//Wait for process to finish  		pProcess.WaitForExit ();  		tempDump.AVDumpFullResult = strOutput;  		tempDump.ED2KDump = Utils.GetED2KDump (tempDump.AVDumpFullResult);  		if (string.IsNullOrEmpty (tempDump.ED2KDump)) {  			tempDump.IsBeingDumped = false;  			tempDump.DumpStatus = "Error!";  			tempDump.HasBeenDumped = false;  		}  		else {  			tempDump.IsBeingDumped = false;  			tempDump.DumpStatus = "Complete!";  			tempDump.HasBeenDumped = true;  		}  	}  }  catch (Exception ex) {  	//Utils.ShowErrorMessage(ex);  }  
Magic Number,JMMClient.UserControls,AvdumpBatchControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AvdumpBatchControl.xaml.cs,workerAvdump_DoWork,The following statement contains a magic number: try {  	foreach (AVDumpVM dump in filesToDump) {  		if (stopDump)  			return;  		// get the record from main VM  		AVDumpVM tempDump = null;  		foreach (AVDumpVM dm in MainListHelperVM.Instance.AVDumpFiles) {  			if (dm.FullPath == dump.FullPath) {  				tempDump = dm;  				break;  			}  		}  		if (tempDump == null)  			continue;  		tempDump.IsBeingDumped = true;  		tempDump.DumpStatus = "Processing...";  		//Create process  		System.Diagnostics.Process pProcess = new System.Diagnostics.Process ();  		//strCommand is path and file name of command to run  		string appPath = System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  		string filePath = System.IO.Path.Combine (appPath' "AVDump2CL.exe");  		if (!File.Exists (filePath)) {  			tempDump.AVDumpFullResult = "Could not find AvDump2 CLI: " + filePath;  			tempDump.ED2KDump = Utils.GetED2KDump (tempDump.AVDumpFullResult);  			tempDump.IsBeingDumped = false;  			tempDump.DumpStatus = "Error!";  			tempDump.HasBeenDumped = false;  			continue;  		}  		if (!File.Exists (dump.VideoLocal.FullPath)) {  			tempDump.AVDumpFullResult = "Could not find Video File: " + dump.VideoLocal.FullPath;  			tempDump.ED2KDump = Utils.GetED2KDump (tempDump.AVDumpFullResult);  			tempDump.IsBeingDumped = false;  			tempDump.DumpStatus = "Error!";  			tempDump.HasBeenDumped = false;  			return;  		}  		pProcess.StartInfo.FileName = filePath;  		//strCommandParameters are parameters to pass to program  		string fileName = (char)34 + dump.VideoLocal.FullPath + (char)34;  		pProcess.StartInfo.Arguments = string.Format (@" --Auth={0}:{1} --LPort={2} --PrintEd2kLink -t {3}"' JMMServerVM.Instance.AniDB_Username' JMMServerVM.Instance.AniDB_AVDumpKey' JMMServerVM.Instance.AniDB_AVDumpClientPort' fileName);  		pProcess.StartInfo.UseShellExecute = false;  		pProcess.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;  		pProcess.StartInfo.RedirectStandardOutput = true;  		pProcess.StartInfo.CreateNoWindow = true;  		pProcess.Start ();  		string strOutput = pProcess.StandardOutput.ReadToEnd ();  		//Wait for process to finish  		pProcess.WaitForExit ();  		tempDump.AVDumpFullResult = strOutput;  		tempDump.ED2KDump = Utils.GetED2KDump (tempDump.AVDumpFullResult);  		if (string.IsNullOrEmpty (tempDump.ED2KDump)) {  			tempDump.IsBeingDumped = false;  			tempDump.DumpStatus = "Error!";  			tempDump.HasBeenDumped = false;  		}  		else {  			tempDump.IsBeingDumped = false;  			tempDump.DumpStatus = "Complete!";  			tempDump.HasBeenDumped = true;  		}  	}  }  catch (Exception ex) {  	//Utils.ShowErrorMessage(ex);  }  
Magic Number,JMMClient.UserControls,AvdumpBatchControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AvdumpBatchControl.xaml.cs,workerAvdump_DoWork,The following statement contains a magic number: foreach (AVDumpVM dump in filesToDump) {  	if (stopDump)  		return;  	// get the record from main VM  	AVDumpVM tempDump = null;  	foreach (AVDumpVM dm in MainListHelperVM.Instance.AVDumpFiles) {  		if (dm.FullPath == dump.FullPath) {  			tempDump = dm;  			break;  		}  	}  	if (tempDump == null)  		continue;  	tempDump.IsBeingDumped = true;  	tempDump.DumpStatus = "Processing...";  	//Create process  	System.Diagnostics.Process pProcess = new System.Diagnostics.Process ();  	//strCommand is path and file name of command to run  	string appPath = System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  	string filePath = System.IO.Path.Combine (appPath' "AVDump2CL.exe");  	if (!File.Exists (filePath)) {  		tempDump.AVDumpFullResult = "Could not find AvDump2 CLI: " + filePath;  		tempDump.ED2KDump = Utils.GetED2KDump (tempDump.AVDumpFullResult);  		tempDump.IsBeingDumped = false;  		tempDump.DumpStatus = "Error!";  		tempDump.HasBeenDumped = false;  		continue;  	}  	if (!File.Exists (dump.VideoLocal.FullPath)) {  		tempDump.AVDumpFullResult = "Could not find Video File: " + dump.VideoLocal.FullPath;  		tempDump.ED2KDump = Utils.GetED2KDump (tempDump.AVDumpFullResult);  		tempDump.IsBeingDumped = false;  		tempDump.DumpStatus = "Error!";  		tempDump.HasBeenDumped = false;  		return;  	}  	pProcess.StartInfo.FileName = filePath;  	//strCommandParameters are parameters to pass to program  	string fileName = (char)34 + dump.VideoLocal.FullPath + (char)34;  	pProcess.StartInfo.Arguments = string.Format (@" --Auth={0}:{1} --LPort={2} --PrintEd2kLink -t {3}"' JMMServerVM.Instance.AniDB_Username' JMMServerVM.Instance.AniDB_AVDumpKey' JMMServerVM.Instance.AniDB_AVDumpClientPort' fileName);  	pProcess.StartInfo.UseShellExecute = false;  	pProcess.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;  	pProcess.StartInfo.RedirectStandardOutput = true;  	pProcess.StartInfo.CreateNoWindow = true;  	pProcess.Start ();  	string strOutput = pProcess.StandardOutput.ReadToEnd ();  	//Wait for process to finish  	pProcess.WaitForExit ();  	tempDump.AVDumpFullResult = strOutput;  	tempDump.ED2KDump = Utils.GetED2KDump (tempDump.AVDumpFullResult);  	if (string.IsNullOrEmpty (tempDump.ED2KDump)) {  		tempDump.IsBeingDumped = false;  		tempDump.DumpStatus = "Error!";  		tempDump.HasBeenDumped = false;  	}  	else {  		tempDump.IsBeingDumped = false;  		tempDump.DumpStatus = "Complete!";  		tempDump.HasBeenDumped = true;  	}  }  
Magic Number,JMMClient.UserControls,AvdumpBatchControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AvdumpBatchControl.xaml.cs,workerAvdump_DoWork,The following statement contains a magic number: foreach (AVDumpVM dump in filesToDump) {  	if (stopDump)  		return;  	// get the record from main VM  	AVDumpVM tempDump = null;  	foreach (AVDumpVM dm in MainListHelperVM.Instance.AVDumpFiles) {  		if (dm.FullPath == dump.FullPath) {  			tempDump = dm;  			break;  		}  	}  	if (tempDump == null)  		continue;  	tempDump.IsBeingDumped = true;  	tempDump.DumpStatus = "Processing...";  	//Create process  	System.Diagnostics.Process pProcess = new System.Diagnostics.Process ();  	//strCommand is path and file name of command to run  	string appPath = System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  	string filePath = System.IO.Path.Combine (appPath' "AVDump2CL.exe");  	if (!File.Exists (filePath)) {  		tempDump.AVDumpFullResult = "Could not find AvDump2 CLI: " + filePath;  		tempDump.ED2KDump = Utils.GetED2KDump (tempDump.AVDumpFullResult);  		tempDump.IsBeingDumped = false;  		tempDump.DumpStatus = "Error!";  		tempDump.HasBeenDumped = false;  		continue;  	}  	if (!File.Exists (dump.VideoLocal.FullPath)) {  		tempDump.AVDumpFullResult = "Could not find Video File: " + dump.VideoLocal.FullPath;  		tempDump.ED2KDump = Utils.GetED2KDump (tempDump.AVDumpFullResult);  		tempDump.IsBeingDumped = false;  		tempDump.DumpStatus = "Error!";  		tempDump.HasBeenDumped = false;  		return;  	}  	pProcess.StartInfo.FileName = filePath;  	//strCommandParameters are parameters to pass to program  	string fileName = (char)34 + dump.VideoLocal.FullPath + (char)34;  	pProcess.StartInfo.Arguments = string.Format (@" --Auth={0}:{1} --LPort={2} --PrintEd2kLink -t {3}"' JMMServerVM.Instance.AniDB_Username' JMMServerVM.Instance.AniDB_AVDumpKey' JMMServerVM.Instance.AniDB_AVDumpClientPort' fileName);  	pProcess.StartInfo.UseShellExecute = false;  	pProcess.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;  	pProcess.StartInfo.RedirectStandardOutput = true;  	pProcess.StartInfo.CreateNoWindow = true;  	pProcess.Start ();  	string strOutput = pProcess.StandardOutput.ReadToEnd ();  	//Wait for process to finish  	pProcess.WaitForExit ();  	tempDump.AVDumpFullResult = strOutput;  	tempDump.ED2KDump = Utils.GetED2KDump (tempDump.AVDumpFullResult);  	if (string.IsNullOrEmpty (tempDump.ED2KDump)) {  		tempDump.IsBeingDumped = false;  		tempDump.DumpStatus = "Error!";  		tempDump.HasBeenDumped = false;  	}  	else {  		tempDump.IsBeingDumped = false;  		tempDump.DumpStatus = "Complete!";  		tempDump.HasBeenDumped = true;  	}  }  
Magic Number,JMMClient.UserControls,AvdumpFileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AvdumpFileControl.xaml.cs,AvdumpFileControl_DataContextChanged,The following statement contains a magic number: try {  	DumpSingle = false;  	DumpMultiple = false;  	if (this.DataContext == null)  		return;  	if (this.DataContext.GetType () == typeof(AVDumpVM)) {  		AVDumpVM dump = this.DataContext as AVDumpVM;  		if (dump != null) {  			AllAnime.Clear ();  			foreach (AniDB_AnimeVM anime in AniDB_AnimeVM.BestLevenshteinDistanceMatches (dump.VideoLocal.ClosestAnimeMatchString' 10)) {  				AllAnime.Add (anime);  			}  			if (AllAnime.Count > 0)  				lbAnime.SelectedIndex = 0;  			if (string.IsNullOrEmpty (dump.AVDumpFullResult)) {  				string ed2kDump = "Pre-calculated ED2K Dump string" + Environment.NewLine;  				ed2kDump += "---------------------------" + Environment.NewLine;  				ed2kDump += "This does not mean the data has been uploaded to AniDB yet" + Environment.NewLine;  				ed2kDump += "---------------------------" + Environment.NewLine;  				ed2kDump += string.Format (@"ed2k://|file|{0}|{1}|{2}|/"' dump.FileName' dump.FileSize' dump.VideoLocal.Hash) + Environment.NewLine;  				dump.AVDumpFullResult = ed2kDump;  			}  			dump.ED2KDump = Utils.GetED2KDump (dump.AVDumpFullResult);  			SetED2KDump (dump.ED2KDump);  		}  		DumpSingle = true;  	}  	if (this.DataContext.GetType () == typeof(MultipleAvdumps)) {  		MultipleAvdumps dumpList = this.DataContext as MultipleAvdumps;  		AllAnime.Clear ();  		foreach (AniDB_AnimeVM anime in AniDB_AnimeVM.BestLevenshteinDistanceMatches (dumpList.AVDumps [0].VideoLocal.ClosestAnimeMatchString' 10))  			AllAnime.Add (anime);  		if (AllAnime.Count > 0)  			lbAnime.SelectedIndex = 0;  		string massAvDump = "";  		if (dumpList != null) {  			foreach (AVDumpVM dump in dumpList.AVDumps) {  				if (string.IsNullOrEmpty (dump.AVDumpFullResult)) {  					string ed2kDump = "Pre-calculated ED2K Dump string" + Environment.NewLine;  					ed2kDump += "---------------------------" + Environment.NewLine;  					ed2kDump += "This does not mean the data has been uploaded to AniDB yet" + Environment.NewLine;  					ed2kDump += "---------------------------" + Environment.NewLine;  					ed2kDump += string.Format (@"ed2k://|file|{0}|{1}|{2}|/"' dump.FileName' dump.FileSize' dump.VideoLocal.Hash) + Environment.NewLine;  					dump.AVDumpFullResult = ed2kDump;  				}  				dump.ED2KDump = Utils.GetED2KDump (dump.AVDumpFullResult);  				massAvDump += dump.ED2KDump + Environment.NewLine;  			}  		}  		SetED2KDump (massAvDump);  		DumpMultiple = true;  	}  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,AvdumpFileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AvdumpFileControl.xaml.cs,AvdumpFileControl_DataContextChanged,The following statement contains a magic number: try {  	DumpSingle = false;  	DumpMultiple = false;  	if (this.DataContext == null)  		return;  	if (this.DataContext.GetType () == typeof(AVDumpVM)) {  		AVDumpVM dump = this.DataContext as AVDumpVM;  		if (dump != null) {  			AllAnime.Clear ();  			foreach (AniDB_AnimeVM anime in AniDB_AnimeVM.BestLevenshteinDistanceMatches (dump.VideoLocal.ClosestAnimeMatchString' 10)) {  				AllAnime.Add (anime);  			}  			if (AllAnime.Count > 0)  				lbAnime.SelectedIndex = 0;  			if (string.IsNullOrEmpty (dump.AVDumpFullResult)) {  				string ed2kDump = "Pre-calculated ED2K Dump string" + Environment.NewLine;  				ed2kDump += "---------------------------" + Environment.NewLine;  				ed2kDump += "This does not mean the data has been uploaded to AniDB yet" + Environment.NewLine;  				ed2kDump += "---------------------------" + Environment.NewLine;  				ed2kDump += string.Format (@"ed2k://|file|{0}|{1}|{2}|/"' dump.FileName' dump.FileSize' dump.VideoLocal.Hash) + Environment.NewLine;  				dump.AVDumpFullResult = ed2kDump;  			}  			dump.ED2KDump = Utils.GetED2KDump (dump.AVDumpFullResult);  			SetED2KDump (dump.ED2KDump);  		}  		DumpSingle = true;  	}  	if (this.DataContext.GetType () == typeof(MultipleAvdumps)) {  		MultipleAvdumps dumpList = this.DataContext as MultipleAvdumps;  		AllAnime.Clear ();  		foreach (AniDB_AnimeVM anime in AniDB_AnimeVM.BestLevenshteinDistanceMatches (dumpList.AVDumps [0].VideoLocal.ClosestAnimeMatchString' 10))  			AllAnime.Add (anime);  		if (AllAnime.Count > 0)  			lbAnime.SelectedIndex = 0;  		string massAvDump = "";  		if (dumpList != null) {  			foreach (AVDumpVM dump in dumpList.AVDumps) {  				if (string.IsNullOrEmpty (dump.AVDumpFullResult)) {  					string ed2kDump = "Pre-calculated ED2K Dump string" + Environment.NewLine;  					ed2kDump += "---------------------------" + Environment.NewLine;  					ed2kDump += "This does not mean the data has been uploaded to AniDB yet" + Environment.NewLine;  					ed2kDump += "---------------------------" + Environment.NewLine;  					ed2kDump += string.Format (@"ed2k://|file|{0}|{1}|{2}|/"' dump.FileName' dump.FileSize' dump.VideoLocal.Hash) + Environment.NewLine;  					dump.AVDumpFullResult = ed2kDump;  				}  				dump.ED2KDump = Utils.GetED2KDump (dump.AVDumpFullResult);  				massAvDump += dump.ED2KDump + Environment.NewLine;  			}  		}  		SetED2KDump (massAvDump);  		DumpMultiple = true;  	}  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,AvdumpFileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AvdumpFileControl.xaml.cs,AvdumpFileControl_DataContextChanged,The following statement contains a magic number: if (this.DataContext.GetType () == typeof(AVDumpVM)) {  	AVDumpVM dump = this.DataContext as AVDumpVM;  	if (dump != null) {  		AllAnime.Clear ();  		foreach (AniDB_AnimeVM anime in AniDB_AnimeVM.BestLevenshteinDistanceMatches (dump.VideoLocal.ClosestAnimeMatchString' 10)) {  			AllAnime.Add (anime);  		}  		if (AllAnime.Count > 0)  			lbAnime.SelectedIndex = 0;  		if (string.IsNullOrEmpty (dump.AVDumpFullResult)) {  			string ed2kDump = "Pre-calculated ED2K Dump string" + Environment.NewLine;  			ed2kDump += "---------------------------" + Environment.NewLine;  			ed2kDump += "This does not mean the data has been uploaded to AniDB yet" + Environment.NewLine;  			ed2kDump += "---------------------------" + Environment.NewLine;  			ed2kDump += string.Format (@"ed2k://|file|{0}|{1}|{2}|/"' dump.FileName' dump.FileSize' dump.VideoLocal.Hash) + Environment.NewLine;  			dump.AVDumpFullResult = ed2kDump;  		}  		dump.ED2KDump = Utils.GetED2KDump (dump.AVDumpFullResult);  		SetED2KDump (dump.ED2KDump);  	}  	DumpSingle = true;  }  
Magic Number,JMMClient.UserControls,AvdumpFileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AvdumpFileControl.xaml.cs,AvdumpFileControl_DataContextChanged,The following statement contains a magic number: if (dump != null) {  	AllAnime.Clear ();  	foreach (AniDB_AnimeVM anime in AniDB_AnimeVM.BestLevenshteinDistanceMatches (dump.VideoLocal.ClosestAnimeMatchString' 10)) {  		AllAnime.Add (anime);  	}  	if (AllAnime.Count > 0)  		lbAnime.SelectedIndex = 0;  	if (string.IsNullOrEmpty (dump.AVDumpFullResult)) {  		string ed2kDump = "Pre-calculated ED2K Dump string" + Environment.NewLine;  		ed2kDump += "---------------------------" + Environment.NewLine;  		ed2kDump += "This does not mean the data has been uploaded to AniDB yet" + Environment.NewLine;  		ed2kDump += "---------------------------" + Environment.NewLine;  		ed2kDump += string.Format (@"ed2k://|file|{0}|{1}|{2}|/"' dump.FileName' dump.FileSize' dump.VideoLocal.Hash) + Environment.NewLine;  		dump.AVDumpFullResult = ed2kDump;  	}  	dump.ED2KDump = Utils.GetED2KDump (dump.AVDumpFullResult);  	SetED2KDump (dump.ED2KDump);  }  
Magic Number,JMMClient.UserControls,AvdumpFileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AvdumpFileControl.xaml.cs,AvdumpFileControl_DataContextChanged,The following statement contains a magic number: foreach (AniDB_AnimeVM anime in AniDB_AnimeVM.BestLevenshteinDistanceMatches (dump.VideoLocal.ClosestAnimeMatchString' 10)) {  	AllAnime.Add (anime);  }  
Magic Number,JMMClient.UserControls,AvdumpFileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AvdumpFileControl.xaml.cs,AvdumpFileControl_DataContextChanged,The following statement contains a magic number: if (this.DataContext.GetType () == typeof(MultipleAvdumps)) {  	MultipleAvdumps dumpList = this.DataContext as MultipleAvdumps;  	AllAnime.Clear ();  	foreach (AniDB_AnimeVM anime in AniDB_AnimeVM.BestLevenshteinDistanceMatches (dumpList.AVDumps [0].VideoLocal.ClosestAnimeMatchString' 10))  		AllAnime.Add (anime);  	if (AllAnime.Count > 0)  		lbAnime.SelectedIndex = 0;  	string massAvDump = "";  	if (dumpList != null) {  		foreach (AVDumpVM dump in dumpList.AVDumps) {  			if (string.IsNullOrEmpty (dump.AVDumpFullResult)) {  				string ed2kDump = "Pre-calculated ED2K Dump string" + Environment.NewLine;  				ed2kDump += "---------------------------" + Environment.NewLine;  				ed2kDump += "This does not mean the data has been uploaded to AniDB yet" + Environment.NewLine;  				ed2kDump += "---------------------------" + Environment.NewLine;  				ed2kDump += string.Format (@"ed2k://|file|{0}|{1}|{2}|/"' dump.FileName' dump.FileSize' dump.VideoLocal.Hash) + Environment.NewLine;  				dump.AVDumpFullResult = ed2kDump;  			}  			dump.ED2KDump = Utils.GetED2KDump (dump.AVDumpFullResult);  			massAvDump += dump.ED2KDump + Environment.NewLine;  		}  	}  	SetED2KDump (massAvDump);  	DumpMultiple = true;  }  
Magic Number,JMMClient.UserControls,AvdumpFileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AvdumpFileControl.xaml.cs,AvdumpFileControl_DataContextChanged,The following statement contains a magic number: foreach (AniDB_AnimeVM anime in AniDB_AnimeVM.BestLevenshteinDistanceMatches (dumpList.AVDumps [0].VideoLocal.ClosestAnimeMatchString' 10))  	AllAnime.Add (anime);  
Magic Number,JMMClient.UserControls,BookmarksControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\BookmarksControl.xaml.cs,CommandBinding_EditPriority,The following statement contains a magic number: try {  	object obj = e.Parameter;  	if (obj == null)  		return;  	BookmarkedAnimeVM ba = obj as BookmarkedAnimeVM;  	if (ba == null)  		return;  	DialogInteger dlg = new DialogInteger ();  	dlg.Init ("Priority: "' ba.Priority' 1' 100);  	dlg.Owner = Window.GetWindow (this);  	bool? res = dlg.ShowDialog ();  	if (res.HasValue && res.Value) {  		ba.Priority = dlg.EnteredInteger;  		ba.Save ();  	}  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,BookmarksControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\BookmarksControl.xaml.cs,CommandBinding_EditPriority,The following statement contains a magic number: dlg.Init ("Priority: "' ba.Priority' 1' 100);  
Magic Number,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,lbShouts_PreviewMouseWheel,The following statement contains a magic number: try {  	ScrollerCWatching.ScrollToVerticalOffset (ScrollerCWatching.VerticalOffset - e.Delta / 3);  }  catch {  }  
Magic Number,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,lbShouts_PreviewMouseWheel,The following statement contains a magic number: ScrollerCWatching.ScrollToVerticalOffset (ScrollerCWatching.VerticalOffset - e.Delta / 3);  
Magic Number,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,lbEpisodes_PreviewMouseWheel,The following statement contains a magic number: try {  	ScrollerCWatching.ScrollToVerticalOffset (ScrollerCWatching.VerticalOffset - e.Delta / 3);  }  catch {  }  
Magic Number,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,lbEpisodes_PreviewMouseWheel,The following statement contains a magic number: ScrollerCWatching.ScrollToVerticalOffset (ScrollerCWatching.VerticalOffset - e.Delta / 3);  
Magic Number,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,grdMain_PreviewMouseWheel,The following statement contains a magic number: try {  	ScrollerCWatching.ScrollToVerticalOffset (ScrollerCWatching.VerticalOffset - e.Delta / 3);  }  catch {  }  
Magic Number,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,grdMain_PreviewMouseWheel,The following statement contains a magic number: ScrollerCWatching.ScrollToVerticalOffset (ScrollerCWatching.VerticalOffset - e.Delta / 3);  
Magic Number,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,cRating_OnRatingValueChangedEvent,The following statement contains a magic number: try {  	decimal rating = (decimal)ev.RatingValue;  	int voteType = 1;  	if (ser.AniDB_Anime.FinishedAiring)  		voteType = 2;  	JMMServerVM.Instance.VoteAnime (ser.AniDB_ID' rating' voteType);  	// refresh the data  	MainListHelperVM.Instance.UpdateHeirarchy (ser);  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,cRating_OnRatingValueChangedEvent,The following statement contains a magic number: if (ser.AniDB_Anime.FinishedAiring)  	voteType = 2;  
Magic Number,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,cRating_OnRatingValueChangedEvent,The following statement contains a magic number: voteType = 2;  
Magic Number,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,btnSubmitShout_Click,The following statement contains a magic number: if (shoutText.Length > 2000) {  	Utils.ShowErrorMessage (string.Format ("Shout text must be less than 2000 characters ({0})"' shoutText.Length));  	txtShoutNew.Focus ();  	return;  }  
Magic Number,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,txtShoutNew_LostFocus,The following statement contains a magic number: txtShoutNew.Height = 30;  
Magic Number,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,txtShoutNew_GotFocus,The following statement contains a magic number: txtShoutNew.Height = 150;  
Magic Number,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,episodesWorker_DoWork,The following statement contains a magic number: try {  	AnimeSeriesVM ser = e.Argument as AnimeSeriesVM;  	List<JMMServerBinary.Contract_AnimeEpisode> rawEps = JMMServerVM.Instance.clientBinaryHTTP.GetAllUnwatchedEpisodes (ser.AnimeSeriesID.Value' JMMServerVM.Instance.CurrentUser.JMMUserID.Value);  	int i = 0;  	foreach (JMMServerBinary.Contract_AnimeEpisode raw in rawEps) {  		i++;  		AnimeEpisodeVM ep = new AnimeEpisodeVM (raw);  		ep.SetTvDBInfo ();  		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  			UnwatchedEpisodes.Add (ep);  		});  		if (i == 10)  			break;  	}  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,episodesWorker_DoWork,The following statement contains a magic number: foreach (JMMServerBinary.Contract_AnimeEpisode raw in rawEps) {  	i++;  	AnimeEpisodeVM ep = new AnimeEpisodeVM (raw);  	ep.SetTvDBInfo ();  	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  		UnwatchedEpisodes.Add (ep);  	});  	if (i == 10)  		break;  }  
Magic Number,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,episodesWorker_DoWork,The following statement contains a magic number: if (i == 10)  	break;  
Magic Number,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,recsWorker_DoWork,The following statement contains a magic number: try {  	AnimeSeriesVM ser = e.Argument as AnimeSeriesVM;  	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  		Recommendations.Clear ();  	});  	List<JMMServerBinary.Contract_AniDB_Anime_Similar> links = JMMServerVM.Instance.clientBinaryHTTP.GetSimilarAnimeLinks (ser.AniDB_ID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value);  	List<AniDB_Anime_SimilarVM> tempList = new List<AniDB_Anime_SimilarVM> ();  	foreach (JMMServerBinary.Contract_AniDB_Anime_Similar link in links) {  		AniDB_Anime_SimilarVM sim = new AniDB_Anime_SimilarVM ();  		sim.Populate (link);  		tempList.Add (sim);  	}  	List<SortPropOrFieldAndDirection> sortCriteria = new List<SortPropOrFieldAndDirection> ();  	sortCriteria.Add (new SortPropOrFieldAndDirection ("ApprovalPercentage"' true' SortType.eDoubleOrFloat));  	tempList = Sorting.MultiSort<AniDB_Anime_SimilarVM> (tempList' sortCriteria);  	foreach (AniDB_Anime_SimilarVM sim in tempList) {  		if (sim.AnimeInfoNotExists) {  			string result = JMMServerVM.Instance.clientBinaryHTTP.UpdateAnimeData (sim.SimilarAnimeID);  			if (string.IsNullOrEmpty (result)) {  				JMMServerBinary.Contract_AniDBAnime animeContract = JMMServerVM.Instance.clientBinaryHTTP.GetAnime (sim.SimilarAnimeID);  				sim.PopulateAnime (animeContract);  			}  		}  		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  			Recommendations.Add (new RecommendationTile () {  				Details = ""'  				AnimeName = sim.DisplayName'  				Picture = sim.PosterPath'  				AnimeSeries = sim.AnimeSeries'  				TileSize = "Large"'  				Height = 100'  				Source = "AniDB"'  				AnimeID = sim.AnimeID'  				URL = sim.AniDB_SiteURL'  				SimilarAnimeID = sim.SimilarAnimeID'  				HasSeries = sim.LocalSeriesExists  			});  		});  	}  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,recsWorker_DoWork,The following statement contains a magic number: foreach (AniDB_Anime_SimilarVM sim in tempList) {  	if (sim.AnimeInfoNotExists) {  		string result = JMMServerVM.Instance.clientBinaryHTTP.UpdateAnimeData (sim.SimilarAnimeID);  		if (string.IsNullOrEmpty (result)) {  			JMMServerBinary.Contract_AniDBAnime animeContract = JMMServerVM.Instance.clientBinaryHTTP.GetAnime (sim.SimilarAnimeID);  			sim.PopulateAnime (animeContract);  		}  	}  	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  		Recommendations.Add (new RecommendationTile () {  			Details = ""'  			AnimeName = sim.DisplayName'  			Picture = sim.PosterPath'  			AnimeSeries = sim.AnimeSeries'  			TileSize = "Large"'  			Height = 100'  			Source = "AniDB"'  			AnimeID = sim.AnimeID'  			URL = sim.AniDB_SiteURL'  			SimilarAnimeID = sim.SimilarAnimeID'  			HasSeries = sim.LocalSeriesExists  		});  	});  }  
Magic Number,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,recsWorker_DoWork,The following statement contains a magic number: System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  	Recommendations.Add (new RecommendationTile () {  		Details = ""'  		AnimeName = sim.DisplayName'  		Picture = sim.PosterPath'  		AnimeSeries = sim.AnimeSeries'  		TileSize = "Large"'  		Height = 100'  		Source = "AniDB"'  		AnimeID = sim.AnimeID'  		URL = sim.AniDB_SiteURL'  		SimilarAnimeID = sim.SimilarAnimeID'  		HasSeries = sim.LocalSeriesExists  	});  });  
Magic Number,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,recsWorker_DoWork,The following statement contains a magic number: Recommendations.Add (new RecommendationTile () {  	Details = ""'  	AnimeName = sim.DisplayName'  	Picture = sim.PosterPath'  	AnimeSeries = sim.AnimeSeries'  	TileSize = "Large"'  	Height = 100'  	Source = "AniDB"'  	AnimeID = sim.AnimeID'  	URL = sim.AniDB_SiteURL'  	SimilarAnimeID = sim.SimilarAnimeID'  	HasSeries = sim.LocalSeriesExists  });  
Magic Number,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,ContinueWatchingTileControl_DataContextChanged,The following statement contains a magic number: try {  	PosterWidth = 180;  	if (ser.AniDB_Anime.UsePosterOnSeries) {  		string imgName = ser.AniDB_Anime.FanartPathThenPosterPath;  		if (File.Exists (imgName)) {  			BitmapDecoder decoder = BitmapDecoder.Create (new Uri (imgName)' BitmapCreateOptions.None' BitmapCacheOption.None);  			BitmapFrame frame = decoder.Frames [0];  			PosterWidth = (double)250 * ((double)frame.PixelWidth / (double)frame.PixelHeight);  		}  	}  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,ContinueWatchingTileControl_DataContextChanged,The following statement contains a magic number: try {  	PosterWidth = 180;  	if (ser.AniDB_Anime.UsePosterOnSeries) {  		string imgName = ser.AniDB_Anime.FanartPathThenPosterPath;  		if (File.Exists (imgName)) {  			BitmapDecoder decoder = BitmapDecoder.Create (new Uri (imgName)' BitmapCreateOptions.None' BitmapCacheOption.None);  			BitmapFrame frame = decoder.Frames [0];  			PosterWidth = (double)250 * ((double)frame.PixelWidth / (double)frame.PixelHeight);  		}  	}  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,ContinueWatchingTileControl_DataContextChanged,The following statement contains a magic number: PosterWidth = 180;  
Magic Number,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,ContinueWatchingTileControl_DataContextChanged,The following statement contains a magic number: if (ser.AniDB_Anime.UsePosterOnSeries) {  	string imgName = ser.AniDB_Anime.FanartPathThenPosterPath;  	if (File.Exists (imgName)) {  		BitmapDecoder decoder = BitmapDecoder.Create (new Uri (imgName)' BitmapCreateOptions.None' BitmapCacheOption.None);  		BitmapFrame frame = decoder.Frames [0];  		PosterWidth = (double)250 * ((double)frame.PixelWidth / (double)frame.PixelHeight);  	}  }  
Magic Number,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,ContinueWatchingTileControl_DataContextChanged,The following statement contains a magic number: if (File.Exists (imgName)) {  	BitmapDecoder decoder = BitmapDecoder.Create (new Uri (imgName)' BitmapCreateOptions.None' BitmapCacheOption.None);  	BitmapFrame frame = decoder.Frames [0];  	PosterWidth = (double)250 * ((double)frame.PixelWidth / (double)frame.PixelHeight);  }  
Magic Number,JMMClient.UserControls,ContinueWatchingTileControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ContinueWatchingTileControl.xaml.cs,ContinueWatchingTileControl_DataContextChanged,The following statement contains a magic number: PosterWidth = (double)250 * ((double)frame.PixelWidth / (double)frame.PixelHeight);  
Magic Number,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,btnWatchNextReduce_Click,The following statement contains a magic number: UserSettingsVM.Instance.Dash_WatchNext_Height = UserSettingsVM.Instance.Dash_WatchNext_Height - 10;  
Magic Number,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,btnWatchNextIncrease_Click,The following statement contains a magic number: UserSettingsVM.Instance.Dash_WatchNext_Height = UserSettingsVM.Instance.Dash_WatchNext_Height + 10;  
Magic Number,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,btnRecentAdditionsReduce_Click,The following statement contains a magic number: UserSettingsVM.Instance.Dash_RecentAdditions_Height = UserSettingsVM.Instance.Dash_RecentAdditions_Height - 10;  
Magic Number,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,btnRecentAdditionsIncrease_Click,The following statement contains a magic number: UserSettingsVM.Instance.Dash_RecentAdditions_Height = UserSettingsVM.Instance.Dash_RecentAdditions_Height + 10;  
Magic Number,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,btnRecentEpisodesReduce_Click,The following statement contains a magic number: UserSettingsVM.Instance.Dash_RecentlyWatchedEp_Height = UserSettingsVM.Instance.Dash_RecentlyWatchedEp_Height - 10;  
Magic Number,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,btnRecentEpisodesIncrease_Click,The following statement contains a magic number: UserSettingsVM.Instance.Dash_RecentlyWatchedEp_Height = UserSettingsVM.Instance.Dash_RecentlyWatchedEp_Height + 10;  
Magic Number,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,btnMissingEpsReduce_Click,The following statement contains a magic number: UserSettingsVM.Instance.Dash_MissingEps_Height = UserSettingsVM.Instance.Dash_MissingEps_Height - 10;  
Magic Number,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,btnMissingEpsIncrease_Click,The following statement contains a magic number: UserSettingsVM.Instance.Dash_MissingEps_Height = UserSettingsVM.Instance.Dash_MissingEps_Height + 10;  
Magic Number,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,btnMiniCalendarReduce_Click,The following statement contains a magic number: UserSettingsVM.Instance.Dash_MiniCalendar_Height = UserSettingsVM.Instance.Dash_MiniCalendar_Height - 10;  
Magic Number,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,btnMiniCalendarIncrease_Click,The following statement contains a magic number: UserSettingsVM.Instance.Dash_MiniCalendar_Height = UserSettingsVM.Instance.Dash_MiniCalendar_Height + 10;  
Magic Number,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,btnRecWatchReduce_Click,The following statement contains a magic number: UserSettingsVM.Instance.Dash_RecWatch_Height = UserSettingsVM.Instance.Dash_RecWatch_Height - 10;  
Magic Number,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,btnRecWatchIncrease_Click,The following statement contains a magic number: UserSettingsVM.Instance.Dash_RecWatch_Height = UserSettingsVM.Instance.Dash_RecWatch_Height + 10;  
Magic Number,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,btnRecDownloadReduce_Click,The following statement contains a magic number: UserSettingsVM.Instance.Dash_RecDownload_Height = UserSettingsVM.Instance.Dash_RecDownload_Height - 10;  
Magic Number,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,btnRecDownloadIncrease_Click,The following statement contains a magic number: UserSettingsVM.Instance.Dash_RecDownload_Height = UserSettingsVM.Instance.Dash_RecDownload_Height + 10;  
Magic Number,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,btnTraktFriendsReduce_Click,The following statement contains a magic number: UserSettingsVM.Instance.Dash_TraktFriends_Height = UserSettingsVM.Instance.Dash_TraktFriends_Height - 10;  
Magic Number,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,btnTraktFriendsIncrease_Click,The following statement contains a magic number: UserSettingsVM.Instance.Dash_TraktFriends_Height = UserSettingsVM.Instance.Dash_TraktFriends_Height + 10;  
Magic Number,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,SetWidgetOrder,The following statement contains a magic number: DashPos_WatchNextEpisode = DashPos_WatchNextEpisode * 2;  
Magic Number,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,SetWidgetOrder,The following statement contains a magic number: DashPos_SeriesMissingEpisodes = DashPos_SeriesMissingEpisodes * 2;  
Magic Number,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,SetWidgetOrder,The following statement contains a magic number: DashPos_MiniCalendar = DashPos_MiniCalendar * 2;  
Magic Number,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,SetWidgetOrder,The following statement contains a magic number: DashPos_RecWatch = DashPos_RecWatch * 2;  
Magic Number,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,SetWidgetOrder,The following statement contains a magic number: DashPos_RecDownload = DashPos_RecDownload * 2;  
Magic Number,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,SetWidgetOrder,The following statement contains a magic number: DashPos_TraktFriends = DashPos_TraktFriends * 2;  
Magic Number,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,SetWidgetOrder,The following statement contains a magic number: DashPos_RecentlyWatchedEpisode = DashPos_RecentlyWatchedEpisode * 2;  
Magic Number,JMMClient.UserControls,DashboardControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardControl.xaml.cs,SetWidgetOrder,The following statement contains a magic number: DashPos_RecentAdditions = DashPos_RecentAdditions * 2;  
Magic Number,JMMClient.UserControls,DashboardMetroDXControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardMetroDXControl.xaml.cs,btnContinueWatchingReduce_Click,The following statement contains a magic number: UserSettingsVM.Instance.DashMetro_Image_Height = UserSettingsVM.Instance.DashMetro_Image_Height - 7;  
Magic Number,JMMClient.UserControls,DashboardMetroDXControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardMetroDXControl.xaml.cs,btnContinueWatchingIncrease_Click,The following statement contains a magic number: UserSettingsVM.Instance.DashMetro_Image_Height = UserSettingsVM.Instance.DashMetro_Image_Height + 7;  
Magic Number,JMMClient.UserControls,DownloadsBrowseTorrentsControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Downloads\DownloadsBrowseTorrentsControl.xaml.cs,torrentDetailsWorker_DoWork,The following statement contains a magic number: foreach (AniDB_AnimeVM anime in AniDB_AnimeVM.BestLevenshteinDistanceMatchesCache (torLink.ClosestAnimeMatchString' 10)) {  	// get the series for the anime  	AnimeSeriesVM ser = MainListHelperVM.Instance.GetSeriesForAnime (anime.AnimeID);  	if (ser != null) {  		e.Result = ser;  		return;  	}  }  
Magic Number,JMMClient.UserControls,DownloadsSearchTorrentsControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Downloads\DownloadsSearchTorrentsControl.xaml.cs,torrentDetailsWorker_DoWork,The following statement contains a magic number: foreach (AniDB_AnimeVM anime in AniDB_AnimeVM.BestLevenshteinDistanceMatchesCache (details.TorLink.ClosestAnimeMatchString' 10)) {  	// get the series for the anime  	AnimeSeriesVM ser = MainListHelperVM.Instance.GetSeriesForAnime (anime.AnimeID);  	if (ser != null) {  		e.Result = ser;  		return;  	}  }  
Magic Number,JMMClient.UserControls,DownloadsTorrentMonitorControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Downloads\DownloadsTorrentMonitorControl.xaml.cs,torrentDetailsWorker_DoWork,The following statement contains a magic number: foreach (AniDB_AnimeVM anime in AniDB_AnimeVM.BestLevenshteinDistanceMatchesCache (tor.ClosestAnimeMatchString' 10)) {  	// get the series for the anime  	AnimeSeriesVM ser = MainListHelperVM.Instance.GetSeriesForAnime (anime.AnimeID);  	if (ser != null) {  		det.AnimeSeries = ser;  		break;  	}  }  
Magic Number,JMMClient.UserControls,DuplicateFilesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DuplicateFilesControl.xaml.cs,CommandBinding_DeleteFile2,The following statement contains a magic number: try {  	if (obj.GetType () == typeof(DuplicateFileVM)) {  		DuplicateFileVM df = obj as DuplicateFileVM;  		MessageBoxResult res = MessageBox.Show (string.Format ("Are you sure you want to delete this file' the physical video file will also be deleted")' "Confirm"' MessageBoxButton.YesNo' MessageBoxImage.Warning);  		if (res == MessageBoxResult.Yes) {  			this.Cursor = Cursors.Wait;  			string result = JMMServerVM.Instance.clientBinaryHTTP.DeleteDuplicateFile (df.DuplicateFileID' 2);  			if (result.Length > 0)  				MessageBox.Show (result' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  			else {  				DuplicateFilesCollection.Remove (df);  				FileCount = DuplicateFilesCollection.Count;  				//RefreshDuplicateFiles();  			}  		}  	}  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  finally {  	this.Cursor = Cursors.Arrow;  }  
Magic Number,JMMClient.UserControls,DuplicateFilesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DuplicateFilesControl.xaml.cs,CommandBinding_DeleteFile2,The following statement contains a magic number: if (obj.GetType () == typeof(DuplicateFileVM)) {  	DuplicateFileVM df = obj as DuplicateFileVM;  	MessageBoxResult res = MessageBox.Show (string.Format ("Are you sure you want to delete this file' the physical video file will also be deleted")' "Confirm"' MessageBoxButton.YesNo' MessageBoxImage.Warning);  	if (res == MessageBoxResult.Yes) {  		this.Cursor = Cursors.Wait;  		string result = JMMServerVM.Instance.clientBinaryHTTP.DeleteDuplicateFile (df.DuplicateFileID' 2);  		if (result.Length > 0)  			MessageBox.Show (result' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  		else {  			DuplicateFilesCollection.Remove (df);  			FileCount = DuplicateFilesCollection.Count;  			//RefreshDuplicateFiles();  		}  	}  }  
Magic Number,JMMClient.UserControls,DuplicateFilesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DuplicateFilesControl.xaml.cs,CommandBinding_DeleteFile2,The following statement contains a magic number: if (res == MessageBoxResult.Yes) {  	this.Cursor = Cursors.Wait;  	string result = JMMServerVM.Instance.clientBinaryHTTP.DeleteDuplicateFile (df.DuplicateFileID' 2);  	if (result.Length > 0)  		MessageBox.Show (result' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  	else {  		DuplicateFilesCollection.Remove (df);  		FileCount = DuplicateFilesCollection.Count;  		//RefreshDuplicateFiles();  	}  }  
Magic Number,JMMClient.UserControls,EpisodeDetail,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\EpisodeDetail.xaml.cs,EpisodeDetail_Loaded,The following statement contains a magic number: while (parentObject != null) {  	parentObject = VisualTreeHelper.GetParent (parentObject);  	AnimeSeries seriesControl = parentObject as AnimeSeries;  	if (seriesControl != null) {  		double gridWidth = seriesControl.ActualWidth - 40;  		if (gridWidth > 0)  			epDetailMainGrid.Width = gridWidth;  		return;  	}  }  
Magic Number,JMMClient.UserControls,EpisodeDetail,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\EpisodeDetail.xaml.cs,EpisodeDetail_Loaded,The following statement contains a magic number: if (seriesControl != null) {  	double gridWidth = seriesControl.ActualWidth - 40;  	if (gridWidth > 0)  		epDetailMainGrid.Width = gridWidth;  	return;  }  
Magic Number,JMMClient.UserControls,ExternalAnimeLinksControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\ExternalAnimeLinksControl.xaml.cs,linkTypeChangedCallback,The following statement contains a magic number: input.IsDiscussionLink = linkType == 2;  
Magic Number,JMMClient.UserControls,FileRenameControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\FileRenameControl.xaml.cs,renameWorker_DoWork,The following statement contains a magic number: foreach (VideoLocalRenamedVM ren in job.FileResults) {  	if (stopWorker)  		return;  	curFile++;  	delay++;  	JMMServerBinary.Contract_VideoLocalRenamed raw = JMMServerVM.Instance.clientBinaryHTTP.RenameFile (ren.VideoLocalID' job.RenameScript);  	ren.NewFileName = raw.NewFileName;  	ren.Success = raw.Success;  	// do this so we don't lock the UI  	if (delay == 20) {  		renameWorker.ReportProgress (0' new WorkerStatusContainer (job.FileResults.Count' curFile));  		delay = 0;  	}  }  
Magic Number,JMMClient.UserControls,FileRenameControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\FileRenameControl.xaml.cs,renameWorker_DoWork,The following statement contains a magic number: if (delay == 20) {  	renameWorker.ReportProgress (0' new WorkerStatusContainer (job.FileResults.Count' curFile));  	delay = 0;  }  
Magic Number,JMMClient.UserControls,FileRenameControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\FileRenameControl.xaml.cs,previewWorker_DoWork,The following statement contains a magic number: foreach (VideoLocalRenamedVM ren in job.FileResults) {  	if (stopWorker)  		return;  	curFile++;  	delay++;  	JMMServerBinary.Contract_VideoLocalRenamed raw = JMMServerVM.Instance.clientBinaryHTTP.RenameFilePreview (ren.VideoLocalID' job.RenameScript);  	ren.NewFileName = raw.NewFileName;  	ren.Success = raw.Success;  	// do this so we don't lock the UI  	if (delay == 20) {  		previewWorker.ReportProgress (0' new WorkerStatusContainer (job.FileResults.Count' curFile));  		delay = 0;  	}  }  
Magic Number,JMMClient.UserControls,FileRenameControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\FileRenameControl.xaml.cs,previewWorker_DoWork,The following statement contains a magic number: if (delay == 20) {  	previewWorker.ReportProgress (0' new WorkerStatusContainer (job.FileResults.Count' curFile));  	delay = 0;  }  
Magic Number,JMMClient.UserControls,GroupFilterAdmin,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\GroupFilterAdmin.xaml.cs,cboBaseConditionEditing_SelectionChanged,The following statement contains a magic number: if (cboBaseConditionEditing.SelectedIndex == 0)  	gf.BaseCondition = 1;  else  	gf.BaseCondition = 2;  
Magic Number,JMMClient.UserControls,GroupFilterAdmin,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\GroupFilterAdmin.xaml.cs,cboBaseConditionEditing_SelectionChanged,The following statement contains a magic number: gf.BaseCondition = 2;  
Magic Number,JMMClient.UserControls,MissingEpisodesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: try {  	IsLoading = true;  	btnRefresh.IsEnabled = false;  	btnExport.IsEnabled = false;  	ReadyToExport = false;  	this.Cursor = Cursors.Wait;  	StatusMessage = "Exporting...";  	string appPath = System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  	string logName = System.IO.Path.Combine (appPath' "AnimeEpisodes.txt");  	string export = "";  	foreach (MissingEpisodeVM missingEp in MissingEpisodesCollection) {  		string[] columns = AppSettings.MissingEpsExportColumns.Split (';');  		for (int i = 0; i < columns.Length; i++) {  			if (i == 0 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.AnimeTitle);  			if (i == 1 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.AnimeID);  			if (i == 2 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.EpisodeTypeAndNumber);  			if (i == 3 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.EpisodeID);  			if (i == 4 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.GroupFileSummary);  			if (i == 5 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.GroupFileSummarySimple);  			if (i == 6 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.AniDB_SiteURL);  			if (i == 7 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.Episode_SiteURL);  		}  		export += Environment.NewLine;  	}  	StreamWriter Tex = new StreamWriter (logName);  	Tex.Write (export);  	Tex.Flush ();  	Tex.Close ();  	Process.Start (logName);  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,MissingEpisodesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: try {  	IsLoading = true;  	btnRefresh.IsEnabled = false;  	btnExport.IsEnabled = false;  	ReadyToExport = false;  	this.Cursor = Cursors.Wait;  	StatusMessage = "Exporting...";  	string appPath = System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  	string logName = System.IO.Path.Combine (appPath' "AnimeEpisodes.txt");  	string export = "";  	foreach (MissingEpisodeVM missingEp in MissingEpisodesCollection) {  		string[] columns = AppSettings.MissingEpsExportColumns.Split (';');  		for (int i = 0; i < columns.Length; i++) {  			if (i == 0 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.AnimeTitle);  			if (i == 1 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.AnimeID);  			if (i == 2 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.EpisodeTypeAndNumber);  			if (i == 3 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.EpisodeID);  			if (i == 4 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.GroupFileSummary);  			if (i == 5 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.GroupFileSummarySimple);  			if (i == 6 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.AniDB_SiteURL);  			if (i == 7 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.Episode_SiteURL);  		}  		export += Environment.NewLine;  	}  	StreamWriter Tex = new StreamWriter (logName);  	Tex.Write (export);  	Tex.Flush ();  	Tex.Close ();  	Process.Start (logName);  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,MissingEpisodesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: try {  	IsLoading = true;  	btnRefresh.IsEnabled = false;  	btnExport.IsEnabled = false;  	ReadyToExport = false;  	this.Cursor = Cursors.Wait;  	StatusMessage = "Exporting...";  	string appPath = System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  	string logName = System.IO.Path.Combine (appPath' "AnimeEpisodes.txt");  	string export = "";  	foreach (MissingEpisodeVM missingEp in MissingEpisodesCollection) {  		string[] columns = AppSettings.MissingEpsExportColumns.Split (';');  		for (int i = 0; i < columns.Length; i++) {  			if (i == 0 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.AnimeTitle);  			if (i == 1 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.AnimeID);  			if (i == 2 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.EpisodeTypeAndNumber);  			if (i == 3 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.EpisodeID);  			if (i == 4 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.GroupFileSummary);  			if (i == 5 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.GroupFileSummarySimple);  			if (i == 6 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.AniDB_SiteURL);  			if (i == 7 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.Episode_SiteURL);  		}  		export += Environment.NewLine;  	}  	StreamWriter Tex = new StreamWriter (logName);  	Tex.Write (export);  	Tex.Flush ();  	Tex.Close ();  	Process.Start (logName);  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,MissingEpisodesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: try {  	IsLoading = true;  	btnRefresh.IsEnabled = false;  	btnExport.IsEnabled = false;  	ReadyToExport = false;  	this.Cursor = Cursors.Wait;  	StatusMessage = "Exporting...";  	string appPath = System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  	string logName = System.IO.Path.Combine (appPath' "AnimeEpisodes.txt");  	string export = "";  	foreach (MissingEpisodeVM missingEp in MissingEpisodesCollection) {  		string[] columns = AppSettings.MissingEpsExportColumns.Split (';');  		for (int i = 0; i < columns.Length; i++) {  			if (i == 0 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.AnimeTitle);  			if (i == 1 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.AnimeID);  			if (i == 2 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.EpisodeTypeAndNumber);  			if (i == 3 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.EpisodeID);  			if (i == 4 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.GroupFileSummary);  			if (i == 5 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.GroupFileSummarySimple);  			if (i == 6 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.AniDB_SiteURL);  			if (i == 7 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.Episode_SiteURL);  		}  		export += Environment.NewLine;  	}  	StreamWriter Tex = new StreamWriter (logName);  	Tex.Write (export);  	Tex.Flush ();  	Tex.Close ();  	Process.Start (logName);  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,MissingEpisodesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: try {  	IsLoading = true;  	btnRefresh.IsEnabled = false;  	btnExport.IsEnabled = false;  	ReadyToExport = false;  	this.Cursor = Cursors.Wait;  	StatusMessage = "Exporting...";  	string appPath = System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  	string logName = System.IO.Path.Combine (appPath' "AnimeEpisodes.txt");  	string export = "";  	foreach (MissingEpisodeVM missingEp in MissingEpisodesCollection) {  		string[] columns = AppSettings.MissingEpsExportColumns.Split (';');  		for (int i = 0; i < columns.Length; i++) {  			if (i == 0 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.AnimeTitle);  			if (i == 1 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.AnimeID);  			if (i == 2 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.EpisodeTypeAndNumber);  			if (i == 3 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.EpisodeID);  			if (i == 4 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.GroupFileSummary);  			if (i == 5 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.GroupFileSummarySimple);  			if (i == 6 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.AniDB_SiteURL);  			if (i == 7 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.Episode_SiteURL);  		}  		export += Environment.NewLine;  	}  	StreamWriter Tex = new StreamWriter (logName);  	Tex.Write (export);  	Tex.Flush ();  	Tex.Close ();  	Process.Start (logName);  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,MissingEpisodesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: try {  	IsLoading = true;  	btnRefresh.IsEnabled = false;  	btnExport.IsEnabled = false;  	ReadyToExport = false;  	this.Cursor = Cursors.Wait;  	StatusMessage = "Exporting...";  	string appPath = System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  	string logName = System.IO.Path.Combine (appPath' "AnimeEpisodes.txt");  	string export = "";  	foreach (MissingEpisodeVM missingEp in MissingEpisodesCollection) {  		string[] columns = AppSettings.MissingEpsExportColumns.Split (';');  		for (int i = 0; i < columns.Length; i++) {  			if (i == 0 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.AnimeTitle);  			if (i == 1 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.AnimeID);  			if (i == 2 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.EpisodeTypeAndNumber);  			if (i == 3 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.EpisodeID);  			if (i == 4 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.GroupFileSummary);  			if (i == 5 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.GroupFileSummarySimple);  			if (i == 6 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.AniDB_SiteURL);  			if (i == 7 && columns [i] == "1")  				export += string.Format ("{0} ' "' missingEp.Episode_SiteURL);  		}  		export += Environment.NewLine;  	}  	StreamWriter Tex = new StreamWriter (logName);  	Tex.Write (export);  	Tex.Flush ();  	Tex.Close ();  	Process.Start (logName);  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,MissingEpisodesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: foreach (MissingEpisodeVM missingEp in MissingEpisodesCollection) {  	string[] columns = AppSettings.MissingEpsExportColumns.Split (';');  	for (int i = 0; i < columns.Length; i++) {  		if (i == 0 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.AnimeTitle);  		if (i == 1 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.AnimeID);  		if (i == 2 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.EpisodeTypeAndNumber);  		if (i == 3 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.EpisodeID);  		if (i == 4 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.GroupFileSummary);  		if (i == 5 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.GroupFileSummarySimple);  		if (i == 6 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.AniDB_SiteURL);  		if (i == 7 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.Episode_SiteURL);  	}  	export += Environment.NewLine;  }  
Magic Number,JMMClient.UserControls,MissingEpisodesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: foreach (MissingEpisodeVM missingEp in MissingEpisodesCollection) {  	string[] columns = AppSettings.MissingEpsExportColumns.Split (';');  	for (int i = 0; i < columns.Length; i++) {  		if (i == 0 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.AnimeTitle);  		if (i == 1 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.AnimeID);  		if (i == 2 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.EpisodeTypeAndNumber);  		if (i == 3 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.EpisodeID);  		if (i == 4 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.GroupFileSummary);  		if (i == 5 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.GroupFileSummarySimple);  		if (i == 6 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.AniDB_SiteURL);  		if (i == 7 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.Episode_SiteURL);  	}  	export += Environment.NewLine;  }  
Magic Number,JMMClient.UserControls,MissingEpisodesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: foreach (MissingEpisodeVM missingEp in MissingEpisodesCollection) {  	string[] columns = AppSettings.MissingEpsExportColumns.Split (';');  	for (int i = 0; i < columns.Length; i++) {  		if (i == 0 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.AnimeTitle);  		if (i == 1 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.AnimeID);  		if (i == 2 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.EpisodeTypeAndNumber);  		if (i == 3 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.EpisodeID);  		if (i == 4 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.GroupFileSummary);  		if (i == 5 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.GroupFileSummarySimple);  		if (i == 6 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.AniDB_SiteURL);  		if (i == 7 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.Episode_SiteURL);  	}  	export += Environment.NewLine;  }  
Magic Number,JMMClient.UserControls,MissingEpisodesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: foreach (MissingEpisodeVM missingEp in MissingEpisodesCollection) {  	string[] columns = AppSettings.MissingEpsExportColumns.Split (';');  	for (int i = 0; i < columns.Length; i++) {  		if (i == 0 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.AnimeTitle);  		if (i == 1 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.AnimeID);  		if (i == 2 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.EpisodeTypeAndNumber);  		if (i == 3 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.EpisodeID);  		if (i == 4 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.GroupFileSummary);  		if (i == 5 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.GroupFileSummarySimple);  		if (i == 6 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.AniDB_SiteURL);  		if (i == 7 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.Episode_SiteURL);  	}  	export += Environment.NewLine;  }  
Magic Number,JMMClient.UserControls,MissingEpisodesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: foreach (MissingEpisodeVM missingEp in MissingEpisodesCollection) {  	string[] columns = AppSettings.MissingEpsExportColumns.Split (';');  	for (int i = 0; i < columns.Length; i++) {  		if (i == 0 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.AnimeTitle);  		if (i == 1 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.AnimeID);  		if (i == 2 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.EpisodeTypeAndNumber);  		if (i == 3 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.EpisodeID);  		if (i == 4 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.GroupFileSummary);  		if (i == 5 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.GroupFileSummarySimple);  		if (i == 6 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.AniDB_SiteURL);  		if (i == 7 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.Episode_SiteURL);  	}  	export += Environment.NewLine;  }  
Magic Number,JMMClient.UserControls,MissingEpisodesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: foreach (MissingEpisodeVM missingEp in MissingEpisodesCollection) {  	string[] columns = AppSettings.MissingEpsExportColumns.Split (';');  	for (int i = 0; i < columns.Length; i++) {  		if (i == 0 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.AnimeTitle);  		if (i == 1 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.AnimeID);  		if (i == 2 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.EpisodeTypeAndNumber);  		if (i == 3 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.EpisodeID);  		if (i == 4 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.GroupFileSummary);  		if (i == 5 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.GroupFileSummarySimple);  		if (i == 6 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.AniDB_SiteURL);  		if (i == 7 && columns [i] == "1")  			export += string.Format ("{0} ' "' missingEp.Episode_SiteURL);  	}  	export += Environment.NewLine;  }  
Magic Number,JMMClient.UserControls,MissingEpisodesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: for (int i = 0; i < columns.Length; i++) {  	if (i == 0 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.AnimeTitle);  	if (i == 1 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.AnimeID);  	if (i == 2 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.EpisodeTypeAndNumber);  	if (i == 3 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.EpisodeID);  	if (i == 4 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.GroupFileSummary);  	if (i == 5 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.GroupFileSummarySimple);  	if (i == 6 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.AniDB_SiteURL);  	if (i == 7 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.Episode_SiteURL);  }  
Magic Number,JMMClient.UserControls,MissingEpisodesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: for (int i = 0; i < columns.Length; i++) {  	if (i == 0 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.AnimeTitle);  	if (i == 1 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.AnimeID);  	if (i == 2 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.EpisodeTypeAndNumber);  	if (i == 3 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.EpisodeID);  	if (i == 4 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.GroupFileSummary);  	if (i == 5 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.GroupFileSummarySimple);  	if (i == 6 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.AniDB_SiteURL);  	if (i == 7 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.Episode_SiteURL);  }  
Magic Number,JMMClient.UserControls,MissingEpisodesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: for (int i = 0; i < columns.Length; i++) {  	if (i == 0 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.AnimeTitle);  	if (i == 1 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.AnimeID);  	if (i == 2 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.EpisodeTypeAndNumber);  	if (i == 3 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.EpisodeID);  	if (i == 4 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.GroupFileSummary);  	if (i == 5 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.GroupFileSummarySimple);  	if (i == 6 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.AniDB_SiteURL);  	if (i == 7 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.Episode_SiteURL);  }  
Magic Number,JMMClient.UserControls,MissingEpisodesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: for (int i = 0; i < columns.Length; i++) {  	if (i == 0 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.AnimeTitle);  	if (i == 1 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.AnimeID);  	if (i == 2 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.EpisodeTypeAndNumber);  	if (i == 3 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.EpisodeID);  	if (i == 4 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.GroupFileSummary);  	if (i == 5 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.GroupFileSummarySimple);  	if (i == 6 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.AniDB_SiteURL);  	if (i == 7 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.Episode_SiteURL);  }  
Magic Number,JMMClient.UserControls,MissingEpisodesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: for (int i = 0; i < columns.Length; i++) {  	if (i == 0 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.AnimeTitle);  	if (i == 1 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.AnimeID);  	if (i == 2 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.EpisodeTypeAndNumber);  	if (i == 3 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.EpisodeID);  	if (i == 4 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.GroupFileSummary);  	if (i == 5 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.GroupFileSummarySimple);  	if (i == 6 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.AniDB_SiteURL);  	if (i == 7 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.Episode_SiteURL);  }  
Magic Number,JMMClient.UserControls,MissingEpisodesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: for (int i = 0; i < columns.Length; i++) {  	if (i == 0 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.AnimeTitle);  	if (i == 1 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.AnimeID);  	if (i == 2 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.EpisodeTypeAndNumber);  	if (i == 3 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.EpisodeID);  	if (i == 4 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.GroupFileSummary);  	if (i == 5 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.GroupFileSummarySimple);  	if (i == 6 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.AniDB_SiteURL);  	if (i == 7 && columns [i] == "1")  		export += string.Format ("{0} ' "' missingEp.Episode_SiteURL);  }  
Magic Number,JMMClient.UserControls,MissingEpisodesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: if (i == 2 && columns [i] == "1")  	export += string.Format ("{0} ' "' missingEp.EpisodeTypeAndNumber);  
Magic Number,JMMClient.UserControls,MissingEpisodesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: if (i == 3 && columns [i] == "1")  	export += string.Format ("{0} ' "' missingEp.EpisodeID);  
Magic Number,JMMClient.UserControls,MissingEpisodesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: if (i == 4 && columns [i] == "1")  	export += string.Format ("{0} ' "' missingEp.GroupFileSummary);  
Magic Number,JMMClient.UserControls,MissingEpisodesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: if (i == 5 && columns [i] == "1")  	export += string.Format ("{0} ' "' missingEp.GroupFileSummarySimple);  
Magic Number,JMMClient.UserControls,MissingEpisodesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: if (i == 6 && columns [i] == "1")  	export += string.Format ("{0} ' "' missingEp.AniDB_SiteURL);  
Magic Number,JMMClient.UserControls,MissingEpisodesControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: if (i == 7 && columns [i] == "1")  	export += string.Format ("{0} ' "' missingEp.Episode_SiteURL);  
Magic Number,JMMClient.UserControls,PlaylistControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\PlaylistControl.xaml.cs,btnDecreaseHeaderImageSize_Click,The following statement contains a magic number: UserSettingsVM.Instance.PlaylistHeader_Image_Height = UserSettingsVM.Instance.PlaylistHeader_Image_Height - 10;  
Magic Number,JMMClient.UserControls,PlaylistControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\PlaylistControl.xaml.cs,btnIncreaseHeaderImageSize_Click,The following statement contains a magic number: UserSettingsVM.Instance.PlaylistHeader_Image_Height = UserSettingsVM.Instance.PlaylistHeader_Image_Height + 10;  
Magic Number,JMMClient.UserControls,RankingsControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\RankingsControl.xaml.cs,cRating_OnRatingValueChangedEvent,The following statement contains a magic number: try {  	decimal rating = (decimal)ev.RatingValue;  	int voteType = 1;  	if (ser.AniDB_Anime.FinishedAiring)  		voteType = 2;  	animeRating.UserRating = rating;  	animeRating.AnimeDetailed.UserRating = rating;  	JMMServerVM.Instance.VoteAnime (ser.AniDB_ID' rating' voteType);  	// refresh the data  	MainListHelperVM.Instance.UpdateHeirarchy (ser);  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,RankingsControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\RankingsControl.xaml.cs,cRating_OnRatingValueChangedEvent,The following statement contains a magic number: if (ser.AniDB_Anime.FinishedAiring)  	voteType = 2;  
Magic Number,JMMClient.UserControls,RankingsControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\RankingsControl.xaml.cs,cRating_OnRatingValueChangedEvent,The following statement contains a magic number: voteType = 2;  
Magic Number,JMMClient.UserControls,RatingControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\RatingControl.xaml.cs,RatingButtonClickEventHandler,The following statement contains a magic number: if (RatingValue == newRating && newRating == 0.5) {  	RatingValue = 0.0;  }  else {  	RatingValue = newRating;  }  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,The following statement contains a magic number: switch (JMMServerVM.Instance.AniDB_Calendar_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequencyCalendar.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequencyCalendar.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequencyCalendar.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequencyCalendar.SelectedIndex = 3;  	break;  }  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,The following statement contains a magic number: switch (JMMServerVM.Instance.AniDB_Calendar_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequencyCalendar.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequencyCalendar.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequencyCalendar.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequencyCalendar.SelectedIndex = 3;  	break;  }  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,The following statement contains a magic number: cboUpdateFrequencyCalendar.SelectedIndex = 2;  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,The following statement contains a magic number: cboUpdateFrequencyCalendar.SelectedIndex = 3;  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,The following statement contains a magic number: switch (JMMServerVM.Instance.AniDB_Anime_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequencyAnime.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequencyAnime.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequencyAnime.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequencyAnime.SelectedIndex = 3;  	break;  }  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,The following statement contains a magic number: switch (JMMServerVM.Instance.AniDB_Anime_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequencyAnime.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequencyAnime.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequencyAnime.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequencyAnime.SelectedIndex = 3;  	break;  }  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,The following statement contains a magic number: cboUpdateFrequencyAnime.SelectedIndex = 2;  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,The following statement contains a magic number: cboUpdateFrequencyAnime.SelectedIndex = 3;  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,The following statement contains a magic number: switch (JMMServerVM.Instance.AniDB_MyList_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequencyMyList.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequencyMyList.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequencyMyList.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequencyMyList.SelectedIndex = 3;  	break;  }  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,The following statement contains a magic number: switch (JMMServerVM.Instance.AniDB_MyList_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequencyMyList.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequencyMyList.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequencyMyList.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequencyMyList.SelectedIndex = 3;  	break;  }  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,The following statement contains a magic number: cboUpdateFrequencyMyList.SelectedIndex = 2;  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,The following statement contains a magic number: cboUpdateFrequencyMyList.SelectedIndex = 3;  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,The following statement contains a magic number: switch (JMMServerVM.Instance.AniDB_MyListStats_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequencyMyListStats.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequencyMyListStats.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequencyMyListStats.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequencyMyListStats.SelectedIndex = 3;  	break;  }  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,The following statement contains a magic number: switch (JMMServerVM.Instance.AniDB_MyListStats_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequencyMyListStats.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequencyMyListStats.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequencyMyListStats.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequencyMyListStats.SelectedIndex = 3;  	break;  }  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,The following statement contains a magic number: cboUpdateFrequencyMyListStats.SelectedIndex = 2;  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,The following statement contains a magic number: cboUpdateFrequencyMyListStats.SelectedIndex = 3;  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,The following statement contains a magic number: switch (JMMServerVM.Instance.AniDB_File_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequencyAniDBFiles.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequencyAniDBFiles.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequencyAniDBFiles.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequencyAniDBFiles.SelectedIndex = 3;  	break;  }  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,The following statement contains a magic number: switch (JMMServerVM.Instance.AniDB_File_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequencyAniDBFiles.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequencyAniDBFiles.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequencyAniDBFiles.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequencyAniDBFiles.SelectedIndex = 3;  	break;  }  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,The following statement contains a magic number: cboUpdateFrequencyAniDBFiles.SelectedIndex = 2;  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,The following statement contains a magic number: cboUpdateFrequencyAniDBFiles.SelectedIndex = 3;  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyAniDBFiles_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyAniDBFiles.SelectedIndex) {  case 0:  	JMMServerVM.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyAniDBFiles_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyAniDBFiles.SelectedIndex) {  case 0:  	JMMServerVM.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyMyListStats_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyMyListStats.SelectedIndex) {  case 0:  	JMMServerVM.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyMyListStats_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyMyListStats.SelectedIndex) {  case 0:  	JMMServerVM.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyMyList_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyMyList.SelectedIndex) {  case 0:  	JMMServerVM.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyMyList_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyMyList.SelectedIndex) {  case 0:  	JMMServerVM.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyAnime_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyAnime.SelectedIndex) {  case 0:  	JMMServerVM.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyAnime_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyAnime.SelectedIndex) {  case 0:  	JMMServerVM.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyCalendar_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyCalendar.SelectedIndex) {  case 0:  	JMMServerVM.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyCalendar_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyCalendar.SelectedIndex) {  case 0:  	JMMServerVM.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,JMMClient.UserControls,DisplayStyleSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\DisplayStyleSettings.xaml.cs,DisplayStyleSettings,The following statement contains a magic number: switch (AppSettings.DisplayStyle_GroupList) {  case 1:  	cboStyleGroupList.SelectedIndex = 0;  	break;  case 2:  	cboStyleGroupList.SelectedIndex = 1;  	break;  default:  	cboStyleGroupList.SelectedIndex = 0;  	break;  }  
Magic Number,JMMClient.UserControls,DisplayStyleSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\DisplayStyleSettings.xaml.cs,DisplayStyleSettings,The following statement contains a magic number: switch (AppSettings.EpisodeImageOverviewStyle) {  case 1:  	cboStyleEpisodeDetail.SelectedIndex = 0;  	break;  case 2:  	cboStyleEpisodeDetail.SelectedIndex = 1;  	break;  case 3:  	cboStyleEpisodeDetail.SelectedIndex = 2;  	break;  default:  	cboStyleGroupList.SelectedIndex = 0;  	break;  }  
Magic Number,JMMClient.UserControls,DisplayStyleSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\DisplayStyleSettings.xaml.cs,DisplayStyleSettings,The following statement contains a magic number: switch (AppSettings.EpisodeImageOverviewStyle) {  case 1:  	cboStyleEpisodeDetail.SelectedIndex = 0;  	break;  case 2:  	cboStyleEpisodeDetail.SelectedIndex = 1;  	break;  case 3:  	cboStyleEpisodeDetail.SelectedIndex = 2;  	break;  default:  	cboStyleGroupList.SelectedIndex = 0;  	break;  }  
Magic Number,JMMClient.UserControls,DisplayStyleSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\DisplayStyleSettings.xaml.cs,DisplayStyleSettings,The following statement contains a magic number: switch (AppSettings.EpisodeImageOverviewStyle) {  case 1:  	cboStyleEpisodeDetail.SelectedIndex = 0;  	break;  case 2:  	cboStyleEpisodeDetail.SelectedIndex = 1;  	break;  case 3:  	cboStyleEpisodeDetail.SelectedIndex = 2;  	break;  default:  	cboStyleGroupList.SelectedIndex = 0;  	break;  }  
Magic Number,JMMClient.UserControls,DisplayStyleSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\DisplayStyleSettings.xaml.cs,DisplayStyleSettings,The following statement contains a magic number: cboStyleEpisodeDetail.SelectedIndex = 2;  
Magic Number,JMMClient.UserControls,DisplayStyleSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\DisplayStyleSettings.xaml.cs,cboStyleEpisodeDetail_SelectionChanged,The following statement contains a magic number: switch (cboStyleEpisodeDetail.SelectedIndex) {  case 0:  	UserSettingsVM.Instance.EpisodeImageOverviewStyle = 1;  	break;  case 1:  	UserSettingsVM.Instance.EpisodeImageOverviewStyle = 2;  	break;  case 2:  	UserSettingsVM.Instance.EpisodeImageOverviewStyle = 3;  	break;  default:  	UserSettingsVM.Instance.EpisodeImageOverviewStyle = 1;  	break;  }  
Magic Number,JMMClient.UserControls,DisplayStyleSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\DisplayStyleSettings.xaml.cs,cboStyleEpisodeDetail_SelectionChanged,The following statement contains a magic number: switch (cboStyleEpisodeDetail.SelectedIndex) {  case 0:  	UserSettingsVM.Instance.EpisodeImageOverviewStyle = 1;  	break;  case 1:  	UserSettingsVM.Instance.EpisodeImageOverviewStyle = 2;  	break;  case 2:  	UserSettingsVM.Instance.EpisodeImageOverviewStyle = 3;  	break;  default:  	UserSettingsVM.Instance.EpisodeImageOverviewStyle = 1;  	break;  }  
Magic Number,JMMClient.UserControls,DisplayStyleSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\DisplayStyleSettings.xaml.cs,cboStyleEpisodeDetail_SelectionChanged,The following statement contains a magic number: switch (cboStyleEpisodeDetail.SelectedIndex) {  case 0:  	UserSettingsVM.Instance.EpisodeImageOverviewStyle = 1;  	break;  case 1:  	UserSettingsVM.Instance.EpisodeImageOverviewStyle = 2;  	break;  case 2:  	UserSettingsVM.Instance.EpisodeImageOverviewStyle = 3;  	break;  default:  	UserSettingsVM.Instance.EpisodeImageOverviewStyle = 1;  	break;  }  
Magic Number,JMMClient.UserControls,DisplayStyleSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\DisplayStyleSettings.xaml.cs,cboStyleEpisodeDetail_SelectionChanged,The following statement contains a magic number: UserSettingsVM.Instance.EpisodeImageOverviewStyle = 2;  
Magic Number,JMMClient.UserControls,DisplayStyleSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\DisplayStyleSettings.xaml.cs,cboStyleEpisodeDetail_SelectionChanged,The following statement contains a magic number: UserSettingsVM.Instance.EpisodeImageOverviewStyle = 3;  
Magic Number,JMMClient.UserControls,DisplayStyleSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\DisplayStyleSettings.xaml.cs,cboStyleGroupList_SelectionChanged,The following statement contains a magic number: switch (cboStyleGroupList.SelectedIndex) {  case 0:  	UserSettingsVM.Instance.DisplayStyle_GroupList = 1;  	break;  case 1:  	UserSettingsVM.Instance.DisplayStyle_GroupList = 2;  	break;  default:  	UserSettingsVM.Instance.DisplayStyle_GroupList = 1;  	break;  }  
Magic Number,JMMClient.UserControls,DisplayStyleSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\DisplayStyleSettings.xaml.cs,cboStyleGroupList_SelectionChanged,The following statement contains a magic number: UserSettingsVM.Instance.DisplayStyle_GroupList = 2;  
Magic Number,JMMClient.UserControls,MALSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\MALSettings.xaml.cs,MALSettings,The following statement contains a magic number: switch (JMMServerVM.Instance.MAL_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequency.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequency.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequency.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequency.SelectedIndex = 3;  	break;  }  
Magic Number,JMMClient.UserControls,MALSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\MALSettings.xaml.cs,MALSettings,The following statement contains a magic number: switch (JMMServerVM.Instance.MAL_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequency.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequency.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequency.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequency.SelectedIndex = 3;  	break;  }  
Magic Number,JMMClient.UserControls,MALSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\MALSettings.xaml.cs,MALSettings,The following statement contains a magic number: cboUpdateFrequency.SelectedIndex = 2;  
Magic Number,JMMClient.UserControls,MALSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\MALSettings.xaml.cs,MALSettings,The following statement contains a magic number: cboUpdateFrequency.SelectedIndex = 3;  
Magic Number,JMMClient.UserControls,MALSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\MALSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequency.SelectedIndex) {  case 0:  	JMMServerVM.Instance.MAL_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.MAL_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.MAL_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.MAL_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,JMMClient.UserControls,MALSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\MALSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequency.SelectedIndex) {  case 0:  	JMMServerVM.Instance.MAL_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.MAL_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.MAL_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.MAL_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,JMMClient.UserControls,TraktSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TraktSettings.xaml.cs,TraktSettings,The following statement contains a magic number: switch (JMMServerVM.Instance.Trakt_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequency.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequency.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequency.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequency.SelectedIndex = 3;  	break;  }  
Magic Number,JMMClient.UserControls,TraktSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TraktSettings.xaml.cs,TraktSettings,The following statement contains a magic number: switch (JMMServerVM.Instance.Trakt_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequency.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequency.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequency.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequency.SelectedIndex = 3;  	break;  }  
Magic Number,JMMClient.UserControls,TraktSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TraktSettings.xaml.cs,TraktSettings,The following statement contains a magic number: cboUpdateFrequency.SelectedIndex = 2;  
Magic Number,JMMClient.UserControls,TraktSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TraktSettings.xaml.cs,TraktSettings,The following statement contains a magic number: cboUpdateFrequency.SelectedIndex = 3;  
Magic Number,JMMClient.UserControls,TraktSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TraktSettings.xaml.cs,TraktSettings,The following statement contains a magic number: switch (JMMServerVM.Instance.Trakt_SyncFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboSyncFrequency.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboSyncFrequency.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboSyncFrequency.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboSyncFrequency.SelectedIndex = 3;  	break;  }  
Magic Number,JMMClient.UserControls,TraktSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TraktSettings.xaml.cs,TraktSettings,The following statement contains a magic number: switch (JMMServerVM.Instance.Trakt_SyncFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboSyncFrequency.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboSyncFrequency.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboSyncFrequency.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboSyncFrequency.SelectedIndex = 3;  	break;  }  
Magic Number,JMMClient.UserControls,TraktSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TraktSettings.xaml.cs,TraktSettings,The following statement contains a magic number: cboSyncFrequency.SelectedIndex = 2;  
Magic Number,JMMClient.UserControls,TraktSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TraktSettings.xaml.cs,TraktSettings,The following statement contains a magic number: cboSyncFrequency.SelectedIndex = 3;  
Magic Number,JMMClient.UserControls,TraktSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TraktSettings.xaml.cs,cboSyncFrequency_SelectionChanged,The following statement contains a magic number: switch (cboSyncFrequency.SelectedIndex) {  case 0:  	JMMServerVM.Instance.Trakt_SyncFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.Trakt_SyncFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.Trakt_SyncFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.Trakt_SyncFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,JMMClient.UserControls,TraktSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TraktSettings.xaml.cs,cboSyncFrequency_SelectionChanged,The following statement contains a magic number: switch (cboSyncFrequency.SelectedIndex) {  case 0:  	JMMServerVM.Instance.Trakt_SyncFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.Trakt_SyncFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.Trakt_SyncFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.Trakt_SyncFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,JMMClient.UserControls,TraktSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TraktSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequency.SelectedIndex) {  case 0:  	JMMServerVM.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,JMMClient.UserControls,TraktSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TraktSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequency.SelectedIndex) {  case 0:  	JMMServerVM.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,JMMClient.UserControls,TvDBSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TvDBSettings.xaml.cs,TvDBSettings,The following statement contains a magic number: switch (JMMServerVM.Instance.TvDB_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequency.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequency.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequency.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequency.SelectedIndex = 3;  	break;  }  
Magic Number,JMMClient.UserControls,TvDBSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TvDBSettings.xaml.cs,TvDBSettings,The following statement contains a magic number: switch (JMMServerVM.Instance.TvDB_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequency.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequency.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequency.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequency.SelectedIndex = 3;  	break;  }  
Magic Number,JMMClient.UserControls,TvDBSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TvDBSettings.xaml.cs,TvDBSettings,The following statement contains a magic number: cboUpdateFrequency.SelectedIndex = 2;  
Magic Number,JMMClient.UserControls,TvDBSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TvDBSettings.xaml.cs,TvDBSettings,The following statement contains a magic number: cboUpdateFrequency.SelectedIndex = 3;  
Magic Number,JMMClient.UserControls,TvDBSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TvDBSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequency.SelectedIndex) {  case 0:  	JMMServerVM.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,JMMClient.UserControls,TvDBSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TvDBSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequency.SelectedIndex) {  case 0:  	JMMServerVM.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,JMMClient.UserControls,TraktShoutsShowControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\TraktShoutsShowControl.xaml.cs,btnSubmitShout_Click,The following statement contains a magic number: if (shoutText.Length > 2000) {  	Utils.ShowErrorMessage (string.Format ("Shout text must be less than 2000 characters ({0})"' shoutText.Length));  	txtShoutNew.Focus ();  	return;  }  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar = string.Format ("pack://application:'''/{0};component/Images/star_48.png"' Constants.AssemblyName);  	string packUriHalfStar = string.Format ("pack://application:'''/{0};component/Images/star_half_48.png"' Constants.AssemblyName);  	string packUriStarOff = string.Format ("pack://application:'''/{0};component/Images/star_off_48.png"' Constants.AssemblyName);  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar = string.Format ("pack://application:'''/{0};component/Images/star_48.png"' Constants.AssemblyName);  	string packUriHalfStar = string.Format ("pack://application:'''/{0};component/Images/star_half_48.png"' Constants.AssemblyName);  	string packUriStarOff = string.Format ("pack://application:'''/{0};component/Images/star_off_48.png"' Constants.AssemblyName);  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar = string.Format ("pack://application:'''/{0};component/Images/star_48.png"' Constants.AssemblyName);  	string packUriHalfStar = string.Format ("pack://application:'''/{0};component/Images/star_half_48.png"' Constants.AssemblyName);  	string packUriStarOff = string.Format ("pack://application:'''/{0};component/Images/star_off_48.png"' Constants.AssemblyName);  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar = string.Format ("pack://application:'''/{0};component/Images/star_48.png"' Constants.AssemblyName);  	string packUriHalfStar = string.Format ("pack://application:'''/{0};component/Images/star_half_48.png"' Constants.AssemblyName);  	string packUriStarOff = string.Format ("pack://application:'''/{0};component/Images/star_off_48.png"' Constants.AssemblyName);  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar = string.Format ("pack://application:'''/{0};component/Images/star_48.png"' Constants.AssemblyName);  	string packUriHalfStar = string.Format ("pack://application:'''/{0};component/Images/star_half_48.png"' Constants.AssemblyName);  	string packUriStarOff = string.Format ("pack://application:'''/{0};component/Images/star_off_48.png"' Constants.AssemblyName);  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar = string.Format ("pack://application:'''/{0};component/Images/star_48.png"' Constants.AssemblyName);  	string packUriHalfStar = string.Format ("pack://application:'''/{0};component/Images/star_half_48.png"' Constants.AssemblyName);  	string packUriStarOff = string.Format ("pack://application:'''/{0};component/Images/star_off_48.png"' Constants.AssemblyName);  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar = string.Format ("pack://application:'''/{0};component/Images/star_48.png"' Constants.AssemblyName);  	string packUriHalfStar = string.Format ("pack://application:'''/{0};component/Images/star_half_48.png"' Constants.AssemblyName);  	string packUriStarOff = string.Format ("pack://application:'''/{0};component/Images/star_off_48.png"' Constants.AssemblyName);  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar = string.Format ("pack://application:'''/{0};component/Images/star_48.png"' Constants.AssemblyName);  	string packUriHalfStar = string.Format ("pack://application:'''/{0};component/Images/star_half_48.png"' Constants.AssemblyName);  	string packUriStarOff = string.Format ("pack://application:'''/{0};component/Images/star_off_48.png"' Constants.AssemblyName);  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar = string.Format ("pack://application:'''/{0};component/Images/star_48.png"' Constants.AssemblyName);  	string packUriHalfStar = string.Format ("pack://application:'''/{0};component/Images/star_half_48.png"' Constants.AssemblyName);  	string packUriStarOff = string.Format ("pack://application:'''/{0};component/Images/star_off_48.png"' Constants.AssemblyName);  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar = string.Format ("pack://application:'''/{0};component/Images/star_48.png"' Constants.AssemblyName);  	string packUriHalfStar = string.Format ("pack://application:'''/{0};component/Images/star_half_48.png"' Constants.AssemblyName);  	string packUriStarOff = string.Format ("pack://application:'''/{0};component/Images/star_off_48.png"' Constants.AssemblyName);  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar = string.Format ("pack://application:'''/{0};component/Images/star_48.png"' Constants.AssemblyName);  	string packUriHalfStar = string.Format ("pack://application:'''/{0};component/Images/star_half_48.png"' Constants.AssemblyName);  	string packUriStarOff = string.Format ("pack://application:'''/{0};component/Images/star_off_48.png"' Constants.AssemblyName);  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar = string.Format ("pack://application:'''/{0};component/Images/star_48.png"' Constants.AssemblyName);  	string packUriHalfStar = string.Format ("pack://application:'''/{0};component/Images/star_half_48.png"' Constants.AssemblyName);  	string packUriStarOff = string.Format ("pack://application:'''/{0};component/Images/star_off_48.png"' Constants.AssemblyName);  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar = string.Format ("pack://application:'''/{0};component/Images/star_48.png"' Constants.AssemblyName);  	string packUriHalfStar = string.Format ("pack://application:'''/{0};component/Images/star_half_48.png"' Constants.AssemblyName);  	string packUriStarOff = string.Format ("pack://application:'''/{0};component/Images/star_off_48.png"' Constants.AssemblyName);  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar = string.Format ("pack://application:'''/{0};component/Images/star_48.png"' Constants.AssemblyName);  	string packUriHalfStar = string.Format ("pack://application:'''/{0};component/Images/star_half_48.png"' Constants.AssemblyName);  	string packUriStarOff = string.Format ("pack://application:'''/{0};component/Images/star_off_48.png"' Constants.AssemblyName);  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar = string.Format ("pack://application:'''/{0};component/Images/star_48.png"' Constants.AssemblyName);  	string packUriHalfStar = string.Format ("pack://application:'''/{0};component/Images/star_half_48.png"' Constants.AssemblyName);  	string packUriStarOff = string.Format ("pack://application:'''/{0};component/Images/star_off_48.png"' Constants.AssemblyName);  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar = string.Format ("pack://application:'''/{0};component/Images/star_48.png"' Constants.AssemblyName);  	string packUriHalfStar = string.Format ("pack://application:'''/{0};component/Images/star_half_48.png"' Constants.AssemblyName);  	string packUriStarOff = string.Format ("pack://application:'''/{0};component/Images/star_off_48.png"' Constants.AssemblyName);  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar = string.Format ("pack://application:'''/{0};component/Images/star_48.png"' Constants.AssemblyName);  	string packUriHalfStar = string.Format ("pack://application:'''/{0};component/Images/star_half_48.png"' Constants.AssemblyName);  	string packUriStarOff = string.Format ("pack://application:'''/{0};component/Images/star_off_48.png"' Constants.AssemblyName);  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar = string.Format ("pack://application:'''/{0};component/Images/star_48.png"' Constants.AssemblyName);  	string packUriHalfStar = string.Format ("pack://application:'''/{0};component/Images/star_half_48.png"' Constants.AssemblyName);  	string packUriStarOff = string.Format ("pack://application:'''/{0};component/Images/star_off_48.png"' Constants.AssemblyName);  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar = string.Format ("pack://application:'''/{0};component/Images/star_48.png"' Constants.AssemblyName);  	string packUriHalfStar = string.Format ("pack://application:'''/{0};component/Images/star_half_48.png"' Constants.AssemblyName);  	string packUriStarOff = string.Format ("pack://application:'''/{0};component/Images/star_off_48.png"' Constants.AssemblyName);  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar = string.Format ("pack://application:'''/{0};component/Images/star_48.png"' Constants.AssemblyName);  	string packUriHalfStar = string.Format ("pack://application:'''/{0};component/Images/star_half_48.png"' Constants.AssemblyName);  	string packUriStarOff = string.Format ("pack://application:'''/{0};component/Images/star_off_48.png"' Constants.AssemblyName);  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)1.5)  	input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)0.5 && rating <= (decimal)1.5)  	input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)0.5 && rating <= (decimal)1.5)  	input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating <= (decimal)0.5)  	input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)3.5)  	input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)2.5 && rating <= (decimal)3.5)  	input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)2.5 && rating <= (decimal)3.5)  	input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating <= (decimal)2.5)  	input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)5.5)  	input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)4.5 && rating <= (decimal)5.5)  	input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)4.5 && rating <= (decimal)5.5)  	input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating <= (decimal)4.5)  	input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)7.5)  	input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)6.5 && rating <= (decimal)7.5)  	input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)6.5 && rating <= (decimal)7.5)  	input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating <= (decimal)6.5)  	input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)9.5)  	input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)8.5 && rating <= (decimal)9.5)  	input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)8.5 && rating <= (decimal)9.5)  	input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  
Magic Number,JMMClient.UserControls,VisualRating,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating <= (decimal)8.5)  	input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  
Magic Number,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,fsw_Changed,The following statement contains a magic number: handleTimer.Interval = 200;  
Magic Number,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,HandleFileChangePotPlayer,The following statement contains a magic number: try {  	if (!AppSettings.VideoAutoSetWatched)  		return;  	List<int> allFiles = new List<int> ();  	string[] lines = File.ReadAllLines (filePath);  	bool foundSectionStart = false;  	bool foundSectionEnd = false;  	for (int i = 0; i < lines.Length; i++) {  		string line = lines [i];  		if (line.ToLower ().Contains ("[rememberfiles]"))  			foundSectionStart = true;  		if (foundSectionStart && line.Trim ().ToLower ().StartsWith ("[") && !line.ToLower ().Contains ("[rememberfiles]"))  			foundSectionEnd = true;  		if (foundSectionStart && !foundSectionEnd) {  			if (!line.ToLower ().Contains ("[rememberfiles]") && !string.IsNullOrEmpty (line))  				allFiles.Add (i);  		}  	}  	if (allFiles.Count == 0)  		return;  	Dictionary<string' string> filePositions = new Dictionary<string' string> ();  	foreach (int lineNumber in allFiles) {  		// find the last file played  		string fileNameLine = lines [lineNumber];  		int iPos1 = fileNameLine.IndexOf ("=");  		int iPos2 = fileNameLine.IndexOf ("="' iPos1 + 1);  		if (iPos1 <= 0 || iPos2 <= 0)  			continue;  		string position = fileNameLine.Substring (iPos1 + 1' iPos2 - iPos1 - 1);  		string fileName = fileNameLine.Substring (iPos2 + 1' fileNameLine.Length - iPos2 - 1);  		filePositions [fileName] = position;  	}  	// find all the files which have changed  	Dictionary<string' string> changedFilePositions = new Dictionary<string' string> ();  	foreach (KeyValuePair<string' string> kvp in filePositions) {  		changedFilePositions [kvp.Key] = kvp.Value;  	}  	// update the changed positions  	foreach (KeyValuePair<string' string> kvp in changedFilePositions) {  		previousFilePositions [kvp.Key] = kvp.Value;  	}  	foreach (KeyValuePair<string' string> kvp in changedFilePositions) {  		lastFileNameProcessed = kvp.Key;  		lastPositionProcessed = kvp.Value;  		long mpcPos = 0;  		if (!long.TryParse (kvp.Value' out mpcPos))  			continue;  		// if mpcPos == 0' it means that file has finished played completely  		// MPC position is in micro-seconds  		// convert to milli-seconds  		//double mpcPosMS = (double)mpcPos / (double)10000;  		double mpcPosMS = (double)mpcPos;  		foreach (KeyValuePair<int' VideoDetailedVM> kvpVid in recentlyPlayedFiles) {  			if (kvpVid.Value.FullPath.Equals (kvp.Key' StringComparison.InvariantCultureIgnoreCase)) {  				// we don't care about files that are already watched  				if (kvpVid.Value.Watched)  					continue;  				logger.Info (string.Format ("Video position for {0} has changed to {1}"' kvp.Key' kvp.Value));  				// now check if this file is considered watched  				double fileDurationMS = (double)kvpVid.Value.VideoInfo_Duration;  				double progress = mpcPosMS / fileDurationMS * (double)100;  				if (progress > (double)AppSettings.VideoWatchedPct || mpcPos == 0) {  					VideoDetailedVM vid = kvpVid.Value;  					logger.Info (string.Format ("Updating to watched from MPC: {0}"' kvp.Key));  					JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnVideo (vid.VideoLocalID' true' JMMServerVM.Instance.CurrentUser.JMMUserID.Value);  					MainListHelperVM.Instance.UpdateHeirarchy (vid);  					MainListHelperVM.Instance.GetSeriesForVideo (vid.VideoLocalID);  					//kvp.Value.VideoLocal_IsWatched = 1;  					OnVideoWatchedEvent (new VideoWatchedEventArgs (vid.VideoLocalID' vid));  					Debug.WriteLine ("complete");  				}  			}  		}  	}  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,HandleFileChangePotPlayer,The following statement contains a magic number: foreach (KeyValuePair<string' string> kvp in changedFilePositions) {  	lastFileNameProcessed = kvp.Key;  	lastPositionProcessed = kvp.Value;  	long mpcPos = 0;  	if (!long.TryParse (kvp.Value' out mpcPos))  		continue;  	// if mpcPos == 0' it means that file has finished played completely  	// MPC position is in micro-seconds  	// convert to milli-seconds  	//double mpcPosMS = (double)mpcPos / (double)10000;  	double mpcPosMS = (double)mpcPos;  	foreach (KeyValuePair<int' VideoDetailedVM> kvpVid in recentlyPlayedFiles) {  		if (kvpVid.Value.FullPath.Equals (kvp.Key' StringComparison.InvariantCultureIgnoreCase)) {  			// we don't care about files that are already watched  			if (kvpVid.Value.Watched)  				continue;  			logger.Info (string.Format ("Video position for {0} has changed to {1}"' kvp.Key' kvp.Value));  			// now check if this file is considered watched  			double fileDurationMS = (double)kvpVid.Value.VideoInfo_Duration;  			double progress = mpcPosMS / fileDurationMS * (double)100;  			if (progress > (double)AppSettings.VideoWatchedPct || mpcPos == 0) {  				VideoDetailedVM vid = kvpVid.Value;  				logger.Info (string.Format ("Updating to watched from MPC: {0}"' kvp.Key));  				JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnVideo (vid.VideoLocalID' true' JMMServerVM.Instance.CurrentUser.JMMUserID.Value);  				MainListHelperVM.Instance.UpdateHeirarchy (vid);  				MainListHelperVM.Instance.GetSeriesForVideo (vid.VideoLocalID);  				//kvp.Value.VideoLocal_IsWatched = 1;  				OnVideoWatchedEvent (new VideoWatchedEventArgs (vid.VideoLocalID' vid));  				Debug.WriteLine ("complete");  			}  		}  	}  }  
Magic Number,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,HandleFileChangePotPlayer,The following statement contains a magic number: foreach (KeyValuePair<int' VideoDetailedVM> kvpVid in recentlyPlayedFiles) {  	if (kvpVid.Value.FullPath.Equals (kvp.Key' StringComparison.InvariantCultureIgnoreCase)) {  		// we don't care about files that are already watched  		if (kvpVid.Value.Watched)  			continue;  		logger.Info (string.Format ("Video position for {0} has changed to {1}"' kvp.Key' kvp.Value));  		// now check if this file is considered watched  		double fileDurationMS = (double)kvpVid.Value.VideoInfo_Duration;  		double progress = mpcPosMS / fileDurationMS * (double)100;  		if (progress > (double)AppSettings.VideoWatchedPct || mpcPos == 0) {  			VideoDetailedVM vid = kvpVid.Value;  			logger.Info (string.Format ("Updating to watched from MPC: {0}"' kvp.Key));  			JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnVideo (vid.VideoLocalID' true' JMMServerVM.Instance.CurrentUser.JMMUserID.Value);  			MainListHelperVM.Instance.UpdateHeirarchy (vid);  			MainListHelperVM.Instance.GetSeriesForVideo (vid.VideoLocalID);  			//kvp.Value.VideoLocal_IsWatched = 1;  			OnVideoWatchedEvent (new VideoWatchedEventArgs (vid.VideoLocalID' vid));  			Debug.WriteLine ("complete");  		}  	}  }  
Magic Number,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,HandleFileChangePotPlayer,The following statement contains a magic number: if (kvpVid.Value.FullPath.Equals (kvp.Key' StringComparison.InvariantCultureIgnoreCase)) {  	// we don't care about files that are already watched  	if (kvpVid.Value.Watched)  		continue;  	logger.Info (string.Format ("Video position for {0} has changed to {1}"' kvp.Key' kvp.Value));  	// now check if this file is considered watched  	double fileDurationMS = (double)kvpVid.Value.VideoInfo_Duration;  	double progress = mpcPosMS / fileDurationMS * (double)100;  	if (progress > (double)AppSettings.VideoWatchedPct || mpcPos == 0) {  		VideoDetailedVM vid = kvpVid.Value;  		logger.Info (string.Format ("Updating to watched from MPC: {0}"' kvp.Key));  		JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnVideo (vid.VideoLocalID' true' JMMServerVM.Instance.CurrentUser.JMMUserID.Value);  		MainListHelperVM.Instance.UpdateHeirarchy (vid);  		MainListHelperVM.Instance.GetSeriesForVideo (vid.VideoLocalID);  		//kvp.Value.VideoLocal_IsWatched = 1;  		OnVideoWatchedEvent (new VideoWatchedEventArgs (vid.VideoLocalID' vid));  		Debug.WriteLine ("complete");  	}  }  
Magic Number,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,HandleFileChangeMPC,The following statement contains a magic number: try {  	if (!AppSettings.VideoAutoSetWatched)  		return;  	List<int> allFilesHeaders = new List<int> ();  	List<int> allFilesPositions = new List<int> ();  	string[] lines = File.ReadAllLines (filePath);  	// really we only need to check the first file' but will do this just in case  	// MPC 1.3 and lower looks like this  	// File Name 0=M:\[ Anime to Watch - New ]\Arata Kangatari\[HorribleSubs] Arata Kangatari - 05 [720p].mkv  	// File Position 0=14251233493  	// File Name 1=M:\[ Anime to Watch - New ]\Hentai Ouji to Warawanai Neko\[gg]_Hentai_Ouji_to_Warawanai_Neko_-_04_[62E1DBF8].mkv  	// File Position 1=13688612500  	// MPC 1.6 and lower looks like this  	// File Name 0=M:\[ Anime to Watch - New ]\Arata Kangatari\[HorribleSubs] Arata Kangatari - 05 [720p].mkv  	// File Name 1=M:\[ Anime to Watch - New ]\Hentai Ouji to Warawanai Neko\[gg]_Hentai_Ouji_to_Warawanai_Neko_-_04_[62E1DBF8].mkv  	// File Position 0=14251233493  	// File Position 1=13688612500  	// get file name header lines  	string prefixHeader = string.Format ("File Name ");  	for (int i = 0; i < lines.Length; i++) {  		string line = lines [i];  		if (line.StartsWith (prefixHeader' StringComparison.InvariantCultureIgnoreCase))  			allFilesHeaders.Add (i);  		if (allFilesHeaders.Count == 20)  			break;  	}  	if (allFilesHeaders.Count == 0)  		return;  	string prefixPos = string.Format ("File Position ");  	for (int i = 0; i < lines.Length; i++) {  		string line = lines [i];  		if (line.StartsWith (prefixPos' StringComparison.InvariantCultureIgnoreCase))  			allFilesPositions.Add (i);  		if (allFilesPositions.Count == 20)  			break;  	}  	Dictionary<string' string> filePositions = new Dictionary<string' string> ();  	foreach (int lineNumber in allFilesHeaders) {  		// find the last file played  		string fileNameLine = lines [lineNumber];  		// find the number of this file  		string temp = fileNameLine.Trim ().Replace (prefixHeader' "");  		int iPosTemp = temp.IndexOf ("=");  		if (iPosTemp < 0)  			continue;  		string fileNumber = temp.Substring (0' iPosTemp);  		// now find the match play position line  		string properPosLine = string.Empty;  		foreach (int lineNumberPos in allFilesPositions) {  			string filePosLineTemp = lines [lineNumberPos];  			// find the number of this file  			string temp2 = filePosLineTemp.Trim ().Replace (prefixPos' "");  			int iPosTemp2 = temp2.IndexOf ("=");  			if (iPosTemp2 < 0)  				continue;  			string fileNumber2 = temp2.Substring (0' iPosTemp2);  			if (fileNumber.Equals (fileNumber2' StringComparison.InvariantCultureIgnoreCase)) {  				properPosLine = filePosLineTemp;  				break;  			}  		}  		if (string.IsNullOrEmpty (properPosLine))  			continue;  		// extract the file name and position  		int iPos1 = fileNameLine.IndexOf ("=");  		if (iPos1 < 0)  			continue;  		int iPos2 = properPosLine.IndexOf ("=");  		string fileName = fileNameLine.Substring (iPos1 + 1' fileNameLine.Length - iPos1 - 1);  		string position = properPosLine.Substring (iPos2 + 1' properPosLine.Length - iPos2 - 1);  		filePositions [fileName] = position;  	}  	// find all the files which have changed  	Dictionary<string' string> changedFilePositions = new Dictionary<string' string> ();  	foreach (KeyValuePair<string' string> kvp in filePositions) {  		changedFilePositions [kvp.Key] = kvp.Value;  	}  	// update the changed positions  	foreach (KeyValuePair<string' string> kvp in changedFilePositions) {  		previousFilePositions [kvp.Key] = kvp.Value;  	}  	foreach (KeyValuePair<string' string> kvp in changedFilePositions) {  		lastFileNameProcessed = kvp.Key;  		lastPositionProcessed = kvp.Value;  		long mpcPos = 0;  		if (!long.TryParse (kvp.Value' out mpcPos))  			continue;  		// if mpcPos == 0' it means that file has finished played completely  		// MPC position is in micro-seconds  		// convert to milli-seconds  		double mpcPosMS = (double)mpcPos / (double)10000;  		foreach (KeyValuePair<int' VideoDetailedVM> kvpVid in recentlyPlayedFiles) {  			if (kvpVid.Value.FullPath.Equals (kvp.Key' StringComparison.InvariantCultureIgnoreCase)) {  				// we don't care about files that are already watched  				if (kvpVid.Value.Watched)  					continue;  				logger.Info (string.Format ("Video position for {0} has changed to {1}"' kvp.Key' kvp.Value));  				// now check if this file is considered watched  				double fileDurationMS = (double)kvpVid.Value.VideoInfo_Duration;  				double progress = mpcPosMS / fileDurationMS * (double)100;  				if (progress > (double)AppSettings.VideoWatchedPct || mpcPos == 0) {  					VideoDetailedVM vid = kvpVid.Value;  					logger.Info (string.Format ("Updating to watched from MPC: {0}"' kvp.Key));  					JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnVideo (vid.VideoLocalID' true' JMMServerVM.Instance.CurrentUser.JMMUserID.Value);  					MainListHelperVM.Instance.UpdateHeirarchy (vid);  					MainListHelperVM.Instance.GetSeriesForVideo (vid.VideoLocalID);  					//kvp.Value.VideoLocal_IsWatched = 1;  					OnVideoWatchedEvent (new VideoWatchedEventArgs (vid.VideoLocalID' vid));  					Debug.WriteLine ("complete");  				}  			}  		}  	}  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,HandleFileChangeMPC,The following statement contains a magic number: try {  	if (!AppSettings.VideoAutoSetWatched)  		return;  	List<int> allFilesHeaders = new List<int> ();  	List<int> allFilesPositions = new List<int> ();  	string[] lines = File.ReadAllLines (filePath);  	// really we only need to check the first file' but will do this just in case  	// MPC 1.3 and lower looks like this  	// File Name 0=M:\[ Anime to Watch - New ]\Arata Kangatari\[HorribleSubs] Arata Kangatari - 05 [720p].mkv  	// File Position 0=14251233493  	// File Name 1=M:\[ Anime to Watch - New ]\Hentai Ouji to Warawanai Neko\[gg]_Hentai_Ouji_to_Warawanai_Neko_-_04_[62E1DBF8].mkv  	// File Position 1=13688612500  	// MPC 1.6 and lower looks like this  	// File Name 0=M:\[ Anime to Watch - New ]\Arata Kangatari\[HorribleSubs] Arata Kangatari - 05 [720p].mkv  	// File Name 1=M:\[ Anime to Watch - New ]\Hentai Ouji to Warawanai Neko\[gg]_Hentai_Ouji_to_Warawanai_Neko_-_04_[62E1DBF8].mkv  	// File Position 0=14251233493  	// File Position 1=13688612500  	// get file name header lines  	string prefixHeader = string.Format ("File Name ");  	for (int i = 0; i < lines.Length; i++) {  		string line = lines [i];  		if (line.StartsWith (prefixHeader' StringComparison.InvariantCultureIgnoreCase))  			allFilesHeaders.Add (i);  		if (allFilesHeaders.Count == 20)  			break;  	}  	if (allFilesHeaders.Count == 0)  		return;  	string prefixPos = string.Format ("File Position ");  	for (int i = 0; i < lines.Length; i++) {  		string line = lines [i];  		if (line.StartsWith (prefixPos' StringComparison.InvariantCultureIgnoreCase))  			allFilesPositions.Add (i);  		if (allFilesPositions.Count == 20)  			break;  	}  	Dictionary<string' string> filePositions = new Dictionary<string' string> ();  	foreach (int lineNumber in allFilesHeaders) {  		// find the last file played  		string fileNameLine = lines [lineNumber];  		// find the number of this file  		string temp = fileNameLine.Trim ().Replace (prefixHeader' "");  		int iPosTemp = temp.IndexOf ("=");  		if (iPosTemp < 0)  			continue;  		string fileNumber = temp.Substring (0' iPosTemp);  		// now find the match play position line  		string properPosLine = string.Empty;  		foreach (int lineNumberPos in allFilesPositions) {  			string filePosLineTemp = lines [lineNumberPos];  			// find the number of this file  			string temp2 = filePosLineTemp.Trim ().Replace (prefixPos' "");  			int iPosTemp2 = temp2.IndexOf ("=");  			if (iPosTemp2 < 0)  				continue;  			string fileNumber2 = temp2.Substring (0' iPosTemp2);  			if (fileNumber.Equals (fileNumber2' StringComparison.InvariantCultureIgnoreCase)) {  				properPosLine = filePosLineTemp;  				break;  			}  		}  		if (string.IsNullOrEmpty (properPosLine))  			continue;  		// extract the file name and position  		int iPos1 = fileNameLine.IndexOf ("=");  		if (iPos1 < 0)  			continue;  		int iPos2 = properPosLine.IndexOf ("=");  		string fileName = fileNameLine.Substring (iPos1 + 1' fileNameLine.Length - iPos1 - 1);  		string position = properPosLine.Substring (iPos2 + 1' properPosLine.Length - iPos2 - 1);  		filePositions [fileName] = position;  	}  	// find all the files which have changed  	Dictionary<string' string> changedFilePositions = new Dictionary<string' string> ();  	foreach (KeyValuePair<string' string> kvp in filePositions) {  		changedFilePositions [kvp.Key] = kvp.Value;  	}  	// update the changed positions  	foreach (KeyValuePair<string' string> kvp in changedFilePositions) {  		previousFilePositions [kvp.Key] = kvp.Value;  	}  	foreach (KeyValuePair<string' string> kvp in changedFilePositions) {  		lastFileNameProcessed = kvp.Key;  		lastPositionProcessed = kvp.Value;  		long mpcPos = 0;  		if (!long.TryParse (kvp.Value' out mpcPos))  			continue;  		// if mpcPos == 0' it means that file has finished played completely  		// MPC position is in micro-seconds  		// convert to milli-seconds  		double mpcPosMS = (double)mpcPos / (double)10000;  		foreach (KeyValuePair<int' VideoDetailedVM> kvpVid in recentlyPlayedFiles) {  			if (kvpVid.Value.FullPath.Equals (kvp.Key' StringComparison.InvariantCultureIgnoreCase)) {  				// we don't care about files that are already watched  				if (kvpVid.Value.Watched)  					continue;  				logger.Info (string.Format ("Video position for {0} has changed to {1}"' kvp.Key' kvp.Value));  				// now check if this file is considered watched  				double fileDurationMS = (double)kvpVid.Value.VideoInfo_Duration;  				double progress = mpcPosMS / fileDurationMS * (double)100;  				if (progress > (double)AppSettings.VideoWatchedPct || mpcPos == 0) {  					VideoDetailedVM vid = kvpVid.Value;  					logger.Info (string.Format ("Updating to watched from MPC: {0}"' kvp.Key));  					JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnVideo (vid.VideoLocalID' true' JMMServerVM.Instance.CurrentUser.JMMUserID.Value);  					MainListHelperVM.Instance.UpdateHeirarchy (vid);  					MainListHelperVM.Instance.GetSeriesForVideo (vid.VideoLocalID);  					//kvp.Value.VideoLocal_IsWatched = 1;  					OnVideoWatchedEvent (new VideoWatchedEventArgs (vid.VideoLocalID' vid));  					Debug.WriteLine ("complete");  				}  			}  		}  	}  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,HandleFileChangeMPC,The following statement contains a magic number: try {  	if (!AppSettings.VideoAutoSetWatched)  		return;  	List<int> allFilesHeaders = new List<int> ();  	List<int> allFilesPositions = new List<int> ();  	string[] lines = File.ReadAllLines (filePath);  	// really we only need to check the first file' but will do this just in case  	// MPC 1.3 and lower looks like this  	// File Name 0=M:\[ Anime to Watch - New ]\Arata Kangatari\[HorribleSubs] Arata Kangatari - 05 [720p].mkv  	// File Position 0=14251233493  	// File Name 1=M:\[ Anime to Watch - New ]\Hentai Ouji to Warawanai Neko\[gg]_Hentai_Ouji_to_Warawanai_Neko_-_04_[62E1DBF8].mkv  	// File Position 1=13688612500  	// MPC 1.6 and lower looks like this  	// File Name 0=M:\[ Anime to Watch - New ]\Arata Kangatari\[HorribleSubs] Arata Kangatari - 05 [720p].mkv  	// File Name 1=M:\[ Anime to Watch - New ]\Hentai Ouji to Warawanai Neko\[gg]_Hentai_Ouji_to_Warawanai_Neko_-_04_[62E1DBF8].mkv  	// File Position 0=14251233493  	// File Position 1=13688612500  	// get file name header lines  	string prefixHeader = string.Format ("File Name ");  	for (int i = 0; i < lines.Length; i++) {  		string line = lines [i];  		if (line.StartsWith (prefixHeader' StringComparison.InvariantCultureIgnoreCase))  			allFilesHeaders.Add (i);  		if (allFilesHeaders.Count == 20)  			break;  	}  	if (allFilesHeaders.Count == 0)  		return;  	string prefixPos = string.Format ("File Position ");  	for (int i = 0; i < lines.Length; i++) {  		string line = lines [i];  		if (line.StartsWith (prefixPos' StringComparison.InvariantCultureIgnoreCase))  			allFilesPositions.Add (i);  		if (allFilesPositions.Count == 20)  			break;  	}  	Dictionary<string' string> filePositions = new Dictionary<string' string> ();  	foreach (int lineNumber in allFilesHeaders) {  		// find the last file played  		string fileNameLine = lines [lineNumber];  		// find the number of this file  		string temp = fileNameLine.Trim ().Replace (prefixHeader' "");  		int iPosTemp = temp.IndexOf ("=");  		if (iPosTemp < 0)  			continue;  		string fileNumber = temp.Substring (0' iPosTemp);  		// now find the match play position line  		string properPosLine = string.Empty;  		foreach (int lineNumberPos in allFilesPositions) {  			string filePosLineTemp = lines [lineNumberPos];  			// find the number of this file  			string temp2 = filePosLineTemp.Trim ().Replace (prefixPos' "");  			int iPosTemp2 = temp2.IndexOf ("=");  			if (iPosTemp2 < 0)  				continue;  			string fileNumber2 = temp2.Substring (0' iPosTemp2);  			if (fileNumber.Equals (fileNumber2' StringComparison.InvariantCultureIgnoreCase)) {  				properPosLine = filePosLineTemp;  				break;  			}  		}  		if (string.IsNullOrEmpty (properPosLine))  			continue;  		// extract the file name and position  		int iPos1 = fileNameLine.IndexOf ("=");  		if (iPos1 < 0)  			continue;  		int iPos2 = properPosLine.IndexOf ("=");  		string fileName = fileNameLine.Substring (iPos1 + 1' fileNameLine.Length - iPos1 - 1);  		string position = properPosLine.Substring (iPos2 + 1' properPosLine.Length - iPos2 - 1);  		filePositions [fileName] = position;  	}  	// find all the files which have changed  	Dictionary<string' string> changedFilePositions = new Dictionary<string' string> ();  	foreach (KeyValuePair<string' string> kvp in filePositions) {  		changedFilePositions [kvp.Key] = kvp.Value;  	}  	// update the changed positions  	foreach (KeyValuePair<string' string> kvp in changedFilePositions) {  		previousFilePositions [kvp.Key] = kvp.Value;  	}  	foreach (KeyValuePair<string' string> kvp in changedFilePositions) {  		lastFileNameProcessed = kvp.Key;  		lastPositionProcessed = kvp.Value;  		long mpcPos = 0;  		if (!long.TryParse (kvp.Value' out mpcPos))  			continue;  		// if mpcPos == 0' it means that file has finished played completely  		// MPC position is in micro-seconds  		// convert to milli-seconds  		double mpcPosMS = (double)mpcPos / (double)10000;  		foreach (KeyValuePair<int' VideoDetailedVM> kvpVid in recentlyPlayedFiles) {  			if (kvpVid.Value.FullPath.Equals (kvp.Key' StringComparison.InvariantCultureIgnoreCase)) {  				// we don't care about files that are already watched  				if (kvpVid.Value.Watched)  					continue;  				logger.Info (string.Format ("Video position for {0} has changed to {1}"' kvp.Key' kvp.Value));  				// now check if this file is considered watched  				double fileDurationMS = (double)kvpVid.Value.VideoInfo_Duration;  				double progress = mpcPosMS / fileDurationMS * (double)100;  				if (progress > (double)AppSettings.VideoWatchedPct || mpcPos == 0) {  					VideoDetailedVM vid = kvpVid.Value;  					logger.Info (string.Format ("Updating to watched from MPC: {0}"' kvp.Key));  					JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnVideo (vid.VideoLocalID' true' JMMServerVM.Instance.CurrentUser.JMMUserID.Value);  					MainListHelperVM.Instance.UpdateHeirarchy (vid);  					MainListHelperVM.Instance.GetSeriesForVideo (vid.VideoLocalID);  					//kvp.Value.VideoLocal_IsWatched = 1;  					OnVideoWatchedEvent (new VideoWatchedEventArgs (vid.VideoLocalID' vid));  					Debug.WriteLine ("complete");  				}  			}  		}  	}  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,HandleFileChangeMPC,The following statement contains a magic number: try {  	if (!AppSettings.VideoAutoSetWatched)  		return;  	List<int> allFilesHeaders = new List<int> ();  	List<int> allFilesPositions = new List<int> ();  	string[] lines = File.ReadAllLines (filePath);  	// really we only need to check the first file' but will do this just in case  	// MPC 1.3 and lower looks like this  	// File Name 0=M:\[ Anime to Watch - New ]\Arata Kangatari\[HorribleSubs] Arata Kangatari - 05 [720p].mkv  	// File Position 0=14251233493  	// File Name 1=M:\[ Anime to Watch - New ]\Hentai Ouji to Warawanai Neko\[gg]_Hentai_Ouji_to_Warawanai_Neko_-_04_[62E1DBF8].mkv  	// File Position 1=13688612500  	// MPC 1.6 and lower looks like this  	// File Name 0=M:\[ Anime to Watch - New ]\Arata Kangatari\[HorribleSubs] Arata Kangatari - 05 [720p].mkv  	// File Name 1=M:\[ Anime to Watch - New ]\Hentai Ouji to Warawanai Neko\[gg]_Hentai_Ouji_to_Warawanai_Neko_-_04_[62E1DBF8].mkv  	// File Position 0=14251233493  	// File Position 1=13688612500  	// get file name header lines  	string prefixHeader = string.Format ("File Name ");  	for (int i = 0; i < lines.Length; i++) {  		string line = lines [i];  		if (line.StartsWith (prefixHeader' StringComparison.InvariantCultureIgnoreCase))  			allFilesHeaders.Add (i);  		if (allFilesHeaders.Count == 20)  			break;  	}  	if (allFilesHeaders.Count == 0)  		return;  	string prefixPos = string.Format ("File Position ");  	for (int i = 0; i < lines.Length; i++) {  		string line = lines [i];  		if (line.StartsWith (prefixPos' StringComparison.InvariantCultureIgnoreCase))  			allFilesPositions.Add (i);  		if (allFilesPositions.Count == 20)  			break;  	}  	Dictionary<string' string> filePositions = new Dictionary<string' string> ();  	foreach (int lineNumber in allFilesHeaders) {  		// find the last file played  		string fileNameLine = lines [lineNumber];  		// find the number of this file  		string temp = fileNameLine.Trim ().Replace (prefixHeader' "");  		int iPosTemp = temp.IndexOf ("=");  		if (iPosTemp < 0)  			continue;  		string fileNumber = temp.Substring (0' iPosTemp);  		// now find the match play position line  		string properPosLine = string.Empty;  		foreach (int lineNumberPos in allFilesPositions) {  			string filePosLineTemp = lines [lineNumberPos];  			// find the number of this file  			string temp2 = filePosLineTemp.Trim ().Replace (prefixPos' "");  			int iPosTemp2 = temp2.IndexOf ("=");  			if (iPosTemp2 < 0)  				continue;  			string fileNumber2 = temp2.Substring (0' iPosTemp2);  			if (fileNumber.Equals (fileNumber2' StringComparison.InvariantCultureIgnoreCase)) {  				properPosLine = filePosLineTemp;  				break;  			}  		}  		if (string.IsNullOrEmpty (properPosLine))  			continue;  		// extract the file name and position  		int iPos1 = fileNameLine.IndexOf ("=");  		if (iPos1 < 0)  			continue;  		int iPos2 = properPosLine.IndexOf ("=");  		string fileName = fileNameLine.Substring (iPos1 + 1' fileNameLine.Length - iPos1 - 1);  		string position = properPosLine.Substring (iPos2 + 1' properPosLine.Length - iPos2 - 1);  		filePositions [fileName] = position;  	}  	// find all the files which have changed  	Dictionary<string' string> changedFilePositions = new Dictionary<string' string> ();  	foreach (KeyValuePair<string' string> kvp in filePositions) {  		changedFilePositions [kvp.Key] = kvp.Value;  	}  	// update the changed positions  	foreach (KeyValuePair<string' string> kvp in changedFilePositions) {  		previousFilePositions [kvp.Key] = kvp.Value;  	}  	foreach (KeyValuePair<string' string> kvp in changedFilePositions) {  		lastFileNameProcessed = kvp.Key;  		lastPositionProcessed = kvp.Value;  		long mpcPos = 0;  		if (!long.TryParse (kvp.Value' out mpcPos))  			continue;  		// if mpcPos == 0' it means that file has finished played completely  		// MPC position is in micro-seconds  		// convert to milli-seconds  		double mpcPosMS = (double)mpcPos / (double)10000;  		foreach (KeyValuePair<int' VideoDetailedVM> kvpVid in recentlyPlayedFiles) {  			if (kvpVid.Value.FullPath.Equals (kvp.Key' StringComparison.InvariantCultureIgnoreCase)) {  				// we don't care about files that are already watched  				if (kvpVid.Value.Watched)  					continue;  				logger.Info (string.Format ("Video position for {0} has changed to {1}"' kvp.Key' kvp.Value));  				// now check if this file is considered watched  				double fileDurationMS = (double)kvpVid.Value.VideoInfo_Duration;  				double progress = mpcPosMS / fileDurationMS * (double)100;  				if (progress > (double)AppSettings.VideoWatchedPct || mpcPos == 0) {  					VideoDetailedVM vid = kvpVid.Value;  					logger.Info (string.Format ("Updating to watched from MPC: {0}"' kvp.Key));  					JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnVideo (vid.VideoLocalID' true' JMMServerVM.Instance.CurrentUser.JMMUserID.Value);  					MainListHelperVM.Instance.UpdateHeirarchy (vid);  					MainListHelperVM.Instance.GetSeriesForVideo (vid.VideoLocalID);  					//kvp.Value.VideoLocal_IsWatched = 1;  					OnVideoWatchedEvent (new VideoWatchedEventArgs (vid.VideoLocalID' vid));  					Debug.WriteLine ("complete");  				}  			}  		}  	}  }  catch (Exception ex) {  	logger.ErrorException (ex.ToString ()' ex);  }  
Magic Number,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,HandleFileChangeMPC,The following statement contains a magic number: for (int i = 0; i < lines.Length; i++) {  	string line = lines [i];  	if (line.StartsWith (prefixHeader' StringComparison.InvariantCultureIgnoreCase))  		allFilesHeaders.Add (i);  	if (allFilesHeaders.Count == 20)  		break;  }  
Magic Number,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,HandleFileChangeMPC,The following statement contains a magic number: if (allFilesHeaders.Count == 20)  	break;  
Magic Number,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,HandleFileChangeMPC,The following statement contains a magic number: for (int i = 0; i < lines.Length; i++) {  	string line = lines [i];  	if (line.StartsWith (prefixPos' StringComparison.InvariantCultureIgnoreCase))  		allFilesPositions.Add (i);  	if (allFilesPositions.Count == 20)  		break;  }  
Magic Number,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,HandleFileChangeMPC,The following statement contains a magic number: if (allFilesPositions.Count == 20)  	break;  
Magic Number,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,HandleFileChangeMPC,The following statement contains a magic number: foreach (KeyValuePair<string' string> kvp in changedFilePositions) {  	lastFileNameProcessed = kvp.Key;  	lastPositionProcessed = kvp.Value;  	long mpcPos = 0;  	if (!long.TryParse (kvp.Value' out mpcPos))  		continue;  	// if mpcPos == 0' it means that file has finished played completely  	// MPC position is in micro-seconds  	// convert to milli-seconds  	double mpcPosMS = (double)mpcPos / (double)10000;  	foreach (KeyValuePair<int' VideoDetailedVM> kvpVid in recentlyPlayedFiles) {  		if (kvpVid.Value.FullPath.Equals (kvp.Key' StringComparison.InvariantCultureIgnoreCase)) {  			// we don't care about files that are already watched  			if (kvpVid.Value.Watched)  				continue;  			logger.Info (string.Format ("Video position for {0} has changed to {1}"' kvp.Key' kvp.Value));  			// now check if this file is considered watched  			double fileDurationMS = (double)kvpVid.Value.VideoInfo_Duration;  			double progress = mpcPosMS / fileDurationMS * (double)100;  			if (progress > (double)AppSettings.VideoWatchedPct || mpcPos == 0) {  				VideoDetailedVM vid = kvpVid.Value;  				logger.Info (string.Format ("Updating to watched from MPC: {0}"' kvp.Key));  				JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnVideo (vid.VideoLocalID' true' JMMServerVM.Instance.CurrentUser.JMMUserID.Value);  				MainListHelperVM.Instance.UpdateHeirarchy (vid);  				MainListHelperVM.Instance.GetSeriesForVideo (vid.VideoLocalID);  				//kvp.Value.VideoLocal_IsWatched = 1;  				OnVideoWatchedEvent (new VideoWatchedEventArgs (vid.VideoLocalID' vid));  				Debug.WriteLine ("complete");  			}  		}  	}  }  
Magic Number,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,HandleFileChangeMPC,The following statement contains a magic number: foreach (KeyValuePair<string' string> kvp in changedFilePositions) {  	lastFileNameProcessed = kvp.Key;  	lastPositionProcessed = kvp.Value;  	long mpcPos = 0;  	if (!long.TryParse (kvp.Value' out mpcPos))  		continue;  	// if mpcPos == 0' it means that file has finished played completely  	// MPC position is in micro-seconds  	// convert to milli-seconds  	double mpcPosMS = (double)mpcPos / (double)10000;  	foreach (KeyValuePair<int' VideoDetailedVM> kvpVid in recentlyPlayedFiles) {  		if (kvpVid.Value.FullPath.Equals (kvp.Key' StringComparison.InvariantCultureIgnoreCase)) {  			// we don't care about files that are already watched  			if (kvpVid.Value.Watched)  				continue;  			logger.Info (string.Format ("Video position for {0} has changed to {1}"' kvp.Key' kvp.Value));  			// now check if this file is considered watched  			double fileDurationMS = (double)kvpVid.Value.VideoInfo_Duration;  			double progress = mpcPosMS / fileDurationMS * (double)100;  			if (progress > (double)AppSettings.VideoWatchedPct || mpcPos == 0) {  				VideoDetailedVM vid = kvpVid.Value;  				logger.Info (string.Format ("Updating to watched from MPC: {0}"' kvp.Key));  				JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnVideo (vid.VideoLocalID' true' JMMServerVM.Instance.CurrentUser.JMMUserID.Value);  				MainListHelperVM.Instance.UpdateHeirarchy (vid);  				MainListHelperVM.Instance.GetSeriesForVideo (vid.VideoLocalID);  				//kvp.Value.VideoLocal_IsWatched = 1;  				OnVideoWatchedEvent (new VideoWatchedEventArgs (vid.VideoLocalID' vid));  				Debug.WriteLine ("complete");  			}  		}  	}  }  
Magic Number,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,HandleFileChangeMPC,The following statement contains a magic number: foreach (KeyValuePair<int' VideoDetailedVM> kvpVid in recentlyPlayedFiles) {  	if (kvpVid.Value.FullPath.Equals (kvp.Key' StringComparison.InvariantCultureIgnoreCase)) {  		// we don't care about files that are already watched  		if (kvpVid.Value.Watched)  			continue;  		logger.Info (string.Format ("Video position for {0} has changed to {1}"' kvp.Key' kvp.Value));  		// now check if this file is considered watched  		double fileDurationMS = (double)kvpVid.Value.VideoInfo_Duration;  		double progress = mpcPosMS / fileDurationMS * (double)100;  		if (progress > (double)AppSettings.VideoWatchedPct || mpcPos == 0) {  			VideoDetailedVM vid = kvpVid.Value;  			logger.Info (string.Format ("Updating to watched from MPC: {0}"' kvp.Key));  			JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnVideo (vid.VideoLocalID' true' JMMServerVM.Instance.CurrentUser.JMMUserID.Value);  			MainListHelperVM.Instance.UpdateHeirarchy (vid);  			MainListHelperVM.Instance.GetSeriesForVideo (vid.VideoLocalID);  			//kvp.Value.VideoLocal_IsWatched = 1;  			OnVideoWatchedEvent (new VideoWatchedEventArgs (vid.VideoLocalID' vid));  			Debug.WriteLine ("complete");  		}  	}  }  
Magic Number,JMMClient.Utilities,VideoHandler,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Utilities\VideoHandler.cs,HandleFileChangeMPC,The following statement contains a magic number: if (kvpVid.Value.FullPath.Equals (kvp.Key' StringComparison.InvariantCultureIgnoreCase)) {  	// we don't care about files that are already watched  	if (kvpVid.Value.Watched)  		continue;  	logger.Info (string.Format ("Video position for {0} has changed to {1}"' kvp.Key' kvp.Value));  	// now check if this file is considered watched  	double fileDurationMS = (double)kvpVid.Value.VideoInfo_Duration;  	double progress = mpcPosMS / fileDurationMS * (double)100;  	if (progress > (double)AppSettings.VideoWatchedPct || mpcPos == 0) {  		VideoDetailedVM vid = kvpVid.Value;  		logger.Info (string.Format ("Updating to watched from MPC: {0}"' kvp.Key));  		JMMServerVM.Instance.clientBinaryHTTP.ToggleWatchedStatusOnVideo (vid.VideoLocalID' true' JMMServerVM.Instance.CurrentUser.JMMUserID.Value);  		MainListHelperVM.Instance.UpdateHeirarchy (vid);  		MainListHelperVM.Instance.GetSeriesForVideo (vid.VideoLocalID);  		//kvp.Value.VideoLocal_IsWatched = 1;  		OnVideoWatchedEvent (new VideoWatchedEventArgs (vid.VideoLocalID' vid));  		Debug.WriteLine ("complete");  	}  }  
Magic Number,JMMClient.ViewModel,AniDB_Anime_RelationVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_Anime_RelationVM.cs,Populate,The following statement contains a magic number: if (RelationType.Equals ("Sequel"' StringComparison.InvariantCultureIgnoreCase))  	SortPriority = 2;  
Magic Number,JMMClient.ViewModel,AniDB_Anime_RelationVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_Anime_RelationVM.cs,Populate,The following statement contains a magic number: SortPriority = 2;  
Magic Number,JMMClient.ViewModel,AniDB_Anime_SimilarVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_Anime_SimilarVM.cs,Populate,The following statement contains a magic number: if (this.Total > 0)  	ApprovalPercentage = (double)Approval / (double)Total * (double)100;  
Magic Number,JMMClient.ViewModel,AniDB_Anime_SimilarVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_Anime_SimilarVM.cs,Populate,The following statement contains a magic number: ApprovalPercentage = (double)Approval / (double)Total * (double)100;  
Magic Number,JMMClient.ViewModel,AniDB_AnimeDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeDetailedVM.cs,Populate,The following statement contains a magic number: try {  	AniDB_Anime = new AniDB_AnimeVM (contract.AniDBAnime);  	UserVote = null;  	if (contract.UserVote != null)  		UserVote = new AniDB_VoteVM (contract.UserVote);  	UserHasVoted = UserVote != null;  	UserHasNotVoted = UserVote == null;  	if (UserVote == null)  		UserRating = 0;  	else  		UserRating = UserVote.VoteValue;  	UserRatingFormatted = Utils.FormatAniDBRating ((double)UserRating);  	if (UserVote != null) {  		UserRatingFormatted += " (";  		if (UserVote.VoteType == 1)  			UserRatingFormatted += Properties.Resources.VoteTypeAnimePermanent;  		if (UserVote.VoteType == 2)  			UserRatingFormatted += Properties.Resources.VoteTypeAnimeTemporary;  		UserRatingFormatted += ")";  	}  	this.Stat_AllVideoQuality = contract.Stat_AllVideoQuality;  	this.Stat_AllVideoQuality_Episodes = contract.Stat_AllVideoQuality_Episodes;  	this.Stat_AudioLanguages = contract.Stat_AudioLanguages;  	this.Stat_SubtitleLanguages = contract.Stat_SubtitleLanguages;  	foreach (JMMServerBinary.Contract_AnimeCategory cat in contract.Categories) {  		AnimeCategoryVM vcat = new AnimeCategoryVM (cat);  		AnimeCategories.Add (vcat);  	}  	AnimeCategories.Sort ();  	int i = 0;  	foreach (AnimeCategoryVM cat in AnimeCategories) {  		if (i <= 5)  			AnimeCategoriesSummary.Add (cat);  		else  			break;  		i++;  	}  	foreach (JMMServerBinary.Contract_AnimeTag tag in contract.Tags) {  		AnimeTagVM vtag = new AnimeTagVM (tag);  		AnimeTags.Add (vtag);  	}  	AnimeTags.Sort ();  	i = 0;  	foreach (AnimeTagVM tag in AnimeTags) {  		if (i <= 5)  			AnimeTagsSummary.Add (tag);  		else  			break;  		i++;  	}  	foreach (JMMServerBinary.Contract_AnimeTitle title in contract.AnimeTitles) {  		AnimeTitleVM vtitle = new AnimeTitleVM (title);  		AnimeTitles.Add (vtitle);  		if (title.TitleType.Trim ().ToUpper () == Constants.AnimeTitleType.Main.ToUpper ())  			AnimeTitlesMain.Add (vtitle);  		if (title.TitleType.Trim ().ToUpper () == Constants.AnimeTitleType.Official.ToUpper ())  			AnimeTitlesOfficial.Add (vtitle);  		if (title.TitleType.Trim ().ToUpper () == Constants.AnimeTitleType.Synonym.ToUpper ())  			AnimeTitlesSynonym.Add (vtitle);  		if (title.TitleType.Trim ().ToUpper () == Constants.AnimeTitleType.ShortName.ToUpper ())  			AnimeTitlesShort.Add (vtitle);  	}  	i = 0;  	foreach (AnimeTitleVM title in AnimeTitlesOfficial) {  		if (i <= 5)  			AnimeTitlesSummary.Add (title);  		else  			break;  		i++;  	}  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.ViewModel,AniDB_AnimeDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeDetailedVM.cs,Populate,The following statement contains a magic number: try {  	AniDB_Anime = new AniDB_AnimeVM (contract.AniDBAnime);  	UserVote = null;  	if (contract.UserVote != null)  		UserVote = new AniDB_VoteVM (contract.UserVote);  	UserHasVoted = UserVote != null;  	UserHasNotVoted = UserVote == null;  	if (UserVote == null)  		UserRating = 0;  	else  		UserRating = UserVote.VoteValue;  	UserRatingFormatted = Utils.FormatAniDBRating ((double)UserRating);  	if (UserVote != null) {  		UserRatingFormatted += " (";  		if (UserVote.VoteType == 1)  			UserRatingFormatted += Properties.Resources.VoteTypeAnimePermanent;  		if (UserVote.VoteType == 2)  			UserRatingFormatted += Properties.Resources.VoteTypeAnimeTemporary;  		UserRatingFormatted += ")";  	}  	this.Stat_AllVideoQuality = contract.Stat_AllVideoQuality;  	this.Stat_AllVideoQuality_Episodes = contract.Stat_AllVideoQuality_Episodes;  	this.Stat_AudioLanguages = contract.Stat_AudioLanguages;  	this.Stat_SubtitleLanguages = contract.Stat_SubtitleLanguages;  	foreach (JMMServerBinary.Contract_AnimeCategory cat in contract.Categories) {  		AnimeCategoryVM vcat = new AnimeCategoryVM (cat);  		AnimeCategories.Add (vcat);  	}  	AnimeCategories.Sort ();  	int i = 0;  	foreach (AnimeCategoryVM cat in AnimeCategories) {  		if (i <= 5)  			AnimeCategoriesSummary.Add (cat);  		else  			break;  		i++;  	}  	foreach (JMMServerBinary.Contract_AnimeTag tag in contract.Tags) {  		AnimeTagVM vtag = new AnimeTagVM (tag);  		AnimeTags.Add (vtag);  	}  	AnimeTags.Sort ();  	i = 0;  	foreach (AnimeTagVM tag in AnimeTags) {  		if (i <= 5)  			AnimeTagsSummary.Add (tag);  		else  			break;  		i++;  	}  	foreach (JMMServerBinary.Contract_AnimeTitle title in contract.AnimeTitles) {  		AnimeTitleVM vtitle = new AnimeTitleVM (title);  		AnimeTitles.Add (vtitle);  		if (title.TitleType.Trim ().ToUpper () == Constants.AnimeTitleType.Main.ToUpper ())  			AnimeTitlesMain.Add (vtitle);  		if (title.TitleType.Trim ().ToUpper () == Constants.AnimeTitleType.Official.ToUpper ())  			AnimeTitlesOfficial.Add (vtitle);  		if (title.TitleType.Trim ().ToUpper () == Constants.AnimeTitleType.Synonym.ToUpper ())  			AnimeTitlesSynonym.Add (vtitle);  		if (title.TitleType.Trim ().ToUpper () == Constants.AnimeTitleType.ShortName.ToUpper ())  			AnimeTitlesShort.Add (vtitle);  	}  	i = 0;  	foreach (AnimeTitleVM title in AnimeTitlesOfficial) {  		if (i <= 5)  			AnimeTitlesSummary.Add (title);  		else  			break;  		i++;  	}  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.ViewModel,AniDB_AnimeDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeDetailedVM.cs,Populate,The following statement contains a magic number: try {  	AniDB_Anime = new AniDB_AnimeVM (contract.AniDBAnime);  	UserVote = null;  	if (contract.UserVote != null)  		UserVote = new AniDB_VoteVM (contract.UserVote);  	UserHasVoted = UserVote != null;  	UserHasNotVoted = UserVote == null;  	if (UserVote == null)  		UserRating = 0;  	else  		UserRating = UserVote.VoteValue;  	UserRatingFormatted = Utils.FormatAniDBRating ((double)UserRating);  	if (UserVote != null) {  		UserRatingFormatted += " (";  		if (UserVote.VoteType == 1)  			UserRatingFormatted += Properties.Resources.VoteTypeAnimePermanent;  		if (UserVote.VoteType == 2)  			UserRatingFormatted += Properties.Resources.VoteTypeAnimeTemporary;  		UserRatingFormatted += ")";  	}  	this.Stat_AllVideoQuality = contract.Stat_AllVideoQuality;  	this.Stat_AllVideoQuality_Episodes = contract.Stat_AllVideoQuality_Episodes;  	this.Stat_AudioLanguages = contract.Stat_AudioLanguages;  	this.Stat_SubtitleLanguages = contract.Stat_SubtitleLanguages;  	foreach (JMMServerBinary.Contract_AnimeCategory cat in contract.Categories) {  		AnimeCategoryVM vcat = new AnimeCategoryVM (cat);  		AnimeCategories.Add (vcat);  	}  	AnimeCategories.Sort ();  	int i = 0;  	foreach (AnimeCategoryVM cat in AnimeCategories) {  		if (i <= 5)  			AnimeCategoriesSummary.Add (cat);  		else  			break;  		i++;  	}  	foreach (JMMServerBinary.Contract_AnimeTag tag in contract.Tags) {  		AnimeTagVM vtag = new AnimeTagVM (tag);  		AnimeTags.Add (vtag);  	}  	AnimeTags.Sort ();  	i = 0;  	foreach (AnimeTagVM tag in AnimeTags) {  		if (i <= 5)  			AnimeTagsSummary.Add (tag);  		else  			break;  		i++;  	}  	foreach (JMMServerBinary.Contract_AnimeTitle title in contract.AnimeTitles) {  		AnimeTitleVM vtitle = new AnimeTitleVM (title);  		AnimeTitles.Add (vtitle);  		if (title.TitleType.Trim ().ToUpper () == Constants.AnimeTitleType.Main.ToUpper ())  			AnimeTitlesMain.Add (vtitle);  		if (title.TitleType.Trim ().ToUpper () == Constants.AnimeTitleType.Official.ToUpper ())  			AnimeTitlesOfficial.Add (vtitle);  		if (title.TitleType.Trim ().ToUpper () == Constants.AnimeTitleType.Synonym.ToUpper ())  			AnimeTitlesSynonym.Add (vtitle);  		if (title.TitleType.Trim ().ToUpper () == Constants.AnimeTitleType.ShortName.ToUpper ())  			AnimeTitlesShort.Add (vtitle);  	}  	i = 0;  	foreach (AnimeTitleVM title in AnimeTitlesOfficial) {  		if (i <= 5)  			AnimeTitlesSummary.Add (title);  		else  			break;  		i++;  	}  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.ViewModel,AniDB_AnimeDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeDetailedVM.cs,Populate,The following statement contains a magic number: try {  	AniDB_Anime = new AniDB_AnimeVM (contract.AniDBAnime);  	UserVote = null;  	if (contract.UserVote != null)  		UserVote = new AniDB_VoteVM (contract.UserVote);  	UserHasVoted = UserVote != null;  	UserHasNotVoted = UserVote == null;  	if (UserVote == null)  		UserRating = 0;  	else  		UserRating = UserVote.VoteValue;  	UserRatingFormatted = Utils.FormatAniDBRating ((double)UserRating);  	if (UserVote != null) {  		UserRatingFormatted += " (";  		if (UserVote.VoteType == 1)  			UserRatingFormatted += Properties.Resources.VoteTypeAnimePermanent;  		if (UserVote.VoteType == 2)  			UserRatingFormatted += Properties.Resources.VoteTypeAnimeTemporary;  		UserRatingFormatted += ")";  	}  	this.Stat_AllVideoQuality = contract.Stat_AllVideoQuality;  	this.Stat_AllVideoQuality_Episodes = contract.Stat_AllVideoQuality_Episodes;  	this.Stat_AudioLanguages = contract.Stat_AudioLanguages;  	this.Stat_SubtitleLanguages = contract.Stat_SubtitleLanguages;  	foreach (JMMServerBinary.Contract_AnimeCategory cat in contract.Categories) {  		AnimeCategoryVM vcat = new AnimeCategoryVM (cat);  		AnimeCategories.Add (vcat);  	}  	AnimeCategories.Sort ();  	int i = 0;  	foreach (AnimeCategoryVM cat in AnimeCategories) {  		if (i <= 5)  			AnimeCategoriesSummary.Add (cat);  		else  			break;  		i++;  	}  	foreach (JMMServerBinary.Contract_AnimeTag tag in contract.Tags) {  		AnimeTagVM vtag = new AnimeTagVM (tag);  		AnimeTags.Add (vtag);  	}  	AnimeTags.Sort ();  	i = 0;  	foreach (AnimeTagVM tag in AnimeTags) {  		if (i <= 5)  			AnimeTagsSummary.Add (tag);  		else  			break;  		i++;  	}  	foreach (JMMServerBinary.Contract_AnimeTitle title in contract.AnimeTitles) {  		AnimeTitleVM vtitle = new AnimeTitleVM (title);  		AnimeTitles.Add (vtitle);  		if (title.TitleType.Trim ().ToUpper () == Constants.AnimeTitleType.Main.ToUpper ())  			AnimeTitlesMain.Add (vtitle);  		if (title.TitleType.Trim ().ToUpper () == Constants.AnimeTitleType.Official.ToUpper ())  			AnimeTitlesOfficial.Add (vtitle);  		if (title.TitleType.Trim ().ToUpper () == Constants.AnimeTitleType.Synonym.ToUpper ())  			AnimeTitlesSynonym.Add (vtitle);  		if (title.TitleType.Trim ().ToUpper () == Constants.AnimeTitleType.ShortName.ToUpper ())  			AnimeTitlesShort.Add (vtitle);  	}  	i = 0;  	foreach (AnimeTitleVM title in AnimeTitlesOfficial) {  		if (i <= 5)  			AnimeTitlesSummary.Add (title);  		else  			break;  		i++;  	}  }  catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,JMMClient.ViewModel,AniDB_AnimeDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeDetailedVM.cs,Populate,The following statement contains a magic number: if (UserVote != null) {  	UserRatingFormatted += " (";  	if (UserVote.VoteType == 1)  		UserRatingFormatted += Properties.Resources.VoteTypeAnimePermanent;  	if (UserVote.VoteType == 2)  		UserRatingFormatted += Properties.Resources.VoteTypeAnimeTemporary;  	UserRatingFormatted += ")";  }  
Magic Number,JMMClient.ViewModel,AniDB_AnimeDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeDetailedVM.cs,Populate,The following statement contains a magic number: if (UserVote.VoteType == 2)  	UserRatingFormatted += Properties.Resources.VoteTypeAnimeTemporary;  
Magic Number,JMMClient.ViewModel,AniDB_AnimeDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeDetailedVM.cs,Populate,The following statement contains a magic number: foreach (AnimeCategoryVM cat in AnimeCategories) {  	if (i <= 5)  		AnimeCategoriesSummary.Add (cat);  	else  		break;  	i++;  }  
Magic Number,JMMClient.ViewModel,AniDB_AnimeDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeDetailedVM.cs,Populate,The following statement contains a magic number: if (i <= 5)  	AnimeCategoriesSummary.Add (cat);  else  	break;  
Magic Number,JMMClient.ViewModel,AniDB_AnimeDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeDetailedVM.cs,Populate,The following statement contains a magic number: foreach (AnimeTagVM tag in AnimeTags) {  	if (i <= 5)  		AnimeTagsSummary.Add (tag);  	else  		break;  	i++;  }  
Magic Number,JMMClient.ViewModel,AniDB_AnimeDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeDetailedVM.cs,Populate,The following statement contains a magic number: if (i <= 5)  	AnimeTagsSummary.Add (tag);  else  	break;  
Magic Number,JMMClient.ViewModel,AniDB_AnimeDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeDetailedVM.cs,Populate,The following statement contains a magic number: foreach (AnimeTitleVM title in AnimeTitlesOfficial) {  	if (i <= 5)  		AnimeTitlesSummary.Add (title);  	else  		break;  	i++;  }  
Magic Number,JMMClient.ViewModel,AniDB_AnimeDetailedVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeDetailedVM.cs,Populate,The following statement contains a magic number: if (i <= 5)  	AnimeTitlesSummary.Add (title);  else  	break;  
Magic Number,JMMClient.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterHelper.cs,GetDateAsString,The following statement contains a magic number: return aDate.Year.ToString ().PadLeft (4' '0') + aDate.Month.ToString ().PadLeft (2' '0') + aDate.Day.ToString ().PadLeft (2' '0');  
Magic Number,JMMClient.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterHelper.cs,GetDateAsString,The following statement contains a magic number: return aDate.Year.ToString ().PadLeft (4' '0') + aDate.Month.ToString ().PadLeft (2' '0') + aDate.Day.ToString ().PadLeft (2' '0');  
Magic Number,JMMClient.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterHelper.cs,GetDateAsString,The following statement contains a magic number: return aDate.Year.ToString ().PadLeft (4' '0') + aDate.Month.ToString ().PadLeft (2' '0') + aDate.Day.ToString ().PadLeft (2' '0');  
Magic Number,JMMClient.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterHelper.cs,GetDateFromString,The following statement contains a magic number: try {  	int year = int.Parse (sDate.Substring (0' 4));  	int month = int.Parse (sDate.Substring (4' 2));  	int day = int.Parse (sDate.Substring (6' 2));  	return new DateTime (year' month' day);  }  catch (Exception ex) {  	return DateTime.Today;  }  
Magic Number,JMMClient.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterHelper.cs,GetDateFromString,The following statement contains a magic number: try {  	int year = int.Parse (sDate.Substring (0' 4));  	int month = int.Parse (sDate.Substring (4' 2));  	int day = int.Parse (sDate.Substring (6' 2));  	return new DateTime (year' month' day);  }  catch (Exception ex) {  	return DateTime.Today;  }  
Magic Number,JMMClient.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterHelper.cs,GetDateFromString,The following statement contains a magic number: try {  	int year = int.Parse (sDate.Substring (0' 4));  	int month = int.Parse (sDate.Substring (4' 2));  	int day = int.Parse (sDate.Substring (6' 2));  	return new DateTime (year' month' day);  }  catch (Exception ex) {  	return DateTime.Today;  }  
Magic Number,JMMClient.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterHelper.cs,GetDateFromString,The following statement contains a magic number: try {  	int year = int.Parse (sDate.Substring (0' 4));  	int month = int.Parse (sDate.Substring (4' 2));  	int day = int.Parse (sDate.Substring (6' 2));  	return new DateTime (year' month' day);  }  catch (Exception ex) {  	return DateTime.Today;  }  
Magic Number,JMMClient.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterHelper.cs,GetDateFromString,The following statement contains a magic number: try {  	int year = int.Parse (sDate.Substring (0' 4));  	int month = int.Parse (sDate.Substring (4' 2));  	int day = int.Parse (sDate.Substring (6' 2));  	return new DateTime (year' month' day);  }  catch (Exception ex) {  	return DateTime.Today;  }  
Magic Number,JMMClient.ViewModel,PlaylistVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\PlaylistVM.cs,Drop,The following statement contains a magic number: foreach (string pitem in items) {  	string[] parms = pitem.Split (';');  	if (parms.Length != 2)  		continue;  	int objType = -1;  	int objID = -1;  	if (!int.TryParse (parms [0]' out objType))  		continue;  	if (!int.TryParse (parms [1]' out objID))  		continue;  	if (objType == iType && objID == objIDOld) {  		// skip the old item  	}  	else {  		if (newItemList.Length > 0)  			newItemList += "|";  		newItemList += string.Format ("{0};{1}"' objType' objID);  	}  }  
Magic Number,JMMClient.ViewModel,PlaylistVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\PlaylistVM.cs,Drop,The following statement contains a magic number: if (parms.Length != 2)  	continue;  
Magic Number,JMMClient.ViewModel,PlaylistVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\PlaylistVM.cs,Drop,The following statement contains a magic number: if (string.IsNullOrEmpty (newItemList)) {  	// means there was only one item in list to begin with  	PlaylistItems += string.Format ("{0};{1}"' iType' objIDOld);  }  else {  	foreach (string pitem in items) {  		string[] parms = pitem.Split (';');  		if (parms.Length != 2)  			continue;  		int objType = -1;  		int objID = -1;  		int.TryParse (parms [0]' out objType);  		int.TryParse (parms [1]' out objID);  		if (curPos == dropInfo.InsertIndex) {  			// insert moved item  			if (PlaylistItems.Length > 0)  				PlaylistItems += "|";  			PlaylistItems += string.Format ("{0};{1}"' iType' objIDOld);  		}  		if (PlaylistItems.Length > 0)  			PlaylistItems += "|";  		PlaylistItems += string.Format ("{0};{1}"' objType' objID);  		curPos++;  	}  }  
Magic Number,JMMClient.ViewModel,PlaylistVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\PlaylistVM.cs,Drop,The following statement contains a magic number: foreach (string pitem in items) {  	string[] parms = pitem.Split (';');  	if (parms.Length != 2)  		continue;  	int objType = -1;  	int objID = -1;  	int.TryParse (parms [0]' out objType);  	int.TryParse (parms [1]' out objID);  	if (curPos == dropInfo.InsertIndex) {  		// insert moved item  		if (PlaylistItems.Length > 0)  			PlaylistItems += "|";  		PlaylistItems += string.Format ("{0};{1}"' iType' objIDOld);  	}  	if (PlaylistItems.Length > 0)  		PlaylistItems += "|";  	PlaylistItems += string.Format ("{0};{1}"' objType' objID);  	curPos++;  }  
Magic Number,JMMClient.ViewModel,PlaylistVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\PlaylistVM.cs,Drop,The following statement contains a magic number: if (parms.Length != 2)  	continue;  
Magic Number,JMMClient.ViewModel,PlaylistVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\PlaylistVM.cs,RemoveSeries,The following statement contains a magic number: foreach (string pitem in items) {  	string[] parms = pitem.Split (';');  	if (parms.Length != 2)  		continue;  	int objType = -1;  	int objID = -1;  	if (!int.TryParse (parms [0]' out objType))  		continue;  	if (!int.TryParse (parms [1]' out objID))  		continue;  	if (objType == (int)PlaylistItemType.AnimeSeries && objID == animeSeriesID) {  		// remove this old item  	}  	else {  		if (PlaylistItems.Length > 0)  			PlaylistItems += "|";  		PlaylistItems += string.Format ("{0};{1}"' objType' objID);  	}  }  
Magic Number,JMMClient.ViewModel,PlaylistVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\PlaylistVM.cs,RemoveSeries,The following statement contains a magic number: if (parms.Length != 2)  	continue;  
Magic Number,JMMClient.ViewModel,PlaylistVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\PlaylistVM.cs,RemoveEpisode,The following statement contains a magic number: foreach (string pitem in items) {  	string[] parms = pitem.Split (';');  	if (parms.Length != 2)  		continue;  	int objType = -1;  	int objID = -1;  	if (!int.TryParse (parms [0]' out objType))  		continue;  	if (!int.TryParse (parms [1]' out objID))  		continue;  	if (objType == (int)PlaylistItemType.Episode && objID == animeEpisodeID) {  		// remove this old item  	}  	else {  		if (PlaylistItems.Length > 0)  			PlaylistItems += "|";  		PlaylistItems += string.Format ("{0};{1}"' objType' objID);  	}  }  
Magic Number,JMMClient.ViewModel,PlaylistVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\PlaylistVM.cs,RemoveEpisode,The following statement contains a magic number: if (parms.Length != 2)  	continue;  
Magic Number,JMMClient.ViewModel,PlaylistVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\PlaylistVM.cs,IsAlreadyInPlaylist,The following statement contains a magic number: foreach (string pitem in items) {  	string[] parms = pitem.Split (';');  	if (parms.Length != 2)  		continue;  	int objType = -1;  	int objID = -1;  	if (!int.TryParse (parms [0]' out objType))  		continue;  	if (!int.TryParse (parms [1]' out objID))  		continue;  	if (objType == (int)pType && objID == id)  		return true;  }  
Magic Number,JMMClient.ViewModel,PlaylistVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\PlaylistVM.cs,IsAlreadyInPlaylist,The following statement contains a magic number: if (parms.Length != 2)  	continue;  
Magic Number,JMMClient.ViewModel,PlaylistVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\PlaylistVM.cs,PopulatePlaylistObjects,The following statement contains a magic number: foreach (string pitem in items) {  	string[] parms = pitem.Split (';');  	if (parms.Length != 2)  		continue;  	int objType = -1;  	int objID = -1;  	if (!int.TryParse (parms [0]' out objType))  		continue;  	if (!int.TryParse (parms [1]' out objID))  		continue;  	if ((PlaylistItemType)objType == PlaylistItemType.AnimeSeries) {  		// get the series  		JMMServerBinary.Contract_AnimeSeries serContract = JMMServerVM.Instance.clientBinaryHTTP.GetSeries (objID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value);  		if (serContract != null) {  			AnimeSeriesVM ser = new AnimeSeriesVM (serContract);  			PlaylistObjects.Add (new PlaylistItemVM (this.PlaylistID.Value' PlaylistItemType.AnimeSeries' ser));  		}  	}  	else {  		// get the episode  		JMMServerBinary.Contract_AnimeEpisode epContract = JMMServerVM.Instance.clientBinaryHTTP.GetEpisode (objID' JMMServerVM.Instance.CurrentUser.JMMUserID.Value);  		if (epContract != null) {  			AnimeEpisodeVM ep = new AnimeEpisodeVM (epContract);  			//ep.SetTvDBInfo();  			PlaylistObjects.Add (new PlaylistItemVM (this.PlaylistID.Value' PlaylistItemType.Episode' ep));  		}  	}  }  
Magic Number,JMMClient.ViewModel,PlaylistVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\PlaylistVM.cs,PopulatePlaylistObjects,The following statement contains a magic number: if (parms.Length != 2)  	continue;  
Magic Number,JMMClient.ViewModel,RecommendationVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\RecommendationVM.cs,Populate,The following statement contains a magic number: BasedOnVoteValueFormatted = String.Format ("{0:0.0}"' (double)BasedOnVoteValue / (double)100);  
Magic Number,JMMClient.ViewModel,Trakt_ShoutVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\Trakt_ShoutVM.cs,Trakt_ShoutVM,The following statement contains a magic number: if (!string.IsNullOrEmpty (Episode_Title) && Episode_Title.Length > 30)  	Episode_Title = Episode_Title.Substring (0' 30) + "...";  
Magic Number,JMMClient.ViewModel,Trakt_ShoutVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\Trakt_ShoutVM.cs,Trakt_ShoutVM,The following statement contains a magic number: if (!string.IsNullOrEmpty (Episode_Title) && Episode_Title.Length > 30)  	Episode_Title = Episode_Title.Substring (0' 30) + "...";  
Magic Number,JMMClient.ViewModel,Trakt_ShoutVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\Trakt_ShoutVM.cs,Trakt_ShoutVM,The following statement contains a magic number: Episode_Title = Episode_Title.Substring (0' 30) + "...";  
Magic Number,JMMClient.ViewModel,Trakt_WatchedEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\Trakt_WatchedEpisodeVM.cs,Trakt_WatchedEpisodeVM,The following statement contains a magic number: if (!string.IsNullOrEmpty (Episode_Title) && Episode_Title.Length > 30)  	Episode_Title = Episode_Title.Substring (0' 30) + "...";  
Magic Number,JMMClient.ViewModel,Trakt_WatchedEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\Trakt_WatchedEpisodeVM.cs,Trakt_WatchedEpisodeVM,The following statement contains a magic number: if (!string.IsNullOrEmpty (Episode_Title) && Episode_Title.Length > 30)  	Episode_Title = Episode_Title.Substring (0' 30) + "...";  
Magic Number,JMMClient.ViewModel,Trakt_WatchedEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\Trakt_WatchedEpisodeVM.cs,Trakt_WatchedEpisodeVM,The following statement contains a magic number: Episode_Title = Episode_Title.Substring (0' 30) + "...";  
Duplicate Code,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,SetTvDBInfo,The method contains a code clone-set at the following line numbers (starting from the method definition): ((72' 91)' (127' 146))
Missing Default,JMMClient,AnimeEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeVM.cs,SetEpisodeNameVariants,The following switch statement is missing a default case: switch (EpisodeTypeEnum) {  case JMMClient.EpisodeType.Credits:  	shortType = "C";  	break;  case JMMClient.EpisodeType.Episode:  	shortType = "";  	break;  case JMMClient.EpisodeType.Other:  	shortType = "O";  	break;  case JMMClient.EpisodeType.Parody:  	shortType = "P";  	break;  case JMMClient.EpisodeType.Special:  	shortType = "S";  	break;  case JMMClient.EpisodeType.Trailer:  	shortType = "T";  	break;  }  
Missing Default,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,EvaluateGroupFilter,The following switch statement is missing a default case: switch (gfc.ConditionTypeEnum) {  case GroupFilterConditionType.Favourite:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.IsFave == 0)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.IsFave == 1)  		return false;  	break;  case GroupFilterConditionType.MissingEpisodes:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.HasMissingEpisodesAny == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.HasMissingEpisodesAny == true)  		return false;  	break;  case GroupFilterConditionType.MissingEpisodesCollecting:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.HasMissingEpisodesGroups == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.HasMissingEpisodesGroups == true)  		return false;  	break;  case GroupFilterConditionType.HasWatchedEpisodes:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.AnyFilesWatched == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.AnyFilesWatched == true)  		return false;  	break;  case GroupFilterConditionType.HasUnwatchedEpisodes:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.HasUnwatchedFiles == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.HasUnwatchedFiles == true)  		return false;  	break;  case GroupFilterConditionType.AssignedTvDBInfo:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_HasTvDBLink == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_HasTvDBLink == true)  		return false;  	break;  case GroupFilterConditionType.AssignedMALInfo:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_HasMALLink == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_HasMALLink == true)  		return false;  	break;  case GroupFilterConditionType.AssignedMovieDBInfo:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_HasMovieDBLink == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_HasMovieDBLink == true)  		return false;  	break;  case GroupFilterConditionType.AssignedTvDBOrMovieDBInfo:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_HasMovieDBOrTvDBLink == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_HasMovieDBOrTvDBLink == true)  		return false;  	break;  case GroupFilterConditionType.CompletedSeries:  	/*if (grp.IsComplete != grp.Stat_IsComplete) 						{ 							Debug.Print("IsComplete DIFF  {0}"' grp.GroupName); 						}*/if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_IsComplete == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_IsComplete == true)  		return false;  	break;  case GroupFilterConditionType.FinishedAiring:  	if (grp.GroupName.Contains ("Bleach"))  		Debug.Write ("Test");  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.Stat_HasFinishedAiring == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.Stat_IsCurrentlyAiring == false)  		return false;  	break;  case GroupFilterConditionType.UserVoted:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.UserHasVoted == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.UserHasVoted == true)  		return false;  	break;  case GroupFilterConditionType.UserVotedAny:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && grp.UserHasVotedAny == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && grp.UserHasVotedAny == true)  		return false;  	break;  case GroupFilterConditionType.AirDate:  	DateTime filterDate;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		int days = 0;  		int.TryParse (gfc.ConditionParameter' out days);  		filterDate = DateTime.Today.AddDays (0 - days);  	}  	else  		filterDate = GroupFilterHelper.GetDateFromString (gfc.ConditionParameter);  	if (grp.AnimeGroupID.Value == 250)  		Console.Write ("");  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		if (!grp.Stat_AirDate_Min.HasValue || !grp.Stat_AirDate_Max.HasValue)  			return false;  		if (grp.Stat_AirDate_Max.Value < filterDate)  			return false;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  		if (!grp.Stat_AirDate_Min.HasValue || !grp.Stat_AirDate_Max.HasValue)  			return false;  		if (grp.Stat_AirDate_Min.Value > filterDate)  			return false;  	}  	break;  case GroupFilterConditionType.SeriesCreatedDate:  	DateTime filterDateSeries;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		int days = 0;  		int.TryParse (gfc.ConditionParameter' out days);  		filterDateSeries = DateTime.Today.AddDays (0 - days);  	}  	else  		filterDateSeries = GroupFilterHelper.GetDateFromString (gfc.ConditionParameter);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		if (!grp.Stat_SeriesCreatedDate.HasValue)  			return false;  		if (grp.Stat_SeriesCreatedDate.Value < filterDateSeries)  			return false;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  		if (!grp.Stat_SeriesCreatedDate.HasValue)  			return false;  		if (grp.Stat_SeriesCreatedDate.Value > filterDateSeries)  			return false;  	}  	break;  case GroupFilterConditionType.EpisodeWatchedDate:  	DateTime filterDateEpsiodeWatched;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		int days = 0;  		int.TryParse (gfc.ConditionParameter' out days);  		filterDateEpsiodeWatched = DateTime.Today.AddDays (0 - days);  	}  	else  		filterDateEpsiodeWatched = GroupFilterHelper.GetDateFromString (gfc.ConditionParameter);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		if (!grp.WatchedDate.HasValue)  			return false;  		if (grp.WatchedDate.Value < filterDateEpsiodeWatched)  			return false;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  		if (!grp.WatchedDate.HasValue)  			return false;  		if (grp.WatchedDate.Value > filterDateEpsiodeWatched)  			return false;  	}  	break;  case GroupFilterConditionType.EpisodeAddedDate:  	DateTime filterDateEpisodeAdded;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		int days = 0;  		int.TryParse (gfc.ConditionParameter' out days);  		filterDateEpisodeAdded = DateTime.Today.AddDays (0 - days);  	}  	else  		filterDateEpisodeAdded = GroupFilterHelper.GetDateFromString (gfc.ConditionParameter);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		if (!grp.EpisodeAddedDate.HasValue)  			return false;  		if (grp.EpisodeAddedDate.Value < filterDateEpisodeAdded)  			return false;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  		if (!grp.EpisodeAddedDate.HasValue)  			return false;  		if (grp.EpisodeAddedDate.Value > filterDateEpisodeAdded)  			return false;  	}  	break;  case GroupFilterConditionType.AniDBRating:  	decimal dRating = -1;  	decimal.TryParse (gfc.ConditionParameter' style' culture' out dRating);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && grp.AniDBRating < dRating)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && grp.AniDBRating > dRating)  		return false;  	break;  case GroupFilterConditionType.UserRating:  	if (!grp.Stat_UserVoteOverall.HasValue)  		return false;  	decimal dUserRating = -1;  	decimal.TryParse (gfc.ConditionParameter' style' culture' out dUserRating);  	if (grp.AnimeGroupID.Value == 122) {  		Debug.Write ("");  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && grp.Stat_UserVoteOverall.Value < dUserRating)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && grp.Stat_UserVoteOverall.Value > dUserRating)  		return false;  	break;  case GroupFilterConditionType.EpisodeCount:  	int epCount = -1;  	int.TryParse (gfc.ConditionParameter' out epCount);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && grp.Stat_EpisodeCount < epCount)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && grp.Stat_EpisodeCount > epCount)  		return false;  	break;  case GroupFilterConditionType.Category:  	string filterParm = gfc.ConditionParameter.Trim ();  	string[] cats = filterParm.Split (''');  	bool foundCat = false;  	int index = 0;  	foreach (string cat in cats) {  		if (cat.Trim ().Length == 0)  			continue;  		if (cat.Trim () == "'")  			continue;  		index = grp.Stat_AllCategories.IndexOf (cat' 0' StringComparison.InvariantCultureIgnoreCase);  		if (index > -1) {  			foundCat = true;  			break;  		}  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  		if (!foundCat)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  		if (foundCat)  			return false;  	break;  case GroupFilterConditionType.AnimeType:  	filterParm = gfc.ConditionParameter.Trim ();  	List<string> grpTypeList = grp.AnimeTypesList;  	string[] atypes = filterParm.Split (''');  	bool foundAnimeType = false;  	index = 0;  	foreach (string atype in atypes) {  		if (atype.Trim ().Length == 0)  			continue;  		if (atype.Trim () == "'")  			continue;  		foreach (string thisAType in grpTypeList) {  			if (string.Equals (thisAType' atype' StringComparison.InvariantCultureIgnoreCase)) {  				foundAnimeType = true;  				break;  			}  		}  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  		if (!foundAnimeType)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  		if (foundAnimeType)  			return false;  	break;  case GroupFilterConditionType.VideoQuality:  	filterParm = gfc.ConditionParameter.Trim ();  	string[] vidQuals = filterParm.Split (''');  	bool foundVid = false;  	bool foundVidAllEps = false;  	index = 0;  	foreach (string vidq in vidQuals) {  		if (vidq.Trim ().Length == 0)  			continue;  		if (vidq.Trim () == "'")  			continue;  		index = grp.Stat_AllVideoQuality.IndexOf (vidq' 0' StringComparison.InvariantCultureIgnoreCase);  		if (index > -1)  			foundVid = true;  		index = grp.Stat_AllVideoQualityEpisodes.IndexOf (vidq' 0' StringComparison.InvariantCultureIgnoreCase);  		if (index > -1)  			foundVidAllEps = true;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  		if (!foundVid)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  		if (foundVid)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.InAllEpisodes)  		if (!foundVidAllEps)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotInAllEpisodes)  		if (foundVidAllEps)  			return false;  	break;  case GroupFilterConditionType.AudioLanguage:  case GroupFilterConditionType.SubtitleLanguage:  	filterParm = gfc.ConditionParameter.Trim ();  	string[] languages = filterParm.Split (''');  	bool foundLan = false;  	index = 0;  	foreach (string lanName in languages) {  		if (lanName.Trim ().Length == 0)  			continue;  		if (lanName.Trim () == "'")  			continue;  		if (gfc.ConditionTypeEnum == GroupFilterConditionType.AudioLanguage)  			index = grp.Stat_AudioLanguages.IndexOf (lanName' 0' StringComparison.InvariantCultureIgnoreCase);  		if (gfc.ConditionTypeEnum == GroupFilterConditionType.SubtitleLanguage)  			index = grp.Stat_SubtitleLanguages.IndexOf (lanName' 0' StringComparison.InvariantCultureIgnoreCase);  		if (index > -1)  			foundLan = true;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  		if (!foundLan)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  		if (foundLan)  			return false;  	break;  }  
Missing Default,JMMClient,GroupFilterVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterVM.cs,EvaluateGroupFilter,The following switch statement is missing a default case: switch (gfc.ConditionTypeEnum) {  case GroupFilterConditionType.MissingEpisodes:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && ser.HasMissingEpisodesAny == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && ser.HasMissingEpisodesAny == true)  		return false;  	break;  case GroupFilterConditionType.MissingEpisodesCollecting:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && ser.HasMissingEpisodesGroups == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && ser.HasMissingEpisodesGroups == true)  		return false;  	break;  case GroupFilterConditionType.HasUnwatchedEpisodes:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && ser.HasUnwatchedFiles == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && ser.HasUnwatchedFiles == true)  		return false;  	break;  case GroupFilterConditionType.CompletedSeries:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && ser.IsComplete == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && ser.IsComplete == true)  		return false;  	break;  case GroupFilterConditionType.AssignedTvDBInfo:  	bool tvDBInfoMissing = ser.CrossRef_AniDB_TvDBV2 == null || ser.CrossRef_AniDB_TvDBV2.Count == 0;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && tvDBInfoMissing)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && !tvDBInfoMissing)  		return false;  	break;  case GroupFilterConditionType.AssignedMALInfo:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && ser.CrossRef_AniDB_MAL == null)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && ser.CrossRef_AniDB_MAL != null)  		return false;  	break;  case GroupFilterConditionType.AssignedMovieDBInfo:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && ser.CrossRef_AniDB_MovieDB == null)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && ser.CrossRef_AniDB_MovieDB != null)  		return false;  	break;  case GroupFilterConditionType.AssignedTvDBOrMovieDBInfo:  	bool tvDBInfoMissing2 = ser.CrossRef_AniDB_TvDBV2 == null || ser.CrossRef_AniDB_TvDBV2.Count == 0;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && tvDBInfoMissing2 && ser.CrossRef_AniDB_MovieDB == null)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && !tvDBInfoMissing2 && ser.CrossRef_AniDB_MovieDB != null)  		return false;  	break;  case GroupFilterConditionType.FinishedAiring:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && ser.FinishedAiring == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && ser.FinishedAiring == true)  		return false;  	break;  case GroupFilterConditionType.UserVoted:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && ser.UserHasVotedPerm == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && ser.UserHasVotedPerm == true)  		return false;  	break;  case GroupFilterConditionType.UserVotedAny:  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Include && ser.UserHasVotedAny == false)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.Exclude && ser.UserHasVotedAny == true)  		return false;  	break;  case GroupFilterConditionType.AirDate:  	DateTime filterDate;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		int days = 0;  		int.TryParse (gfc.ConditionParameter' out days);  		filterDate = DateTime.Today.AddDays (0 - days);  	}  	else  		filterDate = GroupFilterHelper.GetDateFromString (gfc.ConditionParameter);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays)  		if (!ser.AniDB_Anime.AirDate.HasValue || ser.AniDB_Anime.AirDate.Value < filterDate)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan)  		if (!ser.AniDB_Anime.AirDate.HasValue || ser.AniDB_Anime.AirDate.Value > filterDate)  			return false;  	break;  case GroupFilterConditionType.SeriesCreatedDate:  	DateTime filterDateSeries;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		int days = 0;  		int.TryParse (gfc.ConditionParameter' out days);  		filterDateSeries = DateTime.Today.AddDays (0 - days);  	}  	else  		filterDateSeries = GroupFilterHelper.GetDateFromString (gfc.ConditionParameter);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays)  		if (ser.DateTimeCreated < filterDateSeries)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan)  		if (ser.DateTimeCreated > filterDateSeries)  			return false;  	break;  case GroupFilterConditionType.EpisodeWatchedDate:  	DateTime filterDateEpsiodeWatched;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		int days = 0;  		int.TryParse (gfc.ConditionParameter' out days);  		filterDateEpsiodeWatched = DateTime.Today.AddDays (0 - days);  	}  	else  		filterDateEpsiodeWatched = GroupFilterHelper.GetDateFromString (gfc.ConditionParameter);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		if (!ser.WatchedDate.HasValue)  			return false;  		if (ser.WatchedDate.Value < filterDateEpsiodeWatched)  			return false;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  		if (!ser.WatchedDate.HasValue)  			return false;  		if (ser.WatchedDate.Value > filterDateEpsiodeWatched)  			return false;  	}  	break;  case GroupFilterConditionType.EpisodeAddedDate:  	DateTime filterDateEpisodeAdded;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		int days = 0;  		int.TryParse (gfc.ConditionParameter' out days);  		filterDateEpisodeAdded = DateTime.Today.AddDays (0 - days);  	}  	else  		filterDateEpisodeAdded = GroupFilterHelper.GetDateFromString (gfc.ConditionParameter);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan || gfc.ConditionOperatorEnum == GroupFilterOperator.LastXDays) {  		if (!ser.EpisodeAddedDate.HasValue)  			return false;  		if (ser.EpisodeAddedDate.Value < filterDateEpisodeAdded)  			return false;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan) {  		if (!ser.EpisodeAddedDate.HasValue)  			return false;  		if (ser.EpisodeAddedDate.Value > filterDateEpisodeAdded)  			return false;  	}  	break;  case GroupFilterConditionType.AniDBRating:  	decimal dRating = -1;  	decimal.TryParse (gfc.ConditionParameter' style' culture' out dRating);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && ser.AniDB_Anime.AniDBRating < dRating)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && ser.AniDB_Anime.AniDBRating > dRating)  		return false;  	break;  case GroupFilterConditionType.UserRating:  	if (ser.AniDB_Anime == null || ser.AniDB_Anime.Detail == null || ser.AniDB_Anime.Detail.UserVote == null)  		return false;  	decimal dUserRating = -1;  	decimal.TryParse (gfc.ConditionParameter' style' culture' out dUserRating);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && ser.AniDB_Anime.Detail.UserRating < dUserRating)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && ser.AniDB_Anime.Detail.UserRating > dUserRating)  		return false;  	break;  case GroupFilterConditionType.EpisodeCount:  	int epCount = -1;  	int.TryParse (gfc.ConditionParameter' out epCount);  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.GreaterThan && ser.AniDB_Anime.EpisodeCountNormal < epCount)  		return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.LessThan && ser.AniDB_Anime.EpisodeCountNormal > epCount)  		return false;  	break;  case GroupFilterConditionType.Category:  	string filterParm = gfc.ConditionParameter.Trim ();  	string[] cats = filterParm.Split (''');  	bool foundCat = false;  	int index = 0;  	foreach (string cat in cats) {  		if (cat.Trim ().Length == 0)  			continue;  		if (cat.Trim () == "'")  			continue;  		index = ser.CategoriesString.IndexOf (cat' 0' StringComparison.InvariantCultureIgnoreCase);  		if (index > -1) {  			foundCat = true;  			break;  		}  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  		if (!foundCat)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  		if (foundCat)  			return false;  	break;  case GroupFilterConditionType.AnimeType:  	filterParm = gfc.ConditionParameter.Trim ();  	string[] atypes = filterParm.Split (''');  	bool foundAnimeType = false;  	index = 0;  	foreach (string atype in atypes) {  		if (atype.Trim ().Length == 0)  			continue;  		if (atype.Trim () == "'")  			continue;  		if (string.Equals (ser.AniDB_Anime.AnimeTypeDescription' atype' StringComparison.InvariantCultureIgnoreCase)) {  			foundAnimeType = true;  			break;  		}  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  		if (!foundAnimeType)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  		if (foundAnimeType)  			return false;  	break;  case GroupFilterConditionType.VideoQuality:  	filterParm = gfc.ConditionParameter.Trim ();  	string[] vidQuals = filterParm.Split (''');  	bool foundVid = false;  	bool foundVidAllEps = false;  	index = 0;  	string stat_VidQualSeries = ser.AniDB_Anime.Detail.Stat_AllVideoQuality;  	string stat_VidQualEpisodes = ser.AniDB_Anime.Detail.Stat_AllVideoQuality_Episodes;  	foreach (string vidq in vidQuals) {  		if (vidq.Trim ().Length == 0)  			continue;  		if (vidq.Trim () == "'")  			continue;  		index = stat_VidQualSeries.IndexOf (vidq' 0' StringComparison.InvariantCultureIgnoreCase);  		if (index > -1)  			foundVid = true;  		index = stat_VidQualEpisodes.IndexOf (vidq' 0' StringComparison.InvariantCultureIgnoreCase);  		if (index > -1)  			foundVidAllEps = true;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  		if (!foundVid)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  		if (foundVid)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.InAllEpisodes)  		if (!foundVidAllEps)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotInAllEpisodes)  		if (foundVidAllEps)  			return false;  	break;  case GroupFilterConditionType.AudioLanguage:  case GroupFilterConditionType.SubtitleLanguage:  	filterParm = gfc.ConditionParameter.Trim ();  	string[] languages = filterParm.Split (''');  	bool foundLan = false;  	index = 0;  	string stat_AudioLanguages = ser.AniDB_Anime.Detail.Stat_AudioLanguages;  	string stat_SubtitleLanguages = ser.AniDB_Anime.Detail.Stat_SubtitleLanguages;  	foreach (string lanName in languages) {  		if (lanName.Trim ().Length == 0)  			continue;  		if (lanName.Trim () == "'")  			continue;  		if (gfc.ConditionTypeEnum == GroupFilterConditionType.AudioLanguage)  			index = stat_AudioLanguages.IndexOf (lanName' 0' StringComparison.InvariantCultureIgnoreCase);  		if (gfc.ConditionTypeEnum == GroupFilterConditionType.SubtitleLanguage)  			index = stat_SubtitleLanguages.IndexOf (lanName' 0' StringComparison.InvariantCultureIgnoreCase);  		if (index > -1)  			foundLan = true;  	}  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.In)  		if (!foundLan)  			return false;  	if (gfc.ConditionOperatorEnum == GroupFilterOperator.NotIn)  		if (foundLan)  			return false;  	break;  }  
Missing Default,JMMClient,MainWindow,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\MainWindow.xaml.cs,ShowDashMetroView,The following switch statement is missing a default case: switch (viewType) {  case MetroViews.MainNormal:  	dash.Visibility = System.Windows.Visibility.Visible;  	DisplayMainTab (TAB_MAIN_Dashboard);  	AppSettings.DashboardType = DashboardType.Normal;  	break;  case MetroViews.MainMetro:  	dashMetro.Visibility = System.Windows.Visibility.Visible;  	DisplayMainTab (TAB_MAIN_Dashboard);  	AppSettings.DashboardType = DashboardType.Metro;  	break;  case MetroViews.ContinueWatching:  	tileContinueWatching.Visibility = System.Windows.Visibility.Visible;  	tileContinueWatching.DataContext = data;  	break;  }  
Missing Default,JMMClient.Downloads,DownloadSearchCriteria,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Downloads\DownloadSearchCriteria.cs,ToString,The following switch statement is missing a default case: switch (searchType) {  case DownloadSearchType.Episode:  	ret = "Episode";  	break;  case DownloadSearchType.Manual:  	ret = "Manual";  	break;  case DownloadSearchType.Series:  	ret = "Anime";  	break;  }  
Missing Default,JMMClient.Forms,GroupFilterConditionForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\GroupFilterConditionForm.xaml.cs,EvaluateConditionsAndOperators,The following switch statement is missing a default case: switch (conditionType) {  case GroupFilterConditionType.AirDate:  case GroupFilterConditionType.SeriesCreatedDate:  case GroupFilterConditionType.EpisodeAddedDate:  case GroupFilterConditionType.EpisodeWatchedDate:  	if (opType == GroupFilterOperator.LastXDays) {  		IsParameterLastXDays = true;  		IsParameterText = true;  	}  	else  		IsParameterDate = true;  	break;  case GroupFilterConditionType.AnimeGroup:  	IsParameterAnimeGroup = true;  	break;  case GroupFilterConditionType.AnimeType:  	IsParameterAnimeType = true;  	break;  case GroupFilterConditionType.ReleaseGroup:  case GroupFilterConditionType.Studio:  	IsParameterInNotIn = true;  	break;  case GroupFilterConditionType.Category:  	IsParameterInNotIn = true;  	IsParameterCategory = true;  	break;  case GroupFilterConditionType.AudioLanguage:  	IsParameterInNotIn = true;  	IsParameterAudioLanguage = true;  	break;  case GroupFilterConditionType.SubtitleLanguage:  	IsParameterInNotIn = true;  	IsParameterSubtitleLanguage = true;  	break;  case GroupFilterConditionType.VideoQuality:  	IsParameterInNotIn = true;  	IsParameterVideoQuality = true;  	break;  case GroupFilterConditionType.AniDBRating:  case GroupFilterConditionType.UserRating:  	IsParameterText = true;  	IsParameterRating = true;  	break;  case GroupFilterConditionType.EpisodeCount:  	IsParameterText = true;  	IsParameterInteger = true;  	break;  }  
Missing Default,JMMClient.Forms,GroupFilterConditionForm,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\Forms\GroupFilterConditionForm.xaml.cs,Init,The following switch statement is missing a default case: switch (conditionType) {  case GroupFilterConditionType.AirDate:  case GroupFilterConditionType.SeriesCreatedDate:  case GroupFilterConditionType.EpisodeAddedDate:  case GroupFilterConditionType.EpisodeWatchedDate:  	if (opType == GroupFilterOperator.LastXDays)  		txtParameter.Text = gfc.ConditionParameter;  	else {  		DateTime airDate = GroupFilterHelper.GetDateFromString (gfc.ConditionParameter);  		dpDate.SelectedDate = airDate;  	}  	break;  case GroupFilterConditionType.AnimeGroup:  	// don't display anything  	break;  case GroupFilterConditionType.AnimeType:  case GroupFilterConditionType.Category:  case GroupFilterConditionType.ReleaseGroup:  case GroupFilterConditionType.Studio:  case GroupFilterConditionType.VideoQuality:  case GroupFilterConditionType.AniDBRating:  case GroupFilterConditionType.UserRating:  case GroupFilterConditionType.AudioLanguage:  case GroupFilterConditionType.SubtitleLanguage:  	txtParameter.Text = gfc.ConditionParameter;  	break;  }  
Missing Default,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,EnableDisableImage,The following switch statement is missing a default case: switch (poster.ImageType) {  case ImageEntityType.TvDB_Cover:  	TvDB_ImagePosterVM tvPoster = poster.PosterObject as TvDB_ImagePosterVM;  	res = JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' tvPoster.TvDB_ImagePosterID' (int)ImageEntityType.TvDB_Cover);  	tvPoster.Enabled = enabled ? 1 : 0;  	tvPoster.IsImageEnabled = enabled;  	tvPoster.IsImageDisabled = !enabled;  	break;  case ImageEntityType.Trakt_Poster:  	Trakt_ImagePosterVM traktPoster = poster.PosterObject as Trakt_ImagePosterVM;  	res = JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' traktPoster.Trakt_ImagePosterID' (int)ImageEntityType.Trakt_Poster);  	traktPoster.Enabled = enabled ? 1 : 0;  	traktPoster.IsImageEnabled = enabled;  	traktPoster.IsImageDisabled = !enabled;  	break;  case ImageEntityType.AniDB_Cover:  	AniDB_AnimeVM anime = poster.PosterObject as AniDB_AnimeVM;  	res = JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' anime.AnimeID' (int)ImageEntityType.AniDB_Cover);  	anime.ImageEnabled = enabled ? 1 : 0;  	anime.IsImageEnabled = enabled;  	anime.IsImageDisabled = !enabled;  	break;  case ImageEntityType.MovieDB_Poster:  	MovieDB_PosterVM moviePoster = poster.PosterObject as MovieDB_PosterVM;  	res = JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' moviePoster.MovieDB_PosterID' (int)ImageEntityType.MovieDB_Poster);  	moviePoster.Enabled = enabled ? 1 : 0;  	moviePoster.IsImageEnabled = enabled;  	moviePoster.IsImageDisabled = !enabled;  	break;  }  
Missing Default,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,EnableDisableImage,The following switch statement is missing a default case: switch (fanart.ImageType) {  case ImageEntityType.TvDB_FanArt:  	TvDB_ImageFanartVM tvFanart = fanart.FanartObject as TvDB_ImageFanartVM;  	res = JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' tvFanart.TvDB_ImageFanartID' (int)ImageEntityType.TvDB_FanArt);  	tvFanart.Enabled = enabled ? 1 : 0;  	tvFanart.IsImageEnabled = enabled;  	tvFanart.IsImageDisabled = !enabled;  	break;  case ImageEntityType.Trakt_Fanart:  	Trakt_ImageFanartVM traktFanart = fanart.FanartObject as Trakt_ImageFanartVM;  	res = JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' traktFanart.Trakt_ImageFanartID' (int)ImageEntityType.Trakt_Fanart);  	traktFanart.Enabled = enabled ? 1 : 0;  	traktFanart.IsImageEnabled = enabled;  	traktFanart.IsImageDisabled = !enabled;  	break;  case ImageEntityType.MovieDB_FanArt:  	MovieDB_FanartVM movieFanart = fanart.FanartObject as MovieDB_FanartVM;  	res = JMMServerVM.Instance.clientBinaryHTTP.EnableDisableImage (enabled' movieFanart.MovieDB_FanartID' (int)ImageEntityType.MovieDB_FanArt);  	movieFanart.Enabled = enabled ? 1 : 0;  	movieFanart.IsImageEnabled = enabled;  	movieFanart.IsImageDisabled = !enabled;  	break;  }  
Missing Default,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,SetDefaultImage,The following switch statement is missing a default case: switch (poster.ImageType) {  case ImageEntityType.TvDB_Cover:  	TvDB_ImagePosterVM tvPoster = poster.PosterObject as TvDB_ImagePosterVM;  	res = JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' ser.AniDB_ID' tvPoster.TvDB_ImagePosterID' (int)ImageEntityType.TvDB_Cover' (int)ImageSizeType.Poster);  	tvPoster.IsImageDefault = isDefault;  	tvPoster.IsImageNotDefault = !isDefault;  	break;  case ImageEntityType.Trakt_Poster:  	Trakt_ImagePosterVM traktPoster = poster.PosterObject as Trakt_ImagePosterVM;  	res = JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' ser.AniDB_ID' traktPoster.Trakt_ImagePosterID' (int)ImageEntityType.Trakt_Poster' (int)ImageSizeType.Poster);  	traktPoster.IsImageDefault = isDefault;  	traktPoster.IsImageNotDefault = !isDefault;  	break;  case ImageEntityType.AniDB_Cover:  	AniDB_AnimeVM anime = poster.PosterObject as AniDB_AnimeVM;  	res = JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' ser.AniDB_ID' anime.AnimeID' (int)ImageEntityType.AniDB_Cover' (int)ImageSizeType.Poster);  	anime.IsImageDefault = isDefault;  	anime.IsImageNotDefault = !isDefault;  	break;  case ImageEntityType.MovieDB_Poster:  	MovieDB_PosterVM moviePoster = poster.PosterObject as MovieDB_PosterVM;  	res = JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' ser.AniDB_ID' moviePoster.MovieDB_PosterID' (int)ImageEntityType.MovieDB_Poster' (int)ImageSizeType.Poster);  	moviePoster.IsImageDefault = isDefault;  	moviePoster.IsImageNotDefault = !isDefault;  	break;  }  
Missing Default,JMMClient.UserControls,AnimeSeries,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\AnimeSeries.xaml.cs,SetDefaultImage,The following switch statement is missing a default case: switch (fanart.ImageType) {  case ImageEntityType.TvDB_FanArt:  	TvDB_ImageFanartVM tvFanart = fanart.FanartObject as TvDB_ImageFanartVM;  	res = JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' ser.AniDB_ID' tvFanart.TvDB_ImageFanartID' (int)ImageEntityType.TvDB_FanArt' (int)ImageSizeType.Fanart);  	tvFanart.IsImageDefault = isDefault;  	tvFanart.IsImageNotDefault = !isDefault;  	break;  case ImageEntityType.Trakt_Fanart:  	Trakt_ImageFanartVM traktFanart = fanart.FanartObject as Trakt_ImageFanartVM;  	res = JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' ser.AniDB_ID' traktFanart.Trakt_ImageFanartID' (int)ImageEntityType.Trakt_Fanart' (int)ImageSizeType.Fanart);  	traktFanart.IsImageDefault = isDefault;  	traktFanart.IsImageNotDefault = !isDefault;  	break;  case ImageEntityType.MovieDB_FanArt:  	MovieDB_FanartVM movieFanart = fanart.FanartObject as MovieDB_FanartVM;  	res = JMMServerVM.Instance.clientBinaryHTTP.SetDefaultImage (isDefault' ser.AniDB_ID' movieFanart.MovieDB_FanartID' (int)ImageEntityType.MovieDB_FanArt' (int)ImageSizeType.Fanart);  	movieFanart.IsImageDefault = isDefault;  	movieFanart.IsImageNotDefault = !isDefault;  	break;  }  
Missing Default,JMMClient.UserControls,DashboardMetroDXControl,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\DashboardMetroDXControl.xaml.cs,Instance_OnFinishedProcessEvent,The following switch statement is missing a default case: switch (ev.ProcessType) {  case DashboardMetroProcessType.ContinueWatching:  	IsLoadingContinueWatching = false;  	break;  case DashboardMetroProcessType.RandomSeries:  	IsLoadingRandomSeries = false;  	break;  case DashboardMetroProcessType.TraktActivity:  	IsLoadingTraktActivity = false;  	break;  case DashboardMetroProcessType.NewEpisodes:  	IsLoadingNewEpisodes = false;  	break;  }  
Missing Default,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,The following switch statement is missing a default case: switch (JMMServerVM.Instance.AniDB_Calendar_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequencyCalendar.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequencyCalendar.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequencyCalendar.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequencyCalendar.SelectedIndex = 3;  	break;  }  
Missing Default,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,The following switch statement is missing a default case: switch (JMMServerVM.Instance.AniDB_Anime_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequencyAnime.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequencyAnime.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequencyAnime.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequencyAnime.SelectedIndex = 3;  	break;  }  
Missing Default,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,The following switch statement is missing a default case: switch (JMMServerVM.Instance.AniDB_MyList_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequencyMyList.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequencyMyList.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequencyMyList.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequencyMyList.SelectedIndex = 3;  	break;  }  
Missing Default,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,The following switch statement is missing a default case: switch (JMMServerVM.Instance.AniDB_MyListStats_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequencyMyListStats.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequencyMyListStats.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequencyMyListStats.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequencyMyListStats.SelectedIndex = 3;  	break;  }  
Missing Default,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,AniDBScheduledUpdates,The following switch statement is missing a default case: switch (JMMServerVM.Instance.AniDB_File_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequencyAniDBFiles.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequencyAniDBFiles.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequencyAniDBFiles.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequencyAniDBFiles.SelectedIndex = 3;  	break;  }  
Missing Default,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyAniDBFiles_SelectionChanged,The following switch statement is missing a default case: switch (cboUpdateFrequencyAniDBFiles.SelectedIndex) {  case 0:  	JMMServerVM.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Missing Default,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyMyListStats_SelectionChanged,The following switch statement is missing a default case: switch (cboUpdateFrequencyMyListStats.SelectedIndex) {  case 0:  	JMMServerVM.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Missing Default,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyMyList_SelectionChanged,The following switch statement is missing a default case: switch (cboUpdateFrequencyMyList.SelectedIndex) {  case 0:  	JMMServerVM.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Missing Default,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyAnime_SelectionChanged,The following switch statement is missing a default case: switch (cboUpdateFrequencyAnime.SelectedIndex) {  case 0:  	JMMServerVM.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Missing Default,JMMClient.UserControls,AniDBScheduledUpdates,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyCalendar_SelectionChanged,The following switch statement is missing a default case: switch (cboUpdateFrequencyCalendar.SelectedIndex) {  case 0:  	JMMServerVM.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Missing Default,JMMClient.UserControls,DisplayStyleSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\DisplayStyleSettings.xaml.cs,DisplayStyleSettings,The following switch statement is missing a default case: switch (JMMServerVM.Instance.EpisodeTitleSource) {  case DataSourceType.AniDB:  	cboStyleEpisodeTitle.SelectedIndex = 0;  	break;  case DataSourceType.TheTvDB:  	cboStyleEpisodeTitle.SelectedIndex = 1;  	break;  }  
Missing Default,JMMClient.UserControls,DisplayStyleSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\DisplayStyleSettings.xaml.cs,DisplayStyleSettings,The following switch statement is missing a default case: switch (JMMServerVM.Instance.SeriesDescriptionSource) {  case DataSourceType.AniDB:  	cboStyleSeriesOverview.SelectedIndex = 0;  	break;  case DataSourceType.TheTvDB:  	cboStyleSeriesOverview.SelectedIndex = 1;  	break;  }  
Missing Default,JMMClient.UserControls,DisplayStyleSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\DisplayStyleSettings.xaml.cs,DisplayStyleSettings,The following switch statement is missing a default case: switch (JMMServerVM.Instance.SeriesNameSource) {  case DataSourceType.AniDB:  	cboStyleSeriesName.SelectedIndex = 0;  	break;  case DataSourceType.TheTvDB:  	cboStyleSeriesName.SelectedIndex = 1;  	break;  }  
Missing Default,JMMClient.UserControls,MALSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\MALSettings.xaml.cs,MALSettings,The following switch statement is missing a default case: switch (JMMServerVM.Instance.MAL_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequency.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequency.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequency.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequency.SelectedIndex = 3;  	break;  }  
Missing Default,JMMClient.UserControls,MALSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\MALSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,The following switch statement is missing a default case: switch (cboUpdateFrequency.SelectedIndex) {  case 0:  	JMMServerVM.Instance.MAL_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.MAL_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.MAL_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.MAL_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Missing Default,JMMClient.UserControls,TraktSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TraktSettings.xaml.cs,TraktSettings,The following switch statement is missing a default case: switch (JMMServerVM.Instance.Trakt_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequency.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequency.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequency.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequency.SelectedIndex = 3;  	break;  }  
Missing Default,JMMClient.UserControls,TraktSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TraktSettings.xaml.cs,TraktSettings,The following switch statement is missing a default case: switch (JMMServerVM.Instance.Trakt_SyncFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboSyncFrequency.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboSyncFrequency.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboSyncFrequency.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboSyncFrequency.SelectedIndex = 3;  	break;  }  
Missing Default,JMMClient.UserControls,TraktSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TraktSettings.xaml.cs,cboSyncFrequency_SelectionChanged,The following switch statement is missing a default case: switch (cboSyncFrequency.SelectedIndex) {  case 0:  	JMMServerVM.Instance.Trakt_SyncFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.Trakt_SyncFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.Trakt_SyncFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.Trakt_SyncFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Missing Default,JMMClient.UserControls,TraktSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TraktSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,The following switch statement is missing a default case: switch (cboUpdateFrequency.SelectedIndex) {  case 0:  	JMMServerVM.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Missing Default,JMMClient.UserControls,TvDBSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TvDBSettings.xaml.cs,TvDBSettings,The following switch statement is missing a default case: switch (JMMServerVM.Instance.TvDB_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequency.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequency.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequency.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequency.SelectedIndex = 3;  	break;  }  
Missing Default,JMMClient.UserControls,TvDBSettings,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\UserControls\Settings\TvDBSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,The following switch statement is missing a default case: switch (cboUpdateFrequency.SelectedIndex) {  case 0:  	JMMServerVM.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	JMMServerVM.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	JMMServerVM.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	JMMServerVM.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Missing Default,JMMClient.ViewModel,PosterContainer,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeCrossRefsVM.cs,PosterContainer,The following switch statement is missing a default case: switch (ImageType) {  case ImageEntityType.AniDB_Cover:  	AniDB_AnimeVM anime = PosterObject as AniDB_AnimeVM;  	IsImageEnabled = anime.IsImageEnabled;  	IsImageDisabled = anime.IsImageDisabled;  	IsImageDefault = anime.IsImageDefault;  	IsImageNotDefault = anime.IsImageNotDefault;  	PosterSource = "AniDB";  	break;  case ImageEntityType.TvDB_Cover:  	TvDB_ImagePosterVM tvPoster = PosterObject as TvDB_ImagePosterVM;  	IsImageEnabled = tvPoster.IsImageEnabled;  	IsImageDisabled = tvPoster.IsImageDisabled;  	IsImageDefault = tvPoster.IsImageDefault;  	IsImageNotDefault = tvPoster.IsImageNotDefault;  	PosterSource = "TvDB";  	break;  case ImageEntityType.MovieDB_Poster:  	MovieDB_PosterVM moviePoster = PosterObject as MovieDB_PosterVM;  	IsImageEnabled = moviePoster.IsImageEnabled;  	IsImageDisabled = moviePoster.IsImageDisabled;  	IsImageDefault = moviePoster.IsImageDefault;  	IsImageNotDefault = moviePoster.IsImageNotDefault;  	PosterSource = "MovieDB";  	break;  case ImageEntityType.Trakt_Poster:  	Trakt_ImagePosterVM traktPoster = PosterObject as Trakt_ImagePosterVM;  	IsImageEnabled = traktPoster.IsImageEnabled;  	IsImageDisabled = traktPoster.IsImageDisabled;  	IsImageDefault = traktPoster.IsImageDefault;  	IsImageNotDefault = traktPoster.IsImageNotDefault;  	PosterSource = "Trakt";  	break;  }  
Missing Default,JMMClient.ViewModel,FanartContainer,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AniDB_AnimeCrossRefsVM.cs,FanartContainer,The following switch statement is missing a default case: switch (ImageType) {  case ImageEntityType.TvDB_FanArt:  	TvDB_ImageFanartVM tvFanart = FanartObject as TvDB_ImageFanartVM;  	IsImageEnabled = tvFanart.IsImageEnabled;  	IsImageDisabled = tvFanart.IsImageDisabled;  	IsImageDefault = tvFanart.IsImageDefault;  	IsImageNotDefault = tvFanart.IsImageNotDefault;  	FanartSource = "TvDB";  	break;  case ImageEntityType.MovieDB_FanArt:  	MovieDB_FanartVM movieFanart = FanartObject as MovieDB_FanartVM;  	IsImageEnabled = movieFanart.IsImageEnabled;  	IsImageDisabled = movieFanart.IsImageDisabled;  	IsImageDefault = movieFanart.IsImageDefault;  	IsImageNotDefault = movieFanart.IsImageNotDefault;  	FanartSource = "MovieDB";  	break;  case ImageEntityType.Trakt_Fanart:  	Trakt_ImageFanartVM traktFanart = FanartObject as Trakt_ImageFanartVM;  	IsImageEnabled = traktFanart.IsImageEnabled;  	IsImageDisabled = traktFanart.IsImageDisabled;  	IsImageDefault = traktFanart.IsImageDefault;  	IsImageNotDefault = traktFanart.IsImageNotDefault;  	FanartSource = "Trakt";  	break;  }  
Missing Default,JMMClient.ViewModel,AnimeEpisodeTypeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\AnimeEpisodeTypeVM.cs,CompareTo,The following switch statement is missing a default case: switch (SortType) {  case SortMethod.EpisodeTypeDescription:  	return EpisodeTypeDescription.CompareTo (obj.EpisodeTypeDescription);  case SortMethod.EpisodeType:  	return EpisodeType.CompareTo (obj.EpisodeType);  }  
Missing Default,JMMClient.ViewModel,GroupFilterConditionVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterConditionVM.cs,SetConditionParameterString,The following switch statement is missing a default case: switch (ConditionTypeEnum) {  case GroupFilterConditionType.AirDate:  case GroupFilterConditionType.SeriesCreatedDate:  case GroupFilterConditionType.EpisodeAddedDate:  case GroupFilterConditionType.EpisodeWatchedDate:  	if (ConditionOperatorEnum == GroupFilterOperator.LastXDays)  		ConditionParameterString += ConditionParameter;  	else {  		DateTime airDate = GroupFilterHelper.GetDateFromString (ConditionParameter);  		ConditionParameterString += GroupFilterHelper.GetDateAsFriendlyString (airDate);  	}  	break;  case GroupFilterConditionType.AnimeGroup:  	int groupID = 0;  	int.TryParse (ConditionParameter' out groupID);  	if (groupID == 0)  		break;  	if (!MainListHelperVM.Instance.AllGroupsDictionary.ContainsKey (groupID))  		break;  	ConditionParameterString += MainListHelperVM.Instance.AllGroupsDictionary [groupID].GroupName;  	break;  case GroupFilterConditionType.AnimeType:  case GroupFilterConditionType.Category:  case GroupFilterConditionType.ReleaseGroup:  case GroupFilterConditionType.Studio:  case GroupFilterConditionType.VideoQuality:  case GroupFilterConditionType.AniDBRating:  case GroupFilterConditionType.UserRating:  case GroupFilterConditionType.AudioLanguage:  case GroupFilterConditionType.SubtitleLanguage:  	ConditionParameterString += ConditionParameter;  	break;  }  
Missing Default,JMMClient.ViewModel,GroupFilterHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\GroupFilterHelper.cs,GetAllowedOperators,The following switch statement is missing a default case: switch (conditionType) {  case GroupFilterConditionType.AirDate:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.GreaterThan));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.LessThan));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.LastXDays));  	break;  case GroupFilterConditionType.SeriesCreatedDate:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.GreaterThan));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.LessThan));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.LastXDays));  	break;  case GroupFilterConditionType.EpisodeWatchedDate:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.GreaterThan));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.LessThan));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.LastXDays));  	break;  case GroupFilterConditionType.EpisodeAddedDate:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.GreaterThan));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.LessThan));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.LastXDays));  	break;  case GroupFilterConditionType.AllEpisodesWatched:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Include));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Exclude));  	break;  case GroupFilterConditionType.AnimeGroup:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Equals));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.NotEquals));  	break;  case GroupFilterConditionType.AnimeType:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.In));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.NotIn));  	break;  case GroupFilterConditionType.AssignedTvDBInfo:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Include));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Exclude));  	break;  case GroupFilterConditionType.AssignedMALInfo:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Include));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Exclude));  	break;  case GroupFilterConditionType.AssignedMovieDBInfo:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Include));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Exclude));  	break;  case GroupFilterConditionType.AssignedTvDBOrMovieDBInfo:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Include));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Exclude));  	break;  case GroupFilterConditionType.Category:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.In));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.NotIn));  	break;  case GroupFilterConditionType.AudioLanguage:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.In));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.NotIn));  	break;  case GroupFilterConditionType.SubtitleLanguage:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.In));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.NotIn));  	break;  case GroupFilterConditionType.CompletedSeries:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Include));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Exclude));  	break;  case GroupFilterConditionType.FinishedAiring:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Include));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Exclude));  	break;  case GroupFilterConditionType.Favourite:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Include));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Exclude));  	break;  case GroupFilterConditionType.HasUnwatchedEpisodes:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Include));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Exclude));  	break;  case GroupFilterConditionType.HasWatchedEpisodes:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Include));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Exclude));  	break;  case GroupFilterConditionType.MissingEpisodes:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Include));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Exclude));  	break;  case GroupFilterConditionType.MissingEpisodesCollecting:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Include));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Exclude));  	break;  case GroupFilterConditionType.ReleaseGroup:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.In));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.NotIn));  	break;  case GroupFilterConditionType.Studio:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.In));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.NotIn));  	break;  case GroupFilterConditionType.UserVoted:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Include));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Exclude));  	break;  case GroupFilterConditionType.UserVotedAny:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Include));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.Exclude));  	break;  case GroupFilterConditionType.VideoQuality:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.In));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.NotIn));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.InAllEpisodes));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.NotInAllEpisodes));  	break;  case GroupFilterConditionType.AniDBRating:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.GreaterThan));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.LessThan));  	break;  case GroupFilterConditionType.UserRating:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.GreaterThan));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.LessThan));  	break;  case GroupFilterConditionType.EpisodeCount:  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.GreaterThan));  	ops.Add (GetTextForEnum_Operator (GroupFilterOperator.LessThan));  	break;  }  
Missing Default,JMMClient.ViewModel,MissingEpisodeVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MissingEpisodeVM.cs,MissingEpisodeVM,The following switch statement is missing a default case: switch (EpisodeTypeEnum) {  case JMMClient.EpisodeType.Credits:  	shortType = "C";  	break;  case JMMClient.EpisodeType.Episode:  	shortType = "";  	break;  case JMMClient.EpisodeType.Other:  	shortType = "O";  	break;  case JMMClient.EpisodeType.Parody:  	shortType = "P";  	break;  case JMMClient.EpisodeType.Special:  	shortType = "S";  	break;  case JMMClient.EpisodeType.Trailer:  	shortType = "T";  	break;  }  
Missing Default,JMMClient.ViewModel,MissingFileVM,C:\repos\svn2github_Japanese_Media_Manager\JMMClient\JMMClient\ViewModel\MissingFileVM.cs,MissingFileVM,The following switch statement is missing a default case: switch (EpisodeTypeEnum) {  case JMMClient.EpisodeType.Credits:  	shortType = "C";  	break;  case JMMClient.EpisodeType.Episode:  	shortType = "";  	break;  case JMMClient.EpisodeType.Other:  	shortType = "O";  	break;  case JMMClient.EpisodeType.Parody:  	shortType = "P";  	break;  case JMMClient.EpisodeType.Special:  	shortType = "S";  	break;  case JMMClient.EpisodeType.Trailer:  	shortType = "T";  	break;  }  
