Implementation smell,Namespace,Class,File,Method,Description
Long Method,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,TranslateVideoStream,The method has 128 lines of code.
Long Method,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The method has 207 lines of code.
Complex Method,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes,Cyclomatic complexity of the method is 11
Complex Method,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes_here,Cyclomatic complexity of the method is 21
Complex Method,JMMFileHelper,MediaInfoReader,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MediaInfoReader.cs,ReadMediaInfo,Cyclomatic complexity of the method is 14
Complex Method,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,TranslateVideoStream,Cyclomatic complexity of the method is 39
Complex Method,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,TranslateAudioStream,Cyclomatic complexity of the method is 25
Complex Method,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,TranslateTextStream,Cyclomatic complexity of the method is 10
Complex Method,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,Cyclomatic complexity of the method is 49
Complex Method,JMMFileHelper.Subtitles,TextSubtitles,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Subtitles\TextSubtitles.cs,GetStreams,Cyclomatic complexity of the method is 14
Long Parameter List,JMMFileHelper,FileHashHelper,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\FileHashHelper.cs,GetHashInfo,The method has 6 parameters.
Long Parameter List,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes_callback_dll,The method has 6 parameters.
Long Parameter List,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes_dll,The method has 6 parameters.
Long Parameter List,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes,The method has 6 parameters.
Long Parameter List,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes_here,The method has 6 parameters.
Long Parameter List,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,FF,The method has 6 parameters.
Long Parameter List,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,GG,The method has 6 parameters.
Long Parameter List,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,HH,The method has 6 parameters.
Long Parameter List,JMMFileHelper,MediaInfoReader,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MediaInfoReader.cs,ReadMediaInfo,The method has 5 parameters.
Long Parameter List,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The method has 6 parameters.
Long Parameter List,PlexMediaInfo,MediaInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\MediaInfoDLL.cs,MediaInfo_GetI,The method has 5 parameters.
Long Parameter List,PlexMediaInfo,MediaInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\MediaInfoDLL.cs,MediaInfoA_GetI,The method has 5 parameters.
Long Parameter List,PlexMediaInfo,MediaInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\MediaInfoDLL.cs,MediaInfo_Get,The method has 6 parameters.
Long Parameter List,PlexMediaInfo,MediaInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\MediaInfoDLL.cs,MediaInfoA_Get,The method has 6 parameters.
Long Parameter List,PlexMediaInfo,MediaInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\MediaInfoDLL.cs,Get,The method has 5 parameters.
Long Parameter List,PlexMediaInfo,MediaInfoList,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\MediaInfoDLL.cs,MediaInfoList_GetI,The method has 6 parameters.
Long Parameter List,PlexMediaInfo,MediaInfoList,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\MediaInfoDLL.cs,MediaInfoList_Get,The method has 7 parameters.
Long Parameter List,PlexMediaInfo,MediaInfoList,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\MediaInfoDLL.cs,Get,The method has 6 parameters.
Long Parameter List,PlexMediaInfo,MediaInfoList,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\MediaInfoDLL.cs,Get,The method has 5 parameters.
Long Parameter List,PlexMediaInfo,MediaInfoList,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\MediaInfoDLL.cs,Get,The method has 5 parameters.
Long Statement,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes_here,The length of the statement  "		rhash.ed2k = nBlocks > 1 ? BitConverter.ToString (md4.ComputeHash (baED2KHash)).Replace ("-"' "").ToUpper () : BitConverter.ToString (baED2KHash).Replace ("-"' "").ToUpper (); " is 175.
Long Statement,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,TranslateAudioStream,The length of the statement  "		if ((fprofile.ToLower () != "layer 3") && (fprofile.ToLower () != "dolby digital") && (fprofile.ToLower () != "pro") && (fprofile.ToLower () != "layer 2")) " is 155.
Long Statement,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The length of the statement  "		if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) { " is 147.
Long Statement,PlexMediaInfo,MediaInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\MediaInfoDLL.cs,Get,The length of the statement  "		String ToReturn = Marshal.PtrToStringAnsi (MediaInfoA_Get (Handle' (IntPtr)StreamKind' (IntPtr)StreamNumber' Parameter_Ptr' (IntPtr)KindOfInfo' (IntPtr)KindOfSearch)); " is 167.
Long Statement,PlexMediaInfo,MediaInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\MediaInfoDLL.cs,Get,The length of the statement  "		return Marshal.PtrToStringUni (MediaInfo_Get (Handle' (IntPtr)StreamKind' (IntPtr)StreamNumber' Parameter' (IntPtr)KindOfInfo' (IntPtr)KindOfSearch)); " is 150.
Long Statement,PlexMediaInfo,MediaInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\MediaInfoDLL.cs,Get,The length of the statement  "		return Marshal.PtrToStringAnsi (MediaInfoA_GetI (Handle' (IntPtr)StreamKind' (IntPtr)StreamNumber' (IntPtr)Parameter' (IntPtr)KindOfInfo)); " is 139.
Long Statement,PlexMediaInfo,MediaInfo,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\MediaInfoDLL.cs,Get,The length of the statement  "		return Marshal.PtrToStringUni (MediaInfo_GetI (Handle' (IntPtr)StreamKind' (IntPtr)StreamNumber' (IntPtr)Parameter' (IntPtr)KindOfInfo)); " is 137.
Long Statement,PlexMediaInfo,MediaInfoList,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\MediaInfoDLL.cs,Get,The length of the statement  "	return Marshal.PtrToStringUni (MediaInfoList_Get (Handle' (IntPtr)FilePos' (IntPtr)StreamKind' (IntPtr)StreamNumber' Parameter' (IntPtr)KindOfInfo' (IntPtr)KindOfSearch)); " is 171.
Long Statement,PlexMediaInfo,MediaInfoList,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\MediaInfoDLL.cs,Get,The length of the statement  "	return Marshal.PtrToStringUni (MediaInfoList_GetI (Handle' (IntPtr)FilePos' (IntPtr)StreamKind' (IntPtr)StreamNumber' (IntPtr)Parameter' (IntPtr)KindOfInfo)); " is 158.
Complex Conditional,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,TranslateVideoStream,The conditional expression  "!string.IsNullOrEmpty (s.Level) && (s.Level == "31") && (s.Cabac == null || s.Cabac == "0")"  is complex.
Complex Conditional,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,TranslateAudioStream,The conditional expression  "(fprofile.ToLower () != "layer 3") && (fprofile.ToLower () != "dolby digital") && (fprofile.ToLower () != "pro") && (fprofile.ToLower () != "layer 2")"  is complex.
Complex Conditional,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,TranslateAudioStream,The conditional expression  "(!string.IsNullOrEmpty (fset)) && (fset == "Little / Signed") && (s.Codec == "pcm") && (bitdepth == 16)"  is complex.
Complex Conditional,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,TranslateAudioStream,The conditional expression  "(!string.IsNullOrEmpty (fset)) && (fset == "Big / Signed") && (s.Codec == "pcm") && (bitdepth == 16)"  is complex.
Complex Conditional,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,TranslateAudioStream,The conditional expression  "(!string.IsNullOrEmpty (fset)) && (fset == "Little / Unsigned") && (s.Codec == "pcm") && (bitdepth == 8)"  is complex.
Complex Conditional,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The conditional expression  "(buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')"  is complex.
Complex Conditional,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The conditional expression  "(buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')"  is complex.
Complex Conditional,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The conditional expression  "(buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])"  is complex.
Magic Number,JMMFileHelper,Crc32,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Crc32.cs,HashCore,The following statement contains a magic number: unchecked {  	while (--length >= 0) {  		crcValue = CrcTable [(crcValue ^ buffer [start++]) & 0xFF] ^ (crcValue >> 8);  	}  }  
Magic Number,JMMFileHelper,Crc32,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Crc32.cs,HashCore,The following statement contains a magic number: while (--length >= 0) {  	crcValue = CrcTable [(crcValue ^ buffer [start++]) & 0xFF] ^ (crcValue >> 8);  }  
Magic Number,JMMFileHelper,Crc32,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Crc32.cs,HashCore,The following statement contains a magic number: crcValue = CrcTable [(crcValue ^ buffer [start++]) & 0xFF] ^ (crcValue >> 8);  
Magic Number,JMMFileHelper,Crc32,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Crc32.cs,HashFinal,The following statement contains a magic number: HashValue = new[] {  	(byte)((crcValue >> 24) & 0xff)'  	(byte)((crcValue >> 16) & 0xff)'  	(byte)((crcValue >> 8) & 0xff)'  	(byte)(crcValue & 0xff)  };  
Magic Number,JMMFileHelper,Crc32,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Crc32.cs,HashFinal,The following statement contains a magic number: HashValue = new[] {  	(byte)((crcValue >> 24) & 0xff)'  	(byte)((crcValue >> 16) & 0xff)'  	(byte)((crcValue >> 8) & 0xff)'  	(byte)(crcValue & 0xff)  };  
Magic Number,JMMFileHelper,Crc32,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Crc32.cs,HashFinal,The following statement contains a magic number: HashValue = new[] {  	(byte)((crcValue >> 24) & 0xff)'  	(byte)((crcValue >> 16) & 0xff)'  	(byte)((crcValue >> 8) & 0xff)'  	(byte)(crcValue & 0xff)  };  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (UseDll ()) {  	byte[] hash = new byte[56];  	if (CalculateHashes_dll (strPath' ref hash' onHashProgress' getCRC32' getMD5' getSHA1)) {  		rhash.ed2k = HashToString (hash' 0' 16);  		//if (getCRC32) rhash.crc32 = HashToString(hash' 16' 4);  		if (getMD5)  			rhash.md5 = HashToString (hash' 20' 16);  		if (getSHA1)  			rhash.sha1 = HashToString (hash' 36' 20);  		gotED2k = getED2k;  		gotMD5 = getMD5;  		gotSHA1 = getSHA1;  	}  	else {  		rhash.ed2k = string.Empty;  		rhash.crc32 = string.Empty;  		rhash.md5 = string.Empty;  		rhash.sha1 = string.Empty;  	}  }  else  	stillNeedInfo = true;  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (UseDll ()) {  	byte[] hash = new byte[56];  	if (CalculateHashes_dll (strPath' ref hash' onHashProgress' getCRC32' getMD5' getSHA1)) {  		rhash.ed2k = HashToString (hash' 0' 16);  		//if (getCRC32) rhash.crc32 = HashToString(hash' 16' 4);  		if (getMD5)  			rhash.md5 = HashToString (hash' 20' 16);  		if (getSHA1)  			rhash.sha1 = HashToString (hash' 36' 20);  		gotED2k = getED2k;  		gotMD5 = getMD5;  		gotSHA1 = getSHA1;  	}  	else {  		rhash.ed2k = string.Empty;  		rhash.crc32 = string.Empty;  		rhash.md5 = string.Empty;  		rhash.sha1 = string.Empty;  	}  }  else  	stillNeedInfo = true;  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (UseDll ()) {  	byte[] hash = new byte[56];  	if (CalculateHashes_dll (strPath' ref hash' onHashProgress' getCRC32' getMD5' getSHA1)) {  		rhash.ed2k = HashToString (hash' 0' 16);  		//if (getCRC32) rhash.crc32 = HashToString(hash' 16' 4);  		if (getMD5)  			rhash.md5 = HashToString (hash' 20' 16);  		if (getSHA1)  			rhash.sha1 = HashToString (hash' 36' 20);  		gotED2k = getED2k;  		gotMD5 = getMD5;  		gotSHA1 = getSHA1;  	}  	else {  		rhash.ed2k = string.Empty;  		rhash.crc32 = string.Empty;  		rhash.md5 = string.Empty;  		rhash.sha1 = string.Empty;  	}  }  else  	stillNeedInfo = true;  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (UseDll ()) {  	byte[] hash = new byte[56];  	if (CalculateHashes_dll (strPath' ref hash' onHashProgress' getCRC32' getMD5' getSHA1)) {  		rhash.ed2k = HashToString (hash' 0' 16);  		//if (getCRC32) rhash.crc32 = HashToString(hash' 16' 4);  		if (getMD5)  			rhash.md5 = HashToString (hash' 20' 16);  		if (getSHA1)  			rhash.sha1 = HashToString (hash' 36' 20);  		gotED2k = getED2k;  		gotMD5 = getMD5;  		gotSHA1 = getSHA1;  	}  	else {  		rhash.ed2k = string.Empty;  		rhash.crc32 = string.Empty;  		rhash.md5 = string.Empty;  		rhash.sha1 = string.Empty;  	}  }  else  	stillNeedInfo = true;  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (UseDll ()) {  	byte[] hash = new byte[56];  	if (CalculateHashes_dll (strPath' ref hash' onHashProgress' getCRC32' getMD5' getSHA1)) {  		rhash.ed2k = HashToString (hash' 0' 16);  		//if (getCRC32) rhash.crc32 = HashToString(hash' 16' 4);  		if (getMD5)  			rhash.md5 = HashToString (hash' 20' 16);  		if (getSHA1)  			rhash.sha1 = HashToString (hash' 36' 20);  		gotED2k = getED2k;  		gotMD5 = getMD5;  		gotSHA1 = getSHA1;  	}  	else {  		rhash.ed2k = string.Empty;  		rhash.crc32 = string.Empty;  		rhash.md5 = string.Empty;  		rhash.sha1 = string.Empty;  	}  }  else  	stillNeedInfo = true;  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (UseDll ()) {  	byte[] hash = new byte[56];  	if (CalculateHashes_dll (strPath' ref hash' onHashProgress' getCRC32' getMD5' getSHA1)) {  		rhash.ed2k = HashToString (hash' 0' 16);  		//if (getCRC32) rhash.crc32 = HashToString(hash' 16' 4);  		if (getMD5)  			rhash.md5 = HashToString (hash' 20' 16);  		if (getSHA1)  			rhash.sha1 = HashToString (hash' 36' 20);  		gotED2k = getED2k;  		gotMD5 = getMD5;  		gotSHA1 = getSHA1;  	}  	else {  		rhash.ed2k = string.Empty;  		rhash.crc32 = string.Empty;  		rhash.md5 = string.Empty;  		rhash.sha1 = string.Empty;  	}  }  else  	stillNeedInfo = true;  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (CalculateHashes_dll (strPath' ref hash' onHashProgress' getCRC32' getMD5' getSHA1)) {  	rhash.ed2k = HashToString (hash' 0' 16);  	//if (getCRC32) rhash.crc32 = HashToString(hash' 16' 4);  	if (getMD5)  		rhash.md5 = HashToString (hash' 20' 16);  	if (getSHA1)  		rhash.sha1 = HashToString (hash' 36' 20);  	gotED2k = getED2k;  	gotMD5 = getMD5;  	gotSHA1 = getSHA1;  }  else {  	rhash.ed2k = string.Empty;  	rhash.crc32 = string.Empty;  	rhash.md5 = string.Empty;  	rhash.sha1 = string.Empty;  }  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (CalculateHashes_dll (strPath' ref hash' onHashProgress' getCRC32' getMD5' getSHA1)) {  	rhash.ed2k = HashToString (hash' 0' 16);  	//if (getCRC32) rhash.crc32 = HashToString(hash' 16' 4);  	if (getMD5)  		rhash.md5 = HashToString (hash' 20' 16);  	if (getSHA1)  		rhash.sha1 = HashToString (hash' 36' 20);  	gotED2k = getED2k;  	gotMD5 = getMD5;  	gotSHA1 = getSHA1;  }  else {  	rhash.ed2k = string.Empty;  	rhash.crc32 = string.Empty;  	rhash.md5 = string.Empty;  	rhash.sha1 = string.Empty;  }  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (CalculateHashes_dll (strPath' ref hash' onHashProgress' getCRC32' getMD5' getSHA1)) {  	rhash.ed2k = HashToString (hash' 0' 16);  	//if (getCRC32) rhash.crc32 = HashToString(hash' 16' 4);  	if (getMD5)  		rhash.md5 = HashToString (hash' 20' 16);  	if (getSHA1)  		rhash.sha1 = HashToString (hash' 36' 20);  	gotED2k = getED2k;  	gotMD5 = getMD5;  	gotSHA1 = getSHA1;  }  else {  	rhash.ed2k = string.Empty;  	rhash.crc32 = string.Empty;  	rhash.md5 = string.Empty;  	rhash.sha1 = string.Empty;  }  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (CalculateHashes_dll (strPath' ref hash' onHashProgress' getCRC32' getMD5' getSHA1)) {  	rhash.ed2k = HashToString (hash' 0' 16);  	//if (getCRC32) rhash.crc32 = HashToString(hash' 16' 4);  	if (getMD5)  		rhash.md5 = HashToString (hash' 20' 16);  	if (getSHA1)  		rhash.sha1 = HashToString (hash' 36' 20);  	gotED2k = getED2k;  	gotMD5 = getMD5;  	gotSHA1 = getSHA1;  }  else {  	rhash.ed2k = string.Empty;  	rhash.crc32 = string.Empty;  	rhash.md5 = string.Empty;  	rhash.sha1 = string.Empty;  }  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (CalculateHashes_dll (strPath' ref hash' onHashProgress' getCRC32' getMD5' getSHA1)) {  	rhash.ed2k = HashToString (hash' 0' 16);  	//if (getCRC32) rhash.crc32 = HashToString(hash' 16' 4);  	if (getMD5)  		rhash.md5 = HashToString (hash' 20' 16);  	if (getSHA1)  		rhash.sha1 = HashToString (hash' 36' 20);  	gotED2k = getED2k;  	gotMD5 = getMD5;  	gotSHA1 = getSHA1;  }  else {  	rhash.ed2k = string.Empty;  	rhash.crc32 = string.Empty;  	rhash.md5 = string.Empty;  	rhash.sha1 = string.Empty;  }  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes,The following statement contains a magic number: rhash.ed2k = HashToString (hash' 0' 16);  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (getMD5)  	rhash.md5 = HashToString (hash' 20' 16);  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (getMD5)  	rhash.md5 = HashToString (hash' 20' 16);  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes,The following statement contains a magic number: rhash.md5 = HashToString (hash' 20' 16);  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes,The following statement contains a magic number: rhash.md5 = HashToString (hash' 20' 16);  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (getSHA1)  	rhash.sha1 = HashToString (hash' 36' 20);  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes,The following statement contains a magic number: if (getSHA1)  	rhash.sha1 = HashToString (hash' 36' 20);  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes,The following statement contains a magic number: rhash.sha1 = HashToString (hash' 36' 20);  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes,The following statement contains a magic number: rhash.sha1 = HashToString (hash' 36' 20);  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes_here,The following statement contains a magic number: while (nBytesRemaining > 0) {  	iChunkCount++;  	//logger.Trace("Hashing Chunk: " + iChunkCount.ToString());  	int nBytesRead = fs.Read (ByteArray' 0' nBytesToRead);  	if (getED2k) {  		byte[] baHash = md4.ComputeHash (ByteArray' 0' nBytesRead);  		int j = (int)((iChunkCount - 1) * 16);  		for (int i = 0; i < 16; i++)  			baED2KHash [j + i] = baHash [i];  	}  	if (getMD5)  		md5.TransformBlock (ByteArray' 0' nBytesRead' ByteArray' 0);  	if (getSHA1)  		sha1.TransformBlock (ByteArray' 0' nBytesRead' ByteArray' 0);  	if (getCRC32)  		crc32.TransformBlock (ByteArray' 0' nBytesRead' ByteArray' 0);  	int percentComplete = (int)((float)iChunkCount / (float)nBlocks * 100);  	if (onHashProgress != null)  		onHashProgress (strPath' percentComplete);  	iOffSet += lChunkSize;  	nBytesRemaining = nBytes - iOffSet;  	if (nBytesRemaining < lChunkSize)  		nBytesToRead = (int)nBytesRemaining;  }  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes_here,The following statement contains a magic number: while (nBytesRemaining > 0) {  	iChunkCount++;  	//logger.Trace("Hashing Chunk: " + iChunkCount.ToString());  	int nBytesRead = fs.Read (ByteArray' 0' nBytesToRead);  	if (getED2k) {  		byte[] baHash = md4.ComputeHash (ByteArray' 0' nBytesRead);  		int j = (int)((iChunkCount - 1) * 16);  		for (int i = 0; i < 16; i++)  			baED2KHash [j + i] = baHash [i];  	}  	if (getMD5)  		md5.TransformBlock (ByteArray' 0' nBytesRead' ByteArray' 0);  	if (getSHA1)  		sha1.TransformBlock (ByteArray' 0' nBytesRead' ByteArray' 0);  	if (getCRC32)  		crc32.TransformBlock (ByteArray' 0' nBytesRead' ByteArray' 0);  	int percentComplete = (int)((float)iChunkCount / (float)nBlocks * 100);  	if (onHashProgress != null)  		onHashProgress (strPath' percentComplete);  	iOffSet += lChunkSize;  	nBytesRemaining = nBytes - iOffSet;  	if (nBytesRemaining < lChunkSize)  		nBytesToRead = (int)nBytesRemaining;  }  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes_here,The following statement contains a magic number: while (nBytesRemaining > 0) {  	iChunkCount++;  	//logger.Trace("Hashing Chunk: " + iChunkCount.ToString());  	int nBytesRead = fs.Read (ByteArray' 0' nBytesToRead);  	if (getED2k) {  		byte[] baHash = md4.ComputeHash (ByteArray' 0' nBytesRead);  		int j = (int)((iChunkCount - 1) * 16);  		for (int i = 0; i < 16; i++)  			baED2KHash [j + i] = baHash [i];  	}  	if (getMD5)  		md5.TransformBlock (ByteArray' 0' nBytesRead' ByteArray' 0);  	if (getSHA1)  		sha1.TransformBlock (ByteArray' 0' nBytesRead' ByteArray' 0);  	if (getCRC32)  		crc32.TransformBlock (ByteArray' 0' nBytesRead' ByteArray' 0);  	int percentComplete = (int)((float)iChunkCount / (float)nBlocks * 100);  	if (onHashProgress != null)  		onHashProgress (strPath' percentComplete);  	iOffSet += lChunkSize;  	nBytesRemaining = nBytes - iOffSet;  	if (nBytesRemaining < lChunkSize)  		nBytesToRead = (int)nBytesRemaining;  }  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes_here,The following statement contains a magic number: if (getED2k) {  	byte[] baHash = md4.ComputeHash (ByteArray' 0' nBytesRead);  	int j = (int)((iChunkCount - 1) * 16);  	for (int i = 0; i < 16; i++)  		baED2KHash [j + i] = baHash [i];  }  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes_here,The following statement contains a magic number: if (getED2k) {  	byte[] baHash = md4.ComputeHash (ByteArray' 0' nBytesRead);  	int j = (int)((iChunkCount - 1) * 16);  	for (int i = 0; i < 16; i++)  		baED2KHash [j + i] = baHash [i];  }  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes_here,The following statement contains a magic number: for (int i = 0; i < 16; i++)  	baED2KHash [j + i] = baHash [i];  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes_here,The following statement contains a magic number: if (onHashProgress != null)  	onHashProgress (strPath' 100);  
Magic Number,JMMFileHelper,Hasher,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\Hasher.cs,CalculateHashes_here,The following statement contains a magic number: onHashProgress (strPath' 100);  
Magic Number,JMMFileHelper,MD4,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4,The following statement contains a magic number: HashSizeValue = 128;  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Managed,The following statement contains a magic number: state = new uint[4];  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Managed,The following statement contains a magic number: count = new uint[2];  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Managed,The following statement contains a magic number: buffer = new byte[64];  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Managed,The following statement contains a magic number: digest = new byte[16];  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Managed,The following statement contains a magic number: x = new uint[16];  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Initialize,The following statement contains a magic number: state [2] = 0x98badcfe;  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Initialize,The following statement contains a magic number: state [3] = 0x10325476;  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Initialize,The following statement contains a magic number: Array.Clear (buffer' 0' 64);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Initialize,The following statement contains a magic number: Array.Clear (x' 0' 16);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,HashCore,The following statement contains a magic number: count [0] += (uint)(cbSize << 3);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,HashCore,The following statement contains a magic number: if (count [0] < (cbSize << 3))  	count [1]++;  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,HashCore,The following statement contains a magic number: count [1] += (uint)(cbSize >> 29);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,HashCore,The following statement contains a magic number: if (cbSize >= partLen) {  	//MD4_memcpy((POINTER)&context->buffer[index]' (POINTER)input' partLen);  	Buffer.BlockCopy (array' ibStart' buffer' index' partLen);  	MD4Transform (state' buffer' 0);  	for (i = partLen; i + 63 < cbSize; i += 64) {  		// MD4Transform (context->state' &input[i]);  		MD4Transform (state' array' i);  	}  	index = 0;  }  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,HashCore,The following statement contains a magic number: if (cbSize >= partLen) {  	//MD4_memcpy((POINTER)&context->buffer[index]' (POINTER)input' partLen);  	Buffer.BlockCopy (array' ibStart' buffer' index' partLen);  	MD4Transform (state' buffer' 0);  	for (i = partLen; i + 63 < cbSize; i += 64) {  		// MD4Transform (context->state' &input[i]);  		MD4Transform (state' array' i);  	}  	index = 0;  }  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,HashCore,The following statement contains a magic number: for (i = partLen; i + 63 < cbSize; i += 64) {  	// MD4Transform (context->state' &input[i]);  	MD4Transform (state' array' i);  }  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,HashCore,The following statement contains a magic number: for (i = partLen; i + 63 < cbSize; i += 64) {  	// MD4Transform (context->state' &input[i]);  	MD4Transform (state' array' i);  }  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,HashCore,The following statement contains a magic number: i += 64
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,HashFinal,The following statement contains a magic number: HashCore (bits' 0' 8);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,ROL,The following statement contains a magic number: return (uint)(((x) << (n)) | ((x) >> (32 - (n))));  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Encode,The following statement contains a magic number: for (int i = 0' j = 0; j < output.Length; i++' j += 4) {  	output [j] = (byte)(input [i]);  	output [j + 1] = (byte)(input [i] >> 8);  	output [j + 2] = (byte)(input [i] >> 16);  	output [j + 3] = (byte)(input [i] >> 24);  }  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Encode,The following statement contains a magic number: for (int i = 0' j = 0; j < output.Length; i++' j += 4) {  	output [j] = (byte)(input [i]);  	output [j + 1] = (byte)(input [i] >> 8);  	output [j + 2] = (byte)(input [i] >> 16);  	output [j + 3] = (byte)(input [i] >> 24);  }  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Encode,The following statement contains a magic number: for (int i = 0' j = 0; j < output.Length; i++' j += 4) {  	output [j] = (byte)(input [i]);  	output [j + 1] = (byte)(input [i] >> 8);  	output [j + 2] = (byte)(input [i] >> 16);  	output [j + 3] = (byte)(input [i] >> 24);  }  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Encode,The following statement contains a magic number: for (int i = 0' j = 0; j < output.Length; i++' j += 4) {  	output [j] = (byte)(input [i]);  	output [j + 1] = (byte)(input [i] >> 8);  	output [j + 2] = (byte)(input [i] >> 16);  	output [j + 3] = (byte)(input [i] >> 24);  }  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Encode,The following statement contains a magic number: for (int i = 0' j = 0; j < output.Length; i++' j += 4) {  	output [j] = (byte)(input [i]);  	output [j + 1] = (byte)(input [i] >> 8);  	output [j + 2] = (byte)(input [i] >> 16);  	output [j + 3] = (byte)(input [i] >> 24);  }  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Encode,The following statement contains a magic number: for (int i = 0' j = 0; j < output.Length; i++' j += 4) {  	output [j] = (byte)(input [i]);  	output [j + 1] = (byte)(input [i] >> 8);  	output [j + 2] = (byte)(input [i] >> 16);  	output [j + 3] = (byte)(input [i] >> 24);  }  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Encode,The following statement contains a magic number: j += 4
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Encode,The following statement contains a magic number: output [j + 1] = (byte)(input [i] >> 8);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Encode,The following statement contains a magic number: output [j + 2] = (byte)(input [i] >> 16);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Encode,The following statement contains a magic number: output [j + 2] = (byte)(input [i] >> 16);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Encode,The following statement contains a magic number: output [j + 3] = (byte)(input [i] >> 24);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Encode,The following statement contains a magic number: output [j + 3] = (byte)(input [i] >> 24);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Decode,The following statement contains a magic number: for (int i = 0' j = index; i < output.Length; i++' j += 4) {  	output [i] = (uint)((input [j]) | (input [j + 1] << 8) | (input [j + 2] << 16) | (input [j + 3] << 24));  }  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Decode,The following statement contains a magic number: for (int i = 0' j = index; i < output.Length; i++' j += 4) {  	output [i] = (uint)((input [j]) | (input [j + 1] << 8) | (input [j + 2] << 16) | (input [j + 3] << 24));  }  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Decode,The following statement contains a magic number: for (int i = 0' j = index; i < output.Length; i++' j += 4) {  	output [i] = (uint)((input [j]) | (input [j + 1] << 8) | (input [j + 2] << 16) | (input [j + 3] << 24));  }  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Decode,The following statement contains a magic number: for (int i = 0' j = index; i < output.Length; i++' j += 4) {  	output [i] = (uint)((input [j]) | (input [j + 1] << 8) | (input [j + 2] << 16) | (input [j + 3] << 24));  }  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Decode,The following statement contains a magic number: for (int i = 0' j = index; i < output.Length; i++' j += 4) {  	output [i] = (uint)((input [j]) | (input [j + 1] << 8) | (input [j + 2] << 16) | (input [j + 3] << 24));  }  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Decode,The following statement contains a magic number: for (int i = 0' j = index; i < output.Length; i++' j += 4) {  	output [i] = (uint)((input [j]) | (input [j + 1] << 8) | (input [j + 2] << 16) | (input [j + 3] << 24));  }  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Decode,The following statement contains a magic number: j += 4
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Decode,The following statement contains a magic number: output [i] = (uint)((input [j]) | (input [j + 1] << 8) | (input [j + 2] << 16) | (input [j + 3] << 24));  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Decode,The following statement contains a magic number: output [i] = (uint)((input [j]) | (input [j + 1] << 8) | (input [j + 2] << 16) | (input [j + 3] << 24));  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Decode,The following statement contains a magic number: output [i] = (uint)((input [j]) | (input [j + 1] << 8) | (input [j + 2] << 16) | (input [j + 3] << 24));  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Decode,The following statement contains a magic number: output [i] = (uint)((input [j]) | (input [j + 1] << 8) | (input [j + 2] << 16) | (input [j + 3] << 24));  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,Decode,The following statement contains a magic number: output [i] = (uint)((input [j]) | (input [j + 1] << 8) | (input [j + 2] << 16) | (input [j + 3] << 24));  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref c' d' a' b' x [2]' S13);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref b' c' d' a' x [3]' S14);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref a' b' c' d' x [4]' S11);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref d' a' b' c' x [5]' S12);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref c' d' a' b' x [6]' S13);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref b' c' d' a' x [7]' S14);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref a' b' c' d' x [8]' S11);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref d' a' b' c' x [9]' S12);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref c' d' a' b' x [10]' S13);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref b' c' d' a' x [11]' S14);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref a' b' c' d' x [12]' S11);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref d' a' b' c' x [13]' S12);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref c' d' a' b' x [14]' S13);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF (ref b' c' d' a' x [15]' S14);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref d' a' b' c' x [4]' S22);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref c' d' a' b' x [8]' S23);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref b' c' d' a' x [12]' S24);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref d' a' b' c' x [5]' S22);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref c' d' a' b' x [9]' S23);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref b' c' d' a' x [13]' S24);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref a' b' c' d' x [2]' S21);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref d' a' b' c' x [6]' S22);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref c' d' a' b' x [10]' S23);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref b' c' d' a' x [14]' S24);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref a' b' c' d' x [3]' S21);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref d' a' b' c' x [7]' S22);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref c' d' a' b' x [11]' S23);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG (ref b' c' d' a' x [15]' S24);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref d' a' b' c' x [8]' S32);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref c' d' a' b' x [4]' S33);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref b' c' d' a' x [12]' S34);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref a' b' c' d' x [2]' S31);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref d' a' b' c' x [10]' S32);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref c' d' a' b' x [6]' S33);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref b' c' d' a' x [14]' S34);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref d' a' b' c' x [9]' S32);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref c' d' a' b' x [5]' S33);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref b' c' d' a' x [13]' S34);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref a' b' c' d' x [3]' S31);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref d' a' b' c' x [11]' S32);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref c' d' a' b' x [7]' S33);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH (ref b' c' d' a' x [15]' S34);  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: state [2] += c;  
Magic Number,JMMFileHelper,MD4Managed,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: state [3] += d;  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,GetLanguageFromCode3,The following statement contains a magic number: for (int x = 0; x < languages.GetUpperBound (0); x++) {  	if (languages [x' 2] == code3)  		return languages [x' 0];  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,GetLanguageFromCode3,The following statement contains a magic number: if (languages [x' 2] == code3)  	return languages [x' 0];  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,TranslateAudioStream,The following statement contains a magic number: if ((!string.IsNullOrEmpty (fset)) && (fset == "Little / Signed") && (s.Codec == "pcm") && (bitdepth == 16)) {  	s.Profile = "pcm_s16le";  }  else if ((!string.IsNullOrEmpty (fset)) && (fset == "Big / Signed") && (s.Codec == "pcm") && (bitdepth == 16)) {  	s.Profile = "pcm_s16be";  }  else if ((!string.IsNullOrEmpty (fset)) && (fset == "Little / Unsigned") && (s.Codec == "pcm") && (bitdepth == 8)) {  	s.Profile = "pcm_u8";  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,TranslateAudioStream,The following statement contains a magic number: if ((!string.IsNullOrEmpty (fset)) && (fset == "Little / Signed") && (s.Codec == "pcm") && (bitdepth == 16)) {  	s.Profile = "pcm_s16le";  }  else if ((!string.IsNullOrEmpty (fset)) && (fset == "Big / Signed") && (s.Codec == "pcm") && (bitdepth == 16)) {  	s.Profile = "pcm_s16be";  }  else if ((!string.IsNullOrEmpty (fset)) && (fset == "Little / Unsigned") && (s.Codec == "pcm") && (bitdepth == 8)) {  	s.Profile = "pcm_u8";  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,TranslateAudioStream,The following statement contains a magic number: if ((!string.IsNullOrEmpty (fset)) && (fset == "Little / Signed") && (s.Codec == "pcm") && (bitdepth == 16)) {  	s.Profile = "pcm_s16le";  }  else if ((!string.IsNullOrEmpty (fset)) && (fset == "Big / Signed") && (s.Codec == "pcm") && (bitdepth == 16)) {  	s.Profile = "pcm_s16be";  }  else if ((!string.IsNullOrEmpty (fset)) && (fset == "Little / Unsigned") && (s.Codec == "pcm") && (bitdepth == 8)) {  	s.Profile = "pcm_u8";  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,TranslateAudioStream,The following statement contains a magic number: if ((!string.IsNullOrEmpty (fset)) && (fset == "Big / Signed") && (s.Codec == "pcm") && (bitdepth == 16)) {  	s.Profile = "pcm_s16be";  }  else if ((!string.IsNullOrEmpty (fset)) && (fset == "Little / Unsigned") && (s.Codec == "pcm") && (bitdepth == 8)) {  	s.Profile = "pcm_u8";  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,TranslateAudioStream,The following statement contains a magic number: if ((!string.IsNullOrEmpty (fset)) && (fset == "Big / Signed") && (s.Codec == "pcm") && (bitdepth == 16)) {  	s.Profile = "pcm_s16be";  }  else if ((!string.IsNullOrEmpty (fset)) && (fset == "Little / Unsigned") && (s.Codec == "pcm") && (bitdepth == 8)) {  	s.Profile = "pcm_u8";  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,TranslateAudioStream,The following statement contains a magic number: if ((!string.IsNullOrEmpty (fset)) && (fset == "Little / Unsigned") && (s.Codec == "pcm") && (bitdepth == 8)) {  	s.Profile = "pcm_u8";  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: try {  	mi.Open (filename);  	ex = 1;  	Media m = new Media ();  	Part p = new Part ();  	Stream VideoStream = null;  	int video_count = mi.GetInt (StreamKind.General' 0' "VideoCount");  	int audio_count = mi.GetInt (StreamKind.General' 0' "AudioCount");  	int text_count = mi.GetInt (StreamKind.General' 0' "TextCount");  	m.Duration = p.Duration = mi.Get (StreamKind.General' 0' "Duration");  	m.Container = p.Container = TranslateContainer (mi.Get (StreamKind.General' 0' "Format"));  	string codid = mi.Get (StreamKind.General' 0' "CodecID");  	if ((!string.IsNullOrEmpty (codid)) && (codid.Trim ().ToLower () == "qt"))  		m.Container = p.Container = "mov";  	int brate = mi.GetInt (StreamKind.General' 0' "BitRate");  	if (brate != 0)  		m.Bitrate = Math.Round (brate / 1000F).ToString (CultureInfo.InvariantCulture);  	p.Size = mi.Get (StreamKind.General' 0' "FileSize");  	//m.Id = p.Id = mi.Get(StreamKind.General' 0' "UniqueID");  	ex = 2;  	List<Stream> streams = new List<Stream> ();  	int iidx = 0;  	if (video_count > 0) {  		for (int x = 0; x < video_count; x++) {  			Stream s = TranslateVideoStream (mi' x);  			if (x == 0) {  				VideoStream = s;  				m.Width = s.Width;  				m.Height = s.Height;  				if (!string.IsNullOrEmpty (m.Height)) {  					if (!string.IsNullOrEmpty (m.Width)) {  						m.VideoResolution = GetResolution (int.Parse (m.Width)' int.Parse (m.Height));  						m.AspectRatio = GetAspectRatio (float.Parse (m.Width)' float.Parse (m.Height)' s.PA);  					}  				}  				if (!string.IsNullOrEmpty (s.FrameRate)) {  					float fr = System.Convert.ToSingle (s.FrameRate);  					m.VideoFrameRate = ((int)Math.Round (fr)).ToString (CultureInfo.InvariantCulture);  					if (!string.IsNullOrEmpty (s.ScanType)) {  						if (s.ScanType.ToLower ().Contains ("int"))  							m.VideoFrameRate += "i";  						else  							m.VideoFrameRate += "p";  					}  					else  						m.VideoFrameRate += "p";  					if ((m.VideoFrameRate == "25p") || (m.VideoFrameRate == "25i"))  						m.VideoFrameRate = "PAL";  					else if ((m.VideoFrameRate == "30p") || (m.VideoFrameRate == "30i"))  						m.VideoFrameRate = "NTSC";  				}  				m.VideoCodec = s.Codec;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (video_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	ex = 3;  	int totalsoundrate = 0;  	if (audio_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateAudioStream (mi' x);  			if ((s.Codec == "adpcm") && (p.Container == "flv"))  				s.Codec = "adpcm_swf";  			if (x == 0) {  				m.AudioCodec = s.Codec;  				m.AudioChannels = s.Channels;  				if (!string.IsNullOrEmpty (m.Duration) && !string.IsNullOrEmpty (s.Duration)) {  					if (int.Parse (s.Duration) > int.Parse (m.Duration))  						m.Duration = p.Duration = s.Duration;  				}  				if (audio_count == 1) {  					s.Default = null;  					s.Forced = null;  				}  			}  			if (!string.IsNullOrEmpty (s.Bitrate)) {  				totalsoundrate += int.Parse (s.Bitrate);  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  			streams.Add (s);  		}  	}  	if ((VideoStream != null) && (string.IsNullOrEmpty (VideoStream.Bitrate) && (!string.IsNullOrEmpty (m.Bitrate)))) {  		VideoStream.Bitrate = (int.Parse (m.Bitrate) - totalsoundrate).ToString (CultureInfo.InvariantCulture);  	}  	ex = 4;  	if (text_count > 0) {  		for (int x = 0; x < audio_count; x++) {  			Stream s = TranslateTextStream (mi' x);  			streams.Add (s);  			if (text_count == 1) {  				s.Default = null;  				s.Forced = null;  			}  			if (m.Container != "mkv") {  				s.Index = iidx.ToString (CultureInfo.InvariantCulture);  				iidx++;  			}  		}  	}  	ex = 5;  	m.Parts = new List<Part> ();  	m.Parts.Add (p);  	bool over = false;  	if (m.Container == "mkv") {  		int val = int.MaxValue;  		foreach (Stream s in streams) {  			if (string.IsNullOrEmpty (s.Index)) {  				over = true;  				break;  			}  			s.idx = int.Parse (s.Index);  			if (s.idx < val)  				val = s.idx;  		}  		if ((val != 0) && (!over)) {  			foreach (Stream s in streams) {  				s.idx = s.idx - val;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		else if (over) {  			int xx = 0;  			foreach (Stream s in streams) {  				s.idx = xx++;  				s.Index = s.idx.ToString (CultureInfo.InvariantCulture);  			}  		}  		streams = streams.OrderBy (a => a.idx).ToList ();  	}  	ex = 6;  	p.Streams = streams;  	if ((p.Container == "mp4") || (p.Container == "mov")) {  		p.Has64bitOffsets = "0";  		p.OptimizedForStreaming = "0";  		m.OptimizedForStreaming = "0";  		byte[] buffer = new byte[8];  		FileStream fs = File.OpenRead (filename);  		fs.Read (buffer' 0' 4);  		int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  		fs.Seek (siz' SeekOrigin.Begin);  		fs.Read (buffer' 0' 8);  		if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  			siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  			fs.Seek (siz' SeekOrigin.Current);  			fs.Read (buffer' 0' 8);  		}  		if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  			p.OptimizedForStreaming = "1";  			m.OptimizedForStreaming = "1";  			siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  			buffer = new byte[siz];  			fs.Read (buffer' 0' siz);  			int opos;  			int oposmax;  			if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  							if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  								p.Has64bitOffsets = "1";  							}  						}  					}  				}  			}  		}  	}  	ex = 7;  	return m;  }  catch (Exception e) {  	throw new Exception (ex + ":" + e.Message' e);  	return null;  }  finally {  	mi.Close ();  	GC.Collect ();  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: ex = 2;  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: ex = 3;  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: ex = 4;  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: ex = 5;  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: ex = 6;  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((p.Container == "mp4") || (p.Container == "mov")) {  	p.Has64bitOffsets = "0";  	p.OptimizedForStreaming = "0";  	m.OptimizedForStreaming = "0";  	byte[] buffer = new byte[8];  	FileStream fs = File.OpenRead (filename);  	fs.Read (buffer' 0' 4);  	int siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3];  	fs.Seek (siz' SeekOrigin.Begin);  	fs.Read (buffer' 0' 8);  	if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  		siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  		fs.Seek (siz' SeekOrigin.Current);  		fs.Read (buffer' 0' 8);  	}  	if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  		p.OptimizedForStreaming = "1";  		m.OptimizedForStreaming = "1";  		siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  		buffer = new byte[siz];  		fs.Read (buffer' 0' siz);  		int opos;  		int oposmax;  		if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  						if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  							p.Has64bitOffsets = "1";  						}  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: fs.Read (buffer' 0' 4);  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: fs.Read (buffer' 0' 8);  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  	siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  	fs.Seek (siz' SeekOrigin.Current);  	fs.Read (buffer' 0' 8);  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  	siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  	fs.Seek (siz' SeekOrigin.Current);  	fs.Read (buffer' 0' 8);  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  	siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  	fs.Seek (siz' SeekOrigin.Current);  	fs.Read (buffer' 0' 8);  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  	siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  	fs.Seek (siz' SeekOrigin.Current);  	fs.Read (buffer' 0' 8);  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  	siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  	fs.Seek (siz' SeekOrigin.Current);  	fs.Read (buffer' 0' 8);  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  	siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  	fs.Seek (siz' SeekOrigin.Current);  	fs.Read (buffer' 0' 8);  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  	siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  	fs.Seek (siz' SeekOrigin.Current);  	fs.Read (buffer' 0' 8);  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  	siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  	fs.Seek (siz' SeekOrigin.Current);  	fs.Read (buffer' 0' 8);  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  	siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  	fs.Seek (siz' SeekOrigin.Current);  	fs.Read (buffer' 0' 8);  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  	siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  	fs.Seek (siz' SeekOrigin.Current);  	fs.Read (buffer' 0' 8);  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((buffer [4] == 'f') && (buffer [5] == 'r') && (buffer [6] == 'e') && (buffer [7] == 'e')) {  	siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  	fs.Seek (siz' SeekOrigin.Current);  	fs.Read (buffer' 0' 8);  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: siz = buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3] - 8;  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: fs.Read (buffer' 0' 8);  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  	p.OptimizedForStreaming = "1";  	m.OptimizedForStreaming = "1";  	siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  	buffer = new byte[siz];  	fs.Read (buffer' 0' siz);  	int opos;  	int oposmax;  	if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  		if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  						p.Has64bitOffsets = "1";  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  	p.OptimizedForStreaming = "1";  	m.OptimizedForStreaming = "1";  	siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  	buffer = new byte[siz];  	fs.Read (buffer' 0' siz);  	int opos;  	int oposmax;  	if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  		if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  						p.Has64bitOffsets = "1";  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  	p.OptimizedForStreaming = "1";  	m.OptimizedForStreaming = "1";  	siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  	buffer = new byte[siz];  	fs.Read (buffer' 0' siz);  	int opos;  	int oposmax;  	if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  		if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  						p.Has64bitOffsets = "1";  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  	p.OptimizedForStreaming = "1";  	m.OptimizedForStreaming = "1";  	siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  	buffer = new byte[siz];  	fs.Read (buffer' 0' siz);  	int opos;  	int oposmax;  	if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  		if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  						p.Has64bitOffsets = "1";  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  	p.OptimizedForStreaming = "1";  	m.OptimizedForStreaming = "1";  	siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  	buffer = new byte[siz];  	fs.Read (buffer' 0' siz);  	int opos;  	int oposmax;  	if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  		if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  						p.Has64bitOffsets = "1";  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  	p.OptimizedForStreaming = "1";  	m.OptimizedForStreaming = "1";  	siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  	buffer = new byte[siz];  	fs.Read (buffer' 0' siz);  	int opos;  	int oposmax;  	if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  		if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  						p.Has64bitOffsets = "1";  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  	p.OptimizedForStreaming = "1";  	m.OptimizedForStreaming = "1";  	siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  	buffer = new byte[siz];  	fs.Read (buffer' 0' siz);  	int opos;  	int oposmax;  	if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  		if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  						p.Has64bitOffsets = "1";  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  	p.OptimizedForStreaming = "1";  	m.OptimizedForStreaming = "1";  	siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  	buffer = new byte[siz];  	fs.Read (buffer' 0' siz);  	int opos;  	int oposmax;  	if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  		if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  						p.Has64bitOffsets = "1";  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  	p.OptimizedForStreaming = "1";  	m.OptimizedForStreaming = "1";  	siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  	buffer = new byte[siz];  	fs.Read (buffer' 0' siz);  	int opos;  	int oposmax;  	if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  		if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  						p.Has64bitOffsets = "1";  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: if ((buffer [4] == 'm') && (buffer [5] == 'o') && (buffer [6] == 'o') && (buffer [7] == 'v')) {  	p.OptimizedForStreaming = "1";  	m.OptimizedForStreaming = "1";  	siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  	buffer = new byte[siz];  	fs.Read (buffer' 0' siz);  	int opos;  	int oposmax;  	if (FindInBuffer ("trak"' 0' siz' buffer' out opos' out oposmax)) {  		if (FindInBuffer ("mdia"' opos' oposmax' buffer' out opos' out oposmax)) {  			if (FindInBuffer ("minf"' opos' oposmax' buffer' out opos' out oposmax)) {  				if (FindInBuffer ("stbl"' opos' oposmax' buffer' out opos' out oposmax)) {  					if (FindInBuffer ("co64"' opos' oposmax' buffer' out opos' out oposmax)) {  						p.Has64bitOffsets = "1";  					}  				}  			}  		}  	}  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: siz = (buffer [0] << 24 | buffer [1] << 16 | buffer [2] << 8 | buffer [3]) - 8;  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,Convert,The following statement contains a magic number: ex = 7;  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: if (start + 8 >= max)  	return false;  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: do {  	if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  		pos = start + 8;  		posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  		return true;  	}  	start += (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]);  }  while (start < max);  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: do {  	if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  		pos = start + 8;  		posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  		return true;  	}  	start += (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]);  }  while (start < max);  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: do {  	if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  		pos = start + 8;  		posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  		return true;  	}  	start += (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]);  }  while (start < max);  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: do {  	if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  		pos = start + 8;  		posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  		return true;  	}  	start += (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]);  }  while (start < max);  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: do {  	if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  		pos = start + 8;  		posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  		return true;  	}  	start += (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]);  }  while (start < max);  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: do {  	if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  		pos = start + 8;  		posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  		return true;  	}  	start += (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]);  }  while (start < max);  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: do {  	if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  		pos = start + 8;  		posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  		return true;  	}  	start += (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]);  }  while (start < max);  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: do {  	if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  		pos = start + 8;  		posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  		return true;  	}  	start += (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]);  }  while (start < max);  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: do {  	if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  		pos = start + 8;  		posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  		return true;  	}  	start += (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]);  }  while (start < max);  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: do {  	if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  		pos = start + 8;  		posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  		return true;  	}  	start += (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]);  }  while (start < max);  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: do {  	if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  		pos = start + 8;  		posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  		return true;  	}  	start += (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]);  }  while (start < max);  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: do {  	if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  		pos = start + 8;  		posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  		return true;  	}  	start += (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]);  }  while (start < max);  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: do {  	if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  		pos = start + 8;  		posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  		return true;  	}  	start += (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]);  }  while (start < max);  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: do {  	if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  		pos = start + 8;  		posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  		return true;  	}  	start += (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]);  }  while (start < max);  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: do {  	if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  		pos = start + 8;  		posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  		return true;  	}  	start += (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]);  }  while (start < max);  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: do {  	if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  		pos = start + 8;  		posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  		return true;  	}  	start += (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]);  }  while (start < max);  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: do {  	if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  		pos = start + 8;  		posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  		return true;  	}  	start += (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]);  }  while (start < max);  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  	pos = start + 8;  	posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  	return true;  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  	pos = start + 8;  	posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  	return true;  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  	pos = start + 8;  	posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  	return true;  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  	pos = start + 8;  	posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  	return true;  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  	pos = start + 8;  	posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  	return true;  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  	pos = start + 8;  	posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  	return true;  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  	pos = start + 8;  	posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  	return true;  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  	pos = start + 8;  	posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  	return true;  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  	pos = start + 8;  	posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  	return true;  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  	pos = start + 8;  	posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  	return true;  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  	pos = start + 8;  	posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  	return true;  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: if ((buffer [start + 4] == atom [0]) && (buffer [start + 5] == atom [1]) && (buffer [start + 6] == atom [2]) && (buffer [start + 7] == atom [3])) {  	pos = start + 8;  	posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  	return true;  }  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: pos = start + 8;  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: posmax = (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]) + start;  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: start += (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]);  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: start += (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]);  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: start += (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]);  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: start += (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]);  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,FindInBuffer,The following statement contains a magic number: start += (buffer [start] << 24 | buffer [start + 1] << 16 | buffer [start + 2] << 8 | buffer [start + 3]);  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,GetResolution,The following statement contains a magic number: if (h > 720)  	return "1080";  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,GetResolution,The following statement contains a magic number: if (h > 576)  	return "720";  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,GetResolution,The following statement contains a magic number: if (h > 480)  	return "576";  
Magic Number,PlexMediaInfo,MediaConvert,C:\repos\svn2github_Japanese_Media_Manager\JMMServer\JMMFileHelper\PlexMediaInfo\Convert.cs,GetResolution,The following statement contains a magic number: if (h > 360)  	return "480";  
